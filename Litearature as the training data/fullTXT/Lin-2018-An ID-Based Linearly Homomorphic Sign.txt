An ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
SPECIAL SECTION ON RESEARCH CHALLENGES AND OPPORTUNITIES IN SECURITY AND
PRIVACY OF BLOCKCHAIN TECHNOLOGIES
Received January 11, 2018, accepted February 13, 2018, date of publication February 27, 2018, date of current version May 2, 2018.
Digital Object Identifier 10.1109/ACCESS.2018.2809426
An ID-Based Linearly Homomorphic Signature
Scheme and Its Application in Blockchain
QUN LIN1, HONGYANG YAN2, ZHENGAN HUANG 3, WENBIN CHEN3,
JIAN SHEN 4, AND YI TANG 5
1Institute of Mathematics and Statistics, Hanshan Normal University, Chaozhou 521041, China
2College of Computer and Control Engineering, Nankai University, Tianjin 300071, China
3School of Computer Science, Guangzhou University, Guangzhou 510006, China
4School of Computer and Software, Nanjing University of Information Science and Technology, Nanjing 210044, China
5School of Mathematics and Information Science, Guangzhou University, Guangzhou 510006, China
Corresponding author: Yi Tang (ytang@gzhu.edu.cn)
The work of Z. Huang was supported in part by the National Natural Science Foundation of China under Grant 61702125, in part by the
Scientific Research Foundation for Post-Doctoral Researchers of Guangzhou under Grant gdbsh2016020, in part by the Natural Science
Foundation of Guangdong Province for Distinguished Young Scholars under Grant 2014A030306020, in part by the Guangzhou Scholars
Project for Universities of Guangzhou under Grant 1201561613, in part by the Science and Technology Planning Project of Guangdong
Province, China, under Grant 2015B010129015, in part by the National Natural Science Foundation of China under Grant 61472091, in
part by the National Natural Science Foundation for Outstanding Youth Foundation under Grant 61722203, and in part by the State Key
Laboratory of Cryptology, Beijing, China. The work of W. Chen was supported by the Program for Innovative Research Team in the
Education Department of Guangdong Province under Grant 2015KCXTD014 and Grant 2016KCXTD017.
ABSTRACT Identity-based cryptosystems mean that public keys can be directly derived from user iden-
tifiers, such as telephone numbers, email addresses, and social insurance number, and so on. So they can
simplify key management procedures of certificate-based public key infrastructures and can be used to
realize authentication in blockchain. Linearly homomorphic signature schemes allow to perform linear com-
putations on authenticated data. And the correctness of the computation can be publicly verified. Although
a series of homomorphic signature schemes have been designed recently, there are few homomorphic
signature schemes designed in identity-based cryptography. In this paper, we construct a new ID-based linear
homomorphic signature scheme, which avoids the shortcomings of the use of public-key certificates. The
scheme is proved secure against existential forgery on adaptively chosen message and ID attack under the
random oracle model. The ID-based linearly homomorphic signature schemes can be applied in e-business
and cloud computing. Finally, we show how to apply it to realize authentication in blockchain.
INDEX TERMS ID-based signature, homomorphic signature, bilinear pairings, random oracle.
I. INTRODUCTION
Nowadays, people have paid attention to the importance
of information security [3]–[6], [9], [10]. The public-key
cryptography plays a critical role in information security.
As we know, certificate-based cryptosystems are most widely
deployed public-key cryptosystems. And they require that the
authenticated public-key certificate of an entity be obtained
in order to encrypt information for the entity. So these cer-
tificates need to be generated in large and distributed to many
users in communities. Furthermore, the certificates need to be
verified frequently. So the management of public-key certifi-
cates is cumbersome. In order to avoid the shortcomings of
the use of public-key certificates, Shamir introduced the con-
cept of identity-based cryptography in 1984 [1]. The idea is to
derive public keys directly from user identifiers, such as tele-
phone numbers, email addresses, and social insurance num-
ber etc.. Moreover, the corresponding private key is generated
by a combination of the user’s public key and the system-
level secret key of a central authority that is named as Private
Key Generator or PKG for short. Since then, the research
on ID-based cryptography has made great progress, such
as ID-based signature schemes [11], [28], [29], ID-based
encryption schemes [30], [31], ID-based key agreement
schemes [32], [33].
In 2002, the conception of homomorphic signature was
originally proposed by Johnson et al. [2]. The notion of
homomorphic signature is an important primitive and allows
to validate computation over authenticated data [39]–[41].
Informally, a user Alice can sign l messages {mi}li=1
and produce the signatures {σi}li=1, which can be verified
exactly as ordinary signatures. The homomorphic prop-
erty provides the special feature that given σ1, . . . , σl and
some function f : M l
→ M , anyone can compute
a signature σ on the value f (m1, . . . ,ml) without knowl-
20632
2169-3536 
 2018 IEEE. Translations and content mining are permitted for academic research only.
Personal use is also permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
VOLUME 6, 2018
https://orcid.org/0000-0003-3509-787X
https://orcid.org/0000-0003-0519-9058
https://orcid.org/0000-0003-2483-9479
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
edge of the secret signing key Sk . Homomorphic signature
schemes can be employed in electronic business and cloud
computing [16], [18], [21], [27], [36]. Nowadays, there
are many types of homomorphic signatures, such as the
linearly homomorphic signature schemes [7], [8], [13], [20],
[23], [26], the homomorphic schemes supporting polynomial
functions [12], [14], [15], and the leveled fully homomorphic
signature schemes [17], [19]. But these schemes belong to
certificate-based cryptosystems. Up to our knowledge, there
are few homomorphic signature schemes [34], [35], [37]
designed in identity-based cryptography. And the schemes
in [34] and [35] focus on network coding which can prevent
malicious nodes to produce the pollution attacks. The scheme
in [37] is designed over lattices, and it is not efficient. Since
the management of public-key certificates is cumbersome
in the certificate-based cryptosystems, it is meaningful to
design homomorphic signature schemes in identity-based
cryptosystems.
A. OUR CONTRIBUTIONS
In this paper, the concept and security model of ID-based
linearly homomorphic signature are proposed. It means that
the signer can produce a linearly homomorphic signature
in identity-based cryptosystems. Moreover, we use bilinear
groups as the underlying tool to design an ID-based linearly
homomorphic signature. The new scheme is proved secure
against existential forgery on adaptively chosen message and
ID attack in the random oracle model, and it can combine the
natures of linearly homomorphic signature and identity-based
cryptosystems.
B. ORGANIZATION
The rest of the paper is organized as follows. Section 2 con-
tains some preliminaries about bilinear maps, the short signa-
ture scheme proposed by Boneh, Lynn, and Shacham (BLS),
as well as the framework of ID-based linear homomorphic
signature schemes and the security model. Section 3 gives
a new ID-based linear homomorphic signature, and
Section 4 gives the security proof of the scheme. Finally,
Section 5 concludes this paper.
II. PRELIMINARIES
A. BILINEAR GROUPS
In this section, we briefly review the facts about bilinear
maps. Let (G1,G2) be two cyclic groups of prime order q,
in which group operations are efficiently computable.
e : G1 × G1 → G2 is a bilinear map with the following
properties:
(1) Bilinear: ∀g, h ∈ G1,∀a, b ∈ Zq, e(ga, hb) = e(g, h)ab;
(2) Non-degenerate: There exist g, h ∈ G1, such that
e(g, h) 6= 1;
(3) Computable: For all g, h ∈ G1, there exists an efficient
algorithm to compute e(g, h).
Now we introduce the Computational Diffie-Hellman
assumption in G1.
Definition 1: (CDH). Let g ∈ G1 be a random generator,
x, y ← Zq∗ be taken over the uniform choices, and λ be the
security parameter. We define the advantage of an adversary
A in solving the Computational Diffie-Hellman problem as
ADV cdh
A (λ) = Pr [A(g, gx , gy) = gxy],
where the probability is taken over the uniform choices of x, y
and the internal coin tosses of A. If for every probabilistic
polynomial-time (PPT) algorithm A, the ADV cdh
A (λ) is negli-
gible, we say that the CDH assumption holds in G1.
B. BLS SHORT SIGNATURE SCHEME
The BLS short signature scheme proposed in [22] consists
of the following algorithms: a key generation algorithm
KeyGen, a signature generation algorithm Sign and a signa-
ture verification algorithm Verify. And it uses a full-domain
hash function H : {0, 1}∗ → G1. e : G1 × G1 → G2 is a
bilinear map, and g is a random generator of G1.
KeyGen: Pick a random x ∈ Z∗q as the secret key, and
computer the public key PK = gx .
Sign: Given a secret key x, and a message m, this algorithm
outputs the signature σ = H (m)x .
Verify: Given a public key PK , a message m, and a signa-
ture σ , if the equation e(g, σ ) = e(PK ,H (m)) holds, this
algorithm outputs 1; otherwise it outputs 0.
The security of BLS short signature scheme is based on the
CDH assumption. We refer to [22] for more details.
C. ID-BASED SIGNATURE SCHEME
Definition 2 (ID-Based Signature Scheme [11]): An
ID-based signature scheme is a tuple of four PPT algorithms
(Setup, Extract, Sign, Verify). The algorithms are defined
as follows:
• Setup: This algorithm takes as input a security param-
eter λ and outputs a secret/public key pair (x,Ppub) for
the PKG.
• Extract: This algorithm takes as input the secret key x,
the params and an user’s identity ID, and returns a
private key DID corresponding to ID in the system.
• Sign: Given the private key DID and a message m, this
algorithm outputs a signature σ for m.
• Verify: Given the signer’s identity ID, a message m and
a signature σ , this algorithm outputs 1 if σ is a valid
signature for m; otherwise, output 0.
Correctness. For all message m, if σ ← Sign(DID,m), then
Verify(ID,m, σ ) = 1.
Existential Unforgeability. An ID-based signature scheme
is unforgeable against adaptively chosen-message and ID
attacks if no polynomial time algorithm A has a non-
negligible advantage against a challenger C in the following
game:
• C runs Setup of the scheme and sends the system param-
eters to A.
• A issues the following queries:
(1) Extract queries. Given an identity ID, C outputs the
private key corresponding to ID.
VOLUME 6, 2018 20633
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
(2) Signing queries. Given an identity ID and a mes-
sage m, C returns a signature for m.
• A outputs (ID∗,m, σ ). Then A wins the game if
Verify(ID∗,m, σ ) = 1, the identity ID∗ does not appear
in Extract queries and (ID∗,m) does not appear in Sign-
ing queries.
D. ID-BASED LINEARLY HOMOMORPHIC SIGNATURE
Definition 3 (ID-Based Linearly Homomorphic Signa-
ture Scheme): An ID-based linearly homomorphic signature
scheme is a tuple of five PPT algorithms (HSetup, HExtract,
HSign, HVerify, HEval). The algorithms are defined as
follows:
• HSetup: This algorithm takes as input a security param-
eter λ, an upper bound l for the number of messages
signed in each file and an integer N denoting the length
of vectors to be signed. It outputs a secret/public key pair
(x,Ppub) for the PKG.
• HExtract: This algorithm takes as input the secret key
for the PKG, the params and an user’s identity ID, and
returns a secret key DID corresponding to ID in the
system.
• HSign: Given the secret key DID, a message vector v,
and a file identifier τ , this algorithm outputs a signa-
ture σ .
• HVerify: Given the signer’s identity ID, a message vec-
tor v, a file identifier τ , and a signature σ , this algorithm
outputs 1 if σ is a valid signature for v; otherwise,
output 0.
• HEval:Given the signer’s identity ID, a file identifier τ ,
and a set of tuples {(fi, σi)}li=1, this algorithm outputs a
signature σ (Note that σ is intended to be a signature on
l∑
i=1
fiv(i), where v(i) denotes the i-th vector in the list of
vectors v(1), v(2), . . . , v(l)).
Correctness. For correctness, we require:
(1) For all message vector v and all file identifier τ ∈{0, 1}λ,
if σ ← HSign(DID, v, τ ), then Hverify(ID, v, τ, σ ) = 1.
(2) For all τ ∈{0, 1}λ and all sets of triples {(fi, σi, v(i))}
l
i=1,
if Hverify(ID, v(i), τ, σi) = 1 holds for all i, then
Hverify(ID,
l∑
i=1
fiv(i), τ , HEval(ID, τ, {(fi, σi)}li=1)) = 1.
Security model:
An ID-based linear homomorphic signature is unforge-
able against adaptively chosen-message and ID attack if the
advantage of any PPT adversary A in the following game is
negligible in the security parameter λ.
Setup: The challenger C sets a secret/public key pair
(x,Ppub) for the PKG, and gives Ppub to the adversary A.
Queries: The adversary’s attack capabilities are modelled
by providing it access to a series of oracles, so A can ask a
polynomial number of queries as follows:
• HExtract queries. Given an identity ID, C outputs the
secret key corresponding to ID.
• HSigning queries. A asks for a new signature on an
identity ID, a message vector v and a file identifier
τ ∈{0, 1}λ. The challenger C runs the algorithm HSign
to compute a signature σ for v. Finally C chooses a
handle h from a proper set, stores (h, (σ, ID, v, τ )) in a
table T and returns h to A.
• Derivation queries. A chooses a set of han-
dles h = (h1, . . . , hl) and a vector of coeffi-
cients f = (f1, . . . , fl). Then the challenger C checks
{(hi, (σi, ID, v(i), τi, ))}i=1,...,l from table T and returns
⊥ if any of these does not exist or if τi 6= τj for some
i, j ∈ {1, . . . , l}(i 6= j). Else, C computes v =
l∑
i=1
fiv(i),
σ =HEval(ID, τ1, {(fi, σi)}li=1), picks a handle h, stores
(h, (σ, ID, v, τ1)) in the table T and returns h to A.
• Reveal queries. A chooses a handle h. If this han-
dle does not exist in the table T , the challenger C
returns ⊥. Otherwise, C checks the corresponding
record (h, (σ, ID, v, τ )) from the table T and sends
(σ, ID, v, τ ) to A. Next it adds (h, (σ, ID, v, τ )) to a
different table T ∗.
Output: A outputs an identity ID∗, a message vector v∗, a file
identifier τ ∗ and a signature Q∗.
The adversary wins if Hverify(ID∗, v∗, τ ∗,Q∗) = 1, the
identity ID∗ does not appear in HExtract queries, and it must
satisfy one of the following conditions:
1) The file identifier τ ∗ 6= τk for all τk that appears in the
table T ∗ and v∗ 6= 0.
2) The file identifier τ ∗ = τk for some file identi-
fier τk that appears in the table T ∗, but v∗ 6∈ Vk ,
where Vk denotes the subspace spanned by all vectors
{v(i)}i=1,...,lk queried with the same file τk that appears
in T ∗, with 0 < lk ≤ l.
We define the advantageADVlhs
A (λ) of an adversary against
an ID-based linearly homomorphic signature scheme as the
probability of A winning the above game.
Definition 4: (Unforgeability of ID-based Linearly
Homomorphic Signatures). An ID-based linearly homo-
morphic signature scheme is secure against chosen-message
and ID attack if ADVlhs
A (λ) in the above relevant game is
negligible for any PPT adversaries.
III. THE PROPOSED SCHEME
In this section, we propose a provably secure ID-based lin-
early homomorphic signature from bilinear pairings. The new
scheme is defined as follows:
1) HSetup: Let (G1,G2) be bilinear groups such that
|G1|=|G2|=q for some prime number q. A bilinear
map is given by e: G1 × G1 → G2. Define two
hash functions H1 : {0, 1}∗ → G1, H2 : {0, 1}∗ ×
{0, 1}∗ → G1. H1 and H2 will be viewed as random
oracles in our security proof. Choose a generator g
of G1 and x ∈ Z∗q , then set Ppub = gx . Let [l] =
{1, . . . , l}, [N ] = {1, . . . ,N }. The security parame-
ter is λ. S=(Setup,Extract,Sign,Verify) is a standard
ID-based signature scheme, such as the scheme pro-
posed in [11]. Compute (xs,Ppubs )← Setup(1λ) as the
20634 VOLUME 6, 2018
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
secret/public key of PKG for S. The master secret key
is xh = (xs, x), and the master public key is Ppubh =
(G1,G2, q, g,Ppubs ,Ppub, e,H1,H2).
2) HExtract: Given an identity ID, the algorithm gener-
atesD(1)
ID ← Extract(xs, ID) andD
(2)
ID ← H1(ID)x , then
outputs DID ← (D(1)
ID ,D
(2)
ID ), which is the secret key
associated to the identity ID.
3) Hsign: Suppose this algorithm has stored a list L of
all previously returned identifiers τ with the related
information (r,w, σ1) defined below. Take the secret
key DID, an identity ID, a message vector v =
(v1, . . . , vN ) ∈ ZNq and a file identifier τ ∈{0, 1}λ as
input, this algorithm responses according to the type of
τ in input:
• If τ appears in L, retrieve the associated (r,w, σ1)
from L.
• Otherwise, choose r ∈ Z∗q randomly, set w← gr ,
σ1← Sign(D(1)
ID , (τ,w)), and store this information
in L.
Then choose s ∈ Z∗q randomly, and compute
σ2 = D(2)
ID
∑
j∈[N ]
vj
· (H1(ID)s
∏
j∈[N ]
H2(τ, j)vj )r .
Finally, output Q ← (w, σ1, σ2, s) as a signature for a
message vector v = (v1, . . . , vN ).
4) HVerify: Given an identity ID, a file identifier τ ,
a message vector v = (v1, . . . , vN ) ∈ ZNq and a signa-
ture Q = (w, σ1, σ2, s), the verifier checks that:
Verify(ID, σ1, (τ,w)) = 1,
e(σ2, g) = e(H1(ID),Ppub)
∑
j∈[N ]
vj
· e(H1(ID)s
∏
j∈[N ]
H2(τ, j)vj ,w)
If both of the above equations hold, output 1; otherwise,
output 0.
5) HEval: Given an identity ID, a file identifier τ ,
and a set of tuples {(fi,Qi)}li=1 such that Qi =
(w(i), σ
(i)
1 , σ
(i)
2 , s
(i)), this algorithm checks ifw(i) are not
all equal, then output ⊥. Else, compute s ←
∑
i∈[l]
fis(i),
σ2←
∏
i∈[l]
σ
(i)
2
fi
. Then output Q = (w(1), σ
(1)
1 , σ2, s).
Correctness:
Given an identity ID, a file identifier τ , a message vector
v = (v1, . . . , vN ) ∈ ZNq and a signatureQ = (w, σ1, σ2, s)←
HSign(DID, ID, v, τ ), the correctness of the scheme can be
verified by the following equations:
Verify(ID, σ1, (τ,w)) = 1,
e(σ2, g) = e(D(2)
ID , g)
∑
j∈[N ]
vj
·e((H1(ID)s
∏
j∈[N ]
H2(τ, j)vj )r , g)
= e(H1(ID),Ppub)
∑
j∈[N ]
vj
·e(H1(ID)s
∏
j∈[N ]
H2(τ, j)vj ,w)
Moreover, given τ ∈{0, 1}λ and all sets of triples
{(fi,Qi, v(i))}
l
i=1 such that Qi = (w(i), σ
(i)
1 , σ
(i)
2 , s
(i)), where
w(1)
= w(2)
= ... = w(l), by our definition ofHEval, we have
s←
∑
i∈[l]
fis(i), σ2←
∏
i∈[l]
σ
(i)
2
fi
.
Then the signature is Q = (w(1), σ
(1)
1 , σ2, s).
Now, we only need to check that Q is a signature on
the v = (v1, . . . , vN ) =
∑
i∈[l]
fiv(i), where v(i) denotes the i-th
vector in the list of vectors v(1), v(2), . . . , v(l). Suppose v(i) =
(v(i)1 , . . . , v
(i)
N ), by correctness of individual signature, we have
Verify(ID, σ (1)
1 , (τ,w(1))) = 1,
and for i = 1, · · · , l,
e(σ (i)
2 , g) = e(H1(ID),Ppub)
∑
j∈[N ]
v(i)j
·e(H1(ID)s
(i) ∏
j∈[N ]
H2(τ, j)
v(i)j ,w(1)).
So by the bilinear property, we have
e(σ2, g) =
∏
i∈[l]
e(σ (i)
2 , g)
fi
= e(H1(ID),Ppub)
∑
i∈[l]
∑
j∈[N ]
fiv
(i)
j
·e(H1(ID)
∑
i∈[l]
fis(i) ∏
j∈[N ]
H2(τ, j)
∑
i∈[l]
fiv
(i)
j
,w(1))
= e(H1(ID),Ppub)
∑
j∈[N ]
∑
i∈[l]
fiv
(i)
j
·e(H1(ID)s
∏
j∈[N ]
H2(τ, j)
∑
i∈[l]
fiv
(i)
j
,w(1))
= e(H1(ID),Ppub)
∑
j∈[N ]
vj
·e(H1(ID)s
∏
j∈[N ]
H2(τ, j)vj ,w(1))
Both of the verification equations hold, soQ is a signature on
the v =
∑
i∈[l]
fiv(i).
This completes the proofs.
IV. PROPOSED SCHEME ANALYSIS
Theorem 1: Assuming S=(Setup,Extract,Sign,Verify) is
an ID-based signature scheme unforgeable under adaptive
chosen message and ID attack, H1 and H2 are viewed as
random oracles, and the CDH assumption holds, the scheme
described above is an ID-based linear homomorphic signature
scheme secure against chosen-message and ID attack.
VOLUME 6, 2018 20635
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
Proof: As usual, the proof proceeds by contradic-
tion. Assuming there exists an adversary A that has non-
negligible probability in winning the above game, we will
show how to build a simulator B that breaks the secu-
rity of the underlying ID-based signature scheme S or the
CDH assumption. Let (ID∗, v∗, τ ∗,Q∗ = (w∗, σ ∗1 , σ
∗
2 , s
∗))
be a valid forgery returned by the adversary. It must hold that
Hverify(ID∗, v∗, τ ∗,Q∗) = 1 and the identity ID∗ does not
appear in HExtract queries. According to the game definition,
we distinguish two types of forgery as follows:
• Type 1: File identifier τ ∗ 6= τj for all τj that appears in
any Reveal queries and v∗ 6= 0.
• Type 2: τ ∗ = τj for some file identifier τj that appears
in any Reveal queries, but v∗ 6∈ Vj, where Vj denotes the
subspace spanned by all vectors {vi}i=1,...,lj queried with
the same file τj in the Reveal queries, with 0 < lj ≤ l.
First, the simulator flips a coin b ← {0, 1} randomly.
If b = 0, it guesses that the adversary will produce a Type
1 forgery. Otherwise, it guesses that the adversary will return
a Type 2 forgery. Notice that with probability at least 1
2 the
guess is correct.
A. TYPE 1 SIMULATION
Assuming B is a simulator, A is an adversary for our scheme,
and Cs is a challenger for the underlying ID-based signature
scheme S. In this case, B has guessed that A will return a
Type 1 forgery.We describeB that usesA to break the security
of S. First,B receivesPpubs fromCs, sets x ← Z∗q ,Ppub← gx ,
and initializes an empty table L as described in the description
of the above scheme. Then B sends the master public key
(G1,G2, q, g,Ppubs ,Ppub, e,H1,H2) to A.
HExtract queries. When A requests the secret key for
user ID, B uses its Extracting oracle for S to get D(1)
ID , and
can easily compute D(2)
ID as in the real case. Then B sets
DID← (D(1)
ID ,D
(2)
ID ) and sends DID to A.
HSigning queries.When A asks for a new signature on an
identity ID, a message vector v and a file identifier τ ,B checks
if τ does not appear in L, then chooses r ∈ Z∗q randomly,
sets w ← gr , uses its Signing oracle for S to compute σ1
for (τ,w), and stores (r,w, σ1) in L. Otherwise, it retrieves
the associated (r,w, σ1) from L. Then B can easily compute
(σ2, s) (i.e. the remaining parts of each signature) as in the real
case. And B setsQ← (w, σ1, σ2, s). Note thatQ is associated
with a new handle h andB stores (h, (Q, ID, v, τ )) in a table T .
Derivation and Reveal queries. B proceeds as the real
oracle.
Output. Finally, the adversary A is supposed to output a
forgery (ID∗, v∗, τ ∗,Q∗) such thatQ∗ = (w∗, σ ∗1 , σ
∗
2 , s
∗) and
Hverify(ID∗, v∗, τ ∗,Q∗) = 1. According to the definition of
Type 1 forgery, the file identifier τ ∗ 6= τj for all τj that appears
in any Reveal queries and the identity ID∗ does not appear in
HExtract queries. So B can output ((τ ∗,w∗), σ ∗1 ) as a forgery
for S.
Let us analyze B’s probability of success. It is straightfor-
ward to see that if the adversary has advantage ε in forging
the signature scheme, then B has probability at least ε/2 in
breaking the security of S.
B. TYPE 2 SIMULATION
Assuming B is a simulator and A is an adversary, B is given
(g, gx , gy) in order to output gxy.
In this case, B has guessed that A will return a Type 2
forgery. We describe B that uses A to break the CDH
assumption. First, B runs (xs,Ppubs ) ← Setup(1λ) as the
secret/public key of PKG for S, sets Ppub ← gx , and ini-
tializes an empty table L as described in the description
of the above scheme. Then B sends the master public key
(G1,G2, q, g,Ppub,Ppubs , e,H1,H2) to A and responses as
follows:
H1−queries. Assuming A makes H1−queries at most qH1
times, B randomly chooses η ∈ [1, qH1 ] as the target ID’s
number. Denote by IDk the input of the k-th query made
by A and chooses tk ∈ Z∗q uniformly at random. When
A queries IDk to H1−oracle, B answers H1(IDk ) = gtk if
k 6= η; Otherwise, H1(IDk ) = gy if k = η. Then B adds
(IDk , gtk , tk )k 6=η to theH1−List; If k = η, B adds (IDη, gy, ∗)
to the H1−List (Note that ∗ means the corresponding value
is unknown).
H2−queries. Assuming A makes H2−queries at most qH2
times, B randomly chooses αj, βj ∈ Z∗q . When A queries to
H2−oracle, B responds to A as H2(τ, j) = (gy)αjgβj . Then B
adds ((τ, j), gyαjgβj , αj, βj) to the H2−List.
HExtract queries. When A requests secret key for user
IDk , assuming w.l.o.g A has requestedH1−queries on IDk , B
checks the H1−List and computes D(2)
IDk = (gtk )x = (Ppub)tk
if k 6= η; Otherwise, B aborts if k = η. Furthermore, B
generates D(1)
IDk ← Extract(xs, ID). Then B sends DIDk ←
(D(1)
IDk ,D
(2)
IDk ) to A and adds (IDk ,DIDk )k 6=η to the SK-List.
HSigning queries.We will use the assumption that A only
queries the HSigning oracle on independent vectors for each
file identifier τ . Given IDk , a file identifier τ , and an index
i ∈ [l], if A requests a signature on the i-th message vector
v = (v1, . . . , vN ) ∈ ZNq from file τ , B answers as follows:
I. if k 6= η, assuming A has requested HExtract queries on
IDk and H2−queries on τ , B checks the H1−List, H2−List
and SK-List, gets the corresponding DIDk , and responses
with the following.
1) if τ does not appear in L, it chooses fresh r ∈ Z∗q
randomly, set w ← gr , σ1 ← Sign(D(1)
IDk , (τ,w)), and
stores (τ, r,w, σ1) in L.
2) Otherwise, it retrieves the corresponding (r,w, σ1)
from L.
Then choose s ∈ Z∗q randomly, and compute
σ2 = D(2)
IDk
∑
j∈[N ]
vj
· (H1(IDk )s
∏
j∈[N ]
H2(τ, j)vj )r
So the signature is Q = (w, σ1, σ2, s). It is easy to check
that Q is valid. Note that Q is associated with a new handle h
and stored (h, (Q, IDk , v, τ )) in a table T .
20636 VOLUME 6, 2018
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
II. if k = η, assuming A has requested H2−queries on τ ,
B checks the H2−List, and responses with the following.
1) if τ does not appear in L, B chooses fresh r ∈ Z∗q ran-
domly, sets w = Prpub = grx , σ1← Sign(D(1)
IDη , (τ,w)),
and stores (τ, r,w, σ1) in L.
2) Otherwise, it retrieves the corresponding (r,w, σ1)
from L.
Then compute
s←−
∑
j∈[N ]
(
1
r
+ αj)vj, σ2← w
∑
j∈[N ]
βjvj
So the signature isQ = (w, σ1, σ2, s). It is not hard to see that
the signature Q is correct. Because
Verify(IDη, σ1, (τ,w)) = 1
Furthermore, s = −
∑
j∈[N ]
( 1r + αj)vj, so∑
j∈[N ]
vj + rs+ r
∑
j∈[N ]
αjvj = rs+
∑
j∈[N ]
(1+ rαj)vj = 0
Hence we have
D(2)
IDη
∑
j∈[N ]
vj
· (H1(IDη)s
∏
j∈[N ]
H2(τ, j)vj )rx
= g
xy
∑
j∈[N ]
vj
· (gysg
y
∑
j∈[N ]
αjvj
g
∑
j∈[N ]
βjvj
)rx
= g
xy(
∑
j∈[N ]
vj+rs+r
∑
j∈[N ]
αjvj)
· g
rx
∑
j∈[N ]
βjvj
= g
rx
∑
j∈[N ]
βjvj
= w
∑
j∈[N ]
βjvj
= σ2
Then Q is associated with a new handle h and B stores
(h, (Q, IDη, v, τ )) in T .
Finally, the signature Q is not directly returned to A but
associated with a new handle h.
Derivation and Reveal queries. B proceeds as the real
oracle.
Output. Finally, the adversary A is supposed to output
a forgery (ID∗, v∗, τ ∗,Q∗) such that v∗ = (v∗1, . . . , v
∗
N ),
Q∗ = (w∗, σ ∗1 , σ
∗
2 , s
∗) and Hverify(ID∗, v∗, τ ∗,Q∗) = 1.
• If ID∗ 6= IDη, B aborts.
• If ID∗ = IDη with the probability 1
qH1
, then it proceeds
as follows.
Given the file identifier τ ∗, B gets the corresponding (r,w)
from the table L. Note that Q∗ = (w∗, σ ∗1 , σ
∗
2 , s
∗) is a Type 2
forgery, so w∗ = w = grx (Otherwise, if w∗ 6= w, then
((τ ∗,w∗), σ ∗1 ) is a forgery for S). And (σ ∗2 , s
∗) can satisfy
the second verification equation
e(σ ∗2 , g) = e(H1(IDη),Ppub)
∑
j∈[N ]
v∗j
· e(H1(IDη)s
∗
∏
j∈[N ]
H2(τ ∗, j)
v∗j ,w∗)
Assuming w.l.o.g A has requested H1−queries on IDη
and H2−queries on τ ∗, B checks H1−List, and gets
H1(IDη) = gy. Furthermore, B gets H2(τ ∗, j) = (gy)αjgβj
for j ∈ [N ] from H2−List. Then we have
e(σ ∗2 , g)
= e(gy, gx)
∑
j∈[N ]
v∗j
· e(g
y(s∗+
∑
j∈[N ]
αjv∗j )
g
∑
j∈[N ]
βjv∗j
, grx)
= e(D(2)
IDη
∑
j∈[N ]
v∗j
, g)
·e(D(2)
IDη
r(s∗+
∑
j∈[N ]
αjv∗j )
w
∑
j∈[N ]
βjv∗j
, g)
= e(D(2)
IDη
(rs∗+
∑
j∈[N ]
(1+rαj)v∗j )
· w
∑
j∈T
βjv∗j
, g)
So by the non-degenerate property, we have
σ ∗2 = D(2)
IDη
(rs∗+
∑
j∈[N ]
(1+rαj)v∗j )
· w
∑
j∈T
βjv∗j
If s∗ 6= −
∑
j∈[N ]
( 1r + αj)v
∗
j , then it holds that
(rs∗ +
∑
j∈[N ]
(1+ rαj)v∗j 6= 0)
So B can compute
gxy = D(2)
IDη = (
σ ∗2
w
∑
j∈[N ]
βjv∗j
)
1
rs∗+
∑
j∈[N ]
(1+rαj)v
∗
j
Then the CDH problem is solved.
Nowwe only need to show that s∗ = −
∑
j∈[N ]
( 1r + αj)v
∗
j with
probability 1
q . We use a technique analysis similar to that in
the analysis of [25]. According to the above assumption,
we know that A only queries the HSigning oracle on indepen-
dent vectors for each file identifier τ . Since all of the signed
message vectors are N−dimensional vectors, we assume
w.l.o.g. that A makes at most N − 1 HSigning queries for
the file identifier τ ∗ (Otherwise, the signed message vectors
{v(1), . . . , v(N )
} for file identifier τ ∗ will compose a maxi-
mal linear independent group. So B can simulate HSigning
queries for itself). Assume that Amakes exactly N−1 Reveal
queries with the file τ ∗ and gets Qi = (w(i), σ
(i)
1 , σ
(i)
2 , s
(i))
for v(i) = (v(i)1 , . . . , v
(i)
N ), i ∈ {1, . . . ,N − 1}, where w(1)
=
w(2)
= ... = w(N−1). B can check the table L and retrieve the
corresponding r . And A has N − 1 values s1, . . . , sN−1 ∈ Z∗q
such that si = −
∑
j∈[N ]
( 1r + αj)v
(i)
j for i ∈ {1, . . . ,N−1}. Sowe
have
−s1 = (
1
r
+ α1)v
(1)
1 + · · · + (
1
r
+ αN )v
(1)
N
−s2 = (
1
r
+ α1)v
(2)
1 + · · · + (
1
r
+ αN )v
(2)
N
......
−sN−1 = (
1
r
+ α1)v
(N−1)
1 + · · · + (
1
r
+ αN )v
(N−1)
N
Furthermore, according to the definition of Type 2 forgery,
v∗ 6∈ span (v(1), . . . , v(N−1)). And A only queries the HSign-
ing oracle on independent vectors for τ ∗, so {v(1), . . . , v(N−1)}
in Reveal queries for τ ∗ composes a linear independent group.
VOLUME 6, 2018 20637
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
Then v(1), . . . , v(N−1), v(∗) for τ ∗ will beN linear independent
vectors.
Assume A can output the forgery Q∗ = (w∗, σ ∗1 , σ
∗
2 , s
∗)
for the message vector v∗ = (v∗1, . . . , v
∗
N ) such that
s∗ = −
∑
j∈[N ]
( 1r + αj)v
∗
j , then combined with the above equa-
tions, we have
−s1 = (
1
r
+ α1)v
(1)
1 + · · · + ( 1r + αN )v
(1)
N
−s2 = (
1
r
+ α1)v
(2)
1 + · · · + ( 1r + αN )v
(2)
N
......
−sN−1 = (
1
r
+ α1)v
(N−1)
1 + · · · + (
1
r
+ αN )v
(N−1)
N
−s∗ = (
1
r
+ α1)v
(∗)
1 + · · · + (
1
r
+ αN )v
(∗)
N
Notice that v(1), . . . , v(N−1), v(∗) for τ ∗ are N linear inde-
pendent vectors. So∣∣∣∣∣∣∣∣∣∣∣
v(1)1 ... v(1)N
v(2)1 ... v(2)N
...
v(N−1)1 ... v(N−1)N
v(∗)1 ... v(∗)N
∣∣∣∣∣∣∣∣∣∣∣
6= 0
According to Cramer’s Rule, A can get { 1r + αj}j∈[N ]
and recover the values {αj}j∈[N ]. But the random numbers
{αj}j∈[N ] are independent of A’s view. So we conclude that
the equation s∗ = −
∑
j∈[N ]
( 1r + αj)v
∗
j holds randomly and the
probability is 1
q .
Let us analyze B’s probability of success. It is not hard
to see that if the adversary has advantage ε in forging the
signature scheme, then B has probability at least ε
2qH1
(1− 1
q )
in solving the CDH problem.
This completes the proof.
V. APPLICATION IN DATA ANALYSIS AND BLOCKCHAIN
Recently, blockchain has attracted more and more attention
from both academy and industry because of its decentraliza-
tion. The blockchain has been widely applied in the smart
contract and financial transactions, and data forensics in IoT
as well. In this section, we will show how to use the homo-
morphic signature scheme in the construction in the IoT for
the data and computation authentication. With the advent of
blockchain, more and more users are using the blockchain
to store their personal data in blockchain as an access con-
trol service because of the properties of unforgettability in
the blockchain. When the volume of data grows, the data
utilization will be valuable for data analysis. As we know,
big data transactions have been common for the promotion
of data service. However, with the utilization of the third-
party service provider such as cloud computing, the big data
computation such as data mining and machine learning over
the data can be performed at the third-party’s side. As a result,
the user can get the result from the cloud server while reliev-
ing the computation overhead. Though the advantages of the
cloud computing techniques, another issue arises, that is, how
to achieve the characteristic of authentication of the original
data and the results. In more details, if the cloud server return
a wrong computation result that is not computed from the
user’s data, it will be difficult for the receiver to detect.
To overcome this challenge, we show how to use the
homomorphic signature to achieve the data authentication
and guarantee the correctness of the computation results.
At first, the users involved in our system generate their
own public keys for the blockchain system, that is, the virtual
identity for our homomorphic signature. To upload the data
in the cloud or distributed storage nodes while providing the
outsourced computation service, the user first generates the
signature for all the data stored in the nodes. Then, the data
and the signature will be uploaded to the storage nodes in
the network. Furthermore, the pointer to the data, including
the access information will be computed and stored in the
blockchain. To access the data, the users first access and get
the pointer from the blockchain. If they are allowed to access
the data, they can further download and compute the data.
To reduce the communication and computation overhead,
the users may ask the nodes to compute the data with any
function they provide. The reason is that all the data are
signed with homomorphic signature and any function can be
compute with this type of signature.
After the computation, the users will be able to get the
computation results as well as the aggregate homomorphic
signature for this computation results. After that, the users are
able to verify the computation results with the virtual identity.
If the signature is valid, the users accept the computation
result from the nodes. Otherwise, it means that the compu-
tation results are invalid. With the blockchain techniques,
it also guarantees that the data owner or service provides such
as the nodes can get a fair payment after they provide the
data or computation.
The security of the above scheme can be easily analyzed
with the property of blockchain and homomorphic signature.
With the technique of blockchain, any user, including the
data owner and the nodes cannot change the data information
and their digital signature. Furthermore, the fairness can be
guaranteed with the blockchain without a centralized party.
With the technique of the homomorphic signature, data com-
putation can be performed while keeping the authentication.
The results from the nodes can be verified by checking the
signature.
VI. CONCLUSION
In this paper, we first formally introduce the concept and
security model of ID-based linearly homomorphic signature,
then design a new ID-based linearly homomorphic signature
scheme. The scheme allows a signer to produce linearly
homomorphic signature and avoids the shortcomings of the
use of public-key certificates.Moreover, the scheme is proved
secure against existential forgery on adaptively chosen mes-
sage and ID attack under the random oracle model. ID-based
linearly homomorphic signature schemes can be applied in
e-business, cloud computing and blockchain.
20638 VOLUME 6, 2018
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
REFERENCES
[1] A. Shamir, ‘‘Identity-based cryptosystems and signature schemes,’’
Crypto, vol. 84, pp. 47–53, Aug. 1984.
[2] R. Johnson, D. Molnar, D. Song, and D. Song, ‘‘Homomorphic sig-
nature schemes,’’ in Topics in Cryptology—CT-RSA (Lecture Notes
in Computer Science), vol 2271. Berlin, Germany: Springer, 2002,
pp. 244–262.
[3] Z. Huang, S. Liu, X. Mao, K. Chen, and J. Li, ‘‘Insight of the protection
for data security under selective opening attacks,’’ Inf. Sci., vols. 412–413,
pp. 223–241, Oct. 2017.
[4] J. Li, X. Chen, M. Li, J. Li, P. P. C. Lee, andW. Lou, ‘‘Secure deduplication
with efficient and reliable convergent key management,’’ IEEE Trans.
Parallel Distrib. Syst., vol. 25, no. 6, pp. 1615–1625, Jun. 2014.
[5] W. Chen et al., ‘‘Inapproximability results for the minimum integral solu-
tion problem with preprocessing over l∞ norm,’’ Theor. Comput. Sci.,
vol. 478, pp. 127–131, Mar. 2013.
[6] W. Chen et al., ‘‘An improved lower bound for approximating theminimum
integral solution problemwith preprocessing over l∞ norm,’’ J. Combinat.
Optim., vol. 30, no. 3, pp. 447–455, 2015.
[7] D. M. Freeman, ‘‘Improved security for linearly homomorphic signa-
tures: A generic framework,’’ in Public Key Cryptography-PKC (Lecture
Notes in Computer Science), vol 7293. Berlin, Germany: Springer, 2012,
pp. 697–714.
[8] D. Boneh, D. Freeman, J. Katz, and B. Waters, ‘‘Signing a linear subspace:
Signature schemes for network coding,’’ in Public Key Cryptography—
PKC (Lecture Notes in Computer Science), vol. 5443. Berlin, Germany:
Springer, 2009, pp. 68–87.
[9] J. Li, Y. K. Li, X. Chen, P. P. C. Lee, andW. Lou, ‘‘A hybrid cloud approach
for secure authorized deduplication,’’ IEEE Trans. Parallel Distrib. Syst.,
vol. 26, no. 5, pp. 1206–1216, May 2015.
[10] J. Li et al., ‘‘Secure distributed deduplication systems with improved reli-
ability,’’ IEEE Trans. Comput., vol. 64, no. 12, pp. 3569–3579, Dec. 2015.
[11] J. Choon and J. Cheon, ‘‘An identity-based signature from gap Diffie-
Hellman groups,’’ in Proc. Int. Workshop Public Key Cryptogr., 2003,
pp. 18–30.
[12] D. Boneh and D. Freeman, ‘‘Homomorphic signatures for polynomial
functions,’’ in Advances in Cryptology—EUROCRYPT (Lecture Notes
in Computer Science), vol. 6632. Berlin, Germany: Springer, 2011,
pp. 149–168.
[13] N. Attrapadung and B. Libert, ‘‘Homomorphic network coding signa-
tures in the standard model,’’ in Public Key Cryptography—PKC (Lecture
Notes in Computer Science), vol 6571. Berlin, Germany: Springer, 2011,
pp. 17–34.
[14] D. Catalano, D. Fiore, and B. Warinschi, ‘‘Homomorphic signatures
with efficient verification for polynomial functions,’’ in Advances in
Cryptology—CRYPTO (Lecture Notes in Computer Science), vol 8616.
Berlin, Germany: Springer, 2014, pp. 371–389.
[15] R. Hiromasa, Y. Manabe, and T. Okamoto, ‘‘Homomorphic signatures
for polynomial functions with shorter signatures,’’ in Proc. 30th Symp.
Cryptogr. Inf. Secur., Kyoto, Japan, 2013, pp. 1–8.
[16] J. Li, Y. Zhang, X. Chen, and Y. Xiang, ‘‘Secure attribute-based data
sharing for resource-limited users in cloud computing,’’ Comput. Secur.,
vol. 72, pp. 1–12, Jan. 2018, doi: 10.1016/j.cose.2017.08.007.
[17] X. Boyen, X. Fan, and E. Shi, ‘‘Adaptively secure fully homo-
morphic signatures based on lattices,’’ IACR Cryptol. ePrint Arch.,
Tech. Rep. 2014/916, 2014.
[18] P. Li, J. Li, Z. Huang, C.-Z. Gao, W.-B. Chen, and K. Chen, ‘‘Privacy-
preserving outsourced classification in cloud computing,’’ in Clus-
ter Computing. New York, NY, USA: Springer, 2017, pp. 1–10, doi:
10.1007/s10586-017-0849-9.
[19] S. Gorbunov, V. Vaikuntanathan, and D. Wichs, ‘‘Leveled fully homo-
morphic signatures from standard lattices,’’ IACR Cryptol. ePrint Arch.,
Tech. Rep. 2014/897, 2014. [Online]. Available: http://eprint.iacr.org/
[20] N. Attrapadung, B. Libert, and T. Peters, ‘‘Efficient completely context-
hiding quotable and linearly homomorphic signatures,’’ in Public-Key
Cryptography—PKC (Lecture Notes in Computer Science), vol 7778.
Berlin, Germany: Springer, 2013, pp. 386–404.
[21] J. Li, J. Li, X. Chen, C. Jia, and W. Lou, ‘‘Identity-based encryption with
outsourced revocation in cloud computing,’’ IEEE Trans. Comput., vol. 64,
no. 2, pp. 425–437, Feb. 2015.
[22] D. Boneh, B. Lynn, and H. Shacham, ‘‘Short signatures from the
Weil pairing,’’ in Advances in Cryptology—ASIACRYPT (Lecture Notes
in Computer Science), vol 2248. Berlin, Germany: Springer, 2001,
pp. 514–532.
[23] D. Boneh and D. Freeman, ‘‘Linearly homomorphic signatures over
binary fields and new tools for lattice-based signatures,’’ in Public Key
Cryptography—PKC (Lecture Notes in Computer Science), vol 6571.
Berlin, Germany: Springer, 2011, pp. 1–16.
[24] D. Catalano, A. Marcedone, and O. Puglisi, ‘‘Authenticating computation
on groups: New homomorphic primitives and applications,’’ in Proc. Int.
Conf. Theory Appl. Cryptol. Inf. Secur., 2014, pp. 193–212.
[25] N. Attrapadung, B. Libert, and T. Peters, ‘‘Computing on authenti-
cated data: New privacy definitions and constructions,’’ in Advances in
Cryptology—ASIACRYPT (Lecture Notes in Computer Science), vol 7658.
Berlin, Germany: Springer, 2012, pp. 367–385.
[26] W. Chen, H. Lei, and K. Qi, ‘‘Lattice-based linearly homomorphic signa-
tures in the standard model,’’ Theor. Comput. Sci., vol. 634, pp. 47–54,
Jun. 2016.
[27] P. Li et al., ‘‘Multi-key privacy-preserving deep learning in cloud comput-
ing,’’ Future Generat. Comput. Syst., vol. 74, pp. 76–85, Sep. 2017.
[28] J.-D. Wu, Y.-M. Tseng, and S.-S. Huang, ‘‘Leakage-resilient ID-based
signature scheme in the generic bilinear group model,’’ Secur. Commun.
Netw., vol. 9, no. 17, pp. 3987–4001, 2016.
[29] P. Sarde andA. Banerjee, ‘‘A secure ID-based proxy signature scheme from
bilinear pairings,’’ Int. J. Comput. Appl., vol. 124, no. 9, pp. 1–4, 2015.
[30] D. Boneh and M. Franklin, ‘‘Identity-based encryption from the Weil
pairing,’’ SIAM J. Comput., vol. 32, no. 3, pp. 586–615, 2003.
[31] C. Meshram, ‘‘An efficient ID-based cryptographic encryption based on
discrete logarithm problem and integer factorization problem,’’ Inf. Pro-
cess. Lett., vol. 115, no. 2, pp. 351–358, 2015.
[32] G. Schmid and F. Rossi, ‘‘Implementing identity-based key agreement
in embedded devices,’’ in Proc. Int. Conf. Pervasive Embedded Comput.
Commun. Syst., 2016, pp. 1–7.
[33] P. Sarkar and M. Chowdhury, ‘‘Inductive hierarchical identity based key
agreement with pre-deployment interactions,’’ in Proc. Int. Conf. Appl.
Techn. Inf. Secur., 2016, pp. 106–114.
[34] Y. Zhang, Y. Jiang, B. Li, and M. Zhang, ‘‘An efficient identity-based
homomorphic signature scheme for network coding,’’ in Proc. Int. Conf.
Emerg. Internetwork., Data Web Technol., 2017, pp. 524–531.
[35] S. Sadrhaghighi and S. Khorsandi, ‘‘An identity-based digital signature
scheme to detect pollution attacks in intra-session network coding,’’ in
Proc. 13th Int. Iranian Soc. Cryptol. Conf. Inf. Secur. Cryptol. (ISCISC),
2016, pp. 7–12.
[36] J. Li, Z. Liu, X. Chen, ‘‘L-EncDB: A lightweight framework for privacy-
preserving data queries in cloud computing,’’ Knowl.-Based Syst., vol. 79,
pp. 18–26, May 2015.
[37] F. Wang, K. Wang, B. Li, and Y. Gao, ‘‘Leveled strongly-unforgeable
identity-based fully homomorphic signatures,’’ in Proc. ISC, 2015,
pp. 42–60.
[38] D. Catalano, ‘‘Homomorphic signatures and message authentication
codes,’’ in Security and Cryptography for Networks (Lecture Notes
in Computer Science), vol 8642. Cham, Switzerland: Springer, 2014,
pp. 514–519.
[39] D. Catalano, D. Fiore, and B. Warinschi, ‘‘Adaptive pseudo-free groups
and applications,’’ in Advances in Cryptology—EUROCRYPT (Lecture
Notes in Computer Science), vol 6632. Berlin, Germany: Springer, 2011,
pp. 207–223.
[40] D. Charles, K. Jain, and K. Lauter, ‘‘Signatures for network coding,’’ Int.
J. Inf. Coding Theory, vol. 1, no. 1, pp. 3–14, Mar. 2009.
[41] R. Gennaro, J. Katz, H. Krawczyk, and T. Rabin, ‘‘Secure network
coding over the integers,’’ in Public Key Cryptography—PKC (Lecture
Notes in Computer Science), vol 6056. Berlin, Germany: Springer, 2010,
pp. 142–160.
QUN LIN received the B.S. degree from the
Department of Atmosphere Science, Nanjing
University, in 1999, and the M.S. degree from
the School of Mathematics and Computational
Science, Sun Yat-sen University, in 2005. He is
currently with the Institute of Mathematics
and Statistics, Hanshan Normal University. His
research interests include public-key cryptography
and information security.
VOLUME 6, 2018 20639
http://dx.doi.org/10.1016/j.cose.2017.08.007
http://dx.doi.org/10.1007/s10586-017-0849-9
Q. Lin et al.: ID-Based Linearly Homomorphic Signature Scheme and Its Application in Blockchain
HONGYANG YAN received the M.S. degrees
from the School of Mathematics and Information
Science, Guangzhou University, in 2016. She is
currently pursuing the Ph.D. degree with Nankai
University. Her research interests include secure
access control, such as attribute-based cryptog-
raphy and identity-based cryptography, and IoT
secure.
ZHENGAN HUANG received the B.S. and M.S.
degrees from the Department of Mathematics, Sun
Yat-sen University, in 2009 and 2011, respectively,
and the Ph.D. degree from the Department of
Computer Science and Engineering, Shanghai Jiao
Tong University, in 2015. He was a Security Engi-
neer with Huawei Technologies Company Ltd.,
from 2015 to 2016. He is currently holds a post-
doctoral position at Guangzhou University. His
research interests include public-key cryptography
and information security.
WENBIN CHEN received the M.S. degree in
mathematics from the Institute of Software,
Chinese Academy of Science, in 2003, and the
Ph.D. degree in computer science from North
Carolina State University, USA, in 2010. He is
currently an Associate Professor with Guangzhou
University. His research interests include theo-
retical computer science, such as lattice-based
cryptography, algorithm design and analysis, com-
putational complexity, and so on.
JIAN SHEN received the M.E. and Ph.D. degrees
in computer science from Chosun University,
South Korea, in 2009 and 2012, respectively.
Since 2012, he has been a Professor with the
Nanjing University of Information Science and
Technology, Nanjing, China. His research interests
include public key cryptography, secure data shar-
ing, and data auditing in cloud.
YI TANG received the B.S. and M.S. degrees from
the Department of Mathematics, Sun Yat-sen Uni-
versity, in 1988 and 1991, respectively, and the
Ph.D. degree from the Department of Mathemat-
ics, Sun Yat-sen University, in 2003. He is cur-
rently a Professor with Guangzhou University. His
research interests include network traffic analysis
and information security.
20640 VOLUME 6, 2018
	INTRODUCTION
	OUR CONTRIBUTIONS
	ORGANIZATION
	PRELIMINARIES
	BILINEAR GROUPS
	BLS SHORT SIGNATURE SCHEME
	ID-BASED SIGNATURE SCHEME
	ID-BASED LINEARLY HOMOMORPHIC SIGNATURE
	THE PROPOSED SCHEME
	PROPOSED SCHEME ANALYSIS
	TYPE 1 SIMULATION
	TYPE 2 SIMULATION
	APPLICATION IN DATA ANALYSIS AND BLOCKCHAIN
	CONCLUSION
	REFERENCES
	Biographies
	QUN LIN
	HONGYANG YAN
	ZHENGAN HUANG
	WENBIN CHEN
	JIAN SHEN
	YI TANG