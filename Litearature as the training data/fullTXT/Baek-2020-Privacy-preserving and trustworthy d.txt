Privacy-Preserving and Trustworthy Device-to-Device (D2D) Offloading Scheme
SPECIAL SECTION ON NEW ADVANCES IN BLOCKCHAIN-BASED WIRELESS NETWORKS
Received October 6, 2020, accepted October 14, 2020, date of publication October 21, 2020, date of current version October 30, 2020.
Digital Object Identifier 10.1109/ACCESS.2020.3032735
Privacy-Preserving and Trustworthy
Device-to-Device (D2D)
Offloading Scheme
HOSUNG BAEK1, HANEUL KO 2, (Member, IEEE), AND
SANGHEON PACK 1, (Senior Member, IEEE)
1School of Electrical Engineering, Korea University, Seoul 02841, South Korea
2Department of Computer Convergence Software, Korea University, Sejong 30019, South Korea
Corresponding author: Sangheon Pack (shpack@korea.ac.kr)
This work was supported in part by National Research Foundation (NRF) funded by the Korean Government (No. 2020R1A2C3006786)
and in part by the ITRC (Information Technology Research Center) support program (IITP-2020-2017-0-01633) supervised by the IITP
(Institute for Information & communications Technology Planning & Evaluation).
ABSTRACT In device-to-device (D2D) offloading, frequent offloading to a specific mobile device
(i.e., an offloadee) can violate the privacy of a task owner and proper offloading results cannot always be
guaranteed due to untruthful mobile devices. To address these problems, we propose a privacy-preserving
and trustworthy D2D offloading scheme (PPTS) with two steps: 1) a privacy-preserving offloading step
and 2) a blockchain-based verification step. In the first step, a task owner selects several offloadees and
offloads the tasks redundantly to them to obtain reliable offloading results with a minimum task completion
delay while preserving its own privacy at a sufficient level. In addition, the task owner chooses another
mobile device as a verifier. In the second step, the task owner and verifier exploit blockchain networks to
check whether the offloading results are appropriately processed. We formulate a static game to decide an
appropriate redundancy ratio of offloading tasks and incentives for the offloadees.The evaluation results
demonstrate that PPTS can provide reliable offloading results with a reduced task completion delay and
guarantee a sufficient level of privacy of the task owner.
INDEX TERMS Blockchain, device-to-device (D2D), offloading, privacy, static game.
I. INTRODUCTION
With the recent advancement of mobile devices with high
computing powers, there is an increasing interest in device-
to-device (D2D) offloading [1]–[20] that leverages numerous
collaborative mobile devices. In D2D offloading, a mobile
device (i.e., task owner) offloads tasks to othermobile devices
in its vicinity. Subsequently, the mobile devices process the
offloaded tasks by using their idle resources. Because such
D2D offloading can work without any infrastructure, it can
alleviate the network congestion and connectivity problems.
However, there can be untruthful mobile devices that
return fake offloading results without processing tasks
and expect only an incentive for the results. Accordingly,
a reputation-based scheme [4] was proposed to mitigate this
problem. In this scheme, a task owner calculates the rep-
utations of mobile devices based on historical information
The associate editor coordinating the review of this manuscript and
approving it for publication was Yuan Gao .
indicating whether these devices have appropriately pro-
cessed offloaded tasks. Subsequently, the task owner offloads
the task to mobile devices with high reputations. However,
it is not trivial for the task owner to maintain this his-
torical information. For example, if mobile devices arrive
frequently in the vicinity of the task owner in D2D envi-
ronments, the task owner cannot easily maintain historical
information due to mobility. Furthermore, when the tasks are
frequently offloaded to a specific mobile device with a high
reputation, the privacy of the task owner cannot be preserved
(i.e., the usage patterns of the task owner may be exposed to
external mobile devices) [15], [16].
To address this issue, we propose a privacy-preserving and
trustworthy D2D offloading scheme (PPTS) with two steps.
In the first step, a task owner determines the appropriate
mobile devices (i.e., offloadees) and the number of tasks to be
offloaded to each of these devices. Subsequently, it offloads
the tasks redundantly to them in order to obtain trustful
offloading results with the minimum task completion delay,
VOLUME 8, 2020 This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/ 191551
https://orcid.org/0000-0002-9067-445X
https://orcid.org/0000-0002-1085-1568
https://orcid.org/0000-0001-8567-4888
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
while preserving its privacy at a sufficient level. In addition,
the task owner chooses another mobile device as a veri-
fier. In the second step, the task owner and verifier exploit
blockchain networks to check whether the offloading results
are appropriately processed. We formulate a static game to
decide an appropriate redundancy ratio of the offloading tasks
and incentives for offloadees. The evaluation results demon-
strate that PPTS can guarantee a sufficient level of privacy
of the task owner and provide reliable offloading results
with a significantly reduced task completion time compared
with that of a random scheme in which offloadees are ran-
domly selected. In addition, the performance of our proposed
privacy-preserving offloading algorithm is comparable to that
of the optimal scheme.
The main contributions of this paper can be summarized
as follows. First, to the best of our knowledge, this is the first
work to consider the privacy of the task owner and the relia-
bility of offloading results simultaneously. Second, we deter-
mine the appropriate redundancy ratio of offloading tasks
and incentive to make offloadees process the tasks properly
based on the static game. Finally, we present the evaluation
results under various environments, which are expected to
serve as valuable guidelines for designing privacy-preserving
and trustworthy D2D offloading schemes in the future.
The remainder of this paper is organized as follows. The
related works are summarized in Section II. Subsequently,
the system model and PPTS are described in Section III
and Section IV, respectively. After that, the static game is
formulated in Section V. The evaluation results are presented
in Section VI. Finally, our concluding remarks are provided
in Section VII.
II. RELATED WORK
A number of studies on D2D offloading have been conducted
in the literature [4], [11]–[16]. Based on their objectives,
these works can be classified into the following categories:
1) reduction of task completion delay [11]–[13]; 2) provision
of reliable task processing results [4], [14]; and 3) solution to
the privacy leakage problem [15], [16].
Chen et al. [11] investigated a joint task assignment and
task execution problem to optimize the task completion
delay by considering energy consumption and task type
constraints. Shi et al. [12] formulated a task scheduling
problem in local mobile clouds by satisfying the task com-
pletion delay constraints while maintaining a low energy
consumption. Guo et al. [13] proposed a resource scheduling
policy to shorten task completion delay by comparing the
local execution cost at an optimal clock frequency with the
cloud execution cost at optimal transmission power. Although
these works could reduce the task completion delay of D2D
offloading, they did not consider untruthful mobile devices
that may return fake computation results only for obtaining
incentives [11]–[13].
Chatzopoulos et al. [4] proposed a flopcoin framework,
which rewards collaborating mobile devices while punishing
selfish ones, to obtain reliable offloading results. Similarly,
Restuccia and Das [14] proposed a trust-based framework
in which mobile security agents rule out incorrect reports
and reward reliable users. However, these frameworks cannot
always guarantee that the mobile devices (i.e., offloadees)
will provide reliable offloading results because the offloadees
are selected based on historical (or previous) information,
which only indicates whether they had appropriately pro-
cessed offloaded tasks [4], [14]. In addition, the privacy of
the task owner was not examined in these works.
Ni et al. [15] proposed a random matrix-based loca-
tion matching approach for mobile crowdsensing to allocate
tasks without disclosing the location of the mobile devices.
He et al. [16] presented a task offloading scheduling algo-
rithm based on a constrained Markov decision process prob-
lem to achieve a low task completion delay and low energy
consumption while maintaining a sufficient level of privacy
on the location and usage pattern. However, these works did
not consider the reliability of the offloading results.
FIGURE 1. System model.
III. SYSTEM MODEL
As shown in Fig. 1, a mobile device (i.e., task owner) offloads
tasks to adjacent mobile devices (i.e., offloadees) through a
wireless communication technology [21], [22] such as cellu-
lar D2D, WiFi-Direct, and Bluetooth. The task is character-
ized by ζD, which is its data size (i.e., the number of bytes),
and ζC , which is the amount of computing resources required
(i.e., the number of CPU cycles) [2]. Specifically, the task
owner maintains some information of offloadees, such as
number of previous participations in D2D offloading, NP,
channel state H , and computing power PC (i.e., CPU cycles
per second) in a candidate status table.1 Based on Shannon
theory, the D2D transmission rate Vi from task owner to the
ith mobile device can be expressed as Vi = W log2(1 +
εiηi
2
σ (g)diθ I
) where W is the bandwidth allocated for the D2D
link, εi is the D2D transmission power of the ith mobile
device, ηi is the channel fading coefficient, di is the distance
1Note that, for simplicity, we only considered a simple probability-based
good/bad channel model. Therefore, the channel fading coefficient is
assumed to be estimated based on the channel state H , which has two
conditions, i.e., good or bad. That is, if the channel condition is good,H is 1;
otherwise, H is 0.
191552 VOLUME 8, 2020
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
between the task owner and the ith mobile device, θ is the
path loss exponent, and I denotes the noise power. σ (g) =
−
2 log(5g)
3 represents the SNR margin introduced to meet the
desired target bit error rate (BER), denoted by g, with a QAM
constellation [20].
Based on this information, the task owner selectsNO appro-
priate offloadees and the number of tasks to be offloaded to
each offloadee in order to obtain reliable offloading results
with the minimum task completion delay while preserving its
privacy at a sufficient level. Note that the task owner selects
the offloadees and a verifier through the first step of PPTS
(i.e., the privacy-preserving offloading step), which is elabo-
rated in Section IV-A. After selecting the offloadees, the task
owner offloads its tasks redundantly to them. The appropriate
redundancy ratio of the offloading tasks is decided by the
static game, which is described in Section V, and the task
owner offloads the same redundant tasks to all the offloadees.
In the second step of PPTS (i.e., the blockchain-based
verification step), verification of the task results and incen-
tive transfer are performed using blockchain networks in
which the users can transact directly without a trusted author-
ity. Each transaction in blockchain networks works for the
monetary transfer and involves the amount of incentives,
incentive source (i.e., the task owner), incentive destination
(i.e., offloadees and verifier), and condition (i.e., the num-
ber of redundantly offloaded tasks). Note that the numbers
of transactions required to deliver the incentives from the
task owner to NO offloadees and the verifier are NO and 1,
respectively. Consequently, the task owner needs to construct
(NO + 1) transactions to verify the task results. In addition,
the task owner should allocate a certain amount of incen-
tives as a deposit, which will be delivered only when the
verification is completed [23]–[25]. The detailed verification
procedure will be elaborated in Section IV-B.
IV. PRIVACY-PRESERVING AND TRUSTWORTHY D2D
OFFLOADING SCHEME (PPTS)
PPTS consists of two steps: 1) a privacy-preserving offload-
ing step and 2) a blockchain-based verification step. These
two steps are described in the following subsections.
A. PRIVACY-PRESERVING OFFLOADING STEP
In the privacy-preserving offloading step, the task owner first
broadcasts a message to nearby mobile devices (i.e., can-
didates for offloadees and verifier). When receiving this
message, the mobile devices transmit their information
(i.e., identifiers (IDs) and computing powers PC ) to the task
owner if they want to participate in D2D offloading. After
that, the task owner selects NO offloadees and one verifier
among the mobile devices, and then offloads its tasks redun-
dantly to the selected offloadees.
We formulate an integer nonlinear programming (INLP)
problem to obtain reliable offloading results with the mini-
mum task completion delay while preserving the privacy of
the task owner at a sufficient level. The important notations
in this paper are summarized in Table 1.
TABLE 1. Summary of Notations.
Note that, in PPTS, offloadees receive the incentives only
when they process the redundant tasks appropriately. There-
fore, it can be assumed that the reliability of results can be
achieved by redundant offloading. In this situation, the objec-
tive of the privacy-preserving offloading step is to minimize
the task completion delay. Accordingly, we have to select
appropriate offloadees (i.e., those with high computing pow-
ers and good channel states) and number of tasks offloaded
to each offloadee.
Let XO and NT be the vectors representing the selected
mobile devices and the number of tasks offloaded to each
offloadee, respectively. The task completion delay τT is
decided by the offloadee that completes its tasks last. There-
fore, considering that τi denotes the task completion delay
of the ith mobile device selected as an offloadee, τT can be
expressed as
τT = max
XO,NT
τi · xi (1)
where xi is a binary variable denoting whether the ith mobile
device is selected as an offloadee. That is, if the ith mobile
device is selected as an offloadee, xi = 1; otherwise, xi = 0.
τi consists of 1) the task transmission delay from the task
owner to the ith mobile device; 2) the processing delay of the
ith mobile device; and 3) the result transmission delay from
the ith mobile device to the task owner. However, the result
VOLUME 8, 2020 191553
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
transmission delay from the ith mobile device to the task
owner can be neglected because the result is relatively small
in size compared with the offloading tasks [26]. Furthermore,
when nT ,i and Vi denote the number of tasks offloaded to the
ith mobile device and the data transmission rate between the
task owner and the ith mobile device, respectively, the task
transmission delay can be calculated by nT ,i·ζD
Vi
. In addition,
considering that the ith mobile device has a computing power
ofPC,i, the processing delay of the ithmobile device is nT ,i·ζCPC,i
.
To sum up, τi can be represented as
τi =
nT ,i · ζD
Vi
+
nT ,i · ζC
PC,i
. (2)
As mentioned above, our objective is to minimize the task
completion delay τT , which can be expressed as
min
XO,NT
τT . (3)
The problem formulated above is an INLP problem due to
the multiplication of two decision variables (i.e., xi and nT ,i)
in its objective function.
The constraints for offloadee selection are as follows. First,
the task owner selects NO offloadees in PPTS. Thus, we have∑
i∈M
xi = NO. (4)
The task owner offloads the same redundant tasks to all the
selected mobile devices (i.e., all offloadees) for verification.
Therefore, the number of offloaded tasks to each offloadee
should be larger than the number of redundant tasks. Thus,
the corresponding constraint can be expressed by
nT ,i · xi ≥ NT ,O · RO, for ∀i. (5)
where RO denotes the redundancy ratio. Note that RO can be
decided based on the analysis results of the static game in
Section V. Therefore, RO is assumed to be known in advance
for the INLP problem.
Furthermore, the total number of offloaded tasks (includ-
ing redundant tasks), denoted by NT ,T , should be equal to
the sum of the numbers of tasks offloaded to the offloadees
(i.e.,
∑
i
nT ,i · xi). Therefore, we have∑
i
nT ,i · xi = NT ,T . (6)
If too many tasks are offloaded to a specific offloadee,
it is easier to infer the entire data [27]. Thus, the ratio of the
tasks offloaded to each offloadee must be less than a given
threshold δ, to avoid such a situation. Thus, we have
nT ,i · xi
NT ,O
≤ δ, for ∀i. (7)
When the task owner frequently offloads its tasks to the
same offloadee, the data usage pattern of the task owner can
be easily inferred by this offloadee [16]. Thus, to protect
the privacy of the task owner in terms of its usage patterns,
an additional constraint is defined as
NP,i · xi ≤ γ, for ∀i. (8)
where NP,i is the number of previous offloadings to the ith
offloadee, and γ is the desired level of privacy of the task
owner regarding its usage pattern.
If a brute-force approach is used to solve the INLP prob-
lem formulated above, the complexity is given by O(2NM ·
NT ,ONM ), where NM is the total number of mobile devices
that want to participate in the D2D offloading, because we
have to check all the possible combinations of XO and NT .
Since this complexity is too high (i.e., a non-polynomial func-
tion), the brute-force approach is not feasible. Consequently,
we propose a low-complexity heuristic for privacy-preserving
offloading to determine a sub-optimal solution in a practical
manner (see Algorithm 1).
Algorithm 1 Privacy-Preserving Offloading Algorithm
1: Obtain all combinations CA of NO mobile devices among
NM mobile devices
2: k ← 0, j← 0
3: repeat
4: k ← k + 1
5: if NP,i ≤ γ , for ∀i ∈ Ck then
6: j← j+ 1
7: C j
U = Ck
8: S jV =
∑
i∈C jU
Vi
9: end if
10: until k =
(NM
NO
)
11: Select offloadees in C j∗
U , where j
∗
= argmax
j
S jV
12: Select the numbers of tasks to be offloaded to each
offloadee in proportion to its computing power while
satisfying nT ,i
NT ,O
≤ δ
13: Offload tasks to offloadees
The algorithm is described in detail as follows. First,
Algorithm 1 obtains all combinations CA of selecting NO
mobile devices among NM mobile devices (line 1). Note that
the total number of combinations is
(NM
N0
)
=
NM !
NO!(NM−NO)!
.
To find the combinations of mobile devices satisfying the
usage pattern privacy constraint in (8), Algorithm 1 checks
all combinations CA. If all the mobile devices in the kth com-
bination Ck satisfy the aforementioned constraint (line 5),
Algorithm 1 stores this combination intoC j
U (line 7). In addi-
tion,Algorithm 1 calculates the sum of the data transmission
rates of the mobile devices in C j
U (line 8). After finding all
combinations of mobile devices satisfying the usage pattern
privacy constraint, Algorithm 1 selects offloadees with the
highest summation of the data transmission rates (line 11).
Subsequently, Algorithm 1 selects the offloadees with the
highest summation of data transmission rates. Specifically,
Algorithm 1 selects the number of tasks to be offloaded in
proportion to the computing power of each offloadee while
satisfying nT ,i
T ≤ δ (i.e., constraint in (7)) (line 12). Finally,
the task owner offloads tasks to the offloadees (line 13).
As mentioned before,Algorithm 1 finds the set of offload-
ees that satisfies the usage pattern privacy constraint and
191554 VOLUME 8, 2020
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
has the highest summation of data transmission rates among
NM mobile devices [28]. Therefore, its complexity is given
by O( NM !
NO!(NM−NO)!
) and its upper bound can be obtained as
O
(
NMNO
)
by Theorem 1 (see Appendix A for its proof).
Theorem 1: The complexity of Algorithm 1 is bounded
to O
(
NMNO
)
and the number of offloadees is a system
parameter (i.e., constant value). Therefore, Algorithm 1 has
polynomial time complexity.
Since D2D offloading is used among nearby devices and
the communication range is limited (e.g., 20 meters in WiFi
Direct), the number of offloadees (i.e.,NO) and the number
of mobile devices (i.e., NM ) are typically small values, e.g.,
NO is 1 or 2 and NM is less than 50 [3], [4]. Consequently,
the input size of Algorithm 1 is also small and it can be run
in polynomial time at the task owner. As reported in [29],
the energy consumption of an algorithm to solve a problem
in polynomial time is not significant. Therefore, the power
consumption to run Algorithm 1 is also low.
FIGURE 2. Operational example of privacy-preserving offloading step.
Fig. 2 presents an example of selecting the offloadees
and verifier using the heuristic privacy-preserving offloading
algorithm. In this example, four mobile devices want to par-
ticipate in D2D offloading. In addition, the task owner setsNO
to 2. After the mobile devices send their computing powers
and IDs to the task owner (step 1), the task owner finds all
combinations of selecting two mobile devices who satisfy
the usage pattern privacy constraint (step 2). Subsequently,
it obtains the summation ofVi of these combinations and sorts
them in descending order (step 3). Mobile devices 1 and 2
are selected as offloadees because they have the highest
summations of Vi (step 4). After that, the task owner offloads
tasks to the selected offloadees in proportion to PC,i. In this
example, NT ,T is 3 and PC,i of offloadee 1 and 2 are 4 and 2,
respectively. Therefore, the task owner offloads two tasks to
offloadee 1 and one task to offloadee 2 (step 5). Moreover,
the mobile device 3 is selected as the verifier because it has
a higher data rate than mobile device 4. Note that since the
verifier does not process any task requiring high computing
power,2 the task owner selects the verifier based on the trans-
mission rate without considering its computing power.
B. BLOCKCHAIN-BASED VERIFICATION STEP
The blockchain-based verification step is performed after
the tasks are offloaded. This step is described in detail as
follows. First, the task owner constructs (NO+1) transactions
(i.e., transaction Oi (1 ≤ i ≤ NO) and transaction V for the
verifier) to verify the task results and deliver the incentives
to the ith offloadee.3 After constructing transactions, the task
owner encrypts the number of redundant tasks (i.e., T ·RO) by
its own public key to prevent it from being decrypted by other
mobile devices (i.e., verifier and offloadees). That is, the task
owner obtains the encrypted value EO(T · RO), where EO(a)
is an encryption function with an input a based on the task
owner’s public key. Subsequently, the task owner publishes
the encrypted value to blockchain networks. This encrypted
value will be used for a comparison with the number of
redundant tasks counted by the verifier.
After processing the tasks, offloadees transmit the results
to the task owner. After that, they compute the hash values of
the task results to reduce the result sizes for a tactical com-
parison and transmit these values to the verifier. On receiv-
ing these values, the verifier counts the number of tasks
having the same hash values between all pairs of offload-
ees and obtains their maximum number for each offloadee
to determine the number of redundantly offloaded tasks.4
Specifically, the verifier compares the hash values from the
ith offloadee to those from the jth offloadee and obtains the
number of tasks with the same hash values, denoted by Nv,i,j
(for ∀j ∈ XO \ i). Subsequently, it can obtain the maximum
number of tasks having the same hash valueNv,i = maxj Nv,i,j
for each offloadee. The verifier performs this procedure for
all the offloadees. After that, it encrypts all Nv,i (for ∀i) by
its own public key. That is, it obtains the encrypted values
EV (Nv,i) (for ∀Nv,i) where EV (a) is an encryption function
with an input a based on the verifier’s public key. After the
encryption, the verifier publishes these encrypted values to
the blockchain networks.
The miners in the blockchain networks verify the trans-
actions using these published values (i.e., EV (Nv,i) and
EO(T · RO)). Specifically, for the transaction Oi, the miners
check whether EV (EO(T ·RO)) and EO(EV (Nv,i)) are identical
by using a cryptographic primitive. The cryptographic prim-
itive employed in this case is that doubly-encrypted values
with two public keys are always the same regardless of their
encryption orders [4]. Using this cryptographic primitive,
one cannot decrypt the ciphertexts (i.e., EV (EO(T · RO)) and
2The verifier simply receives the hash values and counts the number of
tasks having the same hash values.
3Note that the transactions are monetary transfers in the blockchain net-
works. The offloadees and verifier can obtain some incentives only when
prespecified conditions in the transactions are satisfied.
4The hash values of redundantly offloaded task results should be identical
since they are the same tasks.
VOLUME 8, 2020 191555
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
FIGURE 3. Operational example of blockchain based verification step.
EO(EV (Nv,i))) without the help of the other user. If these
values are identical, it indicates that the ith offloadee has
processed tasks properly, and thus, it can receive incentives.
Otherwise, the ith offloadee cannot obtain any incentives.
Furthermore, for the transaction V , the miners check whether
any EO(EV (Nv,i)) and EV (EO(T · RO)) have the equivalent
values. If these values are identical, it indicates that the ver-
ifier performed the verification appropriately, and therefore,
it can receive some incentives. Otherwise, no incentives are
provided to the verifier. Note that the condition of the trans-
action V is derived from the assumption that at least one of
Nv,i has the same value as (T · RO) if there are at least two
offloadees that processed tasks properly.5
Fig. 3 shows an example of the verification step. Three
offloadees are assumed in this example. Therefore, the task
owner constructs four transactions (i.e., transactions O1,
O2, O3 for the offloadees and V for the verifier) (step 1).
Subsequently, the task owner publishes EO(1) to blockchain
networks (step 2) because it is assumed that the number of
redundant tasks (i.e., T · RO) is 1 in this example. Moreover,
the task results and the hash values of the results are trans-
mitted to the task owner and verifier, respectively (steps 3-4).
After receiving the hash values, the verifier counts the num-
ber of tasks having the same hash values between all pairs
of offloadees and obtains the maximum numbers for each
offloadee (step 5). In this example, it is assumed that the
1st and 2nd offloadees process tasks properly, and the 3rd
offloadee does not process tasks properly and transmits fake
hash values on the task results. Therefore, in the case of
5Providing appropriate incentives to the offloadees is believed to encour-
age them to process the tasks appropriately. Therefore, this assumption is
considered reasonable. In addition, the probability that at least two offloadees
among 10 offloadees process the tasks properly is larger than 99% since the
probability that offloadees do not process the tasks properly is under 0.5 in
practical D2D offloading systems [30], [31].
the 1st offloadee, Nv,1,2 is 1 because the hash values of
redundant task results of the 1st and 2nd offloadees are
the same. However, Nv,1,3 is 0 because the hash values of
the redundant task result of the 1st and 3rd offloadees are
not the same. Accordingly, Nv,1 is 1 because the maximum
number of tasks having the same hash values (i.e., Nv,1,2 and
Nv,1,3) is 1. Similarly, Nv,2 is 1. However, Nv,3 is 0 because
there are no task results having the same hash value from
the other offloadees (i.e., both Nv,3,1 and Nv,3,2 are 0). The
verifier encrypts Nv,1, Nv,2, and Nv,3 using its own public key
and transmits them to blockchain networks. Then, the min-
ers in blockchain networks encrypt EV (Nv,1), EV (Nv,2), and
EV (Nv,3) by the task owner’s public key and EO(T · RO) by
the verifier’s public key. Finally, the miners check whether
EO(EV (Nv,i)) (1 ≤ i ≤ 3) and EV (EO(T · RO)) are identical.
Then, the 1st and 2nd offloadees can obtain δ incentives
because EO(EV (Nv,1)), EO(EV (Nv,2)), and EV (EO(T · RO))
are the same. Furthermore, the verifier can obtain β incentive
because EO(EV (Nv,i)) (for i = 1 and i = 2) and EV (EO(T ·
RO)) are the same. However, the 3rd offloadee cannot obtain
the incentive because EO(EV (Nv,3)) = 0 is different from
EV (EO(T · RO)).
V. INCENTIVE AND REDUNDANCY RATIO ANALYSIS
In this section, we formulate a static game to decide an appro-
priate redundancy ratio of the offloading tasks and incentives
for the offloadees. This static game consists of three elements:
players, actions, and utilities. In our static game, the players
are NO offloadees. In addition, each player i (i.e., the ith
offloadee) has an action set A that can be expressed as A =
{0, 1, . . . , nT ,i}, where A = j indicates that the ith offloadee
processes j tasks properly among nT ,i tasks. Furthermore,
we define a utility function ui of player i considering its
incentive and energy consumption. Let α and EP be the unit
191556 VOLUME 8, 2020
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
incentive and the unit energy consumption for processing one
task, respectively. Thus, if player i processes all the offloaded
tasks properly (i.e., j = nT ,i) by consuming EP · nT ,i energy,6
player i always receives α · nT ,i incentives. In contrast, in the
case of 0 < j < nT ,i, player i consumes EP·j, and it can
obtain α · nT ,i incentives with the probability ρP. Here, ρP
is the probability that player i processes only a part of the
tasks (i.e., j tasks) properly and it can obtain the incentive by
chance. To sum up, the utility ui can be defined as
ui =
{
ωα · nT ,i − (1− ω)EP · nT ,i, if j = nT ,i
ωα · nT ,i · ρP − (1− ω)EP·j, if 0 < j < nT ,i
(9)
where ω is a weighted factor to balance incentives and the
energy consumption.
The aforementioned ρP can be calculated as
( j
NT ,O·RO
)
/( nT ,i
NT ,O·RO
)
because the redundantly offloaded tasks should be
included in the properly processed tasks to obtain the incen-
tives. If player i processes all the redundant tasks properly,
it can receive the incentive because the verification is per-
formed with the redundantly offloaded tasks. Furthermore,
if the number of tasks excluding the properly processed task
(i.e., j) is smaller than the number of redundantly offloaded
tasks (i.e., NT ,O · RO), the situation where player i processes
all the redundant tasks properly cannot occur. Therefore,
ρP is 0. To sum up, ρP can be expressed as
ρP =

( j
NT ,O·RO
)
(
nT ,i
NT ,O·RO
),
if NT ,O · RO ≤ j
0, otherwise.
(10)
In our static game model, we can derive Theorem 2 and
guarantee that PPTS operates without any untruthful behav-
iors of the offloadees if a suitable incentive and redun-
dancy ratio are decided based on Theorem 2. The proof of
Theorem 2 can be found in Appendix B.
Theorem 2: In our static game, each player processes all
the offloaded tasks properly if the appropriate incentive
according to the redundancy ratioRO is provided. That is,A =
nT ,i is the best response strategy for player i if the unit incen-
tive α is larger than (1−ω)
ω
·
EP·(nT ,i−NT ,O·RO−1)·(nT ,i−1)!
nT ,i!−(nT ,i−NT ,O·RO)!(NT ,O·RO+1)!
.
VI. EVALUATION RESULTS
For performance evaluation, we compare the proposed
scheme, PPTS, with that of the following three schemes:
1) OPTIMAL, which selects offloadees and the number
of tasks to each offloadee by solving the INLP prob-
lem; 2) RANDOM, which selects offloadees randomly; and
3) FAST, which selects offloadees having good channel con-
ditions and the highest computing powers. Since the objective
of this paper is to minimize the task completion time while
preserving the privacy of the task owner at a sufficient level,
the task completion time and privacy metrics (i.e., δ and γ )
are used as performance measures of PPTS. To measure the
privacy metrics, we define the data privacy leakage level as
6Note that since the task results are considerably smaller in size than the
tasks [26], the energy consumed to transmit the task results can be neglected.
maxxi
nT ,i·xi
NT ,O
and the usage pattern privacy leakage level as
maxxi NP,i · xi. This is because the data privacy leakage level
increases as large parts of the original tasks are offloaded to a
specific offloadee, and the usage pattern privacy leakage level
increases as the offloading attempts are repeatedly performed
to the same offloadee. Note that the task completion time
consists of the transmission time from the task owner to
offloadees and the execution time at the offloadees.
The default parameter settings are as follows. NT ,O and
NT ,O · RO are set to 7 and 1, respectively. ζD is 2.5 Mb
and ζC is 1 Gigacycle. PC,i of the offloadees are uniformly
distributed in [3, 8] GHz [32], and the D2D range is 20 m.
Furthermore, we have the channel bandwidth W = 10MHz,
the noise power I = 5× 10−5, the target BER g = 10−3, and
the transmission power εi = 0.1 W . The distances between
the task owner andmobile devices are uniformly set in [0, 20].
ηi is 1.5 × 10−1 for good channel conditions and 1 × 10−1
for bad conditions, most of which are in accordance with
the real measurement in [2], [20]. We conducted simulations
1000 times in order to obtain reliable results.
FIGURE 4. Effect of γ .
A. EFFECT OF γ
Fig. 4 shows the task completion time according to the desired
level of usage pattern privacy, γ , when NO, NM and δ are
set to 2, 10 and 0.7, respectively.7 Considering the mobil-
ity of the mobile devices, 10% of the mobile devices are
replaced by new mobile devices for each offloading process.
As shown in Fig. 4, the task completion time decreases as
γ increases. This is because as γ increases, the number of
mobile devices satisfying the usage pattern privacy leakage
level also increases, which, in turn, increases the probability
of having mobile devices with good channel conditions and
high computing powers. Consequently, the task completion
time can be reduced by increasing γ .
B. EFFECT OF NM
Fig. 5 shows the effect of the number of mobile devices in
the offloading process, NM . The dotted lines in Fig. 5(a)
and Fig. 5(b) represent δ and γ , respectively, which are set
7The pre-defined privacy level can be set by the task owner according to
the desired privacy level and the task type.
VOLUME 8, 2020 191557
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
FIGURE 5. Effect of NM .
to 0.7 and 4, respectively. Moreover, NO and the ratio of
substituted mobile devices in the offloading process are set
to 2 and 0.2, respectively. As shown in Fig. 5, PPTS can
preserve the privacy of the task owner at a sufficient level
and achieve comparable performance to OPTIMAL in terms
of the task completion time. This is because PPTS selects
offloadees considering their channel conditions among the
mobile devices that satisfy the privacy leakage level and
offloads the tasks in proportion to their computing powers.
FIGURE 6. Effect of NO.
Fig. 5(c) shows that PPTS and OPTIMAL can reduce the task
completion time by increasingNM . This is because, whenNM
increases, the number of offloading mobile devices satisfying
the privacy level also increases.
Furthermore, from Fig. 5(c), it can be found that the task
completion time of FAST is the lowest among the compared
schemes. However, FAST cannot guarantee the required pri-
vacy level for offloading since it considers only the channel
conditions and computing powers of the offloadees.
191558 VOLUME 8, 2020
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
C. EFFECT OF NO
Fig. 6 shows the effect of the number of offloadees NO.
Similarly, the dotted lines in Fig. 6(a) and Fig. 6(b) are δ and
γ , which are set to 0.7 and 5, respectively. NM and the ratio
of substituted mobile devices in the offloading process are set
to 10 and 0.2, respectively. As shown in Fig. 6, all schemes
can reduce the task completion time by increasing NO. This
is because as NO increases, the number of offloaded tasks
to each offloadee decreases. Additionally, Fig. 6(c), shows
that when NO increases from 2 to 5, PPTS can still achieve a
better performance than RANDOM, whereas its gain relative
to that of RANDOM decreases slightly with an increase in
NO. This can be explained as follows. Initially, the mobile
devices with better channel conditions and higher computing
powers are actively selected as offloadees in PPTS. However,
as time progresses, previously selected mobile devices need
to be replaced by devices with worse channel conditions and
lower computing powers in order to satisfy the privacy level
requirement. In contrast, RANDOM is not affected by the
privacy level requirement; thus, its task completion time is
evidently reduced as NO increases.
VII. CONCLUSION
In this paper, we proposed a privacy-preserving and trustwor-
thy D2D offloading scheme (PPTS) to prevent the privacy of
the task owner and guarantee the task results during device-
to-device (D2D) offloading. PPTS consists of two steps 1) a
privacy-preserving offloading step and 2) a blockchain-based
verification step. PPTS achieves an improved task completion
time, while preserving a prespecified level of privacy of
the task owner. The incentive and redundancy ratio analysis
show how to determine the appropriate redundancy ratio
and incentive to make offloadees cooperative. Furthermore,
the evaluation results demonstrated that PPTS could guar-
antee a sufficient level of the privacy of the task owner
and provide reliable offloading results with a reduced task
completion time compared with that of a random scheme
in which offloadees were randomly selected. As our future
work, we plan to develop an improved offloading scheme
considering the mobility of mobile devices as well as the
privacy of the task owner.
APPENDIX A
PROOF OF THEOREM 1
The complexity of Algorithm 1 is O
(
NM !
NO!(NM−NO)!
)
. There-
fore, to prove that the complexity of Algorithm 1 is bounded
to O(NMNO ), we need to prove the inequality
O
(
NM !
NO!(NM − NO)!
)
≤ O(NMNO ). (A.1)
The left-hand side of (A.1) can be rearranged as
NM∏
k=NM−NO+1
k
NO!
. (A.2)
NM∏
k=NM−NO+1
k is smaller thanNMNO . Therefore, NM !
NO!(NM−NO)!
≤
NMNO .
Furthermore, the number of offloadees is a system param-
eter (i.e., constant value). Therefore, Algorithm 1 has poly-
nomial time complexity.
APPENDIX B
PROOF OF THEOREM 2
To prove Theorem 2, we need to show that action A = nT ,i
is a dominant strategy for the players since the dominant
strategy equilibrium is a Nash equilibrium. That is, if the
utility for action A = nT ,i is the largest, action A = nT ,i is the
dominant strategy for the players. Therefore, the following
inequality should be satisfied to prove Theorem 2:
ui(A = nT ,i)− ui(A = j (0 < j < nT ,i)) > 0. (B.1)
Because ρP is calculated as (nT ,i−NT ,O·RO)!j!
(j−NT ,O·RO)!·nT ,i!
(see page 6),
the left-hand side of (B.1) can be rearranged as
α −
(1− ω) · EP · (nT ,i − j) · (j− NT ,O · RO)!(nT ,i − 1)!
ω · ((j− NT ,O · RO)! · nT ,i! − (nT ,i − NT ,O · RO)!j!)
.
(B.2)
The proof of (B.1) can be provided by showing that the
minimum value of (B.2) is larger than 0. The value of (B.2) is
minimum when j is minimum and the minimum value of j is
NT ,O · RO+1. Therefore, let j be replaced by (NT ,O · RO+1).
Then (B.2) can be rearranged as
α −
(1− ω) · EP · (nT ,i − NT ,O · RO − 1) · (nT ,i − 1)!
ω · (nT ,i! − (nT ,i − NT ,O · RO)!(NT ,O · RO + 1)!)
.
(B.3)
It is sufficient to show that if α is larger than (1−ω)
ω
·
EP·(nT ,i−NT ,O·RO−1)·(nT ,i−1)!
nT ,i!−(nT ,i−NT ,O·RO)!(NT ,O·RO+1)!
, then the utility for action A =
nT ,i is larger than that of any other action. Therefore, action
A = nT ,i is the best strategy for every player if α is larger
than (1−ω)
ω
·
EP·(nT ,i−NT ,O·RO−1)·(nT ,i−1)!
nT ,i!−(nT ,i−NT ,O·RO)!(NT ,O·RO+1)!
.
REFERENCES
[1] Y. Li and W. Wang, ‘‘Can mobile cloudlets support mobile applica-
tions?’’ in Proc. IEEE Conf. Comput. Commun. (INFOCOM), Toronto,
ON, Canada, Apr. 2014, pp. 1060–1068.
[2] L. Pu, X. Chen, J. Xu, and X. Fu, ‘‘D2D fogging: An energy-efficient and
incentive-aware task offloading framework via network-assisted D2D col-
laboration,’’ IEEE J. Sel. Areas Commun., vol. 34, no. 12, pp. 3887–3901,
Dec. 2016.
[3] G. Hu, Y. Jia, and Z. Chen, ‘‘Multi-user computation offloading with
D2D for mobile edge computing,’’ in Proc. IEEE Global Commun. Conf.
(GLOBECOM), Abu Dhabi, UAE, Dec. 2018, pp. 1–6.
[4] D. Chatzopoulos, M. Ahmadi, S. Kosta, and P. Hui, ‘‘FlopCoin: A cryp-
tocurrency for computation offloading,’’ IEEE Trans. Mobile Comput.,
vol. 17, no. 5, pp. 1062–1075, May 2018.
[5] D.Wu, F.Wang, X. Cao, and J. Xu, ‘‘Joint communication and computation
optimization for wireless powered mobile edge computing with D2D
offloading,’’ J. Commun. Inf. Netw., vol. 4, no. 4, pp. 72–86, Dec. 2019.
[6] N. Lalwani, V. Mehta, and S. N. Merchant, ‘‘Efficient resource allocation
for crowd-cloud assisted D2D computation offloading,’’ in Proc. 16th
IEEEAnnu. Consum. Commun. Netw. Conf. (CCNC), Las Vegas, NV,USA,
Jan. 2019, pp. 1–2.
VOLUME 8, 2020 191559
H. Baek et al.: Privacy-Preserving and Trustworthy D2D Offloading Scheme
[7] M. Mehrabi, D. You, V. Latzko, H. Salah, M. Reisslein, and F. H. P. Fitzek,
‘‘Device-enhanced MEC: Multi-access edge computing (MEC) aided by
end device computation and caching: A survey,’’ IEEE Access, vol. 7,
pp. 166079–166108, Nov. 2019.
[8] J. Xie, Y. Jia, Z. Chen, Z. Nan, and L. Liang, ‘‘D2D computation offloading
optimization for precedence-constrained tasks in information-centric IoT,’’
IEEE Access, vol. 7, pp. 94888–94898, Jul. 2019.
[9] Y. Lan, X. Wang, D. Wang, Z. Liu, and Y. Zhang, ‘‘Task caching, offload-
ing, and resource allocation in D2D-aided fog computing networks,’’ IEEE
Access, vol. 7, pp. 104876–104891, Jul. 2019.
[10] M. Sun, X. Xu, X. Tao, and P. Zhang, ‘‘Large-scale user-assisted multi-
task online offloading for latency reduction in D2D-enabled heterogeneous
networks,’’ IEEE Trans. Netw. Sci. Eng., early access, Mar. 9, 2020, doi:
10.1109/TNSE.2020.2979511.
[11] W. Chen, C.-T. Lea, and K. Li, ‘‘Dynamic resource allocation in ad-hoc
mobile cloud computing,’’ in Proc. IEEE Wireless Commun. Netw. Conf.
(WCNC), San Francisco, CA, USA, Mar. 2017, pp. 1–6.
[12] T. Shi, M. Yang, X. Li, Q. Lei, and Y. Jiang, ‘‘An energy-efficient schedul-
ing scheme for time-constrained tasks in local mobile clouds,’’ Pervas.
Mobile Comput., vol. 27, pp. 90–105, Apr. 2016.
[13] S. Guo, J. Liu, Y. Yang, B. Xiao, and Z. Li, ‘‘Energy-efficient dynamic
computation offloading and cooperative task scheduling in mobile cloud
computing,’’ IEEE Trans. Mobile Comput., vol. 18, no. 2, pp. 319–333,
Feb. 2019.
[14] F. Restuccia and S. K. Das, ‘‘FIDES: A trust-based framework for
secure user incentivization in participatory sensing,’’ in Proc. IEEE Int.
Symp. World Wireless, Mobile Multimedia Netw., Sydney, NSW, Australia,
Jun. 2014, pp. 1–10.
[15] J. Ni, K. Zhang, X. Lin, Q. Xia, and X. S. Shen, ‘‘Privacy-preserving
mobile crowdsensing for located-based applications,’’ in Proc. IEEE Int.
Conf. Commun. (ICC), Paris, France, May 2017, pp. 1–6.
[16] X. He, J. Liu, R. Jin, and H. Dai, ‘‘Privacy-aware offloading in mobile-
edge computing,’’ in Proc. IEEE Global Commun. Conf. (GLOBECOM),
Singapore, Dec. 2017, pp. 1–6.
[17] M. I. Ashraf, M. Bennis, C. Perfecto, and W. Saad, ‘‘Dynamic proximity-
aware resource allocation in vehicle-to-vehicle (V2V) communications,’’
in Proc. IEEEGlobecomWorkshops (GCWkshps), Washington, DC, USA,
Dec. 2016, pp. 1–6.
[18] S.Mumtaz, K.M. S. Huq, J. Rodriguez, andV. Frascolla, ‘‘Energy-efficient
interference management in LTE-D2D communication,’’ IET Signal Pro-
cess., vol. 10, no. 3, pp. 197–202, May 2016.
[19] Y. Pan, M. Chen, Z. Yang, N. Huang, and M. Shikh-Bahaei, ‘‘Energy-
efficient NOMA-based mobile edge computing offloading,’’ IEEE Com-
mun. Lett., vol. 23, no. 2, pp. 310–313, Feb. 2019.
[20] S. Yu, B. Dab, Z. Movahedi, R. Langar, and L. Wang, ‘‘A socially-
aware hybrid computation offloading framework for multi-access edge
computing,’’ IEEE Trans. Mobile Comput., vol. 19, no. 6, pp. 1247–1259,
Jun. 2020.
[21] Z. Yang, M. Chen, W. Saad, C. S. Hong, and M. Shikh-Bahaei, ‘‘Energy
efficient federated learning over wireless communication networks,’’ 2019,
arXiv:1911.02417. [Online]. Available: http://arxiv.org/abs/1911.02417
[22] M. Chen, Z. Yang, W. Saad, C. Yin, H. V. Poor, and S. Cui,
‘‘A joint learning and communications framework for federated learning
over wireless networks,’’ 2019, arXiv:1909.07972. [Online]. Available:
http://arxiv.org/abs/1909.07972
[23] Y. He, H. Li, X. Cheng, Y. Liu, C. Yang, and L. Sun, ‘‘A blockchain
based truthful incentive mechanism for distributed P2P applications,’’
IEEE Access, vol. 6, pp. 27324–27335, Apr. 2018.
[24] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek,
‘‘Secure multiparty computations on bitcoin,’’ in Proc. IEEE Symp. Secur.
Privacy, San Jose, CA, USA, May 2014, pp. 443–458.
[25] I. Bentov and R. Kumaresan, ‘‘How to use bitcoin to design fair protocols,’’
in Proc. CRYPTO, Berkeley, CA, USA, Aug. 2014, pp. 421–439.
[26] Q.-V. Pham, T. Leanh, N. H. Tran, B. J. Park, and C. S. Hong, ‘‘Decen-
tralized computation offloading and resource allocation for mobile-
edge computing: A matching game approach,’’ IEEE Access, vol. 6,
pp. 75868–75885, Nov. 2018.
[27] Z. Xu, X. Liu, G. Jiang, and B. Tang, ‘‘A time-efficient data offloading
method with privacy preservation for intelligent sensors in edge com-
puting,’’ EURASIP J. Wireless Commun. Netw., vol. 2019, no. 1, p. 236,
Oct. 2019.
[28] Complexity of Combination Algorithm. Accessed: Oct. 5, 2020. [Online].
Available: https://stackoverflow.com/questions/24643367/whats-time-
complexity-of-this-algorithm-for-finding-all-combinations
[29] P. Baptiste, M. Chrobak, and C. Durr, ‘‘Polynomial time algorithms for
minimum energy scheduling,’’ 2009, arXiv:0908.3505. [Online]. Avail-
able: http://arxiv.org/abs/0908.3505
[30] T. Wang, Y. Sun, L. Song, and Z. Han, ‘‘Social data offloading in D2D-
enhanced cellular networks by network formation games,’’ IEEE Trans.
Wireless Commun., vol. 14, no. 12, pp. 7004–7015, Dec. 2015.
[31] C. Gao, H. Zhang, X. Chen, Y. Li, D. Jin, and S. Chen, ‘‘Impact of self-
ishness in device-to-device communication underlying cellular networks,’’
IEEE Trans. Veh. Technol., vol. 66, no. 10, pp. 9338–9349, Oct. 2017.
[32] J. Zhao, Q. Li, Y. Gong, and K. Zhang, ‘‘Computation offloading and
resource allocation for cloud assisted mobile edge computing in vehicular
networks,’’ IEEE Trans. Veh. Technol., vol. 68, no. 8, pp. 7944–7956,
Aug. 2019.
HOSUNG BAEK received the B.S. degree from
Korea University, Seoul, South Korea, in 2015,
where he is currently pursuing the M.S. and Ph.D.
integrated degrees with the School of Electrical
Engineering. His research interests include 5G net-
works, programmable dataplane language, mobile
cloud computing, and SDN/NFV.
HANEUL KO (Member, IEEE) received the B.S.
and Ph.D. degrees from the School of Electri-
cal Engineering, Korea University, Seoul, South
Korea, in 2011 and 2016, respectively. From
2016 to 2017, he was a Postdoctoral Fellow in
mobile network and communications with Korea
University. From 2017 to 2018, he was with the
Smart Quantum Communication Research Center,
Korea University. He was a Visiting Postdoctoral
Fellow with the University of British Columbia,
Vancouver, BC, Canada. He is currently an Assistant Professor with the
Department of Computer Convergence Software, Korea University, Sejong,
South Korea. His research interests include 5G networks, network automa-
tion, mobile cloud computing, SDN/NFV, and future Internet.
SANGHEON PACK (Senior Member, IEEE)
received the B.S. and Ph.D. degrees in com-
puter engineering from Seoul National University,
Seoul, South Korea, in 2000 and 2005, respec-
tively. From 2005 to 2006, he was a Postdoc-
toral Fellow with the Broadband Communications
Research Group, University of Waterloo, Water-
loo, ON, Canada. He joined the Faculty of Korea
University, Seoul, in 2007, where he is currently
a Professor with the School of Electrical Engi-
neering. His research interests include softwarized networking (SDN/NFV),
5G/6G mobile core networks, mobile edge computing/programmable data
plane, and vehicular networking. He was a recipient of the IEEE/Institute
of Electronics and Information Engineers (IEIE) Joint Award for IT Young
Engineers Award 2017, the Korean Institute of Information Scientists and
Engineers (KIISE) Young Information Scientist Award 2017, the Korea
University TechnoComplex (KUTC) Crimson Professor 2015, the Korean
Institute of Communications and Information Sciences (KICS) Haedong
Young Scholar Award 2013, the LG Yonam Foundation Overseas Research
Professor Program, in 2012, and the IEEE ComSoc APB Outstanding Young
Researcher Award, in 2009. He served as a TPC Vice-Chair for information
systems of the IEEE WCNC 2020, a Track Chair of the IEEE VTC 2020-
Fall/2010-Fall and the IEEE CCNC 2019, a TPC Chair of the IEEE/IEIE
ICCE-Asia 2018/2020, EAI Qshine 2016, and ICOIN 2020, a Publication
Co-Chair of the IEEE INFOCOM 2014 and ACM MobiHoc 2015, a Sym-
posium Chair of the IEEE WCSP 2013, a TPC Vice-Chair of the ICOIN
2013, and a Publicity Co-Chair of the IEEE SECON 2012. He is an Editor of
the IEEE INTERNET OF THINGS (IoT) JOURNAL, the Journal of Communications
Networks (JCN), and IET Communications. He is a Guest Editor of the
IEEE TRANSACTIONS ON EMERGING TOPICS IN COMPUTING (TETC) and the IEEE
TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING (TNSE).
191560 VOLUME 8, 2020
http://dx.doi.org/10.1109/TNSE.2020.2979511