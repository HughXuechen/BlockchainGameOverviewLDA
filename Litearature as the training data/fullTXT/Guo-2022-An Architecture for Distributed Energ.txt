An Architecture for Distributed Energies Trading in Byzantine-Based Blockchains
1216 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
An Architecture for Distributed Energies Trading
in Byzantine-Based Blockchains
Jianxiong Guo , Xingjian Ding, and Weili Wu , Senior Member, IEEE
Abstract—With the development of smart cities, not only are
all corners of the city connected to each other, but also con-
nected from city to city. They form a large distributed network
together, which can facilitate the integration of Distributed
Energy Stations (DESs) and corresponding smart aggregators.
Nevertheless, because of potential security and privacy protection
arising from trustless energies trading, how to make such ener-
gies trading go smoothly is a tricky challenge. In this paper, we
propose a blockchain-based multiple energies trading (B-MET)
system for secure and efficient energies trading by executing a
smart contract we design. Because energies trading requires the
blockchain in B-MET system to have high throughput and low
latency, we design a new byzantine-based consensus mechanism
(BCM) based on node’s credit to improve efficiency for the con-
sortium blockchain under the B-MET system. Then, we take
combined heat and power (CHP) system as a typical example
that provides distributed energies. We quantify their utilities and
model the interactions between aggregators and DESs in a smart
city by a novel multi-leader multi-follower Stackelberg game. It
is analyzed and solved by reaching Nash equilibrium between
aggregators, which reflects the competition between aggregators
to purchase energies from DESs. In the end, we conduct plenty
of numerical simulations to evaluate and verify our proposed
model and algorithms, which demonstrate their correctness and
efficiency completely.
Index Terms—Distributed energies trading, Smart city, con-
sortium blockchain, byzantine consensus, Stackelberg game.
I. INTRODUCTION
THE DEPLOYMENT of Distributed Energy Stations
(DESs) based on the Internet built by the development of
smart cities has been a hot topic because of its great potential
to reduce the consumption of fossil fuels and curb greenhouse
gas emission [1]. Considering a smart community equipped
with a DES, it is used to supply residents in this community
Manuscript received September 14, 2021; revised December 6, 2021
and December 15, 2021; accepted January 10, 2022. Date of publica-
tion January 12, 2022; date of current version May 20, 2022. This work
was supported in part by the Start-Up Fund from BNU at Zhuhai under
Grant 310432104, and in part by the National Science Foundation under
Grant 1747818 and Grant 1907472. The editor coordinating the review of
this article was C. You. (Corresponding author: Jianxiong Guo.)
Jianxiong Guo is with the BNU-UIC Institute of Artificial Intelligence
and Future Networks, Beijing Normal University at Zhuhai, Zhuhai 519087,
Guangdong, China, and also with the Guangdong Key Laboratory of AI
and Multi-Modal Data Processing, BNU-HKBU United International College,
Zhuhai 519087, Guangdong, China (e-mail: jianxiongguo@bnu.edu.cn).
Xingjian Ding is with the Faculty of Information Technology, Beijing
University of Technology, Beijing 100124, China (e-mail: dxj@bjut.edu.cn).
Weili Wu is with the Department of Computer Science, Erik Jonsson School
of Engineering and Computer Science, The University of Texas at Dallas,
Richardson, TX 75080 USA (e-mail: weiliwu@utdallas.edu).
Digital Object Identifier 10.1109/TGCN.2022.3142438
with multiple energies, such as electricity and heat. DES exist-
ing in the community can reduce residents’ dependence on the
centralized supply of energies, such as electricity from power
grid and heat from heat station, thus saving resources and
reducing the cost of using energies. Moreover, it can sell sur-
plus electricity and heat to the aggregators of power grid and
heat station for making revenue. DESs can trade their surplus
energies with aggregators that are responsible for collecting
energies from their communities in a peer-to-peer (P2P) man-
ner, thereby the multiple energies trading problem discussed
in this paper is formulated.
Traditional P2P energies trading is performed on the cen-
tralized energy management platform, however, such a mech-
anism has many drawbacks. Traders are often worried about
their payment security and privacy protection on the untrusted
and opaque third-party centralized platform. This intermediary
needs to verify and manage transactions between aggregators
and DESs. If suffering from some damages such as single point
failure, it will lead to privacy leakage and transaction loss [2].
Thus, it is urgent to establish a secure energies trading system
to guarantee the transactions among the distributed Internet of
energy can be executed effectively. This encourages the DESs
to sell their energies to aggregators without any worries, which
promotes the rational utilization of energies.
Blockchain [3] is a distributed database to store verified
transactions without a trusted intermediary. A new transac-
tion is required to be validated by a group of authorized
participants, and then it can be added into the blockchain.
It can be used to construct a secure and reliable energies
trading system because of its decentralization, security, and
anonymity [4], [5]. Therefore, the blockchain-based energy
trading system [6], [7], [8], [9] has been a hot research
issue. However, they usually had several obvious drawbacks
summarized as follows: 1) they only considered the trading
of one kind of energy, especially for electricity trading; 2)
The blockchains on which their systems were based usually
did not have good scalability and throughput; and 3) Their
modelings of energies flow in DESs were too idealized and
objective functions were too simplified, which are not real-
istic. In this paper, we mainly focus on solving these three
issues.
First, as we know, most DESs will generate a large amount
of heat while generating electricity. Thus, we consider such a
scenario of multiple energies trading. In a smart city, it con-
sists of a number of communities, each of which is equipped
with a DES. There are two aggregators, electricity aggregator
(EA) and heat aggregator (HA), trading with DESs in this city.
2473-2400 c© 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-0994-3297
https://orcid.org/0000-0001-8747-6340
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1217
The aggregators of different cities are interconnected to form
a wide area network. Based on that, we propose a blockchain-
based multiple energies trading (B-MET) system to solve the
drawback (1), where all aggregators are authorized participants
that are required to store the blockchain and complete the con-
sensus process. Thus, this is a consortium blockchain, which is
a little different from the public blockchains like Bitcoin and
Ethereum. Here, the consortium blockchain is more convenient
and flexible to achieve our goal.
Second, we design a smart contract that ensures energies
trading to be performed automatically when satisfying pre-
defined conditions. However, the traditional blockchains do
not have acceptable scalability since proof-based consensus
mechanisms have high latency, low throughput, demanding
computing power requirement, and so on. Therefore, they are
not suitable to our consortium blockchain in B-MET system.
To finish the task of energies trading, it needs to have a low
latency and high throughput consensus mechanism. Then, we
design a new byzantine-based consensus mechanism (BCM)
based on node’s credit to solve the drawback (2), which reflects
the performance of this node in the previous experience of par-
ticipating in consensus. After each round of consensus, each
node’s credit should be updated according to its voting result.
If its voting is consistent with the result of consensus, its credit
will be increased. Otherwise it will be decreased. Their credits
affect directly their probabilities of being chosen as the leader
and voting weight in next rounds. This not only motivates
participants to make the right decision, but also speeds up the
consensus process.
Third, there is an interaction between aggregators and DESs
in which the aggregator offers a unit price to purchase a kind
of energy from DES, and then DES decides the amount of
energy they are willing to sell. We take the combined heat
and power (CHP) system as an instance of DES and model
the realistic energies flow to solve the drawback (3). In a smart
city, there are two aggregators, EA and HA. For each DES in
this city, its utility consists of two parts: 1) one is to serve
the residents living in the community for satisfying their daily
consumption and 2) the other is to sell them to the aggre-
gators for gaining revenues. For the aggregators in this city,
their gains come from buying energies from DESs at a lower
price and selling them at the retail price. Here, we design
more practical utility functions for aggregators and DESs by
considering the authenticity of model and mathematical solv-
ability. Compared to [7], [8], our model is more consistent
with the needs of a real business scenario. To motivate the
DESs to sell more energies, the aggregators should offer a
higher price to them, but doing so raises costs and may result
in lower overall profits. Since the multilevel decision-making
processes between aggregators and DESs in a city, we formu-
late a noval multi-leader multi-follower (MLMF) Stackelberg
game to model this bargain between them. Here the aggre-
gators are leaders and DESs are followers. Their goals are
to maximize their utilities or profits respectively. This MLMF
Stackelberg game is analyzed and solved thoroughly in this
paper, and we prove the Nash equilibrium (NE) among aggre-
gators exists and is unique. Because the DESs are always able
to respond aggregators with the optimal strategy according to
their offered prices, the Stackelberg equilibrium (SE) exists
and is unique as well. We propose a distributed algorithm that
is guaranteed to reach the unique SE by limited information
interactions.
The contributions are summarized as follows: 1) we con-
sider multiple enegies trading instead of single energy trading
and take the CHP system as an example to demonstrate it;
2) we design an credit-based Byzantine consensus mechanism
to improve efficiency and throughput; and 3) we simulate the
energies flow in DES as realistically as possible, and estab-
lish a MLMF Stackelberg game model, which can be verified
theoretically and experimentally.
Organization: Section II discusses the related work.
Section III introduces the architecture of B-MET system,
describes CHP system, and defines utilities. Section IV
presents smart contract and byzantine-based blockchain.
Section V introduces the Stackelberg game and discusses
the solution. Section VI conducts numerical simulations.
Section VII is conclusion.
II. RELATED WORK
Distributed energy systems have been applied widely in
many different forms, such as DES [10] and vehicle-to-
grid [8], [11], to curb greenhouse gas and save cost. Integrating
DESs into a smart grid [12] has attracted more and more
researchers to participate recently. This causes the problems
of energy management and energy trading. Cecati et al. [13]
exploited DES to make the cost of power delivery mini-
mized by use of an efficient smart grid management system.
Georgilakis and Hatziargyriou [1] summarized the optimally
distributed generation placement problem systematically, clas-
sified and analyzed current and future research about it.
Zhang et al. [14] considered microgrid as a local energy sup-
plier for domestic buildings by utilizing DES, and studied
optimal scheduling of energy consumption through mixed-
integer programming. Nevertheless, the security issue in dis-
tributed energy trading is a big challenge. Blockchain [3] has
been introduced to address transaction security and privacy
protection issues. Mohanta et al. [2] reviewed the secu-
rity issue in Internet of Things (IoT) and gave a detailed
analysis about blockchain to solve security issue in IoT.
Zhang et al. [15] introduced a blockchain-enabled software
crowdsourcing platform to integrate task assignment and
resource lending by smart contracts.
In the blockchain-based P2P energy trading, Kang et al. [6]
put forward a localized P2P electricity trading pattern based on
consortium blockchain among plug-in hybrid electric vehicles.
Li et al. [7] proposed a P2P energy trading architecture based
on consortium blockchain for the industrial Internet of Things
relied on a credit-based payment scheme. Zhou et al. [11] con-
sidered the scenario of vehicle-to-grid and developed a secure
energy trading mechanism based on consortium blockchain.
Guo et al. [9] studied a blockchain-based energy manage-
ment system that guarantees secure electricity trading between
grid and DESs. However, they only focused on electricity
trading between grid and DESs. In this paper, we consider
multiple energies trading due to the diversity of energy forms.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1218 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
Moreover, they lose sight of low throughput and high latency
in their proof-based consensus process. In this paper, we try
to address it by proposing a new byzantine-based consensus
mechanism.
Stackelberg game is an effective tool to model the inter-
actions in energies trading. Maharjan et al. [16] studied the
demand response management by establishing a Stackelberg
game between multiple utility companies and customers to
maximize their utilities respectively. Bu and Yu [17] proposed
a four-stage Stackelberg game to consider a real-time pric-
ing problem for the electricity retailer in the demand-side
management. Chen et al. [18] proposed a Stackelberg game-
based framework to simulate the multiple resources allocation
between cloud server and end users, and found an equilibrium
solution by a backward induction process. Yang et al. [19]
designed a computing resource trading mechanism by a two-
level Stackelberg game (leader-level and user-level) for IoT
devices. As for Stackelberg game based blockchain mecha-
nisms [20], [21], [22], [23], Xiong et al. [20] used Stackelberg
game to present an edge computing resource management for
mobile proof-of-work blockchains. Yao et al. [21] modeled the
interactions between cloud server and mines by Stackelberg
game, and solved it by multiagent reinforcement learning algo-
rithm. Ding et al. [22] attempted to build a secure blockchain
network with IoT devices and modeled the interaction by a
two-stage Stackelberg game. Guo et al. [23] constructed a
collaborative mining network among mobile devices, where
they adopted Stackelberg game to model interactions between
edge and mining networks to get the optimal resource alloca-
tion. However, most existing research focused on cases with
one leader. Based on our modeling, the interactions between
aggregators and DESs is formulated as a MLMF Stackelberg
game, which is more complex and realistic.
III. SYSTEM ARCHITECTURE
Considering a smart city, it consists of a number of disjoint
smart communities, each of which is equipped with a DES
responsible for supplying multiple energies, such as electricity
and heat, to these residents living in this community. In this
city, there are several aggregators, which represent different
companies respectively, collecting different kinds of energies
from all DESs appertained to this city. The architecture of
blockchain-based multiple energies trading (B-MET) system
is shown in Fig. 1. In the B-MET system, given a smart city
Si , the entities can be shown as follows.
1) Aggregators: There are two aggregators, electricity aggre-
gator (EAi ) and heat aggregator (HAi ), associated with this
smart city Si . The EAi (resp. HAi ) is delegated by power
grid (resp. heat station) as a monopoly of the energy market.
They purchase electric energy (resp. heat energy) generated
by DESs in those communities that belong to this smart city.
2) DESs: The city Si can be partitioned into an uncer-
tain number of disjoint smart communities, denoted by set
{Ci1,Ci2, . . . ,Cij , . . .}. In community Cij , there is a dis-
tributed energy station DESij supplying electricity and heat
to the residents living in this community. Besides, DESij
is able to sell surplus electric energy (resp. heat energy)
Fig. 1. The architecture of blockchain-based multiple energies trading system.
to the corresponding EAi (resp. HAi ) in order to make
revenues.
3) Smart Meters: It is a built-in component installed in
each aggregator that monitors the energy flow transferred by
each DES in this city in real-time, and decide whether the
transaction has been accomplished.
Then, considering a larger ecosystem, such as a country,
it is composed of a number of smart cities. This ecosys-
tem S can be denoted by S = {S1, S2, . . . ,Si , . . .}. Here,
each Si ∈ S is a smart city in this ecosystem, and Si =
{{EAi ,HAi}, {Ci1,Ci2, . . . ,Cij , . . .}}. For convenience, the
notation DESij can be considered equivalent to Cij . Our B-
MET system is established on such an ecosystem, in which all
aggregators, including EAs and HAs, are interconnected each
other to form a peer-to-peer (P2P) network called “blockchain
network”, shown in the upper half of Fig. 1. In order to sup-
port secure energies trading between aggregators and DESs,
we adopt consortium blockchain to construct our B-MET.
The blockchain in the B-MET takes all aggregators in the
ecosystem as authorized participants, and they are charged
with storing the whole blockchain and performing the con-
sensus process. Each aggregator manages and records those
transactions between it and DESs in its city. The transactions
are packaged into blocks and added into blockchain when the
consensus among aggregators is reached.
A. Combined Heat and Power System
Here, the aforementioned DES is implemented by the com-
bined heat and power (CHP) system [24], [25]. The CHP
system consumes natural gas to generate electricity and heat
that serve its community or sell to the aggregators of its cor-
responding city, shown in Fig. 2. The gas is fed into the gas
turbine (GT) which will generate electricity Eg and emit high-
temperature waste heat Qw . The heat Qw can be recovered
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1219
Fig. 2. The structure of combined heat and power (CHP) system.
by heat recovery system that can generate heat Qr . Here,
Euse (resp. Quse ) is used to supply electricity (resp. heat) to
community, and Eexc (resp. Qexc) is sold to EA (resp. HA).
Shown as Fig. 2, the total electricity generated by GT is
Eg = Euse + Eexc . Measured in days, the units of quantities
denoted by E and Q are (J/day). The gas consumption per day
F (m3/day) can be defined as
F = Eg/
(
q · ηg
)
= Qw/
(
q · (1− ηg
))
, (1)
where q (J/m3) is the calorific value of natural gas, thereby the
total energy generated by F is q ·F definitely. The ηg is the
electric conversion of GT, percentage energy that transferred
to electricity. Given a specific GT, its electric conversion can
be considered as a constant. Besides, let ηr be the thermal
efficiency of heat recovery system, and ηh = 1 be the thermal
efficiency of heat component. We have Qr = Qw ·ηr = Qpre+
Qexc and Quse = Qpre respectively.
For a given CHP system, the electricity (resp. heat) gener-
ated by it can be divided into two parts: one is used to serve
local residents and another is sold to EA (resp. HA). Thus,
we define two dispatching factor α, β ∈ [0, 1] for this CHP,
where α = Euse/Eg is the electric dispatching factor and
β = Quse/Qr is the heat dispatching factor. This DES needs
to buy natural gas from the gas company. The company is for
profit, thus it is valid to assume the gas company always sup-
ply enough gas to meet the DES’s requirement. Given a smart
city Si and a community Cij ∈ Si , the energy relationships
in the CHP system of Cij has been obtained, that is
E ij
use = αij · ηg ·
(
qF ij
)
, (2)
E ij
exc =
(
1− αij
)
· ηg ·
(
qF ij
)
, (3)
Q ij
use = βij · (1− ηg
) · ηr ·
(
qF ij
)
, (4)
Q ij
exc =
(
1− βij
)
· (1− ηg
) · ηr ·
(
qF ij
)
. (5)
In this model, we assume all the CHPs in the S has the same
efficiency parameters ηg and ηr . Each CHPij can determine
the amount of electricity (resp. heat) that can be sold to EAi
(resp. HAi ) by adjusting its dispatching factor αij (resp. βij )
autonomously. For example, when αij is one, it means that
CHPij will not sell any electricity to EAi .
B. Utility Functions
Considering a smart city Si , the EAi (resp. HAi ) offers
a unit price pie (resp. pih ) to collect surplus electricity (resp.
heat) generated by DESij ∈ Si , where the units of pie and pih
are coin/J. For each DESij ∈ Si , it is a risk-averse agent in
the energy market. If DESij chooses dispatching factor αij ,
βij , and consume natural gas F ij , that is
U ij
(
αij , βij ,F ij
)
= W ij
e
(
E ij
use
)
+W ij
h
(
Q ij
use
)
+ pie · E ij
exc + pih ·Q ij
exc − cf · F ij ,
(6)
where W ij
e (resp. W ij
h ) is the satisfaction function of com-
munity Cij that provides electricity (resp. heat) to satisfy
the usage of local residents in this community, and E ij
use ,
E ij
exc , Q ij
use , and Q ij
exc are defined from (2) to (5). Here, cf
(coin/m3) is the unit cost of natural gas.
From our simplified CHP model, we denote the cost of elec-
tricity (resp. heat) produced from DESij by ce (resp. ch ).
Then, the cost (coin/J) of electricity and heat can be quanti-
fied, that is ce = cf /q and ch = cf /(q · ηr ). Thus, we have
cf · F ij = ηg · ce · (qF ij ) + (1 − ηg ) · ch · ηr · (qF ij ). If
the price pie (resp. pih ) offered by EAi (resp. HAi ) is less
than the cost ce (resp. ch ), this DESij will not sell any elec-
tricity (resp. heat) to them. It will reduce the gas intake F ij
such that only meet its local requirement. Like this, there is
no energies trading between aggregators and DESs, and obvi-
ously, it is not what we want to see. Thus, it is reasonable
to consider the prices offered by aggregators satisfy pie ≥ ce
and pih ≥ ch . At this time, for each DESij ∈ Si , it will pro-
duce electricity and heat as much as possible, because of the
fact that it is always profitable to sell them to the aggrega-
tors. For maximizing its utility, each CHP system will run at
full capacity. Here, for each CHPij , we define its maximum
production capacity (maximum gas consumption) per day as
F ij
m . Therefore, the utility U ij (αij , βij ,F ij
m ) can be denoted
by U ij (αij , βij ), because F ij
m is considered as a constant.
Remark 1: After here, we denote X ij = ηg · (qF ij
m ) and
Y ij = (1− ηg ) · ηr · (qF ij
m ) for convenience.
Based on [8], [16], [26] the natural logarithmic functions
were adopted extensively in characterizing the satisfaction of
consuming energy. That is
W ij
e
(
E ij
use
)
= k ije · ln
(
1 + bije · E ij
use
)
, (7)
W
ij
h
(
Q ij
use
)
= k
ij
h · ln
(
1 + b
ij
h ·Q ij
use
)
, (8)
where k
ij
e (resp. k ijh ) is a non-negative satisfaction coefficient
for electricity (resp. heat) in community Cij , and bije (resp.
b
ij
h ) is a non-negative adaption coefficient for electricity (resp.
heat) in this community as well. The adaption coefficients were
proposed in [9] first, which aimed to control the variation range
of the term ln(1 + ·), avoid it growing infinitely. Generally,
we let ln(1 + b
ij
e · E ij
use) = 1 (resp. ln(1 + b
ij
h · Q
ij
use) = 1)
when we choose αij = 1 (resp. βij = 1) by setting a valid
adaption coefficient bije (resp. bijh ) [9]. Base on that, thereby
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1220 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
we can formulate b
ij
e and b
ij
h as follows:
bije =
(
1/X ij
)
· (e − 1); bijh =
(
1/Y ij
)
· (e − 1). (9)
For aggregators in this city, power grid and heat station
are the retailers for electricity and heat, however they do not
have pricing power, because the retail prices of electricity and
heat subject to government’s regulation. Hence, we define a
retail price re (resp. rh ) of electricity (resp. heat). As a selfish
participant, it requires that pie ∈ [ce , re ] and pih ∈ [ch , rh ].
From (6), if pie (resp. pih ) offered by EAi (resp. HAi ) is too
low, each DESij ∈ Si will respond with raising its dispatching
factor αij (resp. βij ), and sell less energy to aggregators. If the
aggregators offer a high price to purchase energy, their prof-
itable spaces are reduced even if DESs are willing to sell more
energies to them. Both of these cases will cause aggregators’
profit to be cut down. Therefore, it is important for aggregators
to offer an optimal price such that not only encourage DESs
to sell more energies, but also ensure sufficient profitability.
If EAi (resp. HAi )) offers a price pie (resp. pih ), its profit
function can be defined as
V i
e
(
pie , p
i
h
)
=
(
re − pie
)
·
∑
Cij∈Si
E ij
exc , (10)
V i
h
(
pih , p
i
e
)
=
(
rh − pih
)
·
∑
Cij∈Si
Q ij
exc , (11)
where V i
e (resp. V i
h ) is the profit function of the EAi (resp.
HAi ) that collects electricity (resp. heat) from DESs in its city,
and E
ij
exc and Q
ij
exc are defined in (3) and (5).
IV. BYZANTINE-BASED BLOCKCHAIN
In this section, we will introduce a smart contract used to
perform energies trading, and design a novel byzantine-based
consensus mechanism based on the B-MET system.
A. Smart Contract
A smart contract is a collection of programmable digital
agreement that every participant commit to comply. Under
our blockchain-based energies trading ecosystem, a transac-
tion can only happen between aggregators and DESs in the
same city. Thereby, considering a city Si , a smart contract
can be decided together by its participants, which consist
of an aggregator k ∈ {EAi ,HAi} and a DESij ∈ Si . We
denote such a smart contract by Contract(k ,DESij ,STime).
Between anonymous and untrusted entities in a city, the
smart contract is able to execute credible transactions with-
out third institutions. Then, the procedure of its smart contract
Contract(k ,DESij ,STime) is presented as follows:
1) System Initialization: At the beginning, each
DESij ∈ Si needs to acquire a unique identifica-
tion IDij by registering in the designated institution
authorized by government. It will be assigned with its
public/private key pair (PKij ,SKij ) and a Accountij .
That is {IDij ,PKij ,SKij ,Accountij } ← register(DESij ),
where each account is associated with its wallet address
and balance, Accountij ← {Addressij ,Balanceij }. Then,
for each aggregator k ∈ {EAi ,HAi} in this city, it has
those necessary information {IDk ,PKk ,SKk ,Accountk}
as well. But there is a credit value Creditk that rep-
resent the reputation of aggregator k, thereby we have
Accountk ← {Addressk ,Balancek ,Creditk}. Here, tech-
nologies of asymmetric encryption are usually adopted by
current blockchain system for the sake of security, privacy,
and data integrity, which can be implemented by some
classic encryption algorithms, such as elliptic curve digital
signature [27], lattice-based signature [28], and anti-quantum
signature [29]. Given a massage msg encrypted by DESij ,
we have Hash(msg) = PKij (SKij (Hash(msg))) and
Hash(msg) = SKij (PKij (Hash(msg))). Here, the public
key works as a pseudonym that is open to all nodes and the
private key that is kept by itself. Thus, the unforgeability and
integrity is guaranteed.
2) Creation: An aggregator k ∈ {EAi ,HAi} offers
a price pk to buy energy from communities in its
city, then DESij responds it with the amount of energy
x ∈ {E ij
exc ,Q
ij
exc} that can be sold to k. Like this, a
new smart contract Contract(k ,DESij ,STime) is gener-
ated by signing with their private key respectively. Then,
this contract will be broadcasted to all authorized par-
ticipants (aggregators) in the ecosystem S. After reach-
ing a consensus, this smart contract will be deployed and
executed automatically. Each smart contract between aggre-
gator and DES, Contract(k ,DESij ,STime), is associated
with several variables, which include account information
(Accountk ,Accountij ), offered price pk , amount of energy x,
expected transaction time TransTime, and timestamp STime. To
guarantee this contract can be executed successfully, it needs
to verify whether aggregator k has sufficient balance such that
Balancek ≥ pk ·x and whether DESij has enough production
capacity to supply x amount of corresponding energy on time.
3) Execution: The Contract(k ,DESij ,STime) will be exe-
cuted if current time t ≥ TransTime after reaching a
consensus among aggregators in blockchain network. From
now on, it begins to trade energy and finish payment. The
smart meter in aggregator k verifies whether the amount of
energy has been transported to the designated location. Then,
fed this result from smart meter into the smart contract, if
yes, it will execute the payment process automatically, that
is (k ,Balancek − pk · x ) and (DESij ,Balanceij + pk · x ).
Here, we design a mechanism that the balance is permitted
to be negative. At the moment of payment, the smart con-
tract will complete payment as usual if the k’s balance is not
enough to pay. In this way, the k’s balance will become neg-
ative. Then, any contract that aggregator k participants in will
not be executed until its balance back to be positive.
Generally, the energies trading can be summarized as fol-
lows: In a smart city, a DES begins a smart contract with
an aggregator by responding it according to its offered price.
This contract needs to be verified by the consensus process
in blockchain network. Then, it will execute the pre-defined
procedure automatically once the trading conditions are met,
which achieves the digital currency and energy exchange
specified by contract between participants in a secure manner.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1221
Fig. 3. The consensus process of BCM.
B. Byzantine-Based Consensus Mechanism
As mentioned early, a consensus process is necessary to be
performed so as to ensure the consistency of blockchain stored
in every authorized node. Castro and Liskov [30] proposed a
practical byzantine fault tolerance (PBFT) algorithm, which
has been used in consortium blockchain system widely. Based
on it and combined with the characteristics of energies trad-
ing, we design a new byzantine-based consensus mechanism
(BCM). Our consensus process is performed among all aggre-
gators in the ecosystem S, and each of them has a local
transaction pool (LTP) to store all transactions it receives. The
consensus process is executed round by round, and the time
interval of block generation is given by ΔT . There are three
main stages shown in Fig. 3, which are pre-prepare, prepare,
and commit.
First, let us introduce the credit model, which will be used
in leader election to decide whether to reach a consensus. Let
N = {EA1,HA1,EA2,HA2, . . .} be the collection of consen-
sus nodes. We have known that there is an attribute Creditk ∈
[0, 1] for each k ∈ N , where a larger Creditk implies node
k is more trustworthy. We denote by Creditk (i) the credit of
node k after finishing the i-th round consensus. Then, we can
define Creditk (i + 1) according to the result of consensus in
the (i + 1)-th round, where this result is whether to add the
leader’s block into the blockchain. They are (1) When k is the
leader, we have Creditk (i + 1) = min{1,Creditk (i) + Δ1}
if its block is accepted to be added into the blockchain,
else Creditk (i + 1) = max{0,Creditk (i) −Δ1} if its block
is rejected; and (2) When k is not the leader, we have
Creditk (i + 1) = min{1,Creditk (i) + Δ2} if its decision
is consistent with consensus result; else Creditk (i + 1) =
max{0,Creditk (i)−Δ2} if it disagrees with the decision of
majority. We usually give Δ1 > Δ2 > 0 and initialize the
credit of each consensus node as Creditk (0) = 0.5. When
entering the (i + 1)-th round consensus:
1) Leader Election: The first step in this round is to select a
leader from all consensus nodes. This leader election is based
on node’s credit. Generally speaking, the better the credit value
of a node, the more likely it is to be elected as the leader.
Thus, the result of leader selection is unpredictable. For a
node k ∈ N , the probability that it is elected as the leader of
the (i + 1)-th round consensus is Pr [L(i + 1) = k ],
Pr [L(i + 1) = k ] =
Creditk (i)∑
j∈N Creditj (i)
, (12)
where L(i + 1) represents the leader of the (i + 1)-th round
consensus. Obviously, there is no chance to select a node
whose credit is zero as the leader.
2) Broadcast: Each aggregator in N broadcasts all trans-
actions which happen in current Δt and co-signed with a
DES in its city to the blockchain network. All the consen-
sus nodes will verify whether their received transactions are
valid. Those valid transactions will be stored in their LTP but
invalid transactions will be discarded.
3) Pre-Prepare: After all non-leader consensus nodes in
N \L(i + 1) have completed above verification process for
received transactions, the leader will package those selected
valid transactions in its LTP into a block BL. Then, the
leader signs this block and broadcasts pre-prepare message
(SKL(BL), pre-prepare) to the blockchain network.
4) Prepare: For each non-leader node k ∈ N \L(i + 1), it
will check the identity of leader and verify the pre-prepare
message from the leader. The block verification needs to con-
firm the pointer to the previous block, mercle root is correct
and compare the transactions in BL with the corresponding
transactions in its LTP. If node k believes BL is valid, it broad-
casts this prepare message (SKk (SKL(BL)), prepare) to the
blockchain network. All consensus nodes must make decisions
in this step, whether to agree or disagree with adding block
BL into the blockchain. Then for each node k ∈ N , it gathers
all prepare massages from other consensus node, checks their
identities and counts the weighted sum of received prepare
messages. Let Ak (i +1) ⊆ N be the set of nodes from which
node k receives prepare messages, including itself. If satisfying
the following inequality, that is
∑
a∈Ak (i+1)
Pr [a] ≥
(
2
⌊ |N | − 1
3
⌋
+ 1
)
1
|N | , (13)
where Pr [a] = Credita (i)/
∑
j∈N Creditj (i), we say node
k will accept block BL and broadcast commit message
(SKk (SKL(BL)), commit) to the blockchain network.
5) Commit: After sending their commit messages, they
should waiting commit messages from other consensus node.
For each node k ∈ N , its consensus process is com-
pleted until it receive sufficient commit messages such that∑
a∈Bk (i+1) Pr [a] ≥ (2�(|N | − 1)/3� + 1)/|N |, where
Bk (i+1) ⊆ N is the set of nodes from which node k receives
commit message, including itself.
6) Add a Block and Update Credits: If a consensus node
accepts the new block BL, it will be appended into the
blockchain in a linear and chronological order. Any failure
occurs in these three stages will terminate the current con-
sensus (do not add the new block). Besides, before finishing
this round, we need to update the credits of all the consen-
sus nodes according to the credit model. In next round, the
consensus process will perform based on their new credits.
There are two kinds of failures that can terminate the cur-
rent round: (1) The leader sends invalid block or do not
send its packaged block before the deadline; and (2) Too
many malicious nodes do not breadcast prepare messages even
though this block is valid. Shown as node HA1 in Fig. 3, it
is a faulty node. The credit of those nodes that make mis-
takes in this consensus process will be reduced. Let f be
the number of malicious nodes. According to [30], supposing
f ≤ �(|N |−1)/3�, the faults can be tolerated by the consensus
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1222 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
TABLE I
THE FREQUENTLY USED NOTATIONS SUMMARIZATION
Fig. 4. The interactions of MLMF Stackelberg game between aggregators
and DESs in city S.
system with |N | nodes. In our BCM, each consensus node’s
credit is initialized as a constant, thereby 2�(|N | − 1)/3�+ 1
normal nodes can make sure that (13) is satisfied. As the con-
sensus process performs more and more times, the normal
nodes’ credits increase but malicious nodes’ credits decrease
gradually. Therefore, the credits in this system will be more
accumulative in those normal nodes. According to (13), the
number of prepare message and commit message required to
reach a consensus declines, which helps reduce latency and
improve throughput. In summary, secure and traceable ener-
gies trading and digital currency exchange can be guaranteed
by our proposed B-MET system.
V. MULTIPLE ENERGIES TRADING:
A STACKELBERG APPROACH
A non-cooperative Stackelberg game generally refers to the
multilevel decision-making processes of a number of indepen-
dent decision-makers in response to the decision taken by the
leading player of the game [31]. In this section, we put forward
a multi-leader multi-follower (MLMF) Stackelberg game to
model the interactions in above smart contract between aggre-
gators and DESs. The frequently used notations in this paper
are shown in Table I. Considering a specific city S ∈ S, we
omit the subscript i for simplicity in subsequent analysis. Then,
the MLMF Stackelberg game G in S ∈ S can be defined as
G =
{
S,P,D, {Ve ,Vh},
{
U j
}
Cj∈S
}
. (14)
The interactions of MLMF Stackelberg game G between
aggregators and DESs in S ∈ S is shown in Fig. 4, and its
components are shown as follows.
1) Players Set S: The aggregators HA and EA act as leaders,
and offer a price respectively to the DESs. Then, DESj ∈ S
act as followers, and decide on the amount of electricity and
heat they want to sell respectively according to the offered
prices.
2) Strategy Spaces P and D: Let P = [ce , re ] × [ch , rh ]
be the strategy space of two aggregators, where we say
{pe , ph} ∈ P is a feasible strategy of HA and EA. Then, let
D = ×Cj∈S{[0, 1]×[0, 1]} be the strategy space of all DESs in
this city, and we have {αj , βj }Cj∈S ∈ D is a feasible strategy
of DESs.
3) Utility Functions {Ve ,Vh} and {U j }Cj∈S : Each player
in this game aims to maximize its utility or profit, which
reflects the quality of strategy that this player chooses.
{Ve ,Vh} is the profits of aggregators, defined in (10)
and (11); and {U j }Cj∈S are the utilities of DESs in S, defined
in (6).
A. DESs (Followers) Side Analysis
Given a price strategy {pe , ph} ∈ P offered by two aggre-
gators in city S, each DESj ∈ S decides the amount of
electricity E j
use (resp. heat Q j
use ) that sold to the EA (resp.
HA) by adjusting its dispatching factor αj (resp. βj ). Thus,
each DESj ∈ S aims to choose its optimal dispatching fac-
tors {αj , βj } according to {pe , ph} by solving the following
optimization problem (OPDES). Defined by M j
min the mini-
mum amount of energy that is required to maintain the basic
life for those residents living in this community, we have
max
{αj ,βj }
U j
(
αj , βj
)
, (15)
s. t. E j
use +Q j
use ≥ M j
min ;
{
αj , βj
}
∈ [0, 1]× [0, 1].
(16)
To ensure reasonableness, the E
j
min should be in a valid range,
thus we have M j
min ∈ (max{X j ,Y j },X j + Y j ). It means
that this minimum requirement is larger than the produc-
tion capacity of electricity or heat separately, which implies
that αj and βj are impossible to approach zero definitely.
Hence, the restrictions on (16) can be converted equivalently
to constraint (17), that is
X j · αj + Y j · βj ≥ M j
min ; αj ≤ 1, βj ≤ 1. (17)
Thus, the OPDES problem consists of (15) and (17) from now
on, which is a convex optimization problem.
Lemma 1: The OPDES is a convex optimization problem.
Proof: The domain enclosed by (17) is closed and bounded,
then the compactness is found immediately. The convexity of
this domian is trivial because it can be enclosed by three linear
restrictions. The domain of OPDES is an convex set.
Next, it is sufficient to show that the objective function
defined in (15) is continously differentiable and concave. First,
its first-order derivatives is
∂U j
∂αj
= X j ·
(
k
j
e b
j
e
1 + bjeX jαj
− pe
)
, (18)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1223
∂U j
∂βj
= Y j ·
(
k jhb
j
h
1 + bjhY
jβj
− ph
)
. (19)
Denote by H j the Hessian matrix of U j , we have
H j =
[
U
j
αα U
j
αβ
U
j
βα U
j
ββ
]
, (20)
where U j
αα = ∂2U j /∂αj 2, U j
αβ = ∂2U j /∂αj ∂βj , U j
βα =
∂2U j /∂βj ∂αj , and U
j
ββ = ∂2U j /∂βj
2
. Then, these second-
order derivatives are
∂2U j
∂αj 2
= − X j 2k
j
e b
j
e
2
(
1 + bjeX jαj
)2 ,
∂2U j
∂αj ∂βj
= 0, (21)
∂2U j
∂βj 2
= − Y j 2k jhb
j
h
2
(
1 + b
j
hY
jβj
)2 ,
∂2U j
∂βj ∂αj
= 0. (22)
Thus, we have U
j
αα < 0 and U
j
ββ < 0, which indicates that
∂2(−U j )/∂αj 2 > 0 and U j
ββ = ∂2(−U j )/∂βj
2
> 0. From
here, the Hassian matrix of −U j is positive definite, thereby
−U j is a convex function and our objective U j is a concave
function. The OPDES is a convex problem.
Therefore, to maximize a concave function, the station-
ary solution is unique and optimal. Let ∂U j /∂αj = 0 and
∂U j /∂βj = 0, we have
αj◦ =
1
X j
(
k je
pe
− 1
bje
)
; βj◦ =
1
Y j
(
k
j
h
ph
− 1
bjh
)
. (23)
Here, we need to note that the setting of parameter k
j
e (resp.
k jh ) must be in a valid range such that αj◦ ∈ (0, 1) (resp. βj◦ ∈
(0, 1)) for any offered price pe ∈ [ce , re ] (resp. ph ∈ [ch , rh ]).
Or else, this utility function is monotone, and it is meaningless
to adjust its dispatching factors. Base on that, thereby we can
restrict k je and k jh as follows:
k je ∈
(
reX
j
e − 1
,
ceX
j
1− 1/e
)
; k jh ∈
(
rhY
j
e − 1
,
chY
j
1− 1/e
)
, (24)
where it assume re < e · ce (resp. rh < e · ch ), or else no
such k je (resp. k jh ) can keep αj◦ ∈ (0, 1) (resp. βj◦ ∈ (0, 1))
satisfied for any offered prices.
Sequentially, we use Lagrange’s multipliers λ1, λ2
and λ3 for constraint (17), thereby the OPDES, defined
in (15) and (17), can be converted to the following form
Lj (αj , βj , λ1, λ2, λ3), that is
Lj = U j
(
αj , βj
)
+ λ1
(
X j · αj + Y j · βj −M j
min
)
+ λ2
(
1− αj
)
+ λ3
(
1− βj
)
, (25)
where we denote by Z j = X j + Y j − M
j
max . Then,
based on (25), the complementary slackness conditions (KKT
conditions) of OPDES are demonstrated as follows:
∂Lj
∂αj
=
∂U j
∂αj
+ λ1X
j − λ2 = 0, (26)
∂Lj
∂βj
=
∂U j
∂βj
+ λ1Y
j − λ3 = 0, (27)
λ1 ·
(
X j · αj + Y j · βj −M j
min
)
= 0, (28)
λ2 · (1− αj ) = 0, (29)
λ3 · (1− βj ) = 0, (30)
λ1 ≥ 0, λ2 ≥ 0, λ3 ≥ 0, and constraints (17). (31)
The optimal solutions of OPDES, shown as (15) and (17), can
take one of the following four cases, that is
1) Case 1: For αj < 1 and βj < 1, we have λ2 = λ3 = 0.
Look at (28), if λ1 = 0, substitute it into (26) and (27), we
can get a solution {αj◦, βj◦} according to (23). Then, we need
to check whether the constraint (17) can be satisfied. If yes,
the optimal solution is {αj◦, βj◦}. If no, it means λ1 > 0 and
X j · αj +Y j · βj −M j
min = 0. At this time, by solving (26)
and (27), we have
αj
� =
1
X j
(
k
j
e
pe − λ1
− 1
b
j
e
)
, (32)
β
j
� =
1
Y j
(
k jh
ph − λ1
− 1
bjh
)
. (33)
Substitute (32) and (33) into (28),
Ajλ1
2 + B jλ1 + C j = 0, (34)
where Aj = M j
min+1/bje+1/bjh , B j = k je+k jh−Aj (pe+ph),
and C j = Aj peph − k jeph − k jhpe . By solving (34), we have
two solutions, they are
λ1 =
−B j ±
√
B j 2 − 4AjC j
2Aj
. (35)
Here, it is easy to verify B j < 0 and C j > 0 based
on (9), (24), and M j
min ∈ (max{X j ,Y j },X j + Y j ), thus
it is possible that Δj = B j 2 − 4AjC j < 0. If Δj < 0, there
is no real solution; else we need to check whether the λ1
defined on (35) satisfies λ1 > 0. If λ1 > 0, substitute (35)
into (32) and (33), we obtain a solution {αj
�, β
j
�}. If it is
feasible, namely α
j
�, β
j
� < 1, the optimal solution can be
determined by {αj
�, β
j
�}.
2) Case 2: For αj = 1 and βj < 1, we have λ3 = 0. Look
at (28), if λ1 = 0, substitute it into (27), we can get a solution
{1, βj◦} according to (23). Then, we need to check whether
the constraint (17) can be satisfied and λ2 = ∂U j /∂αj ≥ 0.
If yes, the optimal solution {1, βj◦}. If no, it means λ1 > 0
and Y j · βj + X j −M
j
min = 0. According to (27), we have
βj� which is shown as (33). Substitute (33) into (28),
(
k
j
h
ph − λ1
− 1
bjh
)
+ X j −M j
min = 0. (36)
By solving (36), we have
λ1 = ph −
k jhb
j
h
b
j
h
(
M
j
min − X j
)
+ 1
. (37)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1224 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
If λ1 > 0 and λ2 = ∂U j /∂αj + λ1X
j ≥ 0, substitute (37)
into (33), we obtain a solution {1, βj�}. If we have βj� < 1,
the optimal solution can be determined by {1, βj�}.
3) Case 3: For αj < 1 and βj = 1, we have λ2 = 0. Look
at (28), if λ1 = 0, substitute it into (26), we can get a solution
{αj◦, 1} according to (18). Then, we need to check whether
the constraint (17) can be satisfied and λ3 = ∂U j /∂βj ≥ 0.
If yes, the optimal solution is {αj◦, 1}. If no, it means λ1 > 0
and X j · αj + Y j −M j
min = 0. According to (26), we have
α
j
� which is shown as (32). Substitute (32) into (28),
(
k je
pe − λ1
− 1
bje
)
+ Y j −M
j
min = 0. (38)
By solving (38), we have
λ1 = pe − k je b
j
e
bje
(
M j
min − Y j
)
+ 1
. (39)
If λ1 > 0 and λ3 = ∂U j /∂βj + λ1Y
j ≥ 0, substitute (39)
into (32), we obtain a solution {αj
�, 1}. If we have α
j
� < 1,
the optimal solution can be determined by {αj
�, 1}.
4) Case 4: For αj = 1 and βj = 1, we have λ1 = 0 because
we have assumed M j
min ≤ X j + Y j before. Substitute it
into (26) and (27), we have
(
αj
� = 1
)
=
1
X j
(
k jeX
j
λ2 + peX j
− 1
bje
)
, (40)
(
βj� = 1
)
=
1
Y j
(
k
j
hY
j
λ3 + phY
j
− 1
b
j
h
)
. (41)
By solving (40) and (41), we have
λ2 =
k
j
eX
j
X j + 1/b
j
e
− peX
j ; λ3 =
k
j
hY
j
Y j + 1/b
j
h
− phY
j (42)
According to (9), (24), the maximum value of λ2 can be
obtained when giving k je = ceX
j /(1 − 1/e). Substitute it
into (42), we have λ2 < ce −pe ≤ 0 because of pe ∈ [ce , re ].
By using the same way, we have λ3 < ch−ph ≤ 0 because of
ph ∈ [ch , rh ] as well. It does not satisfy (31), thus this solu-
tion {1, 1} is not feasible and cannot occur. The final result
will be in one of these four cases.
To sum up, offered a price strategy {pe , ph} ∈ P by aggre-
gators, the optimal response of each Cj ∈ S will be obtained
by above procedure. It is one of the three cases, except case
4, that depends on the offered prices, minimum requirement
M
j
min , and choice of satisfaction coefficient k je and k
j
h . Since
the expressions of the solution is very complicated, we cannot
give a unified formal expression to summarize the results that
contains all cases.
B. Aggregators (Leaders) Side Analysis
After receiving the responses E j
exc (resp. Q j
exc) of all Cj
in city S, the profit gained by aggregators EA (resp. HA) can
be determined according to (10) and (11). They assume each
DESj ∈ S will respond to them with the optimal strategy
according to their offered price. Thus, EA and HA aim to
choose its optimal prices {p∗e , p∗h} by solving the following
optimization problem (OPAGS), that is
max
{pe}
Ve(pe , ph ) s. t. pe ∈ [ce , re ], (43)
max
{ph}
Vh(ph , pe) s. t. ph ∈ [ch , rh ]. (44)
where EA (resp. HA) attempts to select an optimal price p∗e
(resp. p∗h ) to maximize its profit given ph (resp. pe ). The objec-
tive function, shown in (10) (resp. (11)), is strictly concave and
continuous differentiable with respect to pe (resp. ph ), which
will be proved in Lemma 2.
First, we consider electricity aggregator EA alone. Feeding
a price pe into Ve(·, ph ), the response αj (pe , ph) of each
DESj ∈ S must be in one of the following four events: 1) αj =
α
j◦; 2) αj = 1; 3) αj = α
j
�; and 4) αj = α
j
�. Then, its
first-order derivatives are
∂αj /∂pe = −k je/
(
X j pe
2
)
(45)
= 0 (46)
= −k je/
(
X j (pe − λ1)
2
)
, λ1 = (35) (47)
= −k je/
(
X j (pe − λ1)
2
)
, λ1 = (39). (48)
where it is one-to-one correspondences between (45)−(48) and
event (1)-(4). Then, the first-order derivative of EA’s objective
function is
∂Ve
∂pe
= −
∑
Cj∈S
X j
((
1− αj
)
+ (re − pe)
∂αj
∂pe
)
. (49)
Combined with (45)–(48), let ∂Ve/∂pe = 0, we can get a
solution p̂e that maximizes Ve(·, ph ) given ph . However, this
p̂e is constrained on the range of [ce , re ], thus the optimal
price strategy p̄e of EA is shown as follows:
p̄e =
⎧
⎨
⎩
re , if p̂e ≥ re
ce , if p̂e ≤ ce
p̂e , if ce < p̂e < re .
(50)
Due to the fact that the profit function Ve(·, ph ) given ph is
strictly concave with respect to pe , it increases first and then
decreases with the increase of pe . Thus, the maximum profit
is obtained at the price of re when p̂e ≥ re ; Similarly, the
maximum profit is obtained at the price of ce when p̂e ≤ ce ;
else obtained at stationary point.
Then, we consider heat aggregator HA alone. Feeding
a price ph into Vh(·, pe), the respone βj (pe , ph ) of each
DESj ∈ S must be in one of the following four events:
5) βj = β
j◦; 6) βj = 1; 7) βj = β
j
�; and 8) βj = β
j
�.
Then, its first-order derivatives are
∂βj /∂ph = −k jh/
(
Y j ph
2
)
(51)
= 0 (52)
= −k jh/
(
Y j (ph − λ1)
2
)
, λ1 = (35) (53)
= −k jh/
(
Y j (ph − λ1)
2
)
, λ1 = (37). (54)
where it is one-to-one correspondences between (51)–(54) and
event (5)–(8). Then, the first-order derivative of HA’s objective
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1225
function is
∂Vh
∂ph
= −
∑
Cj∈S
Y j
((
1− βj
)
+ (rh − ph)
∂βj
∂ph
)
. (55)
Let ∂Vh/∂ph = 0, we can get a solution p̂h that maximizes
Vh(·, pe) given pe . Similar to (50), constrained on the range
of [ch , rh ], the optimal price p̄h of HA can be formulated
similar to the analysis of (50) from its concavity.
C. Stackelberg Equilibrium
The aggregators, EA and HA in a smart city S, play
a non-cooperative game with each other to offer the unit
prices for electricity and heat. They all want to maximize
their profit according to their profit function defined on (10)
and (11). We denote this game between aggregators by A =
{{HA,EA},P, {Ve ,Vh}} and introduce the concept of the
Nash equilibrium (NE) shown as follows:
Definition 1: (NE): Given a game A, a feasible price strat-
egy {p̃e , p̃h} ∈ P is the NE if no player can improve its profit
by changing its strategy unilaterally, that is
Ve(p̃e , p̃h ) ≥ Ve(pe , p̃h ); Vh(p̃h , p̃e) ≥ Vh(ph , p̃e). (56)
At the NE, no aggregator attempts to offer a new price again
because they all achieve their mutually satisfactions respec-
tively (No one can improve its profit further). Then, we need
to study the existence and uniqueness of the NE of game A
between two aggregators in a city.
Lemma 2: The NE of game A between aggregators always
exist and is unique.
Proof: The strategy space in game A has been denoted
by P = [ce , re ] × [ch , rh ], which is a convex, closed, and
non-empty subset of the space R
2. Take aggregator EA as
an example, αj is the responsive dispatching factor given
the offered price {pe , ph} ∈ P from community Cj ∈ S.
From (45)–(48), its second-order derivatives are
∂2αj /∂pe
2 = 2k je/
(
X j pe
3
)
(57)
= 0 (58)
= 2k je/
(
X j (pe − λ1)
3
)
, λ1 = (35) (59)
= 2k je/
(
X j (pe − λ1)
3
)
, λ1 = (39), (60)
where they correspond to event (1)–(4). Here, ∂2αj /∂pe
2 > 0
in (57) trivially. ∂2αj /∂pe
2 > 0 in (59) and (60) since pe −
λ1 > 0 based on (32). Then, the second-order derivative of
EA’s objective function is
∂2Ve
∂pe2
=
∑
Cj∈S
X j
(
2 · ∂α
j
∂pe
− (re − pe)
∂2αj
∂pe2
)
. (61)
Here, observe that ∂αj /∂pe ≤ 0 from (45)–(48), and
∂2αj /∂pe
2 ≥ 0 from (57)–(60), we have ∂2Ve/∂pe
2 ≤ 0.
Thus, Ve(·, ph ) is concave with respect to pe .
From (51)−(54), its second-order derivatives are
∂2βj /∂ph
2 = 2k
j
h/
(
Y j ph
3
)
(62)
= 0 (63)
= 2k
j
h/
(
Y j (ph − λ1)
3
)
, λ1 = (35) (64)
= 2k jh/
(
Y j (ph − λ1)
3
)
, λ1 = (37), (65)
where they correspond to event (5)–(8). Then, the second-order
derivative of HA’s objective function is
∂2Vh
∂ph
2
=
∑
Cj∈S
Y j
(
2 · ∂β
j
∂ph
− (rh − ph)
∂2βj
∂ph
2
)
. (66)
By similar analysis, we have ∂2Vh/∂ph
2 ≤ 0 and Vh(·, pe)
is concave with respect to ph . Thus, game A is a con-
cave 2-person game. Because of their concavity, the Nash
equilibrium exists and is unique according to [32].
In a smart city S, the aggregators offer the price strategy
{pe , ph} ∈ P in the first stage, then each DESj ∈ S decides its
optimal dispatching strategy {αj , βj } according to the offered
prices in the second stage. It formulates a MLMF Stackelberg
game G between aggregators and DESs, shown as (14). The
optimal strategy set {{p̃e , p̃h}, {γ̄l}Cl∈S}, where γ̄l is the
optimal response of community Cl ∈ S based on its previous
leaders’ prices, can be obtained at the Stackelberg equilibrium
(SE), defined as follows.
Definition 2: (SE): Given a game G defined as (14), a fea-
sible strategy {{p̃e , p̃h}, {γ̄l}Cl∈S} is the SE if no player,
including leaders and followers, can improve its utility or profit
by changing its strategy unilaterally, that is
U j
(
p̃,
{
γ̄l
}
Cl∈S
)
≥ U j
(
p̃, γj ∪
{
γ̄l
}
Cl∈S\Cj
)
, (67)
Ve
(
p̃,
{
γ̄l
}
Cl∈S
)
≥ Ve
(
{pe , p̃h},
{
γ̄l
}
Cl∈S
)
, (68)
Vh
(
p̃,
{
γ̄l
}
Cl∈S
)
≥ Vh
(
{p̃e , ph},
{
γ̄l
}
Cl∈S
)
. (69)
where we denote prices p̃i = {p̃ie , p̃ih} and γj = {αj , βj } is
any feasible strategy that the DESj can give.
After reaching the SE, none of them tends to change its
strategy again because they cannot improve their utilities or
profits further by changing unilaterally. Then, we need to study
the existence and uniqueness of the SE of game G between
aggregators and DESs in a city.
Theorem 1: The SE of game G between aggregators and
DESs always exist and is unique.
Proof: In this game G, the aggregators will offer prices to
purchase energies in their city first. From Lemma 2, a NE
always exists and is unique between aggregators. According
to the analysis on DESs, they respond to aggregators with
their optimal dispatching strategies based on the offered prices.
Thus, the SE always exists and is unique.
D. Distributed Algorithm
In order to find the NE between aggregators based on the
optimal responses from DESs, we adopt the sub-gradient tech-
nique [33], [34], [35] for determining price strategies. It is
shown in Algorithm 1. In Algorithm 1, each aggregator is
assigned with its lowest price. At this time, the dispatching
factors of each DES in this city is closest to one, which should
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1226 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
Algorithm 1 Find NE
Input: Game G in a city S and a small step Δ
Output: Price strategy {p̃e , p̃h}
1: Initialize: {p̃e , p̃h} ← {ce , ch}
2: while True do
3: {x , y} ← {p̃e , p̃h}
4: // Consider aggregator EA
5: if Ve (p̃e+Δ, p̃h ) ≥ Ve (p̃e , p̃h ) and Ve (p̃e+Δ, p̃h ) ≥ Ve (p̃e−
Δ, p̃h ) then
6: p̃e ← min{re , p̃e +Δ}
7: else if Ve (p̃e − Δ, p̃h ) ≥ Ve (p̃e , p̃h ) and Ve (p̃e − Δ, p̃h ) ≥
Ve (p̃e +Δ, p̃h ) then
8: p̃e ← max{ce , p̃e −Δ}
9: end if
10: // Consider aggregator HA
11: if Vh (p̃h+Δ, p̃e ) ≥ Vh (p̃h , p̃e ) and Vh (p̃h+Δ, p̃e ) ≥ Vh (p̃h−
Δ, p̃e ) then
12: p̃h ← min{rh , p̃h +Δ}
13: else if Vh (p̃h − Δ, p̃e ) ≥ Vh (p̃h , p̃e ) and Vh (p̃h − Δ, p̃e ) ≥
Vh (p̃h +Δ, p̃e ) then
14: p̃h ← max{ch , p̃h −Δ}
15: end if
16: if {x , y} = {p̃e , p̃h} then
17: Break
18: end if
19: // Reduce Δ once for each iteration
20: Δ← δ ·Δ
21: end while
22: return {p̃e , p̃h}
be in feasible space defined on (17). Then, considering aggre-
gator EA, in each iteration, it updates its price in manner of
increasing by Δ or decreasing by Δ, where Δ is a given
small step. According to current prices {p̃e , p̃h}, we compare
the profits of EA by offering a price p̃e , p̃e +Δ, and p̃e −Δ,
then choose the best one and update the price p̃e . Considering
aggregator HA similarly, we compare the profits of HA by
offering a price p̃h , p̃h +Δ, and p̃h −Δ, then choose the best
one and update the price p̃h . At last, we update Δ with δ ·Δ
where δ ∈ (0, 1) is a attenuation factor.
Theorem 2: Given an initial price strategy and step Δ,
the Nash equilibrium of game A can be obtained by the
sub-gradient algorithm, shown in Algorithm 1.
Proof: Based on the conclusion of [33], [34], the sub-
gradient algorithm can converge to an optimal solution in
convex optimization. The objective functions of aggregators
are concave, thus they cannot improve its profit by changing
strategies unilaterally when reaching the optimal solution.
According to Lemma 2 and Theorem 2, the NE returned
by Algorithm 1 is the unique NE between EA and HA. Then,
the followers (DESs) always respond to leaders (EA and HA)
with their optimal strategies (dispatching factors). Based on
Theorem 1, this NE is the point of SE definitely.
VI. NUMERICAL SIMULATIONS
In this section, we conduct several experiments to test our
byzantine-based consensus mechanism (BCM) and model the
energies trading in a smart city.
A. Simulation Setup
To test our BCM, we give a blockchian network with 100
aggregators (consensus nodes) in which 30% of aggregators
are malicious nodes. Initially, we set Creditk (0) = 0.5 for
Fig. 5. The total delays of consensus under the BCM and PBFT.
each k ∈ M , Δ1 = 0.05 and Δ2 = 0.01. Here, we only
focus on the consensus decision process, namely the prepare
stage and commit stage. The delay of each stage in each round
is sampled from interval (0, 10) according to the Gaussian
distribution N(5, 2). Therefore, the total delay Tdelay in each
round can be denoted by
Tdelay = Tprepare + Tcommit ∈ (0, 20]. (70)
From here, we can know the maximum time to complete one
round consensus is 20. If the censensus cannot be reached
after this deadline, we think that this consensus has failed.
For example, the leader in this round is a malicious node and
it broadcast a invalid block. It cannot receive enough prepare
message and commit message, thereby this consensus fails and
total delay is 20.
To model the energies trading, we consider a city S =
{{EA,HA}, {C1, . . . ,Cj , . . . ,Cn}} where we denote the
number of communities in this city by n. At the standard atmo-
sphere, the calorific value of natural gas is q = 3.6 × 107
J/m3 on average. The retail price of electricity in U.S. is
0.2 dollar/kw.h. According to the conversion relationship of 1
kw·h = 3.6×106 J, it is 5.5 × 10−8 dollar/J. Equivalently, we
regard it as re = 5.5 × 10−8 coin/J in our B-MET system.
The electric conversion of GT is ηg = 0.5. We define the
maximum gas consumption F j
m = 200 m3/day and its unit
price cf = 1.08 coin/m3. Thus, we have ce = 3.00 × 10−8
coin/J and pe ∈ [3.00 × 10−8, 5.50 × 10−8] for the EA
definitely. The efficiency of heat recovery system is given
by ηr = 0.8, thereby we have ch = 3.75 × 10−8 coin/J.
The retail price of heat is rh = 6.25 × 10−8 coin/J. Thus,
we have ph ∈ [3.75 × 10−8, 6.25 × 10−8] for the HA def-
initely. According to (9), we have b
j
e = 4.773 × 10−10
and b
j
h = 5.966 × 10−10. Then according to (24), we have
k je ∈ [115.24, 170.85] and k jh ∈ [104.76, 170.85].
B. Simulation Results
The total delays of consensus under the BCM and PBFT are
shown in Fig. 5. Shown as (a) in Fig. 5, we have two obser-
vations. Under our BCM, the trend of total delay decreases
gradually as the round increases. After about the 40-th round,
the total delay stabilizes and fluctuates in a small range.
Besides, there will no longer be a total delay of 20 because
credits are accumulated to normal nodes, which leads to those
malicious nodes not being selected as a leader. Compared to
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1227
Fig. 6. The objective function of entities, including EA, HA, and DES, in
city S under the setting k1 and k2.
(b) in Fig. 5, we conclude that the delay of consensus process
is improved significantly by our BCM, thereby increasing the
throughput of B-MET system.
Then, we demonstrate the interactions of energies trading
in a smart city, which can be summarized as five parts.
1) Concavity of Functions: Considering a city S that has
only one community, we define this DES’s satisfaction coef-
ficient under two settings k1 = (ke , kh ) = (143.05, 137.81)
and k2 = (ke , kh ) = (159.73, 117.98). Fig. 6 draws the
objective function of entities in city S under the two set-
tings, where we define the minimum energy restriction at
OPDES as Mmin = 0. It means that there is no restric-
tion on DES to choose their partition coefficients in order to
demonstrate complete functional properties. Shown as Fig. 6,
the profit functions of aggregators and utility function of this
DES are obviously concave, which validates the conclusions
in Lemma 1 and Lemma 2.
2) Effect of Satisfaction Coefficients: Let us look at (d), (e),
(f) in Fig. 6. We increase ke but decrease kb under the setting
k2. Shown as (d), as ke increases, the maximum point that
obtains the maximum profit for EA moves toward the pos-
itive direction. It implies that the EA has to offer a higher
price to buy electricity from DES in order to gain the maxi-
mum profit, because electricity used to serve community can
Fig. 7. The objective functions of aggregators and DES’s optimal responses
in city S under the setting M1.
contribute more utility than before. Similarly, shown as (e),
as kh decreases, the maximum point that obtains the max-
imum profit for HA moves toward the negative direction.
From (f), as ke increases and kh decreases, the maximum
point that obtains the maximum utility for DES according to
pe = ph = 4.5× 10−8 moves from (α◦, β◦) = (0.301, 0.481)
in (c) to (0.404, 0.328) in (f). Thus, we have α◦ (resp. β◦)
increases with the growth of ke (resp. kh ).
3) Competition Between EA and HA: From the definition
of OPDES, we have a restriction that requires a feasible solu-
tion must satisfy X · α + Y · β ≥ Mmin and Mmin ∈
(max{X ,Y },X +Y ). Here, we all adopt satisfaction coeffi-
cient k1 = (ke , kh ) = (143.05, 137.81). In this part, we con-
sider two different settings, that is M1 = 0.7×max{X ,Y }+
0.3× (X +Y ) and M2 = 0.5×max{X ,Y }+0.5× (X +Y )
where M1 < M2. In order to demonstrate the effect of restric-
tions clearly, we use 2D figures instead of 3D figures. Fig. 7
and Fig. 8 draw the objective functions of aggregators and
optimal responses of DES according to aggregators’ offered
prices in city S under the two settings. Let us discuss the typi-
cal black curve, shown as (a) with ph = 3.75×10−8 in Fig. 7.
At the beginning, EA’s profit increases from pe = 3 × 10−8
to 3.13 × 10−8 where DES’s α decreases but β keeps con-
stant. This response implies that DES’s optimal strategy can be
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1228 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
Fig. 8. The objective functions of aggregators and DES’s optimal responses
in city S under the setting M2.
obtained at (α◦, β◦) where the first-order derivative is equal to
zero. Then, the middle section is a smooth curve, where DES’s
response is at the tight border X · α + Y · β = M1. In this
section, we can see DES’s response α decreases linearly and
β increases linearly. Finally starting from pe = 4.5 × 10−8,
EA’s profit decreases linearly because of β = 1. Let us look
at the yellow curve, shown as (a) with ph = 6.25 × 10−8 in
Fig. 7. At the beginning, EA’s profit is equal to zero since
DES responds with (α = 1, β = 0.3). Due to the high price
offered by EA and low price offered by EA, all electricity
should be partitioned to meet the minimum energy restriction
and only sell heat for making revenue. For Fig. 8, compared
with Fig. 7, we find that these functions show some struc-
tural changes as Mmin increases. The restriction M2 in Fig. 8
is larger than M1 in Fig. 7, which indicates the DES has to
use more energy to serve its community. Shown as (a), (d) in
Fig. 8, we can know that the DES’s optimal strategy cannot be
obtained at stationary points (α◦, β◦). All DES’s responses are
at the tight border X ·α+Y ·β = M2. Besides, the sections of
α = 1 or β = 1 are much larger than that under the restriction
M1. However, no matter what Mmin is, the EA (HA) always
needs to offer an increasing price in order to get its maximum
profit as the price offered by HA (EA) increases. This reflects
the competition between aggregators, which is different from
Fig. 9. The objective function of EA and DES’s optimal response in city S
without trading with HA.
that there is no restriction in Fig. 6. Therefore, the restriction
settings in OPDES have significant effects on the objective
functions of aggregators and optimal responses of DES.
4) No Competition: In this case, we assume the heat will
not be traded with HA, thus we constantly have β = 1. Thus,
the constraint (17) can be transformed to (Mmin − Y )/X ≤
α ≤ 1. Now, the offered price ph is nothing to do with us,
and the utility function of this DES is univariate. Given the
price pe offered by EA, the DES responds with α◦ by letting
dU /dα = 0 if (Mmin−Y )/X ≤ α◦ ≤ 1; otherwise responds
with the one that makes its utility larger from (Mmin−Y )/X
and 1. Fig. 9 draws the objective function of EA and optimal
response of DES according to EA’s offered price in city S with-
out trading with HA. Shown as (a) in Fig. 7, (a) in Fig. 8, and
(a) in Fig. 9, the profit obtained by EA when not trading with
HA becomes larger because there is no competition between
EA and HA. Shown as (b) in Fig. 9, we can see that the electric
dispatching factor decreases first and then keeps constant as
the EA’s offering price increases. Besides, the inflection point
appears later under the setting M2 since M1 < M2, which
meets our expectation.
5) Stackelberg Equilibrium: Considering a city S that
has five communities, we define these DESj ’s satisfaction
coefficients as k j = (k
j
e , k
j
h ) where j ∈ {1, . . . , 5}. We
assume k1 = (115.24, 137.81), k2 = (129.14, 137.81),
k3 = (143.04, 137.81), k4 = (156.94, 137.81), and k5 =
(170.85, 137.81) in this part. Fig. 10 draws the process of
converging to the SE with different initializations under the
restriction M1. Here, the parameters defined in Algorithm 1
is given by Δ = 1 × 10−10 and δ = 0.999. The initializa-
tion (re , rh ) implies to give {p̃e , p̃h} ← {re , rh} in line 3 of
Algorithm 1. Take (a) and (b) in Fig. 10 as an example, at the
beginning, the aggregators offer the highest prices, thus they
hardly gain any profit. By interacting with the five DES, the
aggregators decrease their offering prices gradually in each
iteration in order to improve profits. At approximately 100-
th iteration, they cannot improve their revenues by changing
their strategies unilaterally, thus reaching the NE. The DESs
in S always respond aggregators with their optimal strategies,
thus the SE can be reached. From (a), (c), and (e) in Fig. 10,
we can see that they can reach the same equilibrium point
regardless of what initialization is. However, the initialization
affects the rate of convergence, and a good initialization can
converge to the equilibrium point quickly. Fig. 11 draws the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: ARCHITECTURE FOR DISTRIBUTED ENERGIES TRADING IN BYZANTINE-BASED BLOCKCHAINS 1229
Fig. 10. The process of converging to SE with different initializations under
the restriction M1.
process of converging to the SE with different Δ under the
restriction M2. Here, we adopt the initialization (ce , ch ) and
δ = 0.999 as well. From (a), (c) in Fig. 11, they can quickly
approach to equilibrium point when we adopt the larger Δ.
Nevertheless, it has to wait for Δ to drop to a relatively low
level in order to improve this solution further. Therefore, how
to choose the value of Δ depends on your demand. If we do
not require high accuracy but high speed, it is recommended
to choose a large Δ; otherwise we should choose a small one.
According to Fig. 6, Fig. 7, and Fig. 8, it indicates that our
model meets the requirements to form MLMF SE. According
to Fig. 10 and Fig. 11, the SE can be reached definitely by
limited iterations. At this time, each players achieves its best
state.
6) Centralized v.s. Distributed: For the aggregators, it is
hard to know the complete information about all DESs in its
city. Even if knowing partial coefficients, such as coefficient
satisfactions, the settings of minimum energy restriction are
very flexible, which will change with the fluctuations of the
community population, season, and other factors. The optimal
responses from DES are unpredictable. Thereby the aggre-
gators can only obtain feedback information of DESs in
a distributed manner, that is to update their offering price
iteratively by interacting with DESs in their city.
Fig. 11. The process of converging to with different Δ under the restriction
M2.
VII. CONCLUSION
In this paper, we studied multiple energies trading problem
systematically. First, we proposed an architecture of B-MET
system to address the security and privacy protection issues
in distributed energy trading. In order to reduce latency and
improve throughput, we introduce a credit model and design a
new byzantine-based consensus mechanism based on it. Then,
we model the interactions between aggregators and DESs in a
smart city by MLMF Stackelberg game, which is more com-
plex and realistic than the models that have appeared before.
We solve it step by step, show the existence and uniqueness of
SE, and design a sub-gradient algorithm to find NE between
aggregators. Finally, the results of numerical simulations indi-
cate that our model is valid, and verify the correctness and
efficiency of our algorithm.
An important contribution is to improve the Byzantine-
based consensus mechanism by introducing a credit model,
in which the consensus can be achieved by the sum of the
credits of voting nodes rather than the number of voting
nodes. This is intuitively correct. However, we have not given
strict proof of its correctness, which is also our main work
in the next stage. In the future, we hope to verify whether
this credit-based Byzantine consensus mechanism is Byzantine
fault-tolerant and promote its applications. Besides, we will
focus on investigating how Byzantine fault-tolerance is related
to credit models and how we can quantify the relationship
between the credit model and performance improvement of
this mechanism. This is critical for developing more efficient
consensus algorithms.
REFERENCES
[1] P. S. Georgilakis and N. D. Hatziargyriou, “Optimal distributed gener-
ation placement in power distribution networks: Models, methods, and
future research,” IEEE Trans. Power Syst., vol. 28, no. 3, pp. 3420–3428,
Aug. 2013.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
1230 IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING, VOL. 6, NO. 2, JUNE 2022
[2] B. K. Mohanta, D. Jena, S. Ramasubbareddy, M. Daneshmand, and
A. H. Gandomi, “Addressing security and privacy issues of IoT
using blockchain technology,” IEEE Internet Things J., vol. 8, no. 2,
pp. 881–888, Jan. 2021.
[3] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”
Decentralized Bus. Rev., 2008, p. 21260.
[4] M. U. Hassan, M. H. Rehmani, and J. Chen, “Deal: Differentially private
auction for blockchain-based microgrids energy trading,” IEEE Trans.
Services Comput., vol. 13, no. 2, pp. 263–275, Mar./Apr. 2020.
[5] X. Liu, S. X. Sun, and G. Huang, “Decentralized services computing
paradigm for blockchain-based data governance: Programmability, inter-
operability, and intelligence,” IEEE Trans. Services Comput., vol. 13,
no. 2, pp. 343–355, Mar./Apr. 2020.
[6] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-in hybrid
electric vehicles using consortium blockchains,” IEEE Trans. Ind.
Informat., vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[7] Z. Li, J. Kang, R. Yu, D. Ye, Q. Deng, and Y. Zhang, “Consortium
blockchain for secure energy trading in Industrial Internet of Things,”
IEEE Trans. Ind. Informat., vol. 14, no. 8, pp. 3690–3700, Aug. 2018.
[8] Z. Su, Y. Wang, Q. Xu, M. Fei, Y.-C. Tian, and N. Zhang, “A secure
charging scheme for electric vehicles with smart communities in energy
blockchain,” IEEE Internet Things J., vol. 6, no. 3, pp. 4601–4613,
Jun. 2019.
[9] J. Guo, X. Ding, and W. Wu, “A blockchain-enabled ecosystem for
distributed electricity trading in smart city,” IEEE Internet Things J.,
vol. 8, no. 3, pp. 2040–2050, Feb. 2021.
[10] D. W. Wu and R. Z. Wang, “Combined cooling, heating and power: A
review,” Progr. Energy Combustion Sci., vol. 32, nos. 5–6, pp. 459–495,
2006.
[11] Z. Zhou, B. Wang, M. Dong, and K. Ota, “Secure and efficient
vehicle-to-grid energy trading in cyber physical systems: Integration of
blockchain and edge computing,” IEEE Trans. Syst., Man, Cybern., Syst.,
vol. 50, no. 1, pp. 43–57, Jan. 2020.
[12] J. C. Vasquez, J. M. Guerrero, J. Miret, M. Castilla, and L. G. De Vicuña,
“Hierarchical control of intelligent microgrids,” IEEE Ind. Electron.
Mag., vol. 4, no. 4, pp. 23–29, Dec. 2010.
[13] C. Cecati, C. Citro, A. Piccolo, and P. Siano, “Smart operation of wind
turbines and diesel generators according to economic criteria,” IEEE
Trans. Ind. Electron., vol. 58, no. 10, pp. 4514–4525, Oct. 2011.
[14] D. Zhang, N. Shah, and L. G. Papageorgiou, “Efficient energy consump-
tion and operation management in a smart building with microgrid,”
Energy Convers. Manag., vol. 74, pp. 209–222, Oct. 2013.
[15] W. Zhang, Z. Hong, and W. Chen, “Hierarchical pricing mechanism
with financial stability for decentralized crowdsourcing: A smart con-
tract approach,” IEEE Internet Things J., vol. 8, no. 2, pp. 750–765,
Jan. 2021.
[16] S. Maharjan, Q. Zhu, Y. Zhang, S. Gjessing, and T. Basar, “Dependable
demand response management in the smart grid: A Stackelberg game
approach,” IEEE Trans. Smart Grid, vol. 4, no. 1, pp. 120–132,
Mar. 2013.
[17] S. Bu and F. R. Yu, “A game-theoretical scheme in the smart grid with
demand-side management: Towards a smart cyber-physical power infras-
tructure,” IEEE Trans. Emerg. Topics Comput., vol. 1, no. 1, pp. 22–32,
Jun. 2013.
[18] Y. Chen, Z. Li, B. Yang, K. Nai, and K. Li, “A Stackelberg
game approach to multiple resources allocation and pricing in mobile
edge computing,” Future Gener. Comput. Syst., vol. 108, pp. 273–287,
Jul. 2020.
[19] Z. Yang, K. Liu, Y. Chen, W. Chen, and M. Tang, “Two-level Stackelberg
game for IoT computational resource trading mechanism: A smart con-
tract approach,” IEEE Trans. Services Comput., early access, Sep. 18,
2020, doi: 10.1109/TSC.2020.3024729.
[20] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When mobile
blockchain meets edge computing,” IEEE Commun. Mag., vol. 56, no. 8,
pp. 33–39, Aug. 2018.
[21] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trading
in blockchain-based Industrial Internet of Things,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[22] X. Ding, J. Guo, D. Li, and W. Wu, “An incentive mechanism for build-
ing a secure blockchain-based Internet of Things,” IEEE Trans. Netw.
Sci. Eng., vol. 8, no. 1, pp. 477–487, Jan.–Mar. 2021.
[23] S. Guo, Y. Dai, S. Guo, X. Qiu, and F. Qi, “Blockchain meets edge
computing: Stackelberg game and double auction based task offload-
ing for mobile blockchain,” IEEE Trans. Veh. Technol., vol. 69, no. 5,
pp. 5549–5561, May 2020.
[24] P. J. Mago and L. M. Chamra, “Analysis and optimization of CCHP
systems based on energy, economical, and environmental considera-
tions,” Energy Build., vol. 41, no. 10, pp. 1099–1106, 2009.
[25] D. Gvozdenac, B. G. Urošević, C. Menke, D. Urošević, and
A. Bangviwat, “High efficiency cogeneration: CHP and non-CHP
energy,” Energy, vol. 135, pp. 269–278, Sep. 2017.
[26] W. Tushar et al., “Three-party energy management with distributed
energy resources in smart grid,” IEEE Trans. Ind. Electron., vol. 62,
no. 4, pp. 2487–2498, Apr. 2015.
[27] D. Johnson, A. Menezes, and S. Vanstone, “The elliptic curve digi-
tal signature algorithm (ECDSA),” Int. J. Inf. Security, vol. 1, no. 1,
pp. 36–63, 2001.
[28] Y.-L. Gao, X.-B. Chen, Y.-L. Chen, Y. Sun, X.-X. Niu, and Y.-X. Yang,
“A secure cryptocurrency scheme based on post-quantum blockchain,”
IEEE Access, vol. 6, pp. 27205–27213, 2018.
[29] W. Yin, Q. Wen, W. Li, H. Zhang, and Z. Jin, “An anti-quantum trans-
action authentication approach in blockchain,” IEEE Access, vol. 6,
pp. 5393–5401, 2018.
[30] M. Castro and B. Liskov, “Practical Byzantine fault tolerance,” in Proc.
OSDI, vol. 99, 1999, pp. 173–186.
[31] T. Başar and G. J. Olsder, Dynamic Noncooperative Game Theory, 2nd
ed. Philadelphia, PA, USA: Soc. Ind. Appl. Math., 1998.
[32] J. B. Rosen, “Existence and uniqueness of equilibrium points for concave
N-Person games,” Econometrica J. Econometric Soc., vol. 33, no. 3,
pp. 520–534, 1965.
[33] S. Boyd, S. P. Boyd, and L. Vandenberghe, Convex Optimization.
Cambridge, U.K.: Cambridge Univ. Press, 2004.
[34] Y. Xiao, G. Bi, and D. Niyato, “A simple distributed power control
algorithm for cognitive radio networks,” IEEE Trans. Wireless Commun.,
vol. 10, no. 11, pp. 3594–3600, Nov. 2011.
[35] H. Zhang, Y. Xiao, L. X. Cai, D. Niyato, L. Song, and Z. Han, “A
multi-leader multi-follower Stackelberg game for resource management
in LTE unlicensed,” IEEE Trans. Wireless Commun., vol. 16, no. 1,
pp. 348–361, Jan. 2017.
Jianxiong Guo received the B.E. degree from the
School of Chemistry and Chemical Engineering,
South China University of Technology, Guangzhou,
Guangdong, China, in 2015, and the Ph.D.
degree from the Department of Computer Science,
University of Texas at Dallas, Richardson, TX, USA,
in 2021. He is currently an Assistant Professor
with the BNU-UIC Institute of Artificial Intelligence
and Future Networks, Beijing Normal University
at Zhuhai, and also with the Guangdong Key
Laboratory of AI and Multi-Modal Data Processing,
BNU-HKBU United International College, Zhuhai, Guangdong, China. His
research interests include social networks, algorithm design, data mining, IoT
application, blockchain, and combinatorial optimization.
Xingjian Ding received the B.E. degree in electronic
information engineering from Sichuan University in
2012, the M.S. degree in software engineering from
Beijing Forestry University in 2017, and the Ph.D.
degree from the School of Information, Renmin
University of China in 2021. He is currently an
Assistant Professor with the School of Software
Engineering, Beijing University of Technology. His
research interests include wireless rechargeable sen-
sor networks, approximation algorithms design and
analysis, and blockchain.
Weili Wu (Senior Member, IEEE) received the M.S.
and Ph.D. degrees from the Department of Computer
Science, University of Minnesota, Minneapolis, MN,
USA, in 1998 and 2002, respectively. She is cur-
rently a Full Professor with the Department of
Computer Science, The University of Texas at
Dallas, Richardson, TX, USA. Her research mainly
deals in the general research area of data com-
munication and data management. Her research
focuses on the design and analysis of algorithms
for optimization problems that occur in wireless
networking environments and various database systems.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:07 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TSC.2020.3024729
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice