Profit Sharing for Data Producer and Intermediate Parties in Data Trading over Pervasive Edge Computing Environments
Profit Sharing for Data Producer and
Intermediate Parties in Data Trading over
Pervasive Edge Computing Environments
Yaodong Huang , Yiming Zeng , Fan Ye , and Yuanyuan Yang
Abstract—Innovative edge devices (e.g., smartphones, IoT devices) are becoming much more pervasive in our daily lives. With
powerful sensing and computing capabilities, users can generate massive amounts of data. A new business model has emerged where
data producers can sell their data to consumers directly to make money. However, how to protect the profit of the data producer from
rogue consumers that may resell without authorization remains challenging. In this paper, we propose a smart-contract based protocol
to protect the profit of the data producer while allowing consumers to resell the data legitimately. The protocol ensures the revenue is
shared with the data producer over authorized reselling, and detects any unauthorized reselling. We also introduce a data relay process
that can enhance data accessibility in wireless edge networks. We formulate a revenue sharing problem to maximize the profit of both
the data producer and resellers/relayers. We formulate the problem into a two-stage Stackelberg game and determine a ratio to share
the reselling revenue between the data producer and resellers/relayers. Extensive simulations show that with resellers and relayers, our
mechanism can achieve up to 49.5 percent higher profit for the data producer and resellers/relayers.
Index Terms—Pervasive edge computing, blockchain, smart contract, game theory, profit sharing, data trading
Ç
1 INTRODUCTION
WITH the arrival of 5G networking systems, edge com-
puting is becoming increasingly pervasive in our daily
lives. The backbone technologies help the thrive of smart
edge devices, e.g., IoT devices, phones, and vehicles. These
edge devices are equipped with advanced sensing and com-
municating capabilities and can create massive amounts of
data, which can be transferred and shared easily among
devices and clients. Some new business models are emerg-
ing with an abundance of devices and data. Producers, the
owner of certain devices, can provide information or serv-
ices to consumers for income. One example is “We Media”,
where data producers trade their contents, mainly video
clips or texts, to other consumers and make money.
Consider a situation where the producer has for-profit con-
tent to sell to potential consumers in peer edge environments.
The producer wants to get reasonable rewards for the data it
sells, and the consumer wants to get desired and genuine data
from the producer. Most current solutions require a trusted
third party or platform to manage content and subscriptions.
For example, Gumroad [1] provides this kind of service for pro-
ducers to sell digital contents directly to consumers. Although
considerable amounts of data are sold on these platforms, there
are still adverse events [2], mostly related to security, trust, and
privacy concerns.Meanwhile, the consumer cannot assure that
the purchased data are genuine on such platforms, and unau-
thorized reselling is regulated largely by user reports, at best
incomplete, untimely, and unreliable [3].
To ensure secure and reliable data access, we adapt block-
chain technology for data trading in edge environments. The
blockchain technology used widely in cryptocurrencies is a
secure ledger in distributed environments. The ledger stores
transactions between accounts to transfer value, such as cur-
rencies, assets, and general data [4], [5]. There are many secu-
rity features built into the blockchain. First, the completed
transaction history is encoded in blocks for restoration and
verification. Second, unless malicious users have more than
half of the total computational power, neither the block nor its
contained data can bemodified theoretically. Blockchain tech-
nology helps a transaction take place in a decentralized fash-
ion, thus improving efficiency, security, and privacy over a
networkwithout a centralized entity or a trusted third party.
Despite the advantages of blockchain technology for data
trading in such distributed systems, there are many chal-
lenges in the data trading/reselling context. First, the con-
sumer can resell purchased data to other consumers and
share the profit with the original data producer. The data
producer should know that the data item is resold and the
second consumer can verify that the data item is genuine.
Second, to achieve fast and reliable data access in edge envi-
ronments, it is crucial that data items are proactively stored
onto some devices. Then, users can get data from nearby
devices for quick access. Third, since the resources of devi-
ces are often limited in edge environments, any device that
stores and sends data needs to consume its resources. Thus,
such devices should be compensated appropriately with a
share of the revenue from the producer.
� The authors are with the Department of Electrical and Computer Engineer-
ing, Stony BrookUniversity, Stony Brook,NY 11794USA.
E-mail: {yaodong.huang, yiming.zeng, fan.ye, yuanyuan.yang}@stonybrook.
edu.
Manuscript received 19 June 2020; revised 5 Apr. 2021; accepted 8 Apr. 2021.
Date of publication 15 Apr. 2021; date of current version 5 Dec. 2022.
(Corresponding author: Yaodong Huang.)
Digital Object Identifier no. 10.1109/TMC.2021.3073669
IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023 429
1536-1233 © 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tps://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-6330-1386
https://orcid.org/0000-0001-6330-1386
https://orcid.org/0000-0001-6330-1386
https://orcid.org/0000-0001-6330-1386
https://orcid.org/0000-0001-6330-1386
https://orcid.org/0000-0002-5004-4883
https://orcid.org/0000-0002-5004-4883
https://orcid.org/0000-0002-5004-4883
https://orcid.org/0000-0002-5004-4883
https://orcid.org/0000-0002-5004-4883
https://orcid.org/0000-0002-0131-6424
https://orcid.org/0000-0002-0131-6424
https://orcid.org/0000-0002-0131-6424
https://orcid.org/0000-0002-0131-6424
https://orcid.org/0000-0002-0131-6424
https://orcid.org/0000-0001-7296-9222
https://orcid.org/0000-0001-7296-9222
https://orcid.org/0000-0001-7296-9222
https://orcid.org/0000-0001-7296-9222
https://orcid.org/0000-0001-7296-9222
mailto:yaodong.huang@stonybrook.edu
mailto:yiming.zeng@stonybrook.edu
mailto:fan.ye@stonybrook.edu
mailto:yuanyuan.yang@stonybrook.edu
In this paper, we study the data trading problem in peer
edge environments. We propose a selling and reselling mech-
anism that ensures proper profit for the data producer, while
ensuring data genuineness to the consumer. The trading and
revenue sharing between different nodes are protected and
enforced by the smart-contract and blockchain. To determine
the optimal revenue sharing ratio, a Stackelberg game is for-
mulated to describe the interaction between the producer and
reseller/relayer nodes, and a unique equilibrium is derived.
We also propose a rounding scheme for the relaxed Stackel-
berg game model and derive the performance guarantee
between the rounded result and the optimal result. Extensive
simulations show that our proposed mechanism can achieve
up to 49.5 percent higher profit for the producer and also
share profit for other nodes to incentivize their participation.
We make the following contributions in this paper.
� We design a profit sharing mechanism for devices to
resell data and share the revenue with the data pro-
ducer. We develop a smart contract-based protocol
to ensure that the data selling and reselling are track-
able and the profit of each party is publicly accepted.
� We design a protocol for the consumer to verify if the
data is genuine from the producer without imposing
extra burdens on the consumer and protect the profit
of both the consumer and the producer.
� We model the interaction between the producer and
resellers/relayers as a two-stage Stackelberg game to
determine the optimal revenue sharing ratio. We fur-
ther derive the analytical solutions to maximize the
revenue of both the producer and resellers/relayers.
� We analyze the data storage and delivery scheme
and prove that the approximation ratio between the
rounded equilibrium of the Stackelberg game and
the optimal results is 2.
� We implement our proposed mechanism and con-
duct extensive evaluations. The results show that the
proposed mechanism can achieve up to 49.5 percent
more profit compared with using only the producer
for data selling, while offering profit for resellers and
relayers to incentivize participation in the network.
The rest of this paper is organized as follows. In Section 2
we discuss the model of the profit sharing mechanism. In
Section 3 we propose and analyze our Stackelberg game for
profit sharing. In Section 4 we evaluate the proposed data
trading mechanism. In Section 5 we discuss some related
work on peer edge networks and smart contracts. Finally,
we conclude the paper in Section 6.
2 RESELLING AND RELAYING PROCESSES
In this section, we introduce the data trading model in edge
environments. We discuss the reselling and relaying pro-
cesses in the model. We then present the details for the pro-
cesses under authorized and unauthorized reselling
situations and the detection of unauthorized reselling. We
also discuss the relaying process in detail.
2.1 Overview
2.1.1 Roles of Nodes
There are four main roles for each node n 2 N , which indi-
cates an active device in the system. The producer is the
node that produces original data items. The consumer is the
node that demands and purchases data items, denoted as
j 2 N . The reseller, denoted as i 2 N , purchases and stores
data items for self-implementation and can deliver data
items to requesting consumers to get more income. The
relayer determines which data items to be stored and deliv-
ers such cached data items to requesting consumers. The
relayer is denoted as i0 2 N .
2.1.2 Reselling Process
Nodes can take different roles at different times with differ-
ent data items in the network. In our proposed system, a
consumer is allowed to resell the data item after purchasing
it. The node that resells the data changes its role from a con-
sumer to a reseller. Since the data item is revealed to the
reseller after purchasing, it can sell data in one way or
another, authorized or pirated. Thus, the goal of our design
is to make sure the producer is aware of this reselling trans-
action and get corresponding revenue from the transaction.
We assume that consumers and the producer are honest
and rational when a reselling transaction happens. The con-
sumer wants to make sure that the data item it receives is
genuine and not corrupted. Thus, the consumer will proac-
tively check if the data is from the data source. The selling
information is encoded in the blockchain. Once it receives
data item k, consumer j will present verification packets to
potential producers for checking. Meanwhile, the producer
wants to ensure it gets a share of the reselling revenue. Since
all selling information is stored in the blockchain, the pro-
ducer can trace which nodes have already purchased the
data item. Once the producer gets the packet from a new
consumer that matches the information of a data item it
once produced, it will check if the reselling is authorized. If
the reselling is authorized, which means the reseller informs
the producer about the selling and revenue sharing infor-
mation, the transaction will be completed. The revenue is
shared between reseller i and the producer at a previously
determined ratio rik for data item k. Otherwise, the pro-
ducer shows proof of data ownership and rejects the
transaction.
2.1.3 Relaying Process
In wireless edge environments, proactive caching is a cru-
cial mechanism to share data among peer devices [6]. Plac-
ing data onto nodes closer to potential consumers improves
the availability, reduces the latency for data retrieval, and
enhances the experience of consumers.
Relayers are nodes that have available caching capacities
and want to make a profit by using them. The producer
wants to improve the consumer experience by putting data
items in multiple places closer to consumers. Thus, the pro-
ducer offers rewards to motivate relayers to cache data
items proactively. The relayers need to pay a fee to the pro-
ducer initially to store the data items. To minimize chances
of unauthorized copying, relayers store encrypted data so
they cannot view the content directly. The producer will
also share the revenue with relayers for each data item
delivered to consumers. Once a consumer requests and pur-
chases a data item that could be served by the relayer
directly, the relayer will send the encrypted data item to the
430 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
consumer, and the consumer will get the key for decrypting
the data item.
2.1.4 Assumptions
We assume that all nodes are selfish, rational, and want to
make more profit in the data selling process. Most of the
nodes follow the rules to get a reasonable share of their
profit. There are a small number of rogue nodes that want
to have unfair advantages to get more profit by cheating.
For example, in a reselling process, producers may want to
have all revenue without sharing it with the reseller; the
reseller may want to have all revenue without notifying the
producer.
In our proposed mechanism, the participation of con-
sumers is the key to reselling and ensures more profit. We
assume that consumers will check whether data items are
genuine through the validation process, either willingly or
mandatorily. Detecting situations that the consumer intends
to buy pirated data items and conduct off-network transac-
tions is beyond the scope of this paper.
We now present an authorized reselling process and an
unauthorized process, and how the unauthorized process
can be detected and dealt with.
2.2 An Authorized Reselling Process
In an authorized reselling process, the reseller will inform
the producer about the reselling process and share the reve-
nue with the producer. The revenue sharing is ensured
using smart contracts. Smart contract [7] is a protocol that
once it is signed by involved parties, the contract content
can be viewed and validated by others. The smart contract
is then encoded in blocks and then can be enforced by users
in the blockchain.
When a consumer finds data items that it demands, it
then sends requests to a nearby reseller to get the data item.
The corresponding reseller then sends the data item and
conducts key exchanges with the consumer. Meanwhile, the
reseller will generate a tripartite contract, which involves
the producer, the reseller, and the consumer. The contract
has the data item information, selling price, and revenue
sharing ratio between the reseller and the producer. The
price of this data item is determined by the producer while
the revenue sharing ratio is previously determined. Then,
the consumer pays for the data and three parties sign the
contract using their respective private keys. The contract
now takes effect and is stored into the blockchain to be pub-
licly validated. Fig. 1 shows the reselling process.
Since the contract takes effect only when the consumer,
producer, and reseller sign, it can avoid situations where
one or more parties do not play with the preset rules. If the
contract has incorrect information such as false price or false
sharing ratio, the consumer or the producer can simply
deny signing it. If the producer wants to have all the reve-
nue, it has to deny the contract and make a new contract.
However, the consumer and reseller will not sign this new
contract if the original information in the previous contract
is correct. Thus, the producer will not get any revenue.
Meanwhile, since each signature can be verified through the
public keys of these three parties, the contact effectiveness
can be verified. Other nodes then acknowledge the credit
change of each node.
Note that this reselling process will not corrupt the user
privacy in the blockchain. The revenue sharing is similar to
three-party transactions in traditional cryptocurrencies, and
the data content will not be revealed.
2.3 An Unauthorized Reselling Process
In an unauthorized reselling process, the reseller does not
inform the producer about the reselling process. The reseller
pretends the data item as of its own to take all revenue
alone. The resellers will rewrap the data item and tell others
this is a new data item.
Once a consumer finds the data item that it demands, it
may send the requests to this rogue reseller, which pretends
itself as the producer of the data item. The rogue reseller
sends the data and conducts key exchanges. Here, the con-
sumer checks whether the data item is genuine. The con-
sumer works on the verification process and broadcasts its
verification information. Once the real producer receives
the verification information, it can easily check whether
there exists a data item it once produced. If the producer
detects the data item and it is resold without authorization,
the producer will present the information to prove it. The
detailed validation process is presented in Section 2.4. Then
the producer will generate a new smart-contact in which it
leaves the reseller out. The consumer and the producer will
sign the new contract, and all the revenue is given to the
producer. Fig. 2 shows the process of unauthorized
reselling.
Fig. 1. Step by step information for an authorized reselling process.
(1) The consumer requests a data item from a nearby reseller. (2) The
reseller then sends the data item to the consumer. (3) The reseller gen-
erates a smart contract. The producer, consumer, and reseller all need
to sign the contract to make it effective. (4) The contract is encoded in
the blocks and enforced.
Fig. 2. Step by step information for an unauthorized reselling process.
(1) The consumer requests a data item from a nearby reseller. (2) The
reseller then sends the data item to the consumer. (3) The consumer
broadcast a piece of verification information and the data producer will
notice. (4) The data producer generates a smart contract directly with
the consumer, and the contact from the reseller will be discarded.
(5) The contract is encoded in the blocks and enforced.
HUANG ETAL.: PROFIT SHARING FOR DATA PRODUCER AND INTERMEDIATE PARTIES IN DATATRADING OVER PERVASIVE EDGE... 431
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
Since the producer will get notified by the consumer
about an unauthorized resold data item, the smart contract
from the reseller will not be signed by the other two parties.
In this situation, the reseller will suffer a loss for delivering
the data to the consumer. Thus, the reseller cannot get
unfair advantages by masquerading.
2.4 Verification Process
As we mentioned above, the consumer checks whether the
data item is genuine. When the consumer receives a data
item, it needs to check if the corresponding data producer is
not masqueraded by conducting the verification process.
Similar to the mining process, the consumer generates a
hash from the data item that is hard to obtain but easy to
check. The consumer first chooses any part of the data from
the data item it receives, and hash together with a nonce,
shown in Fig. 3a. It continues to use different nonce until
getting a hash value that follows a certain pattern (like sev-
eral 0’s in front of the hash value). The stricter the pattern is,
the harder the process will be. This hardness is related to
the price of the data item decided by the producer. This pro-
cess takes some time and computation power, which can
help the message against counterfeit due to computational
difficulty and keep the data content concealed. Then, the
consumer broadcasts the verification packet, shown in
Fig. 3b, including which part of the data indices, the hash,
and the nonce, to the network. The potential real producer
will receive the verification packet and checks if there are
data items that match the information. The producer will
hash the same content by the indices and nonce to see if it
matches the hash value given in the verification packet. If a
producer finds out the data item related to the verification
packet, it can declare that the transaction is unauthorized. It
has to show the consumer 1) it indeed owns the data item,
2) the reseller has purchased the data item before, and 3) the
smart contract does not include the producer. Such informa-
tion can be retrieved from the blockchain and can be easily
verified. Then, the producer will generate a new smart con-
tract and the consumer will sign this new contract. The con-
tract by the rogue reseller will be discarded, and the reseller
will not receive any revenue. Note that rouge consumers
may deny payment for the data item. This problem can also
happen when consumers send false information to trusted
third parties. A potential solution is to have a reputation
system where the consumer will suffer a reputation loss for
such behaviors. We will study such solutions in the future.
The verification process does not waste the computa-
tional power of the consumer. During the verification pro-
cess, the consumer contributes “work” to check the data
item information by computing a hash following preset
hash patterns. In blockchain systems, any valid “work” can
be related to credit. In our design, the “work” of the con-
sumer corresponds to some credits, which can be used to
pay for the data item. If the verification process does not
find any masquerade, the credits are used as the payment to
the producer. If the process finds that the reselling is unau-
thorized, the real producer will raise a new smart contract
and the consumer pays using the credits generated. Either
way, the “work” of the consumer is not wasted, and we can
keep the profit of the producer. Note that resource-limited
devices can purchase the computational power from
resourceful devices to conduct the verification. The node
can hand over a hash and let another node do the verifica-
tion process, which is still verifiable by the producer.
2.5 Relaying Process
The design of the relayer is to increase the availability and
the security of data items. On one hand, all nodes are profit-
seeking and rational. Since nodes have storage spaces, they
can make a profit from the available storage by caching and
helping nearby consumers to get the data item. On the other
hand, caching can make the content easy to obtain for con-
sumers. In edge scenarios, caching can make more replicas
for the data item to make it more robust. Caching data onto
key locations where they can be requested frequently
reduces the overhead of the network [6]. Similar to resellers,
nodes that want to become relayers will send the data item
to nearby consumers to get revenue. However, there are
three key differences between resellers and relayers. First of
all, any node can become a relayer once the relaying process
can make a profit, while only previous consumers can become
a reseller. Second, the initial payment is different. Resellers
have already paid in full for the data item, while relayers only
need to pay a part. Third, since a reseller is a previous con-
sumer, and has paid the data in full, the data content is
revealed to them. Thus, resellers can conduct unauthorized
reselling. Relayers are not previous consumers, and the only
purpose is to deliver data to make a profit. Thus, the producer
wants cached data items encrypted to keep data concealed.
Table 1 shows the comparison of these two roles.
In the data relaying process, relayers will negotiate the
revenue sharing ratio from the producer, and evaluate the
potential revenue of this data item they can get and the cost
it needs to pay. Then the relayer will decide whether to
cache the encrypted data item. The data item is encrypted
Fig. 3. The hashed item (a) and the verification packet example (b). The
hash included a part from the data and a nonce to meet the previous set
pattern of the hash value.
TABLE 1
Comparison of Resellers and Relayers
Roles Reseller Relayer
Who can become? Previous
consumer
Any node
Initial payment to the
producer
In full In part
Data cached Decrypted
data
Encrypted data
Can conduct authorized
reselling/relaying?
Yes Yes
Can conduct unauthorized
reselling/relaying?
Yes (have
raw data)
No (need key to
decrypt data)
432 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
using a symmetric cryptographic method (e.g., triple DES,
AES), and relayers cannot reveal the content. After relayers
caching the corresponding data items, consumers that
demand the data item can get it from nearby relayers. Con-
sumers also need to conduct key exchanges with the pro-
ducer to decrypt the data item. The producer will send the
encryption/decryption key to the consumer using an asym-
metric cryptography algorithm. Then, the relayer will gen-
erate a tripartite contract. The producer, relayer, and
consumer will sign the contract, and the transaction is fin-
ished. We argue that since the relayer caches the data item
on behalf of the producer, and the producer can be imper-
sonated (i.e., rogue resellers), the consumer needs to pay
the data through the verification process to check whether
the data item is genuine.
Note that compared with the data items, keys are often
much smaller in size (e.g., much less than 1KB). Thus, the
consumer will get data from relayers and get the key from
the producer. The key exchanges will likely be successful
even if the consumer is far away from the producer due to
the small size. Thus, we design the consumer to have key
exchanges directly with the producer. To better protect the
data item, the producer will assign different keys for differ-
ent data replicas on relayers. The consumer who buys the
data item will have a corresponding key of the data item it
receives from corresponding relayers.
3 FORMULATIONS AND SOLUTIONS TO REVENUE
SHARING GAME
In this section, we first formulate the revenue sharing gam-
ing problem and propose a Stackelberg game to model the
interaction between the producer and resellers/relayers.
We then provide analytical solutions to the model. The
notations used in the formulations are listed in Table 2.
3.1 Revenue Sharing Game Formulation
In the reselling and relaying process, the producer shares
the revenue with resellers and relayers at a sharing ratio rik
and ri0k. We define the revenue sharing ratio between the
producer and resellers/relayers as the ratio of the revenue
(i.e., price) the resellers and relayers get for reselling a data
item. Once a data item is sold, and the consumer purchase
is processed, the revenue will be divided using this ratio.
This ratio will be encoded in a smart contract and later
encoded in the blocks. Thus, the transaction and revenue
distribution can be publicly validated and accepted, and the
credit for each party is updated accordingly.
To determine this ratio between the producer and
resellers, we formulate the problem as a two-stage Stackel-
berg game for all parties. By offering a profitable ratio, the
producer can encourage more nodes to participate and
achieve more profit. For each producer, the profit comes
from the shared revenue of resellers and the sale directly to
consumers. The formulation is as follows.
max
r
Sðr; yÞ ¼
X
i2I
X
j2J
X
k2K
ð1� rikÞpkyijk
þ
X
i02I0
X
j2J
X
k2K
ð1� ri0kÞpkyi0jk
þ
X
j2J
X
k2K
ðpk � c0jkÞy0jk þ
X
k2K
gkpk (1)
s.t.
X
i2I
yijk þ
X
i02I0
yi0jk þ y0jk ¼ rjk ð8j 2 J ; 8k 2 KÞ; (2)
yijk 2 f0; 1g ð8i 2 I [ I0 [ f0g; 8j 2 J ; 8k 2 KÞ; (3)
rik 2 ½0; 1� ð8i 2 I [ I0; 8k 2 KÞ: (4)
We denote Sðr; yÞ as the objective function of the pro-
ducer. The objective function (1) consists of two parts. The
first part is the revenue shared with resellers. ð1� rikÞ
denotes the remaining revenue sharing ratio for the pro-
ducer. pk is the price of data item k. yijk is a binary determi-
nation variable. yijk ¼ 1 indicates that reseller i will resell
and send data item k to node j. yi0jk ¼ 1 indicates that
relayer i0 will deliver data item k to node j. The second part
is the revenue if the data item is directly sold to consumers
by the producer. cijk is the cost for node i to deliver data
item k to consumer j. In peer edge environments, communi-
cation cost is one of the most important costs. We use a
weighted communication cost in this situation to indicate
the price for the data item to be delivered. i ¼ 0 indicates
that the node is the data producer. Thus, ðpk � c0jkÞ is the
profit of the producer for selling data item k to node j, and
y0jk determines whether the producer needs to send the
data item to node j.
P
k2K gkpk denotes the revenue from
consumers of the previous round, which will be the resellers
for the current round. Constraint (2) indicates that if node j
demands data item k, which is denoted as rjk ¼ 1, there is
always a node that will send the data item to it. Meanwhile,
since rjk is a binary parameter, yijk and yi0jk are binary deter-
mination variables, there will be only one node that will
deliver a certain data item to a certain consumer. Con-
straints (3) and (4) are value ranges of variables.
For reseller i, the profit comes from the reselling revenue
deducting the cost it pays. The formulation for a specific
TABLE 2
Notations Used in the Formulation
i 2 I Reseller nodes and reseller node set
i0 2 I 0 Relayer nodes and relayer node set
j 2 J Consumer nodes and consumer node set
n 2 N Nodes and node set
k 2 K Data items and data item set
rik The share of revenue for node i to resell data item k
cijk The cost for node i send data item k to node j
pk The price of data item k
gk The number of resellers for item k
rjk The request of data item k from consumer j
lik The cost measurement weight for node i to store
data item k
ok The size of data item k
xik Determination variable for node i to store data
item k
yijk Determination variable for node i to send data
item k to node j
Sðr; yÞ The profit function for the data producer
Uðr; x; yÞ The profit function for the reseller
U 0ðr; x; yÞ The profit function for the relayer
HUANG ETAL.: PROFIT SHARING FOR DATA PRODUCER AND INTERMEDIATE PARTIES IN DATATRADING OVER PERVASIVE EDGE... 433
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
data item k and a reseller i is as follows.
max
x;y
Uiðr; x; yÞ
¼
X
j2J
ðrikpk � cijkÞyijk � pk � lik ln
1
1þ ok � xikok
(5)
s.t.xikrjk � yijk; ð8j 2 J ; 8k 2 KÞ; (6)
xik; yijk 2 f0; 1g ð8j 2 J ; 8k 2 KÞ: (7)
The objective Function (5) consists of three parts. The first
part is the profit for this node i which resells data item k. It
will get the corresponding share of the revenue rik if it deliv-
ers the data to consumer j. xik and yijk are determination
variables, where yijk ¼ 1 indicates that the node i will
deliver data item k to node j, and xik ¼ 1 means node i will
store data item k. The second part indicates that resellers
have paid pk to the data from the producer or another
reseller to get the data. The third part is the cost of storage.
Since each data item is of different sizes, the storage impact
on different data items is not the same. Thus, inspired by
[8], we denote the cost of node i to store k as ln 1
1þok�xikok
,
where ok indicates the size of data item k. Adding 1 to the
denominator is to prevent the logarithm from becoming
infinite. We use lik as the weight to measure the storage
cost. Constraint (6) indicates that node i delivers data item k
to node j only if node i stores the data item and node j
requests for the data item. Constraint (7) limits the determi-
nation variables to binaries.
For relayer i0, the formulation is similar to reseller i but
has some differences.
max
x;y
U 0
i0 ðr; x; yÞ
¼
X
j2J
ðri0kpk � qk � ci0jkÞyi0jk � li0k ln
1
1þ ok � xi0kok
(8)
s.t.xi0krjk � yi0jk ð8i0 2 I0; 8j 2 J ; 8k 2 KÞ; (9)
xi0k; yi0jk 2 f0; 1g ð8i0 2 I 0; 8j 2 J ; 8k 2 KÞ: (10)
Relayers can store data items and deliver them to poten-
tial nodes that demand them. Thus, the data item from the
producer can reach more nodes and relayers can also get
revenue to satisfy these demands. Meanwhile, relayers are
not previous consumers and have not purchased the data
item yet. The objective Function (8) consists of two parts.
The first part indicates the profit for relayer i0 to deliver
data. It will share a part of the revenue with the producer
and needs to pay an initial fee to the producer for the data
item k. Similar to the reseller, the sharing ratio with the pro-
ducer is ri0k. qk indicates the payment to the producer for
data item k. Here, qk ¼ pkP
j
rjk
, which indicates the average
cost for all potentially profitable demands. The second item
in the objective function is the cost of the storage the same
as the part of resellers. Constraints (9) and (10) are the same
as those of resellers. The formulation ensures that if the
reselling or relaying of a data item is not profitable for
a reseller or relayer, it will not participate. The decision on
reselling or relaying a data item to a consumer is made only
when it is profitable.
3.2 Stackelberg Game Model
This game model we proposed above is a two-stage Stackel-
berg game. In a typical Stackelberg game, there is a leader
and several followers. The leader offers incentives and fol-
lowers respond to the incentive proposed and make caching
decisions. In this game, the producer is modeled as the
leader whereas resellers and relayers are modeled as fol-
lowers. We assume that all participants in the game are
rational and selfish. In Stage I, the strategy of the producer
is to present the revenue sharing ratios rik to the reseller i
who sells the data item k, and ri0k to the relayers i0 who
delivers the data item k. The producer announces that mon-
etary revenue would be awarded if resellers and relayers
deliver the data item to consumers. In Stage II, after given
incentive revenue from the producer, resellers and relayers
need to determine if they want to deliver the data item to
gain their own profit. The game is defined as follows.
� Followers: resellers and relayers.
� Leader: the producer.
� Strategies: the producer determines the revenue shar-
ing ratio r and resellers and relayers determine
whether to store and deliver data: x and y.
� Payoff: maximize the profit for the producer Sðr; yÞ,
the total profit for resellers Uðx; yÞ, and the total
profit for relayers U 0ðx; yÞ
In our game model, the producer offers the incentives to
relayers/resellers first, then relayers/resellers respond with
caching strategies. After receiving responses from relayers/
resellers, the producer updates its incentive policies and
then offers them to relayers/resellers. This process repeats
until both the producer and relayers/resellers have no
intention to change the balance because they are rational
and selfish and they will try to make their benefits the most.
In our formulation, the solution is the specific case of the
Stackelberg game called equilibrium.
Definition 1 Stackelberg Equilibrium. The outcome
fr�; x�; y�g of this two-stage Stackelbergame reach the equilib-
rium if the following conditions are satisfied for the content pro-
vider and every reseller i 2 I , relayer i0 2 I 0 at the same time:
Sðr�; y�Þ � Sðr; y�Þ; ð8rÞ (11)
Uiðx�; y�; r�Þ � Uiðx; y; r�Þ; ð8x; yÞ (12)
U 0
i0 ðx�; y�; r�Þ � U 0
i0 ðx; y; r�Þ; ð8x; yÞ; (13)
where r�; x�; y� are the optimal value for r; x; y respectively.
3.3 Equilibrium Analysis
In this section, we analyze how to derive the equilibrium of
the proposed game. This problem is challenging because the
revenue sharing ratio for the producer, and the storage deter-
mination for resellers and relayers are coupled together.
434 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
To analyze the problem, we separate the process of the
game into two different stages. In Stage I, the producer
decides the revenue sharing ratio offered to relayers to
encourage them to store or buy data items and for resellers to
resell purchased data items. In return, resellers and relayers
determine which data items to be stored and deliver data
items to the requesting consumer in Stage II. This game
jointly solves the problem of how to determine the revenue
sharing ratio, and storage and delivery determinations.
3.3.1 Stage II
We first address the case in Stage II.
The objective for resellers is to maximize their total profit.
In this game, resellers and relayers are followers.After observ-
ing the action of the leader (the producer offers the incentive
ratio), the storage determination of resellers is determined as
the response for cooperation. The optimal strategy of the
reseller is decided by solving an optimization problem. This
problem takes the revenue sharing ratio offered by the pro-
ducer as the input. More specifically, the problem for each
reseller iwith respect to data item k is defined as
max
x;y
Uiðx; yÞ;
s.t.ð6Þ; ð7Þ;
and for each relayer i0, with respect to data item k, the prob-
lem is defined as
max
x;y
U 0
i0 ðx; yÞ;
s.t.ð9Þ; ð10Þ:
The objective function of the problem is discrete due to
the discrete variable of xik and xi0k. To solve the reseller
problem, the discrete storage variable xik and xi0k are
relaxed from {0,1} to [0,1] which are continuous. Hence,
profit Functions (5) and (8) are monotone increasing with
determination variables yijk and yi0jk. Resellers and relayers
will cache contents to maximize the utility and satisfy the
requests of consumers. With limited cache size for resellers
and relayers and many content requests, they will not not
cache unrequested contents. To maximize the profit of the
reseller, the optimal solution achieves when (6) and (9) are
transferred as the following,
xikrjk ¼ yijkð8i 2 I ; 8j 2 J ; 8k 2 KÞ; (14)
xi0krjk ¼ yi0jkð8i 2 I0; 8j 2 J ; 8k 2 KÞ: (15)
Thus, we can replace variables yijk and yi0jk by xik and xi0k
accordingly. After replacing the determination variable, the
profit function of the reseller (5) and the relayer (8) are con-
tinuous about the xik and xi0k respectively. We first calculate
the partial maximization over x of the profit function. The
first partial derivative functions are derived as follows,
@Uiðx; yÞ
@xik
¼
X
j
rikpkrjk �
X
j
cijkrjk �
oklik
1þ ok � xikok
;
(16)
@U 0
i0 ðx; yÞ
@xi0k
¼ rjk
X
j
ri0kpk �
X
j
ci0jk � qk
 !
� okli0k
1þ ok � xi0kok
:
(17)
To get the maximization value, let @Uðx;yÞ
@xik
¼ 0, when (16) is a
concave function, we have
x�ik ¼ � lik
rikpk
P
j rjk �
P
j cijkrjk
þ 1þ 1
ok
: (18)
For (17) let @U 0ðx;yÞ
@xi0k
¼ 0, we have
x�i0k ¼ � li0k
ri0kpk
P
j rjk �
P
j ci0jkrjk � qkrjk
þ 1þ 1
ok
:
(19)
Note that after the relaxation, to guarantee the x� is in
[0,1], the following constraints also need to be satisfied,
rikpk
X
j
rjk �
X
j
cijkrjk � likoik; (20)
X
j
rjkðri0kpk � ci0jk � qkÞ � li0koi0k; (21)
ðrikpk
X
j
rjk �
X
j
cijkrjkÞðok þ 1Þ � likoik; (22)
X
j
rjkðri0kpk � ci0jk � qkÞðok þ 1Þ � li0koi0k; (23)
where (20), (21) correspond to the condition x�
ik � 1 and
x�i0k � 1, and (22), (23) correspond to x�
ik � 0 and x�
i0k � 0. If
these conditions cannot be satisfied, the optimal solution is
reached either x� ¼ 0 or x� ¼ 1. To solve this problem, stor-
age variables are relaxed from f0; 1g to [0,1], the solution
derived is not feasible to the original problem. Hence, we
propose an algorithm to get discrete f0; 1g. The performance
guarantee is discussed in Section 3.4.
After obtaining the revenue sharing ratio, the optimal
storage policy for resellers is derived and regarded as the
input to get the optimal revenue sharing ratio of the pro-
ducer to maximize the profit in Stage I.
3.3.2 Stage I
Nowwe discuss Stage I.
In Stage I, the producer determines the revenue sharing
ratio (i.e., incentive) offered to resellers to maximize the rev-
enue. Thus, the producer considers the anticipated strategy
of each reseller. By introducing the optimal storage strategy
of the reseller and relayer (18), (19) and constraints (20),
(21), (22), (23), the problem to maximize the revenue of the
producer can be formulated as follows,
maxSðr; yÞ; (24)
s:t:ð2Þ; ð14Þ; ð15Þ; ð18Þ � ð23Þ:
HUANG ETAL.: PROFIT SHARING FOR DATA PRODUCER AND INTERMEDIATE PARTIES IN DATATRADING OVER PERVASIVE EDGE... 435
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
We use (14), (15) to replace determination variable y0jk,
yijk with xik and xi0k, and use (18), (19) to replace xik and xi0k
with rik and ri0k respectively under optimal circumstances.
After that, the revenue function only contains the variable
rik as shown in the following,
SðrÞ ¼
X
i
X
k
lik
P
j cijkrjk �
P
j c0jkrjk
rikpk
P
j rjk �
P
j cijkrjk
 !
(25)
þ
X
i0
X
k
li0k
P
j rjkðci0jk þ qk � c0jkÞP
j rjkðri0kpk � ci0jk � qkÞ
 !
(26)
þ
X
i
X
k
ðok þ 1Þð1� rikÞpk
P
j rjk
ok
(27)
þ
X
i0
X
k
ðok þ 1Þð1� ri0kÞpk
P
j rjk
ok
(28)
þ
X
i
X
k
lik þ
X
k
gkpk þ
X
j
X
k
ðpk � c0jkÞrjk (29)
�
X
i
X
j
X
k
ðok þ 1Þðpk � c0jkÞrjk
ok
: (30)
The objective function is not a standard convex optimiza-
tion problem. The convexity or concavity of the function
depends on the parameter setting which corresponds to dif-
ferent solutions. (27) and (28) are linear functions about rik
and ri0k, (29) and (30) only contain the constant parameters,
and they do not affect the convexity of the revenue function.
The convexity of (25) and (26) varies with the parameter set-
ting. We discuss all conditions in detail as follows.
(1)
P
j c0jkrjk �
P
j cijkrjk � pk > 0 or
P
j rjkðc0jk � ci0jk�
qkÞ > 0.
The revenue function part (25) or (26) is concave
about the rik or ri0k, the problem is tomaximize the total
revenue, the optimal value could be derived from the
extreme point of the revenue function. The standard
convex optimization techniques [9] can be applied.
(2)
P
j c0jkrjk �
P
j cijkrjk � pk < 0 or
P
j rjkðc0jk � ci0jk�
qkÞ < 0.
The revenue function part (25) or (26) is a convex
function about rik or ri0k. The maximum value is deter-
mined by the end point of the rik or ri0k which is 0 or 1.
In this case, the optimal strategy of the reseller or the
relayer can be derived by comparing the revenue value
of the objective function between 0 and 1, then choose
the rik and ri0k with larger revenue. The optimal solu-
tion is as follows,
r�ik ¼ argmaxrikfSðrik ¼ 0Þ; Sðrik ¼ 1Þg: (31)
When rik ¼ 1 or ri0k ¼ 1, which means the producer
does not need to serve consumers directly, resellers
or relayers can satisfy all requests from consumers
and it will cost more for the producer to serve con-
sumers directly. When rik ¼ 0 or ri0k ¼ 0, the revenue
offered to resellers or relayers is larger than the pro-
ducer serving the requests from consumers directly.
Thus, the best strategy of the producer is to serve
consumers directly.
(3)
P
j c0jkrjk �
P
j cikrjk � pk ¼ 0 or
P
j rjkðc0jk � ci0jk �
qkÞ ¼ 0
The revenue function part (25) or (26) is monotone
decreasing about the revenue sharing ratio rik or ri0k.
Hence, the optimal solution is r� ¼ 0. As mentioned
above, the producer can get the largest income when
rik ¼ 0 or ri0k ¼ 0, which means the optimal strategy
for the producer is to sell the data item by itself
instead of offering the incentives to resellers.
Note that the convexity or concavity of (25) and (26) is
individually determined for each i, i0 and k. The final prob-
lem is the summation of concave parts decided by the con-
dition above. Since non-concave parts can obtain the
optimality directly, we only need to solve concave parts to
get the optimal results of the entire problem.
3.4 Performance Analysis
In our proposed game, storage variables xik, xi0k, yijk, and
yi0jk are integers. Directly solving the problem to get optimal
results as integers is difficult since it is a mixed non-linear
binary programming problem. Previous work [10], [11]
shows that this kind of problem is NP-Hard. Thus, in Stage
II, storage variables are relaxed from f0; 1g to [0,1]. The
solution derived after the relaxation may not be feasible to
the original problem if it is not integral. To address this
problem, we propose the cost-based rounding algorithm
and prove that it has an approximation ratio to the optimal
result. Since the relayer set and the reseller set have no inter-
section in (25) to (30), for simplicity, we use i to represent
both i (reseller) and i0 (relayer) in the remainder of this sec-
tion. We also denote the result of optimization problem (5)
as U�ðxÞ with the optimal integer result, and UðxÞ with the
relaxed (i.e., relaxed xik 2 ½0; 1�) one. UyðxÞ is the result after
rounding (i.e., integer xy
ik 2 f0; 1g). The main idea is to get a
sequence of nodes such that the overall cost of all nodes is
the largest but not exceeds the optimum value with relaxa-
tion. We achieve this by selecting the largest dik every time
until the summation of the selected dik is larger than the
optimal cost with relaxation. We then set the corresponding
xik ¼ 1. The detailed information of the rounding algorithm
is illustrated in Algorithm 1, where OPTMk is defined asP
i dikxik for each k, and OPTM 0
k denotes the remaining
value of OPTMk after the deduction in each round.
The objective Functions (5) and (8) contain the same com-
ponent �lik ln
1
1þok�xikok
which is not linear. We relax this
component by introducing two linear functions to constrain
the logarithmic function in a small, compact region. Fig. 4
illustrates the relationship between the logarithmic function
and two linear functions.
In Fig. 4, each linear function is tangent to the logarithmic
function and only has one intersection with the logarithmic
function at integer x-coordinates. The coordinates of two
intersection are ð0; lnð1þ okÞÞ and (1,0). These two linear
functions are two extreme conditions to limit the
436 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
logarithmic function in the feasible region (x 2 ½0; 1�), and
guarantee that the logarithmic function is less than or equal
to these two linear functions. Two linear functions are repre-
sented as follows,
f1ðxÞ ¼ �okxþ ok; (32)
f2ðxÞ ¼ � ok
1þ ok
xþ logð1þ okÞ: (33)
The intersection of these two linear function is at
xl ¼ ok�lnð1þokÞ
ok� ok
1þok
.
After relaxing the logarithmic function into linear func-
tions, we can construct a linear equation ViðxÞ. The ViðxÞ
consists of two parts. For any linear component in UiðxÞ,
denoted here as Ulnr
i ðxÞ, ViðxÞ is the same, for the logarithm
part in UiðxÞ, denoted as Ulog
i ðxÞ, V ðxÞ use the aforemen-
tioned f1ðxÞ and f2ðxÞ in the form. Thus, V ðxÞ ¼ Ulnr
i ðxÞ þ
f1ðx > xlÞ þ f2ðx < xlÞ, which is a linear equation. We rep-
resent the linear form as ViðxÞ ¼ dikxik þ c, where
UiðxÞ4ViðxÞ within the range x 2 ½0; 1�, and dik is regarded
as the summation of all parameters. Hence, the total reve-
nue function can be written as V ðxÞ ¼Pi dikxik þ c. dik is
determined by the optimal result xik. If xik < xl, the corre-
sponding dik and c will use f1ðxÞ; otherwise, dik and c will
use f2ðxÞ. This process creates a segmented unbounded
binary linear programming problem with determined dik.
Algorithm 1. Cost Ronding
Input: Solution of (5) and (8) with rik; ri0k,Dk ¼ fdikg.
Output: Rounded determination variable {xy
ik}.
1: for All k 2 K do
2: OPTMk ¼
P
i dikxik;
3: while OPTMk > 0 do
4: m ¼ argmax
i
Dk;
5: xy
mk ¼ 1;
6: OPTMk ¼ OPTMk � dmk;
7: Dk ¼ Dkndmk
8: end while
9: OPTM 0
k ¼ OPTMk;
10: for All do fijdik 2 Dikg do
11: xy
ik ¼ 0;
12: end for
13: end for
Theorem 1. The cost rounding algorithm (Algorithm 1) is an
approximation algorithm to the original problem without
rounding and it achieves an approximation ratio of 2, i.e.,
U�ðxÞ42UyðxÞ, under the condition that OPTMk > mini Dk
for each k.
Proof. We prove the theorem by contradiction. For the
rounding process, we denote dmk as the minimum among
all of the dik associated with those xymk is rounded to 1. It
is clear that OPTM 0
k > 0, thus dmk4OPTMk �OPTM 0
k,
where OPTM 0
k equals to the reminder of OPTMk defined
in line 9. We assume that OPTM 0
k > OPTMk
2 . Then, for any
xyhk that is not rounded to 1 with related dhk, it must satisfy
that OPTM 0
k � dhk < 0. Otherwise, xy
hk will be rounded to
1. Thus, dhk > OPTM 0
k > OPTMk
2 . Meanwhile, since dmk is
the minimum with associated xy
mk rounded to 1,
dmk > dhk.
As mentioned above, dmk4OPTMk �OPTM 0
k, and as
our assumption, OPTM 0
k > OPTMk
2 , we get dmk < OPTMk
2 .
Since dhk > OPTMk
2 , we can get dhk > dmk. However, this
contradicts the assumption that xymk is rounded to 1,
which indicates dmk > dhk. Thus, we conclude that
OPTM 0
k4
OPTMk
2 , i.e., V yðxÞ � c ¼Pi dikx
y
ik5
OPTMk
2 ¼
V ðxÞ�c
2 , V yðxÞ5 V ðxÞ
2 þ c
25
V ðxÞ
2 . Thus, V yðxÞ5 V ðxÞ
2 .
Note that V yðxÞ ¼ UyðxÞ when using the same round-
ing policy with the same xl as the rounding conditions.
After rounding, Ulnr
i ðxÞ part is still the same for both
functions, and Ulog
i ðxÞ part is the same for V yðxÞ and
UyðxÞ when x ¼ 0 or x ¼ 1, as we can get from Fig. 4.
Since V yðxÞ ¼ UyðxÞ and U�ðxÞ4V ðxÞ, we can get
U�ðxÞ4V ðxÞ42V ðxÞy ¼ 2UyðxÞ:
Thus, the approximation ratio can be obtained. tu
4 PERFORMANCE EVALUATION
In this section, we evaluate the performance of our pro-
posed mechanism on data selling and reselling. We focus
on evaluating the performance of profit shared between the
data producer and resellers/relayers over different settings
of the network, and whether the reselling makes more profit
for nodes. Profit functions are defined in (1), (5) and (8)
respectively for the producer, resellers and relayers.
In the simulation, we assume that nodes are distributed
randomly in a square area with a density of one node per
25m2. We assume every two nodes can directly communi-
cate with each other in the network. The cost for data deliv-
ery cijk is set as the distance between two nodes. We test
different strategies for data delivery to evaluate the pro-
posed reselling model. Because the
P
k gkpk is a constant fac-
tor, we do not include this profit for the producers in the
simulation results. “Producer only” indicates that the pro-
ducer sends all data items to consumers. Resellers are not
involved, and all revenue is going to the producer. “With
reseller” indicates that if the consumer is close to a reseller,
the reseller will send the data item to it. Otherwise, the con-
sumer will still obtain the data from the producer. The reve-
nue of the data item sold by resellers is shared with the
producer. “With reseller & relayer” indicates that both
Fig. 4. The relaxation of the non-linear part of the objective function.
f1ðxÞ and f2ðxÞ are two tangent lines which intersect the non-linear func-
tion at integer points.
HUANG ETAL.: PROFIT SHARING FOR DATA PRODUCER AND INTERMEDIATE PARTIES IN DATATRADING OVER PERVASIVE EDGE... 437
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
resellers and relayers can deliver data to the consumer, and
the revenue will be shared with the producer. Nodes can
still get data from the producer if the distance is short. Note
that every node can be a relayer if the revenue sharing ratio
ri0k is reasonable and profitable. For simplicity, we only con-
sider selling one data item over the network. Selling multi-
ple data items can be achieved by applying the mechanism
multiple times for each data item.
The convex optimization problem (25)-(30) is imple-
mented and solved using CVXPY [12]. We conduct our sim-
ulations on a computer with an Intel Core i7-5820K
processor and 32GB RAM. For a fair comparison, we only
change one parameter at a time. We use 5 different random
seeds for simulations, i.e., the randomness for each simula-
tion is the same for different parameters. Each result shown
below is the average of 5 simulations with the same setting.
4.1 Profit on Different Prices of Data Items
We first evaluate the profit that the data producer and
resellers/relayers can get under different prices of data
items. We set 100 nodes in the area. Among them, 15 nodes
are previous consumers that can serve as resellers at this
moment. 50 more consumers are demanding the data item,
and each demand needs to be satisfied by the producer, a
reseller, or a relayer.
Fig. 5 shows the profit of the producer (a) and other
nodes (b) over different prices of the data item. In general,
the higher the price, the higher the profit nodes will obtain.
The profit of the data producer grows linearly with the price
if the producer is responsible to satisfy all the demands and
deliver corresponding data items. Since the demands are
fixed and the communication cost remains constant in a spe-
cific parameter setting, the profit grows perfectly linearly
with the increasing price of the data item. When resellers
participate in delivering items, they can satisfy some
demands with lower communication costs for delivering
data items. In this simulation set, having resellers will
reduce 12.6 percent of communication costs for delivering
data. The total communication cost drops from 693 to 606
when using resellers. It can reduce the cost of delivering
data to requesting nodes, and the total cost of the network is
lower. The revenue of relayers also grows almost linearly
with the price. Note that nodes need enough revenue to
compensate for their cost if they deliver the data item.
Lower prices (e.g., 30 in such situations) will not incentive
many resellers to deliver data. With resellers and relayers
getting a corresponding share with the delivery, the pro-
ducer will also get more profit. The producer will have
more profit if we introduce relayers into the networks. If a
node can make a profit, it may participate and become a
relayer to deliver the data item to nearby nodes. Overall, the
producer receives 14.2 percent more profit with the help of
resellers and 27.3 percent more profit with the help of both
resellers and relayers.
Fig. 5c shows the distribution of different revenue shar-
ing ratio ri0k which relayer i0 gets when it resells the data
item to a consumer. It shows the minimum revenue sharing
ratio that can incentivize a certain fraction of nodes to join
as relayers because they gain more revenue than the cost for
data delivery and data payment. As the price is higher, the
revenue sharing ratio is lower for relayers. For instance,
when the price of the data item is 50, about 40 percent of the
participating nodes require a revenue sharing ratio less
than 0.4. When the price increases to 60, about 70 percent of
participating nodes will require the same or smaller ratio of
the overall price. Since all nodes are selfish and rational,
they will need compensation for their cost for data delivery
if they participate. Thus, higher prices per data item com-
pensate for the cost of nodes more easily. Relayers can still
get profit when they require a lower share of the revenue.
This in turn gives more profit to the producer.
Fig. 5d shows the number of resellers and relayers in the
network. The number of relayers almost stays the same
under different data prices. When the price is higher, a
smaller revenue sharing ratio is required to compensate for
the cost. For the same number of relayers, this indicates an
almost linear increase for the profit as in Fig. 5b. For any
data item price, the higher profit shows that our proposed
mechanism indeed helps increase the profit for the data pro-
ducer, while resellers and relayers can also get profit in the
process.
4.2 Profit on Different Sizes of Networks
Next, we evaluate the profit of the data producer and
resellers/relayers under different sizes of networks. We set
25 to 175 nodes in areas with the same density of nodes. To
make sure the same density, there are 4 to 28 nodes which
are previous consumers now serving as resellers. The price
of the data item is 50, and there are randomly 50 percent
nodes requesting the data item.
Fig. 6 shows the profit for the data producer (a) and other
nodes (b). In general, the profit of the producer increases as
more nodes are in the network. Since we set the same
request rate for each network, more nodes bring more
requests, and the producer can make more profit by selling
more data items. Meanwhile, the profit of resellers and
Fig. 5. The profit of the producer (a) and resellers (b) under different pri-
ces of data items. The profit increases almost linearly as prices grow.
The distribution of revenue sharing ratio under different prices is shown
in (c), each line indicates different prices of the data item. The number of
resellers and relayers is shown in (d). The higher the price, the less reve-
nue sharing ratio that nodes will require when participating.
438 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
relayers also increases when the number of nodes grows in
the network. Since we set the same density of resellers in
these simulation sets, the cost and revenue are mostly the
same for a fixed set of resellers. The resellers cannot get
much more profit when the size of the network is larger.
However, resellers reduce the total communication cost in
the network by about 20 percent. For instance, when the net-
work size is 175, the total communication cost drops from
1889 to 1494. Meanwhile, since any node can become a
relayer, it will incentivize more nodes to relay data, thus
giving more revenue to relayers. One interesting discovery
is that when the number of nodes in the network is smaller,
(e.g., less than 50 nodes in the network in the current param-
eter setting), it is hard to get enough incentives for nodes to
relay data. Thus, only a few relayers participate in the pro-
cess. For the data producer, it will serve the consumer with-
out resellers or relayers. Thus, the producer will gain more
revenue from a larger number of requests in these situa-
tions. When the network is larger, more nodes will serve as
relayers and make a profit, and share more profit with the
producer. Overall, the producer receives 6.5 percent more
profit with the help of resellers and 16.2 percent more profit
with the help of both resellers and relayers.
Fig. 6c shows the revenue sharing ratio for relayers under
different sizes of the network. The revenue sharing ratio that
relayers require increases as the network size grows larger.
When there are in total 75 nodes in the network, 60 percent of
participating nodes require a revenue sharing ratio of 0.4 or
less, but it requires a revenue sharing ratio up to 0.6 for the
same fraction of nodeswhen the number of nodes reaches 150.
Fig. 6d shows the number of resellers and relayers in the net-
work. As the density of the nodes in each network is the same,
the area is larger when there are more nodes, and it requires
more cost for relayers to deliver data items. Relayers also
require amuchhigher revenue sharing ratiowhen the network
is larger to compensate for higher costs. Thus, profits most go
to relayers, and even the producer does not get much more
from the relaying processes.
4.3 Profit on Different Numbers of Requests
Next, we evaluate the performance under different numbers
of requests for a data item. We set the number of requests
from 20 to 80 respectively with 100 nodes in total. There are
15 resellers and the price of the data item is 50.
Fig. 7 indicates the profit for the producer (a) and other
nodes (b) under different numbers of requests. More
requests mean more sales, which will incentivize more
nodes to sell data for profit. The profit of the producer
increases as more requests in the network almost linearly,
as well as the profit with the help of resellers/relayers. The
costs are mostly constant but the number of data items sold
increases. Meanwhile, with a larger number of requests, the
profit of resellers and relayers increases. However, the
increase of profit from relayers is not significant. After the
number of requests larger than 50, the profit of the relayers
is similar, and has some fluctuations due to randomness.
Overall, the producer receives 11.4 percent more profit with
the help of resellers and 25.7 percent more profit with the
help of both resellers and relayers.
Fig. 7c shows the distribution of revenue sharing ratio
under different numbers of requests in the network, and
Fig. 7d shows the number of resellers and relayers in the
network. There is no significant difference in the revenue
sharing ratio and the number of participate relayers among
different numbers of requests. This shows that more
requests do not incentivize more nodes to become relayers.
For the same number of nodes and densities, the cost for
data delivery is mostly the same for a data item, and
relayers need similar shares of revenue to compensate for
the cost. The increasing profit comes from selling more data
items for the producer. Thus, the growth rate of the profit of
Fig. 6. The profit of the producer (a) and resellers (b) under different
sizes of the network. The profit for the producer grows as networks with
increasing nodes. If fewer nodes are in the network, the revenue is not
shared with resellers. The distribution of revenue sharing ratio under dif-
ferent sizes of the network is shown in (c). The number of resellers and
relayers is shown in (d). The larger the network size is, the more nodes
will participate, and the higher sharing ratio resellers will require.
Fig. 7. The profit of producer (a) and resellers (b) under different num-
bers of requests. The profit for the producer increases as more nodes
request. The distribution of revenue sharing ratio under different sizes of
the network is shown in (c). The number of resellers and relayers is
shown in (d). The participation and revenue sharing ratios among all
nodes are nearly the same over different numbers of requests.
HUANG ETAL.: PROFIT SHARING FOR DATA PRODUCER AND INTERMEDIATE PARTIES IN DATATRADING OVER PERVASIVE EDGE... 439
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
the producer is relatively larger than that of resellers and
relayers, and relayers do not get much profit increase when
the number of requests is larger.
4.4 Profit Over Different Numbers of Resellers
Finally, we evaluate the profit of each party under different
numbers of resellers in the network. These resellers are pre-
vious consumers which already have the data item and can
deliver the data item to nearby new consumers which
require the data item. We test for 0 to 50 resellers in the net-
work of 100 nodes, and the price of the data item is 50.
Fig. 8 indicates the profit for the producer (a) and other
nodes (b) for different numbers of resellers. “Producer
only” in Fig. 8a does not use resellers to deliver data, so it
will not change under different numbers of resellers. The
producer can get more profit when resellers and relayers
participate and deliver data items. And the more resellers
are in the network, the higher the profit the producer will
get. Meanwhile, when resellers, which have obtained data
in previous rounds, participate in the process, some of them
may be close to some demand than the producer. Thus,
using these resellers to deliver data will reduce the cost of
delivery. The total profit for resellers also increases. Since
the total number of demands is the same, increasing the
number of resellers in the same area will result in more
resellers delivering data items to nearby demands. Mean-
while, when relayers participate, having more resellers does
not bring much more profit for the relayers. Since there are
a certain number of requests, i.e., certain total revenue,
more resellers actually take a share, and the profit of
relayers will not grow super linearly as the number of
resellers grows. Thus, the difference between the profit of
only resellers and both relayers and resellers participating
is nearly constant. Overall, the producer receives 16.6
percent more profit with the help of resellers and 49.5 per-
cent more profit with the help of both resellers and relayers.
Fig. 8c shows the distribution of revenue sharing ratio
under different numbers of resellers, and Fig. 8d shows the
number of resellers and relayers in the network. The num-
ber of relayers decreases as the number of resellers goes up.
This is because the number of requests is the same, as well
as the total revenue. Thus, more resellers can deliver more
data, and not that many relayers are needed. This explains
that the difference in profit of the producer decreases as the
number of resellers increases, especially when the number
is large (e.g., more than 25 resellers shown in Fig. 8d).
5 RELATED WORK
On the contrary to cloud computing which moves the com-
puting to the centralized cloud, edge computing moves the
computing work to distributed nodes on the edge of the net-
work. The computing mostly or entirely happens on nodes
near to or inside the edge devices [13]. Edge computing can
offer fast and robust data sharing and processing capabilities
for end devices. One major research aspect of edge comput-
ing studies the benefit of using smaller edge servers (cloud-
lets) deploying near the network edge (e.g., cellular base
stations), serving as the middle layer between edge devices
and clouds [14], [15]. These edge servers can offer multiple
applications such as caching and resource virtualization.
Another research aspect on edge computing studies the
innovative functionalities from the collaboration of edge
devices. In such scenarios, the resources of nodes are often
limited. This collaboration is important especially over high
mobility and frequent topology change scenarios like vehicle
networks [16], [17], in which the connection to even a small
station is not stable.
To tackle the complicated collaboration in the edge net-
works, game theory is a promising technique that has been
widely adopted in various networks. In [18], the authors con-
sider a D2D communication framework in which the opera-
tor of the base station offers incentives to owners of devices
tomotivate content communication. In [19], a wireless sensor
network consisting of many private sensor networks is con-
sidered. Shen et al. [20] use the Stackelberg game to incentiv-
ize content providers in the wireless networks to participate
in caching, which can improve the QoS for wireless devices
of small base stations. Our work uses similar strategies to
incentivize nodes to serve as relayers while focusing on reve-
nue sharing among intermediate parties.
Blockchain technology is proposed in 2008 by Satoshi
Nakamoto [21] and has been widely used in cryptocurren-
cies. A blockchain consists of multiple blocks, each of which
contains the information of previous blocks to form a chain.
The blockchain is designed to prevent unauthorized changes
of its contents using cryptography features. If a malicious
userwants to tamperwith a piece of data, it has to counterfeit
a whole branch of chain from the block that it intends to
modify. The time and energy to counterfeit a chain are far
over the benefit a malicious party can get. A typical cryptog-
raphy feature is called Proof of Work (PoW) [22], [23], which
requires nodes to find a certain hash pattern of certain data.
This makes it easy to verify but hard to counterfeit a
data item in the blockchain. These features can make the
Fig. 8. The profit of producer (a) and resellers (b) under different num-
bers of resellers. The profit for the producer increases when there are
more resellers in the network. The distribution of revenue sharing ratio
under different sizes of the network is shown in (c). The number of
resellers and relayers is shown in (d). The revenue sharing ratio among
all nodes is nearly the same over different numbers of resellers, and the
number of relayers is almost the same.
440 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
blockchain system a safe ledger perfectly for cryptocurren-
cies, e.g., Bitcoin [21], Litecoin [24], and Ethereum [25], [26].
The concept of the smart contract is proposed by Nick
Szabo [7] and becomes a reality implemented in the core of
Ethereum [25]. It is a computer protocol that makes sure
that the negotiation and implementation of a contract can
be enforced without a trusted third party as the arbitrament.
Blockchain technology makes the smart contract practical.
Contacts are publicly stored in the blocks that all nodes in
the blockchain can access, and the corresponding transac-
tions are irreversible. Thus, many applications are emerged
using the smart contract concept, e.g., anonymous voting
[27] and private IoTs [28].
Copyright protection is a key factor for data trading. The
benefit of the data producer will be violated if the data can
be copied and redistributed without the permission of data
the data owner. Digital rights management (DRM) is pro-
posed to prevent digital data from unauthorized redistribu-
tion, like Microsoft DRM [29] and Apple HLS DRM [30].
This is good to protect structured data such as software or
multimedia, but it is hard to detect deliberate replication
and tampering of unstructured data, such as docs and PDF.
Thus, in most cases, data is simply not allowed to be redis-
tributed or resold for data trading [31], [32].
Data trading with the blockchain technology in edge sce-
narios also gains much attention from researchers these years.
Chen et al. [33] propose a blockchain-based data trading
approach for vehicle networks. They use a hierarchal structure
to ensure secure data trading at the blockchain level and
design an iterative double auction to get proper data prices.
Missier et al. [34] propose a blockchain and use smart contract
to create a decentralized trading platform for IoT data, and
implement proof-of-concept trading systems. Our work
focusesmore on sharing the revenuewith intermediate parties
which can increase the security and availability of traded data
and uses smart contracts to ensure the revenue is shared prop-
erly among parties.Meanwhile, Jung et al. [35] propose a series
of secure protocols against dishonest consumers from reselling
data, but a centralized broker may be needed. Our work
focuses on a fully distributed mechanism where there is no
centralized control or trusted third parties needed.
6 CONCLUSION AND DISCUSSION
In this paper, we have proposed a profit protecting trading
mechanism for the data producer and resellers/relayers in
pervasive edge computing environments. We have pro-
posed a smart-contract based protocol to ensure the profit
of the producer for reselling, and we have proposed a proto-
col to detect unauthorized reselling without imposing extra
burdens onto the consumer and the producer. We have for-
mulated a two-stage Stackelberg game to find a revenue
sharing ratio between the data producer and resellers/
relayers, and have proved the approximation ratio between
the rounded result and the optimal integer result. Simula-
tion results have shown that our proposed mechanism
works better than that without reselling and relaying pro-
cesses under pervasive edge computing environments.
Our solution is not a typical way to solve the Stackelberg
game. The producer takes final decisions on which node
stores which data item based on the response of different
resellers/relayers. If there are more than one reseller or
relayer offer a profitable revenue sharing ratio, the producer
will reduce the revenue shared until only one reseller or
relayer is left profitable to deliver the data. This can prevent
duplicate transmissions and give the producer more profit,
yet the producer needs to proactively solve the problem.
Peer data trading is an important application in edge
environments. IoT sensing data, “We media” contents, and
other valuable information can be traded among edge devi-
ces and servers. Our proposed solution enables trading par-
ties to get protected profit shares. It supports safe
transactions in distributed and untrusted environments.
The edge scenario is a representative instance in which such
data trading constantly happens.
Smart-contract is a well-known protocol to enforce the
execution of a certain contract. We use smart-contract to
make sure the revenue is properly shared and each party
pays and gets its corresponding share. Currently, some
cryptocurrencies like Ethereum [25] have implemented
smart-contract and some previous work like [18] have eval-
uated its performance. Evaluating smart-contract security
and performance is not in the scope of this paper.
There are some limitations of the current model that
demand future research. In the reselling process, the reseller
can add noise to the original content to make it harder to be
detected. Consumers can choose a relatively small part of
the data item for validation, which can reduce the influence
of the noises. However, this can increase the possibility of
collisions to other data items, which may trigger a false pos-
itive response for unauthorized reselling. A simple solution
is for consumers to conduct the verification process under
all conditions (including buying from legal resellers), which
can be used to trace the root for unauthorized reselling. We
will discuss the relationship between the noise and the suc-
cessful verification ratio and how to reduce the false-posi-
tive ratio under such conditions in our future work.
ACKNOWLEDGMENTS
This work was supported in part by the US National Science
Foundation under Grants 1513719 and 1730291.
REFERENCES
[1] “Gumroad,” Accessed: Jul. 17, 2019. [Online]. Available: https://
gumroad.com/
[2] “Is gumroad a scam?,” Accessed: Jul. 17, 2019. [Online]. Available:
https://www.quora.com/Is-Gumroad-a-scam
[3] H. Green, “Theft, lies, and facebook video,” 2015. Accessed: Jul.
17, 2019. [Online]. Available: https://medium.com/@hankgreen/
theft-lies-and-facebook-video-656b0ffed369
[4] Y. Huang, J. Zhang, J. Duan, B. Xiao, F. Ye, and Y. Yang,
“Resource allocation and consensus on edge blockchain in perva-
sive edge computing environments,” in Proc. IEEE 39th Int. Conf.
Distrib. Comput. Syst., 2019, pp. 1476–1486.
[5] Z. Huang, X. Su, Y. Zhang, C. Shi, H. Zhang, and L. Xie, “A decen-
tralized solution for IoT data trusted exchange based-on block-
chain,” in Proc. 3rd IEEE Int. Conf. Comput. Commun., 2017, pp.
1180–1184.
[6] Y. Huang, X. Song, F. Ye, Y. Yang, and X. Li, “Fair and efficient
caching algorithms and strategies for peer data sharing in perva-
sive edge computing environments,” IEEE Trans. Mobile Comput.,
vol. 19, no. 4, pp. 852–864, Apr. 2020.
[7] N. Szabo, “Formalizing and securing relationships on public
networks,” First Monday, vol. 2, no. 9, Sep. 1997, doi: 10.5210/fm.
v2i9.548.
HUANG ETAL.: PROFIT SHARING FOR DATA PRODUCER AND INTERMEDIATE PARTIES IN DATATRADING OVER PERVASIVE EDGE... 441
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
https://gumroad.com/
https://gumroad.com/
https://www.quora.com/Is-Gumroad-a-scam
https://medium.com/@hankgreen/theft-lies-and-facebook-video-656b0ffed369
https://medium.com/@hankgreen/theft-lies-and-facebook-video-656b0ffed369
http://dx.doi.org/10.5210/fm.v2i9.548
http://dx.doi.org/10.5210/fm.v2i9.548
[8] K. Poularakis, G. Iosifidis, I. Pefkianakis, L. Tassiulas, and M.
May, “Mobile data offloading through caching in residential
802.11 wireless networks,” IEEE Trans. Netw. Service Manage., vol.
13, no. 1, pp. 71–84, Mar. 2016.
[9] S. Boyd and L. Vandenberghe, Convex Optimization. Cambridge,
U.K.: Cambridge Univ. Press, 2004.
[10] R. Hemmecke, M. K€oppe, J. Lee, and R. Weismantel, “Nonlinear
integer programming,” in 50 Years of Integer Programming 1958–
2008. Berlin, Germany: Springer, 2010, pp. 561–618.
[11] J. Lee and S. Leyffer, Mixed Integer Nonlinear Programming. Berlin,
Germany: Springer, 2011.
[12] S. Diamond and S. Boyd, “CVXPY: A Python-embedded modeling
language for convex optimization,” J. Mach. Learn. Res., vol. 17, no.
83, pp. 2909–2913, 2016.
[13] Microsoft Research, “Edge computing,” 2008. Accessed: Oct. 10, 2020.
[Online]. Available: https://www.microsoft.com/en-us/research/
project/edge-computing/
[14] M. Satyanarayanan, P. Bahl, R. Caceres, and N. Davies, “The case
for VM-ased cloudlets in mobile computing,” IEEE Pervasive Com-
put., vol. 8, no. 4, pp. 14–23, Fourth Quarter 2009.
[15] X. Chen, L. Jiao, W. Li, and X. Fu, “Efficient multi-user computa-
tion offloading for mobile-edge cloud computing,” IEEE/ACM
Trans. Netw., vol. 24, no. 5, pp. 2795–2808, Oct. 2016.
[16] D. Liu, B. Chen, C. Yang, and A. F. Molisch, “Caching at the wire-
less edge: Design aspects, challenges, and future directions,” IEEE
Commun. Mag., vol. 54, no. 9, pp. 22–28, Sep. 2016.
[17] P. Garcia Lopez et al., “Edge-centric computing: Vision and
challenges,” ACM SIGCOMM Comput. Commun. Rev., vol. 45, no.
5, pp. 37–42, 2015.
[18] Z. Chen, Y. Liu, B. Zhou, and M. Tao, “Caching incentive design
in wireless D2D networks: A stackelberg game approach,” in Proc.
IEEE Int. Conf. Commun., 2016, pp. 1–6.
[19] Y. Zeng, P. Zhou, J. Liu, and Y. Yang, “A stackelberg game frame-
work for mobile data gathering in leasing residential sensor
networks,” in Proc. IEEE/ACM 26th Int. Symp. Qual. Service, 2018,
pp. 1–6.
[20] F. Shen, K. Hamidouche, E. Bastug, and M. Debbah, “A stackel-
berg game for incentive proactive caching mechanisms in wireless
networks,” in Proc. IEEE Global Commun. Conf., 2016, pp. 1–6.
[21] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”
2019. [Online]. Available: https://bitcoin.org/bitcoin.pdf
[22] A. Gervais, G. O. Karame, K. W€ust, V. Glykantzis, H. Ritzdorf,
and S. Capkun, “On the security and performance of proof of
work blockchains,” in Proc. ACM SIGSAC Conf. Comput. Commun.
Secur., 2016, pp. 3–16.
[23] J. Bonneau, A. Miller, J. Clark, A. Narayanan, J. A. Kroll, and
E. W. Felten, “SoK Research perspectives and challenges for bit-
coin and cryptocurrencies,” in Proc. IEEE Symp. Secur. Privacy,
2015, pp. 104–121.
[24] K. Fanning and D. P. Centers, “Blockchain and its coming impact
on financial services,” J. Corporate Accounting Finance, vol. 27,
no. 5, pp. 53–57, 2016.
[25] V. Buterin et al., “A next-generation smart contract and decentral-
ized application platform,”White Paper, vol. 3, no. 37, 2014.
[26] T. Chen et al., “Understanding ethereum via graph analysis,” in
Proc. IEEE Conf. Comput. Commun., 2018, pp. 1484–1492.
[27] P. McCorry, S. F. Shahandashti, and F. Hao, “A smart contract for
boardroom voting with maximum voter privacy,” in Proc. Int.
Conf. Financial Cryptography Data Security, 2017, pp. 357–375.
[28] K. Christidis and M. Devetsikiotis, “Blockchains and smart
contracts for the internet of things,” IEEE Access, vol. 4,
pp. 2292–2303, 2016.
[29] D. K. Mulligan, J. Han, and A. J. Burstein, “How DRM-based con-
tent delivery systems disrupt expectations of personal use,” in
Proc. 3rd ACMWorkshop Digital Rights Manage., 2003, pp. 77–89.
[30] C. D’Orazio and K.-K. R. Choo, “An adversary model to evaluate
DRM protection of video contents on IoS devices,” Comput. Secur.,
vol. 56, pp. 94–110, 2016.
[31] F. Liang, W. Yu, D. An, Q. Yang, X. Fu, and W. Zhao, “A survey
on big data market: Pricing, trading and protection,” IEEE Access,
vol. 6, pp. 15 132–15 154, 2018.
[32] X.-Y. Li, J. Qian, and X. Wang, “Can china lead the development
of data trading and sharing markets?,” Commun. ACM, vol. 61,
no. 11, pp. 50–51, 2018.
[33] C. Chen, J.Wu,H. Lin,W. Chen, andZ. Zheng, “A secure and efficient
blockchain-based data trading approach for Internet of Vehicles,”
IEEETrans. Veh. Technol., vol. 68, no. 9, pp. 9110–9121, Sep. 2019.
[34] P. Missier, S. Bajoudah, A. Capossele, A. Gaglione, and M. Nati,
“Mind my value: A decentralized infrastructure for fair and
trusted IoT data trading,” in Proc. 7th Int. Conf. Internet Things,
2017, pp. 1–8.
[35] T. Jung et al., “Accounttrade: Accountable protocols for big data
trading against dishonest consumers,” in Proc. IEEE Conf. Comput.
Commun., 2017, pp. 1–9.
Yaodong Huang received the BE degree in com-
puter science and technology from the University of
Electronic Science and Technology of China, in
2015. He is currently working toward the PhD
degree in computer engineering at Stony Brook
University. His research interests include mobile
edge computing, including caching, security, pri-
vacy, and energy-efficiency inmobile edge environ-
ments.
Yiming Zeng received the BEng degree in infor-
mation engineering from the Shanghai Jiao Tong
University, Shanghai, China. He is currently working
toward the PhD degree in computer and electrical
engineering at Stony Brook University, New York,
NY. His research interests include addressing com-
puting, privacy, and caching issues in edge
networks.
Fan Ye received the PhD degree from Computer
Science Department, UCLA, in 2004. He is cur-
rently an associate professor at the ECE Depart-
ment of Stony Brook University, before that he was
a research staff member with IBM T. J. Watson
Research. His research interests include mobile
sensing platforms, systems and applications in
healthcare and location based services, edge com-
puting, Internet-of-Things, and data-centric wireless
communication. He has published more than 100
papers with more than 12,000 citations according to
Google Scholar, and 30 granted/pending patents/applications. He has
received NSF CAREER award, Google Faculty Research Award, IBM
Research Division Award and 5 Invention Achievement Plateau awards,
Best Paper Award for IEEE ICCP 2008. He has been a panelist for NSF, NIH
and Canada, Hong Kong government funding agencies, on program/orga-
nizing committees for conferences including IEEE Infocom, IEEE ICDCS,
ACMMobicom, ACMSensys.
Yuanyuan Yang (Fellow, IEEE) received the
BEng and MS degrees in computer science and
engineering from Tsinghua University, Beijing,
China, and the MSE and PhD degrees in com-
puter science from Johns Hopkins University, Bal-
timore, Maryland. She is currently a SUNY
distinguished professor of computer engineering
and computer science at Stony Brook University,
New York, and is currently on leave at the
National Science Foundation as a program direc-
tor. Her research interests include edge comput-
ing, data center networks, cloud computing, and wireless networks. She
has published about 400 papers in major journals and refereed confer-
ence proceedings and holds seven US patents in these areas. She is
currently the associate editor-in-chief for the IEEE Transactions on
Cloud Computing and an associate editor for ACM Computing Surveys.
She has served as an associate editor-in-chief and associated editor for
the IEEE Transactions on Computers and associate editor for the IEEE
Transactions on Parallel and Distributed Systems. She has also served
as a general chair, program chair, or vice chair for several major confer-
ences and a program committee member for numerous conferences.
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/csdl.
442 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 1, JANUARY 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:04:33 UTC from IEEE Xplore.  Restrictions apply. 
https://www.microsoft.com/en-us/research/project/edge-computing/
https://www.microsoft.com/en-us/research/project/edge-computing/
https://bitcoin.org/bitcoin.pdf
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice