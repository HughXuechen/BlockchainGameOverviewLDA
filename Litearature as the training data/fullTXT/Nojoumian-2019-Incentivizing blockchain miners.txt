Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies by a Reputation-Based Paradigm
Incentivizing Blockchain Miners to Avoid
Dishonest Mining Strategies
by a Reputation-Based Paradigm
M. Nojoumian1(B), A. Golchubian1, L. Njilla2, K. Kwiat2, and C. Kamhoua3
1 Department of CEECS, Florida Atlantic University, Boca Raton, FL, USA
{mnojoumian,agolchub}@fau.edu
2 Cyber Assurance Branch, Air Force Research Lab, Rome, NY, USA
{laurent.njilla,kevin.kwiat}@us.af.mil
3 Network Security Branch, Army Research Lab, Adelphi, MD, USA
charles.a.kamhoua.civ@mail.mil
Abstract. The mining process in the Blockchain is very resource inten-
sive, therefore, miners form coalitions to verify each block of transactions
in return for a reward where only the first coalition that accomplishes the
proof-of-work will be rewarded. This leads to intense competitions among
miners and consequently dishonest mining strategies, such as block with-
holding attack, selfish mining, eclipse attack and stubborn mining, to
name a few. As a result, it is necessary to regulate the mining process to
make miners accountable for any dishonest mining behavior. We there-
fore propose a new reputation-based framework for the proof-of-work
computation in the Blockchain in which miners not only are incentivized
to conduct honest mining but also disincentivized to commit to any mali-
cious activities against other mining pools. We first illustrate the archi-
tecture of our reputation-based paradigm, explain how the miners are
rewarded or penalized in our model, and subsequently, we provide game
theoretical analyses to show how this new framework encourages the min-
ers to avoid dishonest mining strategies. In our setting, a mining game
is repeatedly played among a set of pool managers and miners where
the reputation of each miner or mining ally is continuously measured.
At each round of the game, the pool managers send invitations only to a
subset of miners based on a non-uniform probability distribution defined
by the miners’ reputation values. We show that by using our proposed
solution concept, honest mining becomes Nash Equilibrium in our set-
ting. In other words, it will not be in the best interest of the miners to
employ dishonest mining strategies even by gaining a short-term utility.
This is due to the consideration of a long-term utility in our model and
its impact on the miners’ utilities overtime.
Keywords: Proof-of-work · Reputation systems · Game theory
DISTRIBUTION A. Approved for public release: distribution unlimited. Case Num-
ber: 88ABW-2017-4327, Dated 08 Sept 2017.
c© Springer Nature Switzerland AG 2019
K. Arai et al. (Eds.): SAI 2018, AISC 857, pp. 1118–1134, 2019.
https://doi.org/10.1007/978-3-030-01177-2_81
http://crossmark.crossref.org/dialog/?doi=10.1007/978-3-030-01177-2_81&domain=pdf
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1119
1 Introduction
Security games are mainly designed and utilized to model interaction between
attackers and defenders [1,2]. In these models, two-player games (extendable to
any number of players) are proposed in which both attackers and defenders try
to maximize the utility that each can gain. For instance, the defenders will be
able to provide value to the system and, as a result, gain utility by enabling fea-
tures, shifting the attack surface, and reducing the attack surface measurement.
Likewise, the attackers will be able to gain utility if features are disabled, or the
attack surface measurement is increased.
In the majority of existing security games, attackers and defenders play the
game by choosing various actions from the action profiles based on their strate-
gies in each round of the game. For instance, the defenders can modify the setting
of the targeted system in order to shift the attack surface whereas the attackers
can manipulate the system in order to disable some features. After each round of
the game, the game moves to a new state and the players receive their rewards
based on some utility functions.
One of the fascinating research areas where the security games can be utilized
is the verification of transactions in the context of digital currencies, e.g., Bitcoin
[3], or similar paradigms. The mining operation is very resource intensive. As
a result, players form different coalitions to verify each block of transactions in
return for a reward. This leads to intense competitions among competitors since
only the first coalition that accomplishes the mining process will be rewarded.
To address what issues this competition may cause, different strategies are
analyzed in the literature. Rosenfeld [4] introduces the block withholding attack
where a dishonest player only reveals a partial solution of the verification prob-
lem whenever he has the complete solution to act in favor of another competing
coalition. As a result, the dishonest miner shares the revenue obtained by the
entire coalition without any contribution. Eyal and Sirer [5] introduce selfish
mining where the players of a coalition keep their discovered blocks private and
continue to verify more blocks privately until they get a sub-chain that its length
is threatened. As a result, selfish players receive the reward. Johnson et al. [6] look
at the malicious activity of the players from another perspective. The authors
compare an honest approach with a dishonest strategy, i.e., players of a coali-
tion can invest to acquire additional computing resources, or launch distributed
denial-of-service attacks against other competing coalitions. The authors provide
game-theoretical analyses by exploring the trade-off between these two strate-
gies when two groups of varying sizes are involved. Recently, more attacks were
introduced, e.g., eclipse attack [7] that makes a node invisible in the network, or
stubborn mining as a generalization of the selfish mining [8].
We therefore propose a new reputation-based framework in which miners
not only are incentivized to conduct honest mining but also disincentivized to
commit to any malicious activities against other mining pools, such as block
withholding attack, selfish mining, eclipse attack and stubborn mining, to name
a few. We first illustrate the architecture of our reputation-based paradigm,
explain how miners are rewarded or penalized in our model, and subsequently, we
1120 M. Nojoumian et al.
provide game theoretical analyses to show how this new framework encourages
the miners to avoid dishonest mining strategies.
The rest of this paper is organized as follows. Section 2 provides preliminary
materials on digital currencies and game theory. Section 3 reviews the existing
digital currency literature where game theory is utilized. Section 4 illustrates
our model. Section 5 explains how our reputation-based scheme works. Finally,
Sect. 6 concludes with final remarks.
2 Preliminaries
2.1 Digital Currencies: Terminologies and Mechanics
In the digital currency frameworks, specifically Bitcoin, transactions are grouped
in blocks in order to be verified by a subset of nodes in the network, known as
miners. The mining process, named proof-of-work, is computationally intensive
with a specific difficulty factor that is increased overtime as the computational
power of hardware systems grows. Therefore, nodes form mining pools under the
supervision of pool managers to accomplish the mining task. In some technical
articles, the mining process of the Bitcoin (or even other digital currencies) is
referred to as the miners’ mathematical puzzle.
The first mining pool that accomplishes the proof-of-work is rewarded a cer-
tain amount of freshly mined Bitcoins as an incentive for miners’ works. That
is why this process is also known as mining. As soon as a block is verified, it is
attached to the list of existing verified blocks, known as Blockchain. Immediately
after that, all miners stop the mining process of the already verified block and
start working on the next block.
The high-level idea of the proof-of-work, verification, or mining is shown in
Fig. 1. Each block consists of a block number, a nonce value, list of transactions,
the hash value of the previous block (address of the previous block), and the
hash value of the next block (address of the next block). During the mining
process, the miners try to generate a valid hash value of a block that is less than
a threshold, i.e., it starts with a certain number of zeros. They will conduct this
process by trying different nonce values. It’s clear that generating a hash value
that starts with, say 5 zeros, is harder than a hash value that begins with 4
zeros; this is what we call the difficulty factor of mining.
Block # 77
Nonce 272931 
Transactions 
 
25B Alice  Bob 
 
... 
 
50B Alex  Mary 
 
Previous 000937af19be17 
Current Hash 0007ae291da311 
Block # 78
Nonce 171943 
Transactions 
 
10B Sara Eli  
 
... 
 
55B Eve  Cory 
 
Previous 0007ae2913da11 
Current Hash 0009da7537eb68 
Block # 79
Nonce Try diff values 
Transactions 
 
15B John  Ed 
 
... 
 
30B Dan  Geff 
 
Previous 0009da7537eb68 
Current Hash Find a valid hash 
Fig. 1. Blockchain and mining.
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1121
The hashing rate hr, also known as mining power, is the total number of
hashes that a miner can calculate during a specific time interval. Therefore,
the average time to find a valid hash value, also known as full proof-of-work,
correlates to a miner’s hashing rate. In fact, the pool manager sends different
templates of the current block to his miners so that they can find a valid hash
value by changing the nonce value. If a miner accomplishes the full proof-of-
work, he will then send it to his pool manager. Consequently, the pool manager
publishes the legitimate block on behalf of the entire pool. He will then distribute
the revenue among miners based on their mining powers. Note that new coins
are put explicitly in the block by the miner(s) who created it.
To estimate each miner’s power, the pool manager determines a partial target
for each miner, much easier than the actual target of the system. For instance,
instead of calculating a hash value that starts with, say 5 zeros, a hash value
with a single zero is sufficient. Note that this is just a simple example for the
sake of clarification. Therefore, each miner is instructed to send a valid hash
value according to the partial target. This partial target is defined in such a way
that a partial solution can be calculated frequently enough so that the manager
can fairly estimate the miners’ powers because, as we stated earlier, the revenue
is distributed based on the miners’ powers.
2.2 Game Theory: Basic Notions and Definitions
A game consists of a set of players, a set of actions and strategies (strategy is the
way that each player selects actions), and finally, a utility function that is used by
each player to compute how much benefit he obtains by choosing a certain action.
In cooperative games, the players collaborate and split the aggregated utility
among themselves, that is, cooperation is incentivised by agreement. However,
in non-cooperative games, the players cannot form any agreement to coordinate
their behaviors. In other words, any cooperation among the players must be
self-enforcing.
The prisoner’s dilemma, as illustrated in Fig. 2, is an example of non-
cooperative games. In this setting, two possible actions are considered: C : keep
quiet (cooperation) and D : confess (defection). In the pay-off (utility) matrix,
+1, 0,−1, and −2 denote freedom, jail for one year, jail for two years, and jail
for three years, respectively. The outcome of this game will be (D ,D) because
of the Nash equilibrium concept, while the ideal outcome is (C ,C ). To better
understand the notion of Nash equilibrium, and consequently, why the game has
such an outcome, consider the following two possible scenarios:
(1) If player P1 selects C (1st row), then P2 will select D (2nd column) since
+1 > 0.
(2) If player P1 selects D (2nd row), then P2 will select D (2nd column) since
−1 > −2.
1122 M. Nojoumian et al.
-1 , -1+1 , -2D: Confess
-2 , +10 , 0C: Quiet
D: ConfessC: Quiet
P2
P1 -1 , -1+1 , -2
-2 , +10 , 0
P1
P1 cooperate
-1 , -1+1 , -2
-2 , +10 , 0
P1
P1 defect
P2
P2
Fig. 2. Nash equilibrium in Prisoner’s dilemma.
In other words, regardless of whether player P1 cooperates or defects, player
P2 will always defect. Since the pay-off matrix is symmetric, P1 will also defect
regardless of whether P2 cooperates or defects. In fact, since the players are not
able to coordinate their behavior, the final outcome will be (D ,D).
We briefly review some well-known game-theoretic concepts [9] for our further
analyses and discussions.
Definition 1: Let A
def= A1 × A2 × · · · × An be an action profile for n players,
where Ai denotes the set of possible actions of player Pi. A game Γ = (Ai, ui)
for 1 ≤ i ≤ n, consists of Ai and a utility function ui : A �→ R for each player
Pi. We refer to a vector of actions �a = (a1, . . . , an) ∈ A as an outcome of the
game.
Definition 2: Utility function ui illustrates the preferences of player Pi over dif-
ferent outcomes. We say Pi prefers outcome �a to �a′ iff ui(�a) > ui(�a′), and he
weakly prefers outcome �a to �a′ if ui(�a) ≥ ui(�a′).
To allow the players to follow randomized strategies, we define σi as a prob-
ability distribution over Ai for a player Pi. This means he samples ai ∈ Ai
according to σi. A strategy is said to be a pure-strategy if each σi assigns
probability 1 to a certain action, otherwise, it is said to be a mixed-strategy.
Let �σ = (σ1, . . . , σn) be the vector of players’ strategies, and let (σ′
i,�σ−i) =
(σ1, . . . , σi−1, σ
′
i, σi+1, . . . , σn), where Pi replaces σi by σ′
i and all the other play-
ers’ strategies remain unchanged. Therefore, ui(�σ) denotes the expected utility
of Pi under the strategy vector �σ. A player’s goal is to maximize ui(�σ). In the
following definitions, one can substitute action ai ∈ Ai with its probability dis-
tribution σi ∈ Si, or vice versa.
Definition 3: A vector of strategies �σ is Nash equilibrium if, for all i and any
σ′
i �= σi, it holds that ui(σ′
i,�σ−i) ≤ ui(�σ). This means no one gains any advantage
by deviating from the protocol as long as the others follow the protocol.
Definition 4: Let S−i
def= S1 ×· · ·×Si−1 ×Si+1 ×· · ·×Sn. A strategy σi ∈ Si
(or an action) is weakly dominated by σ′
i ∈ Si (or another action) with respect
to S−i if:
1. For all �σ−i ∈ S−i, it holds that ui(σi,�σ−i) ≤ ui(σ′
i,�σ−i).
2. There is a �σ−i ∈ S−i such that ui(σi,�σ−i) < ui(σ′
i,�σ−i).
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1123
This means player Pi can never improve its utility by playing σi, and he can
sometimes improve it by not playing σi. A strategy σi ∈ Si is strictly dominated
if player Pi can always improve its utility by not playing σi.
3 Literature Review
Even though the concept of Blockchain is relatively new, introduced by an
unknown author or authors in 2008 [10], it has gained considerable attention
from the computer science and economics communities because of its unique
approach in decentralizing verification of transactions related to a digital cur-
rency, and its inherent security because of this decentralized nature. However,
the body of work that is focused on the study of Blockchain through the use
of game theoretic methods is limited. In this section, related research works to
game theory and Blockchain are reviewed.
Johnson et al. [6] study the incentives for a mining pool to carry out a
Distributed Denial of Service (DDoS) attack against another mining pool. The
authors scrutinize this problem from an economic point of view where the incen-
tive for an attack is to increase one’s own probability of successfully verifying the
next block of transactions, and hence, earning the Bitcoin rewards from this min-
ing operation. They conclude that there is a greater incentive to attack a large
mining pool rather than a small pool. The authors point out that this finding is
consistent with statistics reported by [11] that shows 17.1% of small mining pools
have been suffered from DDoS attacks whereas 62.5% of large pools have been
affected by such attacks. The authors make two other interesting observations
as well. First of all, the ability to mitigate the DDoS attacks will increase the
market threshold for the size at which a pool becomes vulnerable to the DDoS
attack. This makes intuitive sense since the ability to mitigate such attacks will
decrease the attacker’s utility. Second, the cost of these attacks will keep small
pools out of the DDoS market since the incentive for attacking such pools is
relatively low.
Babaioff et al. [12] look at a different problem that is present in the Bitcoin
protocol. In fact, this problem will intensify once the mining reward is ended in
the Bitcoin network. In the current design, the nodes that authorize a transaction
are rewarded through two separate methods. The first is through the generation
of new Bitcoins for every new block that is added to the Blockchain, and the
second method is through a transaction fee. The maximum number of Bitcoins
is limited to about 21 Million [13] and the creation of new Bitcoins becomes
exponentially smaller until the maximum limit is reached. The transaction fee
will be the only resource to incentivize the miners when the maximum threshold
is reached. At that point, miners are incentivized to keep the information of a
possible transaction secret as there will be no new Bitcoins to be mined from the
efforts of mining, that is, there is only the transaction fee that is given to the
verifier of transactions. This incentive to keep information secret can potentially
cripple the Bitcoin system as the time for confirming a transaction will be long
when there is only one node attempting to verify the transaction.
1124 M. Nojoumian et al.
Kroll et al. [14] study Bitcoin as a consensus game and consider the economics
of Bitcoin from the mining perspective to determine whether there exists any
incentive for rational players to deviate from the mining protocol. The authors
show that there is a Nash equilibrium outcome for which all players cooperate
with the Bitcoin reference implementation. However, there are infinitely many
equilibria where the players can behave otherwise. The authors show that a moti-
vated adversary may be capable of crashing the currency, as a result, governance
structures will be necessary.
Even though the authors in [15] don’t refer to any game theoretic models,
they detail several possible vulnerabilities within the Blockchain protocol that
are great candidates for game theoretic study such as deflationary spiral, the
History-Revision attack, and delayed transaction confirmation. Carlsten et al.
[16] study the issues of Bitcoin and Blockchain when the last block reward is
collected. The authors show that once the mining reward is removed from the
protocol, leaving only the transaction fees, the incentive for defection increases.
Luu et al. [17] scrutinize the block withholding attack on mining pools, intro-
duced by Rosenfeld [4]. They show that the attack always has incentive when
looking at a long term operation, but it may not be profitable for short term dura-
tion. Eyal [18] studies the same subject and concludes that when two pools attack
each other, it results in a version of the prisoner’s dilemma, named the Miner’s
Dilemma. Lewenberg et al. [19] introduce a modification to the Blockchain pro-
tocol to allow for inclusion of forked blocks with the aim of increasing the rate of
operation. The authors then provide a game theoretic model of the competition
for fees between the nodes under the new protocol.
4 Our Reputation-Based Mining Model and Setting
As illustrated in Fig. 3, our model consists of a set of pool managers M(i,pi) who
form coalitions for the proof-of-work computations, for 1 ≤ i ≤ I, where 0 ≤ pi
denote profits that pool managers have so far accumulated; a set of miners/ally
miners m(jk,rk) who perform proof-of-works, for 1 ≤ j ≤ J and 1 ≤ k ≤ K, where
−1 ≤ rk ≤ +1 denote the reputation value of a miner/ally miners. In our model,
miners/ally minors may commit to malicious activities through direct attacks
(e.g., DDoS attack) or collusion attacks (e.g., block withholding) to disrupt the
proof-of-work computations of certain mining pools. As such, two actions are
considered in the miners’ action profile, that is, commit to malicious activity
to disrupt computations of mining pools, denoted by D : dishonest mining, or
conduct the proof-of-work honestly, denoted by H : honest mining.
Note that, in the current setting of digital currencies, each miner is defined
by a unique identity j. However, in our proposed framework, each miner is also
assigned a public reputation value rk, where k is the index of this value. In fact,
the reputation value reflects how well the miner has so far performed in the sys-
tem in terms of mining performance as well as honest or malicious activities (i.e.,
a history of behavior). This public reputation value rk is updated after a specific
period of time based on different criteria, e.g., the ratio of full proof-of-work over
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1125
m(11,+0.5) 
m(21,+0.5) 
m(31,+0.5) 
First Mining Pool
Pool Manager M ( 1 , 250B ) 
m(42,+1) 
m(53,-0.2) 
m(63,-0.2) 
Miners: m ( j k , rk ) 
1 j  J : identity 
1 k  K : reputation id 
-1 rk  +1 : reputation 
m ( J-2 K-1 , 0 ) 
Last Mining Pool
Pool Manager M ( , 75B ) 
m ( J K , -1 ) 
Managers: M ( i , pi )   
1 i  : identity 
0 pi : profit 
i 1 2 3 ... 1
pi 250B 125B 0B ... 200B 75B 
k 1 2 3 ...  1
j 1, 2, 3 4 5, 6 ... J-2 , J-1 J 
rk +0.5 +1 -0.2 ... 0 -1 
m ( J-1 K-1 , 0 ) 
Ally Miners
Fig. 3. Architecture of our reputation-based setting.
partial proof-of-work, detection of any malicious activity such as collusion with
other miners, selfish-mining, or contribution to a distributed denial-of-service
attack. Moreover, each pool manager i is also assigned a parameter pi that
defines the profit that he has so far accumulated through his pool. As pi reflects
how well a manager is performing, it can be interpreted as his reputation.
In our setting, a subset of miners who highly trust each other (due to part-
nerships, personal relationships, common nationality, or even geographical prox-
imity) can form an alliance, named ally miners, and request a single reputation
value rk even though they each have a separate identity j. This means, while
members of a coalition can build reputation all together through rk by collabo-
rations overtime, they are all responsible for malicious activities triggered even
by a single member of their coalition.
This leads to the notion of neighborhood-watch meaning that each member
of an alliance is incentivised to monitor his allies. For instance, members can
agree to execute a randomized algorithm to monitor each other through various
methods, that is, cybersecurity detection techniques or transparency policies to
make sure no one has ever received any bribe from other mining pools due to any
sort of collusion attacks. As a result, the pool manager doesn’t need to have any
concern for every single member of his mining pool. Furthermore, if a member
decides to launch an attack, he may need to convince all his coalition members
1126 M. Nojoumian et al.
or act solo, which might be caught by his allies through randomized monitoring
before it can even affect the mining procedure.
Once in a while, the pool managers rearrange their groups to form new
coalitions for the proof-of-work. They send invitations (i.e., an invitation-based
approach) to miners/ally miners based on a non-uniform probability distribution
that is defined by the reputation values rk. In other words, the miners/ally miners
who are more reputable have a higher chance to be invited to the mining pools
and those who are not trustworthy have a lower chance to receive invitations.
The miners/ally miners can also chose to whom they would like to join if they
receive multiple invitations, that is, a mutual merit-based setting for both miners
and managers.
Since this public reputation system is sustained over time, it will be in the best
interests of the miners/ally miners to become reputable (or sustain their high rep-
utation) to maximize their long-term utility. This will incentivize the miners/ally
miners to avoid any dishonest behavior even if it has a short-term utility. Note
that the underlying reputation system must be immune against re-entry attack
(that is, cheat and come back to the scheme with a new identity j). We utilize the
proposed idea of rational trust modeling [20] to make sure our proposed mining
paradigm is not vulnerable to these sorts of attacks against reputation systems.
Furthermore, in our proposed model, while ally miners are incentivized to
form larger coalitions to sustain a high reputation value and consequently gain
more revenue, they are not incentivized to admit any new miner to their alliance
unless they fully trust the newcomer. This is due to the fact that a single miner
can harm the entire coalition. Moreover, it is worth mentioning that, although
ally miners only have a single reputation identity rk, a miner cannot commit to
malicious activities in a set and then simply joins another alliance because each
miner still has a unique identifier j.
Our proposed model can be seen as a global community where each mining
pool represents a federal authority and each alliance represent a state authority.
Therefore, each alliance is responsible to detect malicious activities inside the
coalition in a smaller scale. In addition, each alliance can be changed in size
and also move to a new mining pool when the rearrangement is occurred. This
approach not only leads to less managerial overheads for the pool managers but
also it creates a framework where practical implementations of preventive and
detective protocols become possible.
5 Mining in Our Reputation-Based Model
Since our approach is designed using a reputation-based paradigm, it’s necessary
to utilize a reputation/trust model that is resistant to the well-known re-entry
attack, that is, corrupted players return to the scheme using new identities.
Otherwise, our approach cannot be utilized properly. We will discuss this in the
next section.
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1127
5.1 Prevention of the Re-entry Attack
To deal with the re-entry attack in our reputation-based scheme, we utilize
the proposed approach of rational trust modeling [20]. We provide a high-level
description as how this modeling technique works. Suppose there exist two trust
functions as follows. The first function f1(T
p−1
i , αi) has two inputs, that is, trust
value T p−1
i of player Pi in period p− 1 and action αi (cooperation or defection)
selected by player Pi in period p − 1. This function computes the updated trust
value T p
i of player Pi for the next round p based on these two inputs. However,
the second function f2(T
p−1
i , αi, �i) has an extra input value that defines the
player’s lifetime, denoted by �i. This extra input determines how long a player
with a reasonable number of interactions exists in a reputation-based scheme,
for instance, in our proposed reputation-based mining framework.
Using the second function, the reputation-based scheme should then be
designed in a way that a player with a longer lifetime can be rewarded (penal-
ized) more (less) than a player with a shorter lifetime assuming that the other
two inputs (i.e., current trust value and the action) are the same. In this setting,
“reward”means gaining a higher trust value/becoming more trustworthy, and
consequently, receiving a higher utility, and“penalty” means otherwise. In other
words, if two players Pi and Pj both cooperate αi = αj = C and their current
trust values are equal T p−1
i = T p−1
j but their lifetime parameters are different,
say �i > �j , the player with a higher lifetime parameter gains a higher trust
value for the next round, i.e., T p
i > T p
j . This helps player Pi to accumulate
more utility/revenue in the targeted reputation-based framework.
To exemplify, consider a situation in which sellers, in a reputation-based e-
commerce setting, have options to sell the “defective” versions of an item with
more revenue or the“non-defective” versions of the same item with less revenue.
If the first sample function f1 is utilized in the scheme, it might be tempting
for a seller to sell the defective items with more revenue and then he returns to
the e-commerce framework with a new identity (i.e., re-entry attack). However,
if the second sample trust function f2 is utilized, it’s no longer in a seller’s best
interest to sell the defective items because if he returns to the community with a
new identity, his lifetime indicator becomes zero and he loses all the credits that
he has accumulated overtime. Consequently, he loses a huge potential revenue
that he could gain because of his lifetime parameter, i.e., buyers always prefer
a seller with a longer lifetime (longer existence with a reasonable number of
transactions) over a seller who is a newcomer.
We emphasize that this is just an example of a rational trust modeling.
In fact, the second sample function uses the lifetime parameter �i to enforce
trustworthiness and prevent the re-entry attack. It is worth mentioning that
different parameters can be incorporated into trust functions/reputation systems
based on the context (e-commerce, mining in Blockchain, etc.), and consequently,
different attacks can be prevented.
1128 M. Nojoumian et al.
5.2 Technical Discussion on Detection Mechanisms
Detection mechanisms are required to reward or penalize miners in our
reputation-based setting. In this section, we provide technical discussions and
mechanisms by which non-cooperative actions by miners (e.g., block withhold-
ing, selfish mining, distributed denial-of-service attack, eclipse attack, stubborn
mining, or upcoming attacks that are unknown) can be detected.
A mining pool can detect if it is under a block withholding attack with a
relatively high accuracy. In fact, calculation of the partial proof-of-work is much
easier than calculation of the full proof-of-work. Therefore, a mining pool can
simply estimate its expected mining power in addition to its actual mining power.
As a result, any difference between the expected and actual mining powers,
which is above a certain threshold, can be an indication of a block withholding
attack.
To determine which registered miner is the perpetrator, there are two pos-
sibilities. First, if the mining power of a miner/ally miners is high enough, the
ratio of the full proof-of-work over the partial proof-of-work can indicate whether
the miner/alliance is committing to the block withholding attack. Second, if the
mining power is not high, the frequency of success to find the full proof-of-work
is very low, and statistically, we may not be able to define if a miner is really
committing to the block withholding attack. However, the latter case has a neg-
ligible (close to zero) impact on the mining process and can be simply ignored,
i.e., block withholding attack by a single miner or miners with a low mining
power cannot negatively affect the fair mining process.
As suggested by Eyal and Sirer [5] who initially introduced the selfish min-
ing, an increase in the number of orphaned blocks can be an indication of selfish
mining in the Blockchain. Furthermore, the amount of time taken to release
consecutive blocks in the Blockchain can potentially provide evidence of selfish
mining. This issue has been investigated by several researchers through experi-
mental analysis1. In other words, two blocks in close succession should be a very
rare incident when miners are honest, and this is more common when a miner/a
group of miners quickly releases selfishly mined blocks to overcome the honest
miners. As a result, it’s not hard to detect which miners are committing to the
selfish mining.
As stated in [7], the eclipse attack has several signatures and properties that
make it detectable, e.g., a flurry of short-lived incoming TCP connections from
diverse IP addresses. Moreover, an attacker that suddenly connects a large num-
ber of nodes to the Bitcoin network could also be detected. Therefore, anomaly
detection software systems that look for similar behaviors can be helpful to
detect the attacker. Likewise, there are many other techniques in the security
literature that can be utilized to detect the distributed denial-of-service attack,
stubborn mining, etc.
1 http://scienceblogs.com/builtonfacts/2014/01/11/is-bitcoin-currently-
experiencing-a-selfish-miner-attack/.
http://scienceblogs.com/builtonfacts/2014/01/11/is-bitcoin-currently-experiencing-a-selfish-miner-attack/
http://scienceblogs.com/builtonfacts/2014/01/11/is-bitcoin-currently-experiencing-a-selfish-miner-attack/
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1129
Besides, other methods might be used to detect bribes and illegal money
exchanges among registered miners in the transparent network of Bitcoin (unless
they exchange bribes outside of the Bitcoin network). This is how the govern-
ment agencies usually detect money laundering/illegal money exchanges in the
traditional banking system. In other words, detection of these bribes might be an
indication of collusion; why miners from two competing pools should frequently
exchange money with a certain amount.
5.3 Colluding Miner’s Dilemma
In this section, we consider a scenario in which two miners (independent or
from two different alliances) have to decide whether to collude with an attacker
to disrupt another mining pool’s effort or not. Two collusion scenarios can be
considered, i.e., a single miner colludes with the attacker, or multiple miners form
a coalition with the attacker. We consider the latter case as it is the general case
of the first scenario. It is worth mentioning that game-theoretical paradigms
are usually utilized to analyze interaction between honest parties and attackers.
However, we intend to model collusion between miners and an attacker in the
context of Blockchain’s proof-of-work. In our setting, we initially consider a 2-
miner game, named colluding miner’s dilemma, that may/may not collude with
the attacker to disrupt the mining efforts of a targeted mining pool. We further
extend this scenario to a n-miner game that is played repeatedly among all the
miners of the Blockchain network for an unknown number of rounds.
In the 2-miner setting, shown in Table 1, if both miners collude with the
attacker, they each gain a half-unit of utility. In other words, the attacker’s bud-
get will be equally shared between both miners. However, if one miner colludes
with the attacker but the other one acts honestly, the colluding miner will receive
one unit of utility from the attacker. As a result of this dilemma, collusion is
Nash Equilibrium meaning that miners always collude because it’s in their best
interest to gain a higher utility. This is a realistic assumption where an attacker
with a limited budget tries to disrupts the proof-of-work computation of a min-
ing pool in favor of another alliance. Note that the budget is limited because
mining reward is fixed in the Blockchain network.
Table 1. Payoff in colluding miner’s dilemma
We approach the colluding miner’s dilemma by setting a socio-rational model
[21,22] (that is, a repeated game among rational foresighted players with public
1130 M. Nojoumian et al.
reputation values where these values directly affect players’ utilities overtime) in
which:
(1) Each pool manager sends invitations to miners to form his mining pool for
the proof-of-work computation. He not only tries to maximize his pool’s
revenue but also intends to protect his pool against any malicious activity.
These invitations are defined based on miners’ trust values using a non-
uniform probability distribution.
(2) On the other hand, the attacker uses his limited budget to collude with the
miners, and consequently, compromise the proof-of-work computation of a
targeted pool.
In this setting, if a miner colludes with the attacker, he may gain some utility
in the current round of the game, however, that miner will be selected by the
pool managers with a lower probability in the future if his malicious activity is
detected. This is due to the reduction of his reputation value, see [23,24] for a
trust/reputation management system. Therefore, it will be in the best interest
of the miners not to collude with the attacker because a malicious miner will
lose his public reputation, and consequently, he will lose many future mining
opportunities with a much larger gain.
5.4 Repeated Mining Game
We use a trust model that is resistant to the re-entry attack in a repeated
game setting. The miners try to maximize their utilities through the proof-
of work computation as well as collusion with the attacker, or any dishonest
mining strategies. We show that, by using our proposed model, cooperation (not-
colluding with the attacker or committing to any malicious activity) is always
Nash Equilibrium because of a long-term utility function that we consider in our
model in addition to a short-term utility function. Our model not only rewards
honest miners but also penalizes colluding/dishonest miners. For the sake of
simplicity and without loss of generality, two classes of actions are defined in
our setting, i.e., dishonest/collude as a non-cooperative action and honest/not
collude as a cooperative action, similar to [25].
The mining game is repeatedly played for an unknown number of rounds.
Each miner m(jk,rk) has a public reputation value rk, where the initial value is
zero, and it is bounded as follows: −1 ≤ rk ≤ +1. In addition, each miner’s
action αj ∈ {H ,D ,⊥}, where H and D denote honest mining and dishonest
mining, respectively, and ⊥ indicates miner m(jk,rk) has not been selected by
any pool manager M(i,pi) in the current round. Finally, each miner calculates
two utility functions to select his action, that is, a long-term utility function uj
and an actual utility function u′
j . Note that each round of the game consists of
a sequence of block verification, for instance, after verifying a constant number
of blocks or after a certain amount of time.
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1131
(1) Suppose we have a non-uniform probability distribution over types of miners,
i.e., honest, dishonest and new miners. Each pool manager M(i,pi) sends
invitations to a subset of miners based on this probability distribution in
each round of the game.
(2) Each miner m(jk,rk) computes his long-term utility uj , and then selects a
new action from the action profile, i.e., employ honest or dishonest mining
strategies.
(3) Each m(jk,rk) receives his short-term utility u′
j , i.e., the actual reward that
each miner gains, at the end of each round of the game based on the proof-
of-works’ outcomes.
(4) The reputation values rk of the selected miners/ally miners are pub-
licly updated based on each miner’s/alliance’s behavior using a reputation
system.
5.5 Colluding Miners’ Preferences
Let uj(�a) denote m(jk,rk)’s long-term utility in outcome �a by taking into account
the current and future games, and let u′
j(�a) denote m(jk,rk)’s short-term utility
in outcome �a of the current game. Also, let dj(�a) ∈ {0, 1} denote if miner m(jk,rk)
has employed dishonest mining strategies in the current game, and define Δ(�a) =∑
i dj(�a), that is, the total number of miners who have utilized dishonest mining
strategies. Let r�a
k(p) denote the reputation of m(jk,rk) after outcome �a in period
p; note that �a and �a′ are two different outcomes of our repeated game.
The miners’ preferences are as follows: di(�a) = di(�a′) & r�a
k(p) > r�a′
k (p) ⇒
uj(�a) > uj(�a′), that is, each miner m(jk,rk) prefers to sustain a high reputation
value overtime despite of employing honest or dishonest mining strategies as he
can potentially gain a higher long-term utility; di(�a) > di(�a′) ⇒ u′
j(�a) > u′
j(�a
′),
that is, if a miner m(jk,rk) utilizes a dishonest mining strategy, he gains a short-
term utility from the attacker, and finally; di(�a) > di(�a′) & Δ(�a) < Δ(�a′) ⇒
u′
j(�a) > u′
j(�a
′), that is, if m(jk,rk) employs dishonest mining strategies and the
total number of dishonest miners in �a is less than the total number of dishonest
miners in �a′, the miner gains a higher short-term utility in �a.
5.6 Colluding Miners’ Utilities
In our setting, the long-term utility function ui is computed based on the utility
that each miner m(jk,rk) potentially gains or loses by considering both current
and future games, i.e., taking into account all stated utility preferences. However,
the short-term utility function u′
i is only calculated based on the current gain
or loss in a given time interval, i.e., taking into account the last two utility
preferences, as mentioned in Sect. 5.5.
Let ϕj be the reward factor that is determined by each pool manager M(i,pi)
based on rk of each miner m(jk,rk), and let δj(�a) = r�a
k(p) − r�a
k(p − 1) be the
difference of two consecutive reputation values. Note that τj = |δj(�a)| /δj(�a) is
positive if the selected action in period p is H : honest mining, and it is negative,
1132 M. Nojoumian et al.
if it is D : dishonest mining. Also, let Ω > 0 be a unit of utility, for instance,
B50. To satisfy the miners’ preferences, we compute the long-term utility uj(�a)
through the following linear combination:
uj(�a) = Ω
(
τjϕj + dj(�a) +
dj(�a)
Δ(�a) + 1
)
. (1)
Note that the actual utility u′
j(�a) only consists of the second and third terms,
that is, u′
j(�a) = Ω(dj(�a)+dj(�a)/(Δ(�a)+1)). The first term of the utility function
denotes miner m(jk,rk) gains or loses ϕi units of utility in the future games due
to his behavior as reflected in rk. This is due to τj that depends on the miner’s
reputation value rk. The second term illustrates miner m(jk,rk) gains one unit of
utility if he employs dishonest mining strategies or colludes with the attacker in
the current game, and he loses this opportunity otherwise. Finally, the last term
results in almost one unit of utility to be shared among all dishonest miners.2
Theorem 1: In a (2, 2)-game between two miners, honest mining H strictly dom-
inates dishonest mining D when we use utility function uj(�a), as defined in (1).
Theorem 2: In a (n, n)-game among n miners, honest mining H strictly dom-
inates dishonest mining D when we use the utility function uj(�a), as defined
in (1).
6 Concluding Remarks
In this paper, we proposed a new reputation-based mining paradigm for the
proof-of-work computation in the Blockchain. We first illustrated the problem
of dishonest mining, demonstrated our proposed model, and subsequently, pro-
vided a candidate solution concept to the aforementioned problem. Note that, by
dishonest mining, we refer to any malicious activity against other mining pools
or competitors, such as block withholding attack, selfish mining, eclipse attack
and stubborn mining, to name a few.
Our proposed mining game is repeatedly played among a set of pool man-
agers and miners where the reputation value of each miner or mining ally is
continuously measured by a trust management scheme that is resistant to the
re-entry attack. At each round of the game, pool managers send invitations only
to a subset of miners based on a non-uniform probability distribution defined
by the miners’ reputations. It is worth mentioning that each round of the game
consists of a sequence of block verification, for instance, after verifying a constant
number of blocks or after a certain amount of time.
We showed that by using our proposed solution concept, honest mining
becomes Nash Equilibrium in our setting. In other words, it will not be in the
best interest of the miners to disrupt the proof-of-work computation or commit
2 The proofs of both theorems and the related mathematical analyses will be provided
in the complete version of this paper.
Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies 1133
to dishonest mining even by gaining a short-term utility. This is due to the con-
sideration of a long-term utility function in our model and its impact on the
miners’ utilities overtime. As our future work, we are interested in implementing
our proposed game through a simulation-based approach using real data from
the Bitcoing network.
Acknowledgment. Research was sponsored by the Army Research Office and was
accomplished under Grant Number W911NF-18-1-0483. The views and conclusions
contained in this document are those of the authors and should not be interpreted
as representing the official policies, either expressed or implied, of the Army Research
Office or the U.S. Government. The U.S. Government is authorized to reproduce and
distribute reprints for Government purposes notwithstanding any copyright notation
herein.
References
1. Roy, S., Ellis, C., Shiva, S., Dasgupta, D., Shandilya, V., Wu, Q.: A survey of game
theory as applied to network security. In: 43rd Hawaii International Conference on
System Sciences (HICSS). IEEE, pp. 1–10 (2010)
2. Liang, X., Xiao, Y.: Game theory for network security. IEEE Commun. Surv. Tutor.
15(1), 472–486 (2013)
3. Nakamoto, S.: Bitcoin: a peer-to-peer electronic cash system (2008)
4. Rosenfeld, M.: Analysis of bitcoin pooled mining reward systems. arXiv preprint
arXiv:1112.4980 (2011)
5. Eyal, I., Sirer, E.G.: Majority is not enough: Bitcoin mining is vulnerable. In:
International Conference on Financial Crypto and Data Security, pp. 436–454.
Springer (2014)
6. Johnson, B., Laszka, A., Grossklags, J., Vasek, M., Moore, T.: Game-theoretic
analysis of DDoS attacks against bitcoin mining pools. In: International Conference
on Financial Cryptography and Data Security, pp. 72–86. Springer (2014)
7. Heilman, E., Kendler, A., Zohar, A., Goldberg, S.: Eclipse attacks on bitcoin’s
peer-to-peer network. In: USENIX Security Symposium, pp. 129–144 (2015)
8. Nayak, K., Kumar, S., Miller, A., Shi, E.: Stubborn mining: generalizing selfish
mining and combining with an eclipse attack. In: First European Symposium on
Security and Privacy (EuroS&P), pp. 305–320. IEEE (2016)
9. Osborne, M.J., Rubinstein, A.: A Course in Game Theory. MIT press, Cambridge
(1994)
10. Satoshi, N.: Bitcoin: a peer-to-peer electronic cash system. Bitcoin. org, [cit. 2014-
11-13] (2008). https://bitcoin.org/bitcoin.pdf
11. Vasek, M., Thornton, M., Moore, T.: Empirical analysis of denial-of-service attacks
in the bitcoin ecosystem. In: International Conference on Financial Cryptography
and Data Security, pp. 57–71. Springer (2014)
12. Babaioff, M., Dobzinski, S., Oren, S., Zohar, A.: On bitcoin and red balloons. In:
13th ACM Conference on Electronic Commerce, pp. 56–73. ACM (2012)
13. Antonopoulos, A.M.: Mastering Bitcoin: Unlocking Digital Cryptocurrencies.
O’Reilly Media Inc, Sebastopol (2014)
14. Kroll, J.A., Davey, I.C., Felten, E.W.: The economics of bitcoin mining, or bitcoin
in the presence of adversaries. In: Proceedings of WEIS, vol. 2013 (2013)
http://arxiv.org/abs/1112.4980
https://bitcoin.org/bitcoin.pdf
1134 M. Nojoumian et al.
15. Barber, S., Boyen, X., Shi, E., Uzun, E.: Bitter to better-how to make bitcoin
a better currency. In: International Conference on Financial Crypto and Data
Security, pp. 399–414. Springer (2012)
16. Carlsten, M., Kalodner, H., Weinberg, S.M., Narayanan, A.: On the instability
of bitcoin without the block reward. In: Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, pp. 154–167. ACM (2016)
17. Luu, L., Saha, R., Parameshwaran, I., Saxena, P., Hobor, A.: On power splitting
games in distributed computation: the case of bitcoin pooled mining. In: Com-
puter Security Foundations Symposium (CSF), 2015 IEEE 28th, pp. 397–411.
IEEE (2015)
18. Eyal, I.: The miner’s dilemma. In: 2015 IEEE Symposium on Security and Privacy
(SP), pp. 89–103. IEEE (2015)
19. Lewenberg, Y., Sompolinsky, Y. Zohar, A.: Inclusive block chain protocols. In:
International Conference on Financial Crypto and Data Security, pp. 528–547.
Springer (2015)
20. Nojoumian, M.: Rational trust modeling. Arxiv, 2017, p. 12 https://arxiv.org/abs/
1706.09861
21. Nojoumian, M., Stinson, D.R.: Socio-rational secret sharing as a new direction
in rational cryptography. In: 3rd International Conference on Decision and Game
Theory for Security (GameSec), LNCS, vol. 7638, pp. 18–37. Springer (2012)
22. Nojoumian, M.: Generalization of socio-rational secret sharing with a new utility
function. In: 12th IEEE Annual International Conference on Privacy, Security and
Trust, pp. 338–341 (2014)
23. Nojoumian, M., Lethbridge, T.C.: A new approach for the trust calculation in
social networks. In: E-business and Telecommunication Networks: 3rd International
Conference on E-Business, Best Papers. CCIS, vol. 9, pp. 64–77. Springer (2008)
24. Nojoumian, M.: Novel secret sharing and commitment schemes for cryptographic
applications. Ph.D. dissertation, Department of Computer Science, UWaterloo,
Canada (2012)
25. Nojoumian, M., Golchubian, A., Saputro, N., Akkaya, K.: Preventing collusion
between SDN defenders and attackers using a game theoretical approach. In: Info-
com: Adv in Software Defined & Context Aware Cognitive Radio Net. IEEE (2017).
p. 6
https://arxiv.org/abs/1706.09861
https://arxiv.org/abs/1706.09861
	Incentivizing Blockchain Miners to Avoid Dishonest Mining Strategies by a Reputation-Based Paradigm
	1 Introduction
	2 Preliminaries
	2.1 Digital Currencies: Terminologies and Mechanics
	2.2 Game Theory: Basic Notions and Definitions
	3 Literature Review
	4 Our Reputation-Based Mining Model and Setting
	5 Mining in Our Reputation-Based Model
	5.1 Prevention of the Re-entry Attack
	5.2 Technical Discussion on Detection Mechanisms
	5.3 Colluding Miner's Dilemma
	5.4 Repeated Mining Game
	5.5 Colluding Miners' Preferences
	5.6 Colluding Miners' Utilities
	6 Concluding Remarks
	References