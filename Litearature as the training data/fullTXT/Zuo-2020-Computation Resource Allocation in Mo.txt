Computation Resource Allocation in Mobile Blockchain-enabled Edge Computing Networks
Computation Resource Allocation in Mobile
Blockchain-enabled Edge Computing Networks
Yiping Zuo, Shengli Zhang, Senior Member, IEEE, Yu Han, and Shi Jin, Senior Member, IEEE
Abstract—In this paper, we investigate a new mobile
blockchain-enabled edge computing (MBEC) network, where mo-
bile users can join the empowered process of public blockchains
and meanwhile offload computation-intensive mining tasks to the
mobile edge computing (MEC) server. However, the trustiness
of the MEC server and the fairness of computation resources
allocated by the MEC server for each user become key challenges.
To tackle these challenges, we consider an untrusted MEC
server and propose a nonce hash computing ordering (HCO)
mechanism in MBEC networks. Then we formulate nonce hash
computing demands of an individual user as a non-cooperative
game that maximizes the personal revenue. Moreover, we also
analyze the existence of Nash equilibrium of the non-cooperative
game and design an alternating optimization algorithm to achieve
the optimal nonce selection strategies for all users. With the
proposed HCO mechanism, the MEC server can provide much
fairer computation resources for all users, and we can achieve
the optimal nonce strategies of hash computing demands by
using the proposed alternating optimization algorithm. Numerical
results demonstrate that the proposed HCO mechanism can
provide fairer computation resource allocation than the tradi-
tional weighted round-robin mechanism, and further verify the
effectiveness of this alternating optimization algorithm.
Index Terms—blockchain, edge computing, computation of-
floading, ordering mechanism, non-cooperative game
I. INTRODUCTION
In 2008, the concept of blockchain was first proposed in
[1]. Blockchain is essentially a distributed database, which
records transactional information between nodes in the peer-
to-peer (P2P) network without the need of any third-party
intermediaries. The main advantage of blockchain is decen-
tralization. In blockchain networks, in order to maintain the
decentralization, plenty of nonce hash computations, namely,
the mining process, are required by nodes to compete for
billing rights. The computation-intensive mining process relies
on heavy equipment and fixed access points, thereby limiting
the development of traditional blockchain networks. With the
rapid development of wireless communication technologies,
mobile blockchain networks, where lots of mobile users can
run blockchain applications, is emerging. However, mobile
users cannot sustain a large quantity of computations, storage,
and energy resources during the mining process in mobile
blockchain networks. To overcome this difficulty, mobile edge
computing (MEC) servers are introduced to provide these
resources for resource-limited users [2]–[6].
Y. Zuo, Y. Han, and S. Jin are with the National Mobile Communications
Research Laboratory, Southeast University, Nanjing 210096, China (e-mail:
zuoyiping@seu.edu.cn; hanyu@seu.edu.cn; jinshi@seu.edu.cn).
S. Zhang is the College of Information Engineering, Shenzhen University,
Shenzhen 518060, China (e-mail: zsl@szu.edu.cn)
Recently, there have been literatures that investigated the
MEC-assisted mobile blockchain networks, such as [7]–[12].
To study the tradeoff between computing demands and fees,
the authors in [7] formulated the optimization problem of
computing demand strategies of IoT devices from different
MEC servers. On another hand, mobile users offload mining
tasks to a nearby MEC server, and thus can access and utilize
computing services at the edge. Edge computing services
are deployed by edge service providers (ESPs). A two-stage
Stackelberg game pricing scheme [8] and an auction-based
scheme [9] were proposed to maximize the benefits of ESP and
miners, respectively. [10] considered two offloading modes,
namely offloading to a nearby AP or a group of nearby users.
The two-tier computing offloading model has been investigated
in [11], which includes ESPs and cloud computing service
providers. [12] proposed the computing resource allocation
problem for public MEC-assisted mobile blockchain networks
from the perspective of coalition game theory. Notably, these
works do not consider the trustiness of the MEC server in the
blockchain-based edge computing networks. They are based
on an assumption that the MEC server is trusted. Under
this condition, the MEC server may offer selfish users more
computation resources, and the collusive probability between
malicious nodes and the trusted MEC server rises. In addition,
previous works treat proof-of-work (PoW) mining tasks as
general computation demands, and ignored the characteristic
of PoW mining task in mobile networks.
To achieve an effective and fair computation resource alloca-
tion result, in this paper, we consider a new mobile blockchain-
enabled edge computing (MBEC) network, where resource-
constrained users offload computation-intensive PoW mining
tasks to the untrusted MEC server. Particularly, a hash com-
puting ordering (HCO) mechanism for this MBEC network
is proposed to achieve fairer computation services for users.
Different users select nonces for mining blocks independently.
Each user selects several nonces for hash computing. The
nonce hash computing task of an individual user is formulated
as a non-cooperative game. We further prove the existence
of Nash equilibrium (NE) of this non-cooperative game and
design an alternating optimization algorithm to attain optimal
hash computing demand strategies for all users in the MBEC
networks. Numerical results demonstrate the effectiveness of
the HCO mechanism and alternating optimization algorithm.
The remainder of this paper is organized as follows. Section
II introduces the PoW mining process and the MBEC system
model. We present our proposed HCO mechanism in Section
III. In Section IV, we formulate the nonce hash computing
2020 IEEE/CIC International Conference on Communications
in China (ICCC)
617Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:19 UTC from IEEE Xplore.  Restrictions apply. 
task of an individual user as a non-cooperative game and
conduct NE analysis as shown in Section IV-A and Section
IV-B, respectively. Numerical results are presented in Section
V. Finally, we conclude the paper in Section VI.
II. PRELIMINARIES AND SYSTEM MODEL
In this section, we first briefly introduce the PoW mining
process in Bitcoin systems, and then describe the MBEC
system model.
A. PoW Mining Process
The PoW mining process of Bitcoin systems aims to find
an appropriate hash, which is less than a predefined target
difficulty value, by performing SHA256 hash computing op-
erations. Let H (·) denote the hash function, where the input
can be data of any size, and a cryptographic algorithm is
used to generate a short summary with fixed size. X denotes
the information contained in the block header, including the
version, the hash of the previous block, and the Merkle
root, etc, but except the nonce. Nonce is an abbreviation of
number once. In cryptography, nonce is an arbitrary or non-
repetitive random value that is used once. Given an adjustable
difficulty parameter h, the hash of the block header A, which
concatenates X and the nonce, is smaller than a predefined
target difficulty value V (h):
A = H (X||nonce) ≤ V (h) , (1)
where V (h) = 2L−h = 2L
D(h) , L denotes the fixed length of
bits, determining the searching space of the hash function,
i.e., nonce ∈
[
0, 2L − 1
]
, and D(h) is blockchain’s difficulty
value. For a node in the Bitcoin system, the PoW puzzle
described as (1) can be solved by the following steps:
1) The node generates a currency transaction, making up a
transaction list together with all other transactions. This
list is packaged into blocks and a Merkle root hash is
generated by the Merkle tree algorithm [13].
2) Each miner assembles the Merkle root hash and other
related information into their own block header. Totally
80 bytes block header data serves as the input of the PoW
puzzle.
3) Miners constantly change nonces in the block header
and perform once hash computing operation after altering
one nonce. Then the obtained hash is compared with the
predefined target difficulty value of the current blockchain
network as shown in (1).
4) If the obtained hash of the block header is smaller
than the target difficulty value, then the PoW mining
is successful. Otherwise, the nonce is incremented by 1
and the above PoW mining process is repeated until the
correct nonce is found.
B. MBEC System Model
Mobile blockchain networks are constrained because the
PoW mining process requires plenty of computation, storage,
and energy resources. To tackle this problem, we propose a
novel MBEC network, where any resource-limited users can
participate in the PoW-based blockchain systems by offloading
mining tasks to the MEC server. We consider one MEC
server and N mobile users in this MBEC network as shown
in Fig. 1. The set of all mobile users is denoted as N =
{1, 2, ..., N}. Each user selects several nonces independently,
which are offloaded to the MEC server for hash computing
services. The selected nonce sequence for user i is denoted by
mi=
{
m1
i ,m
2
i , ...,m
Mi
i
}
, where Mi = |mi| is the number of
nonces of the sequence and mf
i is the f -th nonce in the nonce
sequence mi for f = 1, 2, ...,Mi.
MEC Server
User 2
User 1
User N
Blockchain
Offloading
Fig. 1. Computation offloading in the MBEC network
Untrusted MEC server: Previous works on the MEC server
in mobile blockchain networks have the assumption that MEC
is a trusted server. This assumption may lead to an unfair
computing resource allocation for mobile users and increase
the possibility of malicious collusion between the MEC server
and selfish users. Consequently, we assume an untrusted MEC
server in this paper. Fair computation resource allocation
mechanism: Conventional mechanisms for mobile users, such
as first-come-first-served and weighted round-robin (WRR)
algorithms, are formulated to provide fairer computation re-
source allocation for general computing tasks. PoW mining
tasks of mobile users in the MBEC networks are different
with general computing tasks. Specifically, users offload PoW
mining tasks to the untrusted MEC server, and each user
is in a competitive relationship with each other to compete
for the transaction accounting power. Therefore, conventional
mechanisms are not applicable here.
Based on the above analysis, we need to redesign a com-
putation resource allocation mechanism for MBEC networks
with untrusted MEC server. We propose an HCO mechanism,
which is suitable for offloading PoW mining tasks to the
untrusted MEC server and provides mobile users with fairer
computing services. Once a user has solved the PoW puz-
zle, the MEC server will stop all mining tasks immediately
and announces the result to all users. Then, a new round
of computation resource allocation will begin. The working
process of offloading PoW mining tasks to the untrusted MEC
2020 IEEE/CIC International Conference on Communications
in China (ICCC)
618Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:19 UTC from IEEE Xplore.  Restrictions apply. 
MEC server
Mobile users
Algorithm 2: 
obtain the optimal nonce 
selection strategies for 
all users
Submit N nonce sequences
Algorithm 1: 
N original nonce sequences 
are mapped into a merged 
nonce sequence
Provide hash computing 
services to the merged 
nonce sequence
Announce the mining result
Fig. 2. Working process of offloading PoW mining tasks to the untrusted MEC server
server in MBEC networks is shown in Fig. 2. Details of
the proposed Algorithm 1 for providing a fair computation
resource allocation and Algorithm 2 for getting optimal nonce
selection strategies will be described in the Section III and
Section IV, respectively.
III. HASH COMPUTING ORDERING MECHANISM
All mobile users decide their own nonce hash comput-
ing demands, i.e., selected nonce sequences, and obtain
{m1,m2, ...,mN}. Then, users submit the nonce sequences
to the untrusted MEC server. Here, we assume that nonce
hash computing requests of N users arrive at the MEC server
in a time slot. We propose an innovative HCO mechanism,
which maps N original nonce sequences of all mobile users
to a merged sequence. As is mentioned above, the submitted
nonces mf
i are ordered for fairer computation resource al-
location. Here, we use another N auxiliary nonce sequences,
denoted as {w1,w2, ...,wN}, to represent the nonces selected
from the original nonce sequences to the merged sequence.
Let Wi = |wi| denote the nonce length of nonce sequence wi
for i = 1, 2, ..., N . In the initial period, the nonce length of
sequence wi is set to 0 for i = 1, 2, ..., N .
The objective of the proposed HCO mechanism is that
for arbitrary positions of the merged sequence, the target
probability of being served by the untrusted MEC server is
proportional to the nonce length for user i. Then the target
probability for user i can be given by
pi =
Mi
MN
, for i = 1, 2, ..., N, (2)
where MN =
∑
i∈N Mi represents the total nonce length
for N original nonce sequences and the target probability
distribution for all users is P = {p1, p2, ..., pN}. Meanwhile,
we have the actual winning probability of being served by the
untrusted MEC server as follows
qi =
Wi
WN
, for i = 1, 2, ..., N, (3)
where WN =
∑
i∈N Wi represents the total nonce length for
N auxiliary nonce sequences and the actual winning proba-
bility distribution for all users is Q = {q1, q2, ..., qN}. If we
randomly select one nonce from N original nonce sequences
into the merged sequence, the actual winning probability mass
Q will have N empirical distributions, which can be expressed
as
Qi =
{
W1
WN + 1
,
W2
WN + 1
, ...,
Wi + 1
WN + 1
, ...,
WN
WN + 1
}
,
(4)
for i = 1, 2, ..., N . The probability distribution P can be
written by
P =
{
M1
MN
,
M2
MN
, ...,
MN
MN
}
, for i = 1, 2, ..., N. (5)
The probability distribution Qi may be different from P .
Here, we use Kullback-Leibler (KL) divergence to measure
the difference between the two probability distributions P and
Qi. We intend to make the empirical probability distribution
Qi continuously approximate the target probability distribution
P in order to obtain a fairer computation resource allocation.
The KL divergence between two probability distributions P
and Qi is expressed as
DKL (Qi ‖P )
=
N∑
i=1
qi log
qi
pi
= log MN
WN+1 −
(
N∑
j=1,j 6=i
(
Wj
WN+1 log
Mj
Wj
)
+
Wi+1
WN+1 log
Mi
Wi+1
)
, for i = 1, 2, ..., N.
(6)
Notably, when we calculate the above KL divergence, we may
encounter the case of 0 log 0. In information theory, we treat
this expression as limx→0x log x = 0. The nonce that has the
minimal KL divergence between P and Qi will be selected:
i∗ = argmin
i
DKL (Qi ‖P ) , for i = 1, 2, ..., N. (7)
According to the nonce selection rule (7), one nonce of the i∗-
th user’s original nonce sequence is selected into the merged
sequence. Then, we repeat the nonce selection rule (7) to select
nonces into the merged sequence. Finally, N original nonce
sequences can be mapped into the long nonce sequence. The
working steps of the proposed HCO mechanism can be found
in Algorithm 1.
With the proposed HCO mechanism, for mobile user i, the
probability of successfully mining a new block approaches the
following target probability
Pm
i =
Mi
MN
, for i = 1, 2, ..., N. (8)
2020 IEEE/CIC International Conference on Communications
in China (ICCC)
619Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:19 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 HCO Mechanism
1: Input: N original nonce sequences {m1, m2, ..., mN}.
2: Initialization: N auxiliary nonce sequences {w1, w2, ...,
wN}, where |wi| = 0 for i = 1, 2, ..., N .
3: repeat
4: for i = 1 to N do
5: Select one nonce randomly from the nonce sequence
mi, calculate Qi by (4).
6: Calculate the KL divergence between two probability
distributions P and Qi by (6).
7: end for
8: Select the nonce that satisfies (7) into the merged
sequence.
9: until all nonces of N original sequences are mapped into
a merged nonce sequence.
We can get this result easily by using reduction to absurdity,
which has been proved in [14]. The HCO mechanism achieves
better fairness of computation service allocation among all
mobile users. For any position in the merged sequence of the
untrusted MEC server, the probability of being served by the
MEC server for each original nonce sequence is proportional
to its nonce length.
IV. NON-COOPERATIVE GAME FORMULATION AND
ANALYSIS
In this section, we formulate the nonce hash computing
demands of an individual user as a non-cooperative game
in the MBEC network. Then, we conduct the NE analysis
and design an alternating optimization algorithm to obtain the
optimal nonce selection strategies.
A. Non-cooperative Game Formulation
In the PoW mining process of blockchain systems, the first
user that solves the PoW puzzle will receive monetary rewards,
including the fixed bonus B and tips from transactions pack-
aged into blocks. Let si denote the transactional size of user
i and the transactional fee rate is defined as r. As a result, we
have the expected reward of user i as below
Fi = (B + rsi)P
m
i , ∀i ∈ N . (9)
Due to only one MEC server in the proposed MBEC systems,
there will be no fork and isolated probabilities between MEC
servers. However, the formula (9) does not describe the
influence of blockchain’s difficulty factor h on the expected
revenue. Even though all users’ nonces are provided with
hash computing services by the MEC server, the block may
not be mined successfully. The nonce hash computing is a
memoryless searching process and the searching probability
is only related to the difficulty value D(h), regardless of the
size of this searching space. For a given difficulty value D(h),
each nonce hash computing is an i.i.d Bernoulli trial with a
successful probability of
PD =
1
D (h)
= 2−h. (10)
Algorithm 2 Alternating Optimization Algorithm of Problem
(13)
1: Input: the data (B, r, si, c, L, h)
2: Initialization: set i = 1 and choose M−1 ∈
[
0, 2L − 1
]
.
3: repeat
4: Fix M−i = (M1,M2, ...,Mi−1,Mi+1, ...,MN ), and
calculate M∗i using (19).
5: i← i+ 1
6: Then update the set M−i =(M1,M2, ...,M
∗
i−1,
Mi+1, ...,MN ).
7: until the optimal nonce vector M∗ = {M∗1 ,M∗2 , ...,M∗N}
is obtained.
Then, the expected revenue of user i is rewritten by
Fi = (B + rsi) 2
−h Mi
MN
, for i = 1, 2, ..., N. (11)
The revenue of user i is obtained by the received rewards
minus the expenses paid to the MEC server. Here, the price
of each nonce hash computing service for the MEC server
is defined as c. Then, the revenue of user i is calculated as
follows
ui (Mi) = (B + rsi) 2
−h Mi
MN
− cMi, ∀i ∈ N . (12)
Mathematically, the optimal nonce selection problem is for-
mulated as
max
Mi
ui (Mi) , ∀i ∈ N . (13)
Then we can transform the nonce selection of an individual
user to a non-cooperative game G =
{
N, (Mi)i∈N , (ui)i∈N
}
,
which is described as:
Players: N mobile users;
Strategies: the nonce length Mi for hash computing is the
strategy of user i;
Utility function: the utility function ui is denoted as the
expected revenue of user i.
B. NE Analysis of the Non-cooperative Game
We consider NE as the solution to the users’ nonce selection
strategies for the game model. In this case, the NE is obtained
by using the best response function, which is the best strategy
of one player given other users’ strategies. The definition of
the best response function is given by Definition 1.
Definition 1: Given a vector of other users’ nonce selection
strategies M−i, the best response function of i-th user’s nonce
selection is defined as follows
Ri (M−i) = argmax
Mi
ui (Mi,M−i) , ∀i ∈ N , (14)
where M−i = (M1,M2, ...,Mi−1,Mi+1, ...,MN ). The vector
M∗ = (· · ·Mi
∗ · · ·)T denotes an NE of this non-cooperative
game on nonce selection strategies as follows
M∗i = Ri
(
M∗−i
)
, ∀i = 1, 2, ..., N, (15)
where M∗−i denotes the vector of best responses for all
players except player i. The variable Mi has the non-negative
2020 IEEE/CIC International Conference on Communications
in China (ICCC)
620Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:19 UTC from IEEE Xplore.  Restrictions apply. 
0 20 40 60 80 100 120 140 160 180 200
Total nonce number M
0.2
0.4
0.6
0.8
1
P
ro
ba
bi
lit
y
User 1, Target
User 1, HCO
User 1, WRR
0 20 40 60 80 100 120 140 160 180 200
Total nonce number M
0
0.2
0.4
0.6
0.8
P
ro
ba
bi
lit
y
User 2, Target
User 2, HCO
User 2, WRR
(a) 0.2M
0 20 40 60 80 100 120 140 160 180 200
Total nonce number M
0.3
0.4
0.5
0.6
0.7
P
ro
ba
bi
lit
y
User 1, Target
User 1, Algorithm 1
User 1, WRR
0 20 40 60 80 100 120 140 160 180 200
Total nonce number M
0.3
0.4
0.5
0.6
0.7
P
ro
ba
bi
lit
y
User 2, Target
User 2, Algorithm 1
User 2, WRR
(b) 0.6M
Fig. 3. Comparison of the target and the actual probability distributions obtained by the HCO and WRR mechanisms.
integer constraint, making ui a mixed integer programming
function. Here, we relax the integer constraint, and solve the
optimal nonce selection strategies directly, and get the integer
solution by rounding down to the nearest integer. Next, we
analyze the existence of NE in the non-cooperative game
G =
{
N, (Mi)i∈N , (ui)i∈N
}
.
Theorem 1: The non-cooperative game G has at least one
pure-strategy NE, demonstrating the existence of NE.
Proof: Based on the above integer restriction slackness,
the nonce selection strategy set Mi is compact and convex. We
treat the utility function ui(Mi) as a continuous function in
the profile of strategies M, where M = {M1,M2, ...,MN}.
Then we can get the first order and second order derivatives
of (12) with Mi, which can be expressed as
∂ui (M)
∂Mi
= (B + rsi) 2
−h
∑
M−i
(Mi +
∑
M−i)
2 − c,∀i ∈ N ,
(16)
and
∂ui
2 (M)
∂Mi
2 = (B + rsi) 2
−h −2
∑
M−i
(Mi +
∑
M−i)
3 < 0,∀i ∈ N ,
(17)
where −2
∑
M−i
(Mi+
∑
M−i)
3 < 0. Hence we have proved that ui
is strictly concave with respect to Mi. Accordingly, the NE
exists (see [15]-Theorem 3.2) in the non-cooperative game
G =
{
N, (Mi)i∈N , (ui)i∈N
}
. The proof is completed.
Based on Theorem 1, we can achieve NE by taking
∂ui(M)
∂Mi
= 0 as follows
∂ui (M)
∂Mi
= (B + rsi) 2
−h
∑
M−i
(Mi +
∑
M−i)
2 − c = 0. (18)
Then, we get the optimal nonce selection strategy for user i:
M∗i =
⌊√∑
M−i (B + rsi)
c · 2h
−
∑
M−i
⌋
, for i = 1, 2, ..., N.
(19)
In order to obtain M∗i , we need to know other users’ nonce
selection strategies. It is difficult to get an analytical solution
from the known information. Therefore, we design an alternat-
ing optimization algorithm to achieve the optimal numerical
solution of all users’ nonce selection strategies in the MBEC
networks. The proposed alternating optimization algorithm of
problem (13) to obtain NE of the non-cooperative game is
summarized in Algorithm 2.
V. NUMERICAL RESULTS
In this section, we first evaluate the HCO mechanism and
compare it with the traditional WRR mechanism [16]. Then,
we present the convergence performance of the proposed
alternating optimization algorithm. Here, we set B = 104,
r = 2, c = 0.001, and h = 12.
In order to verify the effectiveness of the proposed HCO
mechanism in the MBEC networks, we compare the actual
probability distribution with the target one. Without loss of
generality, we assume only two users in the MBEC networks.
The submitted nonce length has a fixed proportion as M1 :
M2 = 4 : 6, i.e., the target probability distribution is P =
(0.4, 0.6), while the total nonce number M = M1 + M2 is
flexible. We compare the HCO mechanism with WRR, where
weights of user 1 and user 2 are 0.4 and 0.6, respectively.
Fig. 3 shows the comparison results of the target and
actual probability distributions obtained by HCO and WRR
mechanisms. Here, we take the first 0.2M and 0.6M nonces
of the merged sequence as examples and provide their results
in Fig. 3(a) and Fig. 3(b), respectively. By using the HCO
mechanism, there is a gap between the actual probability
distribution and the target probability distribution when M
is small. With the increment of M , the actual probability
distribution approaches or even equals the target probability
distribution for both users as shown in Fig. 3(a) and Fig. 3(b).
Due to the large amount of nonce hash computations in the
PoW-based blockchain networks, the shortcomings of HCO
2020 IEEE/CIC International Conference on Communications
in China (ICCC)
621Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:19 UTC from IEEE Xplore.  Restrictions apply. 
0 5 10 15 20
Number of iterations
530
540
550
560
570
580
590
600
610
620
630
N
on
ce
 le
ng
th
User 1 with 100 TX by Algorithm 2
User 2 with 200 TX by Algorithm 2
User 3 with 300 TX by Algorithm 2
Fig. 4. Nonce length for three users over iterations
mechanism can be ignored when M is small. On the another
hand, the fairness of the WRR mechanism is significantly
worse than that of the proposed HCO mechanism. The actual
probability of the WRR mechanism becomes better when
using 0.6M nonces in Fig. 3(b) than 0.2M nonces in Fig. 3(a)
with the increase of M . However, the convergence of the
WRR mechanism is still hard to achieve due to limitations of
the WRR mechanism. Undoubtedly, the HCO mechanism in
Algorithm 1 can provide much fairer hash computing services
for all users than the WRR mechanism.
Next, we present the convergence performance of the
proposed alternating optimization algorithm of users’ nonce
selection strategies. Here, we consider a group of 3 users.
The corresponding block sizes are s1 = 100, s2 = 200,
and s3 = 300, respectively. Fig. 4 depicts the nonce length
of an individual user versus the number of iterations. As
shown in Fig. 4, nonce lengths of three users are all unstable
dramatically in the first 4 iterations and then reach a stable
status when the iteration is larger than 4. This illustrates that
our proposed alternating optimization algorithm can converge
quickly. Besides, we can see that the optimal nonce lengths
for user 2 and user 3 are larger than that of user 1. With
the increment of block sizes, user 2 and user 3 have greater
incentives than user 1 to select more nonces. Therefore, the ex-
pected nonce selection strategies for all users can be obtained
by using the proposed alternating optimization algorithm in
Algorithm 2.
VI. CONCLUSION
In this paper, we considered a new MBEC network, where
plenty of PoW mining tasks can be offloaded to an untrusted
MEC server. In this framework, we proposed the HCO mech-
anism to make the untrusted MEC server provide a fairer
computation resource allocation for all mobile users. Then, we
formulated the nonce selection strategy of an individual user
as a non-cooperative game. The existence of NE of this game
was also proved. To guarantee the optimal nonce selection
strategies for all mobile users, we designed an alternating
optimization algorithm. Numerical results indicate that our
proposed HCO mechanism can allocate much fairer computa-
tion resources for all users than the WRR mechanism. Mobile
users can achieve optimal nonce selection strategies to hold
maximum individual benefits, and the alternating optimization
algorithm has a fast convergence speed and good stability.
VII. ACKNOWLEDGEMENT
This work was supported in part by the National Key
Research and Development Program 2018YFA0701602, the
National Natural Science Foundation of China (NSFC) for
Distinguished Young Scholars of China under Grant 61625106
and in part by the NSFC under Grant 61941104.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Oct.
2008.
[2] P. Mach and Z. Becvar, “Mobile edge computing: A survey on architec-
ture and computation offloading,” IEEE Commun. Surveys Tuts., vol. 19,
no. 3, pp. 1628–1656, Mar. 2017.
[3] Y. Mao, C. You, J. Zhang, et al., “A survey on mobile edge computing:
The communication perspective,” IEEE Commun. Surveys Tuts., vol. 19,
no. 4, pp. 2322–2358, Aug. 2017.
[4] W. Yu, et al., “A survey on the edge computing for the Internet of
things,” IEEE Access, vol. 6, pp. 6900–6919, Nov. 2018.
[5] W. Wen, Y. Cui, F.-C. Zheng, S. Jin, et al., “Enhancing performance
of random caching in large-scale heterogeneous wireless networks with
random discontinuous transmission,” IEEE Trans. Commun., vol. 66,
no. 12, pp. 6287–6303, Aug. 2018.
[6] W. Wen, Y. Cui, F.-C. Zheng, S. Jin, and Y. Jiang, “Random caching
based cooperative transmission in heterogeneous wireless networks,”
IEEE Trans. Commun., vol. 66, no. 7, pp. 2809–2825, Feb. 2018.
[7] Y. Wu, et al., “Optimal computational power allocation in multi-access
mobile edge computing for blockchain,” Sensors, vol. 18, no. 10, p.
3472, Oct. 2018.
[8] Z. Xiong, S. Feng, W. Wang, et al., “Cloud/fog computing resource
management and pricing for blockchain networks,” IEEE Internet Things
J., vol. 6, no. 3, pp. 4585–4600, Jun. 2019.
[9] Y. Jiao, P. Wang, D. Niyato, and K. Suankaewmanee, “Auction mecha-
nisms in cloud/fog computing resource allocation for public blockchain
networks,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 9, pp. 1975–
1989, Sep. 2019.
[10] M. Liu, F. R. Yu, Y. Teng, et al., “Computation offloading and content
caching in wireless blockchain networks with mobile edge computing,”
IEEE Trans. Veh. Technol., vol. 67, no. 11, pp. 11 008–11 021, Aug.
2018.
[11] S. Jiang, X. Li, and J. Wu, “Hierarchical edge-cloud computing for
mobile blockchain mining game,” in 2019 IEEE 39th Int. Conf. on
Distrib. Comp. Syst. (ICDCS), Jul. 2019, pp. 1327–1336.
[12] N. Zhao, H. Wu, and Y. Chen, “Coalition game-based computation
resource allocation for wireless blockchain networks,” IEEE Internet
Things J., vol. 6, no. 5, pp. 8507–8518, Oct. 2019.
[13] W. Wang, D. T. Hoang, P. Hu, Z. Xiong, D. Niyato, P. Wang, Y. Wen,
and D. I. Kim, “A survey on consensus mechanisms and mining strategy
management in blockchain networks,” IEEE Access, vol. 7, pp. 22 328–
22 370, Jan. 2019.
[14] Y. Zuo, S. Jin, and S. Zhang, “Computation offloading in the untrusted
MEC-aided mobile blockchain IoT system,” arXiv:1911.08255, 2019.
[15] H. Zhu, D. Niyato, W. Saad, et al., Game Theory in Wireless and Com-
munication Networks: Theory, Models, and Applications. Cambridge,
UK: Cambridge university press, 2012.
[16] L. B. Le, E. Hossain, and A. S. Alfa, “Service differentiation in multirate
wireless networks with weighted round-robin scheduling and ARQ-
based error control,” IEEE Trans. Commun., vol. 54, no. 2, pp. 208–215,
Feb. 2006.
2020 IEEE/CIC International Conference on Communications
in China (ICCC)
622Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:19 UTC from IEEE Xplore.  Restrictions apply.