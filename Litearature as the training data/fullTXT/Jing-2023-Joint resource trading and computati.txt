Joint resource trading and computation offloading in blockchain enhanced D2D-assisted mobile edge computing
Joint resource trading and computation offloading in blockchain
enhanced D2D-assisted mobile edge computing
Weipeng Jing1 • Xinyu Fu1 • Peng Liu1 • HouBing Song2
Received: 16 December 2021 / Revised: 14 May 2022 / Accepted: 17 June 2022 / Published online: 22 August 2022
� The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature 2022
Abstract
D2D-assisted mobile edge computing has attracted much attention due to its great potential to reduce the pressure on edge
servers and improve the utilization of mobile devices. However, users are usually reluctant to share resources with
neighbor devices, considering the limitations on resources and energy, and the concerns about security and privacy. In this
paper, we firstly propose a blockchain-based resource-sharing system to solve the trust issues between unfamiliar par-
ticipants. Under this system, we jointly consider resource trading and computation offloading to reduce energy con-
sumption on the premise of maximizing the utilities of both providers and requesters. Resource trading is modeled as
Stackelberg Game, and computation offloading is formalized as a mixed optimization problem. Finally, we propose the
corresponding algorithms to efficiently get the optimal trading and offloading strategy. The simulation results show the
effectiveness of incentivizing more participants.
Keywords Blockchain � D2D � MEC � Resource trading � Computation offloading
1 Introduction
Recent years have witnessed the explosive growth of
mobile devices, followed by the ever-enriching mobile
applications [1–3]. Computation-intensive applications
such as interactive gaming, face recognition, and aug-
mented reality need to be run on mobile devices with
limited computing capacity and constrained battery power,
which brings great challenges. Mobile Edge Computing
(MEC) has gradually become an indispensable paradigm as
a new solution. By deploying servers at the edge of the
network, MEC can not only provide resources for mobile
devices but also overcome the shortcomings of latency and
security of Mobile Cloud Computing (MCC) [4–6]. With
the help of Device-to-Device (D2D) communication,
mobile devices could even offload their tasks to neighbors
with idle resources [7, 8]. D2D-assisted MEC has the
potential to reduce the pressure on edge servers and access
networks, improve the utilization and well adapt to the
mobility of mobile devices, which has attracted much
attention [9].
Despite the great potential, D2D-assisted MEC faces
several tricky challenges. Above all, users may be reluctant
to share resources with neighbor devices for free, espe-
cially considering their limitations on resources and
energy, and their concerns about security. An effective
incentive mechanism first needs a sharing system to ensure
device security and user privacy. On this basis, an
equitable trading strategy is needed to maximize the utili-
ties of both providers and requesters, considering that the
interest damage to either part may influence the incentive
effect. Besides, most existing research ignored that com-
putation offloading is also an indispensable process for
incentive [10]. Users will be willing to participate in
& Peng Liu
liupeng@nefu.edu.cn
Weipeng Jing
jwp@nefu.edu.cn
Xinyu Fu
fuxy@nefu.edu.cn
HouBing Song
Houbing.Song@erau.edu
1 College of Information and Computer Engineering, Northeast
Forestry University, Harbin 150040, China
2 Department of Electrical, Computer, Software and Systems
Engineering, Embry-Riddle Aeronautical University,
Daytona Beach, FL 32114, USA
123
Cluster Computing (2023) 26:635–649
https://doi.org/10.1007/s10586-022-03651-x(0123456789().,-volV)(0123456789().,-volV)
http://orcid.org/0000-0003-4752-7021
http://crossmark.crossref.org/dialog/?doi=10.1007/s10586-022-03651-x&amp;domain=pdf
https://doi.org/10.1007/s10586-022-03651-x
resource sharing if they can complete tasks with lower
energy consumption by the traded resources.
As a typical Peer-to-Peer (P2P) network, D2D-assisted
MEC has no central authority to enforce security policies
and lack of trust between unfamiliar participants, which has
security and privacy implications. Fortunately, blockchain
has been envisioned as a promising approach to such
issues, which has been widely used in several domains to
build trust and enforce security policies by its entirely
decentralized, transparent, tamper-proof character [11–13].
Hence, we introduce blockchain technology to build a
secure and reliable resource-sharing system. Under this
system, we jointly study the strategy of resource trading
and computation offloading, and program them into the
smart contract which can not only be triggered automati-
cally on the blockchain but ensures traceability and irre-
versibility [14, 15].
Unlike other resource-sharing research that focused on
the multi-to-one model in MEC, D2D-assisted MEC is
more suitable for the one-to-multi model because idle
resources of one mobile device are hard to complete the
tasks from multiple mobile devices. Hence, we model the
resource trading process as a one-leader and multi-fol-
lowers Stackelberg Game to maximize the utilities of both
requesters and providers. Moreover, the computation
offloading process is formalized into a mixed optimization
problem that jointly optimizes the local CPU frequency,
transmission time, and transmission bandwidth to minimize
energy consumption. By joint consideration of resource
trading and computation offloading, the proposed strategy
is able to motivate more users to participate in resource
sharing.
The main contributions of this paper are as follows:
– We use blockchain to build a decentralized resource
sharing system in D2D-assisted MEC, where mobile
devices could be used to share resources without any
concerns about security and privacy.
– We design an incentive mechanism under a blockchain-
based resource sharing system that jointly considers
resource trading and computation offloading processes
which could motivate more users to participate in
resource sharing.
– We model resource trading as a one-leader and multi-
follower Stackelberg game to maximize the utility of
both CRR and CPRs. We formalize computation
offloading into a mixed optimization problem, and a
KKT-based algorithm is proposed to get the optimal
strategy efficiently and accurately.
– Numerical simulations are conducted to evaluate the
performance of the proposed algorithm for the resource
sharing problem. Simulation results show that our work
has the potential to motivate more participants.
The rest of this article is organized as follows: Sect. 2
reviews related work of resource trading and computation
offloading. Section 3 introduces the blockchain-based
resource sharing system; Sect. 4 explains the system
model, including the resource trading model and compu-
tation offloading model; Sect. 5 introduces the simulation
experiment and shows the analysis of the experimental
results; Sect. 6 concludes this paper.
2 Related work
So far, numerous studies have been carried out on resource
sharing problems in the context of edge computing. These
works can be classified into the following three categories.
2.1 Blockchain framework for resource sharing
Many existing works introduce blockchain technology to
solve the security and privacy issues among untrusted users
in distributed and peer-to-peer networks [16]. The authors
in [17–20] studied multi-user resource trading in the
blockchain. Liu proposed a blockchain-based MEC net-
work architecture in [17] to handle the large-scale video
requests from distinct user devices in a decentralized and
secure manner. The author in [18] proposed a blockchain-
based energy trading scheme to supervise and manage the
energy trading process and designed a timed commitments-
based mechanism to guarantee verifiable fairness during
energy trading. The author in [19] set up an operator-as-
sisted data offloading platform powered by blockchain to
implement a rating system for sellers and to make reliable
transactions for payments. In [20], Chen presented a secure
user offloading mechanism in heterogeneous wireless net-
works. Considering that the conventional auction-based
trading participants may collude or take selfish actions, the
authors employed the Ethereum framework for trustless,
secure, and distributed auctioning.
2.2 Blockchain-based incentive mechanism
In [21], Li established a pure P2P computing resource
trading system in a blockchain network to achieve secure
and trusted computing resource trading. The authors
introduced a broker to manage the trading market and then,
proposed an iterative double-sided auction-based algorithm
for computing resource trading. The author in [22] pro-
posed a blockchain-based framework for MEC video
streaming and designed an incentive mechanism to facili-
tate collaboration among content creators, video transco-
ders, and consumers. The authors in [23] addressed the
joint computation offloading and coin-loaning problem.
They introduced the banks to provide loan services to
636 Cluster Computing (2023) 26:635–649
123
mobile devices and minimized the cost of all mobile
devices based on a game-theory-based method. The authors
in [24] proposed a secure, decentralized Internet of Vehi-
cles(IoV) data-trading system by exploiting blockchain
technology. They designed an efficient debit-credit mech-
anism to support efficient data-trading in IoV and formu-
lated a two-stage Stackelberg game to maximize the profits
of borrower vehicles and lender vehicles jointly.
2.3 Task offloading strategy in MEC
Computation offloading is a technique that has the potential to
improve application performance inMEC [25]. In the work of
[26–28], different performance optimization schemes were
designed to minimize energy or time consumption by opti-
mizing computing and offloading strategies. The authors of
[26] have discussed a game-theoretic model in a blockchain-
based peer-to-peer network of mobile users to compute tasks
of mobile devices with low computation power in a cost and
time-optimal way. In [27], the authors designed a secure data
offloading strategy based on the hashgraph consensus mech-
anism and implemented a game-theoretic bargainingmodel to
ensure task computation in a cost-optimal and time-efficient
manner. In [28], Min investigated multiuser partial compu-
tation offloading in a quasi-static scenario and proposed a
dynamic matching algorithm to minimize terminal energy
consumption. The authors in [29, 30] studied the problem of
maximizing energy utility. The author in [29] proposed aD2D
offloading architecture to offloadwireless traffic and tasks and
introduced offloading and balancing techniques to increase
the total energy efficiency. In [30], a resource allocation
strategy inaD2D-assisted edgecomputing systemwithhybrid
energy harvesting has been proposed to maximize energy
efficiency. Quantum-behaved particle swarm optimization
(QPSO) algorithmwas used to obtain the suboptimal solution.
However, most studies have not considered that one
device does not have enough idle resources to service
multiple devices in a normal D2D scenario, and how to
reduce the energy consumption while guaranteeing the
high utility of both the CRR and CRPs. Therefore, we
proposed a blockchain-based resource sharing model in
which multiple providers provide computing services to
one requester. The study devised the resource trading and
computation offloading algorithms which achieved the
optimal results jointly in the D2D-assisted MEC network.
3 Blockchain-based computing resource
sharing system
This section explains how resource trading and com-
putation offloading work on the blockchain. We use
resource coins to stimulate devices to participate in
resource tradings. CRPs can earn resource coins by selling
their idle resources, and CRRs pay resource coins to pur-
chase computing resources from CRPs. As shown in Fig. 1,
we consider the resource sharing system consisting of edge
servers, mobile devices, and blockchain. The MEC servers
are deployed at the edge of the D2D-assisted MEC network
and have sufficient storage resources to handle the massive
data records in resource sharing. The trusted local base
stations(LBS) provide the necessary network assistance to
trigger the execution of smart contracts. The resource
trading and computation offloading mechanism can be
encoded as a series of smart contracts, which are placed
into the blockchain. The smart contract is automatically
triggered to obtain an optimal resource-sharing strategy.
The following are more details about key operations of
blockchain-enabled resource sharing.
(1) System initialization: In order to ensure the authen-
ticity and integrity of digital messages, the block-
chain system needs to be initialized by the
cryptography technique. Each user equipment in
the D2D-assisted MEC network becomes a legiti-
mate participant after registration on the trusted LBS.
LBS gives each legitimate participant an identity ID
(ID), a public key (PLk), a private key (PVk), a
certificate (Cert) and a wallet address (WA).
(2) Trigger smart contract for resource trading and compu-
tation offloading: Users who lack computing resources
sendLBS requests to purchase resources.CRRi’s request
informationReqi contains task details ðtaskiÞ, public key
ðPLkiÞ, certificate ðCertiÞ, timestamp for request gener-
ation ðtsiÞ, where ðtaskiÞ includes the number of
resources required by the computing task ðtaskRiÞ, local
idle resources ðlocRiÞ, the geographic location of CRRi
ðsiteiÞ and the maximum acceptable resource price ð�piÞ.
After receivingReqi,CRPj sends equipment information
Repi to LBS. Repi contains service information
ðservicejÞ, public key ðPLkjÞ, certificate ðCertjÞ, and
time stamp generated in response ðtsjÞ, where servicej
includes the number of free resources of CRPj
ðnumberjÞ, the distance between CRPj and CRRi
ðdistancejÞ. After validating certification, LBS writes
the received information into the smart contract. This
smart contract will be automatically implemented by
using the proposed trading model in Sect. 4.1 and the
computation offloading model in Sect. 4.2.
(3) Payment with resource coins: According to the
resource price derived from the resource trading
smart contract, the CRRs use their private key to
unlock some of their Unspent Transaction Output
(UTXO), and sign the latest transactions that transfer
money to the corresponding CRPS’ address. The
Cluster Computing (2023) 26:635–649 637
123
resource coin can be transferred from the wallet
address of the CRRs to CRPs [9].
(4) Verification and broadcast trading records: After
completing the resource tradings and computation
offloading, CRRs obtain the resource trading records.
Then they encrypt these whole transactions with
signatures and broadcast them to all users.
(5) Perform the proposed proof of supply score consensus
process: Each user has a corresponding supply score(sj),
and the supply score increases as resources supply
increases. We set sj ¼ s0j þ aj, where s
0
j and aj represent
the existing supply score and new resources supply. The
userwith the highest supply score constructs a newblock
composed of all transactions, including resource trans-
action records and the updated supply score of the CRPs.
The new block is broadcast to other user devices. These
user devices audit theblockdata andbroadcast their audit
results with their signatures to each other. Meanwhile,
each user device also needs to verify whether the
building block device has the highest supply score and
send the verification result to other user devices. If all the
user devices agree on the block data, the new data block
will be placed into the blockchain based on the
timestamp. Finally, the supply score of the building
block device halves(sj ¼ 1=2s0j).
4 System model for D2D computing
resource trading and computation
offloading
As shown in Fig. 2, the proposed blockchain-based
computing resource sharing system contains two core
system submodels: the resource trading model and the
computation offloading model. In this section, it is con-
sidered that n CRPs provide computing resources to one
CRR.
4.1 Resource trading model
To construct an efficient resource trading scheme, we
model the interaction between CRPs S and the CRR B as a
Stackelberg game, which consists of two types of partici-
pants: leader and followers. In the proposed D2D-assisted
MEC, the B acts as the leader to determine resource allo-
cation, and the S act as the followers to set the price.
4.1.1 Problem formulation for resource allocation
Let S ¼ fS1; :::; Sj; :::; Sng and B denote the set of CRPs
and the CRR in resource sharing. The demands of B from
different CRPs are defined as a vector
a ¼ fa1; :::; aj; :::; ang. UbðaÞ is defined as the utility of
completing tasks of B, which consists of the local utility
and offloading utility. Referring to [21] and [31], here the
utility function of B is as follows.
UbðaÞ ¼ lnð1þ dmax �
XN
j¼1
ajÞ þ
XN
j¼1
½x lnðaj � aj � zj þ 1Þ
� ajpj�;
ð1Þ
where dmax denotes the number of resources required to
complete the tasks. aj indicates the number of computing
resources purchased from the CRP Sj. Considering that the
buying willingness increases with the increasing demand,
the willingness of the CRR B is given by
Fig. 1 Blockchain-based computing resource sharing system
638 Cluster Computing (2023) 26:635–649
123
x ¼ 1
1� dmin
dmax
; ð2Þ
where dmin represents the minimum number of resources
that buyer B needs to buy. zj is the distance factor, which is
proportional to the distance between B and the CRP Sj. pj
denotes the resource pricing proposed by Sj. Therefore, to
maximize the utility of B, the resource allocation problem
can be expressed as P1:
P1 : max
a
UbðaÞ;
s:t: C1 : 0� aj �Rj;
C2 : dmin �
XN
j¼1
aj � dmax;
ð3Þ
where C1 ensures the resource demand from the CRP Sj
does not exceed the idle resource of Sj, and cannot be
negative. Constraint C2 makes sure that the total number of
purchased resources is sufficient and not excessive.
4.1.2 Problem formulation for resource pricing
The CRP Sj sets resource pricing to minimize utility. We
consider that the utility function of Sj consists of two parts,
the utility generated by self-used resources and selling
resources, where the self-used resources are the spare
resources left after selling. The utility generated by selling
is related to resource price, service cost, and competition
with other providers. Let Cj be the cost of the CRP Sj,
which is given as
Cj ¼ n1a
2
j þ n2aj; ð4Þ
where n1 [ 0, n2 [ 0 are cost factors [21].
There is competition among providers. Providers who
bid less are more competitive. The competitiveness coef-
ficient of the CRP Sj is expressed as
kj ¼
�p� pj
PN
k¼1
�p� pk
; ð5Þ
where �p[ 0 is the maximum price CRPs can propose [32].
Therefore, we propose the utility function of the CRP Sj
as follows
UsðpjÞ ¼ ln½1þ ðRj � ajÞ� þ kjðajpj � CjÞ; ð6Þ
where Rj is the idle resources of the CRP Sj. aj indicates the
resource demand from Sj. pj means the resource price
quoted by Sj. To maximize the utility of Sj, we can for-
mulate the resource pricing problem as P2:
P2 : max
pj
UsðpjÞ;
s:t: C3 : 0� pj � �p;
C4 : ajpj � ðn1a2j þ n2ajÞ� 0;
ð7Þ
Fig. 2 D2D computing resource
trading and computation
offloading
Cluster Computing (2023) 26:635–649 639
123
where the constraint C3 limits the value range of pj. C4
aims to enable Sj to obtain positive utility in resource
trading.
4.1.3 Stackelberg game in resource trading
The Stackelberg game has been widely adopted to capture
the sequential interactions among strategic agents [32]. A
game of resource allocation and pricing exists between the
CRR B and CRPs S. We model it as a Stackelberg game. In
the Stackelberg game, the CRR as the leader first
announces the different resource demands from different
CRPs. CRPs as followers, follow this announcement by
announcing the price they set. Both the leader and fol-
lowers constantly adjust their strategies for the sake of
more utility. The CRR adjusts the resource allocation
strategy to obtain the maximum utility by solving P1 and
CRPs adjust their pricing strategies by solving problem P2.
Game Analysis: We have already formulated the math-
ematical model of the two sides in the Stackelberg game.
Specifically, the goal of the Stackelberg game is to find the
Nash equilibrium. The Nash equilibrium is the optimal
result of the game, where no participant has the motivation
to deviate from its strategy after considering the opponent’s
choice [33]. In our problem, the Nash equilibrium of the
proposed Stackelberg game is defined as follows.
Let a� and p� be the optimal resource allocation and the
optimal pricing, respectively. Then, when ða�; p�Þ satisfies
Ubða�jp�Þ�Ubðajp�Þ,
Usðp�j ja�j Þ�Usðpjja�j Þ; a�j 2 a�; p�j 2 p�;
aj 2 a; pj 2 p; j 2 f1; 2; :::; ng;
then ða�; p�Þ is the Nash equilibrium point.
To verify the uniqueness and existence of the Nash
equilibrium in our Stackelberg game, we take first and
second order derivatives of the Sj’s utility function with
respect to p. Let po ¼
PN
k 6¼j �p� pk. The derivatives are
given by:
oUsðpjÞ
opj
¼ �po
ðpo þ �p� pjÞ2
� ðajpj � CjÞ þ aj
� 1� po
po þ �p� pj
� �
ð8Þ
o2UsðpjÞ
op2j
¼ �2ajpo
ðpo þ �p� pjÞ2
þ�2poðajpj � CjÞ
ðpo þ �p� pjÞ3
: ð9Þ
Then according to constraints C3 and C4, we have
o2UsðpjÞ
op2j
� 0. When
oUsðpjÞ
opj
¼ 0, the optimal price of Sj is
given by:
p�j ¼ po þ �p�
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
p2o þ po �pþ n2po � n1poaj
q
: ð10Þ
Then we define bo ¼ p2o þ po �pþ n2po and put Eq. (10) into
(1). The second-order derivative of the function (1) with
respect to aj is obtained as
o2UbðaÞ
oa2j
¼ �1
ð1þ dmax �
PN
j¼1
ajÞ2
þ �xð1� zjÞ2
ðaj � aj � zj þ 1Þ2
þ �n1poffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
bo � n1poaj
p þ �n21p
2
oaj
4
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
ðbo � n1poajÞ3
q � 0
ð11Þ
Therefore, UbðaÞ and UsðpjÞ are strictly concave, and Nash
equilibrium exists in this Stackelberg game.
4.1.4 Resource trading algorithm based on game theory
It is assumed that n CRPs are participating in the trading.
The competitiveness coefficient kj and resource supplied of
each CRP aj are set to 1/n and dmax=n. In the first round of the
game, CRPs solve problem P2 according to the initial
fajg and fkjg. Then get the pricing strategy p ¼
Algorithm 1 Resource Trading Algorithm Based on Game Theory
Require: dmax, dmin, n1, n2, z = {z1, ..., zj ...zn}, n.
Ensure: Optimal resource allocation strategy a and pricing strategy p.
1: Initialization: aj = dmax/n, kj = 1/n, j ∈ {1, 2, ..., n}, i = 1.
2: The CRP Sj solves P2 according to aj . Obtain the latest pricing set pnew
and utility set us
i
3: repeat
4: i=i+1
5: Solve P1 based on pnew to obtain a new resource allocation set anew
and utility ub
i .
6: Update kj and solve P2 based on anew. Update pnew and get us
i .
7: until ub
i = ub
i−1 and us
i = us
i−1
8: return anew, pnew
640 Cluster Computing (2023) 26:635–649
123
fp1; p2; :::; png and theCRPs’ utility set us ¼ fus1; us2; :::; usng.
In the next rounds, the CRR uses the latest pricing strategy to
solve the problem P1 to obtain a new resource allocation
strategy a and utility ub. Then, each CRP updates its com-
petitiveness coefficient kj based on the pricing strategy in the
previous round and uses the latest kj and resource demand aj
to solve P2 to get new pricing. The iteration ends when
CRR’s utility and each CRP’s utility stop changing. Finally,
we obtain a resource trading strategy that meets the utility of
both CRR and CRPs.
4.2 Computation offloading model
After obtaining the resource trading strategy, the resource
allocation information is written into the smart contract of
computation offloading. The smart contract is triggered
automatically to minimize the energy for completing tasks
of the CRR B.
4.2.1 Problem formulation for energy-efficient
computation offloading
The energy consumption can be divided into two parts:
computation energy and offloading energy, and the model
is presented as follows:
Computation energy consumption model: We model the
computation energy consumption as P ¼ jf 3, where f and
j are a coefficient depending on chip architecture and
computational speed measured by the number of CPU
cycles per second. Note that f can be flexibly adjusted via
DVFS technology to satisfy users’ demands [33]. When the
computation resource consumed by the task is a, the
computational time is tcom ¼ a=f , the corresponding energy
consumption is Ecom ¼ ajf 2. Therefore, the local compu-
tation energy consumption of the CRR B is given by
Ereq ¼ ðdmax �
XN
j¼1
ajÞjf 2l ; ð12Þ
where fl denotes B’s CPU frequency. dmax is the number of
computing resources required to complete tasks. aj denotes
the computing resource supplies of Sj derived from the
proposed trading model.
In addition, the total computation energy consumption
of CRPs S is expressed as
Epro ¼
XN
j¼1
ajjf
2
j ; ð13Þ
where fj denotes Sj’s CPU frequency.
Offloading energy consumption model: Let cj denote the
number of CPU cycles required for computing 1-bit data on
the CRP Sj. The quantity of data to be processed in Sj is
aj=cj. Then the transmission rate can be expressed as
rj ¼
aj
cjtj
; ð14Þ
where tj is the time allocated to the CRP Sj for offloading.
Let hj denote the channel gain and Pj denote the trans-
mission power. Then the achievable rate is denoted as
rj ¼ gjB log2ð1þ
Pjh
2
j
r
Þ; ð15Þ
where B and r are the bandwidth and the variance of
complex white Gaussian channel noise. gj indicates the
ratio of bandwidth allocated for offloading tasks to Sj. Let
kj ¼ 1=gj. Then according to (14) and (15), we derive
Pj ¼
ð2
ajkj
cjBtj � 1Þr
h2j
: ð16Þ
Define a function f ðxÞ ¼ rð2
ajx
cjB � 1Þ. The energy con-
sumption for offloading aj=cj-bit data to Sj is denoted as
Ejðkj; tjÞ ¼ Pjtj ¼
tj
h2j
f ðkj
tj
Þ: ð17Þ
Therefore, the total energy consumption of offloading can
be expressed as
Eoff ¼
XN
j¼1
tj
h2j
f ðkj
tj
Þ: ð18Þ
In summary, the energy-efficient computation offloading
problem with latency, bandwidth, transmission power, and
CPU frequency constraints can be stated as
P3 : min
fl;k;t
Eðfl; k; tÞ ¼ Ereq þ Epro þ Eoff
s:t: C5 : 0\fl � f maxl ;
C6 : tloc � T ;
C7 :
XN
j¼1
1
kj
� 1;
C8 : kj � 1;
C9 : tj � 0;
C10 : tj þ
aj
fj
� T;
C11 : 0�Pj �Pmax
j ;
ð19Þ
where f maxl denotes maximum CPU frequency of the CRR
B. tloc and T are local computing time and maximum
computational delay. k ¼ fk1; :::; kj; :::; kng donates band-
width allocation set. t ¼ ft1; :::tj; :::; tng is the time
Cluster Computing (2023) 26:635–649 641
123
allocation set. Pmax
j refers to the maximum transmission
power of the CRP Sj. Constraint C5 limits the range of
local CPU frequency. C6 represents latency requirements.
C7 and C8 state that all allocated bandwidth to CRPs can
not exceed B’s available bandwidth. C9 represents the non-
negative feature of the allocated offloading time. C10
indicates that the sum of Sj’s offloading time and compu-
tation time cannot exceed the maximum delay. C11 is the
peak and non-negative transmission power constraint
imposed by Sj.
4.2.2 Energy-efficient computation offloading scheme
The energy-efficient computation offloading problem can
be solved in two parts since the local computation and
offloading to other devices are executed synchronously.
The first part minimizes the local computing energy
consumption by adjusting the calculation frequency of B.
The local computing energy minimization problem is for-
mulated as follows:
P4 : min
fl
EreqðflÞ;
s:t: C5 : 0\fl � f maxl ;
C6 : tloc � T ;
tloc ¼
dmax �
PN
j¼1
aj
fl
:
EreqðflÞ is a monotonically increasing function in ð0; f maxl �.
Therefore, when fl takes the minimum value, the local
computational energy consumption is the minimum.
Because fl is inversely proportional to tloc, when tloc takes
the maximum value T, fl takes the minimum value, and the
local calculation consumes the least energy. The optimal
local computation frequency is given by:
fl ¼
dmax �
PN
j¼1
aj
T
: ð20Þ
In the second part, the offloading bandwidth and offloading
time are optimally allocated to minimize the offloading
energy consumption. The offloading energy minimization
problem is formulated as:
P5 : min
k;t
Eoff ðk; tÞ ¼
XN
j¼1
tj
h2
f ðkj
tj
Þ;
s:t: C7 :
XN
j¼1
1
kj
� 1;
C8 : kj � 1;
C9 : tj � 0;
C10 : tj þ
aj
fj
� T;
C11 : 0�Pj �Pmax
j :
Since f(x) is a convex function when x� 0, its perspective
function
tj
h2
f ðkjtj Þ is jointly convex with respect to tj � 0 and
kj � 0 [34]. Thus, the objective function, the summation of
a set of convex functions preserves the convexity.
We define mj ¼ aj=ðcjBÞ and Tj ¼ T � aj=fj. To solve
the problem P5, the corresponding Lagrange function is
written as:
L ¼
XN
j¼1
tj
h2
� r 2
mjkj
tj � 1
� �
þ ljðtj � TjÞ
� �
þ c
XN
j¼1
1
kj
� 1
 !
; ð21Þ
where lj and c are the Lagrange multipliers associated with
allocated time and bandwidth respectively. The Karush-
Kuhn-Tucker (KKT) conditions for the problem P5 are
given by:
oL
otj
¼ r
h2
� ð2
mjkj
tj � 1Þ þ tj
h2
� r � ln 2 � 2
mjkj
tj � ð�mjkj
t2j
Þ þ lj
¼ 0;
ð22Þ
oL
okj
¼ mj
h2
� r � ln 2 � 2
mjkj
tj � c
k2j
¼ 0; ð23Þ
tj � Tj � 0; lj � 0; ljðtj � TjÞ ¼ 0; ð24Þ
XN
j¼1
1
kj
� 1� 0; c� 0; cð
XN
j¼1
1
kj
� 1Þ ¼ 0: ð25Þ
It can be derived from (22) that
2
mjkj
tj ð1� ln 2 � mjkj
tj
Þ þ
h2lj � r
r
¼ 0: ð26Þ
From (23) we have
k2j � 2
mjkj
tj � h2c
mjr ln 2
¼ 0: ð27Þ
In (25) there is c� 0. Nevertheless, when c ¼ 0, Eq. (27)
642 Cluster Computing (2023) 26:635–649
123
has no solution. Therefore, we obtain c[ 0. The condition
lj � 0 exists in (24). We obtain kj ¼ 0 by putting lj ¼ 0
into Eq. (26), which does not satisfy constraint C8. Then
we get lj [ 0. From ljðtj � TjÞ ¼ 0 in (24) and lj [ 0, it
can be deduced that
tj ¼ Tj: ð28Þ
Let dj ¼ aj
cjBTj
, gj ¼ cjBh
2
ajr ln 2
. Taking tj; dj; gj into (27), we have
k2j � 2djkj ¼ gjc: ð29Þ
Equation (29) represents the relationship between band-
width allocation and the c multiplier. Changing both sides
of Eq. (29) into the form of logarithmic function lnðxÞ and
dividing by 2, we obtain
ln kj þ
dj ln 2
2
� kj ¼
lnðgjcÞ
2
: ð30Þ
We introduce exponential function eðxÞ and transform the
Eq.(30) into the following equivalent one
eln kj � e
dj ln 2
2
�kj ¼ e
lnðgjcÞ
2 : ð31Þ
After simplification, we get
kj � e
dj ln 2
2
�kj ¼ ffiffiffiffiffiffi
gjc
p
: ð32Þ
Then, we transform the Eq.(32) into the following forms
ðdj ln 2
2
� kjÞ � eð
dj ln 2
2
�kjÞ ¼
dj ln 2
ffiffiffiffiffiffi
gjc
p
2
: ð33Þ
Finally, the expression of kj by using c is obtained as
kj ¼
2Wðdj ln 2
ffiffiffiffiffi
gjc
p
2
Þ
dj ln 2
; ð34Þ
where W(x) is the principal branch of the Lambert W
function defined as the solution for WðxÞeWðxÞ ¼ x [35].
To facilitate the search, we use the constraint C11 and
the Eq. (16) to deduce that the maximum of kj is:
klj ¼
log2 ð
Pmax
j h2
r þ 1Þ
dj
: ð35Þ
According to formula (29), when kj � 0, c and kj are pro-
portional, so the range of c can be derived from the con-
straint C8 and the Eq. (35).
Algorithm 2 Energy-efficient Offloading Scheme
Require: a, B, n, T , f = {f1, ...fj , ..., fn}.
Ensure: Optimal offloading time allocation strategy t and bandwidth alloca-
tion strategy λ.
1: Initialization: λl
j = 1, λh
j = log2 (
P max
j h2
σ +1)
dj
, γl = min{λl
j
2·2djλl
j
gj
}, γh =
max{λh
j
2·2djλh
j
gj
}, suml =
N∑
j=1
1/λl
j , sumh =
N∑
j=1
1/λh
j , j ∈ {1, 2, ..., n}.
2: Based on (28), obtain t = {T − aj
fj
}, j ∈ {1, 2, ..., n}.
3: while suml < 1 and sumh > 1 do
4: γm = 1/2(γh + γl)
5: Update λ using equation (34)
6: sumλ =
N∑
j=1
1/λj
7: if sumλ < 1 then
8: γh = γm
9: sumh = sumλ
10: else if sumλ > 1 then
11: γl = γm
12: suml = sumλ
13: end if
14: end while
15: return λ
Cluster Computing (2023) 26:635–649 643
123
Based on the analysis above, the energy-efficient
offloading scheme is presented as Algorithm 2.
Remark 1 (Energy-efficient Offloading Scheme):
According to the obtained range of kj and c, initialize the
maximum and minimum values of them. Then calculate the
range of the total bandwidth allocated sumk ¼
PN
j¼1 1=kj
through the range of kj. suml and sumh represent the values
of sumk when kj is minimum and maximum. When the
bandwidth is underutilized or the total bandwidth allocated
exceeds the available bandwidth(suml\1 or sumh [ 1),
update cm, the middle value of the range of c, expressed as
cm ¼ 1=2ðch þ clÞ. Put cm into Eq. (34) to calculate kj,
Then update sumk. If the available bandwidth is just
completely allocated(sumk ¼ 1), the energy consumption is
minimal. Otherwise, update the range of c and continue the
iteration.
Remark 2 (Low-complexity algorithm): The traditional
method for solving problem P5 is the block-coordinate
descending algorithm which performs iterative optimiza-
tion of the two sets of variables, ftjg and fkjg, resulting in
high computation complexity. In contrast, the proposed
solution approach, described in Algorithm 2, needs to
perform only a one-dimension search for c, reducing the
computation complexity from Oðn2Þ to Oðlog2 nÞ.
5 Simulation experiment and result analysis
In this section, the proposed resource-sharing strategy is
analyzed by simulations. We consider the main factors that
affect users’ utility and equipment energy consumption and
verify that the proposed algorithm can effectively minimize
equipment energy consumption under the premise of the
high utility of the user. In each group of experiments, we
perform the corresponding random simulations 100 times
and average the results. The experimental equipment is
with a 3.40 GHz I7 Intel processor and 20 GB RAM.
5.1 Parameter settings
The computing resource sharing is model of nðn 2
f2; 3; :::; 12gÞ CRPs and one CRR, where J ¼ f1:::; j; :::ng
denote the index set of CRPs. Referring to [21, 36–39], the
parameter settings for resource trading and computation
offloading are presented in Table 1.
5.2 Performance of resource trading
To validate the efficacy of the proposed trading scheme, we
conduct simulations under different numbers of CRPs, and
obtain the utility of users under the three resource pricing
strategies: fixed low pricing (p ¼ 1), fixed high pricing
(p ¼ 3), and the pricing of the proposed trading scheme.
As shown in Figs. 3 and 4, the low pricing makes the
CRR pay fewer resource coins for completing the task,
thereby improving its utility. Conversely, the utility of
CRPs is reduced because low pricing leads to low income.
Conversely, high pricing satisfies the utility of CRPs but
ignores the utility of the CRR. The pricing strategy of the
proposed trading scheme can satisfy both the utility of the
CRR and the utility of CRPs in a changing trading
environment.
Then we observe the impact of different resource allo-
cation strategies on the utility of users. We conduct the
resource allocation strategy of the proposed trading sche-
me(PTS), the strategy with the maximum transaction vol-
ume(MaxTV), and the strategy with the minimum
transaction volume(MinTV).
From Fig. 5, the resource allocation strategy of the
proposed trading scheme can maximize the utility of the
CRR, because our strategy is determined based on the bids
of the CRPs, and the CRR can get the maximum utility all
the time. When the resource allocation strategy is fixed, the
CRR cannot adjust the resource allocation to obtain max-
imum utility. From Fig. 6, it is concluded that the resource
allocation strategy with MaxTV enables resource providers
to obtain high utility. In resource trading, the greater the
Table 1 Parameters in resource
trading
Parameter Value Parameter Value
dmin f5; 6; :::; 10g j 10�28
dmax f10; 12; :::; 20g B 10 MHz
n1 [0.005, 0.025] T [1, 3]s
n2 (0, 1] f maxl ½3� 108; 30� 108� cycles/s
zj f0:001; 0:002; :::; 0:009g cj [500, 1500] cycles/bit
�p [3, 3.5] r 10�9 W
hj ½10�8:6; 10�9:75�
644 Cluster Computing (2023) 26:635–649
123
resource demand, CRPs can sell more computing resources
to obtain more revenue.
5.3 Performance of computation offloading
This group of simulations is conducted to verify the effi-
ciency of the proposed computation offloading scheme and
the performance advantage of our offloading algorithm
under the premise of satisfying the utility of users.
We substitute the result of resource allocation into the
energy consumption model. Then compare the energy
consumption obtained through the different computation
offloading strategies: the strategy of the proposed compu-
tation offloading scheme(COS), the random local calcula-
tion frequency strategy(CFS), the random offloading time
allocation strategy(TAS), and the random offloading
bandwidth allocation strategy(BAS).
CFS: The offloading time allocation and offloading
bandwidth allocation are obtained by COS, and the local
computational frequency is set to be a value randomly
drawn from
dmax�
PN
j¼1
aj
T ; fmax
2
64
3
75.
TAS: Take the local computational frequency and
offloading bandwidth allocation in COS. Then set the
offloading time range of provider j to
kjaj
cjB�log2ð
Pmax
j
�c2
r þ1Þ
; T � aj
fj
" #
.
BAS: Take the local computational frequency and
offloading time allocation in COS. Allocate the bandwidth
to n CRPs randomly, and obtain the bandwidth ratio gj of
provider j. We define kj ¼ 1=gj and
Fig. 3 The requester utility versus the different pricing schemes
Fig. 4 The provider utility versus the different pricing schemes
Fig. 5 The requester utility versus the different resource allocation
schemes
Fig. 6 The provider utility versus the different resource allocation
schemes
Cluster Computing (2023) 26:635–649 645
123
kmaxj ¼ cjBtj
aj
� log2ð
Pmax
j �c2
r þ 1Þ. If kj [ kmaxj , let kj ¼ kmaxj ,
and finally get the energy consumption.
Figure 7 shows that the offloading strategy obtained by
our algorithm always minimizes energy consumption,
which proves the effectiveness of the proposed computa-
tion offloading scheme.
Then we compare the results of optimal value and time
cost in the proposed computation offloading scheme with
the other two traditional optimization algorithms: SLSQP
[40] and COBYLA [41].
Figures 8 and 9 respectively show the growth of energy
consumption and algorithm execution time as the number
of providers increases. The optimal values obtained by the
three algorithms are roughly similar, but our algorithm
obtains the optimal solution in the shortest time. This is
because we reduce the iteration variables through deriva-
tion and simplification. The computation time of our
algorithm hardly increases with the increase in the number
of providers. The superiority of the proposed algorithm is
demonstrated through comparison with other algorithms.
5.4 Performance of joint trading and offloading
To prove the advantages of joint trading and computation
offloading, we compare the optimal combination strategy
with other strategies.
We investigate the utility of random resource allocation
strategy(RAS), the proposed optimal combination strat-
egy(OCS), and the low energy resource allocation strat-
egy(ERAS) respectively. Then we compare the energy
consumption in random offloading strategy(ROS), OCS,
and ERAS.
RAS: Select demands from CRPs randomly under the
conditions of constraints C1 and C2 to get the utility.
ERAS: After obtaining the combination strategy of
trading and computation computing, optimize resource
allocation strategy to minimize energy consumption. Then,
calculate the utility based on the obtained resource allo-
cation strategy.
ROS: The local computational frequency, offloading
time allocation, and offloading bandwidth allocation are
selected referring to CFS, TAS, and BAS in Sect. 5.3.
Figures 10 and 11 show that ERAS, which only con-
siders reducing energy without considering utility, has
lower utility for CRR and CRPs than OCS, so ERAS
cannot motivate users to participate in trading. When the
number of CRPs is small, ROS reduces the utility of CRR
significantly, which causes CRR to be reluctant to partic-
ipate in the transaction. OCS can make both CRR and
CRPs have high utility with different numbers of providers.
In Fig. 12, ROS, which only considers utility without
energy consumption, consumes significantly more energy
than OCS in computation offloading. Therefore, the
Fig. 7 Energy consumption of different computation offloading
strategies
Fig. 8 The optimal energy consumption value obtained by three
algorithms
Fig. 9 The time cost of the three algorithms
646 Cluster Computing (2023) 26:635–649
123
combination strategy of resource trading and computation
offloading OCS we proposed can satisfy the utility of both
the CRR and CRPs, which motivates users to participate in
the trading and implement energy-efficient computation
offloading.
6 Conclusion
In this paper, we propose a joint scheme of computing
resource trading and computation offloading based on
blockchain in D2D-assisted MEC to motivate users to
participate in resource sharing. First, to guarantee security
and privacy, we introduce blockchain into the resource
sharing system. Then, the problem of resource trading is
modeled as a Stackelberg game. We obtain the optimal
resource trading strategy to maximize the utility of CRR
and CRPs by using the proposed resource trading algo-
rithm. To achieve the minimum energy consumption under
the premise of high utility, we substitute the resource
allocation strategy into the energy consumption model and
design an energy-efficient computation offloading scheme.
Finally, by conducting the simulations, we have evaluated
the performance of the proposed scheme, which motivates
users to participate in resource sharing effectively. In future
work, we will extend our work to the scenario of resource
sharing between multiple CRRs and multiple CRPs.
Author contributions All authors contributed to the study’s concep-
tion and design. Material preparation, data collection and analysis
were performed by WJ, XF, PL and HS. The first draft of the
manuscript was written by XF and all authors commented on previous
versions of the manuscript. All authors read and approved the final
manuscript.
Funding This research was partially supported by National Natural
Science Foundation of China (32171777), Fundamental Research
Funds for the Central Universities (2572017PZ04), Heilongjiang
Province Applied Technology Research and Development Program
Major Project (GA20A301).
Data availability The data that support the findings of this study are
available from the corresponding author upon reasonable request.
Declarations
Conflict of interest All authors disclosed no relevant relationships.
Informed consent Written informed consent for publication of this
paper was obtained from the Northeast Forestry University and all
authors.
Fig. 10 The relationship between resource allocation and requester
utility
Fig. 11 The relationship between resource allocation and provider
utility
Fig. 12 The relationship between resource allocation policies and
device energy consumption
Cluster Computing (2023) 26:635–649 647
123
References
1. Zhang, Z., Chu, D., Chen, X., Moscibroda, T.: Mobile motion
gaming: enabling a new class of phone-to-phone action games on
commodity phones. IEEE Trans. Mobile Comput. 12, 1487–1501
(2013)
2. Luo, C., Min, G., Yu, F.R., Chen, M., Yang, L.T., Leung,
V.C.M.: Energy-efficient distributed relay and power control in
cognitive radio cooperative communications. IEEE J. Sel. Areas
Commun. 31, 2442–2452 (2013)
3. Agiwal, M., Roy, A., Saxena, N.: Next generation 5G wireless
networks: a comprehensive survey. IEEE Commun. Surv. Tutor.
18(3), 1617–1655 (2016). https://doi.org/10.1109/COMST.2016.
2532458
4. Abbas, N., Zhang, Y., Taherkordi, A., Skeie, T.: Mobile edge
computing: a survey. IEEE Internet Things J. 5, 450–465 (2018)
5. Chen, M., Hao, Y.: Task offloading for mobile edge computing in
software defined ultra-dense network. IEEE J. Sel. Areas Com-
mun. 36, 587–597 (2018)
6. Luo, C., Salinas, S., Li, M., Li, P.: Energy-efficient autonomic
offloading in mobile edge computing. In: Proceedings of IEEE
DASC’17, (Orlando, FL USA), pp. 581-588 (2017)
7. Wang, R., Yan, J., Wu, D., Wang, H., Yang, Q.: Knowledge-
centric edge computing based on virtualized d2d communication
systems. IEEE Commun. Mag. 56, 32–38 (2018)
8. Wen, J., Ren, C., Sangaiah, A.K.: Energy-efficient device-to-
device edge computing network: An approach offloading both
traffic and computation. IEEE Commun. Mag. 56, 96–102 (2018)
9. Qiao, G., Leng, S., Chai, H., Asadi, A., Zhang, Y.: Blockchain
Empowered Resource Trading in Mobile Edge Computing and
Networks. In: ICC 2019–2019 IEEE International Conference on
Communications (ICC), pp. 1–6 (2019). https://doi.org/10.1109/
ICC.2019.8761664.
10. Aitzhan, N.Z., Svetinovic, D.: Security and privacy in decen-
tralized energy trading through multi-signatures, blockchain and
anonymous messaging streams. IEEE Trans. Dependable Secure
Comput. 15(5), 840–852 (2018). https://doi.org/10.1109/TDSC.
2016.2616861
11. Zarrin, J., Wen Phang, H., Babu Saheer, L., et al.: Blockchain for
decentralization of internet: prospects, trends, and challenges.
Cluster Comput. 24(4), 2841–2866 (2021)
12. Qiang, Q., Nurgaliev, I., Muzammal, M., Jensen, C.S., Fan, J.: On
spatio-temporal blockchain query processing. Future Gener.
Comput. Syst. 98, 208–218 (2019)
13. Tseng, L., Yao, X., Otoum, S., et al.: Blockchain-based database
in an IoT environment: challenges, opportunities, and analysis.
Cluster Comput. 23, 2151–2165 (2020)
14. Muzammal, Muhammad, Qiang, Qu., Nasrulin, Bulat: Renovat-
ing blockchain with distributed databases: an open source system.
Future Gener. Comput. Syst. 90, 105–117 (2019)
15. Li, H., Pei, L., Liao, D., et al.: BDDT: use blockchain to facilitate
IoT data transactions. Cluster Comput. 24, 459–473 (2021)
16. Swan, M.: Blocakchain: blueprint for a new economy. O’Reilly
Media, Newton (2015)
17. Liu, Y., Yu, F.R., Li, X., Ji, H., Leung, V.C.M.: Decentralized
resource allocation for video transcoding and delivery in block-
chain-based system with mobile edge computing. IEEE Trans.
Vehicular Technol. 68(11), 11169–11185 (2019). https://doi.org/
10.1109/TVT.2019.2937351
18. Li, M., Hu, D., Lal, C., Conti, M., Zhang, Z.: Blockchain-enabled
secure energy trading with verifiable fairness in industrial internet
of things. IEEE Trans. Ind. Inform. 16(10), 6564–6574 (2020).
https://doi.org/10.1109/TII.2020.2974537
19. Fernando, P., Gunawardhana, L., Rajapakshe, W., Dananjaya,
M., Gamage, T., Liyanage, M.: Blockchain-Based Wi-Fi
Offloading Platform for 5G. In: 2020 IEEE International Con-
ference on Communications Workshops (ICC Workshops),
pp. 1–6 (2020). https://doi.org/10.1109/ICCWorkshops49005.
2020.9145369
20. Chen, T., Khan, A.S., Zheng, G., Lambotharan, S.: Blockchain
secured auction-based user offloading in heterogeneous wireless
networks. IEEE Wirel. Commun. Lett. 9(8), 1141–1145 (2020).
https://doi.org/10.1109/LWC.2020.2982634
21. Li, Z., Yang, Z., Xie, S.: Computing resource trading for edge-
cloud-assisted internet of things. IEEE Trans. Ind. Inform. 15(6),
3661–3669 (2019). https://doi.org/10.1109/TII.2019.2897364
22. Liu, M., Yu, F.R., Teng, Y., Leung, V.C.M., Song, M.: Dis-
tributed resource allocation in blockchain-based video streaming
systems with mobile edge computing. IEEE Trans. Wirel. Com-
mun. 18(1), 695–708 (2019). https://doi.org/10.1109/TWC.2018.
2885266
23. Zhang, Z., Hong, Z., Chen, W., Zheng, Z., Chen, X.: Joint
computation offloading and coin loaning for blockchain-em-
powered mobile-edge computing. IEEE Internet Things J. 6(6),
9934–9950 (2019). https://doi.org/10.1109/JIOT.2019.2933445
24. Liu, K., Chen, W., Zheng, Z., Li, Z., Liang, W.: A novel debt-
credit mechanism for blockchain-based data-trading in internet of
vehicles. IEEE Internet Things J. 6(5), 9098–9111 (2019). https://
doi.org/10.1109/JIOT.2019.2927682
25. De Souza, A.B., et al.: Computation offloading for vehicular
environments: a survey. IEEE Access 8, 198214–198243 (2020).
https://doi.org/10.1109/ACCESS.2020.3033828
26. Hassija, V., Saxena, V., Chamola, V.: A mobile data offloading
framework based on a combination of blockchain and virtual
voting. Softw. Pract. Exp. 51(12), 2428–2445 (2020)
27. Hassija, V., Chamola, V., Gupta, V., Chalapathi, G.S.S.: A
Blockchain based Framework for Secure Data Offloading in
Tactile Internet Environment. In: 2020 International Wireless
Communications and Mobile Computing (IWCMC),
pp. 1836–1841 (2020). https://doi.org/10.1109/IWCMC48107.
2020.9148559
28. Sheng, M., Wang, Y., Wang, X., Li, J.: Energy-efficient multiuser
partial computation offloading with collaboration of terminals,
radio access network, and edge server. IEEE Trans. Commun.
68(3), 1524–1537 (2020). https://doi.org/10.1109/TCOMM.2019.
2959338
29. Wen, J., Ren, C., Sangaiah, A.K.: Energy-efficient device-to-
device edge computing network: an approach offloading both
traffic and computation. IEEE Commun. Mag. 56(9), 96–102
(2018). https://doi.org/10.1109/MCOM.2018.1701054
30. Chen, J., Zhao, Y., Xu, Z., Zheng, H.: Resource allocation
strategy for D2D-assisted edge computing system with hybrid
energy harvesting. IEEE Access 8, 192643–192658 (2020).
https://doi.org/10.1109/ACCESS.2020.3032033
31. Anoh, K., Maharjan, S., Ikpehai, A., Zhang, Y., Adebisi, B.:
Energy peer-to-peer trading in virtual microgrids in smart grids: a
game-theoretic approach. IEEE Trans. Smart Grid 11(2),
1264–1275 (2020). https://doi.org/10.1109/TSG.2019.2934830
32. Xiong, Z., Kang, J., Niyato, D., Wang, P., Poor, H.V.: Cloud/edge
computing service management in blockchain networks: multi-
leader multi-follower game-based ADMM for pricing. IEEE
Trans. Services Comput. 13(2), 356–367 (2020). https://doi.org/
10.1109/TSC.2019.2947914
33. Yao, H., Mai, T., Wang, J., Ji, Z., Jiang, C., Qian, Y.: Resource
trading in blockchain-based industrial internet of things. IEEE
Trans. Ind. Inform. 15(6), 3602–3609 (2019). https://doi.org/10.
1109/TII.2019.2902563
34. Boyd, S., Vandenberghe, L.: Convex Optimization. Cambridge
University Press, Cambridge (2004)
648 Cluster Computing (2023) 26:635–649
123
https://doi.org/10.1109/COMST.2016.2532458
https://doi.org/10.1109/COMST.2016.2532458
https://doi.org/10.1109/ICC.2019.8761664.
https://doi.org/10.1109/ICC.2019.8761664.
https://doi.org/10.1109/TDSC.2016.2616861
https://doi.org/10.1109/TDSC.2016.2616861
https://doi.org/10.1109/TVT.2019.2937351
https://doi.org/10.1109/TVT.2019.2937351
https://doi.org/10.1109/TII.2020.2974537
https://doi.org/10.1109/ICCWorkshops49005.2020.9145369
https://doi.org/10.1109/ICCWorkshops49005.2020.9145369
https://doi.org/10.1109/LWC.2020.2982634
https://doi.org/10.1109/TII.2019.2897364
https://doi.org/10.1109/TWC.2018.2885266
https://doi.org/10.1109/TWC.2018.2885266
https://doi.org/10.1109/JIOT.2019.2933445
https://doi.org/10.1109/JIOT.2019.2927682
https://doi.org/10.1109/JIOT.2019.2927682
https://doi.org/10.1109/ACCESS.2020.3033828
https://doi.org/10.1109/IWCMC48107.2020.9148559
https://doi.org/10.1109/IWCMC48107.2020.9148559
https://doi.org/10.1109/TCOMM.2019.2959338
https://doi.org/10.1109/TCOMM.2019.2959338
https://doi.org/10.1109/MCOM.2018.1701054
https://doi.org/10.1109/ACCESS.2020.3032033
https://doi.org/10.1109/TSG.2019.2934830
https://doi.org/10.1109/TSC.2019.2947914
https://doi.org/10.1109/TSC.2019.2947914
https://doi.org/10.1109/TII.2019.2902563
https://doi.org/10.1109/TII.2019.2902563
35. Corless, R.M., Gonnet, G.H., Hare, D.E.G., Jeffrey, D.J., Knuth,
D.E.: On the Lambert W function. Adv. Comput. Math. 5(1),
329–359 (1996)
36. Wang, Y., Sheng, M., Wang, X., Wang, L., Li, J.: Mobile-edge
computing: partial computation offloading using dynamic voltage
scaling. IEEE Trans. Commun. 64(10), 4268–4282 (2016)
37. You, C., Huang, K., Chae, H., Kim, B.: Energy-efficient resource
allocation for mobile-edge computation offloading. IEEE Trans.
Wirel. Commun. 16(3), 1397–1411 (2017). https://doi.org/10.
1109/TWC.2016.2633522
38. Ti, N.T., Le, L.B.: Computation offloading leveraging computing
resources from edge cloud and mobile peers. IEEE Int. Conf.
Commun. (ICC) 2017, 1–6 (2017). https://doi.org/10.1109/ICC.
2017.7997138
39. You, C., Huang, K., Chae, H.: Energy efficient mobile cloud
computing powered by wireless energy transfer. IEEE J. Select.
Areas Commun. 34(5), 1757–1771 (2016)
40. Kraft, D.: A software package for sequential quadratic pro-
gramming. Forschungsbericht- Deutsche Forschungs- und Ver-
suchsanstalt fur Luft- und Raumfahrt (1988)
41. Powell, M.: A direct search optimization method that models the
objective and constraint functions by linear interpolation. Adv.
Opt. Numer. Anal. 275, 51–67 (1994)
Publisher’s Note Springer Nature remains neutral with regard to
jurisdictional claims in published maps and institutional affiliations.
Springer Nature or its licensor holds exclusive rights to this article
under a publishing agreement with the author(s) or other rightsh-
older(s); author self-archiving of the accepted manuscript version of
this article is solely governed by the terms of such publishing
agreement and applicable law.
Weipeng Jing Weipeng Jing
(Member, IEEE) received the
Ph.D. degree from the Harbin
Institute of Technology, China.
He is currently an Associate
Professor with Northeast For-
estry University, China. He has
published over 50 research arti-
cles in refereed journals and
conference proceedings, such as
CPC, PUC, and FGCS. His
research interests include mod-
eling and scheduling for dis-
tributed computing systems,
fault tolerant computing and
system reliability, cloud computing, and spatial data mining.
Xinyu Fu Xinyu Fu received the
B.E. degree in information
management and information
system from Northeast Forestry
University, China, in 2019. She
is currently pursuing the M.E.
degree in computer system
architecture with Northeast
Forestry University. Her current
research interests include
mobile edge computing, block-
chain, and the Internet of
Things.
Peng Liu College of Information
and Computer Engineering,
Northeast Forestry University,
Harbin, China Peng Liu
received the M.S. degree from
the College of Computer Sci-
ence and Technology, Jilin
University, China, in 2016, and
the Ph.D. degree, in 2019. Cur-
rently, he is a Lecturer with the
College of Information and
Computer Engineering, North-
east Forestry University, Har-
bin, China. His main research
interests include mobile cloud
computing, mobile edge computing, blockchain, and the Internet of
Things.
Houbing Song Houbing Song
(Senior Member, IEEE)
received the Ph.D. degree in
electrical engineering from the
University of Virginia, Char-
lottesville, VA, USA, in August
2012, and the M.S. degree in
civil engineering from The
University of Texas at El Paso,
El Paso, TX, USA, in December
2006.,In August 2017, he joined
the Department of Electrical,
Computer, Software, and Sys-
tems Engineering, Embry-Rid-
dle Aeronautical University,
Daytona Beach, FL, USA, where he is currently an Assistant Pro-
fessor and the Director of the Security and Optimization for Net-
worked Globe Laboratory (SONG Laboratory). He has served on the
faculty for West Virginia University from August 2012 to August
2017. In 2007, he was an Engineering Research Associate with the
Texas A &M Transportation Institute. He is the author of more than
100 articles. His research interests include cyber-physical systems,
cybersecurity and privacy, the Internet of Things, edge computing,
big data analytics, unmanned aircraft systems, connected vehicle,
smart and connected health, and wireless communications and net-
working. He is also a Senior Member of ACM. He was a recipient of
the prestigious Air Force Research Laboratory’s Information Direc-
torate (AFRL/RI) Visiting Faculty Research Fellowship in 2018, and
the very first recipient of the Golden Bear Scholar Award and the
highest campus-wide recognition for research excellence at the West
Virginia University Institute of Technology (WVU Tech) in 2016. He
also serves as an Associate Technical Editor for IEEE Communica-
tions Magazine. He is also the Editor of six books, including Big Data
Analytics for Cyber-Physical Systems: Machine Learning for the
Internet of Things (Elsevier, 2019), Smart Cities: Foundations, Prin-
ciples and Applications (Hoboken, NJ, USA: Wiley, 2017), Security
and Privacy in Cyber-Physical Systems: Foundations, Principles and
Applications (Chichester, U.K.: Wiley-IEEE Press, 2017), Cyber-
Physical Systems: Foundations, Principles and Applications, (Boston,
MA, USA: Academic Press, 2016), and Industrial Internet of Things:
Cybermanufacturing Systems (Cham, Switzerland: Springer, 2016).
Cluster Computing (2023) 26:635–649 649
123
https://doi.org/10.1109/TWC.2016.2633522
https://doi.org/10.1109/TWC.2016.2633522
https://doi.org/10.1109/ICC.2017.7997138
https://doi.org/10.1109/ICC.2017.7997138
	Joint resource trading and computation offloading in blockchain enhanced D2D-assisted mobile edge computing
	Abstract
	Introduction
	Related work
	Blockchain framework for resource sharing
	Blockchain-based incentive mechanism
	Task offloading strategy in MEC
	Blockchain-based computing resource sharing system
	System model for D2D computing resource trading and computation offloading
	Resource trading model
	Problem formulation for resource allocation
	Problem formulation for resource pricing
	Stackelberg game in resource trading
	Resource trading algorithm based on game theory
	Computation offloading model
	Problem formulation for energy-efficient computation offloading
	Energy-efficient computation offloading scheme
	Simulation experiment and result analysis
	Parameter settings
	Performance of resource trading
	Performance of computation offloading
	Performance of joint trading and offloading
	Conclusion
	Author contributions
	Data availability
	References