Game Theoretical Analysis of Cross-Chain Swaps
Game Theoretical Analysis of Cross-Chain Swaps
Marianna Belotti
Groupe Caisse des Dépôts, Cnam
Paris, France
marianna.belotti@caissedesdepots.fr
Stefano Moretti
Univ. Paris Dauphine, PSL
CNRS LAMSADE, Paris, France
stefano.moretti@dauphine.fr
Maria Potop-Butucaru
Sorbonne Université
CNRS LIP6, Paris, France
maria.potop-butucaru@lip6.fr
Stefano Secci
Cnam
Paris, France
stefano.secci@cnam.fr
Abstract—In this paper we address the distributed cross-chain
swap problem in the blockchain context where multiple agents
exchange assets across multiple blockchain systems (e.g. trading
Bitcoins for Litecoins or Ethers). We present a mathematical
framework allowing to characterize blockchain swap protocols
as the combination of a publishing and a commitment phase,
where contracts are respectively published and then committed.
We characterize the equilibria of existing cross-chain swap
protocols (i.e., blockchain swap protocols exchanging assets
among different blockchains). More precisely, we prove that
following a swap protocol characterized by concurrent publishing
of exchange contracts and snap (immediate) assets transfers is
a Nash equilibrium. Furthermore, we prove that for protocols
with a sequential publishing and commitment of the assets
transfers, following the prescribed protocol is a sub-game perfect
equilibrium.
I. INTRODUCTION
The modern economy is moving to a new era where
economical transactions use cryptocurrencies instead of fiat
money. Crypto-currencies (i.e., Bitcoin, Ethereum, etc.) are
based on the use of blockchains, which are basically
transactional systems governed by decentralized protocols.
Blockchains pave the way for a new approach to organize
and sustainably maintain long-term transactions as well as
high-level services. It is interesting to note that the number
of blockchains that currently hold the head of newspapers has
gone from one in 2008 (the famous Bitcoin blockchain [1])
to a few tens in 2018 such as Hyperledger [2], Ethereum
[3], Zcash [4], Corda [5], Ripple [6], Tendermint [7] etc.
Each of these systems has its own modus operandi, its own
governance and even its own way of agreeing on a common
history. Each system has its own advantages that make it
attractive for various applications and geopolitical contexts.
We are witnessing the creation of several ecosystems, each
with its own currency and governance.
Similar to modern international economical exchanges
which are based on different government-issued currencies,
inter-blockchain exchanges must be based on common rules
resilient to attacks, failures or malicious behaviors affecting the
network. There are currently several operational systems for
achieving interoperability between different blockchains such
as Kybernetwork [8], Aion [9], Cosmos [10] or Polkadot [11].
These systems can be classified into two categories according
to their decentralization level: systems that use a trusted third-
party to validate transactions or systems that realize it directly
between blockchains without the need of a trusted third-
party. In order to execute an exchange or a swap (i.e., a
set of transactions between parties), transacting agents (i.e.,
blockchain users) are provided with a protocol to stick to.
A protocol in this case consists of a specific sequence of
instructions agents should perform to preserve the ACID prop-
erties [12] of the individual transactions or exchanges; that is,
Atomicity: the all-or-nothing occurs and each participant must
know which state he or she is in; Consistency: each successful
transaction by definition commits only valid results; Isolation:
transactions run independently; Durability: transactions cannot
be abrogated after commitment.
Atomic cross-chain swaps fall into the class of the so called
TAST (i.e., Token Atomic Swap Technology) [13] research
ideas aiming at making blockchains interoperable. Differently
from decentralized exchanges – initiatives recently emerged
to remove the need of trust on traditional exchange services
(e.g., the format proposed by the Ethereum DEX protocols [14;
15] atomically swapping ERC-20 tokens on the Ethereum
blockchain) – atomic swaps have not limits in operating cross-
chain. The very first atomic swap solution has been proposed
for Bitcoin by Nolan [16] making use of hash-time locked
contracts enabling conditional assets transfers. Nowadays few
platforms actually support cross-chain exchanges that at this
stage are still slow and inefficient. Decred [17] implements
Nolan’s logic on UTXO-based premissionless blockchains
such as Bitcoin Cash [18; 19; 20], Litecoin [21], Qtum [22],
etc. BartherDEX [23], part of the Komodo project [24], repre-
sents a cross-chain solution that matches orders and defines the
swap protocol. Blockchain.io [25] implements atomic cross-
chain swaps by combining centralized components (order
matching) with decentralized ones (trade settlement and exe-
cution). Therefore, research now focuses on hybrid swap pro-
tocols, replacing decentralized commitment/locking schemes
(hash-locks) with centralized ones, resulting more attractive
and efficient. AC3TW and AC3WN [26] protocols propose
atomic cross-chain swaps respectively with centralized and
“decentralized” trusted authorities (i.e., an external agent and
an external blockchain) acting as witnesses. According to
Arwen protocol [27] crypto-assets are swapped through cen-
tralized exchange services that in no way acquire the assets
custody. XClaim [28] overcomes blockchain data-structures
incompatibility by swapping cryptocurrency-backed assets.
It should be noted that different swap protocols differ
essentially in the involved parties. The set of swap participants
can be composed only of the asset owners (e.g., as in [29])
485
2020 IEEE 40th International Conference on Distributed Computing Systems (ICDCS)
2575-8411/20/$31.00 ©2020 IEEE
DOI 10.1109/ICDCS47774.2020.00060
20
20
 IE
EE
 4
0t
h 
In
te
rn
at
io
na
l C
on
fe
re
nc
e 
on
 D
is
tri
bu
te
d 
C
om
pu
tin
g 
Sy
st
em
s (
IC
D
C
S)
 | 
97
8-
1-
72
81
-7
00
2-
2/
20
/$
31
.0
0 
©
20
20
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
IC
D
C
S4
77
74
.2
02
0.
00
06
0
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
or by owners accompanied by a trusted third party (e.g., as in
the AC3TW protocol [26]).
To the best of our knowledge, there is (i) no formal analysis
on the structure and the properties blockchain swap protocols
satisfy and, (ii) no game theoretical modeling of participants
strategic interactions (i.e., to follow or not to follow the
prescribed protocol). More precisely, Nolan [16] presents the
Bitcoin swap protocol in a functional manner. In [29] the
author provides a partial game theoretical analysis (specific
to the protocol) presenting no structural characterization of
the possible equilibria of the system (see Section III-A).
Authors in [26] analyze the atomicity violations characterizing
the protocol in [16]. However, no game theoretical result is
provided.
According to recent studies [30; 31] proposed swap pro-
tocols are not properly analyzed neither from the structural
point of view, responsible for their atomicity, nor from the
strategical point of view making them satisfying liveness and
safety properties (i.e., the protocol terminates in a valid state).
More precisely, it is important to analyze the behavior of the
swap participants that are rational agents actively participating
in the exchange by following or not the prescribed protocol
according to their own objective function.
A. Our contribution
We propose a generic game theoretical framework that
formalizes the swap problem and characterizes blockchain
swap protocols by clearly separating the contracts publishing
phase and their commitment phase. Furthermore, we prove
that (i) following a swap protocol characterized by an effective
decision function (when players have the power to accept or
decline the desired assets) is a subgame perfect equilibrium
in dominant strategies and, that (ii) following a swap protocol
characterized by concurrent publishing and snap (immediate)
commitment is a Nash equilibrium. Our generic framework
allows us to characterize equilibria of two representative
recent protocols presented in [16] and [26] respectively. In
the case of the protocol proposed in [16] and generalised
in [29], following the protocol is the unique subgame perfect
equilibrium (in dominant strategies), while in the case of the
protocol proposed in [26], following the protocol is a Nash
equilibrium.
II. SWAP GAMES
In this section we propose a formal definition of the swap
problem and a formalization of the corresponding blockchain
swap protocol that can be atomic or not. The latter consists
of two different phases (i.e., publishing and commitment of
transfers) and represents a particular strategy of a swap game
that players can choose to adopt or not.
A. Swap problem and swap protocol
In a general swap problem, swapping parties aim at ex-
changing assets among themselves. A swap protocol defines
the set of asset transfers and the order in which they should be
executed. Given a set of assets and the corresponding owners,
a swap consists of an asset ownership exchange within the set
of owners.
Definition 1 (swap problem). A swap problem is defined as
a tuple 〈A,O, b0, b∗, (ui)i∈O〉 where:
• A = {1, . . . ,m} is the set of assets to be swapped;
• O = {1, . . . , n} is the set of owners or agents partici-
pating in the exchange. We consider in the following that
n ≤ m since each owner owns at least one asset;
• b0, b∗ : A → O are the original and the desired
ownership maps – both surjective – such that ∀a ∈
A, b0(a) �= b∗(a) and;
• ui is the payoff function for owner i ∈ O over bundles
of assets in 2A such that ui(b
−1
0 (i)) < ui(b
−1
∗ (i)) (i.e.,
each owner i strictly prefers the desired bundle of assets
to her original bundle) and ∀S, T ∈ 2A : S ⊆ T ,
ui(T ) ≥ ui(S) (i.e., a larger bundle is strictly preferred
to a smaller one), for each i ∈ O.
The representation with two different surjective functions
b0, b∗ describes swaps as ownership exchanges problems.
Agents participate in a swap with the asset(s) they aim to
exchange for others, preferring the desired new asset(s) to
finding themselves as in the initial configuration. Moreover,
we assume owners’ payoff function increases monotonically
with the size of the asset bundle.
The transition from an initial configuration to a post-swap
configuration is defined by the corresponding swap protocol
consisting in a sequence of operations to be executed in a
certain order. In centralized swap protocols a central role in
the swap is played by a trusted third party. That is, asset
ownership is transferred first to the trusted third party that in
turn transfers assets back to the new owners. On the other
hand, decentralized swap protocols contemplate ownership
transfers within asset owners only; the latter agrees on a
particular swap configuration (i.e., the assets to exchange)
without trusting each other.
In order to formally define a swap protocol we need
to introduce first, the structure of a decentralized exchange
protocol, consisting of a sequence of asset(s) transfers to be
committed.
Definition 2 (decentralized exchange protocol). Let σ =
{(Ak, Ok, Xk) : |Ak| ≥ |Ok|}k, k ∈ {1, . . . , t}, t ∈ N :
t ≤ m be a sequence of exchanges where,
• Ak ⊆ A specifies the subset of assets involved in the
exchange at step k;
• Ok ⊆ O specifies the subset of owners involved in the
exchange at step k;
• Xk : Ak → Ok (surjective) specifies the owner Xk(a) ∈
Ok of any asset a ∈ AK at step k;
A sequence σ defines a decentralized exchange protocol that
engenders a sequence of maps bσ1 , b
σ
2 , . . . , b
σ
t : A → O such
that for all k ∈ {1, 2, . . . , t}:
• bσk(z) = bσk−1(z), ∀z ∈ A \Ak;
• bσk(z) = Xk(z), ∀z ∈ Ak,
where we set bσ0 = b0.
486
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
So, the triple (Ak, Ok, Xk) specifies that the asset set Ak ⊆
A is transferred at step k to owners Ok ⊆ O according to Xk.
Note that, bσk and bσk−1 differ only for the ownership of assets
Ak belonging to bσk−1(A
k) at step k− 1 and to Ok at step k.
Example 1. Let us consider the swap problem 〈A,O, b0, b∗,
(ui)i∈O〉 such that the set of assets is A = {a, b, c, d, e}, the
set of owners is O = {1, 2, 3}, the original ownership map
is b0 = (1, 1, 2, 3, 3) (meaning that the asset ownership is: 1
for assets a and b, 2 for c and 3 for d and e) and the desired
ownership map is b∗ = (2, 3, 1, 2, 1).
One may consider a sequence of exchanges involving first
owners 1 and 2, then 1 and 3 and finally 2 and 3. Precisely,
σ = ({a, c}, {1, 2}, {X1(a) = 2, X1(c) = 1}),
({b, e}, {1, 3}, {X2(b) = 3, X2(e) = 1}),
({d}, {2}, {X3(d) = 2}).
Sequence σ engenders a sequence of ownership maps such
that b0 = (1, 1, 2, 3, 3), b1 = (2, 1, 1, 3, 3), b2 = (2, 3, 1, 3, 1),
b3 = (2, 3, 1, 2, 1) = b∗.
The sequence σ defines, for each protocol step k, (i) the
assets Ak whose property is to be transferred, (ii) the new
assets’ owners Ok and, (iii) the function Xk assigning the
precise owner to each asset. The protocol is decentralized as
ownership transfers take place among the owners themselves.
At each step k an asset can change owner, the final configu-
ration at time t provides the final asset owner.
In the simple case where agents agree on exchanging assets
through a single ownership transfer at each step k, the corre-
sponding single-swap protocol is represented by the sequence
σ = {(ak, ok) : ok ∈ O, ak ∈ A}k∈{1,...,t}, t ∈ N : t ≤ m.
Protocol σ describes a general asset exchange agreement,
and not necessarily a swap where the transfer of an asset
ownership exists only if associated with the transfer of another
one. More precisely, swap participants are interested in the
final (at time t) and not temporary (intermediate at step k �= t)
acquisition of one or more assets owned by other agents. In a
swap protocol, each asset changes owner only once.
Definition 3 (decentralized swap protocol). A decentralized
swap protocol is defined as a decentralized exchange protocol
where the set {Ak : k = 1, . . . , t, t ∈ N : t ≤ m} is a partition
of the asset set A.
Example 1 provides a decentralized swap protocol σ since
{{a, c}, {b, e}, {d}} is a partition of A.
From the formalization introduced in Definition 2 it is
possible to derive a graphic representation, by means of a
digraph D = (V,E), as the one proposed by Herlihy in [29].
More precisely, vertexes are asset owners V = O and edges
E � e = (ei, eo) : (ei, eo) ∈ V 2 ∧ ei �= eo can be derived
by the original ownership map b0 (providing ei) and the
desired one b∗ (providing eo). Fig. 1 presents the digraph of
Example 1.
Fig. 1. Digraph swap protocol representation of the sequence σ =
({a, c}, {1, 2}, {X1(a) = 2, X1(c) = 1}), ({b, e}, {1, 3}, {X2(b) =
3, X2(e) = 1}), ({d}, {2}, {X3(d) = 2}).
B. Atomic swap protocol
Whenever swapping parties do not trust each other it is in
their interest to ensure that no participant can take advantage
from the swap agreed on. The protocol must be constructed
in such a way that the swap is performed in its entirety or no
asset transfer is committed (i.e., all-or-nothing). In the case of
failures during the protocol execution, every swap participant
must be able to regain possession of the original owned assets.
Definition 4 (efficient decentralized swap protocol). A decen-
tralized swap protocol σ is said to be efficient if the engendered
sequence bσ1 , b
σ
2 , . . . , b
σ
t is such that bσt = b∗.
Definition 5 (atomic decentralized swap protocol). A decen-
tralized swap protocol σ is atomic whenever it is efficient (in
the sense of Definition 4) or bσt = b0.
In order to prevent participants to externally exchange the
assets involved in the swap, the protocol requires assets to be
locked in specific transactions (i.e., they cannot be the object
of other transfers). Once locked, the transfer commitment
allows every participant to redeem the new swapped asset(s).
Moreover, due to the atomicity requirement:
(i) any commitment should be conditioned on the correct
asset locking i.e., transfers are committed only when all
assets of the swap are correctly locked;
(ii) consequently to failures in the assets locking, the initial
situation must be restored;
(iii) once an asset transfer is committed all the other transfers
have to be committed, too.
When considering blockchains – decentralized trustless en-
vironments – swap protocols need to be atomic according
to Definition 5. Conditional transfers in blockchain systems
are implemented with distributed contracts i.e., scripts ex-
ecuted on blockchain nodes that can enforce and regulate
relationships among network actors. A widely adopted com-
mitment scheme is the crypto-primitive hash-lock [32] i.e.,
asset ownership is locked with a hash value h that is the
outcome of a one-way function H with a secret s as input
(i.e., h = H(s)) and can be unlocked only when s is revealed.
Transfers are conditioned on the hash constraint guarantee-
ing that assets to be swapped have been properly locked.
Whenever transfers are not committed, due to atomicity, the
initial ownership configuration needs to be restored; this can
487
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
be implemented with time-locks [33] i.e., a contract primitive
restricting the asset transfer until a specified future time. Hash-
locks and time-locks properly combined enable conditional
asset transfers necessary to satisfy requirements (i) and (ii) of
a swap protocol. Hence, when considering a blockchain swap,
an asset transfer consists of an atomic distributed contract
that, according to certain protocols [16; 29], coincides with
a distributed hash-locked contract (HTLC).
The latter needs to be correctly implemented, published
and validated on the network (i.e., part of the valid transac-
tion history) before being committed. Concerning requirement
(iii), a mechanism that forces committing all transfers is
needed in order to avoid possible atomicity violations (see
Section III-A3). However, having a forcing scheme comes at
a price, i.e., loss of decentralization (see Section III-B).
C. Atomic blockchain swap protocol
In this work we consider blockchain swap protocols charac-
terized by two distinct phases: a first phase in which transfers
(i.e., hash-locked contracts) are published and a second one
where they are committed. To achieve atomicity, the order in
which operations in the two phases are executed matters (see
Section III). The commitment phase has to be conditioned by
the execution of the publishing phase; all the asset transfers
have to be published before being committed. Therefore, a
blockchain swap protocol is characterized by a publishing
protocol σP followed by a commitment protocol σT . While
the first protocol (σP ) is a simple sequence of transfers, the
second one (σT ) is a decentralized swap protocol according
to Definition 3.
In order to analyze the participants’ strategic behaviors
the protocol needs to specify the schedules in which agents
perform operations. Therefore, given a sequence of operation
σ, a set of asset owners O and a centralized trusted authority
τ , we define a decision function F : {1, . . . , t} → O ∪ {τ}
as a map that specifies the agent(s) F (k) responsible for the
publication (or commitment) of the transfer (Ak, Ok). Note
that the agent(s) called to decide on the transfer can be either
asset owners (i.e., F (k) ∈ O) or an external trusted actor (i.e.,
F (k) = τ ).
Definition 6 (decentralized blockchain swap protocol). A
decentralized blockchain swap protocol or simply a blockchain
swap protocol is defined by the pair (σP , σT ) where
• σP = {(Aj , Oj)}j∈{1,...,tP }, tP ∈ N : tP ≤ m, Aj ⊆
A and Oj ⊆ O is a sequence such that ∀j ∈
{1, . . . , tP }, Oj = {o ∈ O : o ∈ b∗(Aj) ∨ o ∈ b0(A
j)}
and,
• σT = {(Ak, Ok, Xk)}k∈{1,...,tT } is a swap protocol
engendering the sequence of maps bσT
1 , . . . , bσT
tT : A → O
according to Definition 3.
We associate to each sequence σP , σT the corresponding
decision function FP , FT defined above.
Let us note that the publishing sequence σP is constructed
in such a way that transfers that can be published are of type
(Aj , b∗(Aj)) or (Aj , b0(A
j)). That is, blockchain transactions
can transfer the asset ownership to desired owners and original
owners only.
Definition 7 (atomic blockchain swap protocol). An atomic
blockchain swap protocol consists of a pair (σP , σT ) where
the engendered ownership map at time t of the commitment
protocol coincides with the desired one; bσT
tT = b∗ or with
initial one; bσT
tT = b0.
1) Phases separation: We have defined a blockchain swap
protocol as a publishing sequence followed by a commitment
emphasizing the precedence of the first phase over the second.
However, it is necessary to condition the execution of the com-
mitment protocol to the publication of all the contracts in order
to have an atomic blockchain swap protocol. The following
definition formalizes such a commitment requirement.
Definition 8 (commitment requirement). Given a blockchain
swap protocol (σP , σT ) whenever there exists an asset transfer
(using the swap structure previously given) that is not correctly
published, then no asset transfer is committed. Formally, if, in
σP , ∃j̄ ∈ {1, . . . , tP } : Oj̄ ∩ b0(A
j̄) �= ∅ then, in σT , bσT
k =
b0 ∀k ∈ {1, . . . , tT }.
Every blockchain swap protocol has to meet the com-
mitment requirement defined above in order to be atomic.
Hence, Definition 8 is a necessary condition (but not sufficient,
see Section III-A3) for atomicity. Indeed, whenever an asset
transfer is not correctly published the time-lock acts by not
modifying the original asset ownership, i.e., transferring the
asset back to the original owner (see [34; 35] for more details).
Focusing separately on the commitment protocol, it is
possible to derive initial properties on blockchain swaps.
2) Commitment protocol: As stated in the following propo-
sition, whenever an asset transfer is not committed, the swap
participant supposed to acquire the asset(s) ends up with
less assets than expected while the original asset owner finds
himself with an extra asset. Next proposition does not depend
on the exact specification maps Xk, so we omit them in the
sequence σT for the sake of simplicity.
Proposition 1. Given a commitment sequence σT =
{(Ak, Ok, Xk)}k∈{1,...,tT }, tT ∈ N : tT ≤ m then, replacing
Ok by bσT
k−1(A
k) in σT i.e., considering a new sequence
σk
T = (A1, O1), . . . , (Ak−1, Ok−1), (Ak, bσT
k−1(A
k)), (Ak+1,
Ok+1), . . . , (AtT , OtT ), for some k ∈ {1, . . . , tT }, implies
that:
(i)
(
b
σk
T
tT
)−1
(Ok) ⊆ (
bσT
tT
)−1
(Ok) and,
(ii)
(
b
σk
T
tT
)−1
(bσT
k−1(A
k)) ⊇ (
bσT
tT
)−1
(bσT
k−1(A
k)).
Proof. The claims follow from the fact that Ak is not given
to Ok in σk
T but it is given back to the original owners.
At time t, assets Ak do not necessarily belong to Ok thus,
Ok could find themselves with no asset i.e.,
(
b
σk
T
t
)−1
(Ok) = ∅.
Moreover, the original asset owners find themselves with both
the original assets and the swapped ones.
488
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
Let us denote by σK
T , with K ⊆ {1, . . . , tT } the sequence of
pairs obtained by replacing (Ak, Ok) in σT by (Ak, bσT
k−1(A
k))
for any k ∈ K (i.e. by the owner(s) of Ak at step k − 1).
3) Sequential phases and beyond: The formalization pro-
vided by Definition 6, enables capturing:
1- Single-asset and multi-assets swaps depending on the
cardinality of the asset set Ak at step k in the commitment
protocol.
2- Swap protocols with sequential publishing and commit-
ment, both single-asset and multiple-assets, where owner-
ship transfers are published and committed according to a
precise temporal order. Every crypto-asset transfer has to
be executed before or after another one. In Section III-A
we show that the sequentiality of the publishing phase
combined with the leader role of a swap participant
guarantees that the commitment ownership is verified.
3- Swap protocols with concurrent publishing where trans-
fers are no longer published according to a given time
order, but may be concurrently created and propagated to
the blockchain network. In fact, it is not essential that the
various transfers are published one at a time but only that
there is a clear distinction between the publication and the
commitment phase. Therefore, the transfers publication
can take place in a concurrential way and this is captured
by the sequence σP where at step j : j ∈ {1, . . . , tP }
multiple assets transfers (Aj , Oj) are published.
4- Swap protocols with snap commitment, where assets
transfers are all committed in the same time.
Proposition 2. A blockchain swap protocol with a snap
commitment scheme satisfying the commitment requirement as
in Definition 8 is atomic.
Proof. By contradiction, if bσT
tT �= b0 ∧ bσT
tT �= b∗ then, since
no problem in the publishing occurs, there should be a situa-
tion where some assets transfers are triggered and some others
are not. However, this contradicts the snap commitment.
4) Decision function: Let us focus on the decision function
F previously defined. A blockchain swap can be completely
driven by the asset owners only, in that case the function
outcomes are all elements of O. On the other hand, we
can have the intervention of an external actor τ entrusted
for committing assets transfers. More precisely, the external
trusted actor cannot publish blockchain contracts in behalf
of asset owners since blockchain swap protocols contemplate
ownership transfers among owners only (as in Definiton 6).
Considering the publishing phase we can notice that every
asset owner is in charge of publishing the signed contract trans-
ferring the asset ownership. In case of multi-assets transfers a
multisig scheme [36] can be adopted.
Definition 9 (ownership requirement). In a blockchain swap
protocol, the decision function FP corresponding to the pub-
lishing sequence σP is such that FP (j) = b0(A
j) ⊆ O for
any j ∈ {1, . . . , tP }, tP ∈ N : tP ≤ m.
Focusing on the commitment phase we can derive the
following definition.
Definition 10. A decision function FT is effective on σT if
and only if FT (k) = Ok for any k ∈ {1, . . . , tT }, tT ∈ N :
tT ≤ m.
Whenever the decision function is effective, agents in Ok
have the power to accept or decline (i.e., redeem or not) the
acquisition of the asset(s) in Ak.
Now, we are ready to analyze the strategic behaviors of
the swap participants in a blockchain swap protocol. In this
paragraph we associate a specific blockchain swap protocol
(σP , σT ) (e.g., sequential, concurrent publishing and snap
commitment) with the corresponding game (in strategic or
extensive form).
D. Swap problem as a game
In the economic sphere, the strategies adopted by the agents
mostly concern the maximization (or minimization) of their
outcomes (e.g., prices or costs). Differently, in decentralized
distributed systems (e.g., blockchains) strategies are related
more on following or deviating from a prescribed protocol.
In the blockchain environment several network and consensus
algorithm attacks have been analyzed through game theoretical
models [37; 38; 39] in order to qualify systems’ strategic
robustness. Considering decentralized swap protocols, the
participants, intervening in both commitment and publishing
phase, are more or less incentivized to stick or not to the
protocol regulating the swap. The outcomes of a single agent,
varying according to personal strategies, result depending
from other agents strategic behaviors, too. What is common
knowledge among the swap participants is the swap protocol
structure that is represented by the pair (σP , σT ).
1) Preliminary notions on games: A strategic form game
is a tuple 〈N, (Si)i∈N , (ui)i∈N 〉 where N = {1, . . . , n} is the
set of players, Si is a finite set of pure strategies or actions for
player i and ui :
∏
j∈N Si → R is a payoff function specifying
for each strategy profile or state s = (si)i∈N ∈ ∏
j∈N Si
player i’ s payoff ui(s) ∈ R, for each i ∈ N .
Given a strategy profile s = (si)i∈N ∈ ∏
j∈N Si, in the
following, s−i will denote s from which the strategy of player
i is removed, i.e. s−i = (s1, . . . , si−1, si+1, sn) and (x, s−i)
will denote the strategy profile s from which si is replaced
by x ∈ Si, i.e. (x, s−i) = (s1, . . . , si−1, x, si+1, sn). We
say that x is a best response to s−i when ui(x, s−i) =
maxy∈Si ui(y, s−i). A state s = (si)i∈N ∈ ∏
j∈N Si is a
(pure) Nash equilibrium of the strategic game 〈N, (Si)i∈N ,
(ui)i∈N 〉, if for every player i ∈ N , it holds that si is a best
response to s−i for each i ∈ N .
An extensive form game (with perfect information) on
N is defined as a tuple 〈N,T, P, (Ah)h∈V , (ui)i∈N 〉 where
T = (V,E) is a tree with root v0 and the set of end nodes
denoted by Z; P : V \ Z → N is a function assigning to
each non-end node (also called decision node) a player in N ;
Ah = {(xh, xi) ∈ E} for each node h ∈ V \ Z is the set of
489
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
edges going from node h to some other node and represents
the set of actions at node h; ui : Z → R is a payoff function
for player i ∈ N . A pure strategy si for player i ∈ N is
a map assigning an action (edge) a ∈ Ah to every node in
P−1(i) and we denote by Si the set of all pure strategy. Any
strategy profile (s1, . . . , sn) results in an end node in Z. So,
to any extensive form game 〈N,T, P, (Ah)h∈V , (ui)i∈N 〉 we
can associate a strategic form game 〈N, (Si)i∈N , (ui)i∈N 〉.
A Nash equilibrium of an extensive form game is a Nash
equilibrium of the associated strategic form game. A subgame
of an extensive form game (with perfect information) on node
v ∈ V \ Z is another extensive form game (with perfect
information) obtained as a part of the directed tree starting
at the decision node v. A subgame perfect equilibrium is
a strategy profile that induces a Nash equilibrium on any
subgame. For more details see, for instance, the book [40].
2) Blockchain swaps as a game: As discussed in Sec-
tion II-C, blockchain swap protocols in both single and multi-
assets case, can be characterized by sequential publishing and
commitment, concurrent publishing and snap commitment.
For those protocols characterized by concurrent moves (i.e.,
concurrent publishing) we can adopt a representation with
general strategic games.
Definition 11. Let 〈A,O, b0, b∗, (ui)i∈O〉 be a swap prob-
lem, let (σP , σT ) be a blockchain swap protocol and let
FP : {1, . . . , tP } → O and FT : {1, . . . , tT } → O ∪ {τ}
be decision functions. We associate the strategic game form
〈N, (Si)i∈N , (ui)i∈N 〉 such that:
• N = O is the set of players;
• (Si)i∈N = {action 1, action 0} is the set of pure
strategies for player i consisting in the pair (follow the
protocol, not follow the protocol) labelled respectively as
action 1 and action 0;
• (ui)i∈N : ui :
∏
j∈N Si → R is the payoff function for
asset owners N = O evaluating the outcomes of type
bσT
tT that is, for every player i we have ui
(
(bσT
tT )
−1(i)
)
.
We model protocols with sequential phases with extensive
form games in order to represent the sequencing of swap
participants’ moves and the fact that at each decision point
asset owners know the moves history so far. Let us recall that
blockchains involved in a swap are of public nature with open
read access.
Definition 12. Let 〈A,O, b0, b∗, (ui)i∈O〉 be a swap prob-
lem, let (σP , σT ) be a blockchain swap protocol and a let
FP : {1, . . . , tP } → O, FT : {1, . . . , tT } → O ∪ {τ}
be decision functions. We associate the extensive game form
Γσ = 〈N,T, P, (Ah)h∈V , (ui)i∈N 〉 such that:
• N = O is the set of players;
• T is a (binary) directed tree such that each directed path
from the root v0 ∈ V to an end node v ∈ Z is formed
by precisely t + 1 nodes and t arcs (V is the set of the
nodes of the tree T and Z ⊂ V is the set of leaf nodes);
• P (v) = FP,T (l(v)), for each v ∈ V \ Z, is the
publisher/activator of the asset transfer(s) at step l(v)
in the protocol (σP , σT ), where l(v) is the number of
arcs between v0 and v on the unique path from v0 to v
(we assume that l(v0) = 0);
• Ah for all h ∈ V is formed by two outgoing arcs in h;
one arc in Ah is labeled with action 1 (i.e., follow the
protocol) and the other one, action 0 (i.e., not follow the
protocol) for any h ∈ V \Z. So, a unique path from v0 to
an end node z ∈ Z identifies a binary vector pz ∈ {0, 1}t
such that pzk is the label of the arc starting from node v
with l(v) = k on the path from v0 to z.
• Any end node z ∈ Z is associated with a unique outcome
corresponding to the map b
σK
T
tT where K ⊆ {1, . . . , tT }
is such that pzk = 0 for any k ∈ K, and pzk = 1 for any
{1, . . . , tT } \K. So, for any i ∈ O, the outcome b
σK
T
t is
evaluated by i with the payoff function ui
(
(b
σK
T
t )−1(i)
)
.
Proposition 3. Let Γσ = 〈N,T, P, (Ah)h∈V , (ui)i∈N 〉 be
the extensive form game associated with the swap problem
〈A,O, b0, b∗, (ui)i∈O〉 and the blockchain swap protocol with
sequential phases (σP , σT ) and let FT : {1, . . . , tT } →
O ∪ {τ} be a decision function. If FT is effective on σT ,
then the strategy profile (ŝ1, . . . , ŝn) that specifies action 1
(follow the protocol) at any node is the unique subgame perfect
equilibrium (in dominant strategies).
Proof. For each node v, by the fact that FT is effective, we
have that P (v) = FT (l(v)) = Ol(v). So, at each decision
node v ∈ V \Z, if player P (v) specifies action 0 (not follow
the protocol) at node v, then by the first claim of Proposition
1, player P (v) ends up with a set of assets that is contained
in the one that player P (v) would obtain if she/he specifies
action 1 at node v. So, the utility of player P (v) is larger if
it chooses, at each decision node, action 1 than action 0. It
follows that at each node v action 1 strictly dominates action
0 for player P (v).
Notice that if (σP , σT ) is efficient, than in Proposition 3 the
unique subgame perfect equilibrium (in dominant strategies)
corresponds to the desired outcome b∗. Proposition 3 shows
that, whenever players in the game have to decide whether to
accept or decline an asset acquisition, they are incentivized to
follow the protocol by accepting the desired asset. However,
a stronger result can be proved.
Proposition 4. Let Γσ = 〈N,T, P, (Ah)h∈V , (ui)i∈N 〉 be
the extensive form game associated with the swap problem
〈A,O, b0, b∗, (ui)i∈O〉 and the blockchain swap protocol with
sequential phases (σP , σT ) and let FT : {1, . . . , tT } →
O ∪ {τ} be a decision function. The decision function FT
is effective on the blockchain swap protocol (σP , σT ), if and
only if the strategy profile (ŝ1, . . . , ŝn) that specifies action
1 (follow the protocol) at any node is the unique subgame
perfect equilibrium (in dominant strategies).
Proof. We have to prove the “if ” since the “only if ” directly
follows from Proposition 3. By contradiction, if FT is not
effective we have the following cases: (i) P (v) = FT (l(v)) =
490
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
bσT
0 (Al(v)), the original owner of the assets decides whether
or not to follow the protocol or, (ii) P (v) = FT (l(v)) = Ok �=
bσT
0 (Al(v)) such that k ∈ {1, . . . , tT } : k �= l(v), the activators
are any player in the game but the original asset owners and
the asset receivers.
(i) Whenever the owners of the assets in the initial con-
figuration have to decide between action 0 (not follow
the protocol) and action 1 (follow the protocol), by the
second claim of Proposition 1 they have no incentive to
follow the protocol σT . That is, not following the protocol
the asset set obtained at time tT is greater then the one
obtained by following the protocol.
(ii) Whenever the activators of transfers (Ak, Ok) are neither
Ok nor bσT
0 (Ak), the situation is more complex. Assum-
ing that players activate only exchanges of other players,
it always exist an activator ol(v) : l(v) ∈ {1, . . . , t}
that has to decide whether to follow the protocol σT or
to deviate by originating the sequence σK
T (defined in
Section II-C). However, the activator would be indifferent
to the two strategies since uol(v)
(
(bσT
t )−1(ol(v))
)
=
uol(v)
(
(b
σK
T
t )−1(ol(v))
)
due to the fact that the cardinality
of the asset set remains unchanged.
Therefore, the strategy profile specifying action 1 (follow the
protocol) at each stage cannot be a perfect equilibrium in
dominant strategies if FT is not effective.
This result seems to rule out any swap protocol with a
non-effective decision function FT : {1, . . . , tT } → O.
However, we can imagine protocols with transaction triggering
mechanism not involving receiving agents (see Section III-B).
It is possible to have a subgame perfect equilibrium by
adopting a penalty mechanism for protocol deviations. Proto-
cols allowing the owner of the asset in the initial configuration
to trigger the exchange have to contemplate a high penalty
overcoming the value of the extra-asset gained in case of
deviation. On the other hand, protocols with players activating
exchanges not involving them may work with small penalties
assigned in case of deviation. More precisely, by adopting
a proper penalty mechanism, “following the protocol” still
represents a subgame perfect equilibrium.
Corollary 1. If the decision function F : {1, . . . , tT } → O
is not effective on a blockhain swap protocol (σP , σT ), then
the strategy profile (ŝ1, . . . , ŝn) that specifies action 1 at any
node is the unique subgame perfect equilibrium (in dominant
strategies) only when combined with a penalty function p :
Ah → R+ such that:
• p(0; k) = ε ∈ R+ for k �= bσ0 (A
l(v)) and,
• p
(
0; bσT
0 (Al(v))
)
= δ + uOl(v)
(
(b
σK
T
tT )−1(Ol(v))
)
− uOl(v)
(
(bσT
tT )
−1(Ol(v))
)
where δ ∈ R+.
In the first case the activators are no more indifferent to the
two strategies σT and σK
T while in the second case the penalty
matches, for a small δ, the advantage in deviating with respect
to following the protocol σT .
III. ATOMIC CROSS-CHAIN SWAP PROTOCOLS
This section is devoted to the analysis of existing cross-
blockchains swap protocols aiming to move forward the cus-
todial trading performed by centralized exchanged services.
A. Sequential publishing and commitment
Here we present the swap solution proposed by Nolan [16]
for permissionless UTXO-based blockchains. Nolan’s protocol
make use of contracts [41], hash-locks as commitment/locking
scheme and time-locks to restore the initial situation conse-
quently to failures in the publishing phase.
Given two asset owners (e.g., Alice and Bob) aiming at
cross-swapping two crypto-assets (e.g., x Bitcoins and y Lite-
coins), the protocol (represented in Fig. 2) works as follows:
1) The agent Alice creates a secret s such that h = H(s),
and publishes a contract transferring the ownership of
her x Bitcoins to Bob on the Bitcoin blockchain. The
contract is locked with the hashlock h and a timelock
ΔBob ensuring that: “Bob can claim the asset property
providing s before time ΔBob”.
2) When Bob confirms that Alice’s contract has been cor-
rectly published on the Bitcoin blockchain, he publishes
a contract on the Litecoin blockchain with the same
hashlock h but with timelock ΔAlice stipulating that:
“before time ΔAlice, Alice can claim the asset property
with secret s”. Note that ΔAlice < ΔBob
3) When Alice confirms that Bob’s contract has been cor-
rectly published on the Litecoin blockchain, she sends
s to Bob’s contract (before time ΔAlice), acquiring the
y Litecoins and revealing s to Bob.
4) Bob then sends s (in the time interval [ΔAlice,ΔBob]) to
Alice’s contract, acquiring the x Bitcoins and completing
the swap.
According to our formalization the two party cross-chain swap
is represented as follows:
σP = {(x,B), (y,A)}, FP (j) = {A,B}, j = {1, 2};
σT = {(y,A), (x,B)} FT (k) = {A,B}, k = {1, 2}.
The protocol assumes that swap participants (i) actively
monitor the involved blockchain in order to confirm contracts
publication and, (ii) adopt a common hashing method. Her-
lihy [29] extends the protocol for multi-assets and multi-agents
swaps (with the secret creators forming a feedback vertex set L
i.e., a subset of V whose deletion leaves D = (V,E) acyclic)
and analyzes under which conditions it is ‘atomic’. Atomicity,
in this case, is defined in a game theoretical fashion: in [29]
a swap protocol is defined as atomic if:
- “following the protocol” is a nash equilibrium strategy
and,
- no conforming party is affected (in terms of payoff) by
a protocol deviation.
491
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2. Two party ‘atomic’ cross-chain swap protocol proposed in [16; 29] characterized by sequential publishing and commitment: σP = {(x,B), (y,A)}
and σT = {(y,A), (x,B)}.
Moreover, multi-asset swaps that are atomic according to [29]
have a strongly connected corresponding digraph D (i.e., for
every pair of distinct owners there is always a path from one
to the other and viceversa).
1) The separating agent: In multi-players protocol imple-
mentations, the role of the secret creator or leader, denoted
as l, becomes crucial. Let us consider only single leader swap
protocols. The latter initiates the publishing and most impor-
tantly the commitment phase of the protocol by disseminating
the secret s. A swap leader reveals the secret whenever all
the contracts transferring her the ownership of the desired
crypto-assets are correctly published. The sequentiality of the
publishing together with the leader role ensures the required
separation between the two phases of the blockchain swap.
Let us formalize this concept in the following proposition:
Proposition 5. A blockchain swap protocol verifying the
atomicity definition proposed in [29] and characterized by:
(i) a leader participant initiating the publication phase
FP (1) = {l} together with the commitment one FT (1) =
{l} when all the contracts where she is directly involved
are published,
(ii) a sequential publishing phase where asset owners are
called to publish as soon as all the contracts transferring
them the desired assets’ property are published,
satisfies the commitment requirement of Definition 8.
Proof. We can state that the last contract(s) to be published are
the ones involving the leader acting as a receiver; OtP = {l}.
If a contract is not correctly published (∃j̄ ∈ {1, . . . , tP } :
Oj̄ ∩ b0(A
j̄) �= ∅), either the receiver is the leader, hence the
commitment cannot start for (i), or the receiver is a different
participant which for (ii) cannot publish her contracts. Indeed,
since the graph is strongly connected, there is a sequence of
participants from the receiver to the leader that will not activate
their contracts.
2) Protocol strategic behaviour: The blockchain swap pro-
tocol presented above works with a sequential commitment
phase where swap participants trigger contracts transferring
them the ownership of the desired assets. Therefore, the
decision function characterizing the protocol is effective. It
should be noted that thanks to Proposition 4 we can derive
a stronger result than the one proposed by the original paper
concerning the players strategic behaviour.
Corollary 2. In the blockchain swap protocol (σP , σT ) pre-
sented in [16] (and generalised in [29]), the strategy profile
(ŝ1, . . . , ŝn) specifying action 1 (follow the protocol) at any
node is the unique subgame perfect equilibrium (in dominant
strategies).
Let us provide (Fig. 3) the graphical representation of
the extensive form game associated to the blockchain swap
protocol (σP , σT ) presented in [16]. We do consider two
owners O = {A,B} swapping two assets A = {x, y} where
tP = tT = 2. Alice, as leader of the swap protocol, is the first
Fig. 3. Extensive form game associated to the blockchains swap protocol, pre-
sented in [16]. Publishing and commitment phases are sequentially executed
one after the other. Outcomes represent the payoffs (assets) owned by Alice
and Bob respectively. The figure represents the backward induction process
for each decision step.
player to decide between action 0 and action 1. Whenever
one of the two parties opts for action 0 during the publishing
phase, due to the commitment requirement (i.e., Definition 8),
the games terminates with the original ownership configuration
as the outcome: bσP
1,2 = b0 = (A,B) for A = {x, y}. If
492
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
Alice does not start the commitment phase the outcome bσT
1
coincides with b0 = (A,B). When Bob is called to decide,
Alice’s previous moves are known; if Bob decide to follow the
protocol the swap takes place, bσT
2 = b∗ = (B,A), otherwise
Alice acquires both the desired asset and the originally owned
one leaving Bob empty-handed, bσT
2 = (A,A). Outcomes in
Fig. 3 represent the payoffs of Alice and Bob respectively.
Subgame perfect equilibria are computed by applying the
backward induction process. By reasoning from the end to
the beginning of the game, at each decision step the strategy
providing a better payoff (i.e., the one providing greater utility)
is selected. Then, considering the game associated to the swap
protocol presented in [16], the sequence of optimal actions is
the one specifying action 1 at each decision step (Fig. 3).
3) Atomicity violations: In [26] the authors observe that the
protocol presented by Nolan [16] is not immune to violation of
the all-or-nothing atomicity as in Definition 7. More precisely,
a time-lock expiration before commitment can lead an honest
swap participant to deviate from the protocol. As in Fig. 3 if
Bob does not commit the transfer at the last decision step (i.e.,
if the time-lock expires before) the outcome is bσT
2 = (A,A)
which differs from both b0 and b∗. Crash failures together
with network delays are some of the possible causes of time-
lock expiration before commitment making the deviating party
ending up with an asset loss. A snap commitment may be a
solution to atomicity violations in asynchronous environments.
B. Concurrent publishing and snap commitment protocols
In [26] authors propose an atomic swap protocol charac-
terized by a concurrent publishing phase and a snap commit-
ment. The protocol AC3TW works with a centralized trusted
authority τ called Trent, acting as a separating agent that
(i) verifies the correctness of the publishing phase and, (ii)
witness the redemption contracts. Thanks to the trusted witness
Trent the protocol benefits from all-or-nothing atomicity and
faster publishing phase with respect to the sequential one (i.e.,
increasing overhead proportional to the number of contracts
involved in the swap).
The protocol constructs for every possible swap configura-
tion a directed graph D = (V,E) similar to the one of [29] (see
Section II-A for more details). D is multisigned by all swap
participants in the set V generating a graph multisignature
ms(D). The signatures order is irrelevant, the multisignature
represents the participants’ agreement on D.
Given two asset owners (e.g., Alice and Bob) aiming at
swapping x Bitcoins for y Ethereum here below the steps
characterizing the two party AC3TW protocol (represented in
Fig. 4):
(1) Alice and Bob create the digraph D and multisign it
generating ms(D).
(2) The multisignature is registered and stored by the central-
ized trusted authority, Trent, only if not registered before
and it is set to a null value �.
(3) Alice publishes the contract C1 on the Bitcoin blockchain
stating that:
- if Bob provides Trent’s signature to the redemption
instance, i.e., if he provides T (ms(D);RD) then, x
Bitcoins’ ownership is transferred from Alice to Bob.
- if Alice provides T (ms(D);RF ) then, the x Bitcoins
are transferred back to Alice.
(4) Concurrently, Bob publishes a contract C2 on the
Ethereum network stating the following:
- if Alice provides T (ms(D);RD) then, y Ethereums’
ownership is transferred from Bob to Alice.
- if Bob provides T (ms(D);RF ) then, the y
Ethereums are transferred back to Bob.
(5) After the publication of Ci : i = 1, 2 either Alice or
Bob requests Trent to trigger a redemption commitment
scheme to redeem the assets. Trent issues T (ms(D);RD)
only if both C1 and C2 are correctly published in their
corresponding blockchains and the value of ms(D) stored
by Trent is �.
(6) Whenever a contract is not correctly published any par-
ticipant can request Trent to trigger a refund commitment
scheme. T (ms(D);RF ) is issued only if ms(D) has
value �.
(7) Depending on the case, Trent sets the value of ms(D) to
T (ms(D);RD) or T (ms(D);RF ) accordingly.
According to our formalization the two party cross-chain
AC3TW protocol is represented as follows:
σP = {({x, y}, {A,B})}, FP (j) = {A,B}, j = {1};
σT = {({x, y}, {A,B}, {X1(x) = B,X1(y) = A})}
FT (k) = τ, k = {1}.
All-or-nothing atomicity is achieved by the fact that the
redemption T (ms(D);RD) and the refund T (ms(D);RF )
events are mutually exclusive. The protocol meets the commit-
ment requirement due to Trent’s witnessing activity. The latter
reduces as well the interactivity (i.e., the active participation of
the swap participants) of the swap protocol [28] with respect
to Nolan’s swap implementation where asset owners have to
be constantly on-line monitoring the involved blockchains.
The two contracts of the AC3TW protocol are respectively
a Bitcoin contract C1 and an Ethereum smart contract C2
(see [41; 42; 43] for more details) therefore, the protocol works
in both UTXO-based and account-based blockchains [44].
Moreover, concerning the protocol strategic behaviour we have
that “following the protocol” is a Nash equilibrium.
Proposition 6. Let 〈N, (Si)i∈N , (ui)i∈N 〉 be the
strategic form game associated with the swap problem
〈A,O, b0, b∗, (ui)i∈O〉 and the blockchain swap protocol
(σP , σT ) characterized by a concurrent publishing and a
snap commitment where the decision function FT is such
that FT (k) = τ ∀k ∈ {1, . . . , tT }. Then, the strategy profile
(ŝ1, . . . , ŝn) that specifies action 1 (follow the protocol) for
every player i is a Nash equilibrium.
493
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 4. Two party AC3TW cross-chain swap protocol proposed in [26] characterized by concurrent publishing and snap commitment: σP = {({x, y}, {A,B})}
and σT = {({x, y}, {A,B}, {X1(x) = B,X1(y) = A})}.
Proof. Given a strategy profile s = (si)i∈N ∈ ∏
j∈N Si
whenever ∃i ∈ N such that si is action 0 then, due to Trent
witnessing, the protocol ends up in the original configuration
b0. The outcome corresponding to the desired configuration
b∗ is reached whenever action 1 is chosen by all the players.
Hence, since ui(b
−1
0 (i)) < ui(b
−1
∗ (i)) ∀i ∈ N , action 1 is
the dominant best response strategy to all s−i ∀i ∈ N .
Fig. 5. Strategic form game associated to the blockchains swap protocol,
presented in [26]. Alice and Bob decide whether to publish or not the contract
on the corresponding blockchain. Outcomes represent the payoffs of Alice
and Bob respectively. By eliminating dominated strategies the emphasized
outcomes are the equilibria of the game. The dominant strategy, the one
providing strictly greater payoffs, is a Nash equilibrium.
Let us analyze the strategic form game associated to the
blockchain swap protocol presented in [26] in the case of two
owners O = {A,B} swapping two assets A = {x, y} where
tP = tT = 2. Strategic form games represent situations where
players make decision simultaneously. In this cases, a matrix
representation (Fig. 5) allows to quickly analyze each possible
outcome. In this case, Alice and Bob have to decide between
action 0 and action 1 during the publishing phase. Once the
transfers are correctly published (i.e., action 1 is chosen by
both players) Trent commit the swap, bσT
1 = b∗ = (B,A)
for A = {x, y}. On the other hand, if one of the two parties
chooses action 0 the outcome is bσP
1 = b0 = (A,B).
In order to identify the game’s equilibria, dominated strate-
gies (i.e., strategies providing a lower utility than others) have
to be eliminated. Two different equilibria are computed: “fol-
lowing the protocol” is a dominant strategy always providing a
greater utility for all the other players strategies, “do nothing”
(i.e., choosing action 0) is a weakly dominant strategy that
provides the same payoffs for all the other players strategies.
Since dominant strategies are always Nash equilibria [40], the
startegy profile specifying action 1 for every player of the
game is a Nash equilibrium.
IV. CONCLUSIONS
This paper formalizes the distributed cross-chain swap prob-
lem in the blockchain context where parties exchange assets
across multiple blockchains. To the best of our knowledge this
work is the first to propose a complete framework allowing to
analyze existing cross-chain swap protocols as strategic games.
We prove that (i) following a swap protocol characterized by
an effective decision function (e.g. the protocol proposed in
[16] and generalised in [29]) is a subgame perfect equilibrium
in dominant strategies while (ii) following a swap protocol
characterized by concurrent publishing and snap commitment
(e.g. the protocol proposed in [26]) is a Nash equilibrium.
The presented framework can be further improved by consid-
ering a formal adversary model and concurrent commitment
schemes (e.g., AC3WN [26]). Our work opens several research
directions. We are currently considering cooperative scenario
where agents may collaborate to form coalitions. Analyzing
the resilience of the cross-chain swap protocols to deviating
coalitions is a challenging research direction. Another inter-
esting open question is generalizing our framework in order
to characterize protocols such as Lightning Networks.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash
system,” 2008, accessed on January 10, 2020. https://
bitcoin.org/bitcoin.pdf.
[2] “Hyperledger Architecture Vol.1, Introduction to
Hyperledger Business Blockchain Design Philosophy
and Consensus,” accessed on January 10, 2020.
https://www.hyperledger.org/wp-content/uploads/2017/
08/Hyperledger Arch WG Paper 1 Consensus.pdf.
[3] V. Buterin, “Ethereum White-paper,” 2016, accessed on
January 10, 2020. https:github.com/ethereum/wiki/wiki/
White-Paper.
[4] M. Green and I. Miers, “Bolt: Anonymous payment chan-
nels for decentralized currencies,” in ACM CCS, 2017.
494
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply. 
[5] M. Hearn, “Corda: A distributed ledger,” accessed
on January 10, 2020. https://docs.corda.net/head/ static/
corda-technical-whitepaper.pdf.
[6] D. Schwartz et al., “The Ripple protocol consensus
algorithm – White Paper,” 2014, accessed on January 10,
2020. https://ripple.com/files/ripple consensus whitepap
er.pdf.
[7] “Tendermint Byzantine-fault tolerant state machine repli-
cation,” accessed on January 10, 2020. http://tendermint.
com.
[8] “Kyber: An On-Chain Liquidity Protocol,” accessed
on January 10, 2020. https://files.kyber.network/Kyber
Protocol 22 April v0.1.pdf.
[9] “Open Application Network,” accessed on January 10,
2020. https://github.com/aionnetwork.
[10] “Cosmos: A Network of Distributed Ledgers,” ac-
cessed on January 10, 2020. https://cosmos.network/
cosmos-whitepaper.pdf.
[11] “Polkadot: Vision for a Heterogeneous Multi-Chain
Framework,” accessed on January 10, 2020. https://
polkadot.network/PolkaDotPaper.pdf.
[12] B. A. Lewis, P.M. and M. Kifer, Databases and trans-
action processing: an application-oriented approach.
Addison-wesley Reading, 2002.
[13] M. Borkowski et al., “Towards atomic cross-chain token
transfers: State of the art and open questions within
tast,” Distributed Systems Group TU Wien (Technische
Universit at Wien), Report, 2018.
[14] “Etherdelta,” accessed on January 10, 2020. https://
etherdelta.com/.
[15] W. Warren, “Front-running, griefing and the
perils of virtual settlement (part 1),” accessed
on January 10, 2020. https://blog.0xproject.com/
front-running-griefing-and-theperils-of-virtual-settlement-
part-1-8554ab283e97.
[16] T. Nolan, “Re: Alt chains and atomic transfers.” accessed
on January 10, 2020. https://bitcointalk.org/index.php?
topic=193281.msg2224949#msg2224949.
[17] “Decred cross-chain atomic swapping,” accessed on Jan-
uary 10, 2020. https://github.com/decred/atomicswap.
[18] “Bitcoin abc,” accessed on January 10, 2020. https:
//github.com/Bitcoin-ABC/bitcoin-abc.
[19] “Bitcoin unlimited,” accessed on January 10, 2020. https:
//github.com/BitcoinUnlimited/BitcoinUnlimited.
[20] “Bitcoin xt,” accessed on January 10, 2020. https://
github.com/bitcoinxt/bitcoinxt.
[21] “Litecoin core integration/staging tree,” accessed on
January 10, 2020. https://github.com/litecoin-project/
litecoin.
[22] “Qtum project,” accessed on January 10, 2020. https://
github.com/qtumproject/qtum.
[23] “Komodo barterdex,” accessed on January 10, 2020.
https://github.com/KomodoPlatform/BarterDEX.
[24] “Komodo (advanced blockchain technology, focused on
freedom),” accessed on January 10, 2020. https://docs.
komodoplatform.com/whitepaper/introduction.html.
[25] “Blockchain.io (your gateway to the internet of value),”
accessed on January 10, 2020. https://blockchain.io/.
[26] V. Zakhary, D. Agrawal, and A. Abbadi, “Atomic
commitment across blockchains,” arXiv preprint
arXiv:1905.02847, 2019.
[27] E. Heilman, S. Lipmann, and S. Goldberg, “The arwen
trading protocols,” 2019.
[28] A. Zamyatin et al., “Xclaim: Trustless, interoperable,
cryptocurrency-backed assets,” IEEE Security and Pri-
vacy. IEEE, 2019.
[29] M. Herlihy, “Atomic cross-chain swaps,” in Proceedings
of the 2018 ACM Symposium on Principles of Distributed
Computing. ACM, 2018, pp. 245–254.
[30] M. Miraz and D. Donald, “Atomic cross-chain swaps:
Development, trajectory and potential of non-monetary
digital token swap facilities,” AETiC, vol. 3, 2019.
[31] J. Zie et al., “Extending atomic cross-chain swaps,”
in Data Privacy Management, Cryptocurrencies and
Blockchain Technology. Springer, 2019, pp. 219–229.
[32] B. Wiki, “Hashlock,” accessed on January 10, 2020.
https://en.bitcoin.it/wiki/Hashlock.
[33] ——, “Timelock,” accessed on January 10, 2020. https:
//en.bitcoin.it/wiki/Timelock.
[34] Coincer, “Atomic protocol n.1,” accessed on January 10,
2020. https://www.coincer.org/2015/01/27/atomic-protoc
ol-1/.
[35] ——, “Atomic protocol n.2,” 2015, accessed on
January 10, 2020. https://www.coincer.org/2015/02/03/
atomic-protocol-2/.
[36] L. Harn, “Digital multisignature with distinguished sign-
ing authorities,” Electronics Letters, vol. 35, no. 4, pp.
294–295, 1999.
[37] T. Eyal and E. Sirer, “Majority is not enough: Bitcoin
mining is vulnerable,” Communications of the ACM,
vol. 61, no. 7, pp. 95–102, 2018.
[38] E. Pagnotta and A. Buraschi, “An equilibrium valuation
of bitcoin and decentralized network assets,” Available
at SSRN 3142022, 2018.
[39] W. Wang et al., “A survey on consensus mechanisms
and mining management in blockchain networks,” arXiv
preprint arXiv:1805.02707, pp. 1–33, 2018.
[40] H. Peters, Game theory: A Multi-leveled approach.
Springer, 2015.
[41] B. Wiki, “Distributed contract,” accessed on January 10,
2020. https://en.bitcoin.it/wiki/Contract.
[42] T. Dickerson et al., “Adding concurrency to smart con-
tracts,” in Proceedings of the ACM Symposium on Prin-
ciples of Distributed Computing. ACM, 2017, pp. 303–
312.
[43] L. Cong and Z. He, “Blockchain disruption and smart
contracts,” The Review of Financial Studies, vol. 32,
no. 5, pp. 1754–1797, 2019.
[44] M. Belotti et al., “A vademecum on blockchain tech-
nologies: When, which and how,” IEEE Communications
Surveys & Tutorials, vol. 21, no. 4, pp. 3796–3838, 2019.
495
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:45 UTC from IEEE Xplore.  Restrictions apply.