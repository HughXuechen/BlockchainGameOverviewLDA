A Blockchain-Based Storage System With Financial Incentives for Load-balancing
A Blockchain-Based Storage System With Financial
Incentives for Load-balancing
Hao Yin , Zijian Zhang , Liehuang Zhu , Meng Li , Xiaojiang Du , Fellow, IEEE,
Mohsen Guizani , Fellow, IEEE, and Bakh Khoussainov
Abstract—Most storage systems adopt distributed architecture to
reach high reliability. In these distributed systems, a well-balanced
data distribution can improve storage reliability. However,
existing schemes rely on dealers to distribute data, bring back
the risk of single-point failure again. In this paper, we propose a
blockchain-based storage system with financial incentives for
load-balancing. Nodes in the system are rational and compete
for data to earn a reward. The only source of storage rewards is
from users’ payment for leasing storage. To reach load-
balancing, we design a new incentive scheme, which contains an
income function to reward the nodes who own proper data and
punish the nodes who own excessive data. In the system, each
node continuously generates a proof of storage. We present a
chain structure using the proofs to detect node failures and
record data distribution. The state of distribution could be
taken as input to the income function for reward allocation. We
decouple the role of nodes from miners to reduce their
workload, making the system more compatible. Our simulation
experiments show efficient performance in the data distribution.
The system can always recover to a balanced status as the
blockchain grows up.
Index Terms—Blockchain-based storage, financial incentives,
game theory, load-balancing, reward allocation.
I. INTRODUCTION
DATA persistence is a common service for most existing
storage systems. Such a system always relies on the data
when it processes requests and executes programs. As a result,
there is an inevitable demand to set up reliable storage for
data preservation. Traditionally, data is stored on a single stor-
age device (personal computer or datacenter server) and can
be easily damaged by single-point failure. It is unfavorable for
applications to be so fragile. To reach high reliability, most
systems adopt distributed architecture for data backup.
The unbalanced distribution of data replicas can decline
storage reliability, and thus, becoming a new challenge for the
distributed system. Cloud service providers such as Dropbox
and Amazon distribute data to multiple storage nodes in differ-
ent locations but still rely on some centralized master nodes to
assign data. These master nodes also face the risk of single-
point failure, resulting in inaccessible storage service. Peer-to-
peer (P2P) storage works in another way to address the prob-
lem. Each peer is not only a storage node but also a service
provider. The system maintains storage reliability via a reputa-
tion mechanism in peers. However, P2P storage is more
inclined to the popular data, causing a bad performance in the
data distribution.
To remedy the problem, blockchain is proposed to function
as reliable storage in which data is distributed to every node.
Specifically, blockchain can build a credible append-only led-
ger in a P2P network without trust [1], and the ledger is gener-
ally treated as a distributed database for data storage in most
research [2]. Thus, blockchain-based storage emerges as a
novel basic database technology for applications because of
its potential benefit to provide data persistence without loss.
However, one of the biggest challenges of blockchain-based
storage is the capacity limitation. As each miner is required to
hold an identical ledger on its local storage, miners have no
choice but to leave the network when massive data is stored
on-chain [3] sharply increasing storage overhead. The limita-
tion severely hurts reliability and restricts applications. To
expand the capacity, a feasible idea is to store metadata on-
chain and move raw data from the ledger so that the system
can reduce resource waste caused by massive redundancy.
Various cryptographic proofs of storage [4] make it possible
to build such a blockchain-based storage system without
capacity limitation. They synchronize raw data off-chain and
metadata on-chain to reach reliability. Unfortunately, the old
problem is coming back again: How to distribute the off-chain
Manuscript received August 28, 2019; revised July 28, 2020; accepted
October 26, 2020. Date of publication October 29, 2020; date of current ver-
sion July 7, 2021. This work was supported in part by the NSFC General
Technology Basic Research Joint Fund under Grant U1836212, in part by the
Graduate Technological Innovation Project of Beijing Institute of Technology
under Grant 2019CX10014, in part by Anhui Provincial Natural Science Foun-
dation under Grant 2008085MF196, and in part by the National Natural Science
Foundation of China under Grant 62002094. Recommended for acceptance by
Dr. Ruppa Krishnamachary Thulasiram. (Corresponding author: Zijian Zhang;
Liehuang Zhu.)
Hao Yin and Liehuang Zhu are with the School of Computer Science and
Technology, Beijing Institute of Technology, Beijing 100081, China. (e-
mail: yinhao@bit.edu.cn; liehuangz@bit.edu.cn).
Zijian Zhang is with the School of Computer Science and Technology, Bei-
jing Institute of Technology, Beijing 100081, China, and also with the School
of Computer Science, University of Auckland, Private bag, Auckland 92019,
New Zealand. (e-mail: zhangzijian@bit.edu.cn).
Meng Li is with the Key Laboratory of Knowledge Engineering with Big
Data (Hefei University of Technology), Ministry of Education; and School of
Computer Science and Information Engineering, Hefei University of Technol-
ogy, Hefei 230601, China. (e-mail: mengli@hfut.edu.cn).
Xiaojiang Du is with the Department of Computer and Information Sciences,
Temple University, Philadelphia, PA 19122 USA. (e-mail: dxj@ieee.org).
Mohsen Guizani is with the Department of Computer Science and Engineering,
Oatar University, Oatar. (e-mail: mguizani@ieee.org).
Bakh Khoussainov is with the School of Computer Science, University of
Auckland, Private bag, Auckland 92019, New Zealand. (e-mail: bmk@cs.
auckland.ac.nz).
Digital Object Identifier 10.1109/TNSE.2020.3034803
1178 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
2327-4697� 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-1755-8225
https://orcid.org/0000-0002-1755-8225
https://orcid.org/0000-0002-1755-8225
https://orcid.org/0000-0002-1755-8225
https://orcid.org/0000-0002-1755-8225
https://orcid.org/0000-0002-6313-4407
https://orcid.org/0000-0002-6313-4407
https://orcid.org/0000-0002-6313-4407
https://orcid.org/0000-0002-6313-4407
https://orcid.org/0000-0002-6313-4407
https://orcid.org/0000-0003-3277-3887
https://orcid.org/0000-0003-3277-3887
https://orcid.org/0000-0003-3277-3887
https://orcid.org/0000-0003-3277-3887
https://orcid.org/0000-0003-3277-3887
https://orcid.org/0000-0003-3553-0813
https://orcid.org/0000-0003-3553-0813
https://orcid.org/0000-0003-3553-0813
https://orcid.org/0000-0003-3553-0813
https://orcid.org/0000-0003-3553-0813
https://orcid.org/0000-0003-4235-9671
https://orcid.org/0000-0003-4235-9671
https://orcid.org/0000-0003-4235-9671
https://orcid.org/0000-0003-4235-9671
https://orcid.org/0000-0003-4235-9671
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
mailto:
mailto:
mailto:
mailto:
mailto:
mailto:
mailto:
mailto:
data for higher reliability? Similarly, there are also two ideas
to address it. Permacoin [5] assumes an ideal dealer, which is
outside of the blockchain network, to distribute data to miners.
The miners are required to generate proofs to guarantee data
retrievability. It faces the same dilemma as cloud storage that
the system may unavailable because of the single-point attack.
Filecoin [6] treats users as dealers to build a distributed stor-
age market, which modifies blockchain consensus to promote
trading. However, the system has no mechanism to reach
load-balancing in storage, while deploying such a system is
complex.
To address the aforementioned challenges, we propose a
novel blockchain-based storage system for load-balancing in
storage. The system is lightweight and works in a purely dis-
tributed fashion without a dealer. We decouple nodes and min-
ers in our system, which reduces the workload of the miners.
Nodes compete for data with a new incentive mechanism
instead of mining blocks. Such a slight change makes our sys-
tem more compatible than previous work. The proposed
incentive scheme reallocates the storage fees from users,
rewarding the nodes who own proper data and punishing the
nodes who own excessive data. Thus, we reach load-balancing
in blockchain-based storage to improve reliability.
Contributions. Using the universal assumption of rational
participants in the blockchain, our goal is to improve reliabil-
ity with load-balancing in storage. We summarize the contri-
butions as follows.
� We propose an incentive reward sharing scheme. This
scheme contains an income function to reach load-
balancing in storage. We analyze the data competition
between nodes with game theory and discuss the param-
eter about the balanced line.
� We design a balanced blockchain-based storage system
using the block state. The system constructs multiple
storage chains to confirm the state of the mapping from
data to nodes. Based on the state, we use the income
function to allocate reward at each block.
� We simulate data competition between nodes with the pro-
posed incentive mechanism in the blockchain. In the
experiments, we define how to evaluate the load-balancing
and give the simulation algorithm. The results show a
good performance in the data distribution.
Organization. The rest of the paper is organized as follows.
We present related work in Section II. We then introduce pre-
liminaries in Section III. Section IV gives an overview of our
balanced blockchain-based storage system. In Section V, we
present an incentive scheme for load-balancing in our pro-
posed system. Section VI takes some simulation experiments
to verify the effect of our system, and Section VII discusses
details about the system and summaries future work. Finally,
we conclude this paper in Section VIII.
II. RELATED WORK
The related work on the blockchain-based storage system is
twofold. Some works directly treat the blockchain as a decen-
tralized database [7] to various areas, while others pay more
attention to expanding the blockchain storage capacity without
concerning the meaning of data.
In terms of the former, we summarize some research and proj-
ects that store application data to the blockchain [8]. Li et al. [9],
[10] stored their vehicular data on the blockchain for reliable fog
computing, which also protected user privacy. Zou et al. [11]
proposed ChainFS to implement data access control in cloud
storage. The system distributed key and operated logs with
blockchain. A client must be authenticated by the blockchain
before getting the data. Xia et al. [12] adopted a similar method
to protect patient privacy in cloud environments. It designed
multiple roles including user, issuer, and verifier to share elec-
tronic medical records. Zyskind et al. [13], [14] proposed a
decentralized computation platform based on secure multiparty
computation (SMPC). The platform stored access control poli-
cies on blockchain tomanage user permissions [15].
Some open-source projects also proposed blockchain-based
solutions for diverse areas. For example, Factom [16] pro-
vided an unalterable record-keeping system for businesses and
governments by creating a data layer on top of Bitcoin. The
system store actual data in a peer-to-peer storage network
while put the hash of the data into blocks. Blockstack [17]
constructed a global storage system based on Bitcoin to embed
a zone file into a block. The zone file has a relatively small
size and contains the hash of Uniform Resource Locator
(URL) that pointer to a large file, where the large file is out-
sourced to cloud storage. BigchainDB [18] designed a distrib-
uted database that leverages the blockchain’s characteristics
of decentralized control and immutability. The database com-
bines NoSQL query language to realize efficient querying and
permission.
In terms of the latter, some new technologies are introduced
to the blockchain for a more usable blockchain-based storage
system. Li et al. [19] designed a distributed cloud storage
architecture based on blockchain, directly writing the URL of
file replicas into a transaction. According to the records, users
can retrieve files from the distributed storage network (DSN).
Miller et al. [5] proposed Permacoin to repurposed consensus
work for data preservation. They used a novel local proof of
retrievability (POR) to bind miners’ disk and the blockchain.
Miners must store the files assigned by a dealer in the local
disk to get a mining reward. Sengupta et al. [20] proposed Ret-
ricoin with a compact POR scheme to improve the efficiency
in storage, bandwidth, and the cost of verification. Kopp et al.
[21], [22] proposed a distributed file storage with financial
incentives. Miners submit the POR of the stored files and get
rewards when clients store and retrieve the file.
Based on the cryptographic proof protocol, some open-
source projects build blockchain-based storage systems with
more scalability. Storj [23] enabled users to trade storage
space. Users and any peers in the network can audit storage
providers by challenging the POR protocol. The system also
introduced sharding [24], extended Kademlia [25] and redun-
dancy to ensure reliability. Filecoin [6] established a distrib-
uted storage market, where clients and miners send bid and
ask orders respectively. After matching a deal, miners stored
the files and submitted the proposed non-interactive proof of
YIN et al.: BLOCKCHAIN-BASED STORAGE SYSTEMWITH FINANCIAL INCENTIVES FOR LOAD-BALANCING 1179
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
space-time (Post) to the ledger. Filecoin used the power, sum
of storage assignments for miners, to elect a leader in each
epoch.
Previous works keep the information synchronization using
various proof of storage protocols. Although it can expand
blockchain capacity, the system fails to make full use of stor-
age because most systems did not consider load-balancing.
Besides, introducing a dealer may cause a single point attack,
which reduces system reliability. We trade-off both of them
and reach load-balancing with an incentive mechanism that
implements adaptive data distribution.
III. PRELIMINARIES
In this section, we show a relatively common way to build a
blockchain-based storage system. The system applies a variant
proof of storage protocol to synchronize state between data
on-chain and data off-chain. Then, it evaluates storage contri-
butions based on the blockchain’s state and promotes miners
to participate by a new incentive mechanism.
A. The Local Proofs of Storage
Various proof of storage protocols, such as proof of retriev-
ability (POR) [26] and proof of data possession (PDP) [27],
are used to ensure data integrity. Generally, this type of proof
of storage is a challenge-response protocol including two par-
ticipants, prover and verifier. A prover accepts the challenge
from a verifier and convinces the verifier that the data is
indeed stored. Due to the proof is much smaller than raw data,
a cloud storage system [28] provides high-quality service with
the proof protocol. Users can check whether their data is lost
or modified by challenging the cloud service provider.
Permacoin [5] was the first blockchain-based storage sys-
tem that applies a non-interactive POR scheme to the block-
chain. Instead of consuming power in pure proof-of-work
(POW), the system lets miners compute valid proofs to obtain
advantages in mining. In this scenario, a miner becomes a
prover in the POR protocol while the blockchain network (i.e.
all miners) is treated as a verifier. The miner randomly selects
challenges to generate a valid proof block that satisfies the tar-
get in POW. The system requires miners to provide storage,
which brings two benefits. On the one hand, it partially trans-
fers miner’s computation to meaningful work, i.e. storage. On
the other hand, the POR scheme is transformed into a non-
interactive protocol.
However, the non-interactive proof protocol cannot prevent
miners from outsourcing data to cloud storage because a veri-
fier has no specific prover in the single message protocol. Any-
one who gets data can generate a valid proof block, and thus,
miners can mitigate the computation to others. To avoid data
outsourcing, Permacoin binds a miner and its proof blocks
with a trapdoor (i.e. a miner’s private key), localizing the
proof protocol. The blockchain network verifies a proof with
the corresponding public key of the miner. We abstract the
local POR scheme in Fig. 1.
The local POR scheme in blockchain binds a miner’s
trapdoor, which transforms the basic POR protocol into
non-interactive as well as localized. We can apply this
approach in blockchain for diverse purposes.
B. Blockchain-Based Storage System
Here we show a general construction method to build a
blockchain-based storage system based on the variant proofs
of storage. It usually includes two steps, which are proof gen-
eration and storage reward.
Step 1: Proof Generation. Miners are required to submit a
valid block or a transaction containing proofs of storage. The
proof in blockchain represents the miner’s work for data pres-
ervation. They attempt different random challenges to satisfy
the condition for validity.
Step 2: Storage Reward. To encourage miner participation
in storage, the system gives mining advantages to the miner
who is dedicated to the storage work. The blockchain has the
whole records of all miners’ work, making the successful min-
ing bias to the miner with more contributions.
The system can adopt different parameters to evaluate min-
ers’ contributions. For example, Permacoin checks the proofs
in new blocks while data is assigned by some dealer. Compu-
tation in proofs of storage determines the miner’s contribution.
Filecoin [6] checks the proofs in new transactions of a storage
market. The miner who provides more local storage makes
more contributions.
Since the reward comes from mining a new block, a miner
needs to be a storage node if the miner wants to get some
rewards. This idea makes the miner cost heavy storage (block-
chain data plus user data) without extra income, and the sys-
tem is bad at compatibility because of large modifications of
the program code. Besides, the system relies on a dealer for
data distribution otherwise gets not load-balancing of storage,
Fig. 1. The local POR scheme.
1180 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
which causes that the existing system cannot show a better
performance in storage.
IV. DESIGN OF THE BALANCED BLOCKCHAIN-BASED
STORAGE SYSTEM
In this section, we design a novel blockchain-based storage
system based on general blockchain-based storage and adopt
the proposed incentive scheme as a storage reward. The
dynamic situation that nodes join or leave as the blockchain
grows up is taken into consideration.
A. System Overview
In the system, storage nodes do not rely on the block
reward. Thus, we decouple the role of nodes from miners and
reconstruct the system model with the following three roles.
� User: A data owner who uses our system’s storage ser-
vice and pays for the data storage.
� Miner: A peer in the blockchain network who partici-
pates in mining and maintains a ledger (i.e. blockchain)
with arbitrary state.
� Node: A node who provides local storage in the system
to get financial reward from the blockchain.
We illustrate the system model in Fig. 2. The miners form a
blockchain network while the nodes form a storage network,
and the two networks have no intersection in principle. Our sys-
tem runs iteratively by the following steps. First, a user regis-
ters a rental bill for data storage and deposits fees. Second, the
blockchain records the state of data and nodes and adopts a
hash ring to allocate data for nodes instead of relying on a
dealer, from which nodes obtain the distribution results. Third,
the user finds those nodes who are responsible for storing the
data and uploads it. Fourth, upon receiving raw data, the nodes
constantly generate the local proof and submit it to the block-
chain so that they can get paid off for providing storage space.
Fifth, the blockchain computes time by every block and allo-
cates storage fees in each unit time. The nodes who submit
valid proof to the blockchain (i.e. verified by all miners) get
paid off, otherwise, the partial fees will return to the user.
Note that users’ payments for storage are the only source of
reward that encourages node to participate in proofs of stor-
age. Miners no longer need to compute the proofs for mining
advantages, and the consensus also has no change. Thus, we
do not damage the existing incentive mechanism and consen-
sus protocol in the blockchain. We leverage the blockchain’s
state and make some modifications to transactions and blocks
for reward allocations, which is lightweight and compatible
with any blockchain.
B. Block State and Transactions
At a high-level, the blockchain can be treated as an arbitrary
state machine where a new block is taken as inputs to trigger
state changes. The payments of users include the data informa-
tion, which writes the data into the state. The proofs submitted
by nodes include the identity, which also writes the node into
the state. Thus, we can get the state of data and nodes at a spe-
cific block height.
In the system, we define two types of transactions for users
and nodes respectively to update the block state. For users, a
Rent transaction is used to lease storage for data preservation,
which also decides the length of the lease. The block state will
keep the data until it expires. The longer the user leases, the
higher the user pays. For nodes, the system requires them to
generate proofs continuously, which is used to detect if the
node is offline or failed like a heartbeat mechanism. Nodes sub-
mit Join transactions to participate in storage by containing the
proofs specified to the data. In the incentive scheme, we allow
the node who seizes too much data to discard some data for
maximum profit. Thus, we also design a Quit transaction for
nodes to give up the specific data preservation in advance.
A Node submits Join transactions for corresponding data
until the data expires. The process is similar to that a computer
starts multiple threads where each thread stores different data.
A node maintains multiple storage chains in the block state.
The blockchain will remove the storage chain if the data
expires or detecting failures, and a Quit transaction can
actively remove the storage chain.
Here we give a concrete design of the three transactions.
For Rent transaction, we let did denote the identity of data.
We use the local POR scheme to generate proofs, and thus, we
need to include a Merkle tree’s root of the data in the transac-
tion, which is denoted by drt. Block is the common time
counter in the blockchain, which can be used to define the
time to store tts, an integer number that specifies a block-
based counter. fee is denoted as rental fees that are computed
by renting time and data size. To simplify the system, we
assume that users upload data with the same size which is
treated as unit size. The transaction has the following form:
txrent :¼ ðdid; drt; tts; feeÞ.
For Join transaction, we use Prove algorithm in Fig. 1 to
output the valid proof . The node first refers to a Rent transac-
tion for seizing the data, where the transaction is located by
the block hash bid and the index idx in the transaction lists.
Then, the node continuously submits Join transaction by refer-
ring to the last transaction. The transactions form a chain, and
Fig. 2. System model.
YIN et al.: BLOCKCHAIN-BASED STORAGE SYSTEMWITH FINANCIAL INCENTIVES FOR LOAD-BALANCING 1181
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
data is stored in the node during the span of the chain. We for-
mulate the transaction as follows:
txjoin :¼ ðbid; idx; proofÞ.
For Quit transaction, the purpose is to end the storage chain
and drop the data. We use a similar structure to Join transac-
tion but replace proof with the same public key pk used in the
proof and attach the signature s. Thus, the transaction has the
following form:
txquit :¼ ðbid; idx; pk; sÞ.
C. Common Rules
State changes can be triggered by users and nodes, where
the blockchain keeps the state of two sets: data set and a map-
ping set from data to a node. The blockchain updates the data
set when static Rent transaction occurs and removes the data
from the set if it expires. Whereas, the mapping set is dynami-
cally determined by two transactions. Join transactions form a
chain, building the mapping relationship from data to a node.
The blockchain removes the mapping from the set only if the
node does not submit the next Join transactions within max
interval blocks or submits the Quit transaction.
As shown in Fig. 3, we present a simplified version of
blockchain where blocks are chained by the right arrow in red.
At each block, we let the square in olive denote the current
state, which contains a data set and a map set that builds a con-
nection from data to nodes. The square in purple includes par-
tial transaction lists with any three types of transactions. We
illustrate how the state of blockchain changes under these
transactions as follows. At block N, we already have data d1
recorded in the state, where the data d1 is connected to node
n2 because of a Join transaction appears. A Rent transaction
for data d2 makes the data lease storage from block N to block
N+4. At block N+1, since a Rent transaction for data d3, the
state of data set keeps three data now. A Quit transaction from
node n2 deletes the previous connection from d1 to n2, but
node n1 builds a new connection with data d2 via a Join trans-
action. At block N+2, the map set in the state creates a new
mapping that node n2 seizes data d3. After that, node n2 con-
stantly submits Join transactions to maintain the mapping
relation. In the system, we require that the maximum interval
blocks between two consecutive Join transactions are less
than 2 for heartbeat simulation. Although node n1 submits the
Join transaction to seize data d2 at block N+3, the state of
block N+4 still removes the mapping from d2 to d1. Lastly, at
block N+4, the state drops data d2 because of expiration, and
only the mapping from d3 to n2 keeps in the state.
Here we define some rules with the storage chains to solve
several potential attacks when applying the proposed incentive
scheme. Firstly, users pay for the data with one piece of fees,
and the nodes compete for the storage reward to reach load-
balancing. We have the first rule as follows.
Rule 1: One data is only allowed to be assigned to one node
except for data backup.
Secondly, Assuming the data set is fixed in a period, we
allow nodes to have multiple identities in the system. However,
a malicious node would create lots of identities to decline the
balanced line, causing that some nodes with more data get pun-
ished. To avoid such behavior (also known as Sybil attack [29]),
we define the second rule to raise the attack cost.
Rule 2: Only the node with at least one data would be
counted into the data competition.
Thirdly, malicious nodes can forge a mass of data for more
reward or reducing the system capacity. We impede it by
adjusting the financial reward, making the rational nodes give
up this non-profit action. We have the third rule as follows.
Rule 3: The node’s income of storing one data at a unit time
must less than the user’s price of renting storage.
In the system, users pay for the renting and know the
detailed about storage location and changes from the block-
chain. The system allows users to decide the number of data
replicas, and users need to pay more fees for backup. Mean-
while, miners and nodes will get rewards for their hard work,
making the system in a good running cycle.
D. Reward Allocation
Now we consider a reward allocation for the three roles to
promote participation in the proposed system. Ignoring the
block reward for miners, the system collects the storage fees
Fig. 3. The storage chains.
1182 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
and makes reallocation. We let p denote the unit price of stor-
age lease with one block time. The node gets profit from p by
computing the income function. We let the ratio r < p
according to Rule 3, i.e. r ¼ kp where ð0 < k < 1Þ.
Due to Quit transaction can actively end the storage chain,
the data have two statuses in the Data set. We illustrate the sta-
tus changes and reward allocation in Fig. 4. The ‘stored’ circle
contains the data that includes in the Map set, and the
‘waiting’ circle contains the data that is not stored by any
nodes. The data not in the set is thrown into ‘removed’ circle.
New data with its reward is added into the ‘waiting’ circle via
a Rent transaction. The blockchain will allocate the reward to
users, miners, and nodes when mining a new block.
For users, the blockchain returns the fees of a block to users
if the data is in the ‘waiting’ circle. This is a remedy for leas-
ing failure. Miners get a fixed reward from the data in the
‘stored’ circle. For example, the miner who mines a new block
with a stored data can obtain að1� kÞp rewards. The block-
chain counts the amount of data stored in the node and com-
putes the income function to reward the node. When some
nodes seize too much data, there is a part of lost rewards as
punishment to the nodes. To avoid a node to be a miner for
picking up the fees, miners cannot recover the lost rewards.
V. AN INCENTIVE SCHEME FOR LOAD-BALANCING
In this section, we consider designing a financial incentive
scheme to reach load-balancing in storage without dealers.
The blockchain-based storage system uses the scheme instead
of mining rewards, which decouples storage nodes from min-
ers for lightweight implementation.
A. Data Competition
We first assume a static situation that there are a fixed set of
data and a fixed group of nodes. At any point, the nodes com-
pete with others for the data and store it. We can treat the pro-
cess as a game without nodes leave. In the game, the
information about how much data a node gets is completely
public because we simulate the scenario of blockchain. We let
nodes arbitrarily seize data but the data belong to only one
node, which means that some nodes get few data if the others
get more. We formalize the game as follows.
Let m denote the number of data, we assume the data with
the same size to simplify the game. We have n nodes in the
group, and each node gets di data where i ¼ 1; 2; . . .n. We
also let d ¼ m
n denote the balanced line in data distribution.
The goal of the game is to make each node approximates to
this line for load-balancing, i.e. di � d. Thus, we define the
node’s profit by three-stage. When di < d, the more data
stored the more profits the node gets. When di > d, the situa-
tion reverses. And the node gets the highest profit when di ¼
d. The game is as shown in Table I with three strategies.
We simplify the game with two players, which can easily
extend to multi-player. Note that two nodes cannot seize more
than d data simultaneously. Thus, the game does not exist in
the three situations that we tag with ‘�’. We have constraint
with f < ðdiÞ < max and f > ðdiÞ < max, where f < ð�Þ
and f > ð�Þ denote the node’s profit when the amount of
stored data di < d and di > d, respectively. While max is
the maximum value. According to game theory, we reach the
equilibrium when all nodes seize d data.
B. Income Function
We design an income function for nodes to decide how
much profit the node should obtain. The source of income and
reward allocation are discussed in Section IV. To promote
load-balancing, we should encourage nodes to seize more data
when di < d and persuade nodes to drop some data when
di > d. Thus, the income function consists of two monotoni-
cal functions. Function gmonotonically increases and function
h monotonically decreases. We use the triangular fuzzy num-
ber ð0; d;vdÞ to describe the income function, where v decides
the extent of punishment having v 2 ð1; n�. If a node seizes
more than d data, the node can get less profits than before.
Once the number of stored data exceeds vd, the node gets no
profit.
As shown in Fig. 5, x coordinate represents the amount
of data the node gets, and the y coordinate is the node’s
income with normalization. According to the definition of
triangular fuzzy number, the ratio of function g is x�0
d�0 and
the ratio of function h is vd�x
vd�d
. Thus, the income function
is computed in (1).
F ðxÞ ¼
gðxÞ ¼ x
d
ð0 � x � dÞ
hðxÞ ¼ �1
dðw�1Þxþ w
w�1 ðd < x � wdÞ
0 otherwise:
8<
: (1)
Besides, we compute the cost of a node by its storage space,
computing power, and transaction fee. All of these are linear
to the amount of stored data, and we let the cost function be
CðxÞ ¼ cx with a constant value of c. According to the report
Fig. 4. The status changes and reward allocation.
TABLE I
THE GAME OF DATA COMPETITION
YIN et al.: BLOCKCHAIN-BASED STORAGE SYSTEMWITH FINANCIAL INCENTIVES FOR LOAD-BALANCING 1183
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
of data storage lifespans [30], hard disk and flash storage have
around 5 years’ lifetime. The cost is quite low when using the
storage device every once based on the market price. Espe-
cially in our system nodes can use their spare storage to gain
extra. Thus, the nodes motivate to store data because of the
condition 0 < c < < 1
d
.
We let the function fðxÞ ¼ F ðxÞ � CðxÞ denote the node’s
profit. The profit function satisfies the game of data competi-
tion because the nodes obtain the maximum profit only if they
store d data. However, we need to avoid the situation that no
one is willing to seize new data when all nodes get the maxi-
mum profit. It is possible to occur because new data change
the value of d, which affects the nodes’ profit.
C. The Selection of Balanced Line
Given the fixed d and w, nodes’ profit is dependent on d that
draws a balanced line for each node. To avoid the situation
mentioned above, we assume that a node has x � d data, and
the node would have xþ 1 > dþ 1
n data if it seizes one new
data. We have
y ¼ x
d
� cx; (2)
and
y0 ¼ �1
ðdþ 1
nÞðw� 1Þ ðxþ 1Þ þ w
w� 1
� cðxþ 1Þ; (3)
where y denotes the node’s profit currently and y0 denotes the
node’s profit after storing one new data.
We require the inequality y0 > y at any point, making the
group of nodes can always store new data. We consider an
extreme situation of x ¼ d and compute as follows.
�1
ðdþ 1
nÞðw� 1Þ ðxþ 1Þ þ w
w� 1
� cðxþ 1Þ >
x
d
� cx
�1
ðdþ 1
nÞðw� 1Þ ðdþ 1Þ þ w
w� 1
� 1 > c
�ðdþ 1Þ
ðdþ 1
nÞ
þ w� ðw� 1Þ > ðw� 1Þc
1� ðdþ 1Þ
ðdþ 1
nÞ
> ðw� 1Þc
1
n
� 1 > ðw� 1Þðdþ 1
n
Þc
(4)
As shown in (4), due to the fact that we have n 	 1, the
item in the right side is always negative. But the item in the
right side always greater than 0 because of the constraint w 2
ð1; n�. That is to say, there is no more profit when nodes get
maximum profit at d. The awkward situation happens at a spe-
cial case of njm, causing that each node reaches the optimum,
and no one would accept the new data. Thus, we need to select
a new balanced line to solve the case, making at least one node
store the new data.
We redefine d ¼ bmnc þ 1, and thus, d� x ¼ 1 when the
special case happens. Like the beginning, every node com-
petes to seize new data for profit. An incentive scheme is fin-
ished with the income function (1) and the defined d, which
can reach load-balancing according to the game theory. We
apply the incentive scheme to the blockchain-based storage
system by replacing the block reward.
VI. EXPERIMENTS
In this section, we take some experiments by simulating the
data competition between the nodes. The nodes use the
income function to decide whether store or drop data. Eventu-
ally, the system stay in a load-balancing.
A. Setup
We use a smart contract on the Ethereum platform to simu-
late our system. This contract can store the state and input the
defined transactions. The average block time [31] is around
13.3 seconds so that we can easily detect the node’s heartbeat
to finish the reward allocation. The goal of the incentive
scheme is to reach balanced data distribution. We use standard
deviation to evaluate the extent of load-balancing, and a histo-
gram is a more direct way to illustrate the status of the system.
For convenience, we recall the partial notations in Table II.
Standard deviation can quantify the amount of variation of a
set of data values, which could be applied in the number of
data stored in the node. We compute the standard deviation in
an extreme case that one node owns all data. As shown in (5),
s0 is approaching to 1 when n is large enough. For explicit
observation, we let q ¼ s
m denote as the balanced index to
evaluate the data distribution. Note that q 2 ½0; 1Þ never equal
to 1 because we magnify the denominator tom.
Fig. 5. The linear income function.
TABLE II
NOTATION USED
1184 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
s0 ¼
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
ðn� 1Þ � ðm
n
Þ2 þ ðm�m
n
Þ2
r
¼
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
ðm
n
Þ2 � ½ðn� 1Þ þ ðn� 1Þ2�
r
¼ m
n
�
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
ðn2 � nÞ
p
¼ m �
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
ð1� 1
n
Þ
r
: (5Þ
Next, we simulate how the nodes compete for the data when
data is upload to the system. We use the Java program to create a
data buffer and a set of nodes. Every new block simulating a
‘tick’ in a clock updates the state in the blockchain. The state
includes the number of data and the mapping from data to node.
We restrain that each node takes one step in one block time, seiz-
ing one data, dropping one data, or stay. Due to the node finds
new data at different time order, we transform it into random
selection.We show the pseudo-code of block tick in Algorithm 1.
We simplify and slow down the state changes from the
blockchain. In a practical system, the node can operate several
data in one block time, which is the same as the users. We
take two types of experiments as follows to observe the
changes in the balanced index.
B. Start From Scratch
In the first experiment, we build the system from the very
beginning. Let the number of nodes as n ¼ 100, n ¼ 200, and
n ¼ 500. We feed just one data to the system at each block
tick, making the nodes compete for the only data. According
to Algorithm 1, the nodes see the data at a different time and
decide to seize it or ignore it. If the income of storing one new
data is more than before, the node will submit Join transaction
to hold the data until it expires.
We simulate the process with 100 executions and record the
balanced index at every block tick. Fig. 6 shows the changes of
q as time goes. To reveal the changes clearly, we accumulate
100 results without average computation. We have an interest-
ing finding that q almost approach to 0 when m is an integer
multiple of n, which means the best status in load-balancing.
Although the index ups and downs at every interval, the whole
q is enough small and presents a downward trend. Thus, the
experimental results meet the requirement of load-balancing in
data distribution.
C. Some Special Cases
We design the second experiment to test whether the system
can recover to the status of load-balancing when encountering
node failures. The experiment sets an initial status of the data
distribution in the system for situation simulation. We con-
sider two extreme cases of data distribution: 1) ladder distribu-
tion, and 2) peak distribution.
In the first case, we assume that there is a list of nodes,
where the next node always has one more data than the previ-
ous node. The shape of the data distribution likes a ladder. We
draw its histogram in Fig. 7 a where n ¼ 100. In statistics, this
distribution is terrible for load-balancing because the number
of data is dispersed to the nodes.
We execute Algorithm 1 to simulate system running. Some
nodes choose to drop unnecessary data for a higher reward,
while the discarded data is seized by the node with mass free
storage. We conduct 100 rounds of tick operation with 100
experiments and get the average results about index changes
in Fig. 7 c. The results indicate that the system can rapidly
recover to the status of load-balancing. The convergence rate
of this process is �1:21 computed by linear fitting, where the
system becomes stable after 40 block ticks. Fig. 7 e draws the
histogram after execution. The most nodes store almost d data
in the system, which reach storage load-balancing.
Algorithm 1: State changes in one block tick
1: Get the array N of the number of data the node stored and the
integer D of data that wait to be distributed;
2: int len ¼ N :length;
3: int S ¼ 0, initialize a zero integer for removed data;
4: int[] rs ¼ getRandSeqðlenÞ, get a random sequence that
includes len integers from 0 to len� 1 without repeat;
5: int i ¼ 0;
6: while i < len do
7: int p ¼ rs½i�;
8: double cuVal ¼ F ðN ½p�Þ;
9: if D > 0 then
10: double inVal ¼ F ðN ½p� þ 1Þ;
11: if inVal > cuVal then
12: D -= 1;N½p� += 1; continue;
13: end if
14: end if
15: double deVal ¼ F ðN ½p� � 1Þ;
16: if deVal 	 cuVal then
17: S += 1;N ½p� -= 1;
18: end if
19: i++;
20: end while
21: D += S;
22: returnnull
Fig. 6. The changes of q in the system with different nodes scale where data
is uploaded one by one.
YIN et al.: BLOCKCHAIN-BASED STORAGE SYSTEMWITH FINANCIAL INCENTIVES FOR LOAD-BALANCING 1185
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
In the second case, we consider a more extreme situation
that a minority of nodes store most data. Assuming there are
100 nodes, we let 10 nodes store 100 data while the others
only get one (restrain by Rule 2). The shape of the data distri-
bution likes a peak, which is shown in Fig. 7 b. And this distri-
bution is more terrible than the first case.
We take similar steps to simulate the system. Due to only
several nodes hold more than d data, they gradually transfer
the data to the others for more reward. We repeat 100 experi-
ments to get the average results. As shown in Fig. 7 d, the sys-
tem can also recover to the status of load-balancing. The
convergence rate of this process is �2:94 computed by linear
fitting, where the system becomes stable after 90 block ticks.
Compared to the ladder distribution, the peak distribution is
more extreme so that it has faster convergence rate. We draw
the histogram after execution in Fig. 7 f, showing that most
nodes get maximum profit.
VII. DISCUSSION AND FUTURE WORK
We establish a balanced blockchain-based storage system,
which promotes load-balancing in storage via an incentive
Fig. 7. The experiment results for evaluating system reliability. .
1186 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
scheme. Each node stores the proper amount of data for maxi-
mum rewards.
A. Incentive Model
In existing schemes, the node gets the reward from its stor-
age contribution in block mining. It means that a node must be
a miner in the blockchain, and thus, miners increase the addi-
tional storage overhead. But it also gets a benefit that the
miner cannot earn an extra reward with Sybil attack because
there is only one winner at each block. Our incentive scheme
changes the income source from block rewards to storage fees
so that we decouple the node from the miner to mitigate the
pressure of the blockchain network. To avoid data loss, users
cost more storage fees to upload data replicas for high reliabil-
ity. However, one data means one reward. The node with
enough storage space might create lots of identities to earn
extra rewards. It makes a bad performance (but not destroy the
system) of data backup because all the user’s data replicas
might store at the same location. To restrict it, consortium
blockchain with an access mechanism is a good choice to
build such a system.
B. Resource Exhaustion Attack
To calculate the miner’s contribution, the state-of-art
blockchain-based storage system needs to confirm the current
state by checking the whole blockchain from the beginning.
Akin to proof-of-stake, the stake in such a system is equal to
storage contribution. Kanjalkar et al. [32] found resource
exhaustion attacks in the PoS-based blockchain. To check a
state (e.g., coinage in Peercoin [33]), miners have to backward
the blockchain for inspecting all possible transactions. Thus,
they temporarily store a received new block in memory before
confirming the block invalid. Adversaries exploit this vulnera-
bility to fill up a miner’s memory with fake blocks to exhaust
resources, causing the miner cannot deal with new blocks. For-
tunately, our system allows the blockchain to track only the
state of recent blocks, which is defined by the maximum inter-
val blocks, so that prevents such an attack.
VIII. CONCLUSION
This paper proposed a balanced blockchain-based storage
system. We design an incentive mechanism containing a linear
income function to reach load-balancing in storage. The node
who owns the proper number of data can get maximum
rewards in the system. Then, we use storage fees from users as
the source of rewards and apply the incentive mechanism to
the blockchain-based storage. We require the nodes to contin-
uously submit a proof for ensuring data retrievability. The
proofs are chained to detect whether a data is stored in some
node at a specific block. The proposed system decouples nodes
from miners, making the system lightweight and more com-
patible with any blockchain. Our simulation experiments ver-
ify that the incentive scheme can always make the system
reach load-balancing in storage with any cases.
REFERENCES
[1] J. Bonneau, A. Miller, J. Clark, A. Narayanan, J. A. Kroll, and
E. W. Felten, “Sok: Research perspectives and challenges for bitcoin and
cryptocurrencies,” inProc. IEEE Symp. Secur. Privacy, 2015, pp. 104–121.
[2] K. Sultan, U. Ruhi, and R. Lakhani, “Conceptualizing blockchains:
Characteristics & applications,” CoRR, vol. abs/1806.03693, 2018. [Online].
Available: http://arxiv.org/abs/1806.03693
[3] A. Rich. Op_return and the future of bitcoin, 2017. [Online]. Available:
https://bitzuma.com/posts/op-return-and-the-future-of-bitcoin/
[4] J. He, Z. Zhang, M. Li, L. Zhu, and J. Hu, “Provable data integrity of
cloud storage service with enhanced security in the Internet of Things,”
IEEE Access, vol. 7, pp. 6226–6239, 2018.
[5] A. Miller, A. Juels, E. Shi, B. Parno, and J. Katz, “Permacoin: Repurpos-
ing bitcoin work for data preservation,” in Proc. IEEE Symp. Secur.
Privacy, 2014, pp. 475–490.
[6] P. Labs. Filecoin: A decentralized storage network, 2017. [Online].
Available: https://filecoin.io/filecoin.pdf
[7] H. Li, K. Gai, Z. Fang, L. Zhu, L. Xu, and P. Jiang, “Blockchain-enabled
data provenance in cloud datacenter reengineering,” in Proc. ACM Int.
Symp. Blockchain Secure Crit. Infrastructure, 2019, pp. 47–55.
[8] K. Gai, Y. Wu, L. Zhu, M. Qiu, and M. Shen, “Privacy-preserving
energy trading using consortium blockchain in smart grid,” IEEE Trans.
Ind. Inform., vol. 15, no. 6, pp. 3548–3558, Jun. 2019.
[9] M. Li, L. Zhu, and X. Lin, “Efficient and privacy-preserving carpooling
using blockchain-assisted vehicular fog computing,” IEEE Internet
Things J., vol. 6, no. 3, pp. 4573–4584, Jun. 2019.
[10] M. Li, Y. Chen, S. Zheng, D. Hu, C. Lal, and M. Conti, “Privacy-pre-
serving navigation supporting similar queries in vehicular networks,”
IEEE Trans. Dependable Secure Comput., to be published, doi:
10.1109/TDSC.2020.3017534.
[11] Y. Tang et al., “ChainFS: Blockchain-secured cloud storage,” in Proc.
IEEE 11th Int. Conf. Cloud Comput. (CLOUD), 2018, pp. 987–990.
[12] Q. Xia, E. B. Sifah, A. Smahi, S. Amofa, and X. Zhang, “BBDS: Block-
chain-based data sharing for electronic medical records in cloud envi-
ronments,” Information, Multidisciplinary Digit. Publishing Inst., vol. 8,
no. 2, pp. 44, 2017.
[13] G. Zyskind, O. Nathan, and A. Pentland, “Enigma: Decentralized compu-
tation platform with guaranteed privacy,” CoRR, vol. abs/1506.03471,
2015. [Online]. Available: http://arxiv.org/abs/1506.03471
[14] G. Zyskind, O. Nathan, and A., ‘S’. Pentland, “Decentralizing privacy:
Using blockchain to protect personal data,” in Proc. IEEE Secur. Pri-
vacy Workshops, 2015, pp. 180–184.
[15] K. Gai, Y.Wu, L. Zhu, L. Xu, andY. Zhang, “Permissioned blockchain and
edge computing empowered privacy-preserving smart grid networks,”
IEEE Internet Things J., vol. 6, no. 5, pp. 7992–8004, Oct. 2019.
[16] P. Snow, B. Deery, J. Lu, D. Johnston, and P. Kirby, Factom: Business
processes secured by immutable audit trails on the blockchain, 2014.
[Online]. Available: https://www.factom.com/
[17] M. Ali, J. Nelson, R. Shea, and M. J. Freedman, “Blockstack: A global
naming and storage system secured by blockchains,” in Proc. USENIX
Annu. Tech. Conf., 2016, pp. 181–194.
[18] T. McConaghy et al., Bigchaindb: A scalable blockchain database,
2016. [Online]. Available: https://www.bigchaindb.com/whitepaper/big-
chaindb-whitepaper.pdf
[19] J. Li, J. Wu, and L. Chen, “Block-secure: Blockchain based scheme for
secure p2p cloud storage,” Inform. Sci., vol. 465, pp. 219–231, 2018.
[20] B. Sengupta, S. Bag, S. Ruj, and K. Sakurai, “Retricoin: Bitcoin based
on compact proofs of retrievability,” in Proc. 17th Int. Conf. Distrib.
Comput. Netw., 2016, pp. 1–10.
[21] H. Kopp, D. M€odinger, F. Hauck, F. Kargl, and C. B€osch, “Design of a
privacy-preserving decentralized file storage with financial incentives,”
in Proc. IEEE Eur. Symp. Secur. Privacy Workshops, 2017, pp. 14–22.
[22] H. Kopp, C. B€osch, and F. Kargl, “Koppercoin–a distributed file storage
with financial incentives,” in Proc. Int. Conf. Inf. Secur. Practice Expe-
rience, 2016, pp. 79–93.
[23] S. Wilkinson, T. Boshevski, J. Brandoff, and V. Buterin, Storj a peer-to-peer
cloud storage network, 2014. [Online]. Available: http://storj.io/storj.pdf
[24] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena,
“A secure sharding protocol for open blockchains,” in Proc. ACM SIG-
SAC Conf. Comput. Commun. Secur., 2016, pp. 17–30.
[25] P. Maymounkov and D. Mazieres, “Kademlia: A peer-to-peer informa-
tion system based on the xor metric,” in Proc. Int. Workshop Peer-to-
Peer Syst., 2002, pp. 53–65.
[26] A. Juels and B. S. Kaliski Jr, “Pors: Proofs of retrievability for large files,”
in Proc. 14th ACMConf. Comput. Commun. Secur., 2007, pp. 584–597.
YIN et al.: BLOCKCHAIN-BASED STORAGE SYSTEMWITH FINANCIAL INCENTIVES FOR LOAD-BALANCING 1187
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
https://dx.doi.org/10.1109/TDSC.2020.3017534
[27] G. Ateniese et al., “Provable data possession at untrusted stores,” in
Proc. 14th ACM Conf. Comput. Commun. Secur., 2007, pp. 598–609.
[28] K. Gai, K.-K. R. Choo, and L. Zhu, “Blockchain-enabled reengineering
of cloud datacenters,” IEEE Cloud Comput., vol. 5, no. 6, pp. 21–25,
Nov./Dec. 2018.
[29] J. R. Douceur, “The sybil attack,” in Proc. Int. Workshop Peer-to-Peer
Syst., 2002, pp. 251–260.
[30] M. Casey. Data storage lifespans: How long will media really last?
2020. [Online]. Available: https://blog.storagecraft.com/data-storage-
lifespan
[31] BitInfoCharts. Ethereum block time historical chart, 2020. [Online].
Available: https://bitinfocharts.com/comparison/ethereum-confirmation-
time.html
[32] S. Kanjalkar, J. Kuo, Y. Li, and A. Miller, “Short paper: I can’t believe
it’s not stake! resource exhaustion attacks on pos,” in Proc. Int. Conf.
Financial Cryptography Data Secur., 2019, pp. 62–69.
[33] S. King and S. Nadal, “Ppcoin: Peer-to-peer crypto-currency with proof-
of-stake,” Self-Published Paper, August, vol. 19, p. 1, 2012.
Hao Yin received the B.E. and M.S. degrees from the
University of Science and Technology, Beijing, in
2015 and 2018, respectively, in information security
and software engineering. He is currently working
toward the Ph.D. degree with the School of Computer
Science and Technology, Beijing Institute of Tech-
nology. His research interests include applied cryp-
tography, security and privacy, and blockchain.
Zijian Zhang is an Associate Professor with the
School of Computer Science and Technology, Beijing
Institute of Technology. He is also a Research Fellow
with the School of Computer Science, the University
of Auckland. He was a Visiting Scholar with the Com-
puter Science and Engineering Department, State Uni-
versity of New York, Buffalo, in 2015. His research
interests include design of authentication and key
agreement protocol and analysis of entity behavior
and preference.
Liehuang Zhu is a Professor with the School of
Computer Science and Technology, Beijing Institute
of Technology. He is selected into the Program for
New Century Excellent Talents with the University
from Ministry of Education, China. His research
interests include cryptographic algorithms and secure
protocols, Internet of Things security, cloud comput-
ing security, big data privacy, mobile and Internet
security, and trusted computing.
Meng Li received the B.E. degree in information
security from the Hefei University of Technology,
Hefei, China, in 2010, and received the M.S. and
Ph.D. degrees in computer science and technology
from the Beijing Institute of Technology, in 2013 and
2019, respectively. He is currently an Associate
Researcher with the School of Computer Science and
Information Engineering, Hefei University of Tech-
nology, China. He was sponsored by the China
Scholarship Council to study as a Visiting Ph.D. stu-
dent with the Broadband Communications Research
Lab, University of Waterloo and Wilfrid Laurier University, from September
2017 to August 2018. He has authored or coauthored more than 30 research
papers. His research interests include applied cryptography, security and pri-
vacy, vehicular networks, edge computing, and blockchain.
Xiaojiang Du (Fellow, IEEE) received the B.S. and
M.S. degrees in electrical engineering (Automation
Department) from Tsinghua University, Beijing,
China, in 1996 and 1998, respectively. He received
the M.S. and Ph.D. degrees in electrical engineering
from the University of Maryland, College Park, in
2002 and 2003, respectively. He is a Tenured Full
Professor and the Director of the Security And Net-
working Lab with the Department of Computer and
Information Sciences, Temple University, Philadel-
phia, USA. He serves on the Editorial Boards of three
international journals. He has authored or coauthored more than 450 journal
and conference papers in these areas, as well as a book published by Springer.
His research interests are security, wireless networks, and systems. He won
the Best Paper Award at IEEE ICC 2020, IEEE GLOBECOM 2014 and
the Best Poster Runner-up Award at the ACM MobiHoc 2014. He is a Life
Member of ACM.
Mohsen Guizani (Fellow, IEEE) received the B.S.
(with distinction) and M.S. degrees in electrical engi-
neering, the M.S. and Ph.D. degrees in computer engi-
neering from Syracuse University, Syracuse, NY,
USA, in 1984, 1986, 1987, and 1990, respectively. He
is currently a Professor with the CSE Department,
Qatar University, Qatar. Previously, he was in differ-
ent Academic and Administrative Positions with the
University of Idaho, Western Michigan University,
University of West Florida, University of Missouri-
Kansas City, University of Colorado-Boulder, and
Syracuse University. He has author or coauthored more than nine books and
more than 500 publications in refereed journals and conferences. His research
interests include wireless communications and mobile computing, computer
networks, mobile cloud computing, security, and smart grid. He is currently the
Editor-in-Chief of the IEEE Network Magazine, serves on the Editorial Boards
of several international technical journals and the Founder and Editor-in-Chief
of Wireless Communications and Mobile Computing journal (Wiley). He guest
edited a number of Special Issues in IEEE journals and magazines. He also
served as a member, Chair, and General Chair of a number of international con-
ferences. Throughout his career, he received three teaching awards and four
research awards. He was also recipient of the 2017 IEEECommunications Soci-
ety WTC Recognition Award as well as the 2018 AdHoc Technical Committee
Recognition Award for his contribution to outstanding research in wireless
communications and Ad-Hoc Sensor networks. He was the Chair of the IEEE
Communications Society Wireless Technical Committee and the Chair of the
TAOS Technical Committee. He was the IEEE Computer Society Distin-
guished Speaker and is currently the IEEE ComSoc Distinguished Lecturer. He
is a SeniorMember of ACM.
Bakh Khoussainov received the Ph.D. degree in
mathematics from the Algebra and Logic Depart-
ment, Novosibirsk University, USSR. He is currently
a Professor with the Computer Science Department,
The University of Auckland, New Zealand. His
research interests include computable algebraic sys-
tems and model theory, automata and automatic
structures, games on finite graphs and complexity,
abstract data types and algebraic specifications,
computably enumerable reals and randomness. He is
also an Editor of the Journal for Symbolic Logic.
1188 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:18:37 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice