Two-Level Stackelberg Game for IoT Computational Resource Trading Mechanism: A Smart Contract Approach
Two-Level Stackelberg Game for IoT
Computational Resource Trading Mechanism: A
Smart Contract Approach
Zetao Yang , Kang Liu ,Member, IEEE, Yufei Chen , Wuhui Chen ,Member, IEEE, and Mingdong Tang
Abstract—To support the increasing computation-intensive applications in the Internet of Things (IoT), edge computing is introduced
to provide mobile devices computing resources for performing low-latency tasks. Therefore, how to design an effective and secure
computing resource allocation mechanism is attracting increasing attention. A lot of works have been done to design an effective
computational resource market for IoT, but the problems of vulnerability and inefficiency still exist. In this article, we propose a two-level
Stackelberg game-based computing resource trading mechanism for mobile IoT devices with a credit-based payment approach, which
is implemented by smart contracts on blockchain. In our model, the Stackelberg game consists of two levels, i.e., leader-level and
user-level. In the leader-level, the computing service provider (CSP) and its agent constitute a composite leader. The agent purchases
computing resource from CSP on credit and acts as a broker among leader-level and user-level reselling these computing resources to
users. In the user-level, every user experiences social externality, which means users are interdependent. The leader-level subgame
makes credit payment easier by making loaning and trading become a joint credit payment. The user-level subgame makes the market
more active and closer to reality by introducing social externality. Besides, smart contracts can prevent malicious behaviors such as
delay payment. We also conduct equilibrium analysis and prove the existence and uniqueness of the Nash equilibrium in our
Stackelberg game-based model. Finally, we conduct numerical experiments to evaluate the cost of smart contracts and the
performance of each entity with the proposed pricing mechanism.
Index Terms—Computing resource trading, edge-cloud computing, Stackelberg game, social externality, smart contract, mobile blockchain
Ç
1 INTRODUCTION
WITH the continually increasing popularity of intelligent
devices and wireless access technology, the mobile
Internet of Things (IoT)with newapplications, e.g., face recog-
nition, driverless autonomous vehicle application, instanta-
neous translation, has been rapidly developed [1]. However,
when we apply these emerging applications in mobile IoT,
the challenge of limited computing power and storage capaci-
ties should be addressed. To address this challenge, mobile
edge computing has been introduced to provide mobile IoT
applicationswith bountiful computing resources tomeet their
demand for high computing performance and low-latency.
With the assistance of edge computing, mobile IoT devices
can efficiently implement various smart applications. There-
fore, how to allocate the computing resources of edge servers
is attracting increasing attention.
Much research has been done to find an optimal way for
the computing resource allocation in mobile IoT. First of all,
the centralized approach was adopted to implement the
computing resource allocation in mobile IoT. For example,
Khanna et al. [2] presented a computing resource allocation
system based on the principles of dynamic resource alloca-
tion. Centralized approach can allocate computing resources
reasonably according to the adopted policy and control the
whole system by a strong control center. However, it also
experiences the classical drawbacks of centralization. A
highly centralized system is extremely vulnerable because
once the center is attacked, the whole system will break
down. Besides, the center is not always trustworthy, and it
may sell information of users for some purposes. Due to
these drawbacks, researchers turn to introduce blockchain to
establish a trusted decentralized system [3]. For example,
Xiong et al. [4] introduced edge computing for IoT blockchain
to offload the puzzled consensus tasks to neighboring edge
servers using a Stackelberg game model as a market-based
approach. Qiu et al. [5] proposed a newmodel-free deep rein-
forcement learning-based online computation offloading
approach for blockchain-empowered mobile edge comput-
ing. Such approaches follow market economy law instead of
central control. Therefore, they can avoid the classical prob-
lems of centralization. But the blockchain-basedmarket faces
the challenges of “long return” and “cold start”. The problem
“long return” means that computing resource provider
needs a long time to confirm the completion of the transac-
tion which causes a severe delay and “cold start’ means
newly added nodes lack enoughmoney to purchase comput-
ing resource. These two problems seriously slow down the
whole system.
� Zetao Yang, Kang Liu, Yuhui Chen, and Wuhui Chen are with the School
of Data and Computer Science, Sun Yat-sen University, Guangzhou
510275, China. E-mail: {yangzt5, chenyf75}@mail2.sysu.edu.cn, {liuk73,
chenwuh}@mail.sysu.edu.cn.
� Mingdong Tang is with the School of Information Science and Technology,
Guangdong University of Foreign Studies, Guangzhou 510420, China.
E-mail: mdtang@gdufs.edu.cn.
Manuscript received 18 December 2019; revised 30 July 2020; accepted 9
September 2020. Date of publication 18 September 2020; date of current version
8 August 2022.
(Corresponding author: Wuhui Chen.)
Digital Object Identifier no. 10.1109/TSC.2020.3024729
IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022 1883
1939-1374 © 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tps://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-8646-7653
https://orcid.org/0000-0001-8646-7653
https://orcid.org/0000-0001-8646-7653
https://orcid.org/0000-0001-8646-7653
https://orcid.org/0000-0001-8646-7653
https://orcid.org/0000-0002-0394-6796
https://orcid.org/0000-0002-0394-6796
https://orcid.org/0000-0002-0394-6796
https://orcid.org/0000-0002-0394-6796
https://orcid.org/0000-0002-0394-6796
https://orcid.org/0000-0003-3502-2915
https://orcid.org/0000-0003-3502-2915
https://orcid.org/0000-0003-3502-2915
https://orcid.org/0000-0003-3502-2915
https://orcid.org/0000-0003-3502-2915
https://orcid.org/0000-0003-4430-7904
https://orcid.org/0000-0003-4430-7904
https://orcid.org/0000-0003-4430-7904
https://orcid.org/0000-0003-4430-7904
https://orcid.org/0000-0003-4430-7904
mailto:yangzt5@mail2.sysu.edu.cn
mailto:chenyf75@mail2.sysu.edu.cn
mailto:liuk73@mail.sysu.edu.cn
mailto:chenwuh@mail.sysu.edu.cn
mailto:mdtang@gdufs.edu.cn
To address the “long return” and “cold start” issues, many
researchers introduce credit-basedmechanism into the decen-
tralized market system. For example, our previous work [6]
proposed a credit-based approach for data trading in the
internet of vehicles. Credit payment enables participants to
enjoy computing services before paying. Hence CSP could
provide the computing resource without waiting for confirm-
ing the transaction, and buyers can get the service even if it
lacks money temporarily. Consequently, the problems of
“long return” and “cold start” can be addressed effectively.
However, traditional credit payment is not efficient enough
and lacks the reliability of the market. First, loaning and trad-
ing are separated in traditional credit payment approach,
whichmeans an agentmust borrowmoney from the bank first
and then pay toCSP. That causes a severe delay. Second, users
are isolated and lack connectionwith others which is different
from the realmarket. Besides, the credit payment often suffers
from illegal behaviors. Somemalicious devices may not repay
after enjoying service. Therefore, it is necessary to propose an
improved credit paymentmechanism.
In this paper, we propose a two-level Stackelberg game-
based computing resource trading mechanism consisting of
the CSP with an authorized market-agent together acting as
the composite leader and the set of mobile nodes acting as
the follower. In the leader-level, the agent borrows comput-
ing resources from CSP and resells it. Therefore loaning and
trading are merged into one single procedure called joint
credit payment. In the user-level, we introduce social exter-
nality to make users interdependent. The social externality
means that a person will be encouraged to buy some service
if other people he knows have bought such service. It makes
the market closer to reality because the real market is always
influenced by the bandwagon effect. It also activates themar-
ket and makes full use of the computing resource of the edge
server. Moreover, to assure the reliability of the credit pay-
ment, we introduce smart contracts to regulate the market
and prohibit illegal behaviors like delay payment. The main
contributions of this paper are summarized as follows:
� In this paper, we design a two-level Stackelberg game-
based computing resource trading mechanism for
mobile IoT devices in the credit payment market. We
also derive the Nash equilibriumpoints in the two lev-
els respectively and conduct extensive numerical sim-
ulations for ourmodel.
� In our two-level model, we introduce joint credit pay-
ment in the leader-level. The credit payment can avoid
time-wasting bymaking loaning and trading become a
single procedure. In the user-level, we introduce social
externality. The social externality makes our market
modelmore real and active.
� We give the prototype implementation of two kinds of
smart contracts and analyze their cost. Smart contracts
are deployed on the blockchain. Benefit from the non-
repudiation of blockchain, smart contracts can provide
a reliable regulation for thewholemarket.
The rest of this paper is organized as follows: Section 2
describes previous related works. In Section 3, we introduce
relevant entities in the computing resource market and
explain the security mechanism provided by blockchain. In
Section 4, we formulate a two-level Stackelberg game model
for the pricing problem and credit-based payment scheme. In
Section 5, we conduct the Nash equilibrium analysis for the
Stackelberg game and deliver the optimal strategies of each
participant. In Section 6, we give the prototype implementa-
tion of smart contracts. In Section 7, we give the performance
evaluation through simulation experiments. In Section 8, we
give the conclusions of this paper and the future directions.
2 RELATED WORKS
There are many emerging applications in the mobile Internet
of Things nowadays. However, the limited computing
resource of mobile devices hampers the development of
mobile IoT system. Thus, it is necessary to find a feasible solu-
tion and edge-computing is viewed as a promising solution.
But how to allocate computing resources is a challenge. In the
beginning, centralized approaches are frequently adopted for
computing resource allocation. Amjad et al. [7] proposed a
cognitive edge-computing based framework solution to
achieve an efficient use of edge-cloud resources. Luong et al.
[8] proposed a deep learning approach to find the optimal
allocation rules and the payment rules to the miner, and
implemented a neural network training to optimize the profit
of edge computing service provider. Wang et al. [9] proposed
an algorithm taking the influence of cloud user behavior on
resource allocation into consideration. Li et al. [10] designed a
more flexible cloud resource allocation mechanismwhich can
maximize the profit of the cloud provider and support three
general types of resource requirements from the cloud ten-
ants. However, the centralized system is extremely vulnera-
ble, and the center is not always trustworthy.
To address the problems of centralization, researchers
turn to the market-based approach and introduce block-
chain. Blockchain is considered as a decentralized and
trusted solution. Ferrag et al. [11] gave an overview of the
blockchain protocols and applications for IoT and discussed
the existing issues and challenges in blockchain-based IoT
framework. Blockchain has also been well deployed in
some IoT, such as Industrial IoT and vehicular networks.
Wan et al. [12] have proposed an innovative blockchain-
based IIoT architecture to help build a more secure and reli-
able IIoT. Kang et al. [13] designed a localized P2P energy
trading system for electric vehicles by exploiting a consor-
tium blockchain. Li et al. [14] adopted an iterative double-
sided auction scheme for edge-cloud-assisted IoT in block-
chain network. Xu et al. [15] proposed a blockchain-enabled
decentralized resource management method that could
reduce the cost of energy consumption by requesting migra-
tion and scheduling among data centers. Liu et al. [16] built
a decentralized and flexible video ecosystem by enabling a
direct interaction among users, video providers (VPs), and
service providers in blockchain-based video systems. These
blockchain-based approaches can effectively avoid the clas-
sical drawbacks of centralization. But the problems “long
return” and “cold start” make these approaches inefficient.
To address “long return” and “cold start” issues, the
credit-based approaches have been proposed. Liu et al.
designed a novel debt-credit mechanism [6] for Internet of
Vehicles (IoV) and proposed an optimal pricing mechanism
to promote data trading[17]. The “long return” and “cold
start” can be effectively addressed through the credit-based
1884 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
approaches. But the problems like vulnerability and ineffi-
ciency still exist. In this paper, we introduce joint credit pay-
ment and smart contracts into the two-level Stackelberg
game model [18]. Our model can effectively address the
inefficient loaning in traditional credit-based approaches,
and improve the market performance by social externality
and prevent illegal behaviors with smart contracts.
3 BLOCKCHAIN-BASED COMPUTING RESOURCE
TRADING MARKET
The computing resource market is based on the blockchain
and suffers the potential attack from malicious nodes. The
structure diagram of the blockchain system is in Fig. 1. In
this section, we will introduce related entities in the com-
puting resource trading market, and they are divided into
two levels, i.e., the user-level and the leader-level. Besides,
we will explain the security mechanism provided by the
blockchain and smart contracts.
3.1 Entities in the Computing Resource Trading
Market
In the computing resource trading market, the computing
service provider (CSP) serves various kinds of IoT devices,
e.g., smart vehicles, smart refrigerators, and intelligent vir-
tual assistants, etc. IoT devices continuously generate data
and store their hash value in the blockchain for the purpose
of sharing and security. However, the “mining“ process in
blockchain is a complex hashing problem[19]. Solving this
problem requires a lot of computing power, which is unaf-
fordable for most IoT devices. Fortunately, by purchasing
the computing service of CSP, IoT devices are permitted to
transfer their hash problems to CSP and solve them by uti-
lizing the enormous computing power of CSP. Aiming
to promote the market, we introduce the agent to facilitate
the trading process. With IoT devices acting as users, the
market is led by the composite of CSP and the agent. Enti-
ties in the user-level and the leader-level will be discussed
separately.
3.1.1 Entities in the User-Level
According to [20], there are various types of IoT devices,
including health care devices, security devices and man-
ufacturing devices, etc. There exists a giant computing power
gap among them. For instance, AT90LS8535 (a general
microcontroller applied in sensors) only has 512B RAM[21],
whereas the computer of smart vehicle like Tesla Autopilot
is able to run deep learning application, which consumes
dozens of gigabyte RAM. In addition to the difference in
computing power, the amount of data generated by IoT devi-
ces also varies from case to case. For instance, health devices
need to upload users’ health data frequently [22], whereas
security devices only upload data when used. Data need to
be recorded in the blockchain, which is supported by the ser-
vice of CSP. Therefore, the difference in the amount of data
generated leads to the difference in the desire for computing
service. Considering the differences in computing power
and the desire for computing service, we categorize the IoT
devices into four categories:
1) HCHD devices (High computing power and high
desire for computing service) such as smart vehicles,
urban IoT infrastructures and high-performance
hosts, etc.
2) LCHD devices (Low computing power and high
desire for computing service) such as smart watches,
sensors, etc.
3) LCLD devices (Low computing power and low
desire for computing) electricity devices and security
devices, etc.
4) HCLD devices (High computing power and low
desire for computing service) such as agriculture
infrastructures, retail infrastructures, etc.
Besides, the communication happening among IoT devi-
ces is also a characteristic of IoT. Constricted by the capacity
of battery and computing power, IoT devices adopt differ-
ent communication protocols (IPv6, 6LoWPAN, BLE, etc.)
[23], which results in the difference in the quality of commu-
nication. The communication cost will be discussed in detail
later. Furthermore, we introduce social externality into the
user-level. In the computing resource trading market, pur-
chase behaviors are encouraged by others’ purchasing. If an
IoT device buys the computing service, it will encourage
others to buy the service by communication. This mecha-
nism is designed to activate the market and simulate the
real human market.
3.1.2 Entities in the Leader-Level
In edge computing, IoT devices choose to offload their tasks
to the nearby edge computing node, i.e., CSP. Compared to
cloud computing, the edge computing node can provide
service with lower latency and lower energy consumption
because of the shortening of communication distance [24].
However, it is challenging to decide the allocation of the
computing resources of CSP. In the leader-level, we intro-
duce the trading agent to assist CSP to resell the computing
resources. Note that each CSP only has a single agent. With
the assistance of the agent, CSP is not involved in the trad-
ing process. At first, CSP loans its computing service to the
agent, and then the agent is responsible for reselling its com-
puting service. They form a composite leader to decide the
computing service price and influence the behaviour of IoT
users. Inside the composite leader, they try to maximize
their own profit by adjusting the loaning amount and the
loaning interest.
Fig. 1. The IoTsystem based on blockchain.
YANG ETAL.: TWO-LEVEL STACKELBERG GAME FOR IOTCOMPUTATIONAL RESOURCE TRADING MECHANISM: A SMARTCONTRACT... 1885
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
3.2 Security Provided by Blockchain and Smart
Contracts
As a distributed and decentralized system, blockchain is first
known for Bitcoin. In recent years, some researchers found it
is extremely suitable to apply blockchain technology in IoT if
without the limitation of computing power. For example,
there are always dozens or hundreds of devices in the gen-
eral IoT scene. They need to exchange data and synchronize,
which can be supported by the consensus algorithm in the
blockchain. And data on the blockchain is unable to be tam-
pered with, which makes sure the security of IoT networks.
Besides, Ethereum, a kind of blockchain technology, sup-
ports the Turing-complete programming making it possible
to realize complicatedmarket behaviors in IoT.
3.2.1 Consensus Mechanism
The consensus mechanism guarantees the security and syn-
chronization of IoT data. In the blockchain, the most com-
monly used consensus algorithm is the proof-of-work (POW).
POW requires every added block has to include a noncemake
its hash value contains a certain number of zeros at the begin-
ning. Finding such a nonce is a complicated computing task,
which depends on the computing power of CPU. According
to [19], we can figure out the probability of that attackers suc-
cessfully tamperwith the data in the blockchain
pattack ¼ 1; cevil >¼ chonest
cevil=chonestð Þz; cevil < chonest
�
; (1)
cevil and chonest represent the computing power of attackers
and honest users respectively, and z indicates how many
blocks users choose to wait until they believe a block can
not be tampered with. If users choose to wait for more than
six blocks, then only when attackers control 51 percent or
higher computing power of the blockchain system, can the
data on the blockchain be tampered with. Controlling such
much computing power is almost impossible in a mature
distributed system. Therefore, as long as most IoT devices
are honest users, the data on the blockchain is reliable.
3.2.2 Ethereum and Smart Contracts
Ethereum is considered as the next-generation blockchain
technology and supports Turing-complete programming.
Turing-complete programming makes it possible to build
various markets in the blockchain system. In Ethereum,
there are two kinds of accounts, i.e., the externally owned
accounts and the contract accounts. The former owned by
entities like CSP, and the latter is used to deploy smart con-
tracts[25]. CSP deploys a loaning contract with its agent and
use it to regulate the loaning between them. And the agent
deploys a trading contract to regulate the trading between
the agent and IoT users. Every message delivery and every
call of smart contracts will be recorded as a transaction in
the blockchain and can’t be tampered with unless the
attackers possess more computing power than honest users.
Note that the execution of smart contracts cost computing
power. Therefore, every function call of the smart contract
needs some “gas“ (something like money) to support. This
cost needs to be taken into consideration in our Stackelberg
game based model.
4 STACKELBERG GAME BASED COMPUTING
RESOURCE TRADING MODEL
In this section, we will give an overview of the two-level
Stackelberg game based model and introduce the details of
the user-level and the leader-level respectively. Related util-
ity functions will also be discussed in this section. Parame-
ters are listed in Table 1.
4.1 Overview
There are three main participants in our model: CSP, agent
and the set of IoT devices (Fig. 2). In the leader-level non-
cooperative game Gleader, CSP decides the interest rates for
joint credit payment and the agent decides the amount of
computing resources purchased from CSP. In the user-level
subgame Guser, the agent decides the price of computing
service and each user determines the probability of buying
computing service according to its intrinsic desire, social
externality and price. In the global Stackelberg game, the
composite leader acts as a leader and the set of users acts as
a follower reacting to the leader’s strategy.
TABLE 1
Parameters Table
Symbol Comments
N Set of users. (N ¼ u1; u2; u3; . . . ; unf g)
p Price of computing service.
x Probability of users to buy computing service.
(xi 2 ½0; 1�)
a Strength of social externality.(a 2 ½0; 1�)
G Externality matrix.(gij 6¼ 0, i 6¼ j)
I Identity matrix.
Hi Computing power of ui
ui Intrinsic desire of user ui for computing
service.
V Purchase amount of computing resources for
reselling from CSP
g Interest rate for joint credit payment.
b Coefficient of communication cost with IoT
devices.
� Cost coefficient of smart contracts
v Adjustment factor for discount term.
� Strength of discount term.
Ui Utility of ui.
Ua Utility of agent.
Ucsp Utility of CSP.
Fig. 2. The two-level stackelberg game model.
1886 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
4.2 User-Level Subgame
We assume that there are jN j users in the market. The utility
function of each user can be described as follows:
Ui ¼ ui � pi þ a
P
j gijxj: (2)
The utility function (2) is established based on the social
externality model[26]. Note that the utility of each user is
not only related to its intrinsic desire but also influenced by
other users. The first term ui denotes the intrinsic desire of
user ui for computing service. In the IoT system, there is a
variety of devices like cars, smartphones, and unmanned
aerial vehicles. These devices have different degrees of
demand for computing services. For example, a driverless
car has a strong need for computing service to avoid traffic
accidents. So it is willing to pay for computing service
despite the price. But for a smartphone, it would rather wait
for price reduction instead of paying a high price for imme-
diate computing service. Therefore, ui is used to represent
the different degrees of demand for computing service. And
we use an uniform distribution in 0; 1½ � to generate u. The
second term �pi denotes the expenditure of ui on comput-
ing service. The third term represents the social externality,
and a denotes the strength of it. The element in the external-
ity matrix G is denoted as gij (i; j 2 ½1; jNj�). It implies the
relationship between ui and uj. And the total impact on ui isP
j2N gijx½j�.
4.3 Leader-Level Subgame
The CSP and its authorized agent constitute a composite
leader in the leader-level. There is a non-cooperative game
inside the composite leader. Inside the leader-level game,
the CSP decides the interest rate g for the joint credit pay-
ment, and the agent decides the purchase amount and the
price of computing service. We discuss their utility func-
tions respectively:
The utility function of CSP
UCSP ¼ gðV þ bjN jÞ � g3 V
v�V � V þ bjNjð Þ : (3)
The utility function of CSP can be divided into two parts,
the profit from joint credit payment and the loss caused by
discount. The joint credit payment is defined as the procedure
that agent loans computing resources and then repay the
money within the preset deadline. The agent need to loan
V þ bjNjð Þ computing resources fromCSP. V means the com-
puting resources for reselling, and bjN jmeans the communi-
cation cost with jNj IoT devices. The second term is the
discount term offered by CSP. Tomake full use of the comput-
ing resource, CSP will give the agent a discount to motivate it
to resell computing services. We use g3 V
v�V � V þ bjN jð Þ to
represent this discount effect and � is a the strength of dis-
count. When V grows up, g3 V
v�V � V þ bjNjð Þ will grow up
too. To optimize its own utility, CSP will lower down the
interest rate when V grows up, and it is equivalent to give the
agent a discount. Note that the value of V will never exceed
the value of v. Because the punishment will explode when V
approaches the value ofv. By doing this, we introduce the dis-
count behavior into our model and limit the interest rate in a
reasonable range.
The utility function of agent
Uagent ¼ � p�
P
i Hi þ
P
j gijHj
� �
V þP
i Hi þ
P
j gijHj
� � x
0
@
1
A
T
x
� g V þ bjN jð Þ:
(4)
The agent is responsible for reselling computing resources.
And the trading procedure is based on the blockchain sys-
tem. Therefore, the agent needs to consider the potential
loss caused by malicious attackers. All IoT devices can be
thought of as potential attackers. For a specific user ui, the
gross computing power at its disposal is the sum of Hi and
the computing power from its “friends“. We assume IoT
users can conduct cooperative attacks. For simplicity, we
assume the probability of ui successfully attack the system
is
ðHiþ
P
j
gijHjÞ
Vþ
P
i
ðHiþ
P
j
gijHjÞ
, which is the ratio of its disposable com-
puting power in the all system. Thus, the gross of potential
loss is
P
i
ðHiþ
P
j
gijHjÞ
Vþ
P
i
ðHiþ
P
j
gijHjÞ
. Because all executions of smart
contracts need some gas to support, we use � to express the
cost coefficient of smart contracts. It represents how much
profit can be preserved after deducting the cost of the execu-
tion of the code of smart contracts. If lambda is 0.4, it means
only 40 of profit from selling computing service can be
really obtained by the agent after deducting the execution
cost of smart contracts. The second term �g V þ bjN jð Þ rep-
resents the expenditure for joint credit payment.
5 NASH EQUILIBRIUM ANALYSIS AND BEST
RESPONSES FOR COMPUTING RESOURCE
TRADING
In this section, we prove the existence and uniqueness of the
Nash equilibrium in the user-level and leader-level. And we
will also give the optimal strategies of participants. Besides,
an efficient equilibrium search algorithm will be delivered.
5.1 Equilibrium Analysis for User-Level Non-
Cooperative Subgame
In this subsection, we prove the existence and uniqueness of
the Nash equilibrium in the user-level. Note that the influ-
ence of social externality should be controlled. The market
will be in concussion if there is a strong social externality.
With a strong social externality, every user will change its
mind after seeing others’ new decisions, which results in an
infinite loop. a represents the strength of social externality
and rðGÞ is the largest eigenvalue of G implying the
strength of the externality matrix. We make a constraint for
them to lower down the influence of social externality.
Next, we propose Theorem 1 based on Proposition 3.1 in
[26]:
Theorem 1. There is a unique Nash equilibrium in the user-level
non-cooperative subgame Guser if arðGÞ < 1:
Proof. The problem is a bounded linear complementarity
problem [26]. According to [27], the linear instance of the
mixed complementarity problem has a unique solution if
YANG ETAL.: TWO-LEVEL STACKELBERG GAME FOR IOTCOMPUTATIONAL RESOURCE TRADING MECHANISM: A SMARTCONTRACT... 1887
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
ðI� aGÞ is a P-matrix. As any non-singularM-matrix is a P-
matrix [28], the user-level non-cooperative subgame has a
unique Nash equilibrium if ðI� aGÞ is a non-singular M-
matrix. Because arðGÞ < 1, themaximum singular value of
aG is smaller than one. As aG is a real symmetric, its eigen-
values are equal to the absolute values of its singular values.
So the maximum eigenvalue of aG is less than one too. The
eigenvalues of ðI� aGÞ are all positive and ðI� aGÞ is not
singular. Because the all off-diagonal entries of ðI� aGÞ are
negative. So ðI� aGÞ is a Z-matrix. And a Z-matrix is anM-
matrix when all eigenvalues are all positive. Thus, ðI� aGÞ
is a non-singularM-matrix. The proof is completed. tu
5.2 Best Response Strategies in User-Level
In this subsection, we discuss the best response strategies in
the user-level subgame. First of all, we discuss the user
behaviors in the market. And we propose Theorem 2
according to [26]:
Theorem 2. The users in the user-level non-cooperative subgame
have the optimal strategy x� ¼ ðI� aGÞ�1½1� p�.
Proof. Users will not buy computing service if there are no
benefits in trading. In other words, only when the utility
functions are positive, users will purchase the service. We
set the ûi as threshold
Ui ¼ ~ui � pi þ a
X
j2N
gijxj;
0 ¼ ~ui � pi þ a
X
j2N
gijxj;
~ui ¼ pi � a
X
j2N
gijxj;
~ui ¼ pi � a
X
j2N
gijð1� F ð~uiÞÞ:
(5)
Because F uið Þ is the probability distribution function of
ui and ui is uniformly distributed in the interval 0; 1½ �,
1� F ~ui
� �
denotes the probability that ui � ~ui, which is
the probability that user ui will buy the computing ser-
vice. Therefore, xi ¼ 1� F ~ui
� �
, and we define Ri ¼
pi � a
P
j gijxj.
xi ¼
0; Ri > 1;
1; Ri < 0;
1� pi þ a
P
j gijxj; 0 � Ri � 1;
8<
: (6)
xi can be represented as follow:
xi ¼ 0 ½1� p� ðI� aGÞx�i < 0;
0 �xi � 1 ½1� p� ðI� aGÞx�i ¼ 0;
xi ¼ 1 ½1� p� ðI� aGÞx�i > 0;
(7)
We divide users into three categories: users who will not
buy the service, users who may buy the service and users
who will definitely buy the service. Actually, all users
belong to the second category after enough iterations of
game. In the first case, ½ð1� p� ðI� aGÞxÞ�i < 0, this
term is continuous in pi and xi. When the agent decreases
pi can make ½ð1� p� ðI� aGÞxÞ�i ¼ 0 and xi � 0.
Through price reduction, the agent can get more profit
because of the increase of
P
i pixi. So the first case is not
optimal situation. Similarly, In the third case, when xi ¼
1, the CSP will increase pi to get more profit. The price
increase will stop when ½ð1� p� ðI� aGÞxÞ�i ¼ 0 and
xi � 1. So we have proved that all users are in the second
category and their optimal strategies is
x� ¼ ðI� aGÞ�1½1� p�: (8)
tu
Theorem 3. The best price for IoT users is p� ¼ 1� 1
2 I�ð
aGÞðð1þ
P
i
ðHiþ
P
j
gijHjÞ
ðVþ
P
i
ðHiþ
P
j
gijHjÞÞ
ÞI� aGÞ�1I
Proof. We view p as a function of x: p ¼ 1� I� aGð Þx. The
objective of the agent is maximizing its utility function
Uagent ¼ �ðp�
P
i
ðHiþ
P
j
gijHjÞ
ðVþ
P
i
ðHiþ
P
j
gijHjÞÞ
xÞTx� gðV þ bjNjÞ. We
substitute x for p: Uagent ¼ �ð1� ðI� aGÞx�P
i
ðHiþ
P
j
gijHjÞ
ðVþ
P
i
ðHiþ
P
j
gijHjÞÞ
xÞTx� gðV þ bjNjÞ. We take the partial
derivative of x
@Uagent
@x
¼ 1� 2 1þ
P
i Hi þ
P
j gijHj
� �
V þP
i Hi þ
P
j gijHj
� �� �
0
@
1
AI
0
@
� aG
�
x:
(9)
The partial derivative is negative definite, we can directly
make it equal to zero to optimize the utility function of
agent.
x ¼ 1
2
1þ
P
i Hi þ
P
j gijHj
� �
V þP
i Hi þ
P
j gijHj
� �� �
0
@
1
AI� aG
0
@
1
A
�1
1:
(10)
Therefore, the optimal price is
p� ¼ 1� I� aGð Þx (11)
¼1� 1
2
I� aGð Þ 1þ
P
i Hi þ
P
j gijHj
� �
V þP
i Hi þ
P
j gijHj
� �
0
@
1
AI
0
@
� aG
��1
1:
(12)
tu
5.3 Equilibrium Analysis and Best Responses for
Leader-Level Non-Cooperative Subgame
In this subsection, we prove the existence and uniqueness of
the Nash equilibrium in the leader-level non-cooperative
subgame. In the leader-level non-cooperative subgame,
there are two players, CSP and its agent. CSP adjusts the
interest rate for the joint credit payment, and the agent
adjusts its purchase amount. If Uagent and UCSP are both con-
cave functions, there exists at least one Equilibrium point in
1888 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
the leader-level game. We propose Theorem 4 to prove the
existence of the Nash equilibrium in the leader-level:
Theorem 4. There exists at least one Nash equilibrium in the
leader-level non-cooperative game.
Proof. The first derivative of Uagent with respect to V
@Uagent
@V
¼
�
P
i Hi þ
P
j gijHj
� �P
i x
2
iP
i Hi þ
P
j gijHj
� �
þ V
� �2
� g: (13)
And the second derivative of Uagent with respect to V
@2Uagent
@V 2
¼ �
2�
P
i Hi þ
P
j gijHj
� �P
i x
2
i
ðPi Hi þ
P
j gijHj
� �
þ V Þ3
� 0: (14)
Therefore, Uagent is a concave function with respect to V .
The first derivative of UCSP with respect to g
@UCSP
@g
¼ bjNj þ V � 3V�g2
v� V
: (15)
The second derivative of UCSP with respect to g
@2UCSP
@g2
¼ � 6V�g
v� V
� 0: (16)
Thus, Uagent and UCSP are both concave functions, there
exists at least one Equilibrium point in the leader-level
game. The proof is completed. tu
Then we prove the uniqueness of Nash equilibrium. First
of all, we give the definition of contraction mapping.
Definition 1. Mapping f xð Þ (Rn ! Rn) is a contraction map-
ping if and only if d f x1ð Þ; f x2ð Þð Þ � kd x1; x2ð Þ, 8x1; x2; k <
1, and Rn; dð Þ is a metric space.
And we give the Theorem 5:
Theorem 5. If � >
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiP
i
ðHiþ
P
j
gijHjÞ
P
i
x2
i
4g3
r
and � >
V 2þbjNjvffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
12V 3 bjNjþVð Þ v�Vð Þ
p , there exists an unique Nash equilibrium in
the leader-level non-cooperative game.
Proof. In a non-cooperative game, if the best response func-
tion is a contraction mapping, there is a unique Nash
equilibrium in the game [29]. We make a matrix called A
as follows:
A ¼ 0 @V �
@g
@g�
@V 0
" #
: (17)
According to [29], the best response function of the
leader-level non-cooperative game is a contraction map-
ping if r Að Þ < 1. We make (13) equal to zero to obtain V �
V � ¼
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiP
i
Hiþ
P
j
gijHj
� �
��
P
i
x2
i
g
s
�P
i Hi þ
P
j gijHj
� �
:
(18)
and
@V �
@g
¼ �
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
�
P
i Hi þ
P
j gijHj
� �P
i x
2
i
4g3
vuut
: (19)
Similarly, we make (15) equal to zero to obtain g�
g� ¼
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
vbjNj þ vV � bjNjV � V 2
3V�
r
: (20)
and
@g�
@V
¼ � V 2 þ bjN jvffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
12V 3 bjN j þ Vð Þ v� Vð Þ�p : (21)
The matrix A can be rewritten as follows:
A ¼ 0 �
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
�
P
i
Hiþ
P
j
gijHj
� �P
i
x2
i
4g3
s
� V 2þbjN jvffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
12V 3 bjN jþVð Þ v�Vð Þ�
p 0
2
664
3
775:
(22)
According to Horn and Johnson [30], rðAÞ is bounded by
any of the matrix norms. If
P
i jAikj < 1; 8k, the maxi-
mum column-sum norm of A is less than one. Then the
best response function is a contraction mapping and
there exists a unique Nash equilibrium in the leader-level
non-cooperative game.
				@V �@g
				 ¼ �
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
�
P
i
Hiþ
P
j
gijHj
� �P
i
x2
i
4g3
s							
							 < 1: (23)
then,
� >
ffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiP
i Hi þ
P
j gijHj
� �P
i x
2
i
4g3
vuut
: (24)
Similarly,
@g�
@V
				
				 ¼ � V 2 þ bjNjvffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
12V 3 bjNj þ Vð Þ v� Vð Þ�p
					
					 < 1: (25)
then,
� >
V 2 þ bjN jvffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffiffi
12V 3 bjN j þ Vð Þ v� Vð Þp : (26)
The proof is completed. tu
5.4 Equilibrium Searching Algorithm
The game theory is a kind of abstraction of the competi-
tion in the real world. In game theory, every participant act
as a rational decision-maker to optimize its own utility. Par-
ticipants constantly change their strategies to obtain higher
utilities. And the model reaches a stable state at the Nash
equilibrium point. In the Nash equilibrium point, no partici-
pant has anything to gain by changing only their own strate-
gies. Algorithm 1 is the equilibrium searching algorithm by
simulating the behaviors of participants.
YANG ETAL.: TWO-LEVEL STACKELBERG GAME FOR IOTCOMPUTATIONAL RESOURCE TRADING MECHANISM: A SMARTCONTRACT... 1889
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1. Nash Equilibrium Searching Algorithm in
Two-Level Stackelberg Game
Input: Initial strategies and parameters that satisfies the The-
orems 1, 4 and 5.
Output: Strategies of participants at the Nash equilibrium
point.
1: while Global Nash equilibrium not found do
2: while Leader-level equilibrium not found do
3: V; gð Þ  V �; g�ð Þ
4: Check if the equilibrium point is reached.
5: end while
6: while User-level equilibrium not found do
7: x;pð Þ  x�;p�ð Þ
8: Check if the equilibrium point is reached.
9: end while
10: Check if the equilibrium point is reached.
11: end while
An efficient equilibrium searching algorithm is vital to a
model. The speed of equilibrium searching is an important
indicator of model performance. There are two stages in our
two-level Stackelberg game. In the first stage, CSPand its agent
play a non-cooperative game. When the equilibrium point in
the leader-level has been found, the second stage begins. In the
second stage, users make their decision whether to buy the
computing service and the agent adjusts the price. After that,
the equilibrium point in the leader-level non-cooperative
gamemay change, and leaders play the non-cooperative game
again. Eventually, the two-level Stackelberg game will reach a
stable point, i.e., global Nash equilibrium.We give the detail of
equilibrium searching algorithm in Algorithm 1. Because we
have figured the closed-form best response, the speed of con-
vergence in our model is pretty fast. Relevant experimental
evidencewill be given later.
6 SMART CONTRACTS DESIGNS AND COST
ANALYSIS
In this section, we will give the details and cost analysis of
smart contracts referring to [31]. The smart contract is a reli-
able solution to regulate the market as it is deployed on
blockchain and impossible to be tampered with. We design
two kinds of smart contracts for the leader-level and the
user-level respectively.
6.1 Smart Trading Contract
We use the smart trading contract to manage the computing
service trading. The smart trading contract is created by the
agent. IoT devices can register into the buyer list by calling the
smart trading contract. Registration needs users to deliver ear-
nest money into the account of the smart contract. The earnest
money is a deposit in the smart contract that represents the
buyer’s faith to buy the computing service and the fee of ser-
vice will be deducted from it. After a successful deal, the fee of
computing service will be deducted from it, and the rest will
be returned to the accounts of users. The smart trading contract
permits the agent and users to change their mind at any time
before the end of the game. Besides, access control is also pro-
vided to prevent malicious users from tampering with others’
demands. Themain processes can be summarized as follow:
1) The agent creates and initializes a smart trading
contract.
2) Users call the contract and transfer earnest money
into its account to register into the buyer list.
3) The agent and users adjust strategies based on their
best response function.
4) At the end of trading, the agent and users withdraw
their money.
The pseudocode of the smart trading contract is in
Algorithm 2.
Algorithm 2. Prototype Implementation of Smart Trad-
ing Contract
Description: The smart trading contract is used to manage the
computing resources trading process. Relevant functions of it
will be introduced.
Init:
1: Set the maximum of buyer number, required earnest
money.
2: Record msg.sender as agent.
Register:
1: Check that the trading process is not over.
2: Check that the buyer number has not reached the upper
limit.
3: ifmsg.sender has not registered then
4: Charge earnest money.
5: Record msg.sender as a buyer.
6: end if
SetPrice:
1: Check that the trading process is not over.
2: Check msg.sender is agent.
3: Adjust price.
SetDemand:
1: Check that the trading process is not over.
2: Check msg.sender is a buyer.
3: Adjust its demand.
EndTrading:
1: ifmsg.sender is agent then
2: Deliver the profit to msg.sender.
3: else ifmsg.sender is a buyer then
4: Deliver the earnest money deducted the cost of comput-
ing service to msg.sender.
5: end if
6.2 Smart Loaning Contract
We use the smart loaning contract to manage the joint credit
payment. The smart loaning contract is created by CSP. The
agent registers in the smart loaning contract and deliver ear-
nest money to get an agent qualification. CSP presets the
repayment period T before the loaning begins. Like the smart
trading contract, players are also allowed to change their
minds at any time before the end of the game. The main pro-
cess can be summarized as follow:
1) CSP creates and initializes a smart loaning contract.
2) The agent register in and deliver earnest money to
get an agent qualification.
3) The CSP begins the game and starts the timer.
4) The CSP and its agent adjust strategies based on their
best response function.
1890 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
5) At the end of loaning, CSP and its agent withdraw
their money.
The pseudocode of the smart loaning contract is in
Algorithm 3.
Algorithm 3. Prototype Implementation of Smart Loan-
ing Contract
Description: The smart loaning contract is used to manage the
computing resources loaning process. Relevant functions of it
will be introduced.
Init:
1: Set interest rate, repayment period, required earnest money.
2: Record msg.sender as CSP.
Register:
1: Check that the trading process is not over.
2: Check that the buyer number has not reached the upper
limit.
3: ifmsg.sender has not registered then
4: Charge earnest money.
5: Record msg.sender as a buyer.
6: end if
BeginGame:
1: Check that msg.sender is CSP.
2: Check that the agent has been registered.
3: Start the timer.
Adjust V:
1: Check that the game has begun.
2: Check that msg.sender is agent.
3: Adjust V.
Adjust Gamma:
1: Check that the game has begun.
2: Check that msg.sender is CSP.
3: Adjust g.
EndGame:
1: Check that game has begun.
2: Check that time is up.
3: ifmsg.sender is CSP then
4: Deliver the profit to msg.sender.
5: else ifmsg.sender is agent then
6: Deliver the earnest money deducted the cost of computing
service to msg.sender.
7: end if
6.3 Cost Analysis
In Ethereum, every calling of the smart contracts needs some
gas to support. And the amount of gas needed depends on the
computational complexity of the code. It’s meaningful tomea-
sure the cost of our designed smart contracts. Because it
reflects the computational complexity of the code of the smart
contracts and themoney consumption of calling the contracts.
We conduct the cost analysis of the smart trading contract and
smart loaning contract in Tables 2 and 3 respectively. The exe-
cution cost is the cost of code execution and the transaction
cost is the sum of execution cost and the cost of sending data
to the blockchain. based on the Remix, an Ethereum platform,
we conduct the cost analysis of smart contracts and the results
are in Tables 2 and 3. The base unit of Ethereum isWei, which
is 10�18 Ether. Tables 2 and 3 is in Gwei, which is 10�9 Ether.
According to the current price of Ether, 324.87 per Ether, the
money consumption of deploying the smart trading contract
is only $0.247 and the money consumption of deploying the
smart loaning contract is $0.145. The most frequent operation
is changing strategies. The cost for IoT users to change
demand is $0.05. The cost for the agent to change price and
loaning amount is $0.015 and $0.007. And the cost for CSP to
change the interest rate is $0.007. To sum up, the money con-
sumption of smart contracts is pretty low. Therefore, smart
contracts are suitable to be applied in ourmodel.
7 SYSTEM PERFORMANCE AND NUMERICAL
EVALUATION
In this section, we designed several numerical experiments
about system performance and market demand. We use the
utilities of leaders to measure the effectiveness of resource
allocation. There are two main reasons to choose the utilities
of leaders as the performance indicators of the algorithm.
The first is that the leaders are the manager of the trading
market, so the utilities of them decide whether the market is
sustainable. The second is that the leaders make a profit
from trading. Thus, the amount of profit reflects the degree
of market demand. And the degree of market demand
reflects the utilities of users because only when the utilities
of user are positive, users buy the service. Therefore, the
utilities of leaders can reflect the utilities of users. Based on
the above two reasons, we choose the utilities of leaders as
the performance indicators of the algorithm.
7.1 Experimental Setting
The computing resources in the trading market is computing
power. IoT devices buy the computing service to get
the admission to utilize the computing devices of CSP to
accomplish their computationally complex problems.We use
u to represent the degree of the demand for computing
resources. u is distributed uniformly in interval 0; 1½ �. We use
arðGÞ to represent the strength of social influence. According
to different arðGÞ, we divide markets into three categories
[26]: low social influence market(arðGÞ ¼ 0:1), medium
TABLE 2
Cost of Smart Trading Contract
Function Execution Cost Other Cost Transaction Cost
Deploy 556,565 205,520 762,085
Register 46,804 21,272 68,076
SetPrice 23,817 21,592 45,409
SetDemand 152,713 21,464 174,177
EndTranding(Agent) 373,170 21,272 394,442
EndTrading(User) 140,301 21,272 161,573
TABLE 3
Cost of Smart Loaning Contract
Function Execution Cost Other Cost Transaction Cost
Deploy 300,164 148,904 449,068
Register 42,821 21,464 64,285
BeginGame 21,924 21,272 43,196
SetV 1,881 21,464 23,345
SetGamma 1,925 21,464 23,389
EndGame(CSP) 13,487 21,272 34,759
EndGame(Agent) 15,044 21,272 36,316
YANG ETAL.: TWO-LEVEL STACKELBERG GAME FOR IOTCOMPUTATIONAL RESOURCE TRADING MECHANISM: A SMARTCONTRACT... 1891
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
social influence market(arðGÞ ¼ 0:3) and high social influ-
ence market(arðGÞ ¼ 0:5). The default value of arðGÞ is 0.5.
We use the indicator MIPS (million instructions per second)
to measure the computing power of devices and normalize
the computing power of the edge computing node as 1. Thus,
a 0.5 unit of computing power means half of the computing
power of the edge computing node. The computing power of
edge computing node is nearly 104 times as IoT devices[32].
We use a normal distribution to generate the computing
power of IoT devices. The mean of the normal distribution is
10�4, and the variance is 2:5 � 10�5. According to their com-
puting power and desire for computing service, we catego-
rize them into four categories, such as in Fig. 3. The cost
coefficient of smart contracts � is set to 0.6. It represents how
much profit is preserved after deducting the cost of the execu-
tion of smart contracts. According to [33] the most commonly
used communication protocol, 802.11G, has 54,000 kbps
throughput. The 54,000 kbps throughput occupies nearly
10�5 CPU utilization of the mainframe computer, which is
usually used in the edge computing node[34]. The coefficient
of communication costwith IoT devices is set to 10�5. It repre-
sents the necessary computing power needed for keeping the
communication with IoT devices. The adjustment factor v is
1500. The strength of discount term � is set to 20.
7.2 Convergence Analysis
The speed of equilibrium searching is vital to a game the-
ory-based model. The IoT computing resources trading can
be accomplished timely if the global equilibrium can be
reached in a short time. Especially for mobile IoT scenarios,
low latency is a key performance indicator. Using Algo-
rithm 1, we repeat the convergence experiment with a
default parameter setting one hundred times and average
the experiment results. The convergence result is in Fig. 4.
The number of iterations includes the number of leader-
level inner iterations and the number of user-level inner
iterations. In the first and second subplots, the upper and
lower bound of the red region represent the maximum and
minimum of demand and price respectively, and the line
represents the average value. Because the discrepancy of
the price is much smaller than its variation range, the red
region in the second subplot is not obvious. We will discuss
the price in later subsection. According to Fig. 4., we find
that our model is able to find the global equilibrium within
dozens of iterations with a default parameter setting. In
each iteration, the participants only need to adjust their
strategies based on their best response function, which can
be accomplished in a very short time. Therefore, our IoT
devices are able to accomplish the non-cooperative game
and seal the deal in a very short time. Benefit from the fast
convergence of the algorithm, it is suitable to apply our
model in a mobile IoT environment.
7.3 Performance Evaluation
In this subsection, we compare our two-level Stackelberg
game model with other algorithms, like greedy algorithm,
simulated annealing algorithm and Cournot game without
social influence. The utility functions of users are just the
decision basis for users to buy computing services and are
not influenced by the decisions of users. Thus, we only con-
sider the utilities of CSP and agent as comparison indicators.
They reflect whether the computing resource is allocated
well andwhether the computing tradingmarket is well orga-
nized. Because the computing resources trading market is
managed by them, their profits reflect the effectiveness of the
market. From Figs. 5a and 5b, we can easily find that our
model can let leaders make more profit from computing
resource trading compared to traditional algorithms. Thus,
our algorithm is effective.
7.4 Market Profile
In the computing resources trading market, the demand of
users and pricing of service reflect the market basic informa-
tion. In Section 3, we divide IoT devices into four categories,
HCHD (High computing power and high desire for com-
puting service), LCHD (Low computing power and high
desire for computing service), LCLD (Low computing
power and low desire for computing service), LCHD (Low
Fig. 3. Various types of IoT devices.
Fig. 4. Convergence analysis.
1892 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
computing power and high desire for computing service).
Our experiment results are categorized according to these
four categories. For the reliability of the experiment results,
we repeat the experiment one hundred times and collect
their results in Fig. 6. According to Fig. 6, the distributions
of demands and prices are both spindle-shaped. But the dis-
tribution of demand is more scattered than the distribution
of price. And our experiment results show that the standard
deviation is 0.044312 of demand, which is almost ten times
that of the standard deviation of price, 0.004208. It explains
why the red region in the second plot of Fig. 4 is not obvi-
ous. Therefore, we draw the conclusion that IoT devices are
more sensitive to the market than the agent. Besides, the
distribution of demand and price in the four categories dif-
fer slightly. It implies the desire for computing service and
self-owned computing power is not the key indicators influ-
encing the market behavior. In other words, our model is
adaptive in various IoT scenarios, including smart car net-
works, smart infrastructures networks, etc.
7.5 Social Influence
In our two-level Stackelberg game based model, we intro-
duce the social influence into the user-level. Social influence
can simulate the bandwagon effect in reality. It means a
user’s purchase intention is affected by other users. In this
subsection, we discuss the social influence graph in low
social influence market, medium social influence market,
high social influence market and the market without social
influence. We define social influence of user ui as a
P
j gijxi.
If a user with high potential to influence buys the computing
service, it will promote others to purchase the service. The
high potential to influence others and high demand for the
computing service are both essential to the effective promo-
tion. In Fig. 7, we show the heat maps of social influence in
different markets. For convenience, we make the number of
buyers as one hundred to get a square heat map. Every color
block represents a user’s social influence. From that, we can
find the social influences are stronger in a market with high
social influence strength as it should be. However, another
interesting finding is the discrepancy of social influences are
more obvious in the market with higher social influence
strength. In Figs. 7a and 7b, the colors are very close. In
Figs. 7c and 7d, the color difference is much more apparent.
We view the user with a strong social influence as the poten-
tial assistant of the agent. Therefore, we conclude that if there
is a high strength of social influence, the agent needs to pay
more attention to the potential assistant and satisfy their
need for the purpose of sellingmore computing service.
7.6 Impact of the Number of Buyers
In this subsection, we discuss the impact of buyer
number. The number of buyers reflects the market size. By
investigating the impact of buyer number, we can make
analysis on different size IoT computing resources trading
market. With different values of v, we set the number of
buyers from 50 to 200 and record the utility of CSP and its
agent. The results are in Fig. 8. We can find the utility of the
agent is almost directly proportional to the number of
buyers. However, the utility function of CSP is more like a
parabola. Therefore, an agent should undertake more tasks
Fig. 5. Comparison with three algorithms.
Fig. 6. Market profile.
YANG ETAL.: TWO-LEVEL STACKELBERG GAME FOR IOTCOMPUTATIONAL RESOURCE TRADING MECHANISM: A SMARTCONTRACT... 1893
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
to optimize its utility, and CSP should control its user size.
The most efficient model should be the model with multiple
CSPs and one agent, which is our future improvement
direction. And the conclusion is reasonable in reality
because the computing power of CSP is not unlimited. Serv-
ing too many IoT devices is a hard task for CSP. To sum up,
CSP is more suitable in small size IoT market and the agent
is more suitable in the huge size IoT market. And the model
with multiple CSP and one agent is more efficient.
8 CONCLUSION
In this paper, we have proposed a two-level Stackelberg
game-based computing resource trading mechanism with a
credit-based payment model for the mobile IoT Market. We
introduce social externality into the user-level subgame to
encourage computational resource trading in the market.
Besides, we view CSP and the agent as a composite leader in
leader-level and propose the joint credit payment model to
improve payment efficiency further. For the proposed two-
level Stackelberg-based model, we prove the existence and
uniqueness of the Nash equilibrium in both two levels and
propose an efficient algorithm to search the equilibriumpoint.
We also introduce blockchain with smart contracts which
manage trading such that security and trusty are guaranteed.
At the end of the paper, we make some numerical experi-
ments. We prove our model can converge quickly and com-
pare our algorithm with other algorithms to prove the
effectiveness of ourwork. Thenwe discuss themarket profile,
including market demand and price, social influence graph
and the impact of buyer number. For futurework,wewill dis-
cuss themarketwithmultiple types of service providers.
ACKNOWLEDGMENTS
The work described in this article was supported by
the National Key Research and Development Plan
(2018YFB1003803), the National Natural Science Founda-
tion of China (61802450, 61722214, 61976061), the Natural
Science Foundation of Guangdong (2018A030313005), and
the Program for Guangdong Introducing Innovative and
Entrepreneurial Teams (2017ZT07X355).
REFERENCES
[1] P. Yadav and S. Vishwakarma, “Application of Internet of Things
and big data towards a smart city,” in Proc. 3rd Int. Conf. Internet
Things: Smart Innovation Usages, 2018, pp. 1–5.
[2] A. Khanna and Sarishma, “RAS: A novel approach for dynamic
resource allocation,” in Proc. 1st Int. Conf. Next Gener. Comput.
Technol., 2015, pp. 25–29.
[3] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource
trading in blockchain-based industrial Internet of Things,”
IEEE Trans. Ind. Informat., vol. 15, no. 6, pp. 3602–3609,
Jun. 2019.
[4] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/fog computing resource management and pricing for
blockchain networks,” IEEE Internet Things J., vol. 6, no. 3,
pp. 4585–4600, Jun. 2019.
[5] X. Qiu, L. Liu, W. Chen, Z. Hong, and Z. Zheng, “Online deep
reinforcement learning for computation offloading in blockchain-
empowered mobile edge computing,” IEEE Trans. Veh. Technol.,
vol. 68, no. 8, pp. 8050–8062, Aug. 2019.
[6] K. Liu, W. Chen, Z. Zheng, Z. Li, and W. Liang, “A novel debt-
credit mechanism for blockchain-based data-trading in Internet of
Vehicles,” IEEE Internet Things J., vol. 6, no. 5, pp. 9098–9111,
Oct. 2019.
[7] A. Amjad, F. Rabby, S. Sadia, M. Patwary, and E. Benkhelifa,
“Cognitive edge computing based resource allocation framework
for Internet of Things,” in Proc. 2nd Int. Conf. Fog Mobile Edge Com-
put., 2017, pp. 194–200.
[8] N. C. Luong, Z. Xiong, P. Wang, and D. Niyato, “Optimal auction
for edge computing resource management in mobile blockchain
networks: A deep learning approach,” in Proc. IEEE Int. Conf.
Commun., 2018, pp. 1–6.
[9] J. Wang, J. Liu, and H. Zhang, “Research on resource allocation
scheme based on access control in cloud computing environ-
ment,” in Proc. Int. Conf. Comput. Sci. Appl., 2015, pp. 377–380.
Fig. 8. Utility of leaders.
Fig. 7. Social influence graphs in different markets.
1894 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 15, NO. 4, JULY/AUGUST 2022
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
[10] M. Li et al., “Profit maximization resource allocation in cloud com-
puting with performance guarantee,” in Proc. IEEE 36th Int. Per-
form. Comput. Commun. Conf., 2017, pp. 1–2.
[11] M. A. Ferrag, M. Derdour, M. Mukherjee, A. Derhab, L. Maglaras,
and H. Janicke, “Blockchain technologies for the Internet of
Things: Research issues and challenges,” IEEE Internet Things J.,
vol. 6, no. 2, pp. 2188–2204, Apr. 2019.
[12] J.Wan, J. Li, M. Imran, D. Li, and Fazal-e-Amin, “A blockchain-based
solution for enhancing security and privacy in smart factory,” IEEE
Trans. Ind. Informat., vol. 15, no. 6, pp. 3652–3660, Jun. 2019.
[13] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-
in hybrid electric vehicles using consortium blockchains,” IEEE
Trans. Ind. Informat., vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[14] Z. Li, Z. Yang, and S. Xie, “Computing resource trading for edge-
cloud-assisted Internet of Things,” IEEE Trans. Ind. Informat.,
vol. 15, no. 6, pp. 3661–3669, Jun. 2019.
[15] C. Xu, K. Wang, and M. Guo, “Intelligent resource management in
blockchain-based cloud datacenters,” IEEE Cloud Comput., vol. 4,
no. 6, pp. 50–59, Nov./Dec. 2017.
[16] Y. Liu, F. R. Yu, X. Li, H. Ji, and V. C. M. Leung, “Decentralized
resource allocation for video transcoding and delivery in block-
chain-based system with mobile edge computing,” IEEE Trans.
Veh. Technol., vol. 68, no. 11, pp. 11 169–11 185, Nov. 2019.
[17] K. Liu, X. Qiu, W. Chen, X. Chen, and Z. Zheng, “Optimal pricing
mechanism for data market in blockchain-enhanced Internet of
Things,” IEEE Internet Things J., vol. 6, no. 6, pp. 9748–9761,
Dec. 2019.
[18] S. Feng, W. Wang, Z. Xiong, D. Niyato, P. Wang, and S. S. Wang,
“On cyber risk management of blockchain networks: A game the-
oretic approach,” in IEEE Trans. Services Comput., to be published,
doi: 10.1109/TSC.2018.2876846.
[19] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”
2009. [Online]. Available: https://metzdowd.com
[20] A. Al-Fuqaha , M. Guizani, M. Mohammadi, M. Aledhari, and
M. Ayyash, “Internet of Things: A survey on enabling technolo-
gies, protocols, and applications,” IEEE Commun. Surveys Tuts.,
vol. 17, no. 4, pp. 2347–2376, Fourth Quarter 2015.
[21] M. A. M. Vieira, C. N. Coelho, D. C. da Silva, and J. M. da Mata,
“Survey on wireless sensor network devices,” in Proc. IEEE Conf.
Emerg. Technol. Factory Autom., 2003, vol. 1, pp. 537–544.
[22] Y. Qin, Q. Z. Sheng, N. J. G. Falkner, S. Dustdar, H. Wang, and
A. V. Vasilakos, “When things matter: A survey on data-centric
Internet of Things,” J. Netw. Comput. Appl., vol. 64, pp. 137–153,
2016.
[23] S. Al-Sarawi , M. Anbar, K. Alieyan, and M. Alzubaidi, “Internet
of Things (IoT) communication protocols: Review,” in Proc. 8th
Int. Conf. Inf. Technol., 2017, pp. 685–690.
[24] W. Shi, J. Cao, Q. Zhang, Y. Li, and L. Xu, “Edge computing:
Vision and challenges,” IEEE Internet Things J., vol. 3, no. 5,
pp. 637–646, Oct. 2016.
[25] V. Buterin, “Ethereum: A next-generation smart contract and
decentralized application platform,” 2014. [Online]. Available:
https://github.com/ethereum/wiki/wiki/White-Paper
[26] F. Bloch and N. Qu�eroub, “Pricing in social networks,” Games
Econ. Behav., vol. 80, pp. 243–261, 2013.
[27] A. Simsek, A. Ozdaglar, and D. Acemoglu, “On the uniqueness of
solutions for nonlinear and mixed complementarity problems,”
Tech. Rep., Massachusetts Inst. Technol., 2005.
[28] A. Berman and R. J. Plemmons, “Nonnegative matrices in the
mathematical sciences,” in Society for Industrial and Applied Mathe-
matics, Philadelphia, USA, 1994, ch. 4, pp. 87–111. [Online]. Avail-
able: https://epubs.siam.org/doi/abs/10.1137/1.9781611971262
[29] G. P. Cachon and S. Netessine, in Game Theory in Supply
Chain Analysis, Boston, MA, USA: Springer, ch. 8, pp. 200–233.
[Online]. Available: https://doi.org/10.1007/978-1-4020-7953-5
[30] R. A. Horn and C. R. Johnson, Eds., Matrix Analysis. Cambridge,
MA, USA: Cambridge Univ. Press, 1985.
[31] Z. Zhang, Z. Hong, W. Chen, Z. Zheng, and X. Chen, “Joint com-
putation offloading and coin loaning for blockchain-empowered
mobile-edge computing,” IEEE Internet Things J., vol. 6, no. 6,
pp. 9934–9950, Dec. 2019.
[32] A. K. Singh and B. Patro, “Security of low computing power devi-
ces: A survey of requirements, challenges & possible solutions,”
Cybern. Inf. Technol., vol. 19, no. 1, pp. 133–164, 2019.
[33] D. Singel�ee, S. Seys, L. Batina, and I. Verbauwhede, “The commu-
nication and computation cost of wireless security,” in Proc. 4th
ACM Conf. Wireless Netw. Secur., 2011, pp. 1–4.
[34] H. Subramoni, P. Lai, M. Luo, and D. K. Panda, “RDMA over
ethernet–A preliminary study,” in Proc. IEEE Int. Conf. Cluster
Comput. Workshops, 2009, pp. 1–9.
Zetao Yang is currently working toward the BEng
degree in software engineering with the School of
Data and Computer Science, Sun Yat-sen Uni-
versity, Guangzhou, China. His current research
interests include the game theory, the resource
allocation for edge computing, and the blockchain.
Kang Liu (Member, IEEE) received the BSc
degree from the Department of Electronics and
Information Engineering, Huazhong University of
Science and Technology, Wuhan, China, in 2008,
the MSc degree from the College of Physics and
Technology, Central China Normal University,
Wuhan, China, in 2013, and the PhD degree from
the Graduate School of Information Science, Nara
Institute of Science and Technology, Ikoma, Japan.
He is currently a post-doctoral fellow with the
School of Data and Computer Science, Sun Yat-
sen University, Guangzhou, China. His current research interests include
game theory, Internet of Things, and blockchain technology.
Yufei Chen received the BS degree from Sun
Yat-sen University, Guangzhou, China, in 2019,
where she is currently working toward the MS
degree with the School of Data and Computer
Science. Her current research interests include
blockchain, Internet of Things, edge computing,
and auction theory
Wuhui Chen (Member, IEEE) received the bach-
elor’s degree from Northeast University, She-
nyang, China, in 2008, and the master’s and PhD
degrees from the University of Aizu, Aizu-Waka-
matsu, Japan, in 2011 and 2014, respectively.
From 2014 to 2016, he was a research fellow with
the Japan Society for the Promotion of Science,
Tokyo, Japan. From 2016 to 2017, he was a
researcher with the University of Aizu, Aizu-
Wakamatsu, Japan. He is currently an associate
professor with Sun Yat-sen University, Guangz-
hou, China. His current research interests include edge/cloud comput-
ing, cloud robotics, and blockchain.
Mingdong Tang received the PhD degree in
computer science from the Institute of Comput-
ing Technology, Chinese Academy of Sciences,
China, in 2010. He is currently a professor with the
School of Information Science and Technology,
Guangdong University of Foreign Studies, China.
He has published more than 100 peerreviewed
scientific research papers in various journals and
conference proceedings. His research interests
include service-oriented computing, software
engineering, and datamining.
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/csdl.
YANG ETAL.: TWO-LEVEL STACKELBERG GAME FOR IOTCOMPUTATIONAL RESOURCE TRADING MECHANISM: A SMARTCONTRACT... 1895
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:36:08 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TSC.2018.2876846
https://metzdowd.com
https://github.com/ethereum/wiki/wiki/White-Paper
https://epubs.siam.org/doi/abs/10.1137/1.9781611971262
https://doi.org/10.1007/978-1-4020-7953-5
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice