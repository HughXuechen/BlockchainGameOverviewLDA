A Multi-Agent Reinforcement Learning Approach for Blockchain-based Electricity Trading System
A Multi-Agent Reinforcement Learning Approach
for Blockchain-based Electricity Trading System
Yifan Cao1, Xiaoxu Ren1, Chao Qiu1, Xiaofei Wang1, Haipeng Yao2, F. Richard Yu3
1College of Intelligence and Computing, Tianjin University, Tianjin, China
2School of Information and Communications Engineering,
Beijing University of Posts and Telecommunications, Beijing, China
3School of Information Technology, Carleton University, Ottawa, Canada
Email: {yifancao, xiaoxuren, chao.qiu, xiaofeiwang}@tju.edu.cn
yaohaipeng@bupt.edu.cn, richardyu@cunet.carleton.ca
Abstract—In microgrid, peer-to-peer (P2P) electricity trading
has quickly ascended to the spotlight and gained enormous
popularity. However, there are inevitable credit problems and
system security problems. Besides, the current model in the
electricity trading system cannot balance the utilities of multiple
trading entities. In this paper, we propose a blockchain-based
distributed P2P electricity trading system. We define elecoins as
currency in circulation within our trading system. In order to
jointly optimize the utilities of both parties in the elecoins trading,
we formulate the elecoins purchasing problem as a hierarchical
Stackelberg game. Then, we design a distributed multi-agent
utility-balanced reinforcement learning (DMA-UBRL) algorithm
to search the Nash equilibrium. Finally, we factually build a
blockchain system with a blockchain explorer and deploy an
electricity trading smart contract (ETSC) on Ethereum, with a
website interface for operating. The numerical results and the
implemented realistic system show the advantages of our work.
Index Terms—Microgrid, P2P electricity trading, blockchain,
Stackelberg game, multi-agent reinforcement learning
I. INTRODUCTION
With the increase of distributed generators and storage de-
vices participating in microgrid, the Energy Internet has been
proposed [1]. Specifically, the Energy Internet fully unleashes
the potential of traditional power consumers, enabling them
to work as prosumers with the capabilities of generating,
consuming, and selling electricity. Several prosumers with
their own power demands and generations in short distance
can be modeled as a peer-to-peer (P2P) network. Such an
electricity trading mode promises several benefits, such as low
load peaks, low transmission loss and so on [2]. However, the
traditional P2P trading mode has inevitable credit crisis and
privacy security issues for prosumers to conduct large-scale
decentralized electricity trading [3]. Therefore, it is necessary
to establish an authentic and secure electricity trading system.
Blockchain technology, with the characteristics of decentral-
ization, anonymity, and credibility [4], has been introduced
into the energy trading system, aiming to felicitously solve
the above-mentioned issues. For example, a local P2P trading
mode, has been proposed in plug-in hybrid electric vehicles
[5]. The authors adopt an iterative double pricing mechanism
to solve the maximum problem of social welfare in electricity
trading. In [6], the authors propose a unified energy consortium
blockchain and design a payment scheme based on a credit
bank. This work solves the problem of cold start in blockchain
and maximizes the benefits of credit banks for loan.
Although these works are capable of achieving some advan-
tages using blockchain in energy trading, numerous handicaps
prevent it from being used as a generic platform: I) Credit
crisis: the current bank-based credit mechanism is vulnerable
for single point of attack, while discouraging prosumers from
purchasing electricity. II) Unbalanced utility: the current so-
lution of the loan process focuses on maximizing the utility of
credit banks, without considering the utility balance between
credit banks and prosumers. III) System implementation:
the current works about blockchain-enabled electricity trading
system have not been factually designed and deployed.
In order to reach a utility-balanced situation, the majority of
current researches leverage the game-theoretic approaches to
model the interaction between parties in the trading process.
[7]–[11]. Generally, by transforming the bi-level model into
an equivalent single-level model using Karush-Kuhn-Tucher
(KKT) conditions, quite a few works solve the Stackelberg
game model [12]. Besides, some optimization algorithms, such
as backward induction and differential evolution algorithm
[13], are also applied to solve the Stackelberg game model.
These traditional methods usually assume that there is a
centralized organization to collect users’ information and assist
them to formulate the relevant policies. However, in reality,
individuals’ complete information cannot be well acquired,
especially for some privacy parameters. Furthermore, the se-
quence game is widely used between trading entities, which
means entities’ observation of opponents and corresponding
policies are decided by themselves, instead of the centralized
organization. In order to conquer these strong assumptions,
we adopt a multi-agent reinforcement learning (MARL) al-
gorithm with incomplete information to search for the game
equilibrium.
In this article, we propose a blockchain-based electricity
trading system, aiming to solve the problem of credit crisis
and privacy security. It should be noted that a currency elecoin
is designed and circulated in the trading system. The main
contributions of this article are summarized as follows:
978-1-7281-8104-2/21/$31.00 ©2021 IEEE
GL
O
BE
CO
M
 2
02
1 
- 2
02
1 
IE
EE
 G
lo
ba
l C
om
m
un
ic
at
io
ns
 C
on
fe
re
nc
e 
| 
97
8-
1-
72
81
-8
10
4-
2/
21
/$
31
.0
0 
©
20
21
 IE
EE
 |
 D
O
I: 
10
.1
10
9/
GL
O
BE
CO
M
46
51
0.
20
21
.9
68
55
10
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:50:14 UTC from IEEE Xplore.  Restrictions apply. 
o
Leader
Followers
ck lc
ol c
l
c
ol c
①Electricity 
Generation
②Elecoin
Trading
③Electricity Trading
④Information 
Uploading
⑤Blockchain
Consensus
Block… Block …
Fig. 1: Blockchain-enabled P2P electricity trading framework.
• We propose a blockchain-based distributed P2P electricity
trading system, which ensures the reliability and privacy
security in the trading process.
• We formulate the elecoins trading problem as a hier-
archical Stackelberg game, giving the proof of exis-
tence and uniqueness of the Nash equilibrium (NE).
Besides, in view of the dynamic game of distributed
multiple participants, we design a distributed multi-agent
utility-balanced reinforcement learning algorithm (DMA-
UBRL) to search the equilibrium.
• We factually construct a local blockchain system with
three edge nodes. In response to the credit crisis and
trading security, we design and deploy an electricity
trading smart contract (ETSC) on Ethereum1, providing a
website interface and blockchain explorer for prosumers
to operate their accounts.
The rest of this article is organized as follows. The elecoins
trading model and problem formulation are shown in Section
II. In Section III, the distributed multi-agent utility-balanced
reinforcement learning algorithm is conceived for searching
the Nash equilibrium of the proposed game model. Besides,
a smart contract for electricity trading is designed. Section
IV presents the simulation results and the system deployment.
Finally, conclusion is given in Section V.
II. SYSTEM MODEL AND PROBLEM FORMULATION
A. System Description
We design an electricity trading system based on
blockchain. The entities and process of electricity trading are
illustrated in Fig. 1. In the electricity trading system, there exist
three types of roles, including 1) Prosumers, who purchase
elecoins from edge servers, as well as request electricity from
retailers with adequate electricity. 2) Retailers, who are also
prosumers in the trading system, generating, storing and sell-
ing reliable electricity from distributed energy sources, such
1https://ethereum.org
as photovoltaic power, solar thermal power and wind power.
3) Edge servers, on the one hand, who could provide elecoins
and make the pricing policy for prosumers. On the other hand,
the edge servers play the role of miners in blockchain.
The trading framework can be described as shown in Fig.1.
Specifically, the process is summarized as follows. 1) Elec-
tricity generation: the retailers generate and store electricity
from the distributed energy sources. 2) Elecoin trading: when
prosumers have demands of electricity from others, they firstly
need elecoins by paying to the edge servers. 3) Electricity
trading: then, prosumers can freely conduct electricity trading
with retailers through elecoins. 4) Information uploading:
the detailed transaction data and account information updates
will be uploaded to the blockchain. 5) Blockchain consensus:
once an edge server receives the data and successfully obtains
the priority to record transactions, it will package a block
and broadcast it to the whole blockchain. Other edge servers
receive the new block, validate its rationality, and attach it to
their blockchain.
B. System Model
In the elecoins trading system, we consider there are
N prosumers and M edge servers, denoted as N =
{1, 2, . . . , i, . . . , N} and M = {1, 2, . . . , j, . . . ,M}, respec-
tively. There are two models used:
1) PoW-based Mining Model: The edge servers not only
offer elecoins to prosumers, but also participate in the mining
process. We assume that all the hashing computing capacity αj
of edge server j is used for mining and the hashing computing
capacity proportion of edge server j in the whole blockchain
is βj =
αj∑M
j=1 αj
, where
∑M
j=1 βj = 1. Specifically, we model
the appearance of solving the PoW hashing puzzle as a Poisson
process [9]. Accordingly, the probability of edge server j
successfully solving the puzzle and reaching consensus can be
expressed as: ρj = βje
−λls, where λ is the propagation factor
of the blockchain and l is an evaluation metric of puzzle in the
blockchain, s means the size of a block. For simplification, we
assume each block contains the same number of transactions.
Additionally, with the generation of blocks, there are two
types of reward for the edge server: fixed reward denoted by
Rf and performance reward Rp defined by r × s. Therein, r
is a given variable reward factor and s decides the number
of transactions in a block. Thus, the reward function of edge
server j who successfully mines a block is expressed as:
Um
j = (Rf +Rp) · βje
−λls. (1)
2) Stackelberg Game Model: We formulate the interaction
between an edge server and prosumers as a hierarchical
Stackelberg game, assuming that there is an edge server
supplying elecoins to the N prosumers. At the beginning, the
edge server declares a uniform unit elecoin price, denoted as
p ∈ [pmin, pmax], where pmin and pmax represent the mini-
mum and maximum unit elecoin price, respectively. According
to the declared price, prosumers consider their own demands
of elecoins, denoted as X = {x1, x2, . . . , xi, . . . , xN}, and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:50:14 UTC from IEEE Xplore.  Restrictions apply. 
X ∈ [xmin, xmax], where xmin and xmax are the mini-
mum and maximum demands of elecoins purchased by the
prosumers, respectively. Both the edge server and prosumers
expect to achieve optimal utilities.
Edge server’s pricing strategies in Stage I: The utility of
edge server j is consists of the reward that the edge server
successfully mines a block, the charging fee from prosumers
for electricity service, and the service cost. Therefore, the
utility function of service server j can be denoted as follows:
Ue
j = Um
j +
N∑
i=1
pxi − k(
∑N
i=1 xi
Q
+ ec), (2)
where k is a conversion factor and ec represents electricity
consumption of the edge server. We assume that the unit
electricity price Q is related with the electricity price of the
centralized utility grid [8].
Prosumers’ demand strategies in Stage II: Prosumers have
different intentions to utilize electricity service [10], defined
by W = {w1, w2, . . . , wi, . . . , wN}. Considering the marginal
benefit of electricity consumption, we adopt a logarithm model
for services revenue. Regarding θ and η as conversion factors,
the utility of prosumer i can be obtained by the services
revenue minus the payment for elecoins:
Up
i = θln(
xi
Q
wi + 1)− ηxip. (3)
C. Game Analysis
In order to verify the existence and uniqueness of the
Stackelberg equilibrium in our hierarchical Stackelberg game,
we can arrive the following theorems.
Theorem 1. The Nash equilibrium for prosumer i in the
Stackelberg game is given by
x∗
i =
θ
ηp
− Q
wi
. (4)
Proof: According to the equation (3), we have the second
derivatives of utility Up
i with respect to demands xi,
∂2Up
i
∂2xi
=
−θw2
i
(xiwi +Q)2
. (5)
The second derivative is negative due to θ > 0 and Q > 0,
proving the concavity of the utility function. Then, if there
exists xi that makes the first derivative 0, it is the unique
maximum of the function. Thus, we set ∂Up
i
∂xi
= 0 and the
proof is completed.
Theorem 2. The edge server achieves the utility maximization,
under the unique optimal price.
Proof: In the stage I, the pricing strategy of the edge
server depends on hypothetical elecoins demand xi. When we
get the NE in the stage II, we try to find the best pricing
strategy for the edge server to obtain the optimal utilities. After
substituting (4) into (2), we can arrive
Ue
j = (Rf +Rp) · βje
−λls +
p− k
Q
p
· Nθ
η
−
(p− k
Q
) ·
N∑
i=1
Q
wi
− kec.
(6)
From (6), we have the second derivatives of Ue
j with respect
to unit elecoin price p given as follows:
∂2Ue
j
∂2p
= −2
k
p3
· Nθ
ηQ
< 0. (7)
Due to the negativity of (7), the strict concavity of the
objective function is ensured. Thus, the prosumer is able to
achieve the maximum utility with the unique optimal price.
The proof is now completed.
Accordingly, the Stackelberg equilibrium exists while it is
unique. As such, both the edge server and prosumers can
achieve the optimal utilities in the utility-balanced trading.
III. MARL BASED ELECOINS TRADING AND SMART
CONTRACT BASED ELECTRICITY SHARING
A. Multi-Agent Reinforcement Learning based Elecoins Trad-
ing
To prevent privacy parameters from disclosure among trad-
ing and obtain balanced utilities of all the trading entities,
we model the elecoins trading process as a Markov Decision
Process (MDP) and design DMA-UBRL algorithm to solve
the problem, as shown in Fig. 2. Then the state, action, and
reward function are presented.
We consider Ap and Ae as the action spaces of the
prosumers and edge server j, respectively. At time slot t, in
the beginning of MDP, the edge server first sets the uniform
unit elecoin price pt based on state xt
i = [xt−1
i ]i∈N observed
from the underling game, where xt−1
i indicates the submitted
amount of elecoin in prosumer i at time slot (t−1). Then, we
define the MDP of the edge server. Therein, ste = [xt−1
i ]i∈N
denotes the state space, the action space is signified by
pt ∈ Ae, while the reward function of edge server j is the
utility function in (2).
Additionally, for the prosumers, after observing the action
of the edge server at time slot t, each of them determines
its submitted purchase action xt
i based on the observed state.
Similarly, we define the MDP of the prosumers, where stp = pt
represents the state space and Xt ∈ Ap represents the action
space. The reward function of a prosumer is the utility function
in (3).
We design a DMA-UBRL algorithm for searching the NE
in the non-stationary environment constructed by multi-agent.
Algorithm 1 shows the details of DMA-UBRL algorithm for
the edge server in the multi-agent Stackelberg game. Let σe ∈
(0, 1] and γe ∈ (0, 1] represent the learning rate and future
reward importance factor, respectively. Then, the updating rule
of the Q-value related with uniform unit elecoin price p in state
ste can be updated by step 4.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:50:14 UTC from IEEE Xplore.  Restrictions apply. 
`̀
Environment
Uniform
Unit Price
Elecoin
Demand 1
Elecoin
Demand 2
Total 
Demand
Elecoin
Unit Price
P4
Edge1 Edge2 Edge3
Blockchain
Network
P3P2P1
...
...
...
States Actions
Ue
U2
U3
Rewards
P: prosumer    U: utility          Electricity transaction           Elecoin trading            Blockchain link
Agents
Fig. 2: Architecture of multi-agent reinforcement learning
algorithm in elecoins trading process.
Next, the edge server updates its current average policy
π̄e(s
t
e, p) and current unit elecoin price policy πe(s
t
e, p), where
π̄e(s
t
e, p) is leveraged to judge “win” or “failure” of the
current strategy. The average policy can be updated by step
5, where M(ste) is used for recording the occurrence counts
of states observed by the agent. Through interactions with
the environment and other agents, the edge server can update
its current price policy πe(s
t
e, p) to maximize the cumulative
reward, which is given by step 6, where
Φste,p
=
{
−min
(
πe(s
t
e, p),
εe
|Ae|−1
)
, Λ,
∑
p′ �=p πe
(
ste, p
′
), εe
|Ae|−1
)
, otherwise.
where Λ : p �= arg max
p′∈Ae
Qe(s
t
e, p
′
), | Ae | is the number
of the edge server’s action set. Specifically, the edge server
would choose its learning parameter εe from εwin
e and εlosee .
Under the condition of win, εwin
e is applied to update the
policy cautiously. Otherwise, εlosee is used to learn fast under
the “failure” condition, i.e.,
εe =
{
εwin
e , Λ
′
,
εlosee , otherwise,
where Λ
′
indicates the condition that∑
p∈Ae
πe
(
ste, p)Qe
(
ste, p) >
∑
p∈Ae
π̄e
(
ste, p)Qe
(
ste, p).
The computational complexity mainly focuses on the strat-
egy update. We assume the number of elements in state
space and action space denoted as S and A, respectively. The
complexity of the agent is O(S2 ×A).
Similar to Algorithm 1, we can obtain the purchase policies
of prosumers using DMA-UBRL algorithm.
B. Smart Contract based Electricity Sharing
Once obtaining elecoins from edge servers through the
Stackelberg game, prosumers are able to purchase electricity
from other prosumers with adequate energy reserves. Con-
sidering the credit crisis among prosumers, we construct an
electricity blockchain and ETSC to ensure trading executed
reliably and prosumers’ accounts dealt accurately.
ETSC is realized by four parts, i.e., Registration Module,
Transaction Module, Electricity Clearing Module and Quire
Module. As shown in Algorithm 2, in Registration Module,
Algorithm 1. DMA-UBRL Algorithm for the Edge Server.
Input: σe, φe, εwin
e , εlosee .
Initialization: t = 1, Qe(s
t
e, p
t) = 0, πe(s
t
e, p
t) = 1
|Ae|
π̄e(s
t
e, p
t) = 1
|Ae| , ε
win
e < εlosee ,M(ste) = 0.
for t = 1, 2, 3, · · · do
1. Observe state ste.
2. Select action pt at random with the probability
policy πe(s
t
e, p
t).
3. Observe next reward Re and state st+1
e .
4. Update Qe(s
t
e, p
t):
Qe(s
t
e, p
t) ← (1− σe)Qe(s
t
e, p
t) + σe·
(Re + γe max
p∈Ae
Qe(s
t+1
e , p)).
5. Update average policy π̄e(s
t
e, p) :
M(ste) = M(ste) + 1
π̄e(s
t
e, p) ← π̄e(s
t
e, p) +
1
M(ste)
(πe(s
t
e, p)−
π̄e(s
t
e, p)), ∀p ∈ Ae.
6. Update current strategy πe(s
t
e, p):
πe(s
t
e, p) ← πe(s
t
e, p) + Φste,p
, ∀p ∈ Ae
end for
it is necessary to initialize the whole blockchain system. By
constructor() in the smart contract, the blockchain registers
the selected edge servers as an administrator of the trading
system, and initializes their accounts information and elec-
tricity price. When prosumers intend to participate in trading,
they are required to provide their names, addresses, generation
intentions and trading intentions. After registration, prosumers’
accounts will be initialized, including their available electric-
ity, as well as total generated electricity and used electricity.
In Transaction Module, considering the cold start issue, pro-
sumers desired to purchase electricity could acquire elecoins
from edge servers by buyToken()function. Prosumers are able
to select retailers, while prosumers choosing to become the
retailers can also put on their commodity information. After
that, prosumers confirm the exact quantity of electricity yi and
place the order. Then checkQulification() function in the
smart contract will be called to verify the accounts authority
and ensure the balance of elecoins and electricity adequate. Fi-
nally, trade() function accomplishes the modification of corre-
sponding accounts information, including available electricity
as well as elecoins of prosumers and retailers. In Electricity
Clearing Module, the modification of total generated electricity
and total used electricity will be executed in generation()
function and consumption() function, according to data from
prosumers’ smart meters. In Quire Module, we provide six
interfaces for prosumers to inquire their accounts’ information.
IV. PERFORMANCE EVALUATION AND SYSTEM
IMPLEMENTATION
A. Parameter Setting
In the experiment, we consider the edge server’s action
space as Ap ∈ [10, 19] and prosumers’ action space as Ax ∈
[20, 50]. For parameters in DMA-UBRL algorithm, we set the
maximum episode number as 2000. The learning rate is set as
σ = 0.8. The discount factor γ = 0.1. In addition, we set the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:50:14 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 2. Electricity Trading Smart Contract (ETSC).
Registration Module
System Initialization → constructor()
administrator, totalElecoins,
unitPowerPrice, edgeServersAccounts.
Prosumers Input → empower()
userName, userAddr, genRight, transRight.
availPower = avaElecoins = 0.
totalGenPower = totalUsePower = 0.
Transaction Module
for i = 1, 2, 3, · · · do
1. Buys elecoins amount xi → buyToken()
2. Selects retailers.
3. Confirms quantity of electricity yi.
4. Accounts verification → checkQulification()
5. Accounts clearing → trade()
Prosumer: avaPower + yi, Elecoins− yi ∗Q.
Retailer: avaPower − yi, Elecoins+ yi ∗Q.
end for
Electricity Clearing Module
Smart Meter→ generation(), consumption()
Quire Module
learning parameters εwin = 0.0025 and εlose = 0.01 [11]. For
parameters in the trading process, we consider the fixed block
reward Rc = 200, the variable reward factor r = 3 and block
size s = 200. The other default parameters are set as follows:
N = 8,M = 1, λ = 0.01, l = 1, k = 8, Q = 0.6, η = 0.3.
B. Simulation Results
1) Convergence Performance: As shown in Fig. 3, we
obtain the convergence performance of DMA-UBRL algorithm
under the unified pricing mechanism and the discriminated
pricing mechanism. To clearly present the tendency, we con-
sider one edge server and four prosumers in this experiment.
Under the unified pricing mechanism, prosumers’ optimal
demands are quite similar. The tiny distinction among pro-
sumers is caused by diverse intentions for electricity service.
In fact, edge server’s pricing for unit elecoin obviously affects
prosumers’ optimal demands as shown in Fig. 3(b). The higher
the price of unit elecoin is, the fewer demands of prosumers
will be.
2) Economic Analysis: Fig. 4(a) and Fig. 4(b) present the
balanced utility of prosumers and the leader edge server. As the
number of prosumers increases, the red lines show the utilities
tendency of both parties using DMA-UBRL algorithm. We
use Genetic Algorithm (GA) to optimize prosumers’ utility
or the edge server’s utility as comparing conditions, which
are presented by blue lines and green lines respectively. The
yellow lines represent dummy random policies of the edge
server and prosumers. Whether considering prosumers’ utility
only or considering the edge server’s utility only leads to
poor performance of the opposite side. Our proposed multi-
agent algorithm can reach the utility-balanced equilibrium,
thereby jointly optimize the utilities of both parties. Besides,
the increase of prosumers’ quantity causes the decline of
(a) Unified pricing mechanism. (b) Discriminated pricing mechanism.
Fig. 3: Convergence performance of prosumers under different
pricing mechanisms with DMA-UBRL algorithm.
(a) Ue
j under different algorithms. (b) Up
i under different algorithms.
(c) Ue
j under different Q values. (d) Up
i under different Q values.
(e) Probability ρj of an edge server successfully mining.
Fig. 4: Performance of the utility-balanced trading.
prosumers’ utility. The reason is that multiple prosumers
compete for elecoins from the same edge server, which rises
the unit elecoin price rises and affects the quality of trading.
On the other hand, as the number of prosumers rises, the
utility of the edge server grows unsteadily, due to the fact
that different prosumers have diverse intentions for elecoins
and electricity.
In Fig. 4(c) and Fig. 4(d), the uniform unit electricity price
Q between prosumers can also affect the utilities of the edge
server and prosumers. For the edge server, within some range,
the utility increases as the unit electricity price rises. The
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:50:14 UTC from IEEE Xplore.  Restrictions apply. 
reason is that the prosumers need to purchase more elecoins
for their certain demands. Furthermore, different demands of
each prosumer result in the unsmooth curve. Additionally, we
find when Q <= 0.45, the utility will gradually decline. It is
because the utilities of the edge server cannot offset the oper-
ating cost. On the other hand, prosumers’ utility declines with
the unit electricity price rising because prosumers purchase
less electricity using an equivalent amount of elecoins.
In order to estimate the potential revenue of edge servers in
the system, we present the probability of successfully mining
under different block sizes in Fig. 4(e). As the number of edge
servers increases, each edge server accounts for less computing
power proportion to obtain the priority to record transactions,
which means more difficult to successfully mine.
C. Realistic System Implementation
In order to demonstrate our system, we implement a proto-
type and demonstrate it with several shortcuts.
Block Block… …
Networking information 
of edge node 2
Networking information 
of edge node 1
Networking information 
of edge node 3Blockchain
Fig. 5: Connection information of edge nodes.
1) Private Blockchain Construction: We build a local elec-
tricity blockchain based on three edge servers using Geth in
Ethereum. As shown in Fig. 5, the devices in our implemen-
tation are I) A laptop with 8 GB RAM, Intel i7-7500U CPU.
II) A laptop with 16 GB RAM, Intel i5-10210U CPU. III)
A virtual machine with 2GB RAM and 30GB SCSI. IV) A
router TP-LINK TL-WR842N providing wireless access.
2) Deployment and Presentation: Initially, we design ETSC
using solidity language. In order to facilitate prosumers to con-
veniently operate their accounts and operate trading, a website
interface2 is designed for prosumers to call the function using
MetaMask. In addition, the strict authentication of identity and
calling mode have been set to prevent some malicious attacks
caused by permission problems.
By using the comprehensive blockchain development frame-
work Truffle, we compile and deploy our smart contract on
the local blockchain simulator Ganache for security test. After
that, we redeploy the smart contract on the build blockchain on
Geth. Additionally, prosumers could interact with the private
blockchain for information, such as the current block and
transaction details, through the electricity blockchain explorer.
2http://carolqiu.site/app/home.html
V. CONCLUSION
In this article, we propose a distributed P2P electricity
trading system aided by blockchain, which ensures the relia-
bility between trading entities. In order to satisfy the balanced
utilities for the edge server and prosumers, we formulate
the elecoins purchasing problem as a hierarchical Stackelberg
game. In this mechanism, the NE solution is given with the
proof of existence and uniqueness. Then we design a DMA-
UBRL algorithm to solve the Nash equilibrium. Finally, to
further deal with privacy crisis and trading security, we fac-
tually design the blockchain-based electricity trading system
using smart contract and blockchain explorer on Ethereum.
REFERENCES
[1] M. B. Mollah, J. Zhao, D. Niyato, K.-Y. Lam, X. zhong Zhang,
A. Ghias, L. Koh, and L. Yang, “Blockchain for future smart grid: A
comprehensive survey,” IEEE Internet of Things Journal, vol. 8, pp.
18–43, 2021.
[2] M. Sabounchi and J. Wei, “Towards resilient networked microgrids:
Blockchain-enabled peer-to-peer electricity trading mechanism,” 2017
IEEE Conference on Energy Internet and Energy System Integration
(EI2), pp. 1–5, 2017.
[3] N. Z. Aitzhan and D. Svetinovic, “Security and privacy in decentralized
energy trading through multi-signatures, blockchain and anonymous
messaging streams,” IEEE Transactions on Dependable and Secure
Computing, vol. 15, pp. 840–852, 2018.
[4] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Decen-
tralized Business Review, p. 21260, 2008.
[5] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-in hybrid
electric vehicles using consortium blockchains,” IEEE Transactions on
Industrial Informatics, vol. 13, pp. 3154–3164, 2017.
[6] Z. Li, J. Kang, R. Yu, D. Ye, Q. Deng, and Y. Zhang, “Consortium
blockchain for secure energy trading in industrial internet of things,”
IEEE Transactions on Industrial Informatics, vol. 14, pp. 3690–3700,
2018.
[7] R. Deng, Z. Yang, M. Chow, and J. Chen, “A survey on demand
response in smart grids: Mathematical models and approaches,” IEEE
Transactions on Industrial Informatics, vol. 11, pp. 570–582, 2015.
[8] S. Maharjan, Q. Zhu, Y. Zhang, S. Gjessing, and T. Başar, “Dependable
demand response management in the smart grid: A stackelberg game
approach,” IEEE Transactions on Smart Grid, vol. 4, pp. 120–132, 2013.
[9] Z. Xiong, S. Feng, D. Niyato, P. Wang, and Z. Han, “Optimal pricing-
based edge computing resource management in mobile blockchain,”
2018 IEEE International Conference on Communications (ICC), pp. 1–
6, 2018.
[10] J. Lee, J. Guo, J. Choi, and M. Zukerman, “Distributed energy trading in
microgrids: A game-theoretic model and its equilibrium analysis,” IEEE
Transactions on Industrial Electronics, vol. 62, pp. 3524–3533, 2015.
[11] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trading
in blockchain-based industrial internet of things,” IEEE Transactions on
Industrial Informatics, vol. 15, pp. 3602–3609, 2019.
[12] B. Gu, X. Yang, Z. Lin, W. Hu, M. Alazab, and R. Kharel, “Multiagent
actor-critic network-based incentive mechanism for mobile crowdsens-
ing in industrial systems,” IEEE Transactions on Industrial Informatics,
vol. 17, pp. 6182–6191, 2021.
[13] N. Liu, L. He, X. Yu, and L. Ma, “Multiparty energy management for
grid-connected microgrids with heat- and electricity-coupled demand
response,” IEEE Transactions on Industrial Informatics, vol. 14, pp.
1887–1897, 2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:50:14 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize false
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Required"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice