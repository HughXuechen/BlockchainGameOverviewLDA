Demand&#x2013;Response Games for Peer-to-Peer Energy Trading With the Hyperledger Blockchain
IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022 19
Demand–Response Games for Peer-to-Peer Energy
Trading With the Hyperledger Blockchain
Min Zhang , Frank Eliassen , Member, IEEE, Amir Taherkordi , Hans-Arno Jacobsen , Fellow, IEEE,
Hwei-Ming Chung , Student Member, IEEE, and Yan Zhang , Fellow, IEEE
Abstract—In smart grids, the large-scale integration of dis-
tributed renewable energy resources has enabled the provisioning
of alternative sources of supply. Peer-to-peer (P2P) energy trad-
ing among local households is becoming an emerging technique
that benefits both energy prosumers and operators. Since con-
ventional energy supply is still needed to help fill the gap between
local demand and supply when the local solar generation is not
sufficient, demand–response management will keep playing an
important role in the future P2P energy market. Blockchain and
smart contract technology has gained increasing attention in P2P
trading for its secure operation. The performance of blockchain-
based P2P energy trading still remains to be improved, in
terms of latency and cost of computation resources. This article
studies the challenges of demand–response management in P2P
energy trading and proposes a blockchain-empowered energy
trading system for a community-based P2P market. The proposed
demand–response mechanism is developed using two noncooper-
ative games, in which dynamic pricing is applied for suppliers.
The proposed energy trading system is prototyped on a cluster
network, with a coordinator running as a smart contract in a
Hyperledger blockchain. We implemented both on-chain and off-
chain processing modes to study the system performance. The
results from experiments with our prototype indicate that our
proposed demand–response games have a great effect on reducing
the net peak load, and at the same time, the off-chain process-
ing mode provides lower latency and overhead compared to the
on-chain mode while still keeping the same system integrity as
the on-chain mode.
Index Terms—Blockchain, demand response, off-chain process-
ing, peer-to-peer (P2P) energy trading, smart contract.
Manuscript received November 24, 2020; revised June 23, 2021; accepted
August 22, 2021. Date of publication September 21, 2021; date of current
version December 17, 2021. This work was supported by Norwegian Research
Council under Grant 275106 (LUCS Project), Grant 287412 (PACE Project),
and Grant 267967 (SmartNEM Project). This article was recommended by
Associate Editor T.-M. Choi. (Corresponding author: Min Zhang.)
Min Zhang, Frank Eliassen, Amir Taherkordi, and Hwei-Ming Chung
are with the Department of Informatics, University of Oslo, 0373 Oslo,
Norway (e-mail: minz@ifi.uio.no; frank@ifi.uio.no; amirhost@ifi.uio.no;
hweiminc@ifi.uio.no).
Hans-Arno Jacobsen is with the Department of Informatics, Technical
University of Munich, 80333 Munich, Germany, and also with the Department
of Electrical and Computer Engineering, University of Toronto, Toronto,
ON M5S 2E4, Canada (e-mail: jacobsen@eecg.toronto.edu).
Yan Zhang is with the Department of Informatics, University of Oslo,
0373 Oslo, Norway, and also with the Simula Metropolitan Center for Digital
Engineering, 0167 Oslo, Norway (e-mail: yanzhang@ieee.org).
Color versions of one or more figures in this article are available at
https://doi.org/10.1109/TSMC.2021.3111135.
Digital Object Identifier 10.1109/TSMC.2021.3111135
NOMENCLATURE
Sets and Indices
i Prosumer index.
j Supplier index.
t Time index.
M Set of suppliers.
N Set of prosumers.
T Set of time slot.
Variables
βj,t Bid of supplier j ∈ M at time t.
sj,t Total energy supply by supplier j at time t.
pex
t External price used for trading between suppliers and
community
Dt Aggregated energy deficit, i.e., the gap between
aggregated energy demand and aggregated solar
energy supply.
πj,t(·) Supplier profit function.
Cj,t(·) Energy generation cost function of supplier j.
β∗
t Nash equilibrium strategy of suppliers at time t.
Eg
i,t Energy generated at time t.
xi,t Energy consumed by prosumer i at time t.
pb
t Internal buying price at time t.
ps
t Internal selling price at time t.
Es
t Total energy supply at time t.
Ed
t Total energy demand at time t.
Parameters
a0 Positive coefficient.
a1 Positive coefficient.
a2 Positive coefficient.
ai,t Reference parameter of prosumer i.
xmin
i,t Base load at time t.
xmax
i,t Upper bound load at time t.
η, b Positive coefficients.
λs Fixed price of selling energy back to the main grid.
ε Small constant value.
I. INTRODUCTION
IN SMART grids, the increasing integration of distributed
energy resources (DERs) has driven conventional energy
markets into the so-called local peer-to-peer (P2P) energy mar-
kets residing within the end-user domain. This has led to the
2168-2216 c© 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-7585-9790
https://orcid.org/0000-0002-7788-4137
https://orcid.org/0000-0003-1672-054X
https://orcid.org/0000-0003-0813-0101
https://orcid.org/0000-0001-7752-285X
https://orcid.org/0000-0002-8561-5092
20 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022
emergence of prosumers that are capable of both generating
and consuming energy. In a P2P energy market, prosumers
receive economic benefits by sharing their energy generation
with neighbors, without having to store the generated energy
(e.g., solar generation). This has introduced new opportunities
and challenges for the management of local energy markets
and the supporting power system.
A P2P market design is needed to enable the active partic-
ipation of prosumers and to maintain the balance of supply
and demand. Many existing approaches aim to maximize the
benefit for local prosumers, without considering the scenario,
where the local demand cannot meet the local supply [3], [4],
while other approaches assume the excess local demand can
be supplied directly from the main grid [5], [23].
In these designs, local energy retailers, suppliers, and local
energy producers are excluded from the local energy mar-
ket. However, some of the above assumptions may not be
realistic. For example, it may take a long time for all the com-
munities to reach full energy self-supply, and backup market
solutions are required for the case that local energy produc-
tion from prosumers falls short for some reason. Therefore,
it is necessary to consider different scenarios for future P2P
energy markets. As an alternative to markets with only pro-
sumers and consumers, there will still be a role to play for
electricity suppliers in local energy markets in the foreseeable
future. For example, suppliers can help fill the gap between
local demand and supply by providing energy from various
resources. Therefore, demand response is needed since sup-
pliers will prefer a low peak-to-average ratio of the energy
deficit (i.e., gap between local demand and supply). In exist-
ing energy systems, demand–response optimization is usually
performed through load scheduling and price optimization
mechanisms under the control of one central entity. For
a P2P energy market, applying demand–response optimiza-
tions becomes more difficult than for the existing power
system, due to the highly unpredictable nature of renewable
resources. Therefore, it is essential to explore a demand–
response mechanism for local P2P markets that involve active
suppliers.
For the infrastructure of the P2P market, many existing
solutions rely on a trusted central entity that controls the
P2P trading and the demand–response optimizations. These
types of solutions have the advantages of following a sim-
ple setup and adaptable management [8], while encountering
fault resilience challenges due to their single point of fail-
ure. Therefore, recent approaches have shifted their focus
toward leveraging blockchain technology for secure operation
in a trustless environment. Blockchain technology has been
deployed in P2P energy trading to meet two key objectives:
1) achieve decentralized operation on an immutable ledger that
stores transactions related to energy trading and 2) achieve
secure processing of trading algorithms encapsulated in smart
contracts, guaranteeing the correctness for the on-chain oper-
ation. Since on-chain operation and storage are seen as costly
and inefficient, proposals have been made to move comput-
ing and storage off-chain [25] for the purpose of improving
system performance, while still preserving the system integrity
via the blockchain.
In P2P energy markets, especially in real-time energy mar-
kets, the feasibility of leveraging blockchains should not be
limited to the basic technical needs such as setting up the phys-
ical infrastructure or developing the trading process. We should
also consider the performance of the running algorithms, espe-
cially when low latency and scalable data communication
and computation are required. There exist a few approaches
that study the system performance for P2P energy trading
when leveraging blockchains [17], [21]. However, the majority
of the existing blockchain-based energy trading approaches,
either simply use blockchain as a database [17] or deploy
relatively simple trading algorithms when leveraging smart
contracts [19], [21], [22]. This simplicity in the design of
blockchain-based approaches is due to the limitation and com-
plex operation of smart contracts, since every single smart
contract invocation requires blockchain consensus.
Therefore, it remains to be explored whether blockchain
technology and smart contracts can be leveraged to accomplish
complex demand–response mechanisms (e.g., game theory-
based algorithms), such that secure processing of algorithms
and guaranteed correctness of the output of the trading
algorithm can be achieved.
This article is an extension of our earlier work [1], in which
we proposed a community-based P2P market consisting of het-
erogeneous market participants. A noncooperative game-based
demand–response mechanism was proposed using dynamic
pricing with the active involvement of suppliers. We designed
a distributed algorithm for the demand–response mechanism
such that each market participant makes decisions locally to
maintain privacy. We evaluated the proposed algorithm in
MATLAB simulations and observed a reduced peak-to-average
ratio on the local energy deficit. In this article, we validate the
simulation-based results from the earlier paper by prototyp-
ing the proposed algorithms leveraging a blockchain, evaluate
the algorithms with a larger dataset, and provide the following
additional contributions.
1) We propose a smart contract-based community coordi-
nator to guarantee the integrity and nonrepudiation for
both the pricing models and the data storage.
2) We propose two processing modes for the system: a) an
on-chain mode that processes price updating inside a
smart contract and b) an off-chain mode that processes
price updating in an off-chain solver and that validates
the final result on-chain.
3) We prototype the proposed system and design consist-
ing of both on-chain and off-chain processing modes.
We also evaluate our prototype based on a real-world
dataset to demonstrate the feasibility and robustness of
our approach.
Experimental results under different solar conditions show
a reduced peak-to-average ratio on the local energy deficit by
a factor of three with increased profit for prosumers, after
applying our demand–response method. The off-chain mode
provides lower latency and overhead compared to the on-chain
mode by a factor of 10, while still providing the same level
of integrity as the on-chain mode.
The remainder of this article is organized as follows.
Section II provides the relevant background material and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: DEMAND–RESPONSE GAMES FOR P2P ENERGY TRADING WITH HYPERLEDGER BLOCKCHAIN 21
survey-related work. Section III describes the two proposed
noncooperative games and the pricing models. Our designed
distributed algorithms are presented in Section IV. Section V
describes the implementation details of the proposed system.
Section VI analyzes the system performance, before we draw
the conclusion in Section VII.
II. RELATED WORK AND BACKGROUND
A. P2P Energy Markets and Demand–Response Management
P2P energy trading is an emerging direction in both
academia and industry. Several projects [11]–[13] focus on
business models and platforms for P2P energy markets. For
example, SonnenCommunity [13], developed by sonnenBat-
terie in Germany, is a community of sonnenBatterie owners
who share self-produced energy with others. In their commu-
nity, a central software links up and monitors all community
members and balances energy supply and demand. In the lit-
erature, the state-of-the-art P2P markets can be categorized
into three groups: 1) full P2P markets; 2) community-based
markets; and 3) hybrid P2P markets [2]. In full P2P markets,
prosumers and consumers directly negotiate with each other
to sell and buy electricity (e.g., [3]). Community-based mar-
kets employ community coordinators who manage the P2P
trading activities inside the community as well as act as inter-
mediaries between the community and the wholesale energy
markets. The community coordinator is required to negotiate
among all the prosumers and either helps with matching each
buyer with a proper seller [4] or sets up a market-clearing price
for all the participants [5]. A hybrid P2P market combines the
two above-mentioned market designs with multiple layers. In
the upper layer, communities or individual peers trade with
each other in a full P2P market. In the lower layer, prosumers
trade within a community in a community-based market (e.g.,
see [7]).
Full P2P markets suffer from poor scalability of the nego-
tiation process among peers, as analyzed by Moret et al. [9].
The negotiation process can become a computational burden
when many market participants are involved. Hybrid markets
face the challenge of having to incorporate heterogenous pref-
erences of market participants to coordinate between multiple
layers of the market. Compared to full P2P and hybrid mar-
kets, community-based markets are more structured, and it
is easier for the community managers to provide services
to the grid operators [2]. In addition, the star communica-
tion topology of the community-based market can rely on
the existing infrastructure (i.e., the smart meter infrastruc-
ture). With a market-clearing price in the community-based
market, it becomes possible to apply dynamic pricing-based
demand–response mechanisms in the local P2P market. For
example, Liu et al. [6] proposed a P2P energy sharing model
for microgrid demand response using a dynamic internal pric-
ing model, in which internal prices are used for P2P energy
trading among local prosumers. A few works have been carried
out that involve suppliers in the local P2P market [5], [10].
These works propose demand–response mechanisms for the
prosumers, with the assumption that the supplier passively
provides electricity at a preannounced price. More realistic
scenarios remain to be studied, such as the development of
a demand–response mechanism with dynamic pricing for the
suppliers in P2P energy markets.
B. Blockchain-Based Energy Trading and Off-Chain
Operation
A blockchain is a distributed ledger that provides secure
storage of transactions using cryptographic techniques and
consensus protocols. Blockchains are an emerging technology
that can serve to implement P2P energy trading. Many projects
and start-up companies focus on blockchain-based energy
trading solutions [14]–[16]. For example, LO3 Energy [16]
developed an Ethereum and smart contract-based energy plat-
form (i.e., the TransActive Grid platform) for manageing P2P
energy trading, demand response, and grid balancing.
In the literature, many current P2P energy trading
approaches leverage permissioned blockchains that require
permissions to join its network (e.g., Hyperledger). For exam-
ple, Wang et al. [17] proposed an operational model for
P2P energy trading in crowdsourced energy systems (CESs),
using a Hyperledger blockchain as a secured database for
recording the energy transactions. While some works use
permissionless blockchains (e.g., Ethereum and IOTA) that
are more decentralized and allow anyone to participate. For
instance, Hassija et al. [18] proposed an energy trading model
in a vehicle-to-grid (V2G) network in which the IOTA-
based blockchain is used for the purpose of recording all the
transactions in a secure manner. A hybrid P2P energy trad-
ing system is proposed in [19], which leverages Ethereum
smart contracts. The existing blockchain-based energy trad-
ing approaches can be categorized into two groups in terms
of the way they leverage blockchain technology: 1) approaches
that use blockchains as secure databases for recording energy
transactions (e.g., [17]); 2) approaches that not only use
blockchains as secure databases but also encode their busi-
ness logic as smart contracts for secure operation (e.g., [19]
and [21]) or use smart contracts simply as electronic contracts
to record user agreements (e.g., [20]).
The off-chain concept became well-known since Joseph
proposed the lightning network that handles transactions off-
chain to address the scalability problem in Bitcoin [33]. Due
to the high cost of on-chain operation and storage, efforts have
been made on computing off-chain and storing off-chain [25]
to improve system performance, while still preserving system
integrity.
C. Hyperledger Fabric and Multiversion Concurrency
Control Conflicts
Hyperledger Fabric (Fabric) is an opensource permissioned
blockchain, where all clients are identified and authorized
before interacting with the blockchain network. Fabric can be
configured to use the Byzantine fault tolerance (BFT) or crash
fault-tolerant (CFT) consensus algorithm, with a negligible
cost for the smart contract operation.
A smart contract (also called the chaincode) in Fabric can
read and update ledger states. It is often used to encode
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
22 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022
Fig. 1. Proposed market model.
an application’s business logic and interact with application
clients.
Multiversion concurrency control (MVCC) is a mechanism
used in Fabric to increase system throughput in terms of
transactions processed per unit of time, especially, for those
transactions that manipulate the independent, nonconflicting
ledger state. However, for concurrent, potentially conflicting
transactions that manipulate the overlapping ledger state, key
collisions, the so-called conflicts, may ensue. Fabric uses a
key-value database to represent its state, e.g., LevelDB or
CouchDB. The key collision problem occurs when an applica-
tion needs the blockchain to process transactions submitted by
multiple concurrently operating clients, which may attempt to
modify overlapping sets of key–value pairs of the ledger state.
In this case, all transactions, except one, will fail, which is
the normal modus operandi for optimistic concurrency control
mechanisms such as MVCC. Such failures are referred to as
an MVCC conflict. The remedy is to redrive the failed trans-
action by the client (clients are notified of their transaction
failing). The net effect is increased latency due to transaction
having to be resubmitted. Efforts have been made to reduce
MVCC conflicts (e.g., see [26] and [27]).
III. DEMAND–RESPONSE GAMES IN P2P
ENERGY TRADING
Fig. 1 shows the proposed system model with N prosumers
(of which some are pure consumers), M suppliers, and a
blockchain-empowered community coordinator. The suppliers
are assumed to be equipped with their own energy generation
and they intend to sell the produced energy to the community
households when the local solar generation from the prosumers
cannot meet the demand. We divide a day into T time slots,
denoted as T = {1, . . . , T}. At each time slot (e.g., each hour),
prosumers (or pure consumers) decide on the amount of energy
that they intend to buy or sell according to their own estimated
solar generation and energy demand. Then, they send bids to
the community coordinator. At the same time, suppliers also
send their energy/price bids to the coordinator for each time
slot. The coordinator collects all the bids from the prosumers
and suppliers, and negotiates with suppliers on the external
energy price and trades with them on behalf of all the pro-
sumers. The coordinator also calculates the internal price pair
for selling and buying energy internally among prosumers
based on the aggregated energy deficit and the external price.
From the market point of view, the community coordinator
is assumed to be co-managed by multiple stakeholders act-
ing as a decentralized autonomous organization (DAO) using
blockchain technology [37]. The possible stakeholders that
may be interested in joining the blockchain network are: the
local government that aims to promote green energy among
households; the solar panel companies who attempt to sell
their solar products; distribution system operators (DSOs) and
transmission system operators (TSO) who want to govern the
energy balancing; the smart meter operators who own the raw
data on households’ energy consumption.
We model the trading problem as a multiagent system with
three types of agents: 1) supplier agent; 2) prosumer agent; and
3) coordinator agent. Note that we categorize pure consumers
as a special case of prosumers with zero solar energy genera-
tion. The coordinator sets the trading prices using two pricing
models: 1) an external pricing model that defines the external
price for importing energy from suppliers to the local com-
munity; 2) an internal pricing model that defines the internal
price pair for the internal energy buying/selling among local
prosumers. Suppliers decide their bids based on the energy
demand and supply to maximize their own profits, and their
behavior is modeled as a noncooperative game. Prosumers
decide on their energy demand according to the internal price
pair and try to maximize their personal payoff, which is also
modeled as a noncooperative game.
A. Supplier-Side Game
In our model, a set of suppliers M = {1, . . . , M} competes
with one another based on their supply function equilib-
rium [34]. Let βj,t denote the bid of supplier j ∈ M at time
slot t. We use so-called parameterized supply functions [28]
for suppliers, denoted as
sj,t = βj,t · pex
t (1)
where sj,t is the total amount of energy supply by supplier j at
time slot t, and pex
t is the external price that is used for trad-
ing between the suppliers and the community. Therefore, the
supplier’s bid is linearly related to the total supply of all sup-
pliers and the external price, and βj,t = sj,t/pex
t . Let Dt denote
the aggregated energy deficit, i.e., the gap between aggregated
local energy demand and aggregated local solar energy supply.
This is the total energy that prosumers need to import from
suppliers. Since suppliers are supposed to provide the corre-
sponding energy to meet the energy shortage of the prosumers,
the total supply from all suppliers equals the aggregated energy
deficit. Therefore
Dt =
∑
j∈M
sj,t. (2)
Since the suppliers are assumed only to sell energy to the
prosumers, rather than purchasing energy from the prosumers,
we have Dt ≥ 0. The external price is a function of the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: DEMAND–RESPONSE GAMES FOR P2P ENERGY TRADING WITH HYPERLEDGER BLOCKCHAIN 23
suppliers’ bids and the aggregated energy deficit
pex
t =
∑
j∈M sj,t∑
j∈M βj,t
= Dt∑
j∈M βj,t
. (3)
The supply function of supplier j can also be expressed as
the suppliers’ bids and the aggregated energy deficit
sj,t = βj,t · pex
t = βj,tDt∑
j∈M βj,t
. (4)
We determine the suppliers’ profit function as the profit
from selling the electricity minus the cost of producing it
πj,t
(
βj,t,β−j,t
) = sj,t
(
βj,t, Dt
)
pex
t
(
βj,t, Dt
) − Cj,t
(
sj,t
)
(5)
where the left-hand side of the equation is the profit for sup-
plier j with the knowledge of the other supplier’s bid. β−j,t is
the set of bids from all other suppliers but supplier j. Cj,t(·)
is the energy generation cost function of supplier j. Since the
cost function varies with different energy generation sources,
a general quadratic function is used to model the generation
cost from mixed energy sources
c
(
sj,t
) = a2s2
j,t + a1sj,t + a0 (6)
where a2, a1, and a0 are positive coefficients [24].
We substitute (3) and (4) into (5) a nd get the payoff func-
tion (7) for supplier j when other suppliers’ bids are fixed. In
the supplier-side game, suppliers receive the aggregated bids∑
r∈M βr,t from the coordinator but do not need to know any
other individual supplier’s bid. As shown in the right-hand side
of (7), together with the knowledge of the aggregated energy
deficit Dt and the cost function C(·), supplier j can decide
about its bid to maximize the profit
πj,t
(
βj,t,β−j,t
) = βj,tD2
t(∑
r∈M βr,t
)2
− cj,t
(
βj,tD∑
r∈M βr,t
)
. (7)
The supplier-side noncooperative game is defined as follows.
1) Players: The set of suppliers M.
2) Strategies: Each supplier j selects a bid βj,t to maximize
its payoff.
3) Payoffs: For an action βj,t, supplier j receives a payoff
defined in (7). The payoff of supplier j is the profit from
selling the electricity minus the cost of producing it.
Let βt
∗ denote the Nash equilibrium strategy of suppliers at
time slot t, and
πj,t
(
βt
∗) ≥ πj,t
(
βj,t,β
∗
−j,t
)
∀j ∈ M (8)
where βt
∗ = {β∗
j,t}.
Theorem 1: The supplier-side game is an n-person game,
and has a unique pure strategy Nash equilibrium.
Proof: There exists a unique strategy Nash equilibrium for
this game if the following optimization problem is strictly
concave and has a unique solution [29]:
maximize πj,t
(
βj,t,β−j,t
)
subject to βj,t ≥ 0. (9)
It is easy to see that the payoff function is strictly concave
since its second-order derivative is always negative. In this
case, there exists a unique solution for (9) and the existence
of the Nash equilibrium of this game is proven.
B. Prosumer-Side Game
We use N = {1, . . . , N} to denote the set of prosumers.
Prosumer i ∈ N is assumed to generate Eg
i,t amount of energy
at time slot t ∈ T . Note that a pure consumer who is not
equipped with solar generation is treated as a special case of
prosumer with Eg
i,t = 0. Let xi,t denote the amount of energy
that prosumer i consumes at time slot t. Therefore, the bid of
prosumer i is Eg
i,t − xi,t. When Eg
i,t − xi,t > 0, prosumer i acts
as a seller. Otherwise, the prosumer acts as a buyer. Prosumers
adjust their energy demand xi,t according to the buying price
pb
t and selling price ps
t that are used for trading with other
prosumers. Here, we call pb
t and ps
t the internal prices. In our
proposed model, the payoff of prosumer i is described using
a piecewise function as proposed in [6]
Ui,t
(
xi,t
) =
{
ai,tln
(
1 + xi,t
) + ps
t
(
Eg
i,t − xi,t
)
, Eg
i,t − xi,t > 0
ai,tln
(
1 + xi,t
) + pb
t
(
Eg
i,t − xi,t
)
, Eg
i,t − xi,t ≤ 0
(10)
where ai,tln(1 + xi,t) is the utility that the prosumer i achieves
from consuming xi,t amount of energy at time slot t. ai,t is
the reference parameter of prosumer i. Note that a prosumer
with higher ai,t will be more interested in consuming more
energy to achieve its maximum utility. ps
t (E
g
i,t − xi,t) is the
revenue that prosumer i receives by selling the excess energy,
and pb
t (E
g
i,t−xi,t) is the cost of the prosumer i for buying energy
at time slot t. The energy demand xi,t is bounded by its base
load that should always be supplied, denoted as xmin
i,t , and an
upper bound maximum load xmax
i,t such that xmin
i,t ≤ xi,t ≤ xmax
i,t .
Similar to the supplier-side problem, the prosumer-side
problem can also be described as a noncooperative game as
follows.
1) Players: The set of prosumers N.
2) Strategies: Each prosumer i decides on the amount of
energy xi,t that it attempts to consume to maximize its
payoff.
3) Payoffs: For an action xj,t, prosumer i needs to either buy
or sell |Eg
i,t −xi,t| amount of energy and receive a payoff
as described in (10). The payoff of a seller prosumer is
the profit of consuming xi,t amount of energy and the
income of selling the extra solar energy. For a buyer
prosumer, the payoff is the benefit of consuming xi,t
amount of energy minus the cost of buying the energy.
Similar to the supplier-side game, the existence and unique-
ness of the prosumer-side game can be proven accordingly. In
the Nash equilibrium, for given internal prices from the coor-
dinator, none of the prosumers has an incentive to deviate
from its optimal energy usage as long as the other prosumers’
strategy stays unchanged.
C. Pricing Models of the Coordinator Agent
The coordinator collects all the bids sent from suppliers
and prosumers and sets up external and internal prices based
on an external pricing model and an internal pricing model,
respectively.
1) External Pricing Model: Each time when the coordina-
tor collects all the bids from prosumers, it calculates the total
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
24 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022
energy supply Es
t and demand Ed
t by
Es
t =
∑
i∈N
max
{
Eg
i,t − xi,t, 0
}
Ed
t =
∑
i∈N
max
{
xi,t − Eg
i,t, 0
}
(11)
and calculates the aggregated energy deficit, Dt, of all the
prosumers
Dt = Ed
t − Es
t . (12)
Since the suppliers are assumed only to sell energy to the
prosumers, rather than purchasing energy from the prosumers,
we only consider the situation that Es
t ≤ Ed
t . The external price
for buying energy from suppliers is then calculated using (3).
2) Internal Pricing Model: The profit of the coordinator
is calculated as the difference between internal and external
prices minus the operational cost
R
(
ps
t , pb
t
)
= pb
t Ed
t − ps
t E
s
t − pex
t Dt − (
ηpex
t + b
)
(13)
where (ηpex
t + b) is the cost used for running the coordinator
at time slot t, and b is a constant value that represents the
equipment depreciation cost. η and b are positive coefficients.
The internal prices are bounded by λs ≤ ps
t ≤ pb
t ≤ pex
t ,
where λs represents the fixed price of selling energy back to
the main grid. This price limitation guarantees the incentive
for prosumers such that they always prefer trading their energy
with other neighboring prosumers rather than dealing with the
suppliers or the main grid directly.
It is important to define the profit of the coordinator since
profit keeps a market running. Liu et al. [6] proposed a pricing
model by maximizing the coordinator’s benefit, while some
other models, such as Liu et al. [5] presented an extra benefit
model for the coordinator to charge a so-called service fee. The
coordinator’s profit in our model can be defined as follows.
1) The maximum profit of the coordinator can be obtained
when pb
t = pex
t and ps
t = λs. In this way, it makes no
difference for the prosumers to directly trade with the
suppliers and the main grid. However, this may increase
the customer churn (i.e., fewer users will choose to join
the P2P market) and reduce incentives for consumers to
invest in renewable energy generation.
2) The minimum profit can be obtained when pb
t = ps
t = λs.
However, since λs ≤ ps
t ≤ pb
t ≤ pex
t , the coordinator
will have a negative profit margin. This will lead to less
motivation for the stakeholders to establish such a P2P
energy trading marketplace.
According to the utility function in (13), the profit of the
coordinator is highly related to the local solar energy genera-
tion and energy demand. For example, when Es
t � Ed
t , such
as on a cloudy day or in the evening, in order to guarantee
λs ≤ ps
t ≤ pb
t ≤ pex
t , there is almost no profit for the coordina-
tor. Therefore, we introduce two types of solar environments
according to the profit that the coordinator can obtain.
Period 1 (Solar Sufficient Time When R(ps
t , pb
t ) > 0): When
there is sufficient solar energy generation, the internal prices
are defined to guarantee the profit of the coordinator, such that
R
(
ps
t , pb
t
)
= �t (14)
where �t is a constant value that represents the profit the
coordinator obtains at time slot t. To guarantee the final con-
vergence, internal prices are set to be a linear function of the
aggregated energy deficit and the aggregated suppliers’ bids.
Thus
pb
t = λt
Dt∑
r∈M βr,t
t ∈ T (15)
ps
t = μt
Dt∑
r∈M βr,t
t ∈ T. (16)
In this way, given Dt and one of the predefined coefficients
λt or μt, we can find a unique internal prices pair [pb
t , ps
t ].
Period 2 (Solar Insufficient Time When R(ps
t , pb
t ) ≤ 0):
When Es
t � Eb
t , the internal price will be set to ps
t = pb
t = pex
t ,
which maximizes the profit of both the coordinator and the
prosumers who act as sellers; at the same time, the internal
buying price is not higher than the external price.
IV. DISTRIBUTED ALGORITHM DESIGN
In our proposed model, prosumers and suppliers need to
make decisions indirectly based on the other players’ strate-
gies. We design a distributed algorithm to protect the privacy
of the attending prosumers and suppliers such that they do not
need to know any other individual player’s strategy. Prosumers
calculate their bids only based on the energy trading prices sent
by the coordinator. The algorithm is based on the projected
gradient method [30]. Let k denote the iteration number. Let
xk
i,t denote the energy demand of prosumer i ∈ N in the kth
iteration at time slot t. Then, the bids sent from prosumer i is
Eg
i,t − xk
i,t. Let βk
j,t denote the bid from supplier j ∈ M in the
kth iteration at time slot t. Let pex,k
t denote the external price
in iteration k. Let pb,k
t and ps,k
t denote the internal buying and
selling price in iteration k, respectively. For each time slot t,
each agent updates its decision based on the received values
of pb,k
t and ps,k
t . Therefore, the results will eventually converge
to a single point for every agent. At the kth iteration, since the
solar generation is unchanged during the iteration, prosumers
update their bids Eg
i,t − xk
i,t only by updating xk
i,t, according to
the following iterative equation:
xk
i,t =
[
xk−1
i,t + θi,t
∂Ui,t
(
x,tik−1
)
∂xk−1
i,t
]+
(17)
where θi,t is the step length of the prosumer agent i. [·]+ rep-
resents the projection onto the feasible set, which guarantees
the load of prosumer i is bounded by xmin
i,t ≤ xk
i,t ≤ xmax
i,t .
When receiving all bids from the prosumers, the coordinator
will calculate the aggregated energy deficit Dk
t , and send it to
suppliers. Then, suppliers update their bids βk
j based on the
external price pex,k−1
t from the last iteration according to the
following iterative equation:
βk
j,t = βk−1
j,t + γj,t
∂πj,t
(
βk−1
j,t
)
∂βk−1
j,t
(18)
where γj,t denotes the step length of supplier j. Note that sup-
pliers do not need to know the other suppliers’ bids. They only
need to calculate the sum of suppliers’ bids with the known
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: DEMAND–RESPONSE GAMES FOR P2P ENERGY TRADING WITH HYPERLEDGER BLOCKCHAIN 25
Fig. 2. Distributed algorithm.
Algorithm 1 Trading Negotiation
1: Initialization: k=0
2: repeat
3: For each i in prosumer agents: calculate xk
i,t according
to (17), then send Eg
i,t − xk
i,t to the coordinator agent.
4: Coordinator agent: calculate Dk
t , then send it to supplier
agents.
5: For each j in supplier agents: calculate βk
j,t according
to (18), then send it to the coordinator agent.
6: Coordinator agent: calculate pex,k
t , pb,k
t , ps,k
t , and broad-
cast them.
7: until |pex,k
t − pex,k−1
t | < ε, where ε is a relatively small
value.
value Dk
t and pex,k
t according to (3). After receiving the updated
bids from all suppliers, the coordinator will update the exter-
nal price pex,k
t and the internal price pair [pb,k
t , ps,k
t ] according
to the pricing model and broadcast the prices to suppliers and
prosumers. This iterative process will keep repeating until the
results from all agents converge. The distributed algorithm is
illustrated in Fig. 2 and Algorithm 1.
Since the Nash equilibrium of supplier-side and prosumer-
side games are unique, the iterative processes (17) and (18)
will converge to the Nash equilibrium of the games after suf-
ficiently small step sizes θi,t and γj,t [30]. In fact, given the
parameters in the pricing model at the coordinator, the algo-
rithm converges to a point in which suppliers are playing their
equilibrium strategy based on the aggregated energy deficit
of prosumers, and the prosumers also select their equilibrium
strategy based on the aggregated bids of suppliers. In the equi-
librium, none of the agents gains a benefit by deviating from
their chosen strategy. We apply the Armijo–Goldstein step size
rule for the related gradient methods to achieve fast conver-
gence. The Armijo–Goldstein rule [38] is a line search method
that starts with a relatively large estimated step size given a
search direction, and performs backtracking until observing a
decrease of the objective function.
The complexity of the gradient descent used by suppliers
is O(1/ε) where ε is the given accuracy and ε > 0. Since
computing the projection does not increase the algorithm com-
plexity, the projected gradient method used by prosumers is
also O(1/ε). Therefore, the overall complexity of our proposed
algorithm is O(1/ε). This low complexity guarantees that the
algorithm converges fast.
Fig. 3. Implementation structure of the trading system.
V. IMPLEMENTATION OF THE P2P ENERGY TRADING
Fig. 3 shows the implementation architecture of the
multiagent system. The system is composed of three types
of agents, of which the blockchain-based coordinator agent
further consists of several components.
Prosumer and supplier agents are implemented using Fabric
Java software development kit (SDK) programs that provide
application programming interfaces (APIs) for interacting with
the Hyperledger Fabric blockchain network. They can either
query the smart contract for the current market prices or
submit transactions to update their bids during the trading
process.
A coordinator agent runs in a Hyperledger blockchain
network with its functions and logic implemented as a smart
contract. Prosumer and supplier agents interact with the coor-
dinator by invoking functions in a smart contract, and the
smart contract updates the ledger. The smart contract func-
tions include: 1) calculating and updating the market prices
based on our proposed pricing models; 2) handling initiation,
query, or bid-update transactions from prosumer and supplier
agents; and 3) managing and controlling the trading process.
Peers and ledgers are managed and maintained by different
organizations to perform consensus and to record trading data.
A Fabric administrator maintains and manages smart con-
tracts and is also implemented using Fabric Java SDK pro-
grams. A Fabric administrator deploys, installs, initiates, and
upgrades smart contracts in the blockchain network.
Certificate authority (CA) and order services, respectively,
provide access control and generate blocks with the accepted
order of transactions. Prosumer and supplier agents have to
enroll and register with CA in advance to be able to invoke
the smart contract.
We implement the multiagent system with two different pro-
cessing modes. First is an on-chain processing mode through
which the coordinator updates prices in the smart contract
during the entire algorithm iterations. Due to the cost and
inefficiency of on-chain operations, we implement the second
mode, which is an off-chain processing mode that runs price
updating outside of blockchain but verifies the final results
on-chain. Note that blockchain technology is utilized on the
coordinator agent for improving the integrity of the pricing
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
26 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022
models and the stored trading data. However, other agents of
the multiagent system are still voluntary for many attacks (e.g.,
false data injection attack [36]), which is outside the scope of
this article. In this article, only the security of the coordi-
nator agent is considered. Therefore, an assumption is made
in this article that prosumers and suppliers are honest and
invulnerable.
A. On-Chain Processing Mode
For the on-chain processing mode, we implement both syn-
chronous and asynchronous operation modes and intend to
study the different degrees of system robustness under these
two modes.
1) Synchronous Operation Mode: To guarantee the abso-
lute correctness of the algorithm operation, for each iteration,
the coordinator waits for the last prosumer or supplier’s bid
before updating prices. Meanwhile, prosumers and suppliers
only update their bids after the prices get updated in the ledger.
This is done in our approach by maintaining the version of bids
Vb and prices Vp.
Note that the total number of prosumers and suppliers is
supposed to be unchanged during the algorithm iterations, and
the coordinator needs to have a global view of how many
prosumers and suppliers have updated their bids. However,
due to the MVCC conflict, it is impossible to maintain and
update a global variable to record the total number of cur-
rently updated bids. Otherwise, it is very likely to occur that
more than one prosumer tries to update this variable simul-
taneously. Therefore, we implement a trigger function in the
smart contract that counts the total number of the updated
bids in the ledger and invokes another smart contract func-
tion to update prices as soon as enough bids are updated.
This trigger function can only be invoked by the adminis-
trator at a certain time interval (e.g., every second). We refer
to this epoch between two adjacent invocations of the trigger
function as the trigger interval. This variable influences the
performance of our proposed system and will be further ana-
lyzed in Section VI. The procedures of the trading process are
as follows.
1) Prosumer and supplier agents initiate first bids and set
the version of bid Vb to 1 by sending transactions that
invoke the initiation function in the smart contract.
2) The coordinator collects all the initiation information
from prosumers and suppliers, and creates and maintains
a JSON object for each of them, as shown below. The
coordinator counts the total number of initiated/updated
bids after its trigger function is invoked by the admin-
istrator. If all prosumers and suppliers have placed their
bids, the coordinator calculates/updates prices based on
the external and internal pricing models, and increases
the price version Vp by 1 in the ledger
User_Obj = {
"User_ID":"000123",
"Role": "prosumer",
"Bid": "20.34",
"Bid_version": "1"
}.
3) Prosumer and supplier agents query the ledger for Vp at
a certain time interval (e.g., every 100 ms), and update
their bids when Vp has been increased. The converged
status also needs to be queried to see if the process is
finished. The reason for these frequent queries is that the
ledger acts passively and does not send any notification
once its data are updated.
4) The coordinator compares the current price values with
their previous version and set the convergence status to
TRUE when the difference is smaller than a given ε.
Note that the existence of the Fabric administrator does not
decrease the system integrity, since it has limited operation
privileges. All operations of the administrator are done by
sending transactions to the blockchain, which will be verified
by the blockchain network. The drawback of this synchronous
operation is that when one or more prosumers or suppliers fail
to submit bids due to local failure or communication error, the
trading for this time slot will fail.
2) Asynchronous Operation Mode: As a mitigation for the
above drawback in the synchronous operation mode, we imple-
ment an asynchronous operation mode, which is tolerant to
a certain level of data loss and delay. Instead of waiting
for the reception of all the updated bids at each iteration,
the market prices will be updated at a fixed time interval,
regardless of how many bids have been updated. In this
case, for those bids that have not been updated, their latest
value will be used when updating prices. The smart con-
tract function that updates market prices is also invoked by
the Fabric administrator since automating a timed transac-
tion to invoke the function within the smart contract is not
possible. This is because there is no global clock within the
blockchain network since different peers maintain their own
local clocks.
In the asynchronous mode, it is very likely that the MVCC
conflicts will occur, because of read–write conflicts between
prosumers and the coordinator (i.e., when the coordinator is
trying to read a bid that is being updated by a prosumer).
The goal of applying the asynchronous operation mode is to
tolerant a certain amount of MVCC conflicts and delay while
still converging to the optimal or suboptimal results of the
algorithm.
B. Off-Chain Processing Mode
Every transaction that interacts with the smart contract goes
through a consensus process, which involves all the related
peers in the blockchain network. Therefore, one successful
trading experiences a long latency and high overhead which
consumes massive computation resources.
To provide shorter latency, which is required by the real-
time P2P market (e.g., a 5-min price interval) and to reduce
the computational cost, we propose an off-chain processing
mode with on-chain validation. The off-chain processing will
highly reduce latency and overhead, while still preserving the
integrity and nonreputation of the coordinator by on-chain
validation. Fig. 4 shows the system structure at the off-chain
processing mode.
An off-chain solver runs the same pricing models as the
coordinator but in a centralized manner. It can be managed
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: DEMAND–RESPONSE GAMES FOR P2P ENERGY TRADING WITH HYPERLEDGER BLOCKCHAIN 27
Fig. 4. Implementation structure at off-chain processing mode.
by any third party that offers computing services and it does
not need to be trusted. We implemented the off-chain solver
as Fabric Java SDK programs.
In the off-chain processing mode, instead of doing all the
price updating on-chain (i.e., running operations by invoking
the smart contract), we offload part of the operations and com-
munications to the off-chain solver and validate the off-chain
results on-chain. Prosumer and supplier agents will receive
the IP address of the off-chain solver from the coordinator,
after registered for the energy trading on-chain. Prosumers
and suppliers submit and update bids by directly interacting
with the off-chain solver in the traditional server-client model.
Since the algorithm iterations are running off-chain without
going through the consensus process, it will take much less
time for the distributed algorithm to converge. After off-chain
convergence, the off-chain solver will submit the final results
(i.e., the final market prices) to the smart contract for on-chain
validation by sending a transaction to the coordinator.
Since the off-chain solver is an off-chain entity, it is con-
sidered vulnerable. The coordinator needs to validate the
correctness of the result submitted from the off-chain solver.
The validation is to repeat the iteration for one more time
on-chain, interacting with the same group of prosumer and
supplier agents. The validation process is the same as in the
on-chain mode but with only one iteration. Let p represent the
off-chain result set submitted by the off-chain solver and let
b = {d1, d2, .., dN, β1, β2, . . . , βM} denote the bid set of all
N prosumers and M suppliers when the algorithm converges
off-chain. Let bv and pv denote the bid and price sets, respec-
tively, in the on-chain validation iteration, and let ε be a value
that is close to 0. The validation is based on the concept of
Nash equilibrium, i.e., if no player changes his or her bid in
the validation iteration (i.e., ‖bv − b‖ ≤ ε), and the price is
unchanged during the validation (i.e., ‖pv − p‖ ≤ ε), p and b
is the correct Nash equilibrium.
If the off-chain result set p submitted by the off-chain solver is
correct (i.e., the result converged off-chain), when we continue
the iteration using the on-chain pricing model, the results should
be still converged after one or more iterations (i.e., we will get
‖bv − b‖ ≤ ε and ‖pv − p‖ ≤ ε) according to the definition of
the Nash equilibrium, since it is assumed that the prosumer and
supplier agents are honest and invulnerable. Otherwise, if the
on-chain validation does not converge, we can conclude that the
off-chain result p is incorrect, since if there is still one or more
Fig. 5. Energy with and without the demand–response mechanism.
players changing their bids during the iteration, the current
value is not the Nash equilibrium. On the other hand, since
the validation process is relatively simple with a complexity
of O(M + N), the overall complexity is not influenced.
VI. NUMERICAL RESULTS
We develop a blockchain network on a Kubernetes v1.11.3
cluster using Hyperledger Fabric v1.4 [35], consisting of three
controller nodes, three worker nodes, one DNS and load bal-
ancer node, and one network file system (NFS) node. Each
node runs on Ubuntu 16.04 virtual machines (VMs) with
four virtual CPUs (vCPUs) and 9.8-GB RAM. Each prosumer
and provider agent runs on 16.04 VMs with 1 vCPUs and
2.4-GB RAM, and an off-chain solver runs on a VM with four
vCPUs and 9.8-GB RAM. All VMs are installed on top of a
Kernel-based VM (KVM) provided by OpenStack Mitaka and
are interconnected by 10-GB Ethernet. The communication
between the off-chain solver and the prosumers and suppliers
is enabled by the WebSocket protocol. CouchDB is used as the
database and Apache Kafka is used for the ordering service in
Fabric. All experiments run a blockchain network consisting
of two organizations with two peers per organization, and one
orderer node.
A. Algorithm Evaluation
We use real data from the city of Austin, Texas for the
algorithm evaluation [31]. The data are collected on a sunny
day August 1, 2018. We use the grid acquisition price of
$0.089 as the baseline for our proposed model [32]. This price
is used by the Austin energy grid for rewarding prosumers
for their solar generation. In the studied community, there
are N = 63 households, out of which 33 are equipped with
rooftop PV panels. The other 30 households are pure electricity
consumers with Eg
i,t = 0. There are M = 3 supplier companies
that participate in the P2P market. The length of a time slot
is equal to 1 h, i.e., t = 1 h. The values of the parameter
ai,t in (9) are randomly generated from a normal distribution
with mean 0.7 and 0.8, for the prosumers with solar generation
and the pure consumers, respectively. Loads of air conditioners,
dishwashers, and washing machines are categorized as shiftable
loads. Since there is no solar generation during the evening,
only the performance of the model from 7 o’clock to 19 o’clock
is evaluated.
Fig. 5 illustrates the initial total energy demand, the aggre-
gated energy deficit with and without applying the proposed
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
28 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022
Fig. 6. External and internal prices at different time slots.
Fig. 7. Profit of the prosumers and the coordinator.
mechanism, respectively, and the total solar generation. As
shown in the figure, the initial total energy demand experi-
ences a peak load at around 17 o’clock. Since a portion of the
energy demand is provided by the local solar generation, the
aggregated energy deficit is much less than the total energy
demand. However, due to the limited solar generation in the
early morning and in the late afternoon, the effect on the peak
load hours is limited. Additionally, since the energy deficit in
the middle of the day is highly reduced because of the suffi-
cient solar generation, it shows two peak loads and a higher
peak-to-average ratio in the energy deficit curve. After apply-
ing the proposed P2P trading mechanism, the energy deficit
during the peak hours is partially shifted to the off-peak hours,
and a lower peak-to-average ratio is achieved.
Fig. 6 presents the external and internal prices at different
time slots. Due to insufficient local solar generation before
9 o’clock and after 17 o’clock, the internal prices are equal to
the external price, according to the proposed internal pricing
model. As shown in Fig. 6, compared with selling solar energy
to the main grid at a fixed price of 0.089, the prosumers acting
as sellers get a better price when trading the energy via the P2P
trading system. Prosumers acting as buyers also get a lower
price for buying energy from the P2P trading, compared with
directly buying from suppliers.
Fig. 7 shows the average profit of prosumers and the profit
of the coordinator. It indicates that prosumers with solar gen-
eration get much more profit than pure consumers. This result
shows that our proposed P2P trading mechanism works as
an incentive that motivates consumers to invest in PV panels
and become prosumers. The coordinator gets more profit in
the middle of the day when there is more solar generation
and zero profit in the morning and evening when the internal
prices are equal to the external prices.
In order to evaluate the robustness of our proposed algo-
rithm to different solar conditions, we conduct further experi-
ments with a longer observation period, different seasons and
weather conditions, including: 1) an observation of three con-
tinuous days in summer and 2) an observation of a rainy day
in the winter. New results are shown in Figs. 8 and 9, respec-
tively, consisting of the aggregated energy deficit and trading
prices. From the figures, we can see that the performance of
the aggregated energy deficit before and after applying our
proposed demand response of both observation periods are
similar and consistent with our previous observation in Fig. 5.
B. System Performance Evaluation
We first evaluate the robustness of the proposed asyn-
chronous on-chain mode by analyzing its output loss, i.e., the
gap between the experimental output and the expected output.
Here, the output is the energy trading prices obtained from
running in the asynchronous on-chain mode.
Fig. 10 illustrates the output loss and MVCC conflict
frequency at different data delay in each iteration. Since agents
are connected over a LAN in our experiment, not much delay
or packet loss occurs during the trading process. We, there-
fore, simulate the data delay by adding a random sleep time
at the prosumer and supplier agents’ programs, every time
before they submit bids. These random numbers of the sleep
time are generated following the Gaussian distribution with
different mean and variance. From the figure, we can see that
a certain data delay (e.g., less than 7.5 s) and MVCC con-
flict frequency (e.g., less than 60 numbers per minute) has a
limited influence on the final output (i.e., less than 0.001).
We also evaluate the latency and overhead of the trading
system in both on-chain and off-chain modes for accomplish-
ing one successful trading under various configurations. Before
the trading algorithm starts running, all prosumer and supplier
agents join the trading by registering themselves with CA at a
random time epoch within a certain time duration. The latency
is measured by Latency = end_time − start_time, where the
start_time is the time that the last prosumer (or provider) agent
joins the trading, and the end_time is the time that the last
prosumer (or provider) agent receives the trading results. We
measure the system overhead by counting the total number of
blocks generated between the end_time and the start_time. The
reasons for this are: 1) each block contains data overhead (e.g.,
blockhead); 2) blocks are broadcasted among peers, which cre-
ates communication overhead within the blockchain network;
and 3) all blocks are eventually stored in each peer’s disk.
Therefore, when keeping the number of transactions constant,
a larger number of blocks leads to more overhead in both
storage and communication.
Two important parameters are considered in our evaluation.
1) Batch_Timeout: The amount of time to wait after the first
transaction arrives for subsequent transactions before
committing a block;
2) Trigger Interval: The epoch between two adjacent invo-
cations of the trigger function in the synchronous on-
chain mode. In the asynchronous on-chain mode, the
trigger interval refers to the epoch between two adjacent
invocations of updating prices.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: DEMAND–RESPONSE GAMES FOR P2P ENERGY TRADING WITH HYPERLEDGER BLOCKCHAIN 29
Fig. 8. Aggregated energy deficit and trading prices for a community with ten prosumers and seven consumers from 08-02-2018 at 00:00 hours to 08-05-2018
at 23:00 hours. The weather is sunny.
Fig. 9. Aggregated energy deficit and trading prices for a community with
ten prosumers and seven consumers at 07-12-2018 from 00:00 to 23:00 hours.
The weather is rainy.
Fig. 10. System robustness in the asynchronous mode.
Fig. 11. Latency and overhead with different trigger intervals. (a) Latency.
(b) Number of block.
Fig. 11 illustrates the latency and the number of gener-
ated blocks at different trigger intervals. We can see that a
longer trigger interval results in higher latency. The off-chain
mode has the lowest latency and overhead, which is more than
ten times less than on-chain modes. For on-chain processing
modes, the asynchronous mode has slightly higher latency than
the synchronous mode, while the overhead is almost the same.
Fig. 12. Latency and overhead with different number of prosumers.
(a) Latency. (b) Number of block.
The reason is that more MVCC conflicts occur in the asyn-
chronous mode, which slightly delays the process. Note that
the trigger interval in the asynchronous mode should not be
shorter than the batch_timeout. Otherwise, the transactions that
invoke the trigger function for price updating will very likely
conflict with their own previous transactions.
Fig. 12 presents the latency and the number of generated
blocks with different numbers of prosumers. It can be seen
from the figures that more prosumers lead to higher latency
and overhead. The latency increases with increasing the num-
ber of prosumers up to 100, after which it remains stable.
Since more prosumers mean more transactions stored on the
blockchain, the number of blocks increases almost linearly
with the increase in the number of prosumers. The off-chain
mode still has the lowest latency and overhead.
Fig. 13 shows the latency and the number of gener-
ated blocks at different batch_timeout values. Since longer
batch_timeout causes longer delay when creating new blocks,
it leads to longer total latency for all processing modes, as
shown in Fig. 13(a). We can also observe from Fig. 13 (b)
that with a longer batch_timeout, there is a slight decrease
in the number of generated blocks. Since the total number of
transactions is kept unchanged, with a longer batch_timeout,
more transactions are collected into a single block, leading to
less number of blocks in total. The off-chain mode still has
the lowest latency and overhead.
VII. CONCLUSION
We proposed a blockchain-empowered P2P energy trad-
ing system consisting of heterogeneous market participants.
A game theory-based demand–response mechanism was
proposed, which involves active energy suppliers. Two non-
cooperative games were modeled for demand–response man-
agement. A distributed algorithm was developed to determine
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
30 IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS: SYSTEMS, VOL. 52, NO. 1, JANUARY 2022
Fig. 13. Latency and overhead with different batch_timeout values.
(a) Latency. (b) Number of block.
the equilibrium. We proposed a smart contract-based commu-
nity coordinator running in a Hyperledger blockchain network,
and prototyped two processing modes for the system imple-
mentation. Numerical results from experiments showed that
our proposed demand–response mechanism has a great effect
on reducing the net peak load. The experimental results also
showed the feasibility of our proposed blockchain-empowered
trading system and indicated that the off-chain processing
mode provides lower latency and overhead compared to the
on-chain mode while still keeping the same system integrity
as the on-chain mode. In our future work, we will take into
account the energy scheduling of households by leveraging
deep learning mechanisms for the demand–response model.
REFERENCES
[1] M. Zhang, F. Eliassen, A. Taherkordi, H.-A. Jacobsen, H. M. Chung, and
Y. Zhang, “Energy trading with demand response in a community-based
P2P energy market,” in Proc. IEEE SmartGridComm, 2019, pp. 6–11.
[2] T. Sousa, T. Soares, P. Pinson, F. Moret, T. Baroche, and E. Sorin,
“Peer-to-peer and community-based markets: A comprehensive review,”
Renew. Sustain. Energy Rev., vol. 104, pp. 367–378, Apr. 2019.
[3] E. Sorin, L. Bobo, and P. Pinson, “Consensus-based approach to peer-
to-peer electricity markets with product differentiation,” IEEE Trans.
Power Syst., vol. 34, no. 2, pp. 994–1004, Mar. 2019.
[4] M. N. Faqiry and S. Das, “Double auction with hidden user information:
Application to energy transaction in microgrid,” IEEE Trans. Syst., Man,
Cybern., Syst., vol. 49, no. 11, pp. 2326–2339, Nov. 2019.
[5] N. Liu, X. Yu, C. Wang, C. Li, L. Ma, and J. Lei, “Energy-sharing
model with price-based demand response for microgrids of peer-to-peer
prosumers,” IEEE Trans. Power Syst., vol. 32, no. 5, pp. 3569–3583,
Sep. 2017.
[6] N. Liu, X. Yu, C. Wang, and J. Wang, “Energy sharing management for
microgrids with PV prosumers: A stackelberg game approach,” IEEE
Trans. Ind. Informat., vol. 13, no. 3, pp. 1088–1098, Jun. 2017.
[7] M. Khorasany, Y. Mishra, and G. Ledwich, “Hybrid trading scheme for
peer-to-peer energy trading in transactive energy markets,” IET Gener.
Transm. Distrib., vol. 14, no. 2, pp. 245–253, 2019.
[8] N. Z. Aitzhan and D. Svetinovic, “Security and privacy in decentral-
ized energy trading through multi-signatures, blockchain and anonymous
messaging streams,” IEEE Trans. Dependable Secure Comput., vol. 15,
no. 5, pp. 840–852, Sep./Oct. 2018.
[9] F. Moret, T. Baroche, P. Pinson, and E. Sorin, “Negotiation algorithms
for peer-to-peer electricity markets: Computational properties,” in Proc.
Power Syst. Comput. Conf., Dublin, Ireland, Jun. 2018, pp. 1–7.
[10] M. H. Cintuglu, H. Martin, and O. A. Mohammed, “Real-time imple-
mentation of multiagent-based game theory reverse auction model for
microgrid market operation,” IEEE Trans. Smart Grid, vol. 6, no. 2,
pp. 1064–1072, Mar. 2015.
[11] Open Utility. (2016). A Glimpes into the Future of Britain’s Energy
Economy. [Online]. Available: https://piclo.uk
[12] Vandebron. Accessed: Sep. 15, 2021. [Online]. Available:
https://vandebron.nl
[13] SonnenCommunity. Accessed: Sep. 15, 2021. [Online]. Available:
https://sonnengroup.com/sonnencommunity/
[14] Electron. Accessed: Sep. 15, 2021. [Online]. Available:
https://electron.net/
[15] Power Ledger. Accessed: Sep. 15, 2021. [Online]. Available:
https://powerledger.io/
[16] Transactive Grid, LO3 Energy. Accessed: Sep. 15, 2021. [Online].
Available: http://lo3energy.com/transactive-grid/
[17] S. Wang, A. F. Taha, J. Wang, K. Kvaternik, and A. Hahn, “Energy
crowdsourcing and peer-to-peer energy trading in blockchain-enabled
smart grids,” IEEE Trans. Syst., Man, Cybern., Syst., vol. 49, no. 8,
pp. 1612–1623, Aug. 2019.
[18] V. Hassija, V. Chamola, S. Garg, N. G. K. Dara, G. Kaddoum, and
D. N. K. Jayakody, “A blockchain-based framework for lightweight data
sharing and energy trading in V2G network,” IEEE Trans. Veh. Technol.,
vol. 69, no. 6, pp. 5799–5812, Jun. 2020.
[19] R. Khalid, N. Javaid, A. Almogren, M. U. Javed, S. Javaid, and M. Zuair,
“A blockchain-based load balancing in decentralized hybrid P2P energy
trading market in smart grid,” IEEE Access, vol. 8, pp. 47047–47062,
2020.
[20] X. Yang, G. Wang, H. He, J. Lu, and Y. Zhang, “Automated demand
response framework in ELNs: Decentralized scheduling and smart con-
tract,” IEEE Trans. Syst., Man, Cybern., Syst., vol. 50, no. 1, pp. 58–72,
Jan. 2020.
[21] J. Abdella, Z. Tari, A. Anwar, A. Mahmood, and F. Han, “An archi-
tecture and performance evaluation of blockchain-based peer-to-peer
energy trading,” IEEE Trans. Smart Grid, vol. 12, no. 4, pp. 3364–3378,
Jul. 2021.
[22] T. Alskaif, J. L. Crespo-Vazquez, M. Sekuloski, G. V. Leeuwen, and
J. P. S. Catalao, “Blockchain-based fully peer-to-peer energy trading
strategies for residential energy systems,” IEEE Trans. Ind. Informat.,
early access, May 3, 2021, doi: 10.1109/TII.2021.3077008.
[23] J. G. Song, E. S. Kang, H. W. Shin, and J. W. Jang, “A smart contract-
based P2P energy trading system with dynamic pricing on ethereum
blockchain,” Sensors, vol. 21, no. 6, pp. 1985, 2021.
[24] B. Chai, J. Chen, Z. Yang, and Y. Zhang, “Demand response manage-
ment with multiple utility companies: A two-level game approach,” IEEE
Trans. Smart Grid, vol. 5, no. 2, pp. 722–731, Mar. 2014.
[25] D. Francati et al., “Audita: A blockchain-based auditing framework for
off-chain storage,” 2019. [Online]. Available: arXiv:1911.08515.
[26] J. A. Chacko, R. Mayer, and H.-A. Jacobsen, “Why do my blockchain
transactions fail? A study of hyperledger fabric,” 2021. [Online].
Available: arXiv:2103.04681.
[27] P. Nasirifard, R. Mayer, and H.-A. Jacobsen, “FabricCRDT: A conflict-
free replicated datatypes approach to permissioned blockchains,” in
Proc. Middleware, 2019, pp. 110–122.
[28] R. Johari and J. N. Tsitsiklis, “Parameterized supply function bidding:
Equilibrium and efficiency,” Oper. Res., vol. 59, no. 5, pp. 1079–1089,
2011.
[29] J. B. Rosen, “Existence and uniqueness of equilibrium points for concave
N-person games,” Econometrica, vol. 33, no. 3, pp. 520–534, 1965.
[30] W. Stephen and N. Jorge, “Numerical optimization,” Springer Sci.,
vol. 35, no. 7, pp. 67–68, 1999.
[31] Pecan Street, Inc. (2019). Dataport. [Online]. Available:
https://www.pecanstreet.org/
[32] Austin Energy, Inc. (2018). Value of Solar (VoS) Rate. [Online].
Available: https://austinenergy.com/ae/residential/rates/value-of-solar-
rate
[33] J. Poon and T. Dryja, The Bitcoin Lightning Network: Scalable Off-
Chain Instant Payments, Lightning Labs, San Francisco, CA, USA,
2016.
[34] R. Johari and J. Tsitsiklis, “Parameterized supply function bid-
ding: Equilibirium and welfare,” Math. Oper. Res., vol. 59, no. 5,
pp. 1079–1089, 2011.
[35] Hyperledger. (2019). A Blockchain Platform for the Enterprise. [Online].
Available: https://hyperledger-fabric.readthedocs.io/en/release-1.4
[36] S. Mohammadi, F. Eliassen, and Y. Zhang, “Effects of false data injec-
tion attacks on a local P2P energy trading market with prosumers,”
in Proc. IEEE PES Innovat. Smart Grid Technol. Conf. (ISGT), 2020,
pp. 31–35.
[37] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-in hybrid
electric vehicles using consortium blockchains,” IEEE Trans. Ind.
Informat., vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[38] A. Larry, “Minimization of functions having Lipschitz continuous first
partial derivatives,” Pac. J. Math., vol. 16, no. 1, pp. 1–3, 1966.
Min Zhang received the B.S. degree in peer
to peer energy trading and blockchain technology
from the Department of Digital Media Engineering,
Xiamen University, Xiamen, China, in 2013, and
the M.S. degree in peer to peer energy trading
and blockchain technology from the Department
of Information Communication Technology, Agder
University, Kristiansand, Norway, in 2017. She is
currently pursuing the Ph.D. degree in peer to peer
energy trading and blockchain technology with the
Department of Informatics, University of Oslo, Oslo,
Norway.
Her current research interests include energy informatics, P2P energy
trading, and blockchain technologies.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TII.2021.3077008
ZHANG et al.: DEMAND–RESPONSE GAMES FOR P2P ENERGY TRADING WITH HYPERLEDGER BLOCKCHAIN 31
Frank Eliassen (Member, IEEE) is a Professor
with the Department of Informatics, University
of Oslo, Oslo, Norway. He is an experienced
researcher and a project manager for several decades,
in the areas of distributed systems middleware
and IoT/cyber–physical systems (CPS) with expe-
rience from national and EU level projects. His
current research interests include service-oriented
IoT/edge/fog computing and CPS middleware and
programming models in application areas, includ-
ing smart cities and smart grids, adaptive software
systems, autonomic systems (self-*), peer-to-peer systems, and cooperative
microgrids.
Amir Taherkordi received the Ph.D. degree from
the Informatics Department, University of Oslo
(UiO), Oslo, Norway, in 2011.
He is an Associate Professor with the Department
of Informatics, UiO. After completing the Ph.D.
studies, he joined Sonitor Technologies, Greenwich,
CT, USA, as a Senior Embedded Software Engineer.
From 2013 to 2018, he was a Researcher with
the Networks and Distributed Systems Group,
Department of Informatics, UiO. He has so far pub-
lished several articles in high-ranked conferences
and journals, and he has experience from several national (Norwegian
Research Council) and international (European research funding agencies)
research projects. His research interests are broadly on resource efficiency,
scalability, adaptability, dependability, mobility, and data intensiveness of
distributed systems designed for emerging computing technologies, such as
Internet of Things, fog/edge/cloud computing, and cyber–physical systems.
Hans-Arno Jacobsen (Fellow, IEEE) received the
M.A.Sc. degree from the University of Karlsruhe,
Karlsruhe, Germany, in 1994, and the Ph.D. degree
from the Humboldt University, Berlin, Germany, in
1999.
From 1992 to 1998, he engaged in predoctoral
research activities working with various research
laboratories worldwide, including LIFIA, Grenoble,
France; International Computer Science Institute,
Berkeley, CA, USA; and Lawrence Berkeley
National Laboratory, Berkeley. After completing
his Doctorate degree, he engaged in postdoctoral research with INRIA,
Rocquencourt, France, from 1998 to 1999, before joining the University
of Toronto, Toronto, ON, Canada, in 2001. He is a Professor of Computer
Engineering with the University of Toronto. He directs and leads the research
activities of the Middleware Systems Research Group. His research aims to
ease the development of scalable, reliable, and secure ultralarge-scale dis-
tributed applications. In pursuit of these objectives, he engages in basic
research on event processing, publish/subscribe, service orientation, aspect
orientation, and green middleware. In research and development engagements
with various companies, he pursues projects on large-scale business process
management, service delivery models, service and infrastructure manage-
ment, and e-energy. Selected research projects include the PADRES Events
and Services Bus for effective business process management, the eQoSys-
tem project for declarative monitoring and control of SLAs (service level
agreements) in enterprize applications and business artifacts, and the AspeCtC
(ACC) project for increasing modularity in systems software and embedded
systems.
Prof. Jacobsen was the Program Chair of the 5th International Middleware
Conference and the General Chair of the Inaugural International Conference
on Distributed Event-Based Systems 2007. He has served as a Program
Committee Member of various international conferences, including ICDCS,
ICDE, Middleware, SIGMOD, OOPSLA, and VLDB. He is among the ini-
tiators of the DEBS conference series and the Event-based.org research
portal.
Hwei-Ming Chung (Student Member, IEEE)
received the B.S. degree from the Department
of Electrical Engineering, National Sun Yat-sen
University, Kaohsiung, Taiwan, in 2014, and the
M.S. degree from the Institute of Communications
Engineering, National Sun Yat-sen University in
2016. He is currently pursuing the Ph.D. degree with
the Department of Informatics, University of Oslo,
Oslo, Norway.
He was a Research Assistant with the Wireless
Communications Laboratory, Research Center for
Information Technology Innovation, Academia Sinica, Taipei, Taiwan, in
2017. His current research interests include power system monitoring, smart
grid, and statistical signal processing.
Yan Zhang (Fellow, IEEE) received the B.S.
degree from Nanjing University of Post and
Telecommunications, Nanjing, China, the M.S.
degree from Beihang University, Beijing, China, and
the Ph.D. degree from the School of Electrical and
Electronics Engineering, Nanyang Technological
University, Singapore.
He is currently a Full Professor with the
Department of Informatics, University of Oslo,
Oslo, Norway. His research interests include next-
generation wireless networks leading to 6G, green
and secure cyber-physical systems (e.g., smart grid and transport).
Prof. Zhang was a recipient of the global Highly Cited Researcher
Award (Web of Science top 1% most cited worldwide) in 2018. He is
a Symposium/Track Chair in a number of conferences, including IEEE
ICC 2021, IEEE SmartGridComm 2021, and IEEE Globecom 2017. He
is the Chair of IEEE Communications Society Technical Committee on
Green Communications and Computing. He is an Editor (or Area Editor,
Senior Editor, Associate Editor) for several IEEE transactions/magazine,
including IEEE Network Magazine, IEEE TRANSACTIONS ON NETWORK
SCIENCE AND ENGINEERING, IEEE TRANSACTIONS ON VEHICULAR
TECHNOLOGY, IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS,
IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING,
IEEE COMMUNICATIONS SURVEY AND TUTORIALS, IEEE INTERNET OF
THINGS JOURNAL, IEEE SYSTEMS JOURNAL, IEEE Vehicular Technology
Magazine, and IEEE BLOCKCHAIN TECHNICAL BRIEFS. He is an
IEEE Communications Society Distinguished Lecturer and IEEE Vehicular
Technology Society Distinguished Speaker. He was an IEEE Vehicular
Technology Society Distinguished Lecturer from 2016 to 2020. He is a
CCF Senior Member, an elected member of CCF Technical Committee of
Blockchain, and 2019 CCF Distinguished Speaker. He is fellow of IET, and an
elected member of Academia Europaea (MAE), the Royal Norwegian Society
of Sciences and Letters (DKNVS), and Norwegian Academy of Technological
Sciences (NTVA).
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:35:44 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice