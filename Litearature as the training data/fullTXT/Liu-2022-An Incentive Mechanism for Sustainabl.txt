An Incentive Mechanism for Sustainable Blockchain Storage
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022 2131
An Incentive Mechanism for Sustainable
Blockchain Storage
Yunshu Liu , Graduate Student Member, IEEE, Zhixuan Fang , Member, IEEE, Man Hon Cheung ,
Wei Cai , Member, IEEE, and Jianwei Huang , Fellow, IEEE
Abstract— Miners in a blockchain system are suffering from
ever-increasing storage costs, which in general have not been
properly compensated by the users’ transaction fees. This reduces
the incentives for the miners’ participation and may jeopardize
the blockchain security. To mitigate this blockchain insufficient
fee issue, we propose a Fee and Waiting Tax (FWT) mechanism,
which explicitly considers the two types of negative externalities
in the system. Specifically, we model the interactions between the
protocol designer, users, and miners as a three-stage Stackelberg
game. By characterizing the equilibrium of the game, we find that
miners neglecting the negative externality in transaction selection
cause they are willing to accept insufficient-fee transactions. This
leads to the insufficient storage fee issue in the existing protocol
(i.e., deployed in Bitcoin and Ethereum). Moreover, our proposed
optimal FWT mechanism can motivate users to pay sufficient
transaction fees to cover the storage costs and achieve the
unconstrained social optimum. Numerical results show that the
optimal FWT mechanism guarantees sufficient transaction fees
and achieves an average social welfare improvement of 51.43% or
more over the existing protocol. Furthermore, the optimal FWT
mechanism reduces the average waiting time of low-fee transac-
tions and all transactions by 68.49% and 61.56%, respectively.
Index Terms— Blockchain storage, game theory, incentive
mechanism.
I. INTRODUCTION
W ITH the booming of cryptocurrencies, its underly-
ing blockchain protocol imposes ever-increasing and
Manuscript received 18 June 2021; revised 16 December 2021; accepted
15 March 2022; approved by IEEE/ACM TRANSACTIONS ON NET-
WORKING Editor K. Jagannathan. Date of publication 5 May 2022;
date of current version 17 October 2022. This work was supported in
part by the Guangdong Basic and Applied Basic Research Foundation
under Project 2021B1515120008, in part by the Shenzhen Science and
Technology Program under Project JCYJ20210324120011032 and Project
JCYJ20210324124205016, in part by the Shenzhen Institute of Artificial
Intelligence and Robotics for Society, and in part by the City Univer-
sity of Hong Kong’s Start-up Grant under Project 9610493. Part of this
paper was presented in ICC 2020 [DOI: 10.1109/ICC40277.2020.9148934].
(Corresponding author: Jianwei Huang.)
Yunshu Liu is with the Department of Information Engineering, The Chinese
University of Hong Kong, Hong Kong, and also with the Shenzhen Institute
of Artificial Intelligence and Robotics for Society (AIRS), Shenzhen 518129,
China (e-mail: ly018@ie.cuhk.edu.hk).
Zhixuan Fang is with the Institute for Interdisciplinary Informa-
tion Sciences, Tsinghua University, Beijing 100084, China, and also
with the Shanghai Qi Zhi Institute, Shanghai 200030, China (e-mail:
zfang@mail.tsinghua.edu.cn).
Man Hon Cheung is with the Department of Computer Science, City
University of Hong Kong, Hong Kong (e-mail: mhcheung@cityu.edu.hk).
Wei Cai and Jianwei Huang are with the School of Science and Engi-
neering, The Chinese University of Hong Kong, Shenzhen 518172, China,
and also with the Shenzhen Institute of Artificial Intelligence and Robotics
for Society (AIRS), Shenzhen 518129, China (e-mail: caiwei@cuhk.edu.cn;
jianweihuang@cuhk.edu.cn).
Digital Object Identifier 10.1109/TNET.2022.3166459
significant storage costs on the solid-state storage drives [2] of
the operation nodes (often referred to as miners [3]). For exam-
ple, consider the second-largest cryptocurrency, Ethereum. Its
data size grows by nearly 16 folds from 385 gigabytes in Feb.
2017 to 6.0 terabytes in Jan. 2021 [4]. Currently, it costs each
miner $2000 per month to store the entire blockchain [2].
On the other hand, the blockchain users’ transaction fee
payments to the miners are insufficient to compensate such
fast growth and significant storage costs. For example, the
Ethereum users paid an average monthly transaction fee of
$7.32 million during the first half of 2020 [5], much smaller
than $20 million monthly costs of all Ethereum nodes storing
the entire blockchain (roughly 10,000 nodes [6] and $2000
monthly cost per node). The gap between the storage cost and
transaction fee is filled by block reward, which is designed
to gradually decrease over time in many blockchain systems
(e.g., Bitcoin [7]).
The insufficient transaction fee issue brings negative impacts
on both miners and users. On the one hand, miners will
have less incentive to stay in the system, jeopardizing the
blockchain system security. For example, the number of miners
storing the Ethereum blockchain has declined 66% since 2018,
where the high storage costs could have played a major
role [8]. The decline of miners may be catastrophic to the
blockchain in the long run, as a less decentralized blockchain
will become vulnerable to malicious attacks [9]. On the
other hand, if the blockchain system is no longer sustainable,
users will eventually choose not to use the system and their
cryptocurrency will be worthless in the long run. To maintain
a healthy decentralized ecosystem, it is critically important to
mitigate the issue of insufficient transaction fees (for covering
the storage costs).
Mitigating the insufficient fee issue requires the proper
mechanism to encourage users to pay sufficient transaction
fees to the miners. The protocol designer of the blockchain
(e.g., the technical community serves as a leading role in
protocol design) needs a proper mechanism to motivate users
to pay sufficient transaction fees. However, to the best of our
knowledge, there lacks enough theoretical mechanism design
work aiming at mitigating the insufficient fee issue (although
the discussion in the technical community is heated [10]). This
motivates us to take the first step in this paper to propose such
a mechanism to address the issue.
In this work, we focus on understanding the following two
key questions:
• Why are miners willing to accept insufficient-fee transac-
tions in the existing blockchain system?
1558-2566 © 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-1415-3601
https://orcid.org/0000-0001-6971-0260
https://orcid.org/0000-0001-7979-4269
https://orcid.org/0000-0002-4658-0034
https://orcid.org/0000-0001-6631-1096
2132 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
• How to design an incentive mechanism to encourage
users to pay sufficient transaction fees to the miners?
To answer the above two questions, we propose a three-stage
model to characterize the blockchain system. In Stage III,
miners select transactions to include in the blockchain, consid-
ering the tradeoff between transaction fees and storage costs.
In Stage II, users determine the transaction generation rates at
different fees, by considering the tradeoff between paying high
transaction fees and bearing high transaction waiting time.
The transaction waiting time depends on how miners select
transactions. In user-miner fee interaction of Stages II and III,
there exist two types of negative externalities, i.e., each
miner’s transaction selection imposes storage costs on other
miners and each user’s transaction generation increases the
average waiting time of other users. These two types of
negative externalities are the reasons behind miners accepting
insufficient-fee transactions and users experiencing excessive
waiting time, respectively, in the existing protocol (i.e., the
fee mechanism currently deployed in Bitcoin and Ethereum).
Motivated by such an observation, we propose a Fee and
Waiting Tax (FWT) mechanism for the protocol designer in
Stage I. The mechanism determines the transaction fee choices
for the users and meanwhile imposes waiting tax on the users,
in order to motivate users to pay sufficient fees while achieving
social welfare maximization.
Our key results and contributions are as follows:
• Fee mechanism design on blockchain storage: To the
best of our knowledge, this is one of the first theoretical
studies on the fee mechanism design aiming at mitigating
blockchain insufficient storage fee issue. The goal of
the mechanism is to ensure the long-term stability and
security of blockchain system, as the ever-increasing
storage costs become a significant burden to miners and
reduce their incentives to participate in the blockchain
operation.
• Three-Stage Interaction Model: We propose a three-stage
game-theoretical model to characterize the interactions
among the protocol designer, users, and miners. The
analysis of the model is analytically challenging as the
user-miner fee interaction is a two-stage queueing game.
Specifically, the state transition of the queue system
is stochastically affected by the decision of all users
and miners, and each miner faces an integer program-
ming problem which is game-theoretically coupled with
other miners’ strategies. Nevertheless, we can derive
the subgame perfect equilibrium of the model in closed
form.
• Explaining the deficiency of the existing protocol:
Through the analysis of three-party interaction, we find
that under the existing protocol each miner is unaware of
the negative externality that it imposes on other miners
when making transaction selections. This causes the
miners to accept transactions with fees not enough to
cover the overall system storage costs.
• Proposing a mechanism to generate sufficient fee and
achieve unconstrained social optimum: We propose an
FWT mechanism motivated by two types of negative
externalities in the system. We show that the optimal
FWT mechanism incentivizes users to pay sufficient
transaction fees for the overall system storage costs while
achieving the unconstrained social optimum.
• Ethereum-based numerical results: We relax the assump-
tion of two user types and conduct the numerical analy-
sis based on practical Ethereum blockchain parameters.
Compared with the existing protocol, our proposed opti-
mal FWT mechanism not only produces sufficient trans-
action fees but also achieves an average social welfare
improvement of 51.43% or more. Moreover, the optimal
FWT mechanism reduces the average waiting time of
low-fee transactions and all transactions by 68.49% and
61.56%, respectively.
The rest of the paper is organized as follows. Section II
reviews the related literature. Section III introduces the system
model. We characterize the mathematical details and derive the
closed-form subgame perfect equilibrium of the model’s three
stages in Sections IV,V, and VI, respectively. We evaluate the
system performance in Section VII. We conclude this paper
in Section VIII.
II. LITERATURE REVIEW
Our work studies the mechanism design on the user-miner
fee interaction regarding blockchain storage. Hence, we review
the previous literature from two aspects, i.e., analysis of the
fee interaction scheme in the existing blockchain and new fee
mechanism design in blockchain.
A. Analysis of Fee Interaction Scheme in Existing Blockchain
The first group of literature (e.g., [11]–[15]) analyzing how
users set transaction fees regarding the transaction waiting
time in the existing blockchain. Huberman et al. in [11] found
that the desire to shorten the transaction waiting time is the
primary reason for users to pay transaction fees. Following
this work, several other papers analyzed how waiting time
affects users’ transaction fees. Easley et al. in [12] showed
that as the average transaction waiting time increases, the
ratio of users who pay fees also increases. Li et al. in [13]
analyzed the case where users choose between paying a
fixed-level fee or not paying the fee. They revealed that
an excessive waiting time would discourage low-waiting-
time-cost users from paying transaction fees. Several further
studies in [14], [15] investigated the factors in blockchain
that may impact the waiting time. These works proved that
both the block production time and the block propagation time
affect the waiting time (hence the transaction fee). However,
the previous works did not consider how miners tradeoff
between the transaction fees and storage costs. We consider
a general model where each miner chooses the transactions
considering the tradeoff between the transaction fees and
storage costs. This consideration significantly complicates the
analysis.
B. New Fee Mechanism Design in Blockchain
The second group of literature focused on transaction
fee market design (e.g., [16]–[20]) with different goals.
Vitalik et al. in [16] proposed a burning base fee mechanism
to make the fee prediction easy for the users. Some works
aimed to improve the system performance. Hu et al. in [17]
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
LIU et al.: INCENTIVE MECHANISM FOR SUSTAINABLE BLOCKCHAIN STORAGE 2133
Fig. 1. Blockchain operation.
proposed a correlated-equilibrium-based fee mechanism to
achieve both the individual and global optimum. Ai et al.
in [18] applied the double auction to improve the fairness of
the system. The literature [19] used the second prize auction
to reduce the variance of transaction fees. Lavi et al. in [20]
showed that the monopolistic auction is resilient to market
manipulation. Overall, the current work on the fee mechanism
design did not consider two types of negative externalities
in miners’ transaction selections and users’ transaction gen-
erations. Our work is one of the first analytical studies to
explicitly considers the mitigation of two types of negative
externalities in the blockchain system.
III. SYSTEM MODEL
In this section, we describe the system model of the
blockchain. We first introduce the high-level operation process
of the blockchain system in Section III-A and then discuss
our proposed FWT mechanism in Section III-B. Finally we
propose a three-stage Stackelberg game to characterize the
blockchain system in Section III-C.
A. Blockchain Operation
In this subsection, we briefly introduce the operation process
of blockchain.
Fig. 1 illustrates the typical blockchain operation [21]. The
protocol designer first determines the mechanism for users and
miners. Then the users generate transactions and choose the
transaction fees. Finally, miners select transactions and include
them in the blockchain through mining. The details are as
follows:
1) Protocol designer’s mechanism design: The protocol
designer determines the consensus protocol for the sys-
tem. The blockchain online community usually col-
lectively acts as the protocol designer. For example,
in 2018, the Ethereum online community1 proposed
Ethereum Improvement Proposal 1234 to decrease block
reward by 33%.
1https://www.reddit.com/r/ethereum/
2) Users’ transaction generation: A user n generates two
transactions (tx n1 and tx n2) and assigns the fee-per-
byte value for each transaction.2 The transaction fee of
a transaction satisfies:
transaction fee = transaction size × fee-per-byte.
The transaction fee serves as an incentive for miners to
include the transaction into a future block.3 Each gen-
erated transaction enters the transaction pool (tx pool)
and waits for miners to include it in the blockchain.
3) Miners’ mining: The process of mining a new block
(also referred to as one round of mining) contains several
steps, as follows:
• First, each miner selects a set of transactions from
the transaction pool (e.g., miner m1 selects both tx
n1 and tx n2).
• Next, miners compete to solve a cryptographic
puzzle. Once a miner solves the puzzle (being
first among all miners), he will pack his selected
transactions, the puzzle solution, along with some
auxiliary data into a block. The miner who produces
such a new block can get the fees from his selected
transactions (e.g., miner m1 gets fees of tx n1 and
tx n2) and the block reward (for generating this new
block) as a bonus. The transactions in the new block
are included in the blockchain.
• Finally, the miner who produces the new block
broadcasts the block information to his neighbors
in the network, and all miners need to update the
local storage to include the new block.
Next, we will introduce our proposed Fee and Waiting
Tax (FWT) mechanism for the protocol designer.
B. FWT Mechanism
There are two types of negative externalities in the existing
blockchain protocol, i.e., each miner’s transaction selection
imposes storage costs on other miners and each user’s trans-
action generation increases the average waiting time of other
users. These two types of negative externalities are why min-
ers accept insufficient-fee transactions and users experience
excessive waiting time, respectively, in the existing protocol.
Motivated by the negative externalities, we propose the FWT
mechanism as follows:
1) Fee choices: The FWT mechanism offers several fee-
per-byte choices for users. Users can choose the transac-
tion generation rates for different fee-per-byte choices.
The protocol designer properly optimizes the fee-per-
byte choices such that the users pay sufficient fees to
cover the total system storage costs.
2) Waiting tax: The FWT mechanism imposes a waiting tax
on each user. Specifically, each user pays the waiting tax
to other users based on the negative impact generated
by him (which will be explained in Section V-A). Such
2Users often set the fee-per-byte rather than the transaction fee in Bit-
coin [22].
3A block is a container of transactions. In Bitcoin [7], a block contains the
cryptographic hash of the previous block, a time-stamp, and the data [23].
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
2134 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
TABLE I
KEY NOTATIONS
a tax will encourage users to be more conservative in
generating transactions.4 If a user maximizes his payoff
without the waiting tax, he will generate too many trans-
actions and all the other users will experience excessive
waiting time [24], causing poor user experiences and
social welfare reduction. Notice that when we sum up
all users’ payoffs, the waiting taxes among users actually
cancel out. So as a group, the users do not have any extra
burden from the waiting tax.
Next, we will present the FWT mechanism in more detail.
We summarize key notations of the model in Table I.
C. Three-Stage Stackelberg Game
We model the interactions among the protocol designer,
N users, and M miners as a three-stage Stackelberg game,
as illustrated in Fig. 2.
4Each user can attach some cryptocurrency to his transaction as the waiting
tax payment (similar to the attachment of transaction fee). When miners
include the user’s transaction on blockchain, he pays the waiting tax to the
other users.
Fig. 2. Three-stage Stackelberg game.
In Stage I, the protocol designer ensures users to pay suffi-
cient fees by setting fee-per-byte choices ρ = (ρ1, ρ2, . . . , ρI).
Without loss of generality, we consider that the protocol
designer offers users I � 2 fee-per-byte choices with ρ1 >
ρ2 > · · · > ρI � 0. Moreover, the protocol designer
maximizes the social welfare (a common objective in the
literature [25], [26]) by setting the waiting tax rate vector P .
The waiting tax rate vector specifies each user’s tax payment
to all other users, compensating the waiting costs that the user
imposes on others.
In Stage II, each user n tradeoffs between paying high
transaction fees and bearing long time waiting for transaction
inclusion. More specifically, the user chooses the transac-
tion generation rates λn = (λn1 , λn2 , . . . , λnI ), where λni
(i = 1, 2, . . . , I) denotes the transaction generation rate corre-
sponding to the fee-per-byte choice ρi. Such a differentiated
generation rate and fee-per-byte choice provide flexibility to
meet the requirements of different applications.5 Moreover, the
waiting tax rate vector P assigns different taxes to different
types of users (the details are in Section V-A) and each user
pays the waiting tax to all the others accordingly.
In Stage III, mining proceeds continuously over time. With-
out loss of generality, we examine the round k = 1, 2, . . . of
mining, during which miners mine the block k. The length
of each round k (the time between the successful mining
of block k − 1 and k) follows an exponential distribution.6
We further assume that the block propagation delay is zero,7
i.e., all miners receive the new block as soon as some miner
successfully mines such a block. When determining what to
include in a block, each miner m wants to achieve the proper
balance between receiving transaction fees and bearing storage
costs. The timeline of round k is as follows:
1) First, each miner m selects a set of transactions X k
m
from the transaction pool to include in the new block.
The transaction pool is the set of all transactions waiting
to be included in a block.
2) During round k, users may generate transactions at
any time. The newly generated transactions enter the
transaction pool and each miner m can change his
5For example, in Ethereum, all top-3 users who pay most transaction fees
generate transactions with significantly different fee-per-byte (i.e., gas price)
for different applications simultaneously [27].
6The exponential distribution is confirmed by Bitcoin data analysis [28] and
is also commonly done in blockchain analysis [12], [29].
7This is a valid assumption because the average block propagation delay in
Bitcoin is roughly 2% of block interval time [30].
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
LIU et al.: INCENTIVE MECHANISM FOR SUSTAINABLE BLOCKCHAIN STORAGE 2135
Fig. 3. Timeline of round k.
transaction selection X k
m.8 We denote the transaction
pool just before miners find block k as Qk such that
X k
m ⊆ Qk and notice that finding a new block is a
stochastic event.
3) When a miner finds block k, the round k ends. The
miner who finds the block k receives the transaction fees
from the transactions included in his proposed block.
All the miners store the block k and bear the costs
of storage individually. The transaction pool updates by
removing those transactions that have been included in
the block k.
Fig. 3 illustrates the above mining process with the case
of 2 users and 2 miners. For multiple transactions generated
by user n, we will differentiate them in the subscript j,
i.e., txn,j (j = 1, 2, · · · ).
1) First, there are two transactions tx1,1 and tx2,1 in
transaction pool in Fig. 3. Miner 1 and 2 adopt strategies
X k
1 = {tx1,1} and X k
2 = ∅, respectively.
2) During round k, user 2 generates a new transaction tx2,2
and it enters transaction pool. Miner 1’s strategy remains
the same while miner 2 changes his strategy to X k
2 =
{tx2,2}. In this example, Qk = {tx1,1, tx2,1, tx2,2}.
3) Miner 2 finds a block k and round k ends. Miner 2
includes tx2,2 in blockchain and transaction pool deletes
tx2,2.
In the next three sections, we will introduce the mathemat-
ical detail of each stage of the model and analyze it through
backward induction.
IV. STAGE III: TRANSACTION SELECTION
EQUILIBRIUM OF MINERS
In this section, we will characterize how miners select
transactions in Stage III. We first model miners’ transaction
selections in round k = 1, 2, . . . of mining as a game in
Section IV-A, then we characterize the Nash equilibrium of
the game in Section IV-B.
A. Model of Miners Transaction Selection in Round k
We will focus on a particular round k of mining, during
which each miner selects a set of transactions to maximize
his own payoffs. We formulate the miners’ interaction as a
non-cooperative game.
1) Miners: We consider the set of miners as M =
{1, . . . , M}.9 The normalized mining power (e.g., computing
8The reason is that the mining process is memoryless and the success rate
of finding a block is independent of the included transaction [28].
9We analyze the system in a quasi-static state [12], [29] [31]. That is to
say, there are no users or miners joining or leaving the system.
power in proof of work) of miner m ∈ M is αm > 0, which
represents the probability of miner m successfully finding a
block. We have
∑
m∈M αm = 1.
2) Miners’ Strategies: Each miner m selects a set X k
m ⊆ Qk
of transactions from the transaction pool Qk. The block size
limit is Φ, meaning the block can contain up to Φ bytes of
transactions, i.e., ∑
(n,j)∈Xk
m
sn,j � Φ, (1)
where sn,j denotes the size of transaction txn,j . We generalize
the constant transaction size model in [11]–[15] and consider
two possible sizes of transactions, i.e., Φ and Φ
2 . As transac-
tions vary in both sizes and fees, we adopt a benign assump-
tion where each miner adopts one of the following three
strategies:
• Strategy 1: Select the highest fee-per-byte transaction
from the transaction pool, i.e.,
X k
m = H(Qk) � argmax
(n,j)∈Qk
ρn,j . (2)
• Strategy 2: Select two highest fee-per-byte transactions
among transactions with the size Φ
2 from the transaction
pool, i.e.,
X k
m = T (Qk) � argmax
A⊆{(n,j)∈Qk|sn,j=
Φ
2 }
|A|=2
∑
(n,j)∈A ρn,j . (3)
• Strategy 3: Select no transaction, i.e., X k
m = ∅.
Selecting the highest-fee-per-byte transaction aligns with the
empirical studies of blockchain [22], [32]. When there is
more than one highest-fee-per-byte transaction, miners will
select the earliest generated one, on a first-come-first-serve
basis.
3) Miners’ Payoff Functions: Miner m’s payoff depends on
both the transaction fee and storage cost.10
• Transaction fee: For a transaction txn,j , its transaction
fee is the product of the transaction size and fee-per-
byte, i.e., sn,jρn,j . Only the miner who successfully finds
a block receives the transaction fees from his selection.
Thus miner m will get the total transaction fees of∑
(n,j)∈Xk
m
sn,jρn,j with probability αm.
• Storage cost: For analysis, we assume that all miners have
homogeneous storage cost of Cs per byte, representing
that miners use similar storage technology. Storing a
transaction txn,j with size sn,j imposes a storage cost
sn,jCs to a miner. If any miner l ∈ M selects transaction
txn,j (i.e., X k
l = {(n, j)}) and successfully finds a block
(with probability αl), all miners need to store that block
and bear the storage costs sn,jCs for the transaction txn,j
that miner l selects [3]. Overall, miner m’s storage costs
in round k is as follows:11
Ck(X k
m, X k
−m) =
∑
l∈M
αl
∑
(n,j)∈Xk
l
sn,jCs, (4)
10We do not consider the block reward and the cost of running the mining
machine since they are not affected by each miner’s transaction selection.
Besides, the transaction fees are the key to cover blockchain storage costs as
the block reward gradually shrinks.
11We neglect the storage costs of non-transaction data since it is very small,
e.g., the fraction of non-transaction data in Bitcoin is about 0.1% [33].
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
2136 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
where X k
−m = (X k
l , ∀l ∈ M, l �= m) represents the
strategies of all the miners other than m. Miner m’s
storage costs in (4) reveals the negative externality in
transaction selection: when a miner selects a transaction
and finds a block, it imposes storage costs to all the other
miners.
Combining the transaction fee and storage cost, miner m’s
payoff in round k is:
vk
m(X k
m, X k
−m, ρ)=αm
∑
(n,j)∈Xk
m
sn,jρn,j−Ck(X k
m, X k
−m).
(5)
4) Game Formulation: We formulate the round k of mining
as a non-cooperative game, where miners simultaneously
select the transactions (to be included in his block) to maxi-
mize their own payoffs.
Game 1 (Stage III: Transaction Selection Game in round k):
In Stage III, Transaction Selection Game in round k = 1, 2, . . .
is a tuple Φk = (M,Bk, V k) defined by:
• Players: The set of miners M.
• Strategies: Each miner m ∈ M selects a set X k
m ∈ Bk
m �
{H(Qk), T (Qk), ∅} of transactions. The strategy profiles
of all the miners is (X k
m, ∀m ∈ M). The set of feasible
strategy profile of all miners is Bk =
∏
m∈M Bk
m.
• Payoffs: The vector V k = (vk
m, ∀m ∈ M) contains all
miners’ payoffs as defined in (5).
In Game 1, each miner tradeoffs between the transac-
tion fee and storage cost to maximize his payoff, consid-
ering the strategies of other miners. Specifically, on the
one hand, miner m gets high revenue for selecting a high-
fee transaction and finding a block. Meanwhile, for the
highest-fee-per-byte transaction, if its fee is lower than its
storage cost, a miner may still select it if all the other
miners select it and he will eventually bear the storage cost
of it.
B. Nash Equilibrium Analysis
We first define the Nash equilibrium in Definition 1.
Definition 1 (Nash Equilibrium): Given the fee-per-byte
choices ρ, a strategy profile (X k,NE
m , ∀m ∈ M) constitutes a
Nash equilibrium in Game 1 if
vk
m(X k,NE
m , X k,NE
−m , ρ) � vk
m(X k
m, X k,NE
−m , ρ),
∀X k
m ∈ Bk
m, ∀m ∈ M. (6)
For the ease of presentation, we define the following func-
tion to calculate a strategy’s net surplus (fees minus storage
costs), i.e.,
η(X k
m) �
∑
(n,j)∈Xk
m
sn,j(ρn,j − Cs). (7)
Then, we summarize the Nash equilibrium as follows, where
each miner adopts highest-net-surplus strategy.
Theorem 1 (Miners’ Equilibrium in Stage III): The strat-
egy profile (X k,NE
m , ∀m ∈ M) constitutes a Nash equilibrium
in round k, where
X k,NE
m = arg max
Xk
m∈Bk
m
η(X k
m). (8)
Due to the space limit, we leave the proofs of all mathe-
matical results in the online appendix [34].
Corollary 1 reveals an interesting observation from
Theorem 1.
Corollary 1: Each miner only accepts txn,j if its fee-per-byte
is higher than a miner’s storage cost per byte, i.e., ρn,j � Cs.
However, a miner’s storage cost per byte Cs is insufficient to
cover all miners’ total storage cost per byte, i.e., MCs.
Corollary 1 mathematically reveals the negative externality
in transaction selection introduced in Section IV-A. Each
miner only considers his own storage cost when selecting
the transaction, without considering the negative impact on
all other miners in the system. Hence even if the trans-
action fee can cover the storage cost of a single miner,
it can be far from enough to cover the total storage cost
of system. As miners accept insufficient-fee transactions,
users may not pay enough transaction fees to cover all
miners’ total storage costs, causing the storage sustainability
issue.
V. STAGE II: TRANSACTION GENERATION EQUILIBRIUM
OF USERS
In this section, we will characterize how users generate
transactions in Stage II. We first formulate users’ transaction
generation as a game in Section V-A, then we characterize the
Nash equilibrium of the game in Section V-B.
A. Model of Users Transaction Generation
In Stage II, users set the transaction generation rates to
maximize their own payoffs.
1) Transaction Generation Event: We denote the set of
users as N = {1,
ldotscdots, N}. For a user n ∈ N , we model his transaction
generation event as follows:
• generate one transaction with a size Φ with probability
q, and
• generate two transactions with a size Φ
2 with
probability 1 − q,
where probability q ∈ [0, 1] and Φ is the block size limit.
The setting is reasonable as the user can partition a large
transaction into several small ones [35].
2) Users’ Strategies: At each fee-per-byte choice ρi ∈
{ρ1, ρ2, . . . , ρI}, user n’s transaction generation events fol-
low a Poisson process. The strategy of user n is to set
the transaction generation rates λn = (λn1 , λn2 , . . . , λnI ),
where λni (i = 1, 2, . . . , I) is the arrival rate of user n’s
transaction generation event at ρi, which satisfies the following
constraints:
I∑
i=1
λni � μ
N
. (9)
where μ is the system average block generation rate and
each user’s maximum transaction generation rate is μ
N . Con-
straint (9) ensures that it is feasible to include all generated
transactions from all users in the blockchain (if the miners
choose to do so in Stage III).
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
LIU et al.: INCENTIVE MECHANISM FOR SUSTAINABLE BLOCKCHAIN STORAGE 2137
3) Transaction Waiting Time: Here we define the waiting
time of any transaction txn,j as the time lapse between the
generation time and the on-chain time.
• Generation time of transaction txn,j is denoted
as tgenn,j .
• On-chain time: When a miner selects transaction txn,j
and finds a block in round k = 1, 2, . . ., then round k
ends, and transaction txn,j is included in the blockchain.
Thus, round k’s ending time tend(k) is the transaction
on-chain time, i.e.,
tonn,j =
{
tend(k), if txn,j is included in block k,
∞, if txn,j is not included in any block.
(10)
• Waiting time is the difference between the on-chain time
minus and the generation time, i.e., wn,j = tonn,j − tgenn,j .
Waiting time wn,j is a random variable as the block
generation is stochastic. The rate of transactions entering
the transaction pool affects the waiting time wn,j , thus it
is a function of all users transaction generation rates, i.e.,
λ = (λn, ∀n ∈ N ). We will compute the expectation of
wn,j in Lemma 1 of Section V-B.
a) Negative externality in transaction generation: When
user n generates a transaction and miners include it in the
blockchain, other transactions in the transaction pool have to
wait. Thus, user n’s transactions increase the average waiting
time of all the other users’ transactions. If a user maximizes his
own payoff without considering the negative externality, all the
other users will experience excessive waiting time, reducing
the social welfare. This motivates us to propose the waiting
tax to let each user internalize such a negative externality,
increasing social welfare.
4) User n’s Surplus Obtained From One Transaction txn,j :
User n’s surplus obtained from one transaction txn,j depends
on whether txn,j is included in the blockchain.
• If txn,j is included in the blockchain: The sur-
plus depends on the on-chain utility from one trans-
action, transaction fee, waiting cost, and waiting
tax.
– User n’s on-chain utility from txn,j : When txn,j
is included in the blockchain, user n will obtain
utility of Rn. For example, a user gets a certain
level of utility when successfully purchasing a kitty
in Ethereum-based game cryptokitties. To model the
users’ heterogeneity of utilities, we consider two
user types: with NH high-utility users (type-H) and
NL = N − NH low-utility users (type-L). Notice
that we will consider the case of more types in
Section VII-B.12 Thus, user n’s on-chain utility from
one transaction is
Rn =
{
RH , if user n is type-H ,
RL, if user n is type-L,
(11)
where RH � RL. Our model generalizes the homo-
geneous utility model in [11]–[13].
12The theoretical analysis of multiple user types is equivalent to solving
the cubic equations with multiple variables, which is challenging. We will
consider it in our future work.
– Transaction fee of txn,j : User n pays the transaction
fee fn,j = sn,jρn,j to the miner who includes
txn,j in the blockchain. The size of transaction
txn,j satisfies sn,j ∈ {Φ, Φ
2 }. The fee-per-byte ρn,j
belongs to the protocol designer’s assigned fee-per-
byte choices, i.e., ρn,j ∈ {ρ1, ρ2, . . . , ρI}.
– Waiting cost of txn,j : The transaction waiting time
wn,j(λ) imposes a cost to user n, which we assume
to be a linear function with the impatience coefficient
γ, i.e., γwn,j(λ). A higher γ means users are less
patient.
– Waiting tax of txn,j : Since user n’s transaction
generation increases the expected transaction waiting
time of any other user l �= n, we introduce the
waiting tax pnl to let users internalize this neg-
ative externality. Specifically, user n pays user l
the amount of sn,jpnl to compensate the waiting
costs n imposes. The payment is proportional to
the transaction’s size, as a larger-size transaction
occupies more space in a block and more transactions
need to wait for the future block. Depending on the
types of users n and l, the possible waiting tax has
four different values P = (PHH , PHL, PLH , PLL):
pnl =
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
PHH ,
if both user n and l are type-H ,
PHL,
if user n is type-H and user l is type-L,
PLH ,
if user n is type-L and user l is type-H ,
PLL,
if both user n and l are type-L.
(12)
To sum up, when txn,j is included in the blockchain, user
n’s surplus is
θn,j(λ, ρ, P ) = Rn − sn,jρn,j − γwn,j(λ)
− sn,j
∑
l∈N ,l �=n
pnl. (13)
• If txn,j is not included in the blockchain (i.e., not in any
block), user n will not get the transaction on-chain utility
Rn or pay the fee fn,j . He also does not need to pay the
waiting tax, as the transaction does not occupy any space
in a block and does not increase the waiting time of other
users. However, user n still experiences the (possibly
infinite) waiting time to know that the transaction will
not be included. In this case, user n’s surplus is
θn,j(λ, ρ, P ) = −γwn,j(λ). (14)
To simplify the formulation, we define the indicator function to
indicate whether txn,j is included in the blockchain as follows
1(n, j) =
{
1, if txn,j is included in blockchain,
0, if txn,j is not included in blockchain.
(15)
Hence user n’s surplus obtained from txn,j can be written as
θn,j(λ, ρ, P ) = 1(n, j)(Rn − sn,jρn,j
− sn,j
∑
l∈N ,l �=n
pnl) − γwn,j(λ). (16)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
2138 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
5) Users’ Time-Average Payoff: User n’s payoff is the
summation of the surplus from all his transactions and the
waiting tax paid to him by other users.13 For user n, we denote
the number of all his generated transactions in time interval
[0, t] as TXn(t). His time-average payoff is
un(λ, ρ, P )
= lim
t→∞
TXn(t)∑
j=1
E[θn,j(λ, ρ, P )]+
∑
l∈N ,l �=n
TXl(t)∑
j=1
1(l, j)sl,jpln
t
,
(17)
where E[θn,j(λ, ρ, P )] is user n’s expected surplus from
transaction txn,j . The expectation is taken in terms of the
random variable waiting time wn,j .
6) Game Formulation: We formulate users’ transaction gen-
eration as a non-cooperative game, where users set transaction
generation rates simultaneously to maximize their own pay-
offs.14
Game 2 (Stage II: Transaction Generation Game):
In Stage II, Transaction Generation Game is a tuple
Ω = (N , Λ, U) defined by:
• Players: The set of users N .
• Strategies: Each user n sets transaction generation
rate λn, where the strategy space is Λn = {λn =
(λn1 , λn2 , . . . , λnI )|λn satisfies (9)}. The strategy pro-
files of all the users is λ = (λn, ∀n ∈ N ) and the set of
all feasible strategy profiles is Λ = Λ1 × · · · × ΛN .
• Payoffs: The vector U = (un, ∀n ∈ N ) contains all
users’ payoffs as defined in (17).
In Game 2, each user faces a tradeoff between paying a
high fee and suffering a high transaction waiting time. Since
miners prefer to include transactions with high fees, user n
will experience a lower average waiting time by generating
more high-fee transactions. However, if paying a high fee is
too costly, user n would be better off by generating more low-
fee transactions and bearing a higher average waiting time.
B. Nash Equilibrium Analysis
Based on the equilibrium of Stage III, we analyze the
equilibrium of Stage II in this subsection. We first compute
the transaction waiting time, then we present the users’ equi-
librium in Stage II.
1) Transaction Waiting Time: According to miners’ equi-
librium strategies in Stage III, the process of transaction
arriving (i.e., users’ transaction generation event) and leaving
(i.e., miners’ block generation) is an M/M/1 queue [36],
where transactions with higher fee-per-byte have priority over
transactions with lower fee-per-byte. We summarize user n’s
time-average transaction waiting time in following Lemma 1.
Lemma 1 (Users’ Transaction Waiting Time): The time-
average transaction waiting time of each user ∀n ∈ N is
in (18), as shown at the bottom of the next page.
13Wen user n’s transaction is not included in the blockchain, other users
with on-chain transactions still pay the waiting tax to compensate user n’s
waiting cost, because other users’ on-chain transactions will delay the process
that user n finds out that miners do not select his transaction.
14Here we assume that each user does not consider the influence of his
strategic decision on other users (i.e., each user is a price taker). This
assumption holds for a blockchain system with many users.
TABLE II
TYPES B AND S AND CORRESPONDING TYPES H AND L
Equation (18a) corresponds to the case where miners (even-
tually) choose to include the transaction as the fee-per-
byte values of all user n’s transactions are higher than Cs.
Equation (18b) corresponds to the case where the transaction
waiting time is infinity, as no miner chooses to include the
transaction with fee-per-byte strictly lower than Cs.
2) Users’ Equilibrium in Stage II: Here we characterize
the users’ equilibrium strategies. Similar to prior blockchain
literature [1], [12], we consider the symmetric Nash equilib-
rium (SNE) where the same type of users adopt the same
strategy.
For the ease of exposition, we first define some terminology
related to the users’ equilibrium.15
Definition 2 (Stage II Equilibrium): At a ρi-SNE (i =
1, 2, . . . , I), all users only generate transactions with the fee-
per-byte ρi.
At an equilibrium, each user n’s net transaction utility hn
plays an important role in his transaction generation rate,
which defined as follows
hn =
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
hH = (2 − q)RH − Φ[(NH − 1)PHH + NLPHL],
if n ∈ NH ,
hL = (2 − q)RL − Φ[NHPLH + (NL − 1)PLL],
if n ∈ NL,
(19)
where NH and NL are the set of types H and L users,
respectively.
Notice that hH may not be larger than hL due to the waiting
time tax rate vector (PHH , PHL, PLH , PLL). We define type-
B as the bigger net transaction utility user type (i.e., B =
argmaxl∈{L,H} hl) and type-S as the smaller net transaction
utility user type (i.e., S = argminl∈{L,H} hl). We illustrate
the connections between types B and S as well as types H
and L in Table II.
Next, we characterize the types B and S users’ equilibrium
strategies at the ρi-SNE (i = 1, 2 . . . , I) in Proposition 1.
To facilitate the analysis, we denote ei as the I-dimension
vector with all entries being zero except i-th being 1.
Proposition 1 (Stage II Equilibrium Strategy): The follow-
ing strategy profile (λNE
n = πB(hB, hS , ρi)ei, ∀n ∈ NB,
λNE
l = πS(hB, hS , ρi)ei, ∀l ∈ NS) constitutes a ρi-SNE,
where πB(hB, hS , ρi), πS(hB, hS , ρi), and the intermedi-
ate variables A1(hB, ρi) and A2(hB, hS , ρi) are shown
in (20)-(23), at the bottom of the next page, respectively.
Here we explain the intuition of the ρi-SNE. When both net
transaction utilities hB and hS are small (i.e., conditions in
(20a) and (21a)), users do not generate transactions. When hB
is large but hS is small (i.e., conditions in (20b) and (21b)),
15There can be other SNE but we pay attention to the Pareto-dominant
one, where each user achieves no smaller payoff compared to other possible
SNEs [12], [37].
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
LIU et al.: INCENTIVE MECHANISM FOR SUSTAINABLE BLOCKCHAIN STORAGE 2139
only type-B users generate transactions. When both hB and
hS are large (i.e., conditions in (20c) and (21c)), all users
generate transactions.
We define Δ function in (24), as shown at the
bottom of the page, to characterize the boundary of
equilibrium. Based on the equilibrium characterized
in Proposition 1, we summarize users’ equilibria
in Theorem 2.
Theorem 2 (Users’ Equilibria in Stage II):
• If Δ(hB , hS , ρ2) > Φρ1, then there exists a ρ1-SNE.
• If Δ(hB, hS , ρi) � Φρi−1, Δ(hB, hS , ρi+1) > Φρi, and
i = 2, 3, . . . , I − 1, then there exist a ρi-SNE.
• If Δ(hB , hS , ρI) � ΦρI−1, then there exist a ρI -SNE.
We illustrate the SNE of Stage II with a three-fee-choice
example. Fig. 4 shows the SNE against ρ1 and ρ2 with
lim
t→∞
TXn(t)∑
j=1
E[wn,j(λ)]
t
=
⎧⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎩
(2 − q)λn1
μ −
∑
l∈N
λl1
+
I∑
i=2
(2 − q)μλni
(μ −
i−1∑
x=1
∑
l∈N
λlx)(μ −
i∑
x=1
∑
l∈N
λlx)
, if ∀i = 1, 2, . . . , I , ρi � Cs or
(
ρi < Cs and λni = 0
)
, (18a)
∞, otherwise. (18b)
πB(hB, hS , ρi)
=
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
0, if hB � Φρi +
(2 − q)γ
μ
, (20a)
A1(hB, ρi), if hB > Φρi +
(2 − q)γ
μ
and
hS � Φρi +
(2 − q)γ
μ − NBA1(hB, ρi)
, (20b)
min{ μ
NB + NS
,
[μ − A2(hB, hS , ρi)][(hB − Φρi)A2(hB, hS , ρi) − (2 − q)γ]
NB[(hB − Φρi)A2(hB, hS , ρi) − (2 − q)γ] + NS [(hS − Φρi)A2(hB, hS , ρi) − (2 − q)γ]
},
if hS > Φρi +
(2 − q)γ
μ − NBA1(hB, ρi)
. (20c)
πS(hB, hS , ρi)
=
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
0, if hB � Φρi +
(2 − q)γ
μ
, (21a)
0, if hB > Φρi +
(2 − q)γ
μ
and
hS � Φρi +
(2 − q)γ
μ − NBA1(hB , ρi)
, (21b)
μ − NBπB(hB, hS , ρi)
NS
− (2 − q)γ(NS − 1) +
√
(2 − q)2γ2(NS − 1)2 + 4NS(hS − Φρi)(2 − q)γ[μ − NBπB(hB, hS , ρi)]
2(hS − Φρi)N2
S
,
if hS > Φρi +
(2 − q)γ
μ − NBA1(hB, ρi)
. (21c)
A1(hB, ρi) = min{ μ
NB
− (2 − q)γ(NB − 1) +
√
(2 − q)2γ2(NB − 1)2 + 4(2 − q)γμNB(hB − Φρi)
2N2
B(hB − Φρi)
,
μ
NB + NS
}. (22)
A2(hB , hS , ρi) =
(2 − q)γ(NB + NS − 1) +
�
(2 − q)2γ2(NB + NS − 1)2 + 4(2 − q)γμ[NB(hB − Φρi) + NS(hS − Φρi)]
2[NB(hB − Φρi) + NS(hS − Φρi)]
.
(23)
Δ(hB, hS , ρi) = max
{
Φρi +
(2 − q)γ[(NB − 1)πB(hB, hS , ρi) + NSπS(hB, hS , ρi)]
μ[μ − NBπB(hB , hS , ρi) − NSπS(hB, hS , ρi)]
,
hS − (2 − q)γ
μ
− (2 − q)γπS(hB, hS , ρi)[2μ − NBπB(hB, hS , ρi) − NSπS(hB, hS , ρi)]
μ[μ − NBπB(hB, hS , ρi) − NSπS(hB, hS , ρi)]2
}
. (24)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
2140 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
Fig. 4. A three-fee-choice example of SNEs VS ρ1 and ρ2.
fixed ρ3, reflecting users’ tradeoff between paying the low
fee and bearing low waiting time. When fee choices ρ1 and
ρ2 are small, then Δ(hB, hS , ρ2) > Φρ1 and a ρ1-SNE exists.
In other words, all users choose the highest fee-per-byte ρ1,
because ρ1 is not high enough and hence the consideration
of low waiting time dominates the consideration of paying
the low fee (i.e., choosing ρ2 or ρ3). As ρ1 increases such
that Δ(hB, hS , ρ2) � Φρ1 and Δ(hB, hS , ρ3) > Φρ2, the
ρ2-SNE emerges, where all users choose the medium fee-
per-byte ρ2. This is because when ρ1 is high compared
to ρ2, the consideration of paying the relatively low fee
(i.e., choosing ρ2) dominates the consideration of low waiting
time. Moreover, the fee choice ρ2 is not high compared
with ρ3 and hence the consideration of low waiting time
dominates the consideration of paying the relatively low fee
(i.e., choosing ρ3). As both ρ1 and ρ2 increase such that
Δ(hB, hS , ρ3) � Φρ2, the ρ3-SNE emerges, where all users
choose the lowest fee-per-byte ρ3.
VI. STAGE I: OPTIMAL FWT MECHANISM OF PROTOCOL
DESIGNER
In this section, we will characterize the protocol designer’s
optimal FWT mechanism in Stage I. We first formulate
the FWT mechanism design as an optimization problem
in Section VI-A, then we compute its optimal solution in
Section VI-B.
A. FWT Mechanism Design of Protocol Designer
In Stage I, the protocol designer optimizes the FWT
mechanism to encourage users to pay sufficient fees while
maximizing the social welfare.
1) Decision Variables: The protocol designer’s decision
variables are the fee-per-byte choices ρ = (ρ1, ρ2, . . . , ρI)
(with ρ1 > ρ2 > · · · > ρI � 0) and the waiting tax rate
vector P = (PHH , PHL, PLH , PLL). The fee-per-byte choices
encourages users to pay sufficient transaction fees to mitigate
the negative externality in transaction selection in Stage III.
The waiting tax rate vector let each user internalize the waiting
costs imposed on others, dealing with the negative externality
in transaction generation in Stage II.
2) Sufficient Fee Condition: For any user n with a positive
transaction generation rate (i.e.,
∑I
i=1 λni > 0), the FWT
mechanism aims at inducing an average fee-per-byte value that
can cover the total storage cost per byte of all miners, i.e.,
ρavg
n =
∑I
i=1 λniρi∑I
i=1 λni
� MCs, ∀n ∈ {l ∈ N|
I∑
i=1
λli > 0}.
(25)
3) Social Welfare: The social welfare equals the sum of
users’ and miners’ time-average payoffs.
Based on miner m’s payoff vk
m in round k in (5), the miner
m’s time-average payoffs as
vm(X , ρ) = lim
t→∞
∑Round(t)
k=1 vk
m(X k
m, X k
−m, ρ)
t
, (26)
where X = (X k
m, ∀m, ∀k) is the strategy profile of all miners
in Stage III and Round(t) is the number of rounds completed
in time interval [0, t].
The social welfare is as follows
sw(ρ, P , λ, X ) =
∑
n∈N
un(λ, ρ, P ) +
∑
m∈M
vm(X , ρ).
(27)
4) FWT Mechanism Design: We formulate the FWT mech-
anism design problem in (28), which aims at maximizing the
social welfare subject to sufficient transaction fee covering the
storage cost.
max sw(ρ, P , λ, X )
s.t. (25), ρ1 > ρ2 > · · · > ρI � 0,
var. ρ=(ρ1, ρ2, . . . , ρI), P =(PHH , PHL, PLH , PLL).16
(28)
B. Optimal Solution of FWT Mechanism Design
In this subsection, we will solve Problem (28) and discuss
the property of its optimal solution.
1) Optimal Solution of FWT Mechanism Design Problem:
The optimal solution to Problem (28) is as follows.
Theorem 3 (Optimal Solution of FWT Mechanism Design
Problem): The optimal FWT mechanism corresponds to the
optimal solution of Problem (28) as follows:
• If RH � MΦCs
2−q + γ
μ , then
– the fee-per-byte choices are (ρ∗i , ∀i = 1, 2, . . . , I)
where ρ∗i = MCs + (I−i)(2−q)γ
Φμ ,
– the waiting tax rate vector (P ∗
HH ,
P ∗
HL, P ∗
LH , P ∗
LL) ∈ R
4 satisfies the following
conditions:{
(NH − 1)P ∗
HH + NLP ∗
HL = 0,
NHP ∗
LH + (NL − 1)P ∗
LL = 0.
(29)
• If RH > MΦCs
2−q + γ
μ , then
– the fee-per-byte choices (ρ∗i , ∀i = 1, 2, . . . , I) where
ρ∗i satisfies following condition:
ρ∗i =
(I−i)(2 − q)(μRH − γ)
Φμ
−(I − i − 1)MCs.
(30)
– the waiting tax rate vector (P ∗
HH ,
P ∗
HL, P ∗
LH , P ∗
LL) ∈ R
4 satisfies the conditions
in (31), as shown at the bottom of the next page,
and the intermediate variables g1 and g2 are shown
in (32) and (33), as shown at the bottom of the next
page, respectively.
16The waiting tax can be negative, which motivates users to generate
transactions by compensating them. This makes the mechanism more flexible.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
LIU et al.: INCENTIVE MECHANISM FOR SUSTAINABLE BLOCKCHAIN STORAGE 2141
The insights of Theorem 3 are as follows: If RH � MΦCs
2−q +
γ
μ , both types of users have low transaction on-chain utilities,
which are insufficient to cover a transaction’s total storage
costs plus waiting costs. Thus the optimal FWT mechanism
prevents both types of users from generating any transactions,
such that the sum of any user’s waiting tax payment is 0.
If RH > MΦCs
2−q + γ
μ , type-H users have high transaction
on-chain utility. Thus the optimal FWT mechanism allows
users to generate transactions. The protocol designer sets the
lowest fee-per-byte ρ∗I = MCs to guarantee the sufficient
fee condition. Since users will generate transactions at SNE,
the sum of a type-H user’s (or type-L user’s, respectively)
waiting tax payment is non-zero as shown in (31a) (or (31b),
respectively).
2) Property of Optimal FWT Mechanism: To characterize
the property of the optimal FWT mechanism, we first establish
the benchmark of unconstrained social optimum, which is
the maximum social welfare that can be achieved without
considering the sufficient fee condition (25), i.e., the maximum
value of the objective function of Problem (34).
max sw(ρ, P , λ, X )
s.t. ρ1 > ρ2 > · · · > ρI � 0,
var. ρ=(ρ1, ρ2, . . . , ρI), P =(PHH , PHL, PLH , PLL).
(34)
Then we characterize the property of the optimal FWT
mechanism in Proposition 2.
Proposition 2 (Guarantee on Unconstrained Social
Optimum): The social welfare of the optimal FWT mechanism
equals the unconstrained social optimum.
Proposition 2 shows through our careful design of the FWT
mechanism, imposing the sufficient condition of (25) does not
lead to any loss of social welfare.
VII. PERFORMANCE EVALUATIONS
So far, we have studied the FWT mechanism design under
two types of users. In this section, we will relax such an
assumption and conduct some numerical analysis under four
types of users. We will evaluate the performance of the optimal
FWT mechanism (“FWT”) by comparing it with the existing
blockchain protocol (“Existing”, i.e., the fee mechanism cur-
rently deployed in Bitcoin and Ethereum). We study the impact
TABLE III
BLOCKCHAIN PARAMETERS
of various system parameters on the social welfare, fee-per-
byte payment, and waiting time on both schemes.
A. Setup of Numerical Analysis
We summarize the parameters of the numerical analysis
in Table III, where we set the blockchain-related parameters
based on Ethereum, and R1 to R4 represent the transaction
on-chain utilities for four types of users, respectively.
To solve the new model, we discretize each user’s trans-
action generation rate at each fee-per-byte choice into ten
equal-interval levels, and each user’s strategy is to choose one
level. We still focus on the symmetric Nash equilibrium where
each type of user adopts the same strategy. Then we apply
Zermelo’s algorithm [40] to derive the subgame perfect Nash
equilibrium of the model.
For the existing protocol of blockchain, the lowest and high-
est fee-per-byte choices correspond to 20% to 80% percentile
of Ethereum’s fee-per-byte (i.e., also referred to as gas price)
on Oct. 2020.
B. Fee-per-Byte and Social Welfare
In this subsection, we study how users’ parameters (impa-
tience level and transaction on-chain utility) affect both
schemes in terms of fee-per-byte and social welfare. For users’
parameters, we set the user’s highest transaction on-chain
utility as R1 ∈ [3 × 10−4, 4 × 10−3] and the user’s impatience
level as γ ∈ [10−5, 10−3]. Under such a setting, the daily
number of transactions of the existing protocol is between
0.95 to 1.25 millions. This range aligns well with the daily
number of transactions in Oct. 2020 that is between 0.96 to
1.25 millions [41].
⎧⎪⎪⎨
⎪⎪⎩
(NH − 1)P ∗
HH + NLP ∗
HL =
(2 − q)RH
Φ
− ρ∗I − (2 − q)γ[μ − (NH − 1)g1 − NLg2]
Φ(μ − NHg1 − NLg2)2
, (31a)
NHP ∗
LH + (NL − 1)P ∗
LL =
(2 − q)RL
Φ
− ρ∗I −
(2 − q)γ[μ − NHg1 − (NL − 1)g2]
Φ(μ − NHg1 − NLg2)2
. (31b)
g1 = min
{ μ
NH + NL
,
1
NH
[μ −
√
(2 − q)γμ
(2 − q)RH − MΦCs
]
}
. (32)
g2 =
⎧⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
0, if RL � MΦCs
2 − q
+
γ(NH + NL)2
N2
Lμ
,
μ
NH + NL
− 1
NL
√
(2 − q)γμ
(2 − q)RL − MΦCs
, otherwise.
(33)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
2142 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
Fig. 5. Impact of users’ parameters on average fee-per-byte ρ
avg
n .
1) Fee-per-Byte: Fig. 5 (a) and (b) illustrate the impact of
impatience level γ and transaction on-chain utility R1 on the
average fee-per-byte ρavg
n , respectively.
• Fig. 5(a): Storage cost in the figure corresponds to all
miners’ total storage cost per byte (i.e., MCs) and serves
as a benchmark for the other two curves. Under the
optimal FWT mechanism (FWT in the figure), we observe
that the average fee-per-byte can cover the total storage
cost, satisfying the sufficient fee condition. However,
under the existing protocol (Existing in the figure),
the sufficient fee condition does not hold when γ �
1.45 × 10−3. Moreover, we make an interesting obser-
vation as follows:
Observation 1: As the impatience level γ increases,
users pay lower average fee-per-byte ρavg
n in the existing
protocol.
We explain the reason behind Observation 1 as follows.
When the users become more impatient, they generate
fewer transactions to reduce waiting costs. Fewer trans-
actions lead to lower incentives to pay high transaction
fees and compete for short waiting time.
• Fig. 5(b): The correspondences of curves and the legend
are the same as Fig. 5(a). Under the optimal FWT
mechanism, the system always satisfies the sufficient fee
condition. Under the existing protocol, users increase the
average fee-per-byte with R1 and the sufficient fee con-
dition only holds when R1 � 2.8 × 10−3. As the user’s
on-chain utility R1 increases, users can afford higher
transaction fees, such that they pay high transaction fees
to reduce waiting time.
From Fig. 5, we make the following observation:
Observation 2: The optimal FWT mechanism can satisfy
the sufficient fee condition under four types of users.
Although we propose the FWT mechanism based on the
two-type-user model, Fig. 5 demonstrates that the optimal
FWT mechanism still ensures the sufficient fee condition and
outperforms the existing protocol.
2) Social Welfare: Fig. 6 (a) and (b) illustrate the impact of
impatience level γ and transaction on-chain utility R1 on the
social welfare sw, respectively.
• Fig. 6(a): On the left axis, two red curves plot the
social welfares of the optimal FWT mechanism (FWT
in the figure) and the existing protocol (Existing in
the figure). We notice that the social welfares of both
Fig. 6. Impact of users’ parameters on social welfare sw.
schemes decrease in γ, due to the increased waiting
cost with the increasing impatience level γ. On the right
axis, the blue curve marked in stars plots the optimal
FWT mechanism’s social welfare improvement over the
existing protocol (Improvement in the figure) and average
improvement is 51.43%. Such an improvement is due
to the optimal FWT mechanism addresses the negative
externality in transaction generation and reduces the
transaction waiting time.
• Fig. 6(b): The correspondences of curves and the axes
are similar as Fig. 6(a). On the left axis, we observe
that the social welfares of both schemes increase in R1,
due to the increased on-chain utility. On the right axis,
the social welfare improvement decreases in R1 with an
average value of 61.04%. The reason for such a decrease
in improvement is as follows. In the existing protocol, the
average fee-per-byte increases with R1 (i.e., Fig 5(b)),
preventing users from generating too many transactions
and causing excessive waiting costs on others.
An observation from Fig. 6 is as follows:
Observation 3: The optimal FWT mechanism achieves an
average social welfare improvement of 51.43% or more com-
pared with the existing protocol.
Although we propose the FWT mechanism based on the
two-type-user model, Observations 2 and 3 demonstrate that
the optimal FWT mechanism dominates the existing protocol
in both social welfare and the satisfaction of the sufficient fee
condition. As the existing protocol is a feasible choice of FWT
mechanism, the FWT mechanism’s domination has nothing to
do whether it is two or four user types.
C. Transaction’s Waiting Time
In this subsection, we study how parameters affect both
schemes in terms of transaction’s waiting time, which reflects
users’ benefits received from the optimal FWT mechanism.
Fig. 7 (a) and (b) illustrate the impact of impatience level γ
and transaction on-chain utility R1 on all transactions’ average
waiting time, respectively.
• Fig. 7(a): We observe that the average waiting time of
both schemes decrease in γ, as users generate fewer
transactions due to the increased waiting cost.
• Fig. 7(b): The average waiting time of both schemes
increase in R1, as users propose more transactions due
to the increased transaction on-chain utility.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
LIU et al.: INCENTIVE MECHANISM FOR SUSTAINABLE BLOCKCHAIN STORAGE 2143
Fig. 7. Impact of users’ parameters on all transactions’ average waiting time.
Fig. 8. Impact of users’ parameters on 10th-percentile-fee transactions’
average waiting time.
Moreover, we make the following observation from Fig. 7:
Observation 4: The optimal FWT mechanism reduces all
transactions’ average waiting time by an average of 61.56%.
Observation 4 demonstrates that the users bear significantly
lower waiting time in the optimal FWT mechanism, as the
waiting tax makes users more conservative in generating
transactions.
In Fig. 8, we plot the average waiting time of
10th-percentile-fee transactions (i.e., 90% transactions have
higher fee-per-byte than the transactions we consider).
We make the following observation.
Observation 5: The optimal FWT mechanism reduces
10th-percentile-fee transactions’ average waiting time by an
average of 68.49%.
We notice that the waiting time reduction for a
10th-percentile-fee transaction (i.e., 68.49%) is higher than
the average waiting time reduction for all transactions
(i.e., 61.56%). The reason is as follows. The optimal FWT
mechanism can reduce the number of transactions because of
the waiting tax. For a top-fee transaction, other transactions
do not delay its waiting time. Thus, reducing the number of
transactions in the optimal FWT mechanism does not affect
the top-fee transaction’s waiting time. On the other hand, the
optimal FWT mechanism provides more benefit to the low-
fee transactions, as the mechanism significantly reduces the
number of high-priority transactions for low-fee ones.
VIII. CONCLUSION
In this paper, we proposed an FWT mechanism to mitigate
the issue of insufficient storage fee in blockchain. We noticed
two types of negative externalities in the system: a miner’s
transaction selection imposes storage costs on other miners
and a user’s transaction generation imposes waiting costs on
other users. Motivated by the negative externalities, the FWT
mechanism offers fee choices to users and imposes waiting
tax on them. We modeled the interactions among the protocol
designer, users, and miners as a three-stage Stackelberg game.
We derived the subgame perfect equilibrium of the game in
closed-form. Based on the equilibrium, we found that miners
neglecting the negative externality in transaction selection
cause the insufficient fee issue in the existing blockchain.
We showed that the optimal FWT mechanism achieves the
unconstrained social optimum and guarantees that users pay
sufficient transaction fees for storage costs. Ethereum-based
numerical results showed that the optimal FWT mechanism
guarantees sufficient transaction fees and achieves an average
social welfare improvement of 51.43% or more over the
existing protocol. Moreover, the optimal FWT mechanism
reduces the average waiting time of low-fee transactions and
all transactions by 68.49% and 61.56%, respectively.
In the future work, we will further consider users with
multi-dimensional heterogeneity, where both their transac-
tion on-chain utility and impatience level are heterogeneous.
We also plan to study the problem under the dynamic setting,
where users enter and leave the system following a stochastic
process.
REFERENCES
[1] Y. Liu, Z. Fang, M. H. Cheung, W. Cai, and J. Huang, “Economics of
blockchain storage,” in Proc. IEEE Int. Conf. Commun. (ICC), Jun. 2020,
pp. 1–6.
[2] Ethereum Archive Node. Accessed: Nov. 2018. [Online]. Avail-
able: https://medium.com/quiknode/welcoming-the-newest-member-of-
the-quiknode-family-the-eth-archive-node-ac66201e0793
[3] W. Wang et al., “A survey on consensus mechanisms and mining
strategy management in blockchain networks,” IEEE Access, vol. 7,
pp. 22328–22370, 2019.
[4] Ethereum Archive Node Size. Accessed: Mar. 2022. [Online]. Available:
https://etherscan.io/chartsync/chainarchive
[5] Ethereum Transaction Fee. Accessed: Jul. 2020. [Online]. Available:
https://studio.glassnode.com/compare?a=ETH&c=usd&e=&m=fees.
VolumeSum&mAvg=0&mMedian=0&mScl=lin&miner=&resolution
=1month&s=1440896401&sameAxis=true
&u=1601510400&zoom
[6] Number of Full Node. Accessed: Mar. 2022. [Online]. Available:
https://www.ethernodes.org/history
[7] S. Nakamoto. (2008). Bitcoin: A Peer-to-Peer Electronic Cash System.
[Online]. Available: https://bitcoin.org/bitcoin.pdf
[8] Node Decline. Accessed: Dec. 2020. [Online]. Available:
https://thebitcoin.pub/t/ethereum-essentials-node-nuances/52785
[9] Bitcoinwiki. Accessed: Jun. 2020. [Online]. Available:
https://en.bitcoin.it/wiki/Weaknesses
[10] Storage Discussion. Accessed: Dec. 2018. [Online]. Available:
https://ethereum-magicians.org/search?q=state%20rent
[11] G. Huberman, J. D. Leshno, and C. Moallemi, “Monopoly without a
monopolist: An economic analysis of the bitcoin payment system,” Rev.
Econ. Stud., vol. 88, no. 6, pp. 3011–3040, Nov. 2021.
[12] D. Easley, M. O’Hara, and S. Basu, “From mining to markets: The
evolution of bitcoin transaction fees,” J. Financial Econ., vol. 134, no. 1,
pp. 91–109, Oct. 2019.
[13] J. Li, Y. Yuan, S. Wang, and F.-Y. Wang, “Transaction queuing game in
bitcoin blockchain,” in Proc. Intell. Vehicles Symp., 2018, pp. 114–119.
[14] P. R. Rizun, “A transaction fee market exists without a
block size limit,” Bitcoin Unlimited, Tech. Rep., 2015.
[Online]. Available: https://www.bitcoinunlimited.info/ and https://
www.bitcoinunlimited.info/resources/feemarket.pdf
[15] R. Zhang and B. Preneel, “On the necessity of a prescribed block validity
consensus: Analyzing bitcoin unlimited mining protocol,” in Proc. ACM
Int. Conf. Emerg. Netw. Exp. Technol., 2017, pp. 108–119.
[16] EIP-1559. Accessed: Apr. 2019. [Online]. Available: https://github.com/
ethereum/EIPs/blob/master/EIPS/eip-1559.md
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
2144 IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 30, NO. 5, OCTOBER 2022
[17] Q. Hu, Y. Nigam, Z. Wang, Y. Wang, and Y. Xiao, “A correlated
equilibrium based transaction pricing mechanism in blockchain,” in
Proc. IEEE Int. Conf. Blockchain Cryptocurrency (ICBC), May 2020,
pp. 1–7.
[18] Z. Ai, Y. Liu, and X. Wang, “ABC: An auction-based blockchain
consensus-incentive mechanism,” in Proc. IEEE 26th Int. Conf. Parallel
Distrib. Syst. (ICPADS), Dec. 2020, pp. 609–616.
[19] S. Basu, D. Easley, M. O’Hara, and E. Sirer, “Towards a functional fee
market for cryptocurrencies,” Jan. 2019, arXiv:1901.06830. [Online].
Available: https://arxiv.org/pdf/1901.06830.pdf
[20] R. Lavi, O. Sattath, and A. Zohar, “Redesigning bitcoin’s fee market,”
in Proc. World Wide Web Conf., 2019, pp. 2950–2956.
[21] A. Narayanan, J. Bonneau, E. Felten, A. Miller, and S. Goldfeder,
Bitcoin Cryptocurrency Technologies: A Comprehensive Introduction.
Princeton, NJ, USA: Princeton Univ. Press, 2016.
[22] Fee-Per-Byte. Accessed: Oct. 2021. [Online]. Available: https://
metamug.com/article/security/bitcoin-transaction-fee-satoshi-per-byte
[23] W. Cai, Z. Wang, J. B. Ernst, Z. Hong, C. Feng, and V. C. Leung,
“Decentralized applications: The blockchain-empowered software sys-
tem,” IEEE Access, vol. 6, pp. 53019–53033, 2018.
[24] A. H. Barnett, “The Pigouvian tax rule under monopoly,” Amer. Econ.
Rev., vol. 70, no. 5, pp. 1037–1041, 1980.
[25] Y. Jiao, P. Wang, D. Niyato, and K. Suankaewmanee, “Auction
mechanisms in cloud/fog computing resource allocation for public
blockchain networks,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 9,
pp. 1975–1989, Sep. 2019.
[26] C. Chen, J. Wu, H. Lin, W. Chen, and Z. Zheng, “A secure and efficient
blockchain-based data trading approach for Internet of Vehicles,” IEEE
Trans. Veh. Technol., vol. 68, no. 9, pp. 9110–9121, Sep. 2019.
[27] Top 50 Gas Spenders. Accessed: Mar. 2022. [Online]. Available:
https://etherscan.io/gastracker#gassender
[28] R. Bowden, H. P. Keeler, A. E. Krzesinski, and P. G. Taylor, “Block
arrivals in the bitcoin blockchain,” 2018, arXiv:1801.07447.
[29] I. Tsabary and I. Eyal, “The gap game,” in Proc. 11th ACM Int. Syst.
Storage Conf., Jun. 2018, pp. 713–728.
[30] C. Decker and R. Wattenhofer, “Information propagation in the bitcoin
network,” in Proc. IEEE P2P Proc., Sep. 2013, pp. 1–10.
[31] R. Pass and E. Shi, “FruitChains: A fair blockchain,” in Proc. ACM
Symp. Princ. Distrib. Comput., Jul. 2017, pp. 315–324.
[32] C. Wang, X. Chu, and Y. Qin, “Measurement and analysis of the bitcoin
networks: A view from mining pools,” in Proc. 6th Int. Conf. Big Data
Comput. Commun. (BIGCOM), Jul. 2020, pp. 180–188.
[33] Block Size Data. Accessed: Mar. 2022. [Online]. Available:
https://www.blockchain.com/charts/avg-block-size
[34] Online Appendix. Accessed: Dec. 2021. [Online]. Available:
https://share.weiyun.com/7LX12bs7
[35] Pay Less Fee. Accessed: Feb. 2021. [Online]. Available:
https://blog.makerdao.com/four-ways-defi-users-can-pay-less-in-
ethereum-gas-fees/
[36] D. Gross, Fundamentals Queueing Theory. Hoboken, NJ, USA: Wiley,
2008.
[37] C. Huang, H. Yu, J. Huang, and R. A. Berry, “Crowdsourcing with
heterogeneous workers in social networks,” in IEEE Global Commun.
Conf., Dec. 2019, pp. 1–6.
[38] [Online]. Available: https://ethereum.stackexchange.com/questions/
30175/what-is-the-size-bytes-of-a-simple-ethereum-transaction-versus-
a-bitcoin-trans
[39] Price of SSD. Accessed: Mar. 2022. [Online]. Available:
https://www.amazon.com/ssd/s?k=ssd
[40] M. J. Osborne and A. Rubinstein, A Course Game Theory. Cambridge,
MA, USA: MIT Press, 1994.
[41] Ethereum Daily Transaction. Accessed: Oct. 2020. [Online]. Available:
https://etherscan.io/chart/tx
Yunshu Liu (Graduate Student Member, IEEE)
received the B.Eng. and M.Eng. degrees from
Shanghai Jiao Tong University, Shanghai, China,
in 2015 and 2018, respectively. He is currently
pursuing the Ph.D. degree with the Department of
Information Engineering, The Chinese University
of Hong Kong, Hong Kong. His research interests
include the field of network economics, game the-
ory, and control theory, with current emphasis on
blockchain and its applications.
Zhixuan Fang (Member, IEEE) received the B.S.
degree in physics from Peking University, Beijing,
China, in 2013, and the Ph.D. degree in computer
science from Tsinghua University, Beijing, in 2018.
He is currently a Tenure-Track Assistant Professor
at the Institute for Interdisciplinary Information Sci-
ences (IIIS), Tsinghua University, China. He mainly
focuses on the design and analysis of multi-agent
systems and networked systems.
Man Hon Cheung received the B.Eng. and M.Phil.
degrees in information engineering from The Chi-
nese University of Hong Kong (CUHK) in 2005 and
2007, respectively, and the Ph.D. degree in electrical
and computer engineering from The University of
British Columbia (UBC) in 2012. He is currently an
Assistant Professor with the Department of Com-
puter Science, City University of Hong Kong. Pre-
viously, he was a Research Assistant Professor at
the Department of Information Engineering, CUHK.
He was awarded the Graduate Student International
Research Mobility Award by UBC and the Global Scholarship Program for
Research Excellence by CUHK. He serves as a Technical Program Committee
Member for IEEE INFOCOM, WiOpt, ICC, GLOBECOM, and WCNC. He is
an Associate Editor of IEEE COMMUNICATIONS LETTERS.
Wei Cai (Member, IEEE) received the B.Eng.
degree from Xiamen University in 2008, the M.Sc.
degree from Seoul National University in 2011, and
the Ph.D. degree from The University of British
Columbia (UBC) in 2016. He is currently an Assis-
tant Professor of computer engineering with the
School of Science and Engineering, The Chinese
University of Hong Kong, Shenzhen. He is serving
as the Director of CUHK(SZ)-White Matrix Joint
Metaverse Laboratory. He has coauthored more than
70 journal and conference papers in the area of inter-
active multimedia and distributed/decentralized systems. His recent research
interests are mainly in the topic of human-centered computing for metaverse,
including blockchain, digital game, web 3.0, and computational art. He serves
as a Technical Program Committee Member for ACM MM, MMSys, and
NOSSDAV. He was a recipient of the 2015 Chinese Government Award for
the Outstanding Self-Financed Students Abroad, the UBC Doctoral Four-Year-
Fellowship from 2011 to 2015, and the Brain Korea 21 Scholarship. He also
received the Best Student Paper Award from ACM BSCI2019 and the Best
Paper Awards from CCF CBC2018, IEEE CloudCom2014, SmartComp2014,
and CloudComp2013. He is an Associate Editor of IEEE TRANSACTIONS
ON CLOUD COMPUTING.
Jianwei Huang (Fellow, IEEE) received the Ph.D.
degree in ECE from Northwestern University in
2005. He worked as a Post-Doctoral Research Asso-
ciate at Princeton University from 2005 to 2007.
From 2007 until 2018, he was on the Faculty of
the Department of Information Engineering, The
Chinese University of Hong Kong, Shenzhen. Since
2019, he has been on the Faculty at The Chinese
University of Hong Kong, where he is currently a
Presidential Chair Professor and an Associate Dean
of the School of Science and Engineering. He also
serves as a Vice President of the Shenzhen Institute of Artificial Intelligence
and Robotics for Society. His research interests are in the area of network
optimization, network economics, and network science, with applications in
communication networks, energy networks, data markets, crowd intelligence,
and related fields. He has published more than 300 papers in leading venues,
with a Google Scholar citation of 14000 and an H-index of 61. He has
coauthored ten Best Paper Awards, including the 2011 IEEE Marconi Prize
Paper Award in Wireless Communications. He has coauthored seven books,
including the textbook on Wireless Network Pricing. He was an IEEE
ComSoc Distinguished Lecturer and a Clarivate Web of Science Highly
Cited Researcher. He is the Editor-in-Chief of IEEE TRANSACTIONS ON
NETWORK SCIENCE AND ENGINEERING and was the Associate Editor-in-
Chief of IEEE OPEN JOURNAL OF THE COMMUNICATIONS SOCIETY.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:05:34 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Black & White)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Tags
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 524288
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo true
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments true
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /AdobeArabic-Bold
    /AdobeArabic-BoldItalic
    /AdobeArabic-Italic
    /AdobeArabic-Regular
    /AdobeHebrew-Bold
    /AdobeHebrew-BoldItalic
    /AdobeHebrew-Italic
    /AdobeHebrew-Regular
    /AdobeHeitiStd-Regular
    /AdobeMingStd-Light
    /AdobeMyungjoStd-Medium
    /AdobePiStd
    /AdobeSansMM
    /AdobeSerifMM
    /AdobeSongStd-Light
    /AdobeThai-Bold
    /AdobeThai-BoldItalic
    /AdobeThai-Italic
    /AdobeThai-Regular
    /ArborText
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /BellGothicStd-Black
    /BellGothicStd-Bold
    /BellGothicStd-Light
    /ComicSansMS
    /ComicSansMS-Bold
    /Courier
    /Courier-Bold
    /Courier-BoldOblique
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /Courier-Oblique
    /CourierStd
    /CourierStd-Bold
    /CourierStd-BoldOblique
    /CourierStd-Oblique
    /EstrangeloEdessa
    /EuroSig
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Helvetica
    /Helvetica-Bold
    /Helvetica-BoldOblique
    /Helvetica-Oblique
    /Impact
    /KozGoPr6N-Medium
    /KozGoProVI-Medium
    /KozMinPr6N-Regular
    /KozMinProVI-Regular
    /Latha
    /LetterGothicStd
    /LetterGothicStd-Bold
    /LetterGothicStd-BoldSlanted
    /LetterGothicStd-Slanted
    /LucidaConsole
    /LucidaSans-Typewriter
    /LucidaSans-TypewriterBold
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MinionPro-Bold
    /MinionPro-BoldIt
    /MinionPro-It
    /MinionPro-Regular
    /MinionPro-Semibold
    /MinionPro-SemiboldIt
    /MVBoli
    /MyriadPro-Black
    /MyriadPro-BlackIt
    /MyriadPro-Bold
    /MyriadPro-BoldIt
    /MyriadPro-It
    /MyriadPro-Light
    /MyriadPro-LightIt
    /MyriadPro-Regular
    /MyriadPro-Semibold
    /MyriadPro-SemiboldIt
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /Symbol
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Webdings
    /Wingdings-Regular
    /ZapfDingbats
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 600
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 600
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 300
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 900
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.33333
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /Unknown
  /CreateJDFFile false
  /Description <<
    /ENU ()
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice