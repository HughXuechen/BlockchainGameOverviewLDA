Impact of Temporary Fork on the Evolution of Mining Pools in Blockchain Networks: An Evolutionary Game Analysis
Impact of Temporary Fork on the Evolution of
Mining Pools in Blockchain Networks: An
Evolutionary Game Analysis
Canhui Chen, Xu Chen , Senior Member, IEEE, Jiangshan Yu ,Member, IEEE,
Weigang Wu ,Member, IEEE, and Di Wu , Senior Member, IEEE
Abstract—Temporary fork is a fundamental phenomenon in
many blockchains with proof of work, and the analysis of
temporary fork has recently drawn great attention. Different
from existing efforts that focus on the blockchain system factors
such as block size, network propagation delay or block generation
speed, in this paper we explore a new key dimension of computing
power from the miners’ perspective. Specifically, we first propose
a detailed mathematical model to characterize the impact of
computing power competition of the mining pools on the
temporary fork. We also derive closed-form formula of the
probability of temporary fork and the expected mining reward of
a mining pool. To reveal the long-term trends on the computing
power distributions over the competing mining pools, we then
develop an evolutionary game framework based on the temporary
fork modeling and accordingly characterize the set of stable
evolution equilibriums. Both extensive numerical simulations and
realistic blockchain data based evaluation provide evidence to
support our theoretical models and discoveries.
Index Terms—Blockchain, temporary fork, evolutionary game
theory, evolution equilibrium.
I. INTRODUCTION
S INCE the first blockchain application Bitcoin [1] was
launched, blockchain has attracted more and more atten-
tion. Blockchain has numerous benefits such as decentraliza-
tion, persistence, pseudonymity, and auditability. Currently,
blockchain has many application scenarios such as finance,
supply chain and IoT services [2]–[6], many of which greatly
depends on the decentralization feature of blockchain.
The Proof-of-Work (PoW) is the most widely adopted con-
sensus algorithm in blockchain networks such as Bitcoin and
Ethereum. By solving math puzzles usually involving hash
calculations, those who find a solution that meets the condi-
tions are allowed to generate new blocks and earn a block
reward. This economic incentive encourages participants (a.k.
a. miners) to contribute their computing power as much as
possible in solving PoW puzzles, which is often called mining.
As the blockchain mining has become more complex and diffi-
cult, mining pools have been created to consolidate resources
to form a single entity that mines blockchain blocks with col-
lective computational power of all the miners in the pool,
which leads to the formation of several large mining pools and
the increase of the centralization in blockchain systems. The
centralization crisis of the PoW-based blcokchain severely
threatens these blockchain-based applications.
Investigating the long-term trends on decentralization
remains a challenging issue [7]. Motivated by this, we are
going to study the evolution of mining pools in blockchain
networks and reveal the long-term trends on the computing
power distributions over the competing mining pools. We also
investigate how the system settings, such as the network prop-
agation delay, the block size, and the ratio of uncle block
reward, affect the degree of decentralization of blockchain
networks through the temporary fork perspective.
Temporary fork is a common fundamental phenomenon in
many blockchain systems, and it happens when the miners dis-
cover a block at the same time, which would result in split
competing chains. And temporary forks are typically resolved
in PoW blockchains such as Bitcoin when miners select which
chain to form subsequent blocks upon [8]. In general, a higher
probability of temporary fork implies that inconsistency
occurs more frequently in the consensus, leading to a higher
ratio of abandoned and stale blocks in the blockchain, which
can be very harmful for the system performance such as trans-
action throughput and resource efficiency [9]. Motivated by
this, the analysis of temporary fork has been drawing great
research attention [10]. Nevertheless, existing research efforts
mainly focus on the impacting factors from the blockchain
system point of view, such as block size, network propagation
delay or block generation speed [11], [12].
Along a different line, in this paper we explore a new key
dimension of computing power for mining from the miners’
perspective, which is much less understood yet and is critical
for revealing the long-term mining patterns and evalution
states of blockchains [10]. Specifically, we first propose a
detailed model of temporary fork in which the probability of
stale blocks mined by a mining pool depends on its own hash
rate and the hash rates of the other pools in the entire
Manuscript received September 4, 2020; revised October 30, 2020;
accepted November 13, 2020. Date of publication November 18, 2020; date of
current version March 17, 2021. Recommended for acceptance by Dr. Y. Wu.
(Corresponding author: Xu Chen.)
Canhui Chen, Xu Chen, Weigang Wu, and Di Wu are with the School of
Computer Science and Engineering, Sun Yat-sen University, Guangzhou
510275, China (e-mail: chench296@mail2.sysu.edu.cn; chenxu35@mail.sysu.
edu.cn; wuweig@mail.sysu.edu.cn; wudi27@mail.sysu.edu.cn).
Jiangshan Yu is with the Faculty of Information Technology, Monash Uni-
versity, Melbourne, VIC 3800, Australia (e-mail: Jiangshan.Yu@monash.edu).
Digital Object Identifier 10.1109/TNSE.2020.3038943
400 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
2327-4697� 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-9943-6020
https://orcid.org/0000-0001-9943-6020
https://orcid.org/0000-0001-9943-6020
https://orcid.org/0000-0001-9943-6020
https://orcid.org/0000-0001-9943-6020
https://orcid.org/0000-0001-8006-7392
https://orcid.org/0000-0001-8006-7392
https://orcid.org/0000-0001-8006-7392
https://orcid.org/0000-0001-8006-7392
https://orcid.org/0000-0001-8006-7392
https://orcid.org/0000-0002-4714-7021
https://orcid.org/0000-0002-4714-7021
https://orcid.org/0000-0002-4714-7021
https://orcid.org/0000-0002-4714-7021
https://orcid.org/0000-0002-4714-7021
https://orcid.org/0000-0002-9433-7725
https://orcid.org/0000-0002-9433-7725
https://orcid.org/0000-0002-9433-7725
https://orcid.org/0000-0002-9433-7725
https://orcid.org/0000-0002-9433-7725
mailto:
mailto:
mailto:
mailto:
mailto:
mailto:
blockchain network. We show that the expected block reward
received by a mining pool is not proportional to its computa-
tional power. Particularly, the pools with a large hash rate will
have a smaller probability of mining a stale block, thus they
are at an advantage in competition, and can get more block
rewards, while a pool with small hash rate will be trapped into
a disadvantaged state in competition. Therefore, miners may
join a larger mining pool for higher benefits, thereby reducing
the degree of decentralization of the blockchain network.
Additionally, the uncle block reward is considered in our
model, which was once utilized in the Ethereum [13]. Com-
bining the mining reward analysis, we show that increasing
the uncle block reward can help to mitigate the negative
impact of temporary fork.
Furthermore, based on the proposed temporary fork model,
we investigate the competition evolution dynamics of the
mining pools in the blockchain as an evolutionary game. We
theoretically characterize the stable equilibriums of the evolu-
tionary game under various conditions, which are useful to
reveal the long-term trends on the computing power distribu-
tions over the mining pools. We find that when considering
the temporary fork competition, increasing the uncle block
reward helps to reduce the degree of centralization of comput-
ing power distributions in the blockchain network. Besides,
we show that a larger network delay or a shorter block genera-
tion interval will lead to a higher probability of temporary
fork, which will trap the mining pools with the small hash
rates at a disadvantage in competition, leading the blockchain
network to be more centralized in mining power distributions.
Several numerical simulations are carried out to verify our
theoretical analysis. Moreover, the distributions of mining
power in four major realistic blockchain networks are com-
pared and investigated, which are consistent with the theoreti-
cal results of our models.
Our main contributions in this paper are summarized as
follows.
� We propose a detailed mathematical model to charac-
terize the impact of computing power competition of
the mining pools on the temporary fork in the block-
chain network, and then derive closed-form formula of
the probability of temporary fork and the expected min-
ing reward of a mining pool.
� We present an evolutionary game framework based on
the temporary fork modeling to analyze the evolution
equilibrium of the mining pool competitions, and
accordingly characterize the set of stable equilibriums.
� Based on the proposed models and the derived theoreti-
cal results, we obtain several key insights and reason-
able explanations for the observed phenomenons in
practical blockchain systems through both numerical
and realistic data based evaluations.
For convenience, the main notations used in the paper are
listed in Table I. Besides, the rest of this paper is organized as
follows. In Section II, we put forward a detailed model of the
temporary fork in the blockchain network and formulate the
disproportionate mining reward of different mining pools. In
Section III, we develop an evolutionary game based on the
aforementioned temporary fork model and investigate the evo-
lution equilibrium. In Section IV, we review related literature.
Section V concludes the paper with final remarks.
II. TEMPORARY FORK MODEL IN BLOCKCHAIN NETWORK
We consider a blockchain network in which there is a large
population of N miners distributed in M mining pools, where
N �M. Let hh ¼ ½h1; . . . ; hM �> denote the hash rate vector
and V ¼PM
i¼1 hi denote the total hash rate, and let xx ¼
½x1; . . . ; xM �> denote the hash rate fractions (or normalized
hash rates) of the pools, where xi ¼ hi=V .
When two valid but conflict blocks are generated at the
same height of the blockchain, only one of them will be
accepted by the blockchain and the other is called a stale
block. We call the miner of the accepted block a winner in
this competition. For Bitcoin-like systems, the creator of the
stale blocks will get no reward. While in some other block-
chain network like Ethereum, which adopts the GHOST rule
[14], the stale blocks may be considered to be the uncle block
and can get a partial reward. To investigate the impact of the
temporary fork, we consider the general case and denote R as
the block reward and uR denotes the reward for the uncle
block where u 2 ½0; 1Þ. In particular, u ¼ 0 means that the
uncle block reward is zero in the blockchain network, which is
similar to the stale block case in Bitcoin.
Based on the setting above, the temporary fork model is dis-
cussed in detail in the following subsections.
A. Temporary Fork Modeling
Temporary forks are mainly caused by network delays. The
block propagation time includes transmission delay and trans-
action verification time. For a block of size s, the transmission
delay can be modeled as tpðsÞ ¼ s
gc , where g is the network
scale-related parameter and c is the average effective band-
width of each network link [12], [15]. And the block verifica-
tion time can be modeled as a linear function tvðsÞ ¼ bs,
where b is a parameter determined by both the network scale
TABLE I
SUMMARY OF NOTATIONS
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 401
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
(i.e., number of nodes in the blockchain network) and the
average verification speed of each node. Then the propagation
delay for a block of size s is
tðsÞ ¼ tpðsÞ þ tvðsÞ ¼ s
gc
þ bs:
Note that the focus of our study is to model the impact of
diversified computing powers of the mining pools on the tem-
porary fork. Thus we model the propagation delay from the
holistic network point of view, and hence assume a homoge-
neous network propagation delay across the mining pools to
represent its impact.
Similar to previous studies such as [1], [11], we assume that
the event of generating a new block in the blockchain network
follows the Poisson process and hence the time duration
between two consecutive blocks follows the exponential distri-
bution, with a mean time T , i.e., the average block generation
rate � ¼ 1=T . The probability density function (pdf) of the time
duration t between two consecutive blocks can be formulated as
fðt;�Þ ¼ �e��t; t � 0;
0; otherwise.
�
And the corresponding cumulative distribution function (cdf) can
be integrated from the exponential pdf and obtained as follows
F ðt;�Þ ¼ 0; t < 0;
1� e��t; t � 0:
�
Then the probability of generating two blocks during a block
confirmation period due to network propagation delay, noted
as PD, can be formulated as
PD ¼ F ðtðsÞ;�Þ ¼ 1� e��tðsÞ:
It is worth mentioning that PD is not equal to the probability of
fork. In fact, after mining the block, the miner that mined the
block will continue to mine the next block, and only other
miners find another block within Dt will result in a fork. This
phenomenon is called “Last Block Effect”[16], i.e., the miner
that produced the last block “find out” the block immediately
rather than after waiting for tðsÞ seconds for it to propagate
through the network, and thus gains an advantage in decreas-
ing his fork rate and finding the next block.
As shown in Figure 1 (a), mining Pool A mines a new block
#104 at time t, which is the last block for Pool A, so Pool A
can continue to mine on the next block #105 without waiting
for tðsÞ seconds for it to propagate through the network. How-
ever, the other pools in the blockchain network do not receive
the new block #104 before tþ tðsÞ, so they will continue to
mine for the potential block #104, as the block #103 is the last
block for them. If one of the other pools, i.e., Pool B, mines a
block at the same height of 104 during the block propagation
period, the temporary fork will happen due to the block incon-
sistencies, as shown in Figure 1 (b). Eventually, the longer
chain will survive and one of the mining pool will win.
When a new block is generated into the blockchain net-
work, since the network delay is the same for the miners, then
the probability that a miner can successfully win the mining
competition and find the block is proportional to its hash rate.
Thus the probability of fork is related to the hash rate of the
miner who finds the latest block. Therefore the probability
that fork happens after a miner of mining pool i finding the lat-
est block is
P fork
i ¼ ð1� xiÞPD ¼ ð1� xiÞð1� e��tðsÞÞ:
And the probability that there is no fork after the miner in
pool i finding a block therefore is P chain
i ¼ 1� P fork
i ¼
ð1� xiÞe��t�xi.
Generally, the faster the block generation speed, the higher
the frequency of temporary forks. In fact, the frequency of
temporary fork in Bitcoin is quite lower than that of Ether-
eum. Temporary forks will result in two split competing
branches. The algorithm of selecting of a canonical chain is
application specific. For example, Bitcoin selects the chain
contains most of the work (a.k.a. selecting the longest chain)
and GHOST selects the heaviest subtree [17]. In this paper,
we only focus on the systems deploying the longest chain
selection rule, as presented in Figure 1.
For the blockchain following the longest chain rule, when a
temporary fork appears, miners in the blockchain system need
to choose one of the branches to mine until one of the chains
becomes the longest chain. To account for this fact, we then
propose a block selection algorithm shown in Algorithm 1 to
Fig. 1. Illustration of Temporary Fork. (a) Last Block Effect. (b) Temporary
fork and block inconsistencies. (c) Eventually, the longer chain will survive
and one of the mining pools will win.
402 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
model the chain selection behaviors. The algorithm is straight-
forward, when the temporary fork happens, the mining pools
causing the temporary fork will continue to mine on their own
chain, while the miners in those irrelevant mining pools will
randomly select a branch to mine. This is motivated by the
fact that many existing mining programs like the Satoshi client
[18] in bitcoin will simply pick the one it sees first to continue
mining. Due to the dynamic fluctuations of the network condi-
tions of the miners in reality, the first block of a fork that is
propagated to a miner in irrelevant mining pools can be arbi-
trary and hence the chain selection of a miner in irrelevant
mining pools is modeled as a random choice. Note that similar
to existing studies [11], [12], in this modeling study we do not
consider the selfish mining attacks by some minority miners
[19] to enable tractable analysis.
B. Mining Reward Analysis
Based on the temporary fork model and the block selection
algorithm above, we then conduct a probabilistic analysis on
the expected reward for a mining pool i. For simplification, as
illustrated in Figure 1, we will focus on the most common case
that the chain is forked into two competing branches and the
longer branch will win the competition.1 The analysis of
the case with more than two simultaneous branches is
mathematically much more involved, and we believe the case
with two branches can be a good approximation to provide use-
ful insights. Also, since the analysis of double spending attacks
is not the focus of this study, to simplify the analysis we do not
require a branch to have multiple leading blocks to win.
Suppose that a mining pool i just finds a new block A, lead-
ing to a new chain c1. As shown in Section II-A, then the prob-
ability of another pool ~i to find another new block B during
the block confirmation period of block A is P fork
i ¼
ð1� xiÞð1� e��tðsÞÞ, leading to another competing chain c2
that forms the temporary fork.
Let a and b denote the hash rate fractions of these two com-
peting mining pools i and ~i, respectively. According to the
block selection algorithm mentioned above, the mining pool i
will continue to mine on the c1 until c1:length 6¼ c2:length,
and similarly for mining pool ~i. The other mining pools except
pools i and ~i will randomly select the chain ck; k 2 f1; 2g to
mine. For simplicity, we define that
dkðjÞ ¼ 1; mining pool i mines on chain ck;
0; otherwise:
�
Then we have
Eðd1ðjÞÞ ¼
1; j ¼ i;
0; j ¼ ~i;
1
2 ; otherwise:
Eðd2ðjÞÞ ¼
1; j ¼ ~i;
0; j ¼ i;
1
2 ; otherwise:
8<
:
8<
:
Therefore, the mathematical expectation of the total hash rate
on chain c1 is
E
XM
j¼1
xjd1ðjÞ
 !
¼ E xi þ
X
j 6¼i;j6¼~i
xjd1ðjÞ
0
@
1
A ¼ xi þ
X
j 6¼i;j 6¼~i
xjEðd1ðjÞÞ
¼ xi þ 1
2
X
j 6¼i;j 6¼~i
xj ¼ aþ 1
2
ð1� a� bÞ
¼ 1þ a� b
2
:
Similarly, the mathematical expectation of the total hash rate
on chain c2 is
E
XM
j¼1
xjd2ðjÞ
 !
¼ E x~i þ
X
j 6¼i;j6¼~i
xjd2ðjÞ
0
@
1
A ¼ x~i þ
X
j 6¼i;j 6¼~i
xjEðd2ðjÞÞ
¼ x~i þ
1
2
X
j 6¼i;j 6¼~i
xj ¼ bþ 1
2
ð1� a� bÞ
¼ 1� aþ b
2
:
In this case, when the next new block is generated, the proba-
bility that it appears (i.e., is found by a miner) on a chain
ck; k 2 f1; 2g equals to the hash rate fraction of the chain.
Since a block is generated according to the Poisson distribu-
tion with the speed �, the time duration tk for the next block
to appear on a chain k 2 f1; 2g thus still follows the exponen-
tial distribution, but with different parameters �k; k 2 f1; 2g
as follows:
Algorithm 1: Block selection algorithm
Input: public chain for a mining pool
while Nobody finds a new block do
continue to mine on chain c1
end
ifMy Pool finds a block on chain c1 then
publish the block immediately
listen to the network while mining.
if Another pool publishes the block during a block confirmation
period leading to fork a new branch c2 then
while c1.length ¼ c2.length do
continue to mine on chain c1
end
if c1.length > c2.length then
My pool wins due to the lead of 1 block
Reward Reward + R
end
else
My Pool loses the competition
Reward Reward + uR
end
end
end
if Others find a new block then
Attach the block to the current chain
if Temporary fork happens then
Randomly select a chain branch to mine
end
end
1 Our statistics (which is provided in Appendix A) shows that more than
95% of the temporary forks in Ethereum are with exactly two competing
branches, and similar observation holds for Bitcoin [9].
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 403
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
fðt;�kÞ ¼ �ke
��kt; t � 0;
0; otherwise,
�
where �1 ¼ ð1þa�bÞ�2 and �2 ¼ ð1�aþbÞ�2 .
Let z ¼ t2 � t1 be a random variable describing the time
difference of the next block appearing time on chains c2 and
c1. Therefore, the probability density function (pdf) of z is
fzðzÞ ¼
�1�2
�1þ�2 e
��2z; z � 0;
�1�2
�1þ�2 e
�1z; z < 0:
(
And the cumulative distribution function (cdf) of z is obtained as
FzðzÞ ¼
1� �1
�1þ�2 e
��2z; z � 0;
�2
�1þ�2 e
�1z; z < 0:
(
Accordingly, the competing chain c2 will win during the tem-
porary fork if the appearing time of the next block on chain c2
is ahead of the appearing time of the next block on chain c1 by
at least a confirmation period duration tðsÞ (i.e., t1 � t2þ
tðsÞ), which results in the block A on the branching chain c1
becoming a stale block. And we can derive the corresponding
probability as
P ðc2 wins in next periodÞ ¼ Fzð�tðsÞÞ ¼ h1e
��tðsÞh2 ;
where h1 ¼ 1�aþb
2 and h2 ¼ 1þa�b
2 . Similarly, the probability
that c1 wins, resulting in the block B on chain c2 to be the stale
block is that
P ðc1 wins in next periodÞ ¼ 1� FzðtðsÞÞ ¼ h2e
��tðsÞh1 ;
and the probability that c1 and c2 tie in the next period is
P ðtieÞ ¼ 1� h1e
��tðsÞh2 � h2e
��tðsÞh1 :
If c1 and c2 tie in the first period, due to the adjustment of
mining power over these two chain branches according to the
block selection algorithm, the probability that either c1 or c2
eventually wins the competition is approximately 50%. There-
fore, the probability that block A of pool i will be a stale block
due to the competition by pool ~i can be formulated as
P fail
i;~i
¼ h1e
��tðsÞh2 þ 1
2
P ðtieÞ:
Since during a temporary fork the competing pool ~i with
pool i can be any other pool except i, we have the competing
hash rate fraction of b 2 fx1; . . . ; xi�1; xiþ1; . . .xng, and the
corresponding probability of P ðb ¼ xjÞ ¼ xj
1�xi . In this case,
the probability that a block of a pool i will be stale during a
temporary fork is
P fail
i ¼
X
j 6¼i
xj
2ð1� xiÞ ð1þ h1e
��tðsÞh2 � h2e
��tðsÞh1Þ;
where we have h1 ¼ 1�xiþxj
2 and h2 ¼ 1þxi�xj
2 accordingly. For
simplification, the formula above can be approximated by the
following formula using Taylor expansion as
P fail
i �
X
j 6¼i
xjð1� xi þ xjÞ
2ð1� xiÞ :
As an illustration, here we put forward a simple model for
two mining pools based on the above analysis to intuitively
explain the rationality of the approximation. Suppose there
are only two mining pools i and j with hash rate a and b,
subject to aþ b ¼ 1. Thus, the probability for mining pool i
to mine a stale is
P fail
i ¼ 1=2 � ð1þ ð1� aÞe��tðsÞa � ae��tðsÞð1�aÞÞ
� 1� a:
As can be seen from the the actual probability function in
Figure 2, this approximation is reasonable, since generally, we
have tðsÞ < T in the blockchain network and it implies
�tðsÞ < 1, which is close to the linear form.
Based on the analysis above, the probability for mining pool
i to mine a stale block is thus as
P uncle
i ¼ P fork
i � P fail
i ¼ 1� e��tðsÞ
2
X
j 6¼i
xjð1� xi þ xjÞ: (1)
And accordingly the expected reward of mining pool i can be
derived by the following theorem.
Theorem 1: For a blockchain system with M mining pools,
if the hash rate ratio of the mining pool i is xi
(i 2 f1; . . . ;Mg), the basic block reward is R, the block gen-
eration rate is �, the network delay is tðsÞ, and the uncle block
reward is uR, the expected mining reward of a mining pool i
can be expressed as
Yi ¼ xiRð1� ð1� uÞP uncle
i Þ;
where P uncle
i is given in (1).
The proof is given in Appendix B. From the theorem above,
we can observe that with a faster speed � that a block is gener-
ated or a larger network delay tðsÞ on the blockchain, we have
a larger probability of a temporary fork with more stale or
uncle blocks being generated (i.e., P uncle
i becomes larger).
Second, we see that the expected reward of a mining pool
does not grow linearly with its computing power. Instead,
with a higher computing power xi, a mining poor i can enjoy
Fig. 2. Probability Function.
404 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
a more significant shrinking in P uncle
i (i.e., the probability of
generating stale or uncle blocks reduces more significantly),
leading to a more significant advantage in gaining rewards.
This implies that concentrating in the mining pool can get a
lower percentage of stale blocks, and thus get higher returns.
Last but not least, we see that increasing the uncle reward ratio
u can help to mitigate the impact of stale or uncle blocks on
the mining reward.
C. Practical Insights
We now apply our theoretical results to gain some useful
insights through numerical study and realistic blockchain data
evaluation.
To explore the impact of temporary forks on the fairness of
the mining reward, we use the current mining pool hash rate
to carry out numerical experiments. Figure 3 presents the hash
rate fractions of mining pools in Ethereum [20]. Note that
even though Ethereum is not implementing the longest chain
rule, it provides a good source of data in large scale on the dis-
tribution of generated blocks with shorter generation intervals.
The largest mining pool has dominated approximately 33% of
the total hash rate. The top two mining pools have dominated
over 50% of the total hash rate. Accordingly, we assume that
there are 5 large mining pools in the simulation, and the ratio
of the hash rate accounts for 33%, 21%, 11%, 8%, 4%, and
the remaining 23% of the computing power is evenly distrib-
uted by 100 small mining pools, each small mining pool
accounts for 0.23% of the total hash rate.
We next investigate the fairness of the mining game. We
first introduce the equity theory [21], which has been widely
applied to business settings by social psychologists to describe
the relationship between an employee’s motivation and his or
her perception of equitable or inequitable treatment. The fair-
ness (or equity) is measured by comparing the ratio of benefits
(or rewards) and contributions (or costs) for each person [22].
According to the equity theory, partners do not have to receive
equal benefits or make equal contributions, as long as the ratio
between these benefits and contributions is similar, which will
cause a feeling of satisfaction and help to have better
outcomes.
Similar to the social business, fairness is also very important
in the mining game. If the mining game is not fair, i.e., some
of the mining pools are at advantage with higher ratio of
rewards and contributions, while some of the mining pools are
at disadvantage with lower ratio of rewards and contributions,
then miners in the disadvantaged mining pools are incentive
to join the advantaged mining pools to achieve higher ratio of
rewards and contributions, which will increase the degree of
centralization of the blockchain system. To measure the fair-
ness of the mining game, the reward ratio of the mining pool i
is defined as the normalized ratio of its expected mining
reward and its hash rate fraction, which is given as follows:
Reward ratioðiÞ ¼ Yi
xiR
¼ R 1� ð1� uÞP uncle
i
� �
:
Without temporary forks, the reward ratio of any mining pool
should be the same, which is one of the properties that guaran-
tee the decentralization of the blockchain system. However,
after considering the temporary fork, this fairness may be bro-
ken. Figure 4 (a) shows that as the network delay increases,
mining pools with large hash rates will benefit from a higher
reward ratio, while mining pools with small hash rates will be
at a disadvantage. Thus, we have the following insight.
Insight 1: The temporary fork cased by network delay posi-
tively impacts the reward ratio of mining pools with large hash
rates.
Figure 4 (b) shows the impact of the uncle block reward on
the reward ratio of the mining pools. It can be seen that as the
proportion of uncle reward increases, the gap between the
reward ratio between the mining pools decreases, and the fair-
ness of the blockchain systemwill improve. Therefore, we have
Insight 2: A higher uncle reward greatly reduces the impact
of temporary fork and leads to more fairness between the min-
ing pools.
Figure 4 (c) illustrates the impact of the computing power
growth of a small mining pool (a mining pool that initially
accounted for 0.23% of the computing power), from which we
can obtain the following insight.
Insight 3: The mining pools in the blockchain system are in
a competitive relationship. The computing power of one min-
ing pool directly affects the reward of others.
To verify the correctness of our previous analysis and dem-
onstrate the impact of temporary fork on the reward of mining
pools in reality, we collect and analyze data for the first
1,920,000 blocks of the Ethereum blockchain (before Ether-
eum hard fork). Figure 5 and Table II show that there is a gen-
eral trend that larger miners or mining pools (with more
blocks mined) have lower fork rates and lower fail rates when
temporary fork happens, thus have lower uncle rates and
higher mining reward. Therefore, the miners or mining pools
with large hash rates can obtain skew mining reward, while
those with small hash rates will be trapped at disadvantage in
the mining process, which is consistent with our previous
analysis.
Besides the analytical analysis on the temporary fork, here
are also some other hypotheses which may help to explain the
fact that larger miners have lower uncle rates [16], for example,
large mining pools are professional operations and have more
Fig. 3. The top 5 mining pools’ hash rates in Ethereum (2020.01).
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 405
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
resources available to invest in improving their overall connec-
tivity to the network and thus have higher efficiency [23].
III. EVOLUTIONARY GAME FOR MINING POOL EVOLUTION
EQUILIBRIUM ANALYSIS
Based on the temporal fork modeling analysis above, we
then further consider studying the evolution equilibrium (i.e.,
the converging states) of the competing mining pools when
the large population of miners can adapt their pool selections
dynamically. And the evolutionary game theory [24] is an
ideal modeling tool to analyze their evolution equilibrium due
to the dynamic competitive behaviors of the miners.
A. Evolutionary Game Model
Generally, a miner is required to provide a certain hash rate
of vi to join the mining pool i. Let vv ¼ ½v1; . . . ;vM �T denote
the vector of hash rate specifications of the mining pools.
Meanwhile, let rr ¼ ½r1; . . . ; rM �T denote population fraction
vector for the mining pools, i.e., rr 2 D ¼ frj0 � ri � 1; 8i 2
f1; 	 	 	 ;Mg and PM
i¼1 ri ¼ 1g. For example, if 20% of min-
ers join the mining pool, then ri ¼ 0:2. Therefore, for a block-
chain with N miners and M mining pools, the hash rate of the
mining pool i is hi ¼ Nrivi, and the total hash rate of the
entire network is V ¼PM
j¼1 Nrjvj. Thus, we have
xi ¼ hi
V
¼ NriviPM
j¼1 Nrjvj
¼ viriPM
j¼1 rjvj
:
To characterize the evolution equilibrium of the mining pools
in competition, we actually would like to derive the conver-
gent population state of the miner distributions, which is use-
ful to reveal the long-term trends on the degree of
centralization of computing power distributions.
For simplicity, we consider the homogeneous mining cost
and p denotes the unit cost (e.g., expenditure for mining
energy). The total cost for a miner in the mining pool i can be
expressed as pvi. In the blockchain system, there are many
ways for a mining pool to distribute its mining reward, such as
PPS (Pay Per Share), PPLNS (Pay Per Last N Shares). To sim-
plify the model, we consider that the mining reward of the
mining pool is allocated according to the proportion of miners’
hash rates in the mining pool. Then the expected payoff of a
miner in pool i can be expressed as
yiðrrÞ ¼ Yi
Nri
� pvi
¼ Rxi
Nri
1�ð1� uÞP uncle
i
� �� pvi
¼ Rxi
Nri
1�ð1�uÞ 1� e��tðsÞ
2
X
j 6¼i
xjð1� xi þ xjÞ
 !
� pvi:
(2)
Following the evolutionary game theory, we use the replicator
dynamics to express the evolution dynamics, which can
approximate the dynamic competitive mining pool selection
behaviors of the miners from the whole population perspective
Fig. 4. Reward ratios for mining pools. a)Reward ratios for different network delay �tðsÞ with u ¼ 0. b) Reward ratios for different uncle reward u with
�tðsÞ ¼ 0:2. c) Reward ratios for the growing hash rates with u ¼ 7=8 and �tðsÞ ¼ 0:2.
Fig. 5. Block statistics in Ethereum. a)Uncle rates of miners for blocks 1-1920000. b)Fork rates of miners for blocks 1-1920000. c) Fail rates of miners for
blocks 1-1920000.
406 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
[25]. Mathematically, the replicator dynamics of mining pool
population changing can be expressed as the following ordi-
nary differential equations, i.e.,
_riðtÞ¼fiðrrðtÞÞ¼riðtÞ yiðrrðtÞÞ � �yðrrðtÞÞð Þ; (3)
where _riðtÞ , drðtÞ
dt is the growth rate of the mining pool i, and
�yðrrÞ ¼PM
i¼1 yiðrrÞri denotes the average payoff of all the min-
ers in the blockchain system. Let yðrÞ ¼ ½y1ðrÞ; . . . ; yMðrÞ�>
denote payoff vector for all the mining pools at time t. Intui-
tively, replicator dynamics in (3) can capture the fact that the
miner population of a mining pool that outperforms the aver-
age will increase (with the growing rate proportional to its
advantage), while the population of a poorly-performed min-
ing poor gradually decreases.
We then define the evolution equilibrium of the mining pool
evolutionary game above. Suppose that there exists another
population state r
0
trying to “invade” (or substitute) the state
r� as the equilibrium state by attracting a small share � 2
ð0; 1Þ in the population of miners to switch to r
0
. Then, r� is an
Evolution Stable Strategy (ESS) if the following condition
holds for all � 2 ð0; ��Þ [25], [26]:
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ >
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ: (4)
Indeed, ESS does not necessarily exist. It is useful to look for
neutrally stable strategies when there is no ESS [27]. r� is a
Neutrally Stable Strategy (NSS) if the following condition
holds for all � 2 ð0; ��Þ
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ �
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ: (5)
Intuitively, the ESS (NSS) presents the convergent stable
states for the mining pool evolution dynamics. ESS (NSS) is a
best reply to itself and a (weakly) better reply to all other best
replies than these are to themselves [28]. Furthermore, ESS
implies asymptotic stability in the replicator dynamics [29] and
NSS implies Lyapunov stability [30], [31]. The evolution equi-
librium is said to be Lyapunov stable if no small disturbances
can bring it to move far away, and asymptotic stability implies
stronger stability such that the population will eventually return
to the equilibrium when experiencing small disturbances.
Therefore, an ESS (NSS) has the property that the miners at the
equilibrium can achieve the stable mutually-satisfactory states
without incentives to deviate and meanwhile is robust to small
perturbations by some miners’ random or irrational deviating
behaviors.
B. Equilibrium Analysis
We first study the case of M mining pools with the same
hash rate specifications for each miner, i.e., v1 ¼ 	 	 	 ¼ vM ¼
v. We can obtain Theorem 2 as follows.
Theorem 2: For the mining pools with the same hash rate
specifications, i.e., v1 ¼ 	 	 	 ¼ vM ¼ v, the ESSs of the game
always exist, and the ESSs of the game are r ¼ ei; i 2M ¼
f1; . . . ;Mg, where ei is a vector whose i-th component is 1,
and the remaining components are 0, i.e., ei ¼ ½0 	 	 	 1 	 	 	 0�T .
The proof is given in Appendix C. Theorem 2 shows that a
single hash rate specification of all the pools will lead to the
centralization trend of the miner population in the blockchain
system. Therefore, we have
Insight 4: The diversity of hash rates (e.g., with different
mining equipment, such as CPU, GPU, FPGA, ASIC, etc.) in
the blockchain system is more conducive to decentralization.
We next consider the case of two mining pools with unequal
hash rate specifications, and denote the equilibrium population
states of these two pools as ðr�; 1� r�Þ for simplicity. We
obtain the results as follows.
Theorem 3: For the mining game of two mining pools with
unequal hash rate specifications v1;v2 (v1 > v2 > 0), the
ESS of the game always exists.
(1) The ESS of the game is r� ¼ 1, when
pNv1 < Rþ R 1� e��tðsÞ
� �
v2ð1� uÞ
v1 � v2
: (6)
(2) The ESS of the game is r� ¼ 0, when
pNv2 > R� R 1� e��tðsÞ
� �
v1ð1� uÞ
v1 � v2
: (7)
(3) When
pNv1 � Rþ R 1�e��tðsÞð Þv2ð1�uÞ
v1�v2 ;
pNv2 � R� R 1�e��tðsÞð Þv1ð1�uÞ
v1�v2 ;
8<
:
the ESS of the game r� can be obtained by solving the follow-
ing cubic equation with the constraint that r 2 ð0; 1Þ
ar3 þ br2 þ crþ d ¼ 0;
where
a ¼ Npðv1 � v2Þ4;
b ¼ Rðv1 � v2Þ3 þ Rð1�e��tðsÞÞð1�uÞv1v2ðv1 � v2Þ
�3Npv2ðv1 � v2Þ3;
c ¼ 2Rv2ðv1 � v2Þ2 þ 2Rð1� e��tðsÞÞð1� uÞv1v
2
2
�3Npv2
2ðv1 � v2Þ2;
d ¼�v2
2ðRð1�e��tðsÞÞð1�uÞv1�ðR�Npv2Þðv1�v2Þ:
8>>>>>><
>>>>>>:
TABLE II
BLOCK STATISTICS IN ETHEREUM SEGREGATING BY MINING POOL SIZES
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 407
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
The proof is given in Appendix D. From Theorem 3, we
find that the mining pool with a larger hash rate specification
will dominate the blockchain system, when the mining reward
R is large enough or the hash rate specifications of the mining
pools are close enough (i.e., v1 � v2 small enough). Second,
we also see that given a fixed mining reward R, reducing the
block generation speed � or the network propagation delay
tðsÞ can help to reduce the possibility that only one mining
pool dominates at the equilibrium (i.e., cases (1) and (2) in
Theorem 3). This would help to maintain the degree of decen-
tralization in blockchain system. Last but not least, such obser-
vation also holds when increasing the uncle reward ratio u. We
further derive the closed-form result for the case that uncle
reward ratio is sufficiently large (i.e., u! 1) in Theorem 4.
Theorem 4: For the mining game of two mining pools with
unequal hash rate specifications v1;v2 (v1 > v2), if the uncle
reward u! 1, the ESS of the game always exists.
1) The ESS of the game is r� ¼ 1, if R � pNv1.
2) The ESS of the game is r� ¼ 0, if R � pNv2.
3) The ESS of the game is r� ¼ R�v2pN
pNðv1�v2Þ if pNv2 <
R < pNv1.
The proof is given in Appendix E. From Theorem 4, we find
that when the uncle reward is large enough, under the condi-
tion that the mining reward R is modest, i.e., pNv2 < R <
pNv1, then none of the mining pool will be able to dominate
the system.
For a more general case with multiple pools, we can show
the following results.
Theorem 5: For the mining game of M mining pools with
unequal hash rate specifications, namely, v1; . . . ;vM
(v1 > v2 > 	 	 	 > vM), if the network propagation time is
negligible, i.e., tðsÞ ¼ 0, or the uncle reward is large enough,
i.e., u ¼ 1, the NSSs of the game always exist.
(1) When R � pNv1, the ESS of the game is r� ¼
½r1 	 	 	 rM �, where r1 ¼ 1 and rj ¼ 0; 8j 2 f2; . . . ;Mg.
(2) When R � pNvM , the ESS of the game is r� ¼
½r1 	 	 	 rM �, where rM ¼ 1 and rj ¼ 0; 8j 2 f1; . . . ;M � 1g.
(3) When pNvM < R < pNv1, D
NSS ¼ fr�jPM
i¼1 r
�
ivi ¼
R
pN ; r� 2 Dg is the set of NSSs of the game. Moreover,
fr�jr�i > 0; 8i 2 f1; . . . ;Mg and r� 2 DNSSg are the asymp-
totically stable states of the replicator dynamics system.
The proof is given in Appendix F. Theorem 5 reveals the
convergent stable states for the mining pool evolution dynam-
ics when the uncle reward is large enough (i.e., u ¼ 1). We
find that when the uncle reward is large enough, under the
condition that the mining reward R is modest, i.e., pNvM <
R < pNv1, then none of the mining pool will be able to dom-
inate the system. Additionally, in this regime there are infinite
NSSs and asymptotically stable states of the game, and the
convergent equilibriums of mining pools will depend on the
initial population states.
Combining Theorem 3, Theorem 4 and Theorem 5, we have
the following insight.
Insight 5: The disproportionate mining reward caused by
temporary fork positively impacts the degree of centraliza-
tion of the blockchain network. While a higher uncle block
reward helps to maintain the decentralization of the block-
chain network.
C. Numerical Experiments
In this section, we conduct numerical simulations and eval-
uate the evolution equilibrium of the mining pools in different
situations. We first consider a blockchain network with N ¼
5000 individual miners, which evolve to form two mining
pools (i.e., M ¼ 2), noted as A;B. For the purpose of demon-
stration, we set the block generation parameters as � ¼
1=10; R ¼ 1200; p ¼ 0:01. We also set the initial population
state as r ¼ ½0:6; 0:4�. We first consider that the two pools
adopt different computation power specifications, v1 ¼ 30;
v2 ¼ 20.
Figure 6 demonstrates the evolution process of the mining
pools driven by the replicator dynamics with network propaga-
tion delay tðsÞ ¼ 0:5. Figure 6 (a) shows that if there is no
uncle block reward, i.e., u ¼ 0, the number of miners in the
mining pool B will exceed more than 65% of the total popula-
tion. Figure 6 (b) shows that when considering uncle block
reward, i.e., u ¼ 0:5, the system will be less centralized.
Figure 7 shows the similar results but with network propagation
delay tðsÞ ¼ 1. According to Figure 7 (a), we find that when
network propagation delay is large, the degree of centralization
of the blockchain system will be higher, but when increasing
the uncle block reward, the system will be less centralized.
Fig. 6. Evolution of the miner’s population states over time with propaga-
tion delay tðsÞ ¼ 0:5. a) mining without uncle block reward. b) mining with
uncle block reward u ¼ 0:5.
Fig. 7. Evolution of the miner’s population states over time with propagation
delay tðsÞ ¼ 1. a)mining without uncle block reward. b) mining with uncle
block reward u ¼ 0:5.
408 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
Additionally, we consider a more general situation with
four mining pools, noted as A;B;C;D, where each pool
adopts different requirements on the hash rate specifications
as v1 ¼ 40;v2 ¼ 30;v3 ¼ 20;v4 ¼ 10 with initial population
state as rr ¼ ½0:1; 0:2; 0:3; 0:4�, evolves in the blockchain net-
work with � ¼ 1=10; tðsÞ ¼ 1; R ¼ 1500; N ¼ 5000; p ¼
0:015. The evolution of miner population states is presented in
Figure 8. In the Figure 8 (a), we observe that when the miners’
pool-selection strategies converge to the equilibrium, the min-
ing pool B strictly dominates. But when adopting uncle
reward with u ¼ 7=8, none of the mining pools can strictly
dominate the blockchain network, which again shows that
uncle block reward helps to impove the degree of decentrali-
zation of the blockchain network. Furthermore, when the
uncle block reward is large enough, i.e., u ! 1, the mining
pools will evolve to the convergent stable state shown in
Figure 8 (c), and the mining power distribution at the stable
state is shown in Figure 8 (d).
Finally, we analyze the influence of the network delay and
uncle block reward on the evolution of the mining pools.
Figure 9 shows the equilibrium state of two competing pools
with different network delay t and uncle block reward u. We
find that as the delay of the network propagation increases, the
degree of centralization of the system will also increase until
one mining pool will dominate the whole blockchain system.
As shown in Figure 9, when t is less than an observed thresh-
old t�, as the network propagation time t increases, miners
will tend to join the pool with a smaller hash rate specification.
However, when the propagation delay is very large, i.e., t >
t�, the mining pool with a larger hash rate initially will
dominate. This is mainly because a larger delay will lead to a
higher probability of temporary fork, which will trap the min-
ing pools with smaller hash rates at a disadvantage in the com-
petition. In addition, Figure 9 shows that the uncle block
reward can greatly reduce the impact of temporary forks
caused by network propagation delay. When the uncle block
reward is large enough, i.e., u! 1, the effect of network prop-
agation delay is negligible, thus the decentralization of the
blockchain system will be maintained.
D. Distributions of Mining Power in Realistic Blockchain
Systems
In this subsection, we analyze the distributions of comput-
ing power in existing typical blockchain systems, namely,
Masari (MSR), Ethereum (ETH), Bitcoin (BTC) and Bitcoin
Cash (BCH), which verifies the rationality of the previous the-
orems in this section.
Bitcoin and Ethereum are two of the leading cryptocurren-
cies with the largest market capitalization and user popula-
tions [32]. Bitcoin’s block generation interval is about 10
minutes [1], while Ethereum’s block generation interval is
about 10-20 seconds [13]. A significant difference between
Ethereum and Bitcoin is that Ethereum uses the GHOST pro-
tocol, which has uncle block reward. Bitcoin Cash (BCH) [33]
is a new chain generated by Bitcoin due to the hard fork. One
of the significant differences between BCH and BTC is that
BCH expands its block size, and BCH can support a larger
block size than that in BTC. Because the uncle block reward
in Ethereum may lead to the behavior of uncle mining, Masari
Fig. 8. Evolution of four mining pools. a) mining without uncle block reward. b) mining with uncle block reward u ¼ 7=8. c) mining with uncle block reward
u! 1. d) mining power distribution when u! 1.
Fig. 9. The convergent stable state with different network delay t and uncle block reward u.
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 409
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
(MSR) uses the SECOR protocol [34] to avoid uncle mining
by reducing uncle reward. Specifically, the uncle block reward
in Ethereum is 7/8 of the basis block reward, while the uncle
block reward in MSR is 1/2 of the basis block reward.
To better measure the degree of centralization of the block-
chain, we introduce the Gini coefficient [35], a single number
aimed at measuring the degree of inequality in a distribution,
which is widely used in economics to measure the inequality
among values of a frequency distribution, e.g., levels of
income. Based on the mathematical definition of the Gini
coefficient, the degree of centralization of the blockchain with
M mining pools is given by:
G ¼
PM
i¼1
PM
j¼1 jxi � xjj
2M
PM
i¼1 xi
¼
PM
i¼1
PM
j¼1 jxi � xjj
2M2 �x
;
where xi denotes the normalized hash rate of the mining
pool i.
The greater value of the Gini coefficient implies that the
blockchain system is more centralized. The degree of centrali-
zation (the Gini coefficient) of the blockchain can theoretically
range from 0 (complete equality or complete decentralization,
i.e., the mining power of each mining pool is equal) to 1 (com-
plete inequality or complete centralization, i.e., all the miners
join one of the mining pools while the remaining pools are
without any mining power). These properties greatly support
that the Gini coefficient above can well measure the degree of
centralization of the blockchain.
Figure 10 (a) shows the distribution of hash rates in the top
10 mining pools (which occupy more than 90% of the total
computing power) in Masari (MSR), Ethereum (ETH), Bitcoin
Cash (BCH) and Bitcoin (BTC), respectively. Furthermore, to
better measure the degree of centralization in these block-
chains, we calculate the Gini coefficient of different block-
chain systems using the distribution of hash rates in the top 10
mining pools. As shown in Figure 10 (b), the calculated Gini
coefficients of MSR, ETH, BCH and BTC are correspondingly
0.67, 0.54, 0.42 and 0.29. We can find that the order of the
degree of centralization of the blockchain systems from high
to low is MSR > ETH > BCH > BTC.
According to our analysis above, increasing the uncle
reward can increase the degree of decentralization of the sys-
tem, and the uncle reward in MSR is smaller than that in ETH,
so the centralization degree of MSR is greater than that in
ETH. Although there are uncle rewards in ETH and MSR to
reduce the impact of temporary forks, the block production
speeds of ETH and MSR are much faster than that of BTC and
BCH, leading to more significant advantages for large ETH
and MSR mining pools in getting rewards. Therefore, ETH
and MSR tend to be more centralized than BTC and BCH.
Since the block size s in BCH is larger than that in BTC, the
network delay tðsÞ of BCH is larger than that of BTC, thus
the hash rate in BCH is more concentrated. These demonstrate
that our models can provide useful insights for practical block-
chain systems.
IV. RELATED WORK
There has been a rich body of previous work on blockchain
network and mining pool. In the following, we introduce
related work regarding temporary fork, game theory, the
impact of uncle block rewards and the decentralization in
blockchain networks, respectively.
Temporary Fork in Blockchain Networks. Due to the net-
work propagation delay, blockchain networks may face
inconsistencies in form of temporary forks. There are several
papers studying the delay and temporary fork in blockchain
networks from a networking perspective. In [12], authors
analyze Bitcoin from a networking perspective and show that
the propagation delay in the network is the primary cause for
blockchain forks. Literature [9] provides an empirical analy-
sis of the announcement and propagation of Bitcoin blocks
that caused blockchain forks. Authors in [36] analyze the
blockchain protocol in asynchronous networks. In [37],
authors model the Bitcoin consensus and network protocols
to develop the theoretical analysis for fork in Bitcoin net-
work. In [38], authors try to reduce forks in the blockchain
via probabilistic verification. Nevertheless, existing research
efforts mainly focus on the impacting factors from the block-
chain system point of view such as block size and network
propagation delay. Along a different line from the previous
work, we focus on the computing power perspective and pro-
pose a detailed model of temporary fork with heterogeneous
computing power.
Game Theory in Blockchain Networks. Blockchain is a dis-
tributed, decentralized, public ledger. Due to the decentraliza-
tion of the blockchain network, game theory [26] is an ideal
modeling tool to analyze the interactions within the block-
chain network [39], where evolutionary games [31] can be
used to analyzing the dynamic interactions and the evolution
of the blockchain networks. The evolutionary game for con-
sensus provision in blockchain networks with shards is investi-
gated in [40]. Literature [41] proposes an evolutionary game
theoretical analysis on block withholding attack in PoW
blockchain.
A closely related work [25] develops an evolutionary game
to study the dynamic process of mining pool selection. It is
worth noting that our work substantially differs from and com-
plements to [25] in the following aspects: 1) We propose a
detailed mathematical model to characterize the impact of
Fig. 10. Distributions of mining power in four major blockchains. a) Distri-
butions of mining power in MSR, ETH, BCH and BTC. b) Gini coefficients of
different blockchain systems.
410 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
computing power competition of the mining pools on the tem-
porary fork; 2) We investigate the impact of uncle block
reward; 3) The mining game in [25] is “fair”, while the mining
game in our model can be “unfair” under the impact of tempo-
rary fork. Thus we obtain different results from [25]; 4) We
investigate the ESS and NSS of the mining game and provide
theoretical analysis for a more challenging but general sce-
nario with M mining pools; 5) We obtain several key insights
of mining reward and centralization through realistic data
based evaluations.
Impact of Uncle Block Rewards. In Ethereum, stale blocks
do not have to be discarded but can be referenced as uncle
blocks yielding a partial reward called uncle block reward.
Several papers have discussed the impact of uncle block
reward. In [42], authors investigate the impact of uncle
rewards on selfish mining in Ethereum. In [43], the author pro-
poses the uncle mining problem, which is an Ethereum con-
sensus protocol flaw. Authors in [44] evaluate the impact of
uncle block reward in block withholding attack. In [45], an
evaluation of uncle block mechanism effect on Ethereum self-
ish and stubborn mining combined with an eclipse attack is
presented. However, there is few works about the impact of
uncle block reward on the evolution of mining pools and the
degree of decentralization. Different from previous work, we
investigate the impact of uncle block reward from another
perspective.
Decentralization in Blockchain Networks. Decentralization
is an important feature of the permissionless blockchain net-
work. Many blockchain-based applications greatly depend
on dencetralization [46]–[48]. There are a few papers study-
ing the decentralization of the blockchain networks. In [49],
authors study the centralization and decentralization forces
in the creation and competition of mining pools in game the-
oretical approach. Literature [50] shows that decentralization
is vulnerable under the gap game. In [51], authors show that
it is impossible to achieve full decentralization in permis-
sionless blockchain networks. In [52], a novel blockchain
consensus protocol is proposed based on game theory and
randomness to achieve true decentralization. Literature [53]
presents an information entropy method to quantify the
degrees of decentralization for blockchain systems. Litera-
ture [7] explores the decentralization in Bitcoin and Ether-
eum networks based on various decentralization metrics and
shows that Ethereum is more centralized than Bitcoin, which
is indeed consistent with our theoretical analysis. Distinct
from the previous work, we study the decentralization of the
blockchain networks through the evolutionary game frame-
work and investigate the degree of decentralization under
different system settings.
Generally speaking, previous works neglect the dispropor-
tionate mining reward of different mining pools caused by the
temporary fork phenomenon in the blockchain. Along a differ-
ent line from the previous researches, we propose a detailed
model of the temporary fork phenomenon in the blockchain
network and further investigate the evolution of mining pools
and the degree of decentralization based on the evolutionary
game theory framework.
V. CONCLUSION
In this paper, we propose a detailed model of the temporary
fork in the blockchain. Combining the mining reward analysis
based on the temporary fork model, we find that the mining
rewards of the mining pools are disproportionate to their hash
rates. Also, the effect of uncle block reward is investigated.
Moreover, the evolutionary game of the mining pool evolution
under temporary fork is studied. We theoretically characterize
the set of convergent stable states of the evolutionary game,
which reveal the long-term trends on the degree of centraliza-
tion of computing power in the blockchain. The effectiveness of
our models for providing useful insights is corroborated by both
numerical simulations and realistic blockchain data analysis.
For the future study, we are going to integrate other realistic
yet challenging factors such as selfish mining and double
spending attacks into our model analysis.
ACKNOWLEDGMENT
This work was supported in part by the National Science Founda-
tion of China (No. U1711265, No. 61972432); the Program for
Guangdong Introducing Innovative and Entrepreneurial Teams
(No. 2017ZT07X355); the Pearl River Talent Recruitment Pro-
gram (No. 2017GC010465); Guangdong Special Support Pro-
gram (No. 2017TX04X148).
APPENDIX A
ANALYSIS OF BRANCHES IN TEMPORARY FORK
In this section, we look insight into the branches in tempo-
rary fork and show that the case with two competing branches
is a good approximation. After considering the mining process
as a Poisson process with the average block production rate �
in section 2.1, based on the property of Poisson process, the
probability of generating new blocks during the block confir-
mation period can be formulated as
PD
n�1 ¼ 1� e��tðsÞ:
And the probability of generating exactly one block during the
block confirmation period is
PD
n¼1 ¼ �tðsÞe��tðsÞ:
Therefore, under the condition of generating new blocks dur-
ing the block confirmation period, the probability of generat-
ing exactly one block can be calculated according to the
property of conditional probability as follows:
P ð�tðsÞÞ ¼ PD
n¼1
PD
n�1
¼ �tðsÞe��tðsÞ
1� e��tðsÞ
:
As mentioned above in section 2.2, we usually have tðsÞ < T
in the realistic blockchain networks and it implies �tðsÞ < 1.
Indeed, the probability function P ð�tðsÞÞ is monotonically
decreasing as �tðsÞ increases. When �tðsÞ ¼ 0, P ð�tðsÞÞ ¼
1, and even �tðsÞ ¼ 1, P ð�tðsÞÞ > 0:5. Therefore, when tem-
porary fork happens, the chain is most likely to be forked into
two competing branches, which shows that the case with two
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 411
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
branches is a good approximation to provide useful insights.
Here, we further investigate the temporary fork phenomenon in
realistic blockchain systems. In Bitcoin, the frequency of tem-
porary fork is low, and the temporary fork will always lead to
two competing branches [32]. Besides, we collect and analyze
data for the first 1,920,000 blocks of the Ethereum blockchain.
As shown in Figure 11, we find that the ratio of temporary fork
in the first 1,920,000 blocks of the Ethereum blockchain is
7.4%, and that most of the temporary forks lead to two compet-
ing branches, which accounts for 95% of the total, and the tem-
porary forks with three competing branches are rare, which
only accounts for 5%. All in all, the practical insight in realistic
blockchain systems is consistent with the theoretical analysis
above, which further illustrates the good approximation of con-
sidering the case with two branches.
APPENDIX B
PROOF OF THEOREM 1
The expected mining reward of the mining pool i can be
expressed as
Yi ¼ Pmine a block
i P uncle
i � uRþ ð1� P uncle
i Þ �R� �
¼ xiRð1� ð1� uÞP uncle
i Þ;
where the probability of mining a block is proportional to its
hash rate (i.e., Pmine a block
i ¼ xi), and the probability for the
mining pool i to mine a uncle block, P uncle
i is formulated in (5).
APPENDIX C
PROOF OF THEOREM 2
Since v1 ¼ 	 	 	 ¼ vM ¼ v, we obtain that xi ¼ ri. There-
fore, a miner’s expected payoff in pool i in (2) can be simpli-
fied as
yiðrrÞ ¼ R
N
1� ð1� uÞ 1� e��tðsÞ
2
ð1� riÞ
� �
� pv
¼ R
N
1� e��tðsÞ
2
ð1� uÞri þ R
N
� ð1� uÞ 1� e��tðsÞ
2
R
N
� pv
¼ ari þ b;
where a ¼ R
N
1�e��tðsÞ
2 ð1� uÞ and b ¼ R
N � ð1� uÞ 1�e��tðsÞ2
R
N � pv.
It is clear that ei; i 2M ¼ f1; . . . ;Mg are the rest
points of ODEs, where ei is a vector whose i-th compo-
nent is 1, and the remaining components are 0, i.e., ei ¼
½0 	 	 	 1 	 	 	 0�T , and here we are going to show that they are
the ESSs of the game.
Without loss of generality, we will prove that ee1 is an
ESS of the game. To prove ei; i 2M are the ESSs of the
game, we need to show that ei; 8i 2 M satisfies the condi-
tion (4). Without loss of generality, we will prove that e1
is an ESS of the game. Let r� ¼ e1. Suppose that there
exists another population state r0 trying to invade the state
r� by attracting a small share � 2 ð0; ��Þ in the population
of miners to switch to r0. According to condition (4),
we need to prove that 9�� 2 ð0; 1Þ, s.t., 8� 2 ð0; ��Þ; 8r0 2 D
we have
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ �
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ:
Let r� ¼ ee1. Suppose that there exists another population state
r0 trying to invade state r� by attracting a small share � 2 ð0; ��Þ
in the population of miners to switch to r0. Since r� ¼ e1, i.e.,
r�1 ¼ 1 and r�j ¼ 0; j ¼ 2; 3; . . . ;M, we have
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ
¼ r�1y1 ð1� �Þ
1
0
..
.
0
2
66664
3
77775þ �
r01
r02
..
.
r0M
2
66664
3
77775
0
BBBB@
1
CCCCA
¼ aðð1� �Þ þ �r01Þ þ b:
Similarly, we have
X
i2M
r0iyi ð1� �Þr� þ �r0ð Þ
¼
X
i2M
r0iyi ð1� �Þ
1
0
..
.
0
2
66664
3
77775þ �
r01
r02
..
.
r0M
2
66664
3
77775
0
BBBB@
1
CCCCA
¼ r01 að1� �þ �r01Þ þ b
� �þXM
i¼2
r0iða�r0i þ bÞ
¼ ar01 � a�r01 þ a�
XM
i¼1
r0i
2 þ b
XM
i¼1
ri
Fig. 11. Illustration of Temporary Fork. (a) Frequency of temporary fork in
Ethereum. (b) Number of branches in temporary fork
412 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
Take �� ¼ 1=2, 8� 2 ð0; ��Þ, we have thatX
i2M
r�i yi ð1� �Þr� þ �r0ð Þ �
X
i2M
r0iyi ð1� �Þr� þ �r0ð Þ
¼ a� a�ð1� r01Þ þ b
� �� ar01 � a�r01 þ bþ a�
XM
i¼1
r0i
2
 !
¼ að1� r0iÞ � � a� 2ar01 þ a
XM
i¼1
r0i
2
 !
>að1� r01Þ � 2a�ð1� r01Þ
> 0:
Therefore, e1 is an ESS of the game. Similarly, ei; i 2
f1; . . . ;Mg are ESSs of the game. Moreover, we will prove
that ei; i 2 f1; . . . ;Mg are the only possible ESSs of the
system.
Suppose that r ¼ ½r1 	 	 	 rM �T , with at least two non-zero
components, i.e., i 6¼ j and ; ri � rj > 0. We will show that r
is not an ESS of the system.
To show that r is not an ESS of the system, we need to
prove 8�� 2 ð0; 1Þ, 8� 2 ð0; ��Þ, 9r0 2 D, s.t., we have
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ <
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ:
Let r0 ¼ ½r01 	 	 	 r0M �, where r0k ¼ rk; 8k 6¼ i; k 6¼ j, and r0i ¼
ri þ �, r0j ¼ rj � �, and � 2 ð0;minfri; rjgÞ. Therefore, we
have X
i2M
riyi ð1� �Þrþ �r0ð Þ �
X
i2M
r0iyi ð1� �Þrþ �r0ð Þ
¼
X
i2M
ri � r0i
� �
yi ð1� �Þrþ �r0ð Þ
¼
X
i2M
ri � r0i
� �
yi ð1� �Þ
r1
..
.
ri
..
.
rj
..
.
rM
2
666666666666664
3
777777777777775
þ �
r1
..
.
ri þ �
..
.
rj � �
..
.
rM
2
666666666666664
3
777777777777775
0
BBBBBBBBBBBBBB@
1
CCCCCCCCCCCCCCA
¼ � yj ð1� �Þrþ �r0ð Þ � yi ð1� �Þrþ �r0ð Þ� �
¼ � ðaðrj � ��Þ þ bÞ � ðaðri þ ��Þ þ bÞ� �
¼ � aðrj � riÞ � 2a��
� �
< 0;
which contradicts to (4), thus it is not an ESS of the system.
Then, the proof of Theorem 2 is completed.
APPENDIX D
PROOF OF THEOREM 3
A miner’s expected payoff in pool i 2 f1; 2g can be
expressed as
y1ðrrÞ¼ 1
Nr1
aR 1� ð1� e��tðsÞÞð1� aÞ2ð1� uÞ
� �
� pv1;
y2ðrrÞ¼ 1
Nr2
ð1� aÞR 1� ð1� e��tðsÞÞa2ð1� uÞ� �� pv2;
8<
:
where a ¼ v1r1=ðv1r1 þ v2r2Þ.
Using the constraint r1 þ r2 ¼ 1, we introduce a reduced
state r and reduce the ODEs in (3) to a single equation.
_rðtÞ ¼ fðrðtÞÞ ¼ rðtÞ yðrðtÞÞ � �yðrðtÞÞð Þ; (8)
where
r1 ¼ r;
r2 ¼ 1� r;
yðrðtÞÞ ¼ y1ðrrÞ;
�yðrðtÞÞ ¼ r1ðtÞy1ðrÞ þ r2ðtÞy2ðrÞ:
8>><
>>:
To solve the ODE (8), we need to solve either rðtÞ ¼ 0 or
y1ðrrðtÞ;vvÞ � y2ðrrðtÞ;vvÞ ¼ 0.
Indeed, We can easily obtain two rest points of the ODEs,
f0; 1g.
For the above two-strategy pairwise-contest game, r� is an
ESS if and only if it is an asymptotically stable fixed point in
the replicator dynamics of the equation (8). Since the replica-
tor dynamics (8) is continuous-time, r� is asymptotically sta-
ble fixed point if
@ _rðr�Þ
@r < 0. When r� ¼ 1, we obtain that
@ _r
@r
ðr�Þ¼ pv1 � pv2 � R
N
þ Rv2
Nv1
þR 1� e��tðsÞ
� �
v2ðu � 1Þ
Nv1
:
Thus r� ¼ 1 is an ESS when
pNv1 < Rþ R 1� e��tðsÞ
� �
v2ð1� uÞ
v1 � v2
:
When r� ¼ 0, we obtain that
@ _r
@r
ðr�Þ ¼ pv2 � pv1 � R
N
þ Rv1
Nv2
þ R 1� e��tðsÞ
� �
v2ðu � 1Þ
Nv2
:
Thus r� ¼ 0 is an ESS when
pNv2 > R� R 1� e��tðsÞ
� �
v1ð1� uÞ
v1 � v2
:
Other possible fixed points of the ODEs can be obtained by
solving the equation y1ðrÞ � y2ðrÞ ¼ 0, which is equivalent to
solving the following cubic equation.
ar3 þ br2 þ crþ d ¼ 0; (9)
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 413
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
where
a ¼ Npðv1 � v2Þ4;
b ¼ Rðv1 � v2Þ3 þ Rð1� e��tðsÞÞð1� uÞv1v2ðv1 � v2Þ
�3Npv2ðv1 � v2Þ3;
c ¼ 2Rv2ðv1 � v2Þ2 þ 2Rð1� e��tðsÞÞð1� uÞv1v
2
2
�3Npv2
2ðv1 � v2Þ2;
d ¼ �v2
2ðRð1�e��tðsÞÞð1�uÞv1�ðR�Npv2Þðv1�v2Þ:
8>>>>>><
>>>>>>:
Indeed, 9r� 2 ½0; 1�, s.t., y1ðr�Þ ¼ y2ðr�Þ and r� is an
asymptotically stable fixed point of the replicator dynamics
under the following conditions
pNv1 � Rþ R 1�e��tðsÞð Þv2ð1�uÞ
v1�v2 ;
pNv2 � R� R 1�e��tðsÞð Þv1ð1�uÞ
v1�v2 ;
8<
:
Denote hðrÞ ¼ y1ðrÞ � y2ðrÞ, then we have
hð0Þ ¼ pv1 � pv2 þ R
N � Rv1
Nv2
� R 1�e��tðsÞð Þv2ðu�1Þ
Nv2
� 0;
hð1Þ ¼ pv1 � pv2 � R
N þ Rv2
Nv1
þ R 1�e��tðsÞð Þv2ðu�1Þ
Nv1
� 0:
8<
:
Then, according to the intermediate value theorem, we have
9r� 2 ½0; 1�, s.t. hðr�Þ ¼ 0 and hðkÞðr�Þ � 0; 8k 2 f1; 2; 	 	 	g,
which hðkÞ denotes the k-th derivative of hðrÞ. Moreover, we
have
@ _r
@r
ðr�Þ ¼ y1 � �yþ r1
@y1
@r1
� @�y
@r1
� �
¼ ð1� r�Þ @y1
@r
ðr�Þ � @y2
@r
ðr�Þ
� �
¼ ð1� r�1Þh0ðr�Þ � 0
Above all, r� is an asymptotically stable fixed point of the
replicator dynamics, thus an ESS of the game.
APPENDIX E
PROOF OF THEOREM 4
When the uncle block reward is large enough, i.e., u ! 1,
according to the condition in (6) (7), we obtain that the ESS of
the game is r� ¼ 1, if R � pNv1 and that the ESS of the
game is r� ¼ 0, if R � pNv2
When u ! 1, the solution of the cubic equation in (9) is
r� ¼ R�v2pN
pNðv1�v2Þ and we have that
@ _r
r
ðr�Þ ¼ ðR�Npv1ÞðR�Npv2Þ
NR
þ ð1� uÞhðr�Þ
where
hðr�Þ¼ð1�e
��tðsÞÞN2p3v2
1v
2
2
R3ðv1�v2Þ2
ð2Rv1þ2Rv2�3Npv1v2
þR4Þ
Therefore, when u! 1, we have @ _r
r ðr�Þ < 0. r� is asymptoti-
cally stable point of the ode, thus is an ESS of the system.
APPENDIX F
PROOF OF THEOREM 5
The miner expected reward in mining pool i in (2) can be
rewritten as follows.
yi ¼ Rvi
N
PM
k¼1 vkrk
� pvi þ ð1� uÞ 1� e��tðsÞ
2
gðrr;vvÞ
where
gðrrÞ ¼ �Rxi
Nri
X
j 6¼i
xjð1� xi þ xjÞ
 !
Therefore, if the network propagation time is negligible, i.e.,
tðsÞ ¼ 0, or the uncle reward is large enough, i.e., u ¼ 1, the
miner expected reward in mining pool i can be expressed as
yi ¼ Rvi
N
PM
k¼1 vkrk
� pvi
F.1 Proof for the Case R � pNv1
Let r� ¼ ½r�1 	 	 	 r�M �, where r�1 ¼ 1 and r�j ¼ 0; 8j 2
f2; . . . ;Mg. Suppose that there exists another population state
r0 trying to invade state r� by attracting a small share � 2 ð0; ��Þ
in the population of miners to switch to r0, then we have
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ �
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ
¼
XM
i¼1
ðr�i � r0iÞyi ð1� �Þr� þ �r0ð Þ
¼ Rv1
N ð1� �Þv1 þ �
PM
k¼1 vkr
0
k
� �� pv1
�
XM
i¼1
r0i
Rvi
N ð1� �Þv1 þ �
PM
k¼1 vir0i
� �� pvi
0
@
1
A
¼ R
N
v1 �
PM
i¼1 vir
0
i
ð1� �Þv1 þ �
PM
k¼1 vir0i
� p v1 �
XM
i¼1
vir
0
i
 !
¼ v1 �
XM
i¼1
vir
0
i
 !
R
N ð1� �Þv1 þ �
PM
k¼1 vkr0k
� �� p
0
@
1
A
� v1 �
XM
i¼1
vir
0
i
 !
pv1
ð1� �Þv1 þ �
PM
k¼1 vkr0k
� �� p
0
@
1
A
> 0:
Thus, r� is an ESS of the game.
414 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
F.2 Proof for the Case R � pNvM
Let r� ¼ ½r�1 	 	 	 r�M �, where r�M ¼ 1 and r�j ¼ 0;8j 2
f1; . . . ;M � 1g. Suppose that there exists another population
state r0 trying to invade state r� by attracting a small share � 2
ð0; ��Þ in the population of miners to switch to r0, then we have
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ �
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ
¼
XM
i¼1
ðr�i � r0iÞyi ð1� �Þrþ �r0ð Þ
¼ RvM
N ð1� �ÞvM þ �
PM
k¼1 vkr
0
k
� �� pvM
�
XM
i¼1
r0i
Rvi
N ð1� �ÞvM þ �
PM
k¼1 vir
0
i
� �� pvi
0
@
1
A
¼ R
N
vM �
PM
i¼1 vir
0
i
ð1� �ÞvM þ �
PM
k¼1 vir
0
i
� p vM �
XM
i¼1
vir
0
i
 !
¼ vM �
XM
i¼1
vir
0
i
 !
R
N ð1� �ÞvM þ �
PM
k¼1 vkr
0
k
� �� p
0
@
1
A
� vM �
XM
i¼1
vir
0
i
 !
pvM
ð1� �ÞvM þ �
PM
k¼1 vkr
0
k
� �� p
0
@
1
A
> 0:
Thus, r� is an ESS of the game.
F.3 Proof for the Case pNvM < R < pNv1
We firstly prove that DNSS ¼ fr�jPM
i¼1 r
�
ivi ¼ R
pN; r
� 2 Dg
is the set of NSSs of the game.
Let r� ¼ ½r�1 	 	 	 r�M �, with the following constraint
XM
k¼1
vkr
�
k ¼
R
Np
:
Suppose that there exists another population state r0 trying
to invade state r� by attracting a small share � 2 ð0; ��Þ in the
population of miners to switch to r0, then we have
XM
i¼1
r�i yi ð1� �Þr� þ �r0ð Þ �
XM
i¼1
r0iyi ð1� �Þr� þ �r0ð Þ
¼
XM
i¼1
ðr�i � r0iÞyi ð1� �Þr� þ �r0ð Þ
¼
XM
i¼1
ðr�i � r0iÞ
Rvi
ð1� �Þ R
Npþ �
PM
k¼1 vkr
0
k
� pvi
 !
¼
XM
i¼1
R
Np
�
XM
k¼1
vkr
0
k
 !
R
ð1� �Þ R
Npþ �
PM
k¼1 vkr
0
k
� p
 !
�0:
The equality holds if and only if
PM
k¼1 vkr
0
k ¼ R
Np , thus r is a
NSS of the system. Therefore, DNSS ¼ fr�jPM
i¼1 r
�
ivi ¼ R
pNg
is the set of NSSs of the game.
We further study the asymptotically stable fixed points of
the replicator dynamics. For the ODEs in (3) in the replicator
dynamics, by using the constraint
PM
i¼1 ri ¼ 1, we can intro-
duce a reduced state vector r ¼ ðr1; r2; . . . ; rM�1Þ and reduce
the number of equations in (3) toM � 1.
r ¼ ðr1; r2; . . . ; rM�1Þ:
Thus, we can write the dynamical system more compactly in
vector format as
_r ¼ fðrÞ:
Then the Jacobian matrix of the system can be obtained as
JðrÞ ¼
@f1ðrÞ
@r1
	 	 	 @f1ðrÞ
@rM�1
..
. 	 	 	 ..
.
@fM�1ðrÞ
@r1
	 	 	 @fM�1ðrÞ
@rM�1
2
664
3
775; (10)
where
@fiðrÞ
@ri
¼ yi � �yþ ri
@yi
@ri
� @�y
@ri
� �
; 8i 2 f1; . . . ;Mg;
@fiðrÞ
@rj
¼ �ri @�y
@rj
; 8i 6¼ j:
8<
:
And we have that
@�y
@rj
¼
XM
k¼1
rk
@yk
@rj
þ yj; 8j 2 f1; . . . ;Mg:
Moreover, when
PM
i¼1 vkrk ¼ R
Np , we obtain that
yi ¼ Rvi
N
PM
k¼1 vkrk
� pvi ¼ 0; 8i 2 f1; . . . ;Mg:
Therefore, the elements of the Jacobian matrix in (10) are
derived as follows.
@fiðrÞ
@ri
¼ ripðvi � vMÞ � Npvi
R þ 1
� �
; 8i 2 f1; . . . ;M � 1g;
@fiðrÞ
@rj
¼ ripðvj � vMÞ; 8i 6¼ j:
8<
:
Further, the Jacobian matrix can be rewritten as
JðrÞ ¼ �Np2
R
r1v1ðv1 � vMÞ
. .
.
rM�1vM�1ðvM�1 � vMÞ
2
664
3
775
þ p
r1ðv1 � vMÞ 	 	 	 r1ðvM�1 � vMÞ
r2ðv1 � vMÞ 	 	 	 r2ðvM�1 � vMÞ
..
. . .
. ..
.
rM�1ðv1 � vMÞ 	 	 	 rM�1ðvM�1 � vMÞ
2
66664
3
77775
¼ pCðAþ aaT ÞB;
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 415
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
where
C ¼ diagðr1; r2; . . . ; rM�1Þ;
A ¼ �Np
R
diagðv1;v2; . . . ;vM�1Þ;
B ¼ diagðv1 � vM;v2 � vM; . . . ;vM�1 � vMÞ;
a ¼ ½1 1 	 	 	 1�T :
The leading principal minor of order k of the Jacobian matrix
denoted asDk is obtained as follows.
Dk ¼ pk det ðCkÞ det ðAk þ aka
T
k Þ det ðBkÞ;
Using Cauchy’s formula for the determinant of a rank-one per-
turbation [54], we obtain that
det ðAk þ aka
T
k Þ
¼ detAk þ aTk adjAkð Þak
¼ detAk 1þ aTk A
�1
k ak
� �
¼ detAk 1� R
Np
Xk
i¼1
1
vi
 !
¼ ð�1Þk Np
R
� �k Yk
i¼1
vk
 !
1� R
Np
Xk
i¼1
1
vi
 !
:
Therefore we have
Dk ¼ ð�1Þk
 Np2
R
� �k Yk
i¼1
viriðvi � vi�1Þ
 !
1� R
Np
Xk
i¼1
1
vi
 !
:
Additionally, we hold the following inequality
1� R
Np
Xk
i¼1
1
vi
� 1� R
Np
XM
i¼1
1
vi
¼ 1�
XM
j¼1
rjvj
XM
i¼1
1
vi
¼ 1�
XM
i¼1
ri þ
XM
i¼1
X
j 6¼i
rjvj
vi
 !
¼
XM
i¼1
X
j 6¼i
rjvj
vi
> 0:
Therefore, if ri > 0; 8i 2 f1; . . . ;Mg, the Jacobian matrix’s
odd principal minors are negative and its even principal
minors are positive, thus the Jacobian matrix is negative defi-
nite, thus, it is an asymptotically stable fixed point in the repli-
cator dynamics.
REFERENCES
[1] N. Satoshi, “A peer-to-peer electronic cash system,” Bitcoin.–URL:
https://bitcoin.org/bitcoin.pdf, 2008.
[2] S. Melanie et al., Blockchain Economics: Implications of Distributed
Ledgers: Markets, Communications Networks, and Algorithmic Reality.
Singapore: World Scientific, 2019.
[3] P. Bhattacharya, S. Tanwar, U. Bodke, S. Tyagi, and N. Kumar,
“BinDaaS: Blockchain-based deep-learning as-a-service in health-
care 4.0 applications,” IEEE Trans. Netw. Sci. Eng., to be published,
doi: 10.1109/TNSE.2019.2961932.
[4] Y. J. Chen, L. C. Wang, and S. Wang, “Stochastic blockchain for IoT
data integrity,” IEEE Trans. Netw. Sci. Eng., vol. 7, no. 1, pp. 373–384,
Jan.–Mar. 2020.
[5] M. Baza, N. Lasla, M. Mahmoud, G. Srivastava, and M. Abdallah,
“B-ride: Ride sharing with privacy-preservation, trust and fair pay-
ment atop public blockchain,” IEEE Trans. Netw. Sci. Eng., to be
published, doi: 10.1109/TNSE.2019.2959230.
[6] A. Yazdinejad, R. M. Parizi, A. Dehghantanha, and K. K. R. Choo,
“Blockchain-enabled authentication handover with efficient privacy pro-
tection in SDN-based 5G networks,” IEEE Trans. Netw. Sci. Eng., to be
published, doi: 10.1109/TNSE.2019.2937481.
[7] A. E. Gencer, S. Basu, I. Eyal, R. Van Renesse, and E. G. Sirer,
“Decentralization in bitcoin and ethereum networks,” in Proc. Int. Conf.
Financial Cryptogr. Data Secur., 2018, pp. 439–457.
[8] B. Asolo, “Blockchain soft fork & hard fork explained,”Mycryptopedia,
Nov. 1, 2018.”
[9] T. Neudecker and H. Hartenstein, “Short paper: An empirical analysis of
blockchain forks in bitcoin,” in Proc. Int. Conf. Financial Cryptogr.
Data Secur., 2019, pp. 84–92.
[10] Y. Xiao, N. Zhang, W. Lou, and Y. T. Hou, “A survey of distributed
consensus protocols for blockchain networks,” IEEE Commun. Surv.
Tut., vol. 22, no. 2, pp. 1432–1465, Apr.–Jun. 2020.
[11] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Proc. Annu. Int. Conf. Theory Appl.
Cryptogr. Techn., 2015, pp. 281–310.
[12] C. Decker and R. Wattenhofer, “Information propagation in the bitcoin
network,” in P2P Proc. IEEE, 2013, pp. 1–10.
[13] G. Wood et al., “Ethereum: A secure decentralised generalised transac-
tion ledger,” Ethereum Project Yellow Paper, vol. 151, no. 2014,
pp. 1–32, 2014.
[14] Y. Sompolinsky and A. Zohar, “Secure high-rate transaction processing
in Bitcoin,” in Proc. Int. Conf. Financial Cryptogr. Data Secur., 2015,
pp. 507–527.
[15] P. R. Rizun, “A transaction fee market exists without a block size limit,”
Block Size Limit Debate Work. Paper, 2015.
[16] V. Buterin, (2015, sept) More uncle statistics. [Online]. Available:
https://blog.ethereum.org/2015/09/25/more-uncle-statistics/
[17] C. Natoli, J. Yu, V. Gramoli, and P. Esteves-Verissimo, “Deconstructing
blockchains: A comprehensive survey on consensus, membership and
structure,” 2019, arXiv:1908.08316.
[18] R. Skudnov, “Bitcoin clients,” 2012.
[19] M. Kȩdziora, P. Koz»owski, M. Szczepanik, and P. J�o�zwiak, “Analysis
of blockchain selfish mining attacks,” in Proc. Int. Conf. Inf. Syst. Archi-
tecture Technol., 2019, pp. 231–240.
[20] Etherscan. (2020, Jan.) Top 25 miners by blocks. [Online]. Available:
https://etherscan.io/stat/miner?blocktype=blocks
[21] M. R. Carrell and J. E. Dittrich, “Equity theory: The recent literature,
methodological considerations, and new directions,” Acad. Manage.
Rev., vol. 3, no. 2, pp. 202–210, 1978.
[22] J. S. Adams, “Inequity in social exchange,” in Proc. Adv. Exp. Soc. Psy-
chol., 1965, vol. 2, pp. 267–299.
[23] Y. Lewenberg, Y. Bachrach, Y. Sompolinsky, A. Zohar, and
J. S. Rosenschein, “Bitcoin mining pools: A cooperative game theoretic
analysis,” in Proc. Int. Conf. Autono. Agents Multiagent Syst., 2015,
pp. 919–927.
[24] R. Cressman, C. Ansell, and K. Binmore, Evolutionary Dynamics and
Extensive form Games. Cambridge, MA, USA: MIT Press, 2003,
vol. 5.
[25] X. Liu, W. Wang, D. Niyato, N. Zhao, and P. Wang,
“Evolutionary game for mining pool selection in blockchain
networks,” IEEE Wireless Commun. Lett., vol. 7, no. 5, pp. 760–763,
Oct. 2018.
[26] J. N. Webb, Game Theory: Decisions, Interaction and Evolution. Berlin,
Germany: Springer Science & Business Media, 2007.
416 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
https://dx.doi.org/10.1109/TNSE.2019.2961932
https://dx.doi.org/10.1109/TNSE.2019.2959230
https://dx.doi.org/10.1109/TNSE.2019.2937481
[27] M. van Veelen, “But some neutrally stable strategies are more neu-
trally stable than others,” Tinbergen Inst. Discussion Paper, Tech.
Rep., 2010.
[28] A. Banerjee and J. W. Weibull, “Neutrally stable outcomes in cheap-talk
coordination games,”Games Econ. Behav., vol. 32, no. 1, pp. 1–24, 2000.
[29] P. D. Taylor and L. B. Jonker, “Evolutionary stable strategies and game
dynamics,”Math. Biosci., vol. 40, no. 1-2, pp. 145–156, 1978.
[30] B. Thomas, “On evolutionarily stable sets,” J. Math. Biol., vol. 22, no. 1,
pp. 105–115, 1985.
[31] J. W. Weibull, Evolutionary Game Theory. Cambridge, MA, USA: MIT
Press, 1997.
[32] A. E. Gencer, S. Basu, I. Eyal, R. Van Renesse, and E. G. Sirer,
“Decentralization in bitcoin and ethereum networks,” in Proc. Int. Conf.
Financial Cryptogr. Data Secur., 2018, pp. 439–457.
[33] (2020) Bitcoin cash. [Online]. Available: https://www.bitcoincash.org/
[34] T. Khawaja, “Simple extended consensus resolution: Uncle mining on
the blockchain,”
[35] A. Sen, On Economic Inequality. London, U.K.: Oxford Univ. Press,
1972.
[36] R. Pass, L. Seeman, and A. Shelat, “Analysis of the blockchain protocol
in asynchronous networks,” in Proc. Annu. Int. Conf. Theory Appl.
Cryptographic Techn., 2017, pp. 643–673.
[37] Y. Shahsavari, K. Zhang, and C. Talhi, “A theoretical model for fork
analysis in the bitcoin network,” in Proc. IEEE Int. Conf. Blockchain.,
2019, pp. 237–244.
[38] B. Liu, Y. Qin, and X. Chu, “Reducing forks in the blockchain via prob-
abilistic verification,” in Proc. IEEE 35th Int. Conf. Data Eng. Work-
shops., 2019, pp. 13–18.
[39] Z. Liu et al., “A survey on applications of game theory in blockchain,”
2019, arXiv:1902.10865.
[40] Z. Ni, W. Wang, D. I. Kim, P. Wang, and D. Niyato, “Evolutionary
game for consensus provision in permissionless blockchain
networks with shards,” in Proc. ICC IEEE Int. Conf. Commun.,
2019, pp. 1–6.
[41] S. Kim and S. G. Hahn, “Mining pool manipulation in blockchain net-
work over evolutionary block withholding attack,” IEEE Access, vol. 7,
pp. 144 230–144 244, 2019.
[42] F. Ritz and A. Zugenmaier, “The impact of uncle rewards on selfish
mining in ethereum,” in Proc. IEEE Eur. Symp. Secur. Privacy Work-
shops., 2018, pp. 50–57.
[43] S. Lerner, “Uncle mining, an ethereum consensus protocol flaw,” Bitslog
Blog, Apr, 2016.
[44] S. Y. Chang, Y. Park, S. Wuthier, and C. W. Chen, “Uncle-block attack:
Blockchain mining threat beyond block withholding for rational and
uncooperative miners,” in Proc. Int. Conf. Appl. Cryptogr. Netw. Secur.,
2019, pp. 241–258.
[45] Y. Liu, Y. Hei, T. Xu, and J. Liu, “An evaluation of uncle block mecha-
nism effect on ethereum selfish and stubborn mining combined with an
eclipse attack,” IEEE Access, vol. 8, pp. 17 489–17 499, 2020.
[46] P. De Filippi, “The interplay between decentralization and privacy: the
case of blockchain technologies,” J. Peer Prod., no. 7, 2016.
[47] M. Conoscenti, A. Vetro, and J. C. De Martin, “Peer to peer for privacy
and decentralization in the internet of things,” in Proc. IEEE/ACM 39th
Int. Conf. Softw. Eng. Companion., 2017, pp. 288–290.
[48] P. Kumar, G. Shrivastava, and P. Tanwar, “Demistifying ethereum
technology: Application and benefits of decentralization,” in Proc.
Forensic Investigations Risk Manage. Mobile Wireless Commun.,
2020, pp. 242–256.
[49] L. W. Cong, Z. He, and J. Li, “Decentralized mining in centralized
pools,” Rev. Financial Stud., 2019.
[50] Y. Liu, J. Ke, Q. Xu, H. Jiang, and H.Wang, “Decentralization is vulnera-
ble under the gap game,” IEEE Access, vol. 7, pp. 90 999–91 008, 2019.
[51] Y. Kwon, J. Liu, M. Kim, D. Song, and Y. Kim, “Impossibility of full
decentralization in permissionless blockchains,” in Proc. 1st ACM Conf.
Adv. Financial Technol., 2019, pp. 110–123.
[52] N. Alzahrani and N. Bulusu, “Towards true decentralization: A block-
chain consensus protocol based on game theory and randomness,” in
Proc. Int. Conf. Decis. Game Theory Secur., 2018, pp. 465–485.
[53] K. Wu, B. Peng, H. Xie, and Z. Huang, “An information entropy
method to quantify the degrees of decentralization for blockchain sys-
tems,” in Proc. IEEE 9th Int. Conf. Electron. Inf. Emerg. Commun.,
2019, pp. 1–6.
[54] R. A. Horn and C. R. Johnson,Matrix Analysis. Cambridge, U.K.: Cam-
bridge Univ. Press, 2012.
Canhui Chen is currently working toward the B.E.
degree in software engineering with the School
of Computer Science and Engineering, Sun Yat-
sen University, Guangzhou, China. His current
research interests include game theory and block-
chain system.
Xu Chen (Senior Member, IEEE) received the
Ph.D. degree in information engineering from The
Chinese University of Hong Kong in 2012. He was
a Postdoctoral Research Associate with Arizona
State University, Tempe, AZ, USA, from 2012 to
2014, and a Humboldt Scholar Fellow with the
Institute of Computer Science, University of
Go€ottingen, Germany, from 2014 to 2016. He is
currently a Full Professor with Sun Yat-sen Uni-
versity, Guangzhou, China, and the Vice Director
of the National and Local Joint Engineering Labo-
ratory of Digital Home Interactive Applications. He was the recipient of
the Prestigious Humboldt Research Fellowship awarded by the Alexander
von Humboldt Foundation of Germany, the 2014 Hong Kong Young Scien-
tist Runner-Up Award, the 2017 IEEE Communication Society Asia-
Pacific Outstanding Young Researcher Award, the 2017 IEEE ComSoc
Young Professional Best Paper Award, the Honorable Mention Award of
the 2010 IEEE International Conference on Intelligence and Security Infor-
matics (ISI), the Best Paper Runner-Up Award of the 2014 IEEE Interna-
tional Conference on Computer Communications (INFOCOM), and the
Best Paper Award of the 2017 IEEE International Conference on Commu-
nications (ICC). He is an Area Editor of the IEEE OPEN JOURNAL OF THE
COMMUNICATIONS SOCIETY, an Associate Editor for the IEEE TRANSACTIONS
ON WIRELESS COMMUNICATIONS, IEEE INTERNET OF THINGS JOURNAL, and
IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS (JSAC) Series on
Network Softwarization and Enablers.
Jiangshan Yu (Member, IEEE) received the Ph.D.
degree from the University of Birmingham, U.K., in
2016. He is currently an Associate Director
(research) with Monash Blockchain Technology Cen-
tre, Monash University, Australia. Previously, he was
a Research Associate with SnT, University of Lux-
embourg, Luxembourg. The focus of his research has
been on design and analysis of cryptographic proto-
cols, cryptographic key management, blockchain
consensus, and ledger-based applications. In particu-
lar, His recent research challenges the soundness of
the foundational security models and design principles of existing blockchain
systems, where the blockchain ecosystem of hundreds of billions of dollars is
based upon. He won numerous prestigious awards, including Dean’s Research
Impact Award (2019) and the Chinese Government Award for Outstanding
Scholar Abroad (1 percent worldwide, 2016)
Weigang Wu (Member, IEEE) received the B.Sc.
and M.Sc. degrees both from Xi’an Jiaotong Uni-
versity, China, in 1998 and 2003 respectively. He
received the Ph.D. degree in computer science
from Hong Kong Polytechnic University in 2007.
He is currently an Associate Professor with the
Department Of Computer Science, Sun Yat-sen
University, China. He has authored or coauthored
more than 60 papers in major conferences and
journals. His research interests include distributed
systems and wireless networks, especially cloud
computing platforms and ad hoc networks. He was a Member of Editorial
Board of two international journals, Frontiers of Computer Science and
Ad Hoc & Sensor Wireless Networks. He is also an Organizing/Program
Committee member for many international conferences. He is a Member
of the ACM.
CHEN et al.: IMPACT OF TEMPORARY FORK ON THE EVOLUTION OF MINING POOLS IN BLOCKCHAIN NETWORKS 417
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
Di Wu (Senior Member, IEEE) received the B.S.
degree from the University of Science and Tech-
nology of China, Hefei, China, in 2000, the M.S.
degree from the Institute of Computing Technol-
ogy, Chinese Academy of Sciences, Beijing,
China, in 2003, and the Ph.D. degree in computer
science and engineering from the Chinese Univer-
sity of Hong Kong, Hong Kong, in 2007. He was a
Postdoctoral Researcher with the Department of
Computer Science and Engineering, Polytechnic
Institute of New York University, Brooklyn, NY,
USA, from 2007 to 2009, advised by Prof. K. W. Ross. He is currently a
Professor and the Assistant Dean of the School of Computer Science and
Engineering with Sun Yat-sen University, Guangzhou, China. His research
interests include cloud computing, multimedia communication, internet
measurement, and network security. He was the co-recipient of the IEEE
INFOCOM 2009 Best Paper Award. He was an Editor of the Journal of
Telecommunication Systems (Springer), the Journal of Communications
and Networks, Peer-to-Peer Networking and Applications (Springer), Secu-
rity and Communication Networks (Wiley), and the KSII Transactions on
Internet and Information Systems, and a Guest Editor of the IEEE TRANSAC-
TIONS ON CIRCUITS AND SYSTEMS FOR VIDEO TECHNOLOGY. He was also the
MSIG Chair of the Multimedia Communications Technical Committee in
the IEEE Communications Society from 2014 to 2016. He was the TPC
Co-Chair of the IEEE Global Communications Conference—Cloud Com-
puting Systems, and Networks, and Applications in 2014, the Chair of the
CCF Young Computer Scientists and Engineers Forum, Guangzhou from
2014 to 2015, and a Member of the Council of China Computer
Federation.
418 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 1, JANUARY-MARCH 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:06:37 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice