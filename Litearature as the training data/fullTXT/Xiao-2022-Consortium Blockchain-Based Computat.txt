Consortium Blockchain-Based Computation Offloading Using Mobile Edge Platoon Cloud in Internet of Vehicles
IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022 17769
Consortium Blockchain-Based Computation
Offloading Using Mobile Edge Platoon
Cloud in Internet of Vehicles
Tingting Xiao , Chen Chen , Senior Member, IEEE, Qingqi Pei , Senior Member, IEEE,
and Houbing Herbert Song , Senior Member, IEEE
Abstract— The rapid advancement of intelligent vehicles is
deemed crucial to the emergence of diverse compute-intensive
applications of assisted driving, which consist of automatic
driving, speed recognition, hybrid sensing data fusion, etc.
Nevertheless, resources-constraint vehicles with high mobility
cannot always meet the computing and communication demands
when the above applications occur. Additionally, considering the
expensive and inflexible deployment of edge servers, offloading
application tasks to “Edge” in the vehicular networks is not
always working well. To effectively mitigate the above issues,
the complicated application tasks are motivated to offload to
the vehicle platoon, where the vehicles travel synchronously
in a string with small headway. Benefiting from the stable
connectivity, adjustable mobility, and reasonable charge, the
task vehicle would like to process the task by leveraging the
idle resources of each platoon member (PM). To make more
effective use of the resources on the mobile edge platoon cloud
(MEPC), we investigate the resource allocation strategy based on
the task vehicle’s service pricing strategy in this work. We first
formulate the interactions between MEPC and task vehicle as a
Stackelberg game to study the joint utility maximization of the
MEPC and task vehicle. Then the Stackelberg Equilibrium (SE)
for the proposed game is characterized and proved. The proposed
algorithm Hook-Jeeves-based Stackelberg game (HJSG) can
reach the SE. Finally, we introduce the consortium blockchain
to ensure the security and privacy of service transactions. The
entire system helps enhance task processing efficiency, protect
transaction data, and improve service experience. Experimental
results over numerical simulation based on practical scenarios
demonstrate that compared with Multi-round Stackelberg Game
Manuscript received 23 January 2021; revised 28 September 2021 and
17 February 2022; accepted 6 April 2022. Date of publication 29 April 2022;
date of current version 11 October 2022. This work was supported in part
by the National Key Research and Development Program of China under
Grant 2018YFE0126000; in part by the National Natural Science Foundation
of China under Grant 62072360, Grant 61902292, Grant 62001357, Grant
62072359, and Grant 62072355; in part by the Key Research and Devel-
opment Plan of Shaanxi Province under Grant 2021ZDLGY02-09, Grant
2019ZDLGY13-07, Grant 2019ZDLGY13-04, and Grant 2020JQ-844; in part
by the Natural Science Foundation of Guangdong Province of China under
Grant 2022A1515010988; in part by the Xi’an Science and Technology Plan,
under Grant 20RGZN0005; and in part by the Xi’an Key Laboratory of
Mobile Edge Computing and Security under Grant 201805052-ZD3CG36.
The Associate Editor for this article was P. Ye. (Corresponding authors:
Chen Chen; Houbing Herbert Song.)
Tingting Xiao, Chen Chen, and Qingqi Pei are with the State Key
Laboratory of Integrated Services Networks, Xidian University, Xi’an 710071,
China (e-mail: ttxiao1@stu.xidian.edu.cn; cc2000@mail.xidian.edu.cn;
qqpei@mail.xidian.edu.cn).
Houbing Herbert Song is with the Security and Optimization for Networked
Globe Laboratory, Department of Electrical Engineering and Computer Sci-
ence, Embry–Riddle Aeronautical University, Daytona Beach, FL 32114 USA
(e-mail: h.song@ieee.org).
Digital Object Identifier 10.1109/TITS.2022.3168358
(MRSG), uniform pricing, and the local computation strategy,
the proposed HJSG algorithm can attain less execution time and
faster convergence performance.
Index Terms— Internet of vehicle, computation offloading,
mobile edge platoon cloud (MEPC), Stackelberg game, consor-
tium blockchain.
I. INTRODUCTION
A. Background and Motivation
W ITH the development of intelligent vehicles, a grow-
ing number of compute-intensive applications have
emerged, such as Augmented Vehicular Reality (AVR), updat-
ing of Highly Automated Driving Map (HAD Map), hybrid
sensing data fusion, autonomous driving, etc. [1]–[3]. Nev-
ertheless, the upgrade of vehicle hardware cannot fully
keep up with the computing requirements of the above
applications. What is more, improving in-vehicle comput-
ing capability would be costly. Subsequently, Mobile cloud
computing (MCC) is considered a practical approach to
solving the conflict between compute-intensive applications
and resource-constrained terminals [4], [5]. However, long-
distance transmissions and unstable network conditions can
cause unpredictable delays, especially for delay-sensitive
security applications. With the plethora of mobile terminals
expanding, the sharply increasing demand for cloud computing
may cause network congestion. Unlike MCC, Mobile Edge
Computing (MEC) migrates compute-intensive tasks from
other mobile devices to the physically proximal network
edge, the mode of which provides effective computing and
communication services for mobile devices [6]–[9]. Yet, due
to the high mobility, the frequent position switching between
vehicles and MEC leads to link breakages, further reducing the
user experience [10]–[12]. In addition, the efficient allocation
of MEC resources to multiple vehicles is challenging due
to the finite processing power and the dramatic increase
in resource demand. Especially in some remote areas with
sparse base station deployment, the resources pressure of
vehicles cannot be relieved effectively [13]–[15]. Thus, the
traditional MEC cannot directly be inapplicable to the Internet
of Vehicles (IoV).
Unlike the edge cloud created and maintained by a
cloud provider, the vehicle cloud is created temporarily by
interconnecting resources available in vehicles [16], [17].
1558-0016 © 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-1742-8519
https://orcid.org/0000-0002-4971-5029
https://orcid.org/0000-0001-7601-5434
https://orcid.org/0000-0003-2631-9223
17770 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
Fig. 1. The platoon mobile edge computing architecture.
In other words, an intelligent vehicle can act as both a ser-
vice provider and resource requester in vehicular networking.
For instance, the vehicle as a service provider can handle
outsourced tasks from other requesters by leveraging idle
computing resources. Instead, as a resource requester, the task
vehicle can offload tasks to nearby providers via opportunistic
vehicle-to-vehicle communications [18]. Working as a service
provider may pose many challenges as follows. First, due
to the unpredictability of vehicle trajectory, the connection
management among individual vehicles is inflexible, which
leads to the uncertainty of service delay. Second, the service
of vehicle cloud is unstable because of high-speed relative
motion. Third, high-volume tasks may lead to poor delay
performance because of vehicles’ limited computing power.
As a result, offloading tasks to the vehicle cloud cannot nec-
essarily achieve the desired effect. Thus, a stable and available
cloud computing paradigm is urgently needed to address the
above issues. Hence, we consider the platoon that refers to
a platoon head (PH) leading the platoon members (PMs)
to drive closely as a mobile edge platoon cloud (MEPC)
to strengthen vehicular edge computing (VEC), which is
shown in Fig.1 [19], [20]. As a novel driving paradigm, the
preliminary research of the platoon mainly focuses on control
(merging, splitting, joining, and formation, etc.) and energy
conservation. Vehicle platoons are first applied to improve
traffic safety performance and increase roadway capacity.
A bounded number of PMs traveling close to one another guar-
antees stable connectivity and communication. More impor-
tantly, the platoon’s adjustable mobility breaks the constraints
of fixed server deployment. Finally, pooling the idle resources
of each PM can be considered to ensure the availability of
the platoon resources. Summarily, the advantages noted above
make the resources sharing of the vehicle platoon reasonable
and available [21], [22]. Presently, little work has been done
on the field of platoon’s resources allocation. Thereby, we con-
sider the platoon as a mobile resource cloud to serve nearby
vehicles in this work. To make it convenient and efficient for
the task vehicle to utilize platoon resources, a flexible resource
allocation mechanism is urgent to come forward.
B. Related Work and Contribution
Task offloading has received much attention in recent years
due to the growing development of IoV. [23] proposed a (Sync-
FQL) algorithm that instructs the offloading direction of the
network traffic considering offloading failure probability and
resource cost. The Sync-FQL algorithm commonly deploys in
the VEC pool or platoon header. In [24], a task offloading
approach for MEC-assisted vehicle platooning is proposed,
which is to solve the optimization problem under the condition
of stability of task queues. In [25], to minimize the cost
of task offloading and meet the deadline of task execution,
the mobile application is represented by a series of fine-
grained subtasks, which can be processed locally, offloaded
to other members, or offloaded to a MEC server. In [26],
a platoon-assisted vehicular edge computing (PVEC) system
is proposed to enhance the efficiency and success of offloading,
where task flows can migrate to platoon members. The author
designed a task-file transmission strategy with a predictive
V2V relay and proposed an optimal predictive combination
mode offloading scheme in [27]. The existing works [23]–[27]
studied the computation task offloading in a platoon by
considering different objectives. However, they focused on
optimizing the overall performance of the system (e.g., max-
imizing the total revenues of the IoT system as in [26] or
minimizing the aggregate delay as in [23]–[25]). Nevertheless,
selfish vehicles are interested in optimizing their quality of
experience (QoE) to reflect their satisfaction with computing
services or total utility. Besides, PMs must be rewarded
properly for the services they provide. Otherwise, they would
not share their valuable resources. To stimulate MEPC and
the task vehicle to participate in computation offloading,
we formulate interactions among the MEPC and the task
vehicle as a Stackelberg game. By maximizing the utilities
of MEPC and task vehicles, we can obtain the optimal service
pricing decision and resources allocation strategies. Besides,
to ensure the privacy and safety of the transaction data, the
blockchain is introduced to the MEPC system. In this platoon
consortium/private blockchain network, all participants are
whitelisted and bounded by strict contractual obligations to
behave correctly. To achieve consensus, Practical Byzantine
Fault Tolerance (PBFT) and Raft are appropriate choices. The
Raft is a leader-based algorithm that uses leader election as an
essential part of the consensus protocol. Thus, through platoon
head rotation, the platoon consortium blockchain network can
reach a consensus by using the Raft algorithm [28]–[30].
In this study, the interaction between the MEPC and task
vehicle is modeled as a Stackelberg game to maximize the
utilities of the MEPC and task vehicle. We study the widely
investigated problem of task offloading for MEPC. To maxi-
mize the utility of the task vehicle and PMs, we propose the
service pricing and resource allocation strategies-based consor-
tium blockchain. The two strategies provide reasonable incen-
tives for MEPC and task vehicles to allocate resources in a
distributed manner. Meanwhile, the introduction of blockchain
ensures the security and privacy of the service transaction data.
In summary, the contributions of this article are summarized
as follows:
• We propose an MEPC architecture to offer available
resources for surrounding task vehicles timely and adap-
tively. In this architecture, blockchain technology is
introduced to ensure the privacy and safety of interac-
tive data. The Raft consensus algorithm in the platoon
consortium blockchain manages the replicated ledger and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17771
PH selection to support the fault tolerance and scalability
of the MEPC.
• We model the interaction between the MEPC and task
vehicle as a Stackelberg game. To jointly maximize
the utilities of the task vehicle and MEPC, the related
optimization problem is formulated by optimizing the
service pricing and resource allocation strategies under
the delay and cost constraints.
• We discuss the existence and uniqueness of Nash equi-
librium based on the Stackelberg game method. Then,
we design an efficient Hooke-Jeeves-based Stackelberg
game (HJSG) algorithm to achieve the Nash Equilib-
rium (NE) point.
• We have carried out a series of experiments and compared
them with other methods (HJSG: uniform pricing, MESG,
local computing) to analyze the performance in terms of
execution delay and convergence.
The rest of our paper is organized as follows: We provide a
brief overview of the MEPC-based Raft consensus protocol
in Section II. Section III introduces the system model and
scenario description, and Section IV formulates the problem
and models the computation offloading between the task
vehicle and PMs as a Stackelberg game. Section V analyzes
the Stackelberg equilibrium and proposes an efficient Hooke-
Jeeves-based Stackelberg game (HJSG) algorithm. Section VI
presents the simulation results. SectionVII concludes this
paper.
II. DESCRIPTION OF MEPC
In this work, the vehicle platoon is regarded as a mobile
edge cloud, which contains two parts: the underlying structure
and the service layer. To describe the application of the service
layer more reasonably, we first need to introduce the under-
lying operation mechanism. Hence, we briefly summarize the
operation mechanism based on the Raft algorithm into two
parts: how to select an appropriate PH and reach a transaction
consensus.
A. PH Election
1) Election Background: The PH vehicle plays a vital role
in the efficient operation of the vehicle platoon. First, due to
the aerodynamic drag reduction effect when vehicles travel in
a platoon, the PH vehicle contributes most to the overall fuel
efficiency improvement while experiencing less the amount of
fuel savings than other PMs. Second, a PH vehicle’s driver
undertakes more driving effort than the following vehicles,
as fully automated vehicles are not yet advanced enough to
be implemented in platoons. Overall, a PH would intuitively
be selected to bring the most energy-saving and benefits
on driving-effort reduction to lead the whole platoon [31].
However, as the PH vehicle always benefits the least, PMs
are reluctant to be a leader without compensation. In a sense,
PMs apply to become a PH just for the stable development
of the whole platoon. The fixed PH is not conducive to the
Fig. 2. PH election process.
long-term development of the platoon, and it is also unfair to
the leader. That is what the mechanism of PH rotation1 needs.
2) Election Process: The PH Election process is described
in Fig.2. Generally, a PM in the vehicle platoon can be in one
of three states: follower, candidate, or PH state. The PH is
undoubtedly in the PH state, and all PMs start in the follower
state. The election timeout is the amount of time a follower
waits until becoming a candidate, which is randomly between
150ms and 300ms.
1) Follower to Candidate: If a follower does not hear from
the PH after the election timeout, it will transition to the
candidate state and starts a new election term.
2) Candidate to PH: The PM in the candidate state canvass
votes from others. Once a candidate has received a
majority of votes, it transitions to be the new PH
of MEPC. Because high-performance vehicles perform
better as leaders, members are more inclined to vote for
the high-performance vehicle.2
3) Repeat Election: The new PH begins sending out Append
Entries messages to its followers. These messages are
sent to PMs in intervals specified by the heartbeat
timeout. Followers then respond to each Append Entries
message. This election term continues until a follower
1When a new PH is identified, the new PH becomes the first vehicle in
the platoon through mobile adjustment. Meanwhile, other members need to
adjust the spacing between adjacent vehicles to adapt to the management of
the new PH.
2To judge whether the vehicle is qualified to be a PH, each vehicle will
collect some basic performance information from other vehicles, such as
service level (such as drive experience, dangerous driving manners, and
reasonable charge), communication capability, computing resources, etc.,
to quantify it into specific values. The higher the performance evaluation
value, the more suitable the vehicle is in the role of leader. Because high-
performance vehicles perform better as leaders, members are more inclined
to vote for high-performance vehicles. If the performance evaluation value is
lower than the reference value, it is judged that the vehicle is not suitable for
the role of leader, or even cannot become a candidate vehicle, to reduce the
unnecessary leader election process.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
17772 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
Fig. 3. Log replication process.
Fig. 4. Interaction between MEPC and the task vehicle.
stops receiving heartbeats and becomes a candidate.
Requiring a majority of votes guarantees that only one
member can be PH per term.
3) Log Replication: To guarantee the privacy and safety
of the transaction records, PMs in MEPC need to reach
a consensus on transition records and add records to the
distributed ledger. We can make PMs implement distributed
consensus through the Raft algorithm in this work [32], [33].
The Log Replication process is described in Fig.3. We describe
the Log Replication steps as follows:
1) First, once an offloading service occurs, we need to repli-
cate transaction changes to all PMs. This process uses
the same Append Entries message used for heartbeats.
2) Then, a task vehicle sends a change to the PH, such as
a new transaction. The change records to the PH’s log.
3) Finally, the change is sent to the PMs for verification
on the next heartbeat. An entry commits as soon as a
majority of PMs acknowledge it. The new change will
record to each PM’s ledger as a new entry.
B. Interaction Between MEPC and the Task Vehicle
On the service layer, the interaction between MEPC and the
task vehicle generates some new changes (such as offloading
transactions) to the log of MEPC. The entire computation
offloading process divides into several step as follows, which
are described in Fig.4:
• The task vehicle sends an offloading request message to
the PH of MEPC.
• PH checks the transaction ledger and obtains the infor-
mation of PMs’ available computing resources. Then,
PH assigns appropriate resources to the task vehicle.
• The task vehicle divides its task into several segments
according to allocated computing resources and then
offloads subtasks to corresponding PMs.
• The computed results are fed back to the task vehicle
from PMs.
III. SYSTEM MODEL AND SCENARIO DESCRIPTION
Let us consider a typical Highly Automated Driving Map
(HAD Map) update service on the motorway. As an auto-
matic driving application with a priori perception, HAD Map
requires the ability of real-time update. The high-frequency
online updating of HAD Map during vehicle driving can
improve driving comfort and safety [34]. In [16], collecting
routing data from PMs can provide great potential for up-
to-dateness of the map to reduce data collection and map
update costs. Available resources gathered from PMs can
overcome the high energy consumption and long latency in
the map’s production and updating. How to schedule subtasks
and allocate resources is the main work.
A. System Model
The vehicles in the vehicular network are composed of two
categories: MEPC and the task vehicle. By gathering com-
puting resources of inner PMs, MEPC can provide computing
services for surrounding task vehicles. The task vehicle divides
the computing-intensive tasks into several parts and offloads
them to corresponding PMs. To make the readers easily follow,
Table I summarizes the notation used in this study.
We consider an MEPC architecture involving N PMs to pro-
vide computing services for the task vehicle. For convenient
analysis in the following sections, we assume that the tasks can
offload partially. In each time slot, each compute-intensive task
can be partitioned into several subtasks separately according
to the resource allocation strategy. The offloading service is
operated in a discrete-time slot structure when considering the
impact of the vehicle’s mobility. In each time slot, intending
to maximize the task vehicle’s and MEPC’s utility, MEPC
decides how many resources to sell based on the service
pricing from the task vehicle. Moreover, to avoid interactive
collisions and interference during task offloading, the band-
width B for Vehicle-to-Vehicle communication (V2V) between
the MEPC and task vehicle is divided equally.
B. Communication Model
All vehicles involved are assumed to equip with multiple
antennas. We assume that the spectrum resources between the
task vehicle v and PM n is Bv,n = B
N , and the transmission
power from the task vehicle v to PM n is Pv,n . For the
task vehicle v, the corresponding V2V communication link
transmission rate can be calculated by
Cv,n = Bv,n log2(1 + Pv,nGv,n
σ 2 ), (1)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17773
TABLE I
SUMMARY OF KEY NOTATIONS
where σ 2 is Gaussian white noise power, Gv,n is the uplink
channel gain between the task vehicle and PM n, which can
be expressed as
Gv,n = G|dv,n + vv,nta |−αG0
v , (2)
where G is the fixed power gain influenced by amplifier and
antenna; dv,n is the distance between the task vehicle and PM
n; vv is the relative velocity of the task vehicle to platoon,
and the ta is the adjustments latency to ensure the stability of
relative distance between the task vehicle and platoon; α is
the exponent of the path loss; G0
v is the square of Rayleigh
fading.
Compared with the offloaded subtasks, the computing
results output from PMs is relatively small. Thus, we only
consider the delivery and computing latency rather than the
return latency. According to the resources allocation strategy
of MEPC, the task vehicle offloads the corresponding subtasks
to each PM. Vehicles are equipped with multiple antennas in
this scenario so that all subtasks can be offloaded to PMs
simultaneously. The delivery time of each subtask tdel can be
expressed as:
tdel = {tdel,1, . . . , tdel,n, . . . , tdel,N }
= {Oin,1
Cv,1
, . . . ,
Oin,n
Cv,n
, . . . ,
Oin,N
Cv,N
}, n ∈ N , (3)
where Oin,n is the size of the subtask assigned to PM n.
For the convenience of research, this paper makes the
following basic assumptions:
• During a short offloading time, the direction and velocity
of the MEPC and task vehicle remain constant.
• The communication interference can be ignored because
of the different spectrum bands assigned.
C. Computation Model
The task vehicle has the specific task T = (S, ω, τ ) to
execute, and S is the size of task data in bits. Furthermore, ω is
the processing density in cycles per bit. τ is the ideal execution
deadline. The task vehicle has its processing capacity, and
we call its local CPU frequency as fv measured by CPU
cycles per second. We assume that there are So bits data
offloading to MEPC. Thus, the remaining (S − So) bits can be
processed locally. We define the duration of local processing
as tL = (S − So)ω/ fv . The local computing and offloading
computing can be performed simultaneously. Thus, for the task
vehicle v, the total execution time can be defined as:
t f inal = max{tL , ttotal}, (4)
where ttotal is the offloading service duration which consists
of two processes: 1) delivery time of subtasks tdel ; 2) compu-
tation time of task tc. For a specific subtask, the time ttotal of
the computation offloading process can be expressed as:
ttotal = max{tdel,1 + tc,1, . . . tdel,n + tc,n, . . . , tdel,N + tc,N },
(5)
where tc = {tc,1, . . . , tc,n, . . . , tc,N }, and tc,n represent the
execution time of corresponding subtask on PM n. For any
PM n, the execution time can be expressed as
tc,n = Oin,nω/ fn,v , (6)
where fn,v ∈ [0, fn] indicates the CPU frequency of PM n
allocated to the task vehicle, which is measured by the number
of CPU cycles per second. The total processing capacity of PM
n is defined as fn .
D. Cost and Profit Model
1) For the MEPC: For each PM in MEPC, it charges for
providing computing resources. Hence, the revenue of the nth
PM can be expressed as:
Rn(Oin,n) = pnOin,n + rn(On − Oin,n + S(Oin,n)), (7)
where rn is the revenue for unit task data from PM n’s fixed
users, such as the PH needs more resources to control the
whole platoon. pn is the serving pricing for executing unit
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
17774 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
task data from the task vehicle. S(Oin,n) is the satisfaction of
fixed users with the left computing resources, which can be
expressed as:
S(Oin,n) = 1 − e(1−On−Oin,n
Fn
), (8)
where Fn is fixed users’ ideal demand for computing
resources. On is the fixed computing capability of PM n,
which can refer to the enabled maximum volume tasks to
handle. If the left computation resources cannot meet the PH’s
ideal resources requirements, the S(Oin,n) < 0, otherwise,
S(Oin,n) ≥ 0. Accordingly, the fixed users of the PM n can
pay less, that is a lower rn .
The cost of PM n is mainly about the energy consumption
for executing the subtask, which can be written as:
Cn(Oin,n) = bnOin,n , (9)
where bn is the cost for executing unit task data.
Thus, the profit model of PM n can be formulated as:
Pn(Oin,n) = (pn − bn)Oin,n
+(rn − bn)(On − Oin,n + S(Oin,n)). (10)
2) For the Task Vehicle: The cost of the task vehicle is
mainly the energy consumption for local computing, subtasks
transmission, and the charge for offloading computation. The
energy consumption of which can be obtained by:
Ce
v (Oin,n) = eϑ(S−�
n∈N Oin,n ) + Ev Pv
�
n∈N
Oin,n
Cv,n
, (11)
where ϑ is the local energy consumption coefficient.
Ev is the energy conversion coefficient. We define the
Pv = Pv,1 = . . . = Pv,N .
Likewise, the payment for computing resources can be
expressed as:
C p
v (Oin,n) =
�
n∈N
pnOin,n . (12)
Thus, the total cost model for the task vehicle is given by:
C(Oin,n) = Ce
v (Oin,n) + C p
v (Oin,n). (13)
IV. PROBLEM FORMULATION
In this work, the Stackelberg game is a strategic game that
consists of a leader and several followers competing with
each other on the computing resource. The leader moves first,
and the followers move subsequently. We formally define the
Stackelberg game as follows:
• Players : task vehicle and N PMs.
• Strategies : (i) for the task vehicle, it gives the service
pricing p = [p1, p2, . . . , pN ] for computation offloading,
and (ii) for each PM n, it gives the acceptable allocated
computing resources Oin = [Oin,1, . . . ,Oin,N ] based
different service pricing pn.
• Utility : (i) for the task vehicle, the expected util-
ity Ut (Oin, p), and (ii) for each PM, the utility
Up,n(Oin,n , pn).
Fig. 5. Two-stage stackelberg game.
We first formulate the task vehicle as a leader and the PMs
as the followers. The task vehicle (leader) imposes a set of ser-
vice pricing. Then, the PMs (followers) update their decision
of resources allocation to maximize their utilities based on the
assigned servicing pricing. This two-stage-Stackelberg game is
shown in Fig.5. As shown in Fig.5, in the first stage, the task
vehicle specifics a pricing strategy p = [p1, p2, . . . , pN ]. And
each PM responds with allocated computing resources based
on the service pricing, denoted by O∗
in = [O∗
in,1, . . . ,O∗
in,N ].
In the second stage, the task vehicle responds with an optimal
service pricing based on the optimal allocated computing
resources, denoted by p∗ = [p∗
1, . . . , p∗
n]. There will be one
or more times two-stage interactive processing.
A. Stackelberg Game: Task Vehicle Modeling
Under the above game model, it is easy to observe that the
task vehicle’s objective is to maximize its utility. The utility
function of the task vehicle defines as the cost reduction from
computation offloading. In the game model, the goal of the
optimization problem is to make a service pricing decision
considering profit and cost. Mathematically, the utility of the
task vehicle is:
Ut (Oin , p)
= C(0) − C(Oin)
= eϑS − eϑ(S−�
n∈N Oin,n )−Ev Pv
�
n∈N
Oin,n
Cv,n
−
�
n∈N
pnOin,n ,
(14)
where C(0) − C(Oin,n) defines the cost reduction from local
processing to offloading. Oin = [Oin,1, . . . ,Oin,1, . . . ,Oin,N ]
is a vector of subtasks offloaded to the MEPC, and p =
[p1, . . . , pn, . . . , pN ] is the service pricing vector paid
to PMs.
Note that ∀n, Oin,n is a function of pn under the Stackelberg
Game formulation, indicating that the associated computing
resources are dependent on its service pricing. Due to the
limited computation capacity of MEPC and the maximum
consumption limit, the task vehicle should decide the optimal
price p∗ and get the optimal resources allocation O∗
in within
the constraints. Thus, we obtain the following optimization
problem for the task vehicle:
P1 : max Ut (Oin, p) (15a)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17775
s.t. Ce
v (Oin,n) ≤ Eth,v , C p
v (Oin,n) ≤ Pth (15b)
Oin,n(pn) ∈ [0,On], n ∈ N (15c)
pn ∈ [0, pth], n ∈ N (15d)
Pv = Pv,n ≥ 0, n ∈ N (15e)�
n∈N
Oin,n ≤ S, n ∈ N (15f)
t f inal ∈ (0, τ ] (15g)
where (15b) is energy and payment constraint for the task
vehicle, Eth,v and Pth are the upper bound. (15c) indicates
the limitation on the size of the computing resources, and
the computing resources Oin,n is the function of the service
pricing pn . (15d) indicates the range of the service pricing.
(15e) implies the non-negativity of the transmission power
from the task vehicle to the PMs. (15f) is the volume constraint
for the sum of subtasks. (15g) says that the execution latency
does not exceed the execution deadline.
B. Stackelberg Game: MEPC Modeling
The more computing resources assigned, the more profit
is obtained. On the other hand, with the increase in the
allocated computing resources, the PM will cause more energy
consumption. As a result, it has to order more service pricing
from the task vehicle. Besides serving the task vehicle, the
MEPC also needs to provide services to its fixed users, such
as the PH. MEPC must consider the demand of its users when
deciding whether and how to offer computing resources to the
task vehicle. In this game model, the role of the PH is to make
the resources allocation decision and multicast message to the
task vehicle. PH is also to evaluate the game results until the
equilibrium point is reached.
The utility of the PM is the profit improvement through
computation offloading, which is denoted by:
Up,n(Oin,n , pn)
= Pn(Oin,n) − Pn(0)
= (pn − bn)Oin,n + (rn − bn)(S(Oin,n) − S(0) − Oin,n).
(16)
Therefore, to maximize their utilities by considering profit,
the optimization problem of MEPC can be modeled as
P2 : max Up,n(pn,Oin,n ) (17a)
s.t. Cn ≤ Eth,n, n ∈ N (17b)
Oin,n(pn) ∈ [0,On], n ∈ N (17c)
pn ∈ [0, pth], n ∈ N (17d)
where (17b) is the energy constraint for PM n, Eth,n is the
energy upper bound for executing the offloaded subtasks. (17c)
indicates the limitation on the number of allocated computing
resources. (17d) indicates the range of the service pricing.
Problems P1 and P2 together form a Stackelberg game.
The objective of this game is to find the Stackelberg Equilib-
rium (SE) point(s) from which neither the task vehicle nor the
PMs has incentives to deviate. The SE for the proposed game
is investigated in the following section.
V. STACKELBERG EQUILIBRIUM AND
DISTRIBUTED ALGORITHM
To stimulate PMs to provide computing resources by obtain-
ing benefits, we formulate the interactions between the task
vehicle and PMs as a two-stage Stackelberg game based
on the non-cooperative game theory. In this game, the task
vehicle acts as a leader specifying the service pricing to PMs,
and each PM acts as a follower that allocates computing
resources to the task vehicle. Algotithm 1 describes the
process to solve the system model at the equilibrium point of
the game [18].
Algorithm 1 Offloading Game for Optimal Solution
Input: Service pricing p = [p1, . . . , pn, . . . , pN ];
Output: p = [p∗
1, . . . , p∗
n], O∗
in,n = [O∗
in,1, . . . ,O∗
in,N ];
1: Stage 1: The task vehicle gives p = [p1, . . . , pn, . . . , pN ]
at first: Upon receiving the service pricing, P2 is solved
first, and each PM computes its optimal assigned comput-
ing resources O∗
in,n = [O∗
in,1, . . . ,O∗
in,N ].
2: Stage 2: By knowing PMs’ best response, the task vehicle
decides the optimal service pricing p = [p∗
1, . . . , p∗
n]
through solving P1.
O∗
in,n is denoted as the optimal allocated computation
resources of PM n identified by solving P2, and O∗
in is the
resources allocation strategy profile including all PMs’ optimal
computing resources decision, i.e., O∗
in = [O∗
in,1, . . . ,O∗
in,N ].
In addition, p∗
n is denoted as the optimal service pricing to PM
n, and p∗ = [p∗
1, . . . , p∗
n] as the payment profile to all PMs.
A SE is defined as a strategy (O∗
in, p∗) such that none of the
PM and task vehicle can improve its utility through unilateral
deviating.
Definition 1: A profile of strategies (O∗
in, p∗) is a SE for the
Stackelberg game if the solution of the following optimization
problem is given as follows:
(O∗
in, p∗) = arg max
Oin∈�
Ut (Oin, p)
s.t. p∗
n = arg max
pn∈An
Up,n, ∀n = 1, · · · , N
(18)
where the service pricing set of PM n is denoted as:
An = {pn|pn ∈ [0, pth]}, ∀n = 1, · · · , N. (19)
and the feasible computing resources assigned to the task
vehicle is denoted as:
� = {Oin |Oin,n ∈ [0,On], ∀n = 1, · · · , N}. (20)
A. Stackelberg Equilibrium
We show that our problem can achieve a Stackelberg
equilibrium. In this equilibrium, the task vehicle maximizes its
utility based on the optimal service pricing strategy, and each
PM maximizes its utility by the optimal resources allocation
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
17776 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
strategy. Therefore, the optimal strategy is the equilibrium
strategy for each PM. The definition of Stackelberg equilib-
rium corresponding to the proposed Stackelberg game is given
in the following.
Let p∗ be the solutions for P1, and O∗
in be a solution
for Problem P2. Then, the point (O∗
in, p∗) is a Stackelberg
Equilibrium point for the proposed game if any (Oin, p)
with Oin � 0, p � 0, and the following conditions are
satisfied:
Ut (O∗
in, p∗) ≥ Ut (O∗
in , p), (21)
Up,n(O∗
in,n , p∗
n) ≥ Up,n(Oin,n , p∗
n), (22)
Generally, the Stackelberg Equilibrium for a Stackelberg
game can be obtained by finding its sub-game perfect Nash
Equilibrium (NE). It is easy to see that the PMs strictly
compete in a non-cooperative fashion. Therefore, a non-
cooperative resources control subgame can build on the PMs’
side. For a non-cooperative game, NE is the operating point(s)
at which no player can improve utility by changing strat-
egy unilaterally, assuming everyone else continues to use its
current policy. On the task vehicle’s side, the best response
can be readily obtained by solving Problem 1. To achieve
this end, the best response functions for the followers (PMs)
must be obtained first, since the leader (task vehicle) derives
its best response function based on those of the followers.
We assume that the task vehicle pays each PM a different
service pricing. We thus prefer this pricing scheme as non-
uniform pricing. In addition, we also consider a special
case of this pricing scheme referred to as uniform pricing,
in which the task vehicle pays each PM the same price, i.e.,
pn = p,∀n.
Lemma 1: The resources allocation strategy set of each PM
is nonempty, convex, and compact.
Proof: The first-and second-order derivative of Up,n to
Oin,n are described as following, respectively,
The first-order derivatives of Up,n to Oin,n is:
∂Up,n
∂Oin,n
= ∂{(pn − bn)Oin,n +(rn − bn)(S(Oin,n) − S(0) − Oin,n)}
∂Oin,n
= pn − rn − (rn − bn)
Fn
e(1−On−Oin,n
Fn
). (23)
The second-order derivatives of Up,n to Oin,n is:
∂2Up,n
∂O2
in,n
= ∂{pn − rn − (rn−bn)
Fn
e(1−On−Oin,n
Fn
)}
∂Oin,n
= − (rn − bn)
F2
n
e(1−On−Oin,n
Fn
). (24)
By taking Eq. (23) to zero, we obtain the best response as
follows:
O∗
in,n(pn) = On − Fn(1 − ln
Fn(pn − rn)
rn − bn
). (25)
We regard the nth payment threshold by setting Oin,n = 0
and Oin,n = On , denoted by
pn = rn − bn
Fn
e1−On
Fn + rn . (26)
pn = rn − bn
Fn
e + rn. (27)
As the computing resources and service pricing are searched in
limited regions An,∀n = 1, · · · , N and �, this lemma holds.
Lemma 2: Given service pricing pn, the suitable allocated
computation resources of PM Oin,n satisfy
O∗
in,n =
⎧⎪⎨
⎪⎩
0, pn ≤ pn
O∗
in,n(pn), pn < pn ≤ pn
On pn ≥ pn
(28)
Proof: If pn ≤ pn , the PM is not willing to provide
computing resources for processing subtasks because of low
profit. Moreover, when pn ≤ pn , ∂Up,n
∂Oin,n
< 0, the utility of
the task vehicle decreases with the increase of the allocated
computing resources. Thus, the optimal resources allocated to
the task vehicle is 0. If pn < pn ≤ pn, the task vehicle and
the fixed users of the PM n is a competitive relationship on
the computing resources. The optimal decision on allocated
computing resources of PM n is expressed by Eq. (25). For the
task vehicle, the service pricing is impacted by the allocated
resources. Meanwhile, for the PM n, the allocated resources
are the function of the service pricing. The higher service
pricing, the more allocated resources, which is not conducive
to the continuation of computing service. Thus, specifying the
upper limit of the service pricing is necessary. When pn ≥ pn ,
the allocated resources of PM n is defined as On . Any payment
higher than pn cannot bring more benefit for the task vehicle
but will lead to a higher payment. Hence, when pn ≥ pn , the
optimal resources is On .
To describe the relationship between computing resources
and serving pricing, the first-order partial derivative of
O∗
in,n(pn) to pn is described by:
∂O∗
in,n
∂pn
=
⎧⎨
⎩
0, pn ≤ pn or pn ≥ pn
Fn
pn − rn
, pn < pn ≤ pn.
(29)
The second-order partial derivative of O∗
in,n (pn) to pn is:
∂2O∗
in,n
∂p2
n
=
⎧⎨
⎩
0, pn ≤ pn or pn ≥ pn
− Fn
(pn − rn)2 , pn < pn ≤ pn.
(30)
Substituting Eq.(25) into Eq.(14), the Ut (Oin, p) at the task
vehicle side can be formulated as:
Ut (O∗
in, p) = eϑS − eϑ(S−�
n∈N On−Fn(1−ln Fn (pn−rn )
rn −bn
))
−Ev Pv
�
n∈N
On − Fn(1 − ln Fn (pn−rn )
rn−bn
)
Cv,n
−
�
n∈N
(pnOn − Fn(1 − ln
Fn(pn − rn)
rn − bn
)).
(31)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17777
Description the concave of P1: substituting the optimal
O∗
in,n into P1, the optimization problem at the task vehicle
side can be formulated as:
P3 : max Ut (O∗
in , p) (32a)
s.t. pn(Oin,n) ∈ [pn, pn], n ∈ N (32b)
Pv = Pv,n ≥ 0, n ∈ N (32c)
where (32b) indicates the range of the optimal service pricing,
(32c) implies the non-negativity of the transmission power
from the task vehicle to the PMs.
B. Serving Pricing Decision
In order to get the optimal service pricing, we first take
the first derivative of Ut (O∗
in, p) to pn , which is formulated
as (33), shown at the bottom of the page. For the optimal
service pricing p∗
n , it should satisfy some criterion, such as,
p∗
n ∈ [pn, pn], and p∗
n + Ev Pv
Cv,n
≤ eϑ(S−�
n∈N O∗
in,n ). When
p∗
n < pn,
∂Ut (O∗
in ,p)
∂pn
= 0. The PM n rejects to provide
computing resources to the task vehicle. When p∗
n ≥ pn,
∂Ut (O∗
in ,p)
∂pn
= −O∗
in,n , the utility of the task vehicle decreases
with the increase of the service pricing. Thus, the range
of the optimal pricing is p∗
n ∈ [pn, pn]. If p∗
n + Ev Pv
Cv,n
>
eϑ(S−�
n∈N O∗
in,n ), then
∂Ut (O∗
in ,p)
∂pn
< 0, that implies that a
pricing lower than p∗
n can achieve a larger utility, which
is contradictory. Obviously, p∗
n + Ev Pv
Cv,n
≤ eϑ(S−�
n∈N O∗
in,n )
holds.
The second-order partial derivative of Ut (O∗
in, p) to pn is:
∂2Uy(O∗
in, p)
∂p2
n
=
∂{ Fn
pn−rn
(eϑ(S−�
n∈N O∗
in,n ) − Ev Pv
Cv,n
− pn) − O∗
in,n}
∂pn
= − Fn
(pn − rn)2 (eϑ(S−�
n∈N O∗
in,n ) − Ev Pv
Cv,n
− pn)
− Fn
pn − rn
(
Fn
pn − rn
eϑ(S−�
n∈N O∗
in,n ) + 2) < 0. (34)
The second-order partial derivative of Ut (O∗
in, p) to pm is:
∂2Ut (O∗
in , p)
∂pn∂pm
=
∂{ Fn
pn−rn
(eϑ(S−�
n∈N O∗
in,n ) − Ev Pv
Cv,n
− pn) − O∗
in,n}
∂pm
= − Fm
pm − rm
(
Fn
pn − rn
eϑ(S−�
n∈N O∗
in,n ) + 1) < 0. (35)
We define the Hessian Matrix H(·) of the multivariate function
Ut (O∗
in, p) as:
H =
⎡
⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎣
∂2Ut (O∗
in, p)
∂p2
1
∂2Ut (O∗
in, p)
∂p1∂p2
· · · ∂2Ut (O∗
in, p)
∂p1∂pN
∂2Ut (O∗
in, p)
∂p2∂p1
∂2Ut (O∗
in, p)
∂p2
2
· · · ∂2Ut (O∗
in, p)
∂p2∂pN
...
...
. . .
...
∂2Ut (O∗
in, p)
∂pN ∂p1
∂2Ut (O∗
in, p)
∂pN ∂p2
· · · ∂2Ut (O∗
in, p)
∂p2
n
⎤
⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎦
(36)
Since
∂2Ut (O∗
in ,p)
∂pn∂pm
< 0,
∂2Ut (O∗
in ,p)
∂p2
n
< 0, and H is a symmetric
matrix. Thus, this Hessian matrix is negative-definite if the real
number z∗Hz is negative for every nonzero complex column
vector. z∗ denotes the conjugate transpose of z. Therefore,
Ut (Oin, p) is strictly concave. And the p∗ is the unique optimal
service pricing strategy given the best resources allocation
strategies of all PMs.
Combing Lemma 1 and Lemma 2, the unique Nash
Equilibrium exists between the task vehicle and PMs in our
proposed Stackelberg game.
C. Distributed Algorithm
How to get the optimal service pricing strategy p∗ based
on the optimal resource allocation strategy is necessary.
Generally, the task vehicle and PMs can go through multiple
rounds to reach equilibrium. The Multi-round Stackelberg
Game (MRGS) reduces the computation consumption for
resource scheduling on the PM. The PM only needs to
compare the upper and lower bounds of the service pricing
and decide on the computing resources for the task vehicle.
However, the MRGS algorithm easily falls into local optimiza-
tion, and the convergence speed is slow. To achieve the highest
accuracy, we propose the Hooke-Jeeves-based Stackelberg
Game (HJSG) and obtain the optimal solution. The proposed
HJSG algorithm is described in Algorithm 2.
Theorem 1: The proposed Algorithm 2 can reach Nash
equilibrium.
Proof: As Ut (Oin, p) is strictly convex, Algorithm 2 is
guaranteed to find p∗ that maximizes Ut (Oin, p). Then, each
PM n can determine its strategy O∗
in to maximize its utility.
Accordingly, the task vehicle also obtains the fixed utility
with O∗
in . Thus, HJSG can reach the Nash equilibrium.
∂Ut (O∗
in, p)
∂pn
=
∂(eϑS − eϑ(S−�
n∈N O∗
in,n ) − Ev Pv
�
n∈N
O∗
in,n
Cv,n
− �
n∈N pnO∗
in,n)
∂pn
= ∂O∗
in,n
∂pn
(eϑ(S−�
n∈N O∗
in,n ) − Ev Pv
Cv,n
− pn) − O∗
in,n
= Fn
pn − rn
(eϑ(S−�
n∈N O∗
in,n ) − Ev Pv
Cv,n
− pn) − O∗
in,n . (33)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
17778 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
Algorithm 2 HJSG for the Optimal Service Pricing
Input: Given the initial pricing p(1) ∈ [pn, pn]n , several
coordinate directions e1, e2, . . . , en , the initial step size is
δ, acceleration factor is α ≥ 1, reduction rate is β ∈ (0, 1),
the allowable error � > 0, let y(1) = p(1), k = 1, j = 1.
Output: p∗.
Step(2) :
Calculate O( j+1)∗
in , O( j )∗
in according to Eq.25
if Ut (O
( j+1)∗
in , y( j ) + δe j ) > Ut (O
( j )∗
in , y( j )) then
y( j+1) = y( j ) + δe j
Turn to Step (4).
else
y( j+1) = y( j ), and turn to Step (4).
end if
Step(3) :
Calculate O( j−1)∗
in , O( j )∗
in according to Eq.25
if Ut (O
( j−1)∗
in , y( j ) − δe j ) > Ut (O
( j )∗
in , y( j )) then
y( j+1) = y( j ) − δe j , and turn to Step (4).
else
y( j+1) = y( j ), and turn to Step (4).
end if
Step(4) :
if j < N then
j := j + 1, and turn to Step (2)
else
Turn to Step (5)
end if
Step(5) :
Calculate O(N)∗
in , O( j )∗
in according to Eq.25
if Ut (O
(N)∗
in , y(N+1)) > Ut (O
( j )∗
in , y( j )) then
Turn to Step (6).
else
Turn to Step (7)
end if
Step(6) :
p(k+1) = y(N+1)
y(1) = p(k+1) + α(p(k+1) − p(k))
k := k + 1, j = 1, and turn to Step (2).
Step(7) :
if δ ≤ � then
Stop iteration, get the optimal service pricing p∗.
else
δ := βδ, y(1) = p(k), p(k+1) = p(k)
k := k + 1, j = 1, and turn to Step (2).
end if
D. Complexity Analysis
In this section, we prove that the proposed HJSG algorithm
can be resolved in polynomial time.
Theorem 2: The computation complexity of the proposed
HJSG algorithm is O(N(1 + k N2)), where N is a constant of
PM number, k is the steps for mode movement.
Proof : The time complexity of the HJSG algorithm mainly
contains two parts, ie., the initialization stage and the Hooke-
Jeeves stage. For the former part, the computation complexity
Fig. 6. The transactions process in Consortium Blockchain of MEPC.
is O(N), we need to get the initial service pricing according
to the revenue rn . In the Hooke-Jeeves stage, there are two
steps: detect movement and mode movement. The computation
complexity of the detect movement is O(N2), and the compu-
tation complexity of the mode movement is O(k N). Thus, the
total computation complexity Hooke-Jeeves stage is O(k N3),
and the k is the steps for updating the mode movement, N is
the complexity of Eq.25. Here, the computation complexity of
HJSG is O(N(1 + k N2)). Thus, the proposed algorithm can
be solved in polynomial time. For HJSG: non-uniform pricing
algorithm, the computation complexity is O(1 + k N)).
E. Consortium Blockchain of MEPC
Through the game-based MEPC strategy, the obtained the-
oretical results are used for transactions between the task
vehicle and MEPC. We describe the specific transactions
process in Fig 6. Each step is described as follows:
• According to the whole interaction process between the
task vehicle and MEPC, the optimal service pricing and
resource allocation strategies are finally determined.
• The task vehicle and MEPC reach a consensus on pay-
ment and resource allocation and start offloading task
segments.
• The transaction bill of the entire offloading process is
managed by the PH and sent to each PM of the MEPC.
When most PMs have no objection to the transaction bill,
the MEPC returns the receipt to the task vehicle.
• When multiple task vehicles send offloading requests to
the MEPC, frequent bill confirmations can be avoided
by packaging multiple transaction bills into blocks. PMs
confirm the transaction blocks, and the consortium nodes
store them.
VI. NUMERICAL RESULTS
In this section, we present simulation results to demonstrate
the efficiency of our proposed HJSG algorithm. The summary
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17779
TABLE II
SUMMARY OF SIMULATION PARAMETERS
Fig. 7. The Oin,n of PM n in terms of different iterations.
of simulation parameters are list in Table II. We validate the
algorithm performance in terms of convergence property, util-
ity level, service pricing, and execution delay under different
simulation configurations.
A. Convergence Property
Fig.7 shows the convergence performance of Oin,n vs.
number of iterations. As we can see, the allocated resources
of each PM decreases over iterations gradually and even-
tually converges to the desired result in finite iterations.
Namely, the optimal resources policy is obtained at the
Nash Equilibrium point. Besides, for each PM, the rev-
enue rn is different. We set a initial revenue list as rN =
[11, 27, 38, 49, 21] for all PMs. The higher value of rn , the
larger resources demand of the fixed users, which results
in greater resources competition between fixed users and
the task vehicle. The Oin,0 of r0 = 11 is the highest,
and the Oin,3 of r3 = 49 is the lowest because more
competition from PM3’s fixed users. Thus, the resources
Oin,n allocated to the task vehicle decreases while the
rn increases.
Fig. 8. The Up,n of PM n in terms of different iterations.
Fig. 9. The convergence performance of Oin,n with different rn .
Fig.8 shows the convergence performance of Up,n vs.
number of iterations. As we can observe from this figure,
the utility Up,n of PM n could converge to the desired result
in a finite time. We set the initial revenue list as rN =
[11, 27, 38, 49, 21]. For a specific PM, the higher the rn value,
the smaller resources allocated to the task vehicle. Because the
service pricing pn set by the task vehicle is generally larger
than the fixed revenue rn from the fixed users. Hence, the
smaller the rn , the greater the Up,n . The PM achieves less
than the average utility when the revenue is sufficiently large.
We will analyze the convergence performance of each index
of a specific PM later.
Fig.9 plots the Oin,n with different rn . Take the interac-
tive process of 0th PM, Oin,0 assigned to the task vehicle
can be observed in this figure. The optimal resources can
be got within finite times. The convergence speed becomes
quick with the increase of the revenue rn for 0th PM’s
fixed users. Resources allocated would not decrease infi-
nitely as r0 increases. Because the total computing resources
of a PM are finite, the task vehicle and fixed users
would not raise pricing indefinitely to compete for limited
resources. As the revenue increases, the reduction of allocated
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
17780 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
Fig. 10. The convergence performance of pn with different rn .
Fig. 11. The convergence performance of Ut with different rn .
resources is getting smaller and smaller, which indicates that
a pricing upper bound of 0th PM’s fixed users has been
reached.
Fig.10 plots the convergence performance of pn with differ-
ent revenue rn . Under such offloading environment, the task
vehicle can come to the maximum profit through strategic bid-
ding. Take 0th PM, for example. We assign rn to 9, 10, 11, 12,
respectively. To get more computing resources, the task vehicle
would give a service pricing higher than r0. The greater r0,
the higher p0.
Fig.11 plots the utility of the task vehicle relative to the iter-
ation time for different rn . With the increase in the iterations,
the utility of the task vehicle rises gradually and eventually
preserves a stable positive utility. We assign r0 to 9, 10, 11, 12,
respectively. This figure shows that the Ut approach a certain
value through the Stackelberg game. Besides, the convergence
rate is sensitive to the value of rn . The smaller revenue
means smaller ideal computation demand of fixed users. That
is more computing resources assigned to the task vehicle.
In a specific time slot, the volume of the task size is fixed.
Thus, the utility of the task vehicle can increase as revenue
decreases.
Fig. 12. The Ut and Up,n vs. number of PMs for different rn and b.
Fig. 13. The Ut vs. number of PMs for different task size.
B. Analysis of the Number of PMs on Task Vehicle’s
and PM’s Utility
Fig.12 plots the utility of task vehicle Ut and PM n Up,n by
varying the number of PMs. With the increase of PM’s number,
the utility value first increases, and then gradually converges
to a fixed value. It is observed that the revenue of rn = 9 has
the largest utility and the revenue of rn = 12 has the lowest
utility. The utility of PM n increases with the increase of PMs
at the first beginning, then it decreases if the number of PMs
continues increasing, is because the computation allocated to
each PM decreases.
Fig.13 shows the Ut vs. number of PMs for different task
size. There are mainly two situations in this figure. When
the value of task size is small, offloading process costs more
than local execution. With the increase in the number of
PMs, the more tasks the vehicle needs to offload, and the
value of the utility decreases gradually. This is why the utility
of the task vehicle decreases with the increase in the PMs’
number. With the increase in task size, the advantages of
the offloading process gradually appear. The second subfigure
describes the relationship between the Ut and PMs number
for different large-size tasks. The large the task size, the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17781
Fig. 14. The execution time and Ut vs. size of task for different schemes.
Fig. 15. The Ut vs. iterations for different schemes.
higher value of Ut . We show the relationship between Ut
and the number of PMs in the third and fourth subfigures.
With the increase of PM’s number, the utility value gradually
increases at first, and then gradually converges to a fixed
value.
C. Analysis of Performance Among Three Algorithms
There are four algorithms for comparison in this part.
They are HJSG: non-uniform pricing, HJSG: uniform pricing,
MRSG, and local process, respectively.
Fig.14 plots the utility and execution time relative to the
different task sizes. The task execution time locally increases
linearly with the task size. We assume that the computation
ability of the task vehicle is fixed. The execution time is
markedly reduced when the task vehicle offloads the task to
the MEPC. When the size of the task is small, the advantage
of the optimal results of the Stackelberg game is not obvious.
With the increase in the task size, the differentiated price has
an advantage over the uniform price. MRSG increases with
the increase in the size of the task. The larger the amount of
data, the more iterative algebra is required. For the utility of
the task vehicle, the large the task size, the greater the Ut . The
utility of HJSG is higher than the utility of MRSG.
In Fig.15, we present the convergence performance of our
proposed HGSJ: non-uniform pricing, HGSJ: uniform pricing,
and MRSG algorithm. With the increase in the iterations,
the optimal utility of the task vehicle rises gradually and
eventually preserves a stable positive utility value. The figure
shows that HJSG: non-uniform pricing outperforms HJSG:
uniform pricing and MRSG.
VII. CONCLUSION
This study proposes a collaborative computing strategy
based on an MEPC by leveraging computing resources on
multiple PMs. To stimulate the MEPC and task vehicle to par-
ticipate in computation offloading, we model the interactions
among the task vehicle and MEPC as a Stackelberg game.
Through the proposed HJSG, we can obtain optimal service
pricing and resource allocation strategies. Both the task vehicle
and PMs can maximize their utilities. Then, an equilibrium is
proven to exist in the proposed algorithm.
In our future works, we will consider more general cases
during platooning driving, where PMs may join and leave the
platoon. Namely, available resources are changeable, and we
need to analyze how the equilibrium changes, which is crucial
to study the dynamics of computation offloading. Besides, the
stochastic nature of the wireless channels and task arrivals
should be taken into account. In addition, the slotting analysis
weakens the impact of mobility and caching in vehicular
networks [35]. The mobility also affects the offloading strategy
and feedback, which is the pivotal problem to be solved in the
future.
REFERENCES
[1] Y. Wang et al., “A game-based computation offloading method in
vehicular multiaccess edge computing networks,” IEEE Internet Things
J., vol. 7, no. 6, pp. 4987–4996, Jun. 2020.
[2] L. Chen and J. Xu, “Task replication for vehicular cloud: Con-
textual combinatorial bandit with delayed feedback,” in Proc. IEEE
Conf. Comput. Commun. (INFOCOM), Paris, France, Apr. 2019,
pp. 748–756.
[3] T. Qiu, X. Wang, C. Chen, M. Atiquzzaman, and L. Liu, “TMED:
A spider-web-like transmission mechanism for emergency data in vehic-
ular ad hoc networks,” IEEE Trans. Veh. Technol., vol. 67, no. 9,
pp. 8682–8694, May 2018.
[4] K. Xiong, S. Leng, C. Huang, C. Yuen, and Y. L. Guan, “Intelligent
task offloading for heterogeneous V2X communications,” IEEE Trans.
Intell. Transp. Syst., vol. 22, no. 4, pp. 2226–2238, Apr. 2021, doi:
10.1109/TITS.2020.3015210.
[5] C. Chen, Y. Zeng, H. Li, Y. Liu, and S. Wan, “A multi-hop task offload-
ing decision model in MEC-enabled Internet of Vehicles,” IEEE Internet
Things J., early access, Jan. 20, 2022, doi: 10.1109/JIOT.2022.3143529.
[6] M. Liu and Y. Liu, “Price-based distributed offloading for mobile-
edge computing with computation capacity constraints,” IEEE Wireless
Commun. Lett., vol. 7, no. 3, pp. 420–423, Jun. 2018.
[7] Q. Wang, L. T. Tan, R. Q. Hu, and G. Wu, “Hierarchical collaborative
cloud and fog computing in IoT networks,” in Proc. 10th Int. Conf. Wire-
less Commun. Signal Process. (WCSP), Hangzhou, China, Oct. 2018,
pp. 1–7.
[8] W. Wei, R. Yang, H. Gu, W. Zhao, C. Chen, and S. Wan, “Multi-
objective optimization for resource allocation in vehicular cloud com-
puting networks,” IEEE Trans. Intell. Transp. Syst., early access,
Aug. 3, 2021, doi: 10.1109/TITS.2021.3091321.
[9] L. Zhan et al., “Vehicular computation offloading for industrial
mobile edge computing,” IEEE Trans. Ind. Informat., vol. 17, no. 11,
pp. 7871–7881, Nov. 2021.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TITS.2020.3015210
http://dx.doi.org/10.1109/JIOT.2022.3143529
http://dx.doi.org/10.1109/TITS.2021.3091321
17782 IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS, VOL. 23, NO. 10, OCTOBER 2022
[10] J. Shi, J. Du, J. Wang, and J. Yuan, “Distributed V2V computation
offloading based on dynamic pricing using deep reinforcement learn-
ing,” in Proc. IEEE Wireless Commun. Netw. Conf. (WCNC), Seoul,
South Korea, May 2020, pp. 1–6.
[11] N. Eshraghi and B. Liang, “Joint offloading decision and resource
allocation with uncertain task computing requirement,” in Proc. IEEE
Conf. Comput. Commun. (INFOCOM), Paris, France, Apr. 2019,
pp. 1414–1422.
[12] B. Ji et al., “Survey on the Internet of Vehicles: Network architectures
and applications,” IEEE Commun. Standards Mag., vol. 4, no. 1,
pp. 34–41, Mar. 2020.
[13] X. Xu, X. Zhang, X. Liu, J. Jiang, L. Qi, and M. Z. A. Bhuiyan,
“Adaptive computation offloading with edge for 5G-envisioned Inter-
net of Connected Vehicles,” IEEE Trans. Intell. Transp. Syst.,
vol. 22, no. 8, pp. 5213–5222, Aug. 2021, doi: 10.1109/TITS.2020.
2982186.
[14] S.-S. Lee and S. Lee, “Resource allocation for vehicular fog computing
using reinforcement learning combined with heuristic information,”
IEEE Internet Things J., vol. 7, no. 10, pp. 10450–10464, Oct. 2020,
doi: 10.1109/jiot.2020.2996213.
[15] S. Wan, S. Ding, and C. Chen, “Edge computing enabled video segmen-
tation for real-time traffic monitoring in Internet of Vehicles,” Pattern
Recognit., vol. 121, Jan. 2022, Art. no. 108146.
[16] E. Lee, E.-K. Lee, M. Gerla, and S. Y. Oh, “Vehicular cloud networking:
Architecture and design principles,” IEEE Commun. Mag., vol. 52, no. 2,
pp. 148–155, Feb. 2014.
[17] S. Fu, L. Ma, M. Atiquzzaman, and Y.-J. Lee, “Architecture and
performance of SIGMA: A seamless mobility architecture for data
networks,” in Proc. IEEE Int. Conf. Commun. (ICC), Seoul, South Korea,
vol. 5, May 2005, pp. 3249–3253.
[18] M. Liwang, J. Wang, Z. Gao, X. Du, and M. Guizani, “Game theory
based opportunistic computation offloading in cloud-enabled IoV,” IEEE
Access, vol. 7, pp. 32551–32561, 2019.
[19] S. Malik, H. A. Khattak, Z. Ameer, U. Shoaib, H. T. Rauf, and
H. Song, “Proactive scheduling and resource management for connected
autonomous vehicles: A data science perspective,” IEEE Sensors J.,
vol. 21, no. 22, pp. 25151–25160, Nov. 2021.
[20] S. Ucar, T. Higuchi, and O. Altintas, “Platoon as a mobile vehicular
cloud,” in Proc. IEEE Globecom Workshops (GC Wkshps), Waikoloa,
HI, USA, Dec. 2019, pp. 1–6.
[21] A. Sarker, C. Qiu, and H. Shen, “Connectivity maintenance for next-
generation decentralized vehicle platoon networks,” IEEE/ACM Trans.
Netw., vol. 28, no. 4, pp. 1449–1462, Aug. 2020.
[22] M. Nasimi, M. A. Habibi, and H. D. Schotten, “Platoon-
assisted vehicular cloud in VANET: Vision and challenges,” 2020,
arXiv:2008.10928.
[23] K. Xiong, S. Leng, C. Huang, C. Yuen, and L. Guan, “Intelli-
gent task offloading for heterogeneous V2X communications,” 2020,
arXiv:2006.15855.
[24] T. Cui, Y. Hu, B. Shen, and Q. Chen, “Task offloading based on Lya-
punov optimization for MEC-assisted vehicular platooning networks,”
Sensors, vol. 19, no. 22, p. 4974, Nov. 2019.
[25] T. Cui, X. Fan, C. Cao, and Q. Chen, “Minimum cost offloading decision
strategy for collaborative task execution of platooning assisted by MEC,”
in Proc. Int. Conf. Commun. Netw. China, Cham, Switzerland, 2019,
pp. 104–115.
[26] X. Ma, J. Zhao, Q. Li, and Y. Gong, “Reinforcement learning based task
offloading and take-back in vehicle platoon networks,” in Proc. IEEE
Int. Conf. Commun. Workshops (ICC Workshops), Shanghai, China,
May 2019, pp. 1–6.
[27] K. Zhang, Y. Mao, S. Leng, Y. He, and Y. Zhang, “Mobile-edge
computing for vehicular networks: A promising network paradigm
with predictive off-loading,” IEEE Veh. Technol. Mag., vol. 12, no. 2,
pp. 36–44, Jun. 2017.
[28] Z. Zhang, Z. Hong, W. Chen, Z. Zheng, and X. Chen, “Joint computation
offloading and coin loaning for blockchain-empowered mobile-edge
computing,” IEEE Internet Things J., vol. 6, no. 6, pp. 9934–9950,
Dec. 2019.
[29] Z. Zheng, J. Pan, and L. Cai, “Lightweight blockchain consensus
protocols for vehicular social networks,” IEEE Trans. Veh. Technol.,
vol. 69, no. 6, pp. 5736–5748, Jun. 2020.
[30] Y. Xiao, Q. Pei, L. Yao, and X. Wang, “RecRisk: An enhanced
recommendation model with multi-facet risk control,” Expert Syst. Appl.,
vol. 158, Nov. 2020, Art. no. 113561.
[31] X. Sun and Y. Yin, “An auction mechanism for platoon leader determi-
nation in single-brand cooperative vehicle platooning,” Econ. Transp.,
vol. 28, Dec. 2021, Art. no. 100233.
[32] Y. Xiao, Q. Pei, T. Xiao, L. Yao, and H. Liu, “MutualRec: Joint friend
and item recommendations with mutualistic attentional graph neural
networks,” J. Netw. Comput. Appl., vol. 177, Mar. 2021, Art. no. 102954,
doi: 10.1016/j.jnca.2020.102954.
[33] C. Chen, J. Jiang, Y. Zhou, N. Lv, X. Liang, and S. Wan, “An edge
intelligence empowered flooding process prediction using Internet of
Things in smart city,” J. Parallel Distrib. Comput., vol. 165, pp. 66–78,
Jul. 2022.
[34] C. Sun and A. Eskandarian, “A predictive frontal and oblique collision
mitigation system for autonomous vehicles,” ASME Lett. Dyn. Syst.
Control, vol. 1, no. 4, Oct. 2021, Art. no. 041012.
[35] C. Wang, C. Chen, Q. Pei, Z. Jiang, and S. Xu, “An information
centric in-network caching scheme for 5G-enabled Internet of Connected
Vehicles,” IEEE Trans. Mobile Comput., early access, Dec. 21, 2021,
doi: 10.1109/TMC.2021.3137219.
Tingting Xiao received the B.Eng. degree in com-
munication engineering from the Xi’an University of
Technology, Xi’an, China, in 2017. She is currently
pursuing the Ph.D. degree with Xidian University,
Xi’an. Her research interests include wireless com-
munication, the Internet of Vehicle, blockchain, and
mobile edge computing.
Chen Chen (Senior Member, IEEE) received the
B.Eng., M.Sc., and Ph.D. degrees in telecommunica-
tion from Xidian University, Xi’an, China, in 2000,
2006, and 2008, respectively. He was a Visiting Pro-
fessor at the Department of Electrical Engineering
and Computer Science, The University of Tennessee
at Knoxville, Knoxville, TN, USA, and the Depart-
ment of Computer Science, University of California.
He is currently a Professor with the Department of
Telecommunication and a member of the State Key
Laboratory of Integrated Service Networks, Xidian
University. He is also the Director of the Xi’an Key Laboratory of Mobile
Edge Computing and Security and the Intelligent Transportation Research
Laboratory, Xidian University. He has authored/coauthored two books and
over 130 scientific papers in international journals and conference proceed-
ings. He has contributed to the development of five copyrighted software
systems and invented over 100 patents. He is a Senior Member of the China
Computer Federation (CCF) and the China Institute of Communications (CIC).
He serves as the general chair, PC chair, workshop chair, and a TPC member
for a number of conferences.
Qingqi Pei (Senior Member, IEEE) received the
B.S., M.S., and Ph.D. degrees in computer science
and cryptography from Xidian University, Xi’an,
China, in 1998, 2005, and 2008, respectively. He is
currently a Professor and a member of the State
Key Laboratory of Integrated Services Networks,
Xidian University. His research interests include
digital contents protection and wireless networks,
and security. He is a Professional Member of ACM
and a Senior Member of the Chinese Institute of
Electronics and China Computer Federation.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/jiot.2020.2996213
http://dx.doi.org/10.1016/j.jnca.2020.102954
http://dx.doi.org/10.1109/TMC.2021.3137219
http://dx.doi.org/10.1109/TITS.2020.2982186
http://dx.doi.org/10.1109/TITS.2020.2982186
XIAO et al.: CONSORTIUM BLOCKCHAIN-BASED COMPUTATION OFFLOADING USING MEPC IN IoV 17783
Houbing Herbert Song (Senior Member, IEEE)
received the Ph.D. degree in electrical engineering
from the University of Virginia, Charlottesville,
VA, USA, in August 2012.
In August 2017, he joined the Department
of Electrical Engineering and Computer
Science, Embry–Riddle Aeronautical University,
Daytona Beach, FL, USA, where he is currently
a Tenured Associate Professor and the Director of
the Security and Optimization for Networked Globe
Laboratory (SONG Lab) (www.SONGLab.us).
He is the author of more than 100 articles and the inventor of two patents.
He is an Editor of eight books, including Smart Transportation: AI Enabled
Mobility and Autonomous Driving, (CRC Press, 2021), Big Data Analytics
for Cyber-Physical Systems: Machine Learning for the Internet of Things,
(Elsevier, 2019), Smart Cities: Foundations, Principles and Applications,
(Hoboken, NJ, USA: Wiley, 2017), Security and Privacy in Cyber-Physical
Systems: Foundations Principles and Applications, (Chichester, U.K.: Wiley-
IEEE Press, 2017), and Cyber-Physical Systems: Foundations, Principles
and Applications, (Boston, MA, USA: Academic Press, 2016). His research
has been sponsored by federal agencies (including the U.S. Department of
Transportation, National Science Foundation, Federal Aviation Administra-
tion, U.S. Department of Defense, and Air Force Research Laboratory) and
industry. His research has been featured by popular news media outlets, includ-
ing IEEE GlobalSpec’s Engineering360, Association for Unmanned Vehicle
Systems International (AUVSI), Fox News, USA Today, U.S. News & World
Report, Forbes, The Washington Times, WFTV, and New Atlas. His research
interests include cyber-physical systems/the Internet of Things, cybersecurity
and privacy, AI/machine learning/big data analytics, unmanned aircraft sys-
tems, connected vehicle, and wireless communications and networking.
Dr. Song is a Senior Member of ACM and an ACM Distinguished Speaker.
He was a recipient of nine Best Paper Awards. He has been serving as
an Associate Technical Editor for IEEE Communications Magazine since
2017, an Associate Editor for IEEE INTERNET OF THINGS JOURNAL since
2020, IEEE TRANSACTIONS ON INTELLIGENT TRANSPORTATION SYSTEMS
since 2021, and IEEE JOURNAL ON MINIATURIZATION FOR AIR AND SPACE
SYSTEMS (J-MASS) since 2020, and a Guest Editor for IEEE JOURNAL ON
SELECTED AREAS IN COMMUNICATIONS (J-SAC), IEEE NETWORK, IEEE
TRANSACTIONS ON INDUSTRIAL INFORMATICS, IEEE SENSORS JOURNAL,
and IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS. He is a
Highly-Cited Researcher identified by Clarivate in 2021 and a Top 1000 Com-
puter Scientist identified by Research.com.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:06:05 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Black & White)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Tags
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 524288
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo true
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments true
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /AdobeArabic-Bold
    /AdobeArabic-BoldItalic
    /AdobeArabic-Italic
    /AdobeArabic-Regular
    /AdobeHebrew-Bold
    /AdobeHebrew-BoldItalic
    /AdobeHebrew-Italic
    /AdobeHebrew-Regular
    /AdobeHeitiStd-Regular
    /AdobeMingStd-Light
    /AdobeMyungjoStd-Medium
    /AdobePiStd
    /AdobeSansMM
    /AdobeSerifMM
    /AdobeSongStd-Light
    /AdobeThai-Bold
    /AdobeThai-BoldItalic
    /AdobeThai-Italic
    /AdobeThai-Regular
    /ArborText
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /BellGothicStd-Black
    /BellGothicStd-Bold
    /BellGothicStd-Light
    /ComicSansMS
    /ComicSansMS-Bold
    /Courier
    /Courier-Bold
    /Courier-BoldOblique
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /Courier-Oblique
    /CourierStd
    /CourierStd-Bold
    /CourierStd-BoldOblique
    /CourierStd-Oblique
    /EstrangeloEdessa
    /EuroSig
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Helvetica
    /Helvetica-Bold
    /Helvetica-BoldOblique
    /Helvetica-Oblique
    /Impact
    /KozGoPr6N-Medium
    /KozGoProVI-Medium
    /KozMinPr6N-Regular
    /KozMinProVI-Regular
    /Latha
    /LetterGothicStd
    /LetterGothicStd-Bold
    /LetterGothicStd-BoldSlanted
    /LetterGothicStd-Slanted
    /LucidaConsole
    /LucidaSans-Typewriter
    /LucidaSans-TypewriterBold
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MinionPro-Bold
    /MinionPro-BoldIt
    /MinionPro-It
    /MinionPro-Regular
    /MinionPro-Semibold
    /MinionPro-SemiboldIt
    /MVBoli
    /MyriadPro-Black
    /MyriadPro-BlackIt
    /MyriadPro-Bold
    /MyriadPro-BoldIt
    /MyriadPro-It
    /MyriadPro-Light
    /MyriadPro-LightIt
    /MyriadPro-Regular
    /MyriadPro-Semibold
    /MyriadPro-SemiboldIt
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /Symbol
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Webdings
    /Wingdings-Regular
    /ZapfDingbats
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 600
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 600
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 300
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 900
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.33333
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /Unknown
  /CreateJDFFile false
  /Description <<
    /ENU ()
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice