Computation Offloading in Untrusted MEC-Aided Mobile Blockchain IoT Systems
IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021 8333
Computation Offloading in Untrusted MEC-Aided
Mobile Blockchain IoT Systems
Yiping Zuo , Shi Jin , Senior Member, IEEE, and Shengli Zhang , Senior Member, IEEE
Abstract— Deploying a mobile edge computing (MEC) server
in the mobile blockchain-enabled Internet of things (IoT) system
is a promising approach to improve the system performance, how-
ever, it imposes a significant challenge on the trust of the MEC
server. To address this problem, we first propose an untrusted
MEC proof of work (PoW) scheme in mobile blockchain networks
where plenty of nonce hash computing demands can be offloaded
to the MEC server. Then, we design a nonce ordering algorithm
for this scheme to provide fairer computing resource allocation
for all mobile IoT devices/users. Specifically, we formulate the
user’s nonce selection strategy as a non-cooperative game, where
utilities of the individual user are maximized in the untrusted
MEC-aided mobile blockchain networks. We also prove the
existence of Nash equilibrium and analyze that the cooperation
behavior is unsuitable for blockchain-enabled IoT devices by
using the repeated game. Finally, we design the blockchain’s
difficulty adjustment mechanism to ensure stable block times
during a long period of time. Compared with the weighted
round-robin algorithm, our proposed nonce ordering algorithm
can provide fairer computation resources and optimal nonce
selection strategies for all mobile users. Network stability is
gained through the proposed blockchain’s difficulty adjustment
mechanism. The analysis and optimization results provide valu-
able design insights for practical mobile blockchain IoT systems.
Index Terms— Mobile edge computing, blockchain, IoT, nonce
ordering, non-cooperative game.
I. INTRODUCTION
AS AN emerging frontier technology, blockchain has
received increasing attention in recent years. The suc-
cess of the blockchain concept is ultimately connected with
Bitcoin [2]. Blockchain technology is not only limited in Bit-
coin, but also used in the wireless communication area, such
as Internet of things (IoT) [3]–[8], edge computing [9]–[13],
Manuscript received October 12, 2019; revised June 5, 2020 and May 2,
2021; accepted June 8, 2021. Date of publication June 30, 2021; date
of current version December 10, 2021. This work was supported in part
by the National Key Research and Development Program of China under
Grant 2019YFB1803400, in part by the National Natural Science Foundation
of China under Grant 61921004, and in part by research grants from the
Chinese NSF project under Grant 61771315. This article was presented in
part at the 2020 IEEE/CIC International Conference on Communications in
China (ICCC), Chongqing, China, August 2020 [1]. The associate editor
coordinating the review of this article and approving it for publication was
K. R. Chowdhury. (Corresponding author: Shi Jin.)
Yiping Zuo and Shi Jin are with the National Mobile Communications
Research Laboratory, Southeast University, Nanjing 210096, China (e-mail:
zuoyiping@seu.edu.cn; jinshi@seu.edu.cn).
Shengli Zhang is with the College of Information Engineering, Shenzhen
University, Shenzhen 518060, China (e-mail: zsl@szu.edu.cn).
Color versions of one or more figures in this article are available at
https://doi.org/10.1109/TWC.2021.3091861.
Digital Object Identifier 10.1109/TWC.2021.3091861
spectrum sharing [14], [15], and interference manage-
ment [16]. The security and reliability of blockchain are
mainly determined by distributed consensus mechanisms, for
example, proof of work (PoW) mining mechanism for the
Bitcoin system [17], proof of stake for Ethereum [18], and so
on. In essence, blockchain is a tamper-proofing and distributed
database, which records transactional data without the requisi-
tion of a trusted authority or central server in the peer-to-peer
network.
However, the mining process of verifying transactional
legitimacy requires a large amount of intensive computing,
which leads to some plights such as heavy equipment and fixed
access nodes in traditional blockchain systems. To break these
barriers of traditional blockchain systems, mobile blockchain
networks with large-scale IoT devices [9]–[12] would be a bet-
ter choice in the future. Nevertheless, the PoW mining process
consumes too much computing, storage, and energy resources,
which is huge pressure for resource-limited IoT devices. Then,
mobile edge computing (MEC) servers [19]–[21] can supply
these resources for blockchain-enabled IoT devices. Deploying
MEC servers in mobile blockchain networks is a feasible way
to handle the low computing power dilemma.
A. Previous Works
Currently, there is substantial interest in investigating com-
putation offloading in the mobile blockchain IoT networks
with MEC servers [9]–[13]. For example, the work in [10]
formulated the interaction between the MEC server and users
as the two-stage Stackelberg game in mobile blockchain
networks. The Stackelberg equilibrium ensures that the MEC
server maximizes its revenue. Alternatively, it is also signifi-
cant to maximize the profit of mobile users. Auction schemes
in [11]–[13] are the feasible solutions to accomplish this goal.
The work in [12] investigated an auction-based MEC system
model to maximize the revenue of mobile users. An optimal
single-item auction for the edge computing resource allocation
was developed via a multi-layer neural network architecture
based on an analytical solution of the optimal auction in [13].
Another line of research takes content caching and different
offloading modes into consideration [22]–[25], because the
PoW consensus mechanism of mobile blockchain networks
also requires spending lots of storage resources. To tackle this
problem, the work in [23] has considered that the mining tasks
can be offloaded to nearby edge computing nodes and trans-
actional content of blocks can be cached in the MEC server.
1536-1276 © 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-4642-5824
https://orcid.org/0000-0003-0271-6021
https://orcid.org/0000-0002-7937-5870
8334 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
The paper proposed two offloading modes of offloading to the
nearby access point (AP) or a group of nearby device-to-device
(D2D) users. Besides, the research in [24] has considered
the advanced multi-access MEC server in mobile blockchain
networks. [25] considers offloading the computation-intensive
PoW mining tasks of mobile users to base stations of two
cooperative cells, and storing their block data on the cloud
service provider.
B. Novelty and Contributions
In these previous researches [9]–[13], [22]–[24], many
works investigated the resource allocation of MEC servers in
mobile blockchain networks with the assumption that MEC is
a trusted server. However, the trusted MEC server will have
an opportunity to profit from the usage of information of IoT
users [10], [23]. The MEC server will likely allocate more
computing resources to some selfish users so as to obtain
more revenue. Generally speaking, if MEC is a trusted server,
it may lead to unfair computing resource allocation for mobile
users and also increase the possibility of malicious collusion
between the MEC server and selfish users.
In this paper, we intend to obtain insights into users’
nonce selection strategies and blockchain’s difficulty adjust-
ment mechanism in our proposed untrusted MEC-aided mobile
blockchain networks. The proposed untrusted MEC PoW
scheme expands the application scenarios of the traditional
blockchain, allowing more devices to participate in mining.
In light of the above discussion, we may summarize the paper
contributions as follows.
1) We propose an untrusted MEC PoW scheme and a nonce
ordering algorithm to provide fairer nonce computing
resource allocation for users. For any user, the nonce
ordering algorithm guarantees that the probability of
successfully mining a new block corresponding to other
users is proportional to its nonce length.
2) The user’s nonce selection strategy is formulated as a
non-cooperative game, in which utilities of the individ-
ual user are maximized. We analyze the Nash equi-
librium (NE) existence of this game [26] and propose
an alternating optimization algorithm of users’ nonce
selection. Furthermore, we derive the NE in analytical
expression which only needs to know partial information
of other users and analyze that cooperation is unsuitable
for blockchain-enabled IoT devices by using the repeated
game.
3) To the best of our knowledge, none of the prior works
in [9]–[13], [22]–[25] discussed the stability of the block
time. We design the blockchain’s difficulty adjustment
mechanism to keep block times stable during a long
period of time. The mean and variance of rounds for
mining multiple blocks are derived.
4) Compared with the weighted round-robin (WRR) algo-
rithms [27], simulation results verify the effectiveness
of our proposed nonce ordering algorithm under the
untrusted MEC PoW scheme. Then, we demonstrate that
the expected user’s nonce selection strategy is influenced
by multiple system parameters jointly. The design of
blockchain’s difficulty adjustment mechanism achieves a
good performance over a long period of time.
C. Outline
The rest of the paper is organized as follows. Section II
introduces the PoW mining process and system model of
MEC-aided mobile blockchain networks. Section III represents
our proposed untrusted MEC PoW scheme and nonce ordering
algorithm. Section IV formulates the user’s nonce selection
strategy problem, designs blockchain’s difficulty adjustment
mechanism, and affords some theoretical analysis. Numerical
results are presented in Section V to confirm the analytical
results. At last, we conclude the main results of the work in
Section VI.
II. PRELIMINARIES AND SYSTEM MODEL
In this section, we will introduce the background on the
PoW mining mechanism in the Bitcoin network and MEC
system model of edge computing resource allocation for
mobile blockchain networks.
A. PoW Mining Mechanism
As a matter of fact, the PoW mining mechanism is to
prevent low-computing malicious entities from publishing
blocks arbitrarily. To obtain the billing power, nodes in the
network have to construct a block in advance and select some
unconfirmed transaction records into a new block. Then, each
node solves the PoW puzzle, making the hash value of the
block header smaller than the target value by changing nonce
randomly. The input of hash function is the block header and
the output is a 256-bit hash value. This process of solving PoW
puzzles is called mining. Once the PoW puzzle is resolved,
the newly mined block will be immediately announced to the
whole blockchain network. Meanwhile, the other nodes receive
this information and execute a validating process to decide
whether to approve and add a newly generated block to the
blockchain or not. Each extension of this block is equivalent
to an additional confirmation of the transaction in the block.
If getting 6 confirmations, the block is approved by the whole
network and encapsulated in the historical block. The miner
which successfully mines a new block will achieve a certain
number of rewards, including a fixed bonus and a variable
transaction fee, as an incentive of mining.
The Bitcoin system will control the completion time of
mining a new block in about 10 minutes. If the block time
is less than 10 minutes, the Bitcoin system will automatically
increase the difficulty value and the number of 0 at the
beginning of the target hash value. Oppositely, if the block
time is higher than 10 minutes, the number of 0 at the
beginning of the target hash value is appropriately reduced
to obtain a lower difficulty value. To simplify the explanation,
let H (·) denote the hash function which uses a cryptographic
algorithm to generate a short summary from any size of data.
X denotes block header information except for nonce. Given
an adjustable difficulty parameter h, the process of solving
PoW puzzles aims to search for a correct nonce to be included
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8335
Fig. 1. Edge computing in the mobile blockchain IoT network.
in the block. The target hash value of block header bh which
concatenates X and nonce is smaller than a target value V (h)
bh = H (X ||nonce) ≤ V (h) , (1)
where we have V (h) = 2L−h = 2L
D(h) , L denotes the
fixed length of bits, determining the searching space of hash
function, i.e., all nonce ∈
[
0, 2L − 1
]
, and D(h) is the
blockchain’s difficulty value.
B. MEC System Model
The mobile blockchain network is constrained because the
PoW mining process demands too much computing, stor-
age, and energy resources on mobile IoT devices. Instead,
the MEC server can supply these resources for mobile
blockchain-enabled IoT devices. We only consider computing
resources in this paper. Fig. 1 depicts the system model
of MEC-aided mobile blockchain networks, which includes
single MEC and N mobile IoT devices/users 1 running
blockchain application denoted as N = {1, . . . , N}. Due to
the computing limitation on mobile IoT devices, users want
to offload the task of solving the PoW puzzle to the MEC
server. Besides, all mobile IoT users send requests to the
MEC server in a time slot. Previous researches on the MEC
server in mobile blockchain networks have the assumption that
MEC is a trusted server. If MEC is a trusted server, it may
lead to unfair computing resource allocation for mobile users
and increase the possibility of malicious collusion between the
MEC server and selfish users. Consequently, we consider an
untrusted MEC server in this paper and focus on designing a
reasonable allocation mechanism to make computing resource
allocation fairer for all users.
On the other hand, each user independently selects nonces
for hash computing because the block content of each user
is different. Even though each user chooses the same nonce,
the corresponding hash is different. For mobile IoT devices,
the computation-intensive mining demand is too high (if the
1The words ‘devices’ and ‘users’ in this paper are common and no
difference.
SHA-256 hash function is used, then all nonce ∈
[
0, 232
]
).
Given the cost of renting MEC’s service and mining time,
the final user’s revenue can be reduced or even negative. Thus
we assume that each user only chooses some nonces to do
hash computing.
With the combination of the above analysis, we put forward
an untrusted MEC PoW scheme and design a nonce ordering
algorithm for this mobile blockchain network. The detailed
process of this new scheme is described in the following
Section III.
III. UNTRUSTED MEC POW SCHEME
In this section, we focus on the untrusted MEC PoW scheme
in the mobile blockchain network. We design a nonce ordering
algorithm for this scheme to achieve fairer hash computation
resources of MEC server for all mobile IoT users.
A. General Process of the Untrusted MEC PoW
Selected nonces of each user are open and transparent in the
whole network so that it can reduce the cheating possibility
by the untrusted MEC server. Then MEC server provides
hash computing service to these nonces. Mobile IoT user i
randomly selects a part of nonces as own computing demand
by vector mi for i = 1, 2, . . . , N , and the nonce number/length
of mi is denoted as Mi = |mi|. Without loss of generality,
nonces in the sequence mi are ordered from small to large by
mi =
{
mi
1, m
i
2, . . . , m
i
Mi
}
, where mi
f is the element of mi
for f = 1, 2, . . . , Mi. The MEC server, i.e., the seller, sells
the computing service, and the users, i.e., buyers, access and
consume this service from the nearby MEC. All users submit
their nonce sequence demand profile m = {m1, m2, . . . , mN}
to the MEC server. Next, we represent the general process of
the untrusted MEC PoW scheme as follows.
After having received users’ computation demands,
the MEC server provides the hash computing service and
achieves payment from all mobile IoT users. We introduce
the detailed interaction process between the MEC server and
users in the untrusted MEC PoW scheme as follows.
• Step 1: Users select nonces. Each mobile user randomly
selects some nonces as its own computing demand.
• Step 2: Submit tasks to MEC. All mobile users submit
their PoW mining tasks, i.e., the nonce hash computing
demand profile m to the MEC server.
• Step 3: MEC accepts tasks. The MEC server accepts
mining tasks for users who arrive in a time slot and
those users arriving after this time slot are not accepted.
We assume that N users submit nonce sequences to the
MEC server for hash computing in a time slot.
• Step 4: Nonce ordering. Since MEC is an untrusted
server, it is necessary to order nonces before providing
mobile users with the computing service, so that MEC
provides the computing service to users as fair and trans-
parent as possible. The nonce ordering algorithm adopted
in this paper is introduced below (see Section III-B).
• Step 5: MEC provides services. The MEC server provides
the computing service and receives payment from users.
Once a user has coped with the PoW puzzle, the MEC
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
8336 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
server will stop all tasks immediately and announce the
result to all mobile IoT users. Then a new round of
computing resource allocation will begin.
Conventional resource allocation algorithms for mobile
IoT users, such as first-come-first-served and WRR algo-
rithms [27], are formulated to provide fairer computation
resource allocation for general computing tasks. PoW mining
tasks of mobile users in this untrusted MEC PoW scheme are
special and different compared to general computing tasks.
Specifically, IoT devices offload PoW mining tasks to the
untrusted MEC server and each device is in a competitive
relationship with each other to compete for the transaction
accounting power. This causes that conventional algorithms are
not applicable here, hence it is necessary to redesign a compu-
tation resource allocation algorithm in Subsection III-B, which
is suitable for offloading PoW mining tasks and provides IoT
devices with fairer computing services.
B. Nonce Ordering
The following work highlights that how to order users’
nonces on the MEC server for providing users computing
services fairly, that is, how to map multiple nonce sequences
into a sequence. We introduce this ordering algorithm for the
untrusted MEC PoW scheme as follows. Firstly, each user’s
nonces have a local order from small to large, i.e., mi
1 <
mi
2 < . . . < mi
Mi
for i = 1, 2, . . . , N . The original N
sequences are denoted m1, m2, . . . , mN . We use another N
sequences, w1, w2, . . . , wN to denote nonces selected from
the corresponding original sequences to the merged sequence.
Initially, the sequence wi is empty for i = 1, 2, . . . , N .
As shown in Fig. 2, the untrusted MEC server selects the
top nonce in each user’s nonce sequence as the alternative set
into the candidate pool.
We intend to design a fairer nonce ordering algorithm to
select a nonce in each round. Then the remaining nonces in
the previous round are taken as elements of the next round
into the candidate pool. We desire that N nonce sequences are
merged into one sequence as shown in Fig. 2. The objective of
our ordering algorithm is that for any position in the merged
sequence, the number of selected nonces of each original
sequence is proportional to its nonce length. So the target
probability of being served for user i is
pi =
Mi∑
j∈N
Mj
, for i = 1, 2, . . . , N, (2)
and the target probability mass is P = {p1, p2, . . . , pN}. Sup-
pose the length of sequence mi is li and the length of sequence
wi is ki. In each round of nonce ordering, a nonce of each
original sequence is selected to the candidate pool as shown
in Fig. 2, and then a nonce is randomly selected among these
N nonces to the merged sequence. The index of the round is
denoted as n and lengths of sequence mi and sequence wi are
li (n) = li (n− 1)−1 and ki (n) = ki (n− 1)+1, respectively.
We calculate the expected winning probability of being served
for user i, suppose it to be qi = ki/
∑
j∈N kj and the
expected winning probability mass is Q = {q1, q2, . . . , qN}.
In each round of nonce ordering, the top nonce of the i-th
sequence mi is selected, so that there will be the distance
between probability mass P and Qi, where Qi is the expected
winning experience probability distribution of user i for i =
1, 2, . . . , N . In this case, the two probability distributions can
be rewritten by
P =
⎛
⎜⎝ M1∑
j∈N
Mj
,
M2∑
j∈N
Mj
, . . . ,
MN∑
j∈N
Mj
⎞
⎟⎠ ,
for i = 1, 2, . . . , N. (3)
Qi =
⎛
⎜⎝ k1∑
j∈N
kj + 1
, . . . ,
ki + 1∑
j∈N
kj + 1
, . . . ,
kN∑
j∈N
kj + 1
⎞
⎟⎠ ,
for i = 1, 2, . . . , N. (4)
We will take a look at the way of comparing two probability
distributions by using Kullback-Leibler(KL) divergence. Next,
we offer the definition of KL divergence as follows.
Definition 1: If we have two separate probability distribu-
tions Q(M) and P (M) over the same random variable M ,
we can measure the difference between the two distributions
using the KL divergence
DKL (Q �P ) = EM∼Q
[
log
Q (M)
P (M)
]
= EM∼Q [log Q (M)− log P (M)] . (5)
We have a target probability distribution P and wish to
approximate it with another expect winning probability dis-
tribution Qi, so that the probability of selecting each nonce
for all users is fairer for i = 1, 2, . . . , N . The KL divergence
between two probability distributions P and Qi is as follows
DKL (Qi �P ) =
N∑
i=1
qi log
qi
pi
= log
∑
j∈N
Mj∑
j∈N
kj + 1
−
⎛
⎜⎝ N∑
j=1,j �=i
⎛
⎜⎝ kj∑
j∈N
kj + 1
log
Mj
kj
⎞
⎟⎠
+
ki + 1∑
j∈N
kj + 1
log
Mi
ki + 1
⎞
⎟⎠ . (6)
By convention, in the context of information theory,
we treat these expressions as limki→0 ki log ki = 0, for
i = 1, 2, . . . , N . We have the choice of minimizing
DKL (Qi �P ) by
i∗ = arg min
i
DKL (Qi||P ) , for i = 1, 2, . . . , N. (7)
So the i∗-th user’s top nonce is selected to the merged
sequence.2 We use the similar selecting rule as (7) to select
nonces to enter into the merged sequence, then multiple users’
nonce sequences can be mapped into a sequence. Eventually,
2If there is more than one nonce choice, we select one randomly in this
case.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8337
Fig. 2. The nonce ordering for the untrusted MEC server. N original nonce sequences can be mapped into a merged sequence according to an ordering
algorithm. One nonce is selected in each round of nonce ordering, then the remaining nonces in the previous round are treated as elements of the next round
into the candidate pool. Finally, the untrusted MEC server provides hash computing services for this merged nonce sequence.
Algorithm 1 Ordering Algorithm for the Untrusted MEC PoW
Scheme
1: Initialization: input N original nonce sequences m1,
m2, . . . , mN .
2: repeat
3: for i = 1 to N do
4: Select one nonce from the mi sequence, calculate Qi
by the equation (4).
5: Then calculate the KL divergence between P and Qi
using the equation (6).
6: end for
7: In each round, select one nonce into a merged sequence
by the rule (7).
8: until all nonces of N original sequences are mapped into
a merged sequence.
combining the above analysis part, the nonce ordering algo-
rithm for the untrusted MEC PoW scheme can be obtained,
as summarized in Algorithm 1.
To analyze the performance of this untrusted MEC-aided
mobile blockchain network, we want to provide a mining
probability for each user corresponding to other users in
the following theorem under the above-proposed ordering
algorithm.
Theorem 1: For any mobile user i, the probability of suc-
cessfully mining a new block corresponding to other users is
nearest to this target probability
Pm
i =
Mi∑
i∈N
Mi
, for i = 1, 2, . . . , N. (8)
Proof: We prove this theorem by using reduction to
absurdity. We assume that the i-th mobile user’s probability of
successfully mining a new block corresponding to other users,
i.e., the probability of the untrusted MEC server providing
nonce hash computing service in the merged sequence, is not
nearest to the target probability pi under the above-proposed
ordering algorithm.
Under this assumption, it is easy to obtain that the i-th
mobile user’s nonces in the merged sequence obviously cannot
satisfy the nonce selecting rule (7) of our proposed ordering
algorithm. Meanwhile, the selecting rule (7) requires that each
selected nonce has the smallest KL divergence between the
expected winning probability and target probability distribu-
tion, namely, the expected winning probability approximates
the target probability. When the total nonce length approaches
infinity, the user’s successful mining probability is almost
equal to the target probability. Nevertheless, it directly con-
tradicts our current assumption that the i-th mobile user’s
probability of successfully mining a new block is not nearest
to the target probability. Hence, the statement in this theorem
is proved.
Remark 1 (Property of Theorem 1): Our proposed nonce
ordering algorithm in the untrusted MEC PoW scheme
achieves better fairness of computing resource allocation
among all mobile IoT users. For any position in the merged
sequence of the untrusted MEC server, the number of selected
nonces of each original sequence is proportional to its nonce
length.
Previous researches have the assumption that MEC is a
trusted server, resulting in many problems. For example, when
multiple users submit mining task requests to a trusted MEC,
users will inform the MEC server of all their information.
This will offer MEC an opportunity to profit from the usage
of this information. It is likely that the MEC server will
allocate more computing resources to some selfish users in
order to obtain more revenue. Generally speaking, if the MEC
is a trusted server, it may lead to unfair computing resource
allocation for mobile users and also increase the possibility
of malicious collusion between the MEC server and selfish
users. Accordingly, our proposed nonce ordering algorithm
in the untrusted MEC PoW scheme is more reasonable and
implement fairer computing resource distribution of MEC
server among all IoT users.
IV. SYSTEM FORMULATION AND ANALYSIS
In this section, we first present the non-cooperative game
formulation for the mobile users’ nonce selection strategy in
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
8338 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
the untrusted MEC PoW scheme. Then we analyze the NE
existence of this game and propose an alternating optimization
algorithm for users’ nonce selection. We also derive the NE
in analytical expression which only needs to know partial
information of other users. Furthermore, we analyze that
cooperation behavior is unsuitable for blockchain-enabled IoT
devices by using the repeated game. In the end, we design
the difficulty adjustment mechanism for untrusted MEC-aided
mobile blockchain networks in detail.
A. Non-Cooperative Game Formulation
In the PoW mining process, users compete to be first to
solve the PoW puzzle with the right nonce and broadcast the
block to reach agreement in the whole blockchain networks.
We describe the size of the transaction (TX) of each user by
s = (s1, . . . , sN ). The first user which successfully mines a
block and achieves agreement can get a reward F . The reward
is composed of a fixed bonus B for mining a new block and a
flexible transaction fee determined by the size of its collected
transactions s and the transaction fee rate r. Then mobile user
i’s expected reward Fi can be expressed by
Fi = (B + rsi)Pm
i , for i = 1, 2, . . . , N, (9)
where Pm
i is the probability that user i receives the reward by
contributing a block to the blockchain corresponding to other
users. From the nonce ordering algorithm above mentioned,
the probability of mining a new block is proportional to user i’s
nonce length, i.e., Pm
i = Mi/
∑
j∈N Mj , for i = 1, 2, . . . , N .
The untrusted MEC-aided blockchain network discussed in
this paper has only one MEC server. There is no fork and
the orphaning probability will not be considered. While equa-
tion (9) does not reflect the effect of blockchain’s difficulty on
the PoW mining process. Even though all users’ nonces are
provided hash computing service by the MEC server, the block
will not be mined successfully. Nonce hash computing is a
memoryless searching process, and the searching probability is
only related to the difficulty value D(h), regardless of the size
of this searching space. For a given difficulty value D(h), each
nonce hash computing is i.i.d Bernoulli trial with a successful
probability
PD =
1
D (h)
= 2−h. (10)
With this effect in mind, our equation for the i-th
user’s expected revenue gets discounted by the chance of
blockchain’s difficulty value, PD, becoming
Fi = (B + rsi) 2−h Mi∑
j∈N
Mj
, for i = 1, 2, . . . , N. (11)
Once receiving computing resource demands from all
mobile users, the MEC server provides hash computing service
for mobile users’ nonce sequences, and finally finds the correct
nonce for PoW mining. Here, we assume the price of each
hash computing for the MEC is fixed by c. The users compete
with each other to maximize their own utility by choosing
their individual nonce computing demand, which forms the
non-cooperative game G = (N,M, ui (·)) as follows:
Player: N mobile users;
Actions: Each player selects some nonces and corresponding
i-th user’s nonce length denoted as Mi;
Utility Function: The utility function ui is denoted as the
i-th user’s revenue.
The revenue of i-th user is that the achieved rewards minus
computing service cost of MEC server. Given the price of
once hash computing c, the user i determines its nonce hash
computing service demand by maximizing the expected utility
function which is given as
ui (Mi) = (B + rsi) 2−h Mi∑
j∈N
Mj
− cMi,
for i = 1, 2, . . . , N. (12)
B. NE Analysis of the Non-Cooperative Game
In this subsection, we have NE analysis of the
non-cooperative game in detail from three parts. We first prove
the existence of NE and then give the specific solution process
of NE. Finally, we also analyze the NE solution.
1) Proof of the Existence of NE: We consider this
non-cooperative game Nash equilibrium (NE) as a solution
to users’ nonce selection strategies. In this case, the NE is
obtained by using the best response function which is the
best strategy of one player given other users’ strategies. The
best response function of i-th user’s nonce selection, given
a vector of strategies offered by other users’ nonce selection
M−i, is defined as follows
Ri (M−i) = arg max
Mi
u (Mi,M−i) , (13)
where M−i = (M1, M2, . . . , Mi−1, Mi+1, . . . , MN) for i =
1, 2, . . . , N . The vector M∗ = (· · ·Mi
∗ · · ·) denotes a NE of
this game on nonce selection strategies for all users
M∗
i = Ri
(
M∗
−i
)
, ∀i = 1, 2, . . . , N, (14)
where M∗
−i denotes the vector of best responses for player j
for j �= i. The above variable Mi has the non-negative integer
constraint, making ui become a mixed integer programming
function. Here, we remove the integer restriction and solve
the optimal nonce selection strategy directly, and then get
the integer solution by rounding down to the nearest integer.
We next analyze the existence of NE in the non-cooperative
game G = (N,M, ui (·)).
Theorem 2: A NE exists in the non-cooperative game G =
(N,M, ui (·)).
Proof: First of all, the strategy space for each user is
defined to be [0, 2L − 1], which is a non-empty, convex,
compact subset of the Euclidean space. From (12), it is
easier to treat discrete functions ui as continuous functions
in [0, 2L − 1]. Then we take the first order and second-order
derivatives of (12) with Mi to prove its concavity, which can
be written as follows
∂ui (Mi)
∂Mi
= (B + rsi) 2−h
∑
M−i
(Mi +
∑
M−i)
2 − c, (15)
∂ui
2 (Mi)
∂Mi
2 = (B + rsi) 2−h −2
∑
M−i
(Mi +
∑
M−i)
3 < 0, (16)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8339
for i = 1, 2, . . . , N , and where −2
�
M−i
(Mi+
�
M−i)
3 < 0. Hence
we have proved that ui is strictly concave with respect to
Mi. Accordingly, the NE exists (see [26]-Theorem 3.2) in
the non-cooperative game (N,M, ui (·)). The proof is now
completed.
2) Specific Solution Process of NE: Mathematically,
to obtain the NE, we have to address the following set of
equations
∂ui (M)
∂Mi
= (B + rsi) 2−h
∑
M−i
(Mi +
∑
M−i)
2−c = 0, (17)
for all i = 1, 2, . . . , N . Then we can obtain the best response
function of user i by solving (17)
M∗
i =
√∑
M−i (B + rsi)
c · 2h
−
∑
M−i,
for i = 1, 2, . . . , N. (18)
The solution M∗
i , which is a NE, can be obtained by solving
the above set of linear equations by using a numerical method
when all the parameters in (18) are available. We see other
users’ nonce selection strategies as an integrated part. Assume
other parameters such as B, r, si, c, h are fixed, then we get the
first-order and second-order derivatives of (18) with
∑
M−i,
which can be written as follows
∂M∗
i
∂ (
∑
M−i)
=
1
2
√
(B + rsi)
c · 2h
(∑
M−i
)− 1
2 − 1, (19)
and
∂2M∗
i
∂(
∑
M−i)
2 = −1
4
√
(B + rsi)
c · 2h
(∑
M−i
)− 3
2
< 0,
for i = 1, 2, . . . , N. (20)
Hence we easily obtain that the i-th user’s best response
M∗
i is strictly concave with respect to other users’ nonce
selection strategies. In the first place, M∗
i increases with the
increment of
∑
M−i, and then reaching an optimal point,
it decreases when
∑
M−i increases. This conclusion is also
consistent with the subsequent simulation result of Fig. 6.
At last, combining the above analysis part, the optimal users’
nonce selection under the untrusted MEC PoW scheme can be
obtained, as summarized in Algorithm 2.
From (18), we can see that the selected nonce numbers of all
other users are known and it is apparently difficult to apply in
the actual system. For this reason, the best response function
can be rewritten in the analytical expression of Theorem 3.
Theorem 3: The NE for user i in the non-cooperative game
G = (N,M, ui (·)) is given by
M∗
i =
N − 1∑
j∈N
c·2h
B+rsj
−
⎛
⎜⎝ N − 1∑
j∈N
c·2h
B+rsj
⎞
⎟⎠
2
c · 2h
B + rsi
, for i ∈ N .
(21)
Proof: According to (17), for each user i, we have the
mathematical expression∑
M−i
(Mi +
∑
M−i)
2 =
c · 2h
B + rsi
, for i = 1, 2, . . . , N. (22)
Algorithm 2 Alternating Optimization Algorithm of Users’
Nonce Selection
1: Initialization: input data (B, r, si, c, L, h), set i = 1 and
choose M−1 ∈
[
0, 2L − 1
]
.
2: repeat
3: Fix M−i = (M1, M2, . . . , Mi−1, Mi+1, . . . , MN), and
calculate M∗
i using (18).
4: i← i + 1
5: Then update the set M−i = (M1, M2, . . . ,M
∗
i−1,
Mi+1, . . . , MN ).
6: until the optimal nonce vector M∗ = {M∗
1 , M∗
2 , . . . , M∗
N}
is obtained.
Then we calculate the summation of this expression (22)
for all users as follows
N − 1
Mi +
∑
M−i
=
∑
j∈N
c · 2h
B + rsj
, for i = 1, 2, . . . , N, (23)
we can obtain
Mi +
∑
M−i =
N − 1∑
j∈N
c·2h
B+rsj
, for i = 1, 2, . . . , N. (24)
By substituting (24) into (18), we can have
N − 1∑
j∈N
c·2h
B+rsj
=
√√√√√√B + rsi
c · 2h
⎛
⎜⎝ N − 1∑
j∈N
c·2h
B+rsj
−Mi
⎞
⎟⎠,
for i ∈ N . (25)
After squaring both sides and simple transformations,
we can obtain the NE for user i as shown in (21).
Remark 2 (Properties of Theorem 3): The analytical
expression (21) is distinct from (18), which needs to know
the global information about other users. But the analytical
expression (21) only has to know the partial information such
as the block size and the number of other users.
For ease of analysis, the above Mi is considered to be a
continuous variable value. Whereas the i-th user’s optimal
nonce length M∗
i is a non-negative integer in real systems.
Then the formula (21) is rounded down to obtain
M∗
i =
⎢⎢⎢⎢⎣ N − 1∑
j∈N
c·2h
B+rsj
−
⎛
⎜⎝ N − 1∑
j∈N
c·2h
B+rsj
⎞
⎟⎠
2
c · 2h
B + rsi
⎥⎥⎥⎥⎦ . (26)
Remark 3 (Interpretation of Formula (26)): From (26),
M∗
i is related to some parameters of this mobile blockchain
system, such as N , B, h, and so on. From the perspective of
analyzing M∗
i , the following cases will occur in the untrusted
MEC PoW scheme.
Case 1: When M∗
i ≤ 0 for no one user. We can see that
N users all participate in the mobile blockchain network for
mining block, i.e., the number of users N is unchanged, and
system parameters are all appropriate in this case.
Case 2: When M∗
i ≤ 0 for part users. Some users will
quit the mobile blockchain system, because system parameters
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
8340 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
Fig. 3. User access probability versus the number of users. B = 104, r = 2, c = 0.001 and h = 12.
are inappropriate. From the formula (26), we can see that
possible reasons result in quitting the system for some users,
for instance, the total number of users is too large, the mining
revenue of the user is too small, or the blockchain difficulty
factor is too large. Once system parameters N, b, r, h, c are
fixed, the part of users having larger block sizes will be
reserved, and some users having smaller block sizes will be
exited. After some users exit the mobile blockchain system,
we still need to continue to calculate the optimal nonce
selection strategies for the remaining users.
Case 3: When M∗
i ≤ 0 for all N users. All users exit
from the mobile blockchain system for mining, leading to
the entire system crashing dramatically. System parameters are
unsuitable exceedingly, such as the total number of users too
much large, the mining revenue of IoT user too much small,
the blockchain difficulty factor too much large. In this case,
an incentive mechanism should be designed to activate the
system.
3) Analysis of NE Solution: To demonstrate the effect of
system parameters on user access for three cases, we compare
user access probabilities for different users by changing the
fixed reward for successfully mining B and the difficulty factor
h in Fig. 3(a) and Fig. 3(b) respectively. From Fig. 3, we can
see that when N is small, all users can access the mobile
blockchain system to participate in mining block (Case 1);
when N is large, some users will quit our system (Case 2
or Case 3). The reasons are given as follows. As observed
in Fig. 3(a), the user access probability decreases with the
declining fixed reward B. This is because as B reduces, each
user can get less revenue, and thus some users decide to
quit the system. From Fig. 3(b), when h increases, the user
access probability decreases, for example, when h increases
by 60% and N > 40, the user access probability drops to 0,
i.e., the mobile blockchain system crashes dramatically. This
is because as h increases, the difficulty of mining blocks in
the mobile blockchain network increases, and thus more users
cannot deal with the PoW puzzle and then quit the system.
When N is large, or B is small, or h is large, the mobile
blockchain system is highly competitive and fewer profits, and
thus the user access probability will be low and even the entire
system will crash.
In this paper, we mainly investigate Case 1, where we
analyze the optimal number of nonces selected by each user
and the specific mathematical relationship with all system
parameters when other system parameters are fixed. When N
is larger, Case 2 or Case 3 may appear, where some users will
exit our proposed untrusted MEC-aided mobile blockchain
network. Next, we propose several mitigation methods to deal
with those shortcomings of our proposed untrusted MEC PoW
scheme: 1) Increase mining reward B and transaction rate r to
inspire more users to join the PoW mining process; 2) Reduce
the blockchain difficulty factor h in order to ease the mining
difficulty of all mobile IoT users; 3) Elevate the number of
MEC servers to provide users with more adequate resource
services for computation offloading. Some possible problems
in Case 2 or Case 3, such as how to dynamically adjust
system parameters, and how to design the incentive mechanism
for solving the problem of system crashing, are not analyzed
theoretically in this paper. These will be important research
topics in the future.
Moreover, the communication overhead focuses on uplink
overhead between the untrusted MEC server and IoT users.
Specifically, only block header and selected nonces data infor-
mation are uploaded to the MEC server. The data volume
of this uploaded information for each user is about 1Mbit,
so this part of the communication overhead is not large.
Meanwhile, the computational complexity of Algorithm 1 of
nonce ordering and Algorithm 2 of getting NE of the game
are O(NM) and O(N +1), respectively. Both algorithms are
completed in polynomial time. On the whole, our proposed
untrusted MEC-aided mobile blockchain IoT system can be
exchanged for fairer computation resource allocation with less
complexity and overhead.
Here, we will consider a special case, where we assume
to know the average block size of all mobile users and let s̄
denote the fixed average block size. Then we can rewrite the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8341
expression (26) simply as
M∗
i =
⌊
N − 1
N
B + rs̄
c · 2h
(
1− N − 1
N
)⌋
, (27)
for i = 1, 2, . . . , N . From expression (27), we can achieve
that the user’s nonce selection strategy only depends on the
total number of users N , when other parameters B, r, c, h are
fixed in the whole untrusted MEC-aided mobile blockchain
network. Moreover, we can obtain that the i-th user’s nonce
selection strategy approaches to 0 when N is sufficiently
large. In this case, all players are trying to select nonces
as much as possible, severe competition for a large number
of users often leads to low computing resource allocation.
Since the untrusted MEC server coexists over a long period
of time, the user’s nonce selection game will be played
multiple times, where the unfair competition could be handled
through mutual trust and cooperation. By repeating a game
multiple times, players can be conscious of the previous
behavior and change their strategies accordingly. Next, we use
the repeated game to boost cooperation among competitive
players.
C. Analysis by Using Repeated Game
Let T be the number of stages of the game G. The repeated
game, denoted by GT , consists of game G repeated for T + 1
time slots form t = 0 until t = T . First of all, we have to
define the utility for player i in the finitely repeated game
(FRG) (T <∞) is expressed as
Ui =
T∑
t=0
δtui [t]
=
T∑
t=0
δt
⎛
⎜⎝(B + rsi) 2−h Mi (t)∑
j∈N
Mj (t)
− cMi (t)
⎞
⎟⎠ , (28)
for i = 1, 2, . . . , N . Where δ ∈ [0, 1) is a discount factor, and
ui [t] is the payoff of player i at the t-th time slot. When δ is
closer to 1, the player is more patient.
Theorem 4: Consider FRG GT , and the one-shot stage
game G has a unique nonce selection strategy M∗. Then
GT has a unique subgame perfect equilibrium (SPE). In this
unique SPE, there is Mt = M∗ for each t = 0, 1, . . . , T
regardless of history.
Proof: By using backward induction, in the last stage T ,
we will have MT = M∗ regardless of the history of the FRG.
Then we can inversely move to the previous stage T − 1,
the sub-game also has MT −1 = M∗. With this argument
and continuing inductively, we can know that in this repeated
game GT of complete information, there exists Mt = M∗ for
t = 0, 1, . . . , T regardless of history.
Thus, FRG is impossible to bring cooperative behavior
among players. We expect the emergence of cooperative
behavior in the infinitely repeated games (IRG), denoted by
G∞. Then we define the utility for player i in the IRG
Fig. 4. Comparison of individual revenue when players take non-cooperative
and cooperative behaviors. N = 3, B = 104, r = 2, c = 0.001, s1 = 100,
s2 = 200, s3 = 300 and h = 12.
(T =∞) is calculated as
Ui = (1− δ)
+∞∑
t=0
δtui [t]
= (1− δ)
+∞∑
t=0
δt
⎛
⎜⎝(B + rsi) 2−h Mi (t)∑
j∈N
Mj (t)
−cMi (t)
⎞
⎟⎠,
(29)
for i = 1, 2, . . . , N . Where the factor 1− δ is introduced as
a normalization, to measure stage and repeated game utilities
in the same units. In this IRG, we consider a cooperation
behavior to maximize the total utility function for all players
which is given by
max
M1,M2,...,MN
utotal =
N∑
i=1
⎛
⎜⎝(B + rsi) 2−h Mi∑
j∈N
Mj
− cMi
⎞
⎟⎠
s.t. Mi > 0, for i = 1, 2, . . . , N. (30)
The above optimization problem (30) is multiple variables
non-convex problem. This optimization problem is more dif-
ficult to solve. Here, we only need simple analysis, therefore,
there is no request to address this problem. Here, we sim-
ulate individual revenues of three players in the untrusted
MEC-aided mobile blockchain network by using cooperative
and non-cooperative behaviors, as shown in Fig. 4. Parameter
settings are consistent with the later simulation Section V.
Firstly, we can see that the total revenue of the cooper-
ative behavior in IRG is much higher than that of the
non-cooperative behavior in the one-shot game. While the
individual revenues of player 1 and player 2 according to
the cooperation in repeated games do not achieve a higher
revenue than using the one-shot non-cooperative game. Con-
sequently, these players will not want to cooperate with other
players in the repeated game. By taking cooperation behavior,
the individual revenues of all players do not increase together,
therefore, the repeated game is not appropriate to analyze
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
8342 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
user’s nonce selection in our proposed untrusted MEC-assisted
mobile blockchain networks. Moreover, if block sizes for all
players are same, i.e., s1 = s2 = . . . = sN , the optimization
problem (30) will be a linear problem. In this case, all
user’s nonce selection strategies are approximately equal to 0,
which does not accord with the actual situation. This further
illustrates that the cooperation approach of the repeated game
is not feasible for IoT users in the untrusted MEC-aided mobile
blockchain networks.
D. Blockchain’s Difficulty Adjustment
Too high or too low difficulty can bring about different
mining times. The blockchain network desires to ensure a
stable average block time over long periods of time. For
the sake of making the blockchain network run smoothly,
the design of blockchain’s difficulty adjustment is necessary.
Next, we will focus more on blockchain’s difficulty adjustment
mechanism. We assume that the time for once nonce hash
computing is t0. The total nonce number denotes as M =
M1+M2+ . . .+MN for a round of interaction between MEC
server and mobile users. From the above analysis for user’s
nonce selection strategies in the non-cooperative game G,
we can obtain the total expected optimal nonce number by
M =
N − 1∑
j∈N
c·2h
B+rsj
. (31)
In one interaction, the longest time during MEC providing
computing service to users process is t0M . Each nonce hash
computing is i.i.d. Bernoulli trial with the same successful
probability, i.e., p = PD . As a result, the expected time from
starting nonce hash computing to the successful mining can
yield
E (p) =
+∞∑
k=1
t0k(1− p)k−1
p
= lim
K→+∞
t0
(
1− (1− p)K
p
−K(1− p)K
)
=
t0
p
,
(32)
where k is the number of nonces, and K denotes the upper
bound of its number. Hence users may need to selected nonces
according to multiple rounds of interaction between the MEC
server and users, so that block will be mined successfully. Let
R be the interaction rounds of mining a new block between
the MEC server and users and R should satisfy the following
inequality
t0MR ≥
t0
p
, (33)
Then we obtain
Rmin =
∑
j∈N
c·4h
B+rsj
N − 1
, (34)
where Rmin is the minimum interaction rounds between
the MEC server and users for mining a new block. Here,
we consider that each round time including the hash computing
time and transmission time between the MEC and users is
almost the same. It is assumed that a round time β is fixed
for the interaction process between users selecting nonces and
the MEC server providing computing service. Then the actual
minimum time to mine a new block is
Ta = βRmin. (35)
Consequently, we keep the threshold number of rounds
Rth fixed in the process of adjusting the difficulty, which
is equivalent to keeping block time unchanged. Next, we are
mainly interested in the average rounds for mining G blocks,
then we can obtain
R̄ =
1
G
G∑
g=1
Rg =
1
G
G∑
g=1
⎛
⎜⎝
∑
j∈N
c·4h
B+rsj(g)
N − 1
⎞
⎟⎠, (36)
where Rg denotes the interaction rounds between the MEC
server and all IoT devices for mining g-th new block. The
variance of rounds for mining G blocks is given as
var (R) =
1
G
G∑
g=1
⎛
⎜⎝ 1
G
G∑
g=1
⎛
⎜⎝
∑
j∈N
c·4h
B+rsj(g)
N − 1
⎞
⎟⎠
−
∑
j∈N
c·4h
B+rsj(g)
N − 1
⎞
⎟⎠
2
. (37)
From the above expression, we can see that the variance of
rounds only depends on the number of mining blocks when
other parameters are constant. Particularly, the variance of
these rounds will become worse with smaller block cycle G.
Then, the rule of difficulty adjustment factor h is to minimize
the distance between the average rounds for G blocks in (36)
and the threshold rounds Rth as follows
ĥ = arg min
h
∣∣R̄ − Rth
∣∣
= arg min
h
∣∣∣∣∣∣∣
1
G
G∑
g=1
⎛
⎜⎝
∑
j∈N
c·4h
B+rsj(g)
N − 1
⎞
⎟⎠−Rth
∣∣∣∣∣∣∣ . (38)
When R̄ = Rth, then the optimal difficulty adjustment
factor h∗ is expressed as follows
h∗ =
1
2
log
(N − 1)GRth
G∑
g=1
( ∑
j∈N
c
B+rsj(g)
) , (39)
where si(g) may change for mining different blocks. Even-
tually, combining the above analysis part, we update the
difficulty factor h based on previous G blocks. We propose
the blockchain’s difficulty adjustment mechanism to be sum-
marized as follows.
• Step 1: Start with an initial difficulty factor h0, yielding
the initial rounds according to equation (34).
• Step 2: Keep h0 constant over the difficulty adjustment
interval of G blocks. The average number of rounds can
be obtained by (36).
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8343
TABLE I
CHARACTERISTIC FEATURES AND KEY RESULTS OF THE PROPOSED WORK AND PRIOR WORKS
Fig. 5. Comparison of target and actual probability distributions by Algorithm 1 and WRR algorithm.
• Step 3: After G blocks, use adjustment rule (38) to
update the difficulty factor h, then get a new h∗ according
to (39).
• Step 4: Repeat this process with h∗ as an initial difficulty
factor.
It is easy to see that we will increase the difficulty factor h
if the average rounds of mining previous G blocks are shorter
than Rth, and decrease the difficulty factor h if the average
rounds of mining previous G blocks are longer than Rth.
According to this proposed difficulty adjustment mechanism,
the blockchain network can keep block times stable for a long
period of time.
V. NUMERICAL RESULTS
In this section, we demonstrate simulation results to justify
the effectiveness of our proposed nonce ordering algorithm
in an untrusted MEC PoW scheme, evaluate the expected
optimal user’s nonce selection strategies, and the perfor-
mance of blockchain’s difficulty adjustment mechanism. Here,
we consider a group of 3 users, and each user’s block size si
is uniformly distributed over (0, 1024], for i = 1, 2, 3. The
default parameter values are presented as follows: B = 104,
r = 2, c = 0.001, and h = 12. Note that some of these system
parameters are varied in different simulation scenarios.
We focus on designing a nonce ordering mechanism for
fair computation resource allocation to mobile users. Fair
performance is more important in our paper, and other prior
works have not investigated this problem. As a result, its
performance can only be compared with some conventional
fairness algorithms, such as the WRR algorithm [27], which is
done in Fig. 5. Existing researches [10], [12], [23] on mobile
blockchain networks aim at different problems, and focuses
are also different. Accordingly, a universally applicable per-
formance cannot be found to evaluate these mobile blockchain
systems. We discuss the characteristic features and key results
of the proposed work and prior works as shown in Table I.
A. Proposed Nonce Ordering Algorithm
First of all, in order to verify the rationality of our pro-
posed ordering algorithm, i.e., for any position in the merged
sequence by using Algorithm 1, the number of selected nonces
of each original sequence is proportional to its nonce length,
we consider comparing the target and actual probability dis-
tributions. Without loss of generality, we assume only three
users in the mobile blockchain system and submitted nonce
numbers have a fixed proportion as M1 : M2 : M3 = 1 : 3 : 6.
That is the target probability distribution is P = (0.1, 0.3, 0.6),
while the total nonce number M = M1+M2+M3 is changed.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
8344 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
Fig. 6. The players’ best response functions in the non-cooperative game.
Fig. 7. Nonce lengths for all users over iterations.
We compare our proposed ordering Algorithm 1 with the WRR
algorithm, where the weights of user 1, user 2, and user 3 are
1, 3, and 6, respectively.
Fig. 5 reveals the comparison of target and actual probabil-
ity distributions by Algorithm 1 and WRR algorithm. Here,
we take the first 0.2M and 0.5M nonces of the merged
sequence in Fig. 5(a) and Fig. 5(b), respectively. By using
Algorithm 1, it can be observed that actual probability has a
little error with target probability when M is small. Then it
approaches or even equals the target probability for all three
users when M increases in Fig. 5(a) and Fig. 5(b). The reason
why the performance of Algorithm 1 is not good when the
total nonce number M is small, and then the nonce length
of each user is smaller. For example, if M = 10, user 1 has
only one nonce and then we take any position of the merged
sequence to verify the rationality of the ordering algorithm.
The selected probability of user 1 mostly is 0, not the target
probability 0.1. Moreover, because of the large amount of
nonce computing in the blockchain network (e.g., the SHA-
256 hash function commonly used by Bitcoin requires 232
nonce hash computing), the shortcoming of Algorithm 1 can
be ignored when M is small. When the total nonce length
Fig. 8. Nonce lengths for all users versus the fixed reward for successfully
mining.
Fig. 9. Nonce lengths versus the transaction fee rate.
approaches infinity, the user’s successful mining probability is
nearest to the target probability.
On the other hand, the fairness performance of the WRR
algorithm is significantly worse than that of Algorithm 1. The
WRR algorithm becomes better with the increment of M ,
however, the convergence of WRR algorithm is still poor due
to the limitation of the WRR algorithm. For example, by using
the WRR algorithm, user 3 with high weight is always selected
until the number of weights is reached, and then the next
user 1 will be selected. This implies that the computing
service of MEC is consecutively provided on the same user 3,
resulting in the next user 1 with a low weight being idle and
having no smooth resource allocation. By comparing Fig. 5(a)
and Fig. 5(b), we can see that the proposed nonce ordering
algorithm described as Algorithm 1 provides a much fairer
hash computing service for all users than the WRR algorithm.
B. Nonce Selection Strategies of Users
We assume that only two users in this MEC-aided mobile
blockchain network and the parameters of block size are s1 =
100 and s2 = 200. To find the NE, we construct the best
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8345
Fig. 10. Average nonce length versus the number of users.
response functions by (14), for every player i, i = 1, 2. Then
the best response functions can be obtained by using (18)
R1 (M2) =
√
M2 (B + rs1)
c · 2h
−M2, (40)
R2 (M1) =
√
M1 (B + rs2)
c · 2h
−M1. (41)
In Fig. 6, we plot the best response functions of players
in (40) and (41). We can observe from Fig. 6 that the
best response function R1 associates a unique strategy for
player 1 to each strategy of player 2. Similarly, the best
response function R2 associates a unique strategy for player
2 to each strategy of player 1. As shown in Fig. 6, the two
best response functions intersect at a unique point (M∗
1 , M∗
2 ).
In fact, this point constitutes the unique pure-strategy NE
of the non-cooperative game. At this point, every player’s
nonce selection strategy is the best response to the other
player’s strategies, i.e., M∗
1 = R1(M∗
2 ) and M∗
2 = R2(M∗
1 ).
Thus we can conclude that this non-cooperative game exists
a unique NE. Moreover, we can see that the player’s nonce
length decreases for remaining own revenue when other
users’ length is larger than their best strategy. These simu-
lation results are consistent with the above NE analysis in
Section IV-B.
To demonstrate the performance of the proposed optimiza-
tion algorithm of the user’s nonce selection and impacts of
various parameters on nonce selection strategies, we consider
three users in this MEC-aided mobile blockchain system with
the following parameters of block size: s1 = 100, s2 =
200, s3 = 300. First, the convergence performance of the pro-
posed alternating optimization algorithm of the user’s nonce
selection is depicted in Fig. 7. We can see that the nonce length
of Algorithm 2 is unstable in the first 4 iterations. When the
iteration is larger than 4, Algorithm 2 reaches a stable state
and the gap between the proposed alternating Algorithm 2 and
the analytical solution is rather small for all users. This result
verifies the good convergence of our proposed Algorithm 2 and
the correctness of Theorem 3 about analytical expression (21).
The impacts of several parameters including fixed reward and
transaction fee rate on user’s nonce selection strategies are
investigated in Fig. 8-9.
We illustrate nonce lengths for all users versus the fixed
reward for successfully mining in Fig. 8. We observe that
optimal nonce lengths for all users increase with the increment
of fixed reward. Because of the fixed reward ascending, all
users have greater incentives to cause higher nonce hash
computing demands. Next, Fig. 9 illustrates nonce lengths
for all users versus the transaction fee rate. We can see that
optimal nonce lengths for user 2 and user 3 raise with the
transaction fee rate ascending. Nevertheless, the optimal nonce
length for user 1 reduces with the increment of the transaction
fee rate. This reason is that the transaction fee rate increases,
incentives of all users are greater to have higher nonce hash
computing demands. But the incentive of user 1 with a smaller
block size is still not much as that of user 2 and user 3, and
becomes smaller than that of the other two users when the
transaction fee rate increases.
In addition, we represent the average nonce length of all
users versus small and large numbers of users in Fig. 10(a)
and Fig. 10(b), respectively. First of all, we observe that the
average nonce length of both small and large numbers of users
described as Scheme 1 and Scheme 2, respectively, decreases
with the increment of N in this untrusted MEC-aided mobile
blockchain network. The reason for this phenomenon is that
IoT devices/users participating in the mobile blockchain min-
ing process increase with the increasing N , which means the
competition pressure for each user to mine new blocks is
heightening. Comparing Fig. 10(a) and Fig. 10(b), we can see
that the average nonce length drops faster in Scheme 1 than
that of Scheme 2 with the extending N . For example, when
s1 = . . . = sN = 100, the average nonce length in Fig. 10(a)
changes from 976 of N = 2 to 351 of N = 10. We can easily
get that the average nonce length is going to drop by 78.125 for
all users when a user is added to this mobile blockchain
system. From Fig. 10(b), the average nonce length changes
from 38 of N = 100 to 7 of N = 500. Then we can obtain
that the average nonce length will decrease by 0.0775 for every
additional user in this untrusted MEC-aided mobile blockchain
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
8346 IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, VOL. 20, NO. 12, DECEMBER 2021
Fig. 11. Block time versus the block number.
network. In a word, more mobile IoT devices/users are added
to the mobile blockchain mining process, the average nonce
length selected by each user for performing hash computing
is smaller, and the downward trend is getting slower.
C. Difficulty’s Adjustment Mechanism
In the end, to display the performance of the proposed
blockchain’s difficulty adjustment mechanism, we plot the
block time versus the block number for G = 10 and G = 2
in Fig. 11(a) and Fig. 11(b), respectively. Here, we assume
that each round time β of the interaction process between
MEC server and users is set to 120s, and the target time of
mining a block is denoted as βRth = 600s for the Bitcoin
system. Note that blue ‘*’ represents individual block times,
and the red line presents the average block time within G
block intervals. Firstly, in Fig. 11, though the individual block
time reveals a random property, the gap between the individual
block time and the target time is within one minute, which
ensures the effectiveness of our proposed difficulty adjustment
mechanism. As observed in Fig. 11(a) and Fig. 11(b), we can
see that average block times fluctuate around the target time
600s every G block intervals, because the blockchain’s diffi-
culty factor h updates every G blocks by using the proposed
blockchain’s difficulty adjustment mechanism. Meanwhile,
the variance between the average block time and the target
time of G = 2 in Fig. 11(b) is significantly larger than that
of G = 10 in Fig. 11(a), which is also consistent with the
theoretical results of the above expression (37). We can see
that the variance of these block times for smaller G becomes
particularly worse than larger G. Accordingly, we should select
appropriate block intervals in the process of adjusting the
blockchain’s difficulty value.
VI. CONCLUSION
In this paper, we have considered the untrusted MEC
PoW scheme in the mobile blockchain-enabled IoT net-
works. We have proposed a nonce ordering algorithm in this
scheme, which guarantees that the number of selected nones
of each original sequence is proportional to its nonce length
for any position in the merged sequence. Then, the user’s
nonce selection strategies have been analyzed by using a
non-cooperative game, and the NE has been considered as
the solution. Furthermore, we have illustrated that the coop-
eration approach of the repeated game is not feasible for
IoT users in mobile blockchain networks. Finally, we have
designed the blockchain’s difficulty adjustment mechanism
to keep block times stable during a long period of time.
Simulation results indicate that the nonce ordering algorithm
can allocate computing resources of the untrusted MEC
server more fairly. The mobile IoT users can achieve opti-
mal nonce selection strategies and we have verified that
the proposed blockchain’s difficulty adjustment mechanism is
effective.
REFERENCES
[1] Y. Zuo, S. Zhang, Y. Han, and S. Jin, “Computation resource allocation
in mobile blockchain-enabled edge computing networks,” in Proc.
IEEE/CIC Int. Conf. Commun. China (ICCC), Aug. 2020, pp. 617–622.
[2] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”
May 2008. [Online]. Available: https://bitcoin.org/bitcoin.pdf
[3] H.-N. Dai, Z. Zheng, and Y. Zhang, “Blockchain for Internet of Things:
A survey,” IEEE Internet Things J., vol. 6, no. 5, pp. 8076–8094,
Oct. 2019.
[4] B. Cao et al., “When Internet of Things meets blockchain: Challenges
in distributed consensus,” IEEE Netw., vol. 33, no. 6, pp. 133–139,
Nov./Dec. 2019.
[5] M. Conoscenti, A. Vetrò, and J. C. D. Martin, “Blockchain for
the Internet of Things: A systematic literature review,” in Proc.
IEEE/ACS 13th Int. Conf. Comput. Syst. Appl. (AICCSA), Dec. 2016,
pp. 1–6.
[6] M. Banerjee, J. Lee, and K.-K. R. Choo, “A blockchain future for
Internet of Things security: A position paper,” Digit. Commun. Netw.,
vol. 4, no. 3, pp. 149–160, Aug. 2018.
[7] P. Danzi, A. E. Kalor, C. Stefanovic, and P. Popovski, “Analysis of the
communication traffic for blockchain synchronization of IoT devices,”
in Proc. IEEE Int. Conf. Commun. (ICC), May 2018, pp. 1–7.
[8] P. Danzi, A. E. Kalør, Č. Stefanovič, and P. Popovski, “Delay and
communication tradeoffs for blockchain systems with lightweight IoT
clients,” IEEE Internet Things J., vol. 6, no. 2, pp. 2354–2365,
Apr. 2019.
[9] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When mobile
blockchain meets edge computing,” IEEE Commun. Mag., vol. 56, no. 8,
pp. 33–39, Aug. 2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: COMPUTATION OFFLOADING IN UNTRUSTED MEC-AIDED MOBILE BLOCKCHAIN IoT SYSTEMS 8347
[10] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/fog computing resource management and pricing for blockchain
networks,” IEEE Internet Things J., vol. 6, no. 3, pp. 4585–4600,
Jun. 2019.
[11] Y. Jiao, P. Wang, D. Niyato, and Z. Xiong, “Social welfare maximization
auction in edge computing resource allocation for mobile blockchain,”
in Proc. IEEE Int. Conf. Commun. (ICC), May 2018, pp. 1–6.
[12] Y. Jiao, P. Wang, D. Niyato, and K. Suankaewmanee, “Auction
mechanisms in cloud/fog computing resource allocation for public
blockchain networks,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 9,
pp. 1975–1989, Sep. 2019.
[13] N. C. Luong, Z. Xiong, P. Wang, and D. Niyato, “Optimal auction for
edge computing resource management in mobile blockchain networks:
A deep learning approach,” in Proc. IEEE Int. Conf. Commun. (ICC),
May 2018, pp. 1–6.
[14] S. Bayhan, A. Zubow, and A. Wolisz, “Spass: Spectrum sensing as
a service via smart contracts,” in Proc. IEEE Int. Symp. Dyn. Spectr.
Access Netw. (DySPAN), Oct. 2018, pp. 1–10.
[15] K. Kotobi and S. G. Bilén, “Blockchain-enabled spectrum access in
cognitive radio networks,” in Proc. Wireless Telecommun. Symp. (WTS),
Apr. 2017, pp. 1–6.
[16] A. E. Gamal and H. E. Gamal, “A single coin monetary mechanism
for distributed cooperative interference management,” IEEE Wireless
Commun. Lett., vol. 8, no. 3, pp. 757–760, Jun. 2019.
[17] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Proc. 34th Annu. Int. Conf. Theory
Appl. Cryptograph. Techn. (EUROCRYPT). Sofia, Bulgaria: Springer,
Apr. 2015, pp. 281–310.
[18] I. Bentov, A. Gabizon, and A. Mizrahi, “Cryptocurrencies without proof
of work,” in Proc. Int. Conf. Financial Cryptogr. Data Secur., FC
Int. Workshops Bitcoin Voting WAHC, Christ Church Barbados. Berlin,
Germany: Springer, Feb. 2016, pp. 142–157.
[19] P. Mach and Z. Becvar, “Mobile edge computing: A survey on architec-
ture and computation offloading,” IEEE Commun. Surveys Tuts., vol. 19,
no. 3, pp. 1628–1656, 3rd Quart., 2017.
[20] Y. Mao, C. You, J. Zhang, K. Huang, and K. B. Letaief, “A survey
on mobile edge computing: The communication perspective,” IEEE
Commun. Surveys Tuts., vol. 19, no. 4, pp. 2322–2358, Aug. 2017.
[21] W. Yu et al., “A survey on the edge computing for the Internet of
Things,” IEEE Access, vol. 6, pp. 6900–6919, Nov. 2018.
[22] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Distributed
resource allocation in blockchain-based video streaming systems with
mobile edge computing,” IEEE Trans. Wireless Commun., vol. 18, no. 1,
pp. 695–708, Jan. 2019.
[23] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Computation
offloading and content caching in wireless blockchain networks with
mobile edge computing,” IEEE Trans. Veh. Technol., vol. 67, no. 11,
pp. 11008–11021, Nov. 2018.
[24] Y. Wu et al., “Optimal computational power allocation in multi-access
mobile edge computing for blockchain,” Sensors, vol. 18, no. 10,
p. 3472, Oct. 2018.
[25] Y. Zuo, S. Jin, S. Zhang, and Y. Zhang, “Blockchain storage and
computation offloading for cooperative mobile-edge computing,” IEEE
Internet Things J., vol. 8, no. 11, pp. 9084–9098, Jun. 2021.
[26] H. Zhu et al., Game Theory in Wireless and Communication Networks:
Theory, Models, and Applications. Cambridge, U.K.: Cambridge Univ.
Press, 2012.
[27] L. B. Le, E. Hossain, and A. S. Alfa, “Service differentiation in multirate
wireless networks with weighted round-robin scheduling and ARQ-
based error control,” IEEE Trans. Commun., vol. 54, no. 2, pp. 208–215,
Feb. 2006.
Yiping Zuo received the B.S. degree in electronic
information science and technology from Huaiyin
Normal University, Huaian, China, in 2015, and
the M.S. degree in communication and information
systems from the Nanjing University of Posts and
Telecommunications, Nanjing, China, in 2018. She
is currently pursuing the Ph.D. degree in informa-
tion and communications engineering with Southeast
University, Nanjing. Her current research interests
include blockchain, mobile edge computing, and
next generation cellular networks.
Shi Jin (Senior Member, IEEE) received the
B.S. degree in communications engineering from
the Guilin University of Electronic Technology,
Guilin, China, in 1996, the M.S. degree from the
Nanjing University of Posts and Telecommunica-
tions, Nanjing, China, in 2003, and the Ph.D.
degree in information and communications engineer-
ing from Southeast University, Nanjing, in 2007.
From June 2007 to October 2009, he was a Research
Fellow with the Adastral Park Research Campus,
University College London, London, U.K. He is
currently a Faculty Member with the National Mobile Communications
Research Laboratory, Southeast University. His research interests include
space time wireless communications, random matrix theory, and information
theory. He and his coauthors have been awarded the 2011 IEEE Com-
munications Society Stephen O. Rice Prize Paper Award in the field of
communication theory and the 2010 Young Author Best Paper Award by
the IEEE Signal Processing Society. He has served as an Associate Editor
for the IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, IEEE
COMMUNICATIONS LETTERS, and IET Communications.
Shengli Zhang (Senior Member, IEEE) received
the B.Eng. degree in electronic engineering and
the M.Eng. degree in communication and infor-
mation engineering from the University of Science
and Technology of China (USTC), Hefei, China,
in 2002 and 2005, respectively, and the Ph.D.
degree from the Department of Information Engi-
neering, The Chinese University of Hong Kong
(CUHK), in 2008. After that, he joined the Commu-
nication Engineering Department, Shenzhen Univer-
sity, where he is currently a Full Professor. From
March 2014 to March 2015, he was a Visiting Associate Professor with
Stanford University. He is also the Pioneer of physical-layer network coding
(PNC). He has published over 20 IEEE top journal articles and ACM top
conference papers, including IEEE JOURNAL ON SELECTED AREAS IN
COMMUNICATIONS (JSAC), IEEE TRANSACTIONS ON WIRELESS COM-
MUNICATIONS (TWC), IEEE TRANSACTIONS ON MOBILE COMPUTING
(TMC), IEEE TRANSACTIONS ON COMMUNICATIONS (TCom), and ACM
MobiCom. His research interests include blockchain, physical layer network
coding, and wireless networks. He has served as a TPC member for several
IEEE conferences. He has also served as an Editor for IEEE TRANSACTIONS
ON VEHICULAR TECHNOLOGY (TVT), IEEE WIRELESS COMMUNICA-
TIONS LETTERS (WCL), and IET Communications.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:36:42 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Black & White)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Tags
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 524288
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo true
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments true
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /AdobeArabic-Bold
    /AdobeArabic-BoldItalic
    /AdobeArabic-Italic
    /AdobeArabic-Regular
    /AdobeHebrew-Bold
    /AdobeHebrew-BoldItalic
    /AdobeHebrew-Italic
    /AdobeHebrew-Regular
    /AdobeHeitiStd-Regular
    /AdobeMingStd-Light
    /AdobeMyungjoStd-Medium
    /AdobePiStd
    /AdobeSansMM
    /AdobeSerifMM
    /AdobeSongStd-Light
    /AdobeThai-Bold
    /AdobeThai-BoldItalic
    /AdobeThai-Italic
    /AdobeThai-Regular
    /ArborText
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /BellGothicStd-Black
    /BellGothicStd-Bold
    /BellGothicStd-Light
    /ComicSansMS
    /ComicSansMS-Bold
    /Courier
    /Courier-Bold
    /Courier-BoldOblique
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /Courier-Oblique
    /CourierStd
    /CourierStd-Bold
    /CourierStd-BoldOblique
    /CourierStd-Oblique
    /EstrangeloEdessa
    /EuroSig
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Helvetica
    /Helvetica-Bold
    /Helvetica-BoldOblique
    /Helvetica-Oblique
    /Impact
    /KozGoPr6N-Medium
    /KozGoProVI-Medium
    /KozMinPr6N-Regular
    /KozMinProVI-Regular
    /Latha
    /LetterGothicStd
    /LetterGothicStd-Bold
    /LetterGothicStd-BoldSlanted
    /LetterGothicStd-Slanted
    /LucidaConsole
    /LucidaSans-Typewriter
    /LucidaSans-TypewriterBold
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MinionPro-Bold
    /MinionPro-BoldIt
    /MinionPro-It
    /MinionPro-Regular
    /MinionPro-Semibold
    /MinionPro-SemiboldIt
    /MVBoli
    /MyriadPro-Black
    /MyriadPro-BlackIt
    /MyriadPro-Bold
    /MyriadPro-BoldIt
    /MyriadPro-It
    /MyriadPro-Light
    /MyriadPro-LightIt
    /MyriadPro-Regular
    /MyriadPro-Semibold
    /MyriadPro-SemiboldIt
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /Symbol
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Webdings
    /Wingdings-Regular
    /ZapfDingbats
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 600
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 600
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 300
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 900
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.33333
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /Unknown
  /CreateJDFFile false
  /Description <<
    /ENU ()
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice