A Game-theoretic Approach to Storage Offloading in PoC-based Mobile Blockchain Mining
A Game-theoretic Approach to Storage Offloading in PoC-based
Mobile Blockchain Mining
Suhan Jiang
Temple University
Suhan.Jiang@temple.edu
Jie Wu
Temple University
jiewu@temple.edu
ABSTRACT
Proof of Capacity (PoC) is an eco-friendly alternative to Proof
of Work for consensus in blockchains since it determines mining
rights based on miners‚Äô storage rather than computation. In PoC,
for every block, a miner executes hashing on part of his dedicated
storage. The miner that comes up with the smallest hash value
among all miners will win the block. PoC has yet to be applied to
mobile applications, due to the storage limitation of mobile devices.
Storage offloading can be a viable solution that allows miners to
offload mining all files to a cloud storage. In each mining round,
a miner can decide whether to mine on his local device or by a
cloud virtual machine (VM). Self-mining requires no extra cost but
it incurs download delay, which will reduce the chance of winning.
Cloud-mining experiences no delay but it brings cost on VMs. This
delay-cost tradeoff challenges each miner to determine a ratio be-
tween self-mining and cloud-mining to maximize his utility. We
model interactions among miners as a non-cooperative game and
formulate a Nash equilibrium problem to investigate the effects of
offloading on miners‚Äô utilities. We analyze the existence and unique-
ness of equilibrium and propose a distributed algorithm to achieve
the equilibrium in a uniform-delay setting. Further, we extend our
results to non-uniform delays since miners may choose different
network settings, e.g. 5G, 4G, or 3G. Both numerical evaluation
and testbed experiments on Burstcoin are conducted to show the
feasibility of storage offloading and to validate the proposed models
and theoretical results.
CCS CONCEPTS
‚Ä¢ Networks ‚Üí Mobile networks; Network economics; ‚Ä¢Mathe-
matics of computing ‚ÜíDistribution functions.
KEYWORDS
cloud storage, game theory, mobile blockchain mining, offloading,
Proof of Capacity (PoC)
ACM Reference Format:
Suhan Jiang and Jie Wu. 2020. A Game-theoretic Approach to Storage
Offloading in PoC-based Mobile Blockchain Mining. In The Twenty-first
ACM International Symposium on Theory, Algorithmic Foundations, and
Protocol Design for Mobile Networks and Mobile Computing (Mobihoc ‚Äô20),
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA
¬© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-8015-7/20/10. . . $15.00
https://doi.org/10.1145/3397166.3409136
scoop
nonce 0 . . . . . . 4095
1 =350
2 =289
3 =251
. . . . . .
=511
deadline 
‚Äôs plot file
storage
cloud service provider (CSP)
VM
(a) Plotting and mining in PoC. (b) Storage offloading.
(1)
(2)
self-mining 
cloud-mining 1
0
0
1 
0.4
0.6
miner
delay: 
Figure 1: Miners offload plot files to a cloud storage and mine blocks (1) via
cloud-mining using VMs and/or (2) via self-mining using mobile devices.
October 11‚Äì14, 2020, Boston, MA, USA. ACM, New York, NY, USA, 10 pages.
https://doi.org/10.1145/3397166.3409136
1 INTRODUCTION
There has been widespread adoption of blockchain [21] in various
fields ranging from cryptocurrency, finance, IoT to public and social
services. As a distributed ledger, a blockchain records data in the
form of linked blocks secured by cryptography. Consensus mecha-
nisms are a crucial element for every blockchain network as they
are responsible for maintaining the security and reliability of these
distributed systems. Currently, most blockchain applications are on
top of a Proof of Work (PoW) [11] mechanism or a Proof of Stake
(PoS) [24] mechanism to determine the block winning probability
of each miner. The former relies on miners‚Äô computation power to
solve cryptographical problems to win a block and hence monetary
rewards. PoW is known for its simplicity and attack resistance,
while it consumes significant electricity consumption. The latter
virtualizes the power-hungry PoW mining by attributing mining
power to the proportion of coins held by a miner. PoS can be a
viable solution for energy inefficiencies but gives rise to a trend of
system centralization since rewards go more towards miners that
already have more properties.
Recently, a new mechanism called Proof of Capacity (PoC) [1]
has emerged as a promising solution to the previously-mentioned
problems of energy efficiency and fairness. As its name implies, PoC
mining relies on idle storage capacity, i.e., miners invest disk space,
as opposed to computation in PoWmining, and the amount of space
dedicated to mining determines the chances of winning a block.
The mining process consists of two steps: one-time plotting and
repeated mining in rounds. In the plotting step, miners configure
their available storage withmining-related plot files. Fig. 1 (a) shows
minerùëöùëñ ‚Äôs plot file, which is arranged into ùë†ùëñ units. Each unit is
called a nonce and each nonce is divided into 4096 scoops. In each
mining round,ùëöùëñ executes hashing over a scoop column (which
171
http://crossmark.crossref.org/dialog/?doi=10.1145%2F3397166.3409136&domain=pdf&date_stamp=2020-10-11
Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA Suhan Jiang and Jie Wu
is randomly selected by the system to avoid miner-side cheating)
individually to get the smallest value among all cells of the scoop
column, which is calledùëöùëñ ‚Äôs deadline. A miner cannot publish a
block until his deadline comes. The one that finds the smallest
deadline among all miners wins. Since more storage space gives a
higher chance of finding the smallest deadline, a miner‚Äôs probability
of winning a block is related to the ratio between his own space to
the total space invested by all miners.
The PoC mechanism has been applied to several blockchain ap-
plications, e.g. Burstcoin [1], Chia [4], etc. However, its storage
requirement poses a challenge on mobile devices, thus hindering its
applications to mobile services. To facilitate PoC-based blockchain
application in future mobile IoT systems, storage offloading appears
to be a viable solution. Miners with mobile devices can overcome
capacity limitations by offloading all plot files to an external cloud
storage. Given that a small amount of computation is required in
each PoC mining round, a miner can execute hashing in his de-
vice by downloading corresponding scoops (self-mining) and/or
in the cloud by employing virtual machines (VMs) (cloud-mining)
provided by the cloud service provider (CSP). Fig. 1 (b) gives an ex-
ample where miners apply different mining strategies. Self-mining
requires no extra cost, but miners cannot start mining until a se-
lected scoop column (one in 4096 rather than all of his plot file) is
downloaded. The incurred download delay will reduce a miner‚Äôs
winning probability. Cloud-mining can avoid such a disadvantage,
however, it also adds miners‚Äô cost on VM employment. Thus, a
miner has to determine a suitable mining strategy, i.e., the optimal
ratio between self-mining and cloud-mining to maximize his util-
ity, based on his storage offloading decision. In Fig. 1 (b), userùëö3
deploys 40% for cloud-mining and the rest for self-mining.
In this paper, we study the interactions among multiple mobile
miners, who aim to maximize their own utilities. The individual
utility is defined as the difference between aminer‚Äôs expected payoff
and his cost, where the expected payoff is a product of the mining
reward and his winning probability. Each miner maximizes his util-
ity by deciding his strategies of both storage offloading and mining,
while the individual utility is influenced by all miners‚Äô decisions.
To solve the miners‚Äô resource management problem, we exploit
game theory and propose a non-cooperative complete-information
game to capture this complicated interplay among miners. The cor-
responding Nash equilibrium problem is then formulated. We prove
the existence of unique equilibrium through our theoretical analysis
and then propose a distributed algorithm to achieve the equilibrium.
In practice, miners can use different network settings, e.g. 3G, 4G, or
even 5G in the future, which will incur different download delays.
Thus, we extend our approach to model non-uniform delays on the
miners‚Äô strategies. Our primary contributions are as follows:
‚Ä¢ As the first work analyzing the PoC mining mechanism in
mobile applications, we derive expressions for miner win-
ning probability with delays.
‚Ä¢ We define a non-cooperative game to capture interactions
among mobile miners and formulate a Nash equilibrium
problem to optimize resource allocation among miners.
‚Ä¢ We prove and design an algorithm to obtain a unique Nash
equilibrium (NE) of the proposed game in the uniform-delay
setting, and a close-form strategy is presented for homoge-
neous miners with identical budgets.
‚Ä¢ We show the existence of NE in the non-uniform-delay set-
ting, where the uniform-delay algorithm still can be applied
to achieve an NE point.
‚Ä¢ We perform numerical evaluation and conduct testbed ex-
periments on Burstcoin and Google Cloud. The equilibria
obtained are consistent with all the theoretical results.
2 CHALLENGES AND MAIN RESULTS
This paper aims to solve a resource allocation problem for all miners
by maximizing their individual utilities. We assume that minerùëöùëñ ‚Äôs
files are all offloaded in the cloud and define his utility ùëàùëñ as the
difference between his expected payoff and his cost, denoted ùê∂ùëñ ,
where the expected payoff is a product of the mining reward ùëÖ and
his winning probability, denoted ùëÉùëñ , i.e.,ùëàùëñ = ùëÖ ¬∑ ùëÉùëñ ‚àíùê∂ùëñ . Our goal is
to find a strategy that leads to the maximal utility forùëöùëñ . However,
it is non-trivial to obtain optimal strategies for individual miners,
given that each miner‚Äôs strategy is multi-dimensional, i.e., deciding
on how many storage units to purchase and how to arrange the
ratio between cloud-mining and self-mining. All miners‚Äô strategies
can mutually affect their utilities.
Tomaximize his utility,ùëöùëñ can either increase his expected payoff
by improving his winning probability ùëÉùëñ or decrease his cost ùê∂ùëñ . ùëÉùëñ
is a complex function determined by multiple parameters. First, ùëÉùëñ
should be positively correlated withùëöùëñ ‚Äôs storage size since a bigger
storage size yields a higher chance of smaller hash values. Second,
ùëÉùëñ is also affected by other miners‚Äô strategies sinceùëöùëñ cannot win
unless his deadline is the smallest among all miners. Last, if ùëöùëñ
chooses self-mining, the incurred download delay ùëë will discount
ùëÉùëñ (detailed explanations are given later). In order to improve ùëÉùëñ ,ùëöùëñ
is encouraged to buy more storage resources and increase his cloud-
mining ratio, whichwill increase his costùê∂ùëñ . Thus, improving ùëÉùëñ and
decreasing ùê∂ùëñ are two conflicting goals.ùëöùëñ has to buy appropriate
storage units and find a reasonable mining ratio to balance ùëÉùëñ and
ùê∂ùëñ . Based on these parameters, we derive the expression of ùëÉùëñ and
verify its validity (Theorem 1).
Given the mutual effects on ùëÉùëñ and hence on ùëàùëñ , we propose a
non-cooperative game to characterize miners‚Äô complex interactions.
Thus, we turn the original resource allocation problem into a Nash
equilibrium (NE) problem, in which each miner‚Äôs NE strategy is
his optimal strategy if NE exists. In the uniform-delay network,
we prove the uniqueness of NE (Theorem 2) in the miner game.
We further extend it to a non-uniform-delay network, where the
existence of NE(s) can be proven (Theorem 3). We also provide a
distributed algorithm (Algorithm 1) to compute the unique NE point
in the uniform-delay network and provide one NE point in the non-
uniform-delay network. We also present a miner‚Äôs optimal strategy
in an explicit expression, given all miners are homogeneous on
their budgets in the uniform-delay network (Theorem 4).
3 SYSTEM MODEL AND PROBLEM
FORMULATION
This paper focuses on amobile PoCmining network. Corresponding
notations are listed in Table 1. We consider a remote CSP and a set
of ùëõ miners using mobile devices. Fig. 1 depicts an overview of this
172
Storage Offloading in PoC-based Mobile Blockchain Mining Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA
Table 1: Summary of Notations.
Symbol Description
ùëùùë† / ùëùùëê price of cloud storage / computation
ùë£ cloud computation speed
ùëë download delay from the cloud to miners
ùê∑ mining difficulty parameter controlled by the system
ùëÖ blockchain mining reward
ùëõ number of miners
ùëöùëñ the ùëñ-th miner
ùëèùëñ ùëöùëñ ‚Äôs budget
ùëàùëñ / ùëÉùëñ / ùê∂ùëñ ùëöùëñ ‚Äôs mining utility / winning probability / cost
ùë•ùëñ / ùë¶ùëñ ùëöùëñ ‚Äôs cloud / self-mining units
ùë†ùëñ storage units purchased byùëöùëñ , i.e., ùë†ùëñ =ùë•ùëñ+ùë¶ùëñ
ùëã / ùëå / ùëÜ total cloud-mining / self-mining / purchased units
ùëã‚àíùëñ total cloud-mining units exceptùëöùëñ ‚Äôs, i.e., ùëã‚àíùëñ =ùëã‚àíùë•ùëñ
ùëå‚àíùëñ total self-mining units exceptùëöùëñ ‚Äôs , i.e., ùëå‚àíùëñ =ùëå‚àíùë¶ùëñ
ùëüùëñ ùëöùëñ ‚Äôs request vector, in the form of (ùë•ùëñ , ùë¶ùëñ )
ùíì‚àíùíä / ùíì all miners exceptùëöùëñ ‚Äôs / all miners‚Äô request profile
ùëáùëñ / ùëá ùëöùëñ ‚Äôs / the whole network‚Äôs deadline
Each storage unit is tailored as a nonce size (256KB in Burstcoin).
network. The CSP can provide resources of storage and computation
at a unit price set of (ùëùùë† , ùëùùëê ). Miners participate in mining processes
by requesting storage and/or computation resources from the CSP.
We differentiate each miner ùëöùëñ in terms of his budget ùëèùëñ , which
gives an upper bound on the amount of resources he can afford.
Thus, different types of miners have different requests.ùëöùëñ ‚Äôs goal is
to find a strategy that lead to the highestùëàùëñ .
To maximize his utility,ùëöùëñ should decide on how many storage
units, denoted ùë†ùëñ , to buy from the CSP, and the ratio between cloud-
mining and self-mining. We do not directly define the ratio as a
variable, instead, we denote ùë•ùëñ as the number ofùëöùëñ ‚Äôs cloud-mining
units and ùë¶ùëñ as the number of his self-mining units, respectively.
Thus, the could-self mining ratio is captured as ùë•ùëñ/ùë¶ùëñ . Then,ùëöùëñ ‚Äôs
request is in the form of ùëüùëñ = (ùë•ùëñ , ùë¶ùëñ ). Let ùíì = {ùëü1, ¬∑ ¬∑ ¬∑ , ùëüùëõ} and
ùíì‚àíùëñ represent the request profile of all miners and all other miners
exceptùëöùëñ , respectively. For those storage units mined in the cloud,
ùëöùëñ has to to pay for the storage cost as well as the computation
cost, i.e., (ùëùùë† + ùëùùëê )ùë•ùëñ in total, while for the remaining units mined
in his own device, only storage cost of ùëùùë†ùë¶ùëñ is needed. Thus,ùëöùëñ ‚Äôs
cost is a combination of both, i.e., ùê∂ùëñ = (ùëùùë† + ùëùùëê )ùë•ùëñ + ùëùùë†ùë¶ùëñ .
As miners all want to make as much profit as possible, a com-
petition among miners forms, in which each miner optimizes his
utility by deciding his request ùëüùëñ under the current resource prices
(ùëùùë† , ùëùùëê ), while considering his own budget ùëèùëñ . Thus,ùëöùëñ ‚Äôs optimiza-
tion problem can be defined as follows.
Problem 1 (OPminer).
maximize ùëàùëñ = ùëÖ ¬∑ ùëÉùëñ ‚àíùê∂ùëñ , (1a)
subject to ùê∂ùëñ ‚â§ ùëèùëñ , ùë•ùëñ ‚â• 0, ùë¶ùëñ ‚â• 0, (1b)
where ùê∂ùëñ = (ùëùùë† + ùëùùëê )ùë•ùëñ + ùëùùë†ùë¶ùëñ . (1c)
Sinceùëöùëñ ‚Äôs winning probability ùëÉùëñ is a function of multiple pa-
rameters, including ùëöùëñ ‚Äôs request, i.e., ùëüùëñ = (ùë•ùëñ , ùë¶ùëñ ) as well as all
other miners‚Äô requests, i.e., ùíì‚àíùëñ , an accurate definition and detailed
explanations of ùëÉùëñ will be given in the following section. Each miner
ùëöùëñ aims to maximize his utility and constraint (1b) ensures thatùëöùëñ
is within its budget ùëèùëñ .
4 MINER‚ÄôS WINNING PROBABILITY
In this section, we start with a model for traditional PoC mining
(subsection 4.1), where miners contributes their disk resources
and mine in their own devices like desktop computers or laptops.
This basic model allows us to quantify the relation between the
block finding time and miners‚Äô storage size (subsection 4.2). We
then analyze how the winning probability is influenced by the
individual storage size and total storage size (subsection 4.3). We
extend the basic model to include mobile mining and formulate how
the download delay affects the winning probability (subsection 4.4).
Finally, we derive the expression for miner‚Äôs winning probability
with download delays after combining all the related parameters
(subsection 4.5).
4.1 Overview of PoC Mining
Generally, PoC mining consists of plotting and mining. The plotting
process pre-generates and stores mining-related files on miners‚Äô
storage. Fig. 1 (a) shows ùëöùëñ ‚Äôs plot file, which is arranged into ùë†ùëñ
fixed-length units (a row in Fig. 1 (a)). Each unit is called a nonce
and is evenly divided into 4096 scoops (a cell in Fig. 1 (a)). In each
mining round,ùëöùëñ retrieves the ùëó th scoop from each of his units (the
grey column in Fig. 1 (a)), where ùëó is selected by the system.ùëöùëñ
executes hashing over every retrieved scoop and gets a hash value
as a storage proof. All hash values are within the range of [0, ùê∑] and
the smallest one is measured asùëöùëñ ‚Äôs best proof, named as a deadline
(the circle in Fig. 1 (a)), which represents the waiting time beforeùëöùëñ
is allowed to publish his block. Thus, the smallest deadline in the
network will be measured as the network-wide best proof and its
owner will win the block. In fact, ùê∑ is a parameter controlling the
mining difficulty for the miners. (Note, described above is a basic
model, where a miner stores his plot file and self-mines using the
same device, not involving storage offloading and cloud mining.)
4.2 Block Finding Time and Individual Storage
Size
To find the winning probability of each player, we start by analyzing
the block finding time probability distribution. We model the block
finding time, i.e., the network-wide deadline, as a random variable
denoted ùëá . This is a function related to all miners‚Äô selection of
storage units.
4.2.1 Single miner‚Äôs distribution functions. In a mining round, a
miner can get a proof (i.e., a hash value), denoted ‚Ñé, for each of his
contributed storage units. In fact, ‚Ñé is a random variable, of which
the value is subject to a uniform distribution within the range of
[0, ùê∑] in each round. Given that minerùëöùëñ commits ùë†ùëñ units of his
storage in total, we model his deadline as a random variable denoted
ùëáùëñ . Obviously, ùëáùëñ =min
{
‚Ñé1, ¬∑ ¬∑ ¬∑ , ‚Ñéùë†ùëñ
}
. ùëáùëñ ‚Äôs cumulative distribution
function (CDF), denoted ùêπ (ùë°, ùë†ùëñ , ùê∑), can be obtained in the below.
ùêπ (ùë°, ùë†ùëñ , ùê∑) =
‚éß‚é™‚é™‚é™‚é®‚é™‚é™‚é™‚é©
0 ùë° ‚â§ 0,
1 ‚àí (1 ‚àí ùë°/ùê∑)ùë†ùëñ 0 < ùë° < ùê∑,
1 ùë° ‚â• ùê∑.
(2)
173
Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA Suhan Jiang and Jie Wu
‚Äôs deadline 
‚Äôs 
CD
F 
Figure 2: CDFs under different storage sizes given ùê∑ = 2min.
Thereupon, the corresponding probability density function (PDF),
denoted ùëì (ùë°, ùë†ùëñ , ùê∑), follows through performing derivative over
ùêπ (ùë°, ùë†ùëñ , ùê∑), as is shown in Eq. (3).
ùëì (ùë°, ùë†ùëñ , ùê∑) =
{ ùë†ùëñ
ùê∑
(1 ‚àí ùë°/ùê∑)ùë†ùëñ‚àí1 0 < ùë° < ùê∑,
0 ùëúùë°‚Ñéùëíùëüùë§ùëñùë†ùëí.
(3)
4.2.2 Whole mining network‚Äôs distribution functions. Given a min-
ing network with ùëõ miners, the block finding time can be expressed
as ùëá = min {ùëá1, ¬∑ ¬∑ ¬∑ ,ùëáùëõ}. We have already calculated the PDF and
the CDF over ùëáùëñ for ‚àÄùëñ ‚àà [1, ùëõ], thus the corresponding distribu-
tion functions ùêπùëá (ùë°, ùëÜ, ùê∑) and ùëìùëá (ùë°, ùëÜ, ùê∑) can be expressed using
Eqs. (2-3), by replacing ùë†ùëñ with ùëÜ =
‚àë
ùëó ùë† ùëó .
4.3 Influences of Total Storage Size
Now, we analyze how storage sizes affect ùëÉùëñ . Intuitively, a miner‚Äôs
winning probability should be positively related to his own storage
size, since more storage units lead to a higher chance of smaller
deadlines. Fig. (2) further confirms our guess, where ùëáùëñ ‚Äôs CDF (as
Eq. (2) describes) hits 1 faster under a larger ùë†ùëñ . Meanwhile, ùëÉùëñ
should also be affected by the total mining storage space. To capture
the exact mathematical relation between the individual winning
probability and storage sizes (both individual and total), we start
with a competition between only twominersùëöùëñ andùëö ùëó , owning the
storage sizes of ùë†ùëñ and ùë† ùëó , respectively. Obviously,ùëöùëñ wins when he
finds a smaller deadline. The probability thatùëöùëñ wins is calculated
as follows:
ùëÉùëñ = ùëÉùëü [ùëáùëñ < ùëáùëó ] =
‚à´‚à´
ùëì (ùë°ùëñ , ùë†ùëñ , ùê∑) ùëì
(
ùë° ùëó ; ùë† ùëó , ùê∑
)
dùë°ùëñdùë° ùëó
= 1 ‚àí ùë† ùëó/(ùë†ùëñ + ùë† ùëó ) = ùë†ùëñ/(ùë†ùëñ + ùë† ùëó ).
Thus, the probability thatùëöùëñ wins is proportional to his fraction of
the total storage size. That is, given a total storage of size ùëÜ ,ùëöùëñ ‚Äôs indi-
vidual winning probability is ùëÉùëñ = ùë†ùëñ/ùëÜ . Obviously, dedicating more
storage space yields a proportionally higher expectation of success-
fully mining a block. Therefore, a PoC-based incentive mechanism
can reward smaller miners fairly according to their contribution to
the network, thus incurring more distributed participation.
4.4 Influences of Delay
4.4.1 Download delay in self-mining. The expression ùë†ùëñ/ùëÜ charac-
terizes the probability thatùëöùëñ happens to hold the smallest deadline
among all miners. However, it is possible that the owner of the
smallest deadline is not the block winner. Suppose, in a certain
mining round, a minerùëöùëñ ‚Äôs deadline is 100 seconds, the smallest
one among all miners‚Äô deadlines, and another minerùëö ùëó ‚Äôs deadline
is 105 seconds, only next toùëöùëñ ‚Äôs deadline. Ifùëöùëñ finds his deadline
within 100 seconds, then he propagates his block until that time
comes and becomes the winner. However, ifùëöùëñ ‚Äôs mining is delayed
for some reason and hence he fails to finds his deadline within
105 seconds, at which timeùëö ùëó succeeds in broadcasting his block,
thenùëö ùëó becomes the winner, although he is not the owner of the
smallest deadline. Thus, with delay, a miner‚Äôs winning probability
is definitely discounted.
In the traditional PoC mining, since plot file storing and mining
happen in the same device, usually a desktop computer or a laptop,
all deadlines can be calculated before the smallest one comes. Thus,
it is just a race on miners‚Äô contributed storage. However, when
applying storage offloading, a delay, denoted ùëë , can be incurred in
self-mining due to the scoop download from the cloud to a miner‚Äôs
device. Miners cannot start self-mining until the required scoops
are downloaded. During the waiting time, if there is a deadline
no greater than ùëë calculated using VMs in the cloud, then the
corresponding block can be successfully published and rewarded,
although there may exist smaller deadlines not yet computed by self-
mining. In reality, block propagation delay also damages a miner‚Äôs
winning probability. To focus on the influence of the download
delay, we assume propagation delay among miners is negligible.
4.4.2 Download delay and winning probability. We now extend
the basic model with the download delay ùëë . We show how ùëë dis-
counts miner‚Äôs winning probability. During the download delay
ùëë , if the speed of cloud mining is ùë£ , then there should be roughly
ùë£ùëëùëõ proofs computed in total. If the best one among them is less
than ùëë , then the corresponding block definitely wins whether or
not it is a network-wide optimal deadline. The probability, denoted
ùõΩ , that a cloud-mined block wins before the self-mining starts can
be expressed as ùõΩ (ùëë, ùë£) = 1‚àí (1 ‚àí ùëë/ùê∑)ùë£ùëëùëõ . We simplify our model
by assuming cloud-mining can perform deadline calculations fast,
i.e., all deadlines over total cloud-mining units ùëã , i.e.,
‚àëùëõ
ùëñ=1 ùë•ùëñ , can
be calculated within ùëë , then the corresponding probability ùõΩ can be
refined as below.
ùõΩ (ùëë,ùëã ) |ùë£‚Üí+‚àû = 1 ‚àí
(
1 ‚àí ùëë
ùê∑
)ùëã
. (4)
4.5 Expression of Winning Probability
We are now ready to express ùëÉùëñ in the model of storage offloading,
i.e., a miner stores his plot file in the cloud instead of his own device.
ùëÉùëñ consists of two parts, ùëÉùëêùëñ and ùëÉùë†ùëñ , jointly contributed by cloud-
mining and self-mining, where ùëÉùëêùëñ and ùëÉùë†ùëñ are functions of ùëüùëñ and
ùíì‚àíùëñ given below:
ùëÉùëêùëñ (ùëüùëñ , ùíì‚àíùëñ ) =
ùë•ùëñ
ùëÜ
+ ùë•ùëñ
ùëã
ùëå
ùëÜ
ùõΩ,
ùëÉùë†ùëñ (ùëüùëñ , ùíì‚àíùëñ ) =
ùë¶ùëñ
ùëÜ
‚àí ùë¶ùëñ
ùëå
ùëå
ùëÜ
ùõΩ = ùë¶ùëñ
1 ‚àí ùõΩ
ùëÜ
,
(5)
where ùëå =
‚àëùëõ
ùëñ=1 ùë¶ùëñ and ùõΩ = ùõΩ (ùëë,ùëã ) is for simplicity. Next, we verify
the validity of ùëÉùëñ as a probability mass function.
Theorem 1. ùëÉùëñ = ùëÉùëêùëñ + ùëÉùë†ùëñ is a valid probability mass function
to express the winning probability of individual miners in a mobile
blockchain mining network.
174
Storage Offloading in PoC-based Mobile Blockchain Mining Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA
Proof. We present the full verification process by checking that‚àëùëõ
ùëñ=1 ùëÉùëñ = 1 holds, i.e.,‚àëùëõ
ùëñ=1
ùëÉùëñ =
‚àëùëõ
ùëñ=1
(ùëÉùëêùëñ + ùëÉùë†ùëñ )
=
‚àëùëõ
ùëñ=1
(ùë•ùëñ+ùë¶ùëñ )/ùëÜ+ùëåùõΩ ¬∑ (ùë•ùëñ/ùëã‚àíùë¶ùëñ/ùëå )/ùëÜ.
= 1+ùëåùõΩùëë
ùëÜ
¬∑ (ùëã
ùëã
‚àíùëå
ùëå
) = 1. ÔøΩ
We can conclude that, the winning probability we use is valid,
hence our model is as well. Note thatùëöùëñ ‚Äôs winning probability and
hence its utility depends not only on its request but also on those
of the other miners.
5 MINER NON-COOPERATIVE GAME
In this section, we analyze the existence and uniqueness of NE in the
proposed miner game under different network setting assumptions
(subsection 5.1). Since the NE point is hard to express in a closed
form, we provide an algorithmwhere the NE point can be computed
in a distributed way, as detailed in subsection 5.2. In subsection 5.3,
we study a special case where all miners are homogeneous on the
budget, where we can derive explicit expressions of each miner‚Äôs
optimal strategies in the uniform-delay network.
5.1 Nash Equilibrium
5.1.1 Mining in a uniform-delay network. In this part, we assume
the download delay ùëë experienced by each self-mining miner is
uniform. We conduct analysis on Nash equilibrium (NE) in the
uniform-delay network, and the result can be concluded in Theorem
2. The detailed proof is provided in Appendix A.
Theorem 2. A unique Nash equilibrium exists in OPminer in the
uniform-delay network.
5.1.2 Mining in a non-uniform-delay network. In reality, download
delay cannot be uniform among all miners since their network
settings are different. To make our analysis more realistic while
not over-complicating our model, we use network types to charac-
terize network settings. Miners under different network types will
experience different delays. We allow ùëò types of network settings,
and miners using type- ùëó network experience a download delay of
ùëë ùëó . We assume ùëã storage units will be mined in the cloud, and ùëåùëó
storage units will be mined by all type- ùëó miners using their de-
vices. Thus, the mining timeline is segmented into ùëò + 1 periods
based on all delay values. During period 1 (i.e., between time 0
and ùëë1), only ùëã storage units are contributed for mining. At time
ùëëùëñ , ùëåùëñ storage units will join in the mining if there is still no block
found at that time. Thus, during period ùëñ + 1 (i.e., between time
ùëëùëñ and ùëëùëñ+1), ùëÜùëñ+1 = ùëã + ‚àëùëñ
ùëô=1 ùëåùëñ storage units are contributed for
mining. We are ready to conclude every possible block finding time
ùëá and its corresponding probability in the below. (ùëùùëñ represents the
probability that a block is found in period ùëñ , i.e., between time ùëëùëñ‚àí1
and ùëëùëñ .)
ùëùùëñ =
‚éß‚é™‚é™‚é™‚é™‚é®‚é™‚é™‚é™‚é™‚é©
1 ‚àí ùõºùëã1 ùëñ = 1,
(1 ‚àí ùõºùëÜùëñùëñ )‚àèùëñ‚àí1
ùëó=1 ùõº
ùëÜ ùëó
ùëó ùëñ = 2, ¬∑ ¬∑ ¬∑ , ùëò,‚àèùëò‚àí1
ùëó=1 ùõº
ùëÜ ùëó
ùëó ùëñ = ùëò + 1,
(6)
where ùõº ùëó = 1 ‚àí ùëë ùëó/ùê∑ .
.   .       .         .
block finding time: 
Probability ( )
Figure 3: Probability of the network-wide block finding time where ùëò = 3.
Fig. 3 gives an example ofùëò = 3. Now, we consider how to express
the winning probability ùëÉ
ùëó
ùëñ for a minerùëöùëñ using type- ùëó network. In
each mining round, ùëÉùëñ can be considered as a sum ofùëöùëñ ‚Äôs winning
probability in each period ùëô , which is a product of ùëùùëô and ùëöùëñ ‚Äôs
storage contribution ratio during the period ùëô , i.e., the ratio of his
contributed storage to the total storage in the period ùëô . Obviously,
ùëöùëñ contributes ùë•ùëñ storage units before time ùëë ùëó and ùë†ùëñ storage units
after that. Thus, we can calculate the winning probability for a
type- ùëó minerùëöùëñ and his corresponding utility using Eqs. (7-8).
ùëÉ
ùëó
ùëñ =
‚àëùëó
ùëô=1
ùë•ùëñùëùùëô
ùëÜùëô
+
‚àëùëò+1
ùëô=ùëó+1
ùë†ùëñùëùùëô
ùëÜùëô
, (7)
ùëà
ùëó
ùëñ =ùëÖùëÉ ùëó
ùëñ ‚àíùê∂ùëñ . (8)
If we apply this function into the original miner game, then the
following result can be obtained.
Theorem 3. Given a price set {ùëùùë† , ùëùùëê } from the CSP side, there
exists at least one Nash equilibrium for the miner game in the non-
uniform-delay setting.
Proof. The uniform-delay setting is a special case where ùëò = 1.
Similar to the proof for NE in Theorem 2, the existence of NE for
miners in a non-uniform-delay network is followed by capitalizing
on the variational inequality theory. Based on the previous analysis,
we need to prove ùëÉ
ùëó
ùëñ is concave in ùëüùëñ .
We rewrite ùëÉ ùëó
ùëñ to Eq. (9).
ùëÉ
ùëó
ùëñ =
‚àëùëó‚àí1
ùëô=1
ùë•ùëñùëùùëô
ùëÜùëôÔ∏∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ∏∑Ô∏∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ∏∏
part a
+ ùë•ùëñùëù ùëó
ùëÜ ùëó
+
‚àëùëò+1
ùëô=ùëó+1
ùë†ùëñùëùùëô
ùëÜùëôÔ∏∏ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ∏∑Ô∏∑ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔ∏∏
part b
. (9)
Based on the the proof in Theorem 2, we can obtain the fact that
part b of Eq. (9) is a concave function. We only need to prove that
part a is concave, each addend of which is concave. Since the sum
of concave functions are still concave, the concavity of part a as
well as Eq. (9) are determined. ÔøΩ
Note that, we never consider the mathematical relation among
ùëåùëó ‚Äôs. Thus, Theorem 3 can be obtained under any number of net-
work types and any combinations ofùëÄ miners‚Äô network types. In
the experiment, we conduct experiments based on several special
network type distributions to see how each distribution affects
miners‚Äô decisions.
5.2 Nash Equilibrium Algorithm
Since it is hard to express each miner‚Äôs equilibrium strategy in an
explicit form, although it exists, we provide an algorithm using
strategy iterations to find miners‚Äô equilibrium strategies.
175
Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA Suhan Jiang and Jie Wu
Table 2: Strategy iterations given ùëÖ = 800, ùëùùë† = 5, ùëùùëê = 25, ùëë1/ùëë2 = 5/6, ùëè1 = 200, ùëè2 = 500.
Round
Run Strategy Initialization 1 2 3 4 5 6 7 8 9 10 11 12 13 14
1 ùë•1 7 1.2 5.1 4.2 4. 5 4.4 4.4 4.4 4.4 4.4 4.4 4.4 4.4 4.4 4.4
ùë¶1 11 15.4 4.3 7.2 6.3 6.61 6.5 6.5 6.5 6.5 6.5 6.52 6.5 6.5 6.5
ùë•2 5 8.6 7.3 7.7 7.6 7.6 7.6 7.6 7.6 7.6 7.6 7.6 7.6 7.6 7.6
ùë¶2 5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
2 ùë•1 3 0 5.3 4.1 4.5 4.8 4.4 4.4 4.4 4.4 4.4 4.4 4.4 4.4 4.4
ùë¶1 4 18.4 3.7 7.4 6.3 6.6 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5
ùë•2 1 8.9 7.2 7.7 7.6 7.6 7.61 7.6 7.6 7.6 7.6 7.6 7.6 7.6 7.6
ùë¶2 10 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
Algorithm 1 Asynchronous Best-Response Algorithm
Output: ùíì = {ùëü1, ¬∑ ¬∑ ¬∑ , ùëüùëõ} where ùëüùëñ = (ùë•ùëñ , ùë¶ùëñ ), ùëñ ‚àà {1, ùëõ}
Input: Initialize ùëó as 1 and choose any feasible starting point ùíì (0) :
each miner chooses the decision using the local computing
1: for round ùëó do
2: for miner ùëñ do
3: Update ùëü
( ùëó)
ùëñ using Eq. (12) for ùë•ùëñ and Eq. (13) for ùë¶ùëñ
4: Send the request ùëü
( ùëó)
ùëñ to CSP
5: CSP collects the request profile ùíì ( ùëó)
6: if ùíì ( ùëó) = ùíì ( ùëó‚àí1) then Stop
7: else increase ùëó by 1
Each miner optimizes his utility by solving the OPminer prob-
lem as follows. Using Lagrange‚Äôs multipliers ùúÜ1, ùúÜ2, and ùúÜ3 for the
constraints, we obtain the Lagrange function ùêøùëñ to reform ùëöùëñ ‚Äôs
optimization problem as follows:
ùêøùëñ = ùëÖùëÉùëñ ‚àíùê∂ùëñ ‚àí ùúÜ1 (ùê∂ùëñ ‚àí ùëèùëñ ) + ùúÜ2ùë•ùëñ + ùúÜ3ùë¶ùëñ , (10)
and the complementary slackness conditions are
ùúÜ1 (ùê∂ùëñ ‚àí ùëèùëñ ) = 0, ùúÜ2ùë•ùëñ = 0, ùúÜ3ùë¶ùëñ = 0,
ùúÜ1 > 0, ùúÜ2, ùúÜ3, ùë•ùëñ , ùë¶ùëñ ‚â• 0.
(11)
By the first-order optimality condition ‚àáùêøùëñ = 0, it immediately
follows that ùúÜ2 = ùúÜ3 = 0. For simplicity, we approximates the value
of ùõΩ by replacingùëã withùëã‚àíùëñ . This approximation has little effect on
the final results but makes our expression clear and simple. Thus,
we obtain the following result.
ùë•ùëñ =
‚àö
ùõΩùëÖùëã‚àíùëñ
(1 + ùúÜ1)ùëùùëê
‚àí ùëã‚àíùëñ , (12)
ùë¶ùëñ =
‚àö
(1 ‚àí ùõΩ)ùëÖ(ùëã‚àíùëñ + ùëå‚àíùëñ )
(1 + ùúÜ1)ùëùùë†
‚àí (ùë•ùëñ + ùëã‚àíùëñ + ùëå‚àíùëñ ), (13)
ùê∂ùëñ ‚àí ùëèùëñ = 0. (14)
Solving Eq. (12) - Eq. (14) yields that
ùúÜ1 = [ùëè + (ùëùùë† + ùëùùëê )ùëã‚àíùëñ + ùëùùë†ùëå‚àíùëñ ]2
‚àí
[‚àö
ùõΩùëÖùëùùëêùëã‚àíùëñ +
‚àö
(1 ‚àí ùõΩ)ùëÖùëùùë† (ùëã‚àíùëñ + ùëå‚àíùëñ )
]2
. (15)
Hence, substituting Eq. (15) back into Eq. (12) and Eq. (13) gives
the explicit form of the solution to the OPminer problem, i.e., each
miner‚Äôs best response strategy. This naturally gives a distributed
iterative algorithm, allowing each miner to iteratively update its
strategy, given the strategies of other miners. We summarize the
distributed iterative algorithm in Algorithm 1.
Algorithm 1 is applicable for a uniform-delay network to find
the unique NE point and also can be used in a non-uniform-delay
network, where one NE point can be computed. Table 2 gives an
example, showing how one NE point is achieved through strategy
iterations. In this example, twominerswith different network delays
and budgets compete with each other. Provided with different initial
values, they finally stabilize to the same NE point (i.e., the bold
numbers in the table).
5.3 Nash Equilibrium among Homogeneous
Miners
It is difficult to express miners‚Äô strategies explicitly. Fortunately, we
are able to get the closed-form computation offloading solutions for
the OPminer in a special case. We consider a homogeneous-miner
case where each miner is homogeneous with an identical budget
ùëè. We will provide the explicit-form expression of the offloading
strategy for the homogeneous-miner case in the uniform-delay
network.
Theorem 4. The unique Nash equilibrium for minerùëöùëñ in the
homogeneous-miner case is given below, provided that the network
delay is uniform among miners.
ùë•‚àóùëñ =
ùëèùõΩ (ùëõ ‚àí 1)
ùëùùëê (ùëõ ‚àí ùõΩ) , (16)
ùë¶‚àóùëñ =
ùëè [(1 ‚àí ùõΩ)ùëõùëùùëê ‚àí ùõΩ (ùëõ ‚àí 1)ùëùùë† ]
ùëùùë†ùëùùëê (ùëõ ‚àí ùõΩ) . (17)
Proof. We obtain ùëã 2 = ùõΩùëÖùëã‚àíùëñ/[(1 + ùúÜ1)ùëùùëê ] based on Eq. (12)
and ùëÜ2 = (1 ‚àí ùõΩ)ùëÖ(ùëã‚àíùëñ + ùëå‚àíùëñ )/[(1 + ùúÜ1)ùëùùë† ] based on Eq. (13), for
each minerùëöùëñ . Then, ùëã
2/ùëÜ2 = ùõΩùëã‚àíùëñùëùùë†/[(1 ‚àí ùõΩ) (ùëã‚àíùëñ + ùëå‚àíùëñ )ùëùùëê ] im-
mediately comes out. Next, we calculate the summation of this
expression for all the miners as follows:‚àë
ùëõ
ùëã 2
ùëÜ2
=
‚àë
ùëõ
ùõΩùëã‚àíùëñùëùùë†
(1 ‚àí ùõΩ) (ùëã‚àíùëñ + ùëå‚àíùëñ )ùëùùëê
, (18)
ùëõ
(
ùëã
ùëÜ
)2
=
ùõΩùëùùë†
(1 ‚àí ùõΩ)ùëùùëê
(ùëõ ‚àí 1)ùëã
ùëÜ
. (19)
176
Storage Offloading in PoC-based Mobile Blockchain Mining Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA
Then, ùëã/ùëÜ = ùõΩ (ùëõ ‚àí 1)ùëùùë†/(1‚àí ùõΩ)ùëõùëùùëê easily follows. Since all miners
are homogeneous, their best response strategies are identical as
well, i.e., ùëã = ùëõùë•ùëñ and ùëÜ = ùëõ(ùë•ùëñ + ùë¶ùëñ ). By substituting these two
equations into Eq. (14), we obtain the NE for minerùëöùëñ . ÔøΩ
However, the closed-form solution for homogeneous miners in
the non-uniform-delay network is still an open problem, which we
reserve for our future work.
6 EVALUATION
This section consists of three parts. First, we validate the feasibility
for mobile miners to offload their storage to an external CSP (sub-
section 6.1). The testbeds we use in this paper are Burstcoin [1], a
PoC mining platform, and Google Cloud [9], providing resources
of both storage and computation. Second, we examine how miners
decide their optimal strategies using our proposed algorithm in the
uniform-delay network (subsection 6.2). We conduct our experi-
ments based on different sets of parameters to show how miners‚Äô
decisions will be affected by external factors. Last, we take the
network settings into consideration and analyze how non-uniform
delays can influence the achieved equilibrium in our proposed game
(subsection 6.3).
6.1 Feasibility of Storage Offloading
The most important part is to validate whether storage offloading is
viable for PoC mining since it is the basis of our paper. To confirm
its feasibility, we show successful Burstcoin mining using Google
Cloud storage.
6.1.1 Feasibility of plotting. For plotting, there are two methods.
One is to plot directly onto the local hard drive and upload it to
cloud service, and the other way is to plot straight from the local
device to the cloud service by setting the cloud as a drive letter.
As we observed, it takes around 24 hours to upload 1 TB of plot
files under the bandwidth of 500 Mbps if choosing the first way.
Definitely, this time can be shortened with a faster Internet speed.
When using the second way, the plotter just shuts down if the
bandwidth is less than 1 Gbps. There is a bandwidth threshold if
applying the second way, and thus we suggest the first way to
offload plot files.
6.1.2 Feasibility of mining. If we choose cloud-mining using VMs
provided by the CSP, the mining speed would be faster. According
to our test, with a 2 Gbps network instance and 32 vCPU, mining
over a plot file of 18 TB can be finished within 30 seconds, which is
far less than the average block generation interval (240 seconds).
For self-mining, we also test the download delay. For a plot file
of 18 TB in total, we need to download 4068MB scoops in each
mining round and the average delay is around 50 seconds. The
gap between the cloud-mining end time and the self-mining start
time rationalizes our assumption on an infinite cloud-mining speed.
We also test the mining speed on mobile devices. Self-mining is
slower than cloud-mining, but its speed is acceptable since we can
finish the mining within 30 to 60 seconds, depending on the type
of mobile devices. In general, the total time for local mining is also
within the average block generation interval.
Based on the data provided in the above, we can conclude that it
is feasible for miners to use mobile devices for PoC mining through
1 2 3 4 5
Unit price of storage: ps
6
7
8
9
10
11
St
or
ag
e 
un
its
 b
y 
cl
ou
d-
m
in
in
g
1- /D=0.93
1- /D=0.94
1- /D=0.95
(a) Miner‚Äôs cloud-mining storage.
1 2 3 4 5
Unit price of storage: ps
0
20
40
60
80
100
St
or
ag
e 
un
its
 b
y 
se
lf-
m
in
in
g 1- /D=0.93
1- /D=0.94
1- /D=0.95
(b) Miner‚Äôs self-mining storage.
Figure 4: Homogeneous miners with unlimited budgets.
100 125 150 175 200
Miner's budget:bi
0
4
8
12
16
20
St
or
ag
e 
un
its
 b
y 
cl
ou
d-
m
in
in
g
pc=10
pc=12
pc=15
(a) ùëë/ùê∑ = 0.02.
100 125 150 175 200
Miner's budget:bi
0
10
20
30
40
50
St
or
ag
e 
un
its
 b
y 
se
lf-
m
in
in
g pc=10
pc=12
pc=15
(b) ùëë/ùê∑ = 0.02.
Figure 5: Budget impacts on homogeneous miners.
storage offloading. On this basis, we conduct further experiments
to confirm our theoretical analysis.
6.2 Unique Equilibrium in the Uniform-delay
Setting
Our experiments evaluate the influences of important parameters
on each miner‚Äôs strategies. We start with a small mobile PoCmining
network with 5 homogeneous miners with unlimited budgets.
6.2.1 Influences from the CSP side. We first consider the different
prices at the CSP side. Fig. 4 obviously reflects that, if the CSP
unilaterally increases storage‚Äôs price ùëùùë† , miners will decrease their
requests on storage units as well as their self-mining ratio. However,
miners never change their investment on cloud-mining, although
it is expensive. This is reasonable, given that miners are budget-
unlimited. Similarly, the increase of computation price ùëùùëê also dis-
courages miners to invest on computation resources. Besides, from
Fig. 4, we can also conclude that miner‚Äôs utility is sensitive to the
download delay, as a slight increase of ùëë would cause an obvious
decrease on the self-mining ratio. Surprisingly, this negative effect
also influences the sales on total storage. This can be interpreted as
follows: a longer delay decreases the mining power of the whole
network, while in our experiment, we fix the mining difficulty pa-
rameter ùê∑ , leading to a lower chance for miners to get reward.
Thus, miners tend to reduce their cost investment for the purpose
of maximizing utility. This result further confirms the necessity
for a blockchain-based system to dynamically adjust its difficulty
parameter.
6.2.2 Influences from the miner side. We now investigate how the
budget will affect miners‚Äô strategies. We assumeminers are homoge-
neous on their budgets ùëèùëñ . In Fig. 5, we can observe that, when each
miner‚Äôs budget increases, he will prefer to invest more money in
cloud-mining even if ùëùùëê goes up. Under the setting of ùëùùëê = 15, when
we increase the miner‚Äôs budget from 100 to 125, he just slightly
increases his investment on cloud mining (from 0 to 0.5), which
is less than his budget increase, allowing him to invest more on
self-mining.Next, we analyze the heterogeneous-miner scenario.
We assume there are two miners,ùëö1 andùëö2. We fixùëö1‚Äôs budget
177
Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA Suhan Jiang and Jie Wu
100 125 150 175 200
m2's budget:b2
2
4
6
8
10
12
b1=125
b1=150
b =175
m
2's 
sto
ra
ge
 u
ni
ts 
by
 
-m
in
in
g
(a)ùëö2‚Äôs cloud-mining storage.
100 125 150 175 200
m2's budget:b2
30
40
50
60
70
80
m
2's 
sto
ra
ge
 u
ni
ts 
by
 se
lf-
m
in
in
g
b1=125
b1=150
b1=175
(b)ùëö2‚Äôs self-mining storage.
Figure 6:ùëö2‚Äôs requests givenùëö1‚Äôs budget is fixed whileùëö2‚Äôs budget increases.
100 125 150 175 200
m2's budget:b2
2
4
6
8
10
12
b1=125
b1=150
b =175
m
1's 
sto
ra
ge
 u
ni
ts 
by
 
-m
in
in
g
(a)ùëö1‚Äôs cloud-mining storage.
100 125 150 175 200
m2's budget:b2
20
30
40
50
60
70
80
90
m
1's 
sto
ra
ge
 u
ni
ts 
by
 se
lf-
m
in
in
g
b1=125
b1=150
b1=175
(b)ùëö1‚Äôs self-mining storage.
Figure 7:ùëö1‚Äôs requests givenùëö1‚Äôs budget is fixed whileùëö2‚Äôs budget increases.
Table 3: Miners‚Äô strategy profiles under different delay ratios.
Type1 Type2 Type3
ùúÉ1 : ùúÉ2 : ùúÉ3 ùë• ùë¶ ùë• ùë¶ ùë• ùë¶
3 : 4 : 5 7.3 88.9 11.8 0 16.8 0
4 : 5 : 6 12 31.7 13 0 14.8 0
5 : 6 : 7 12.3 4.4 13.3 0 14.2 0
Table 4: Miners‚Äô strategy profiles under different population distributions.
5G 4G 3G
ùõæ1 : ùõæ2 : ùõæ3 ùë• ùë¶ ùëà /ùê∂ ùë• ùë¶ ùëà /ùê∂ ùë• ùë¶ ùëà /ùê∂
10 : 40 : 10 54 20.5 0.57 17 0 0.57 57 0 0.57
15 : 40 : 5 35 34 0.76 18.8 0 0.73 57 0 0.73
20 : 20 : 20 30 4 0.5 32 0 0.5 32 0 0.5
30 : 20 : 10 20 5 0.54 33.2 0 0.54 57 0 0.54
and constantly increaseùëö2‚Äôs budget. From Fig. 6, we can seeùëö2
invest more on computation resources. By taking advantage of
cloud-mining,ùëö2 can buy less storage units while still keeping his
utility high. Since miners mutually affect each other, althoughùëö1‚Äôs
budget remains unchanged, he will also adjust his strategies as a
best response toùëö2‚Äôs strategy changes. Fig. 7 shows thatùëö1 also
increases his investment on cloud-mining, asùëö2 does.
6.3 Equilibrium in the Non-uniform-delay
Setting
Miners‚Äô selection of network types will bring different download
delays to them. In this part, we evaluate miners‚Äô equilibrium strate-
gies in a mining network with non-uniform delays. We construct a
mining network of 60 homogeneous miners with identical budgets
and three network types for miners to choose from, where a type-ùëñ
network will incur a delay of ùúÉùëñùëë (ùëñ = 1, 2, 3), where ùúÉùëñ depends on
the type of networks used .
6.3.1 Influences of delay ratio. We first investigate the influence
of different delay ratios, i.e., the values of ùúÉ1 : ùúÉ2 : ùúÉ3, on the
miners‚Äô strategies. We assume each miner‚Äôs budget is 200 and each
Table 5: Miners‚Äô strategy profiles under different price sets.
5G 4G 3G
(ùëùùë† , ùëùùëê ) ùë• ùë¶ ùë• ùë¶ ùë• ùë¶
(5, 15) 0 40 10 0 10 0
(5, 20) 0 40 6.25 8.75 8 0
(5, 25) 0 40 2.5 24.7 6.7 0
(5, 30) 0 40 0.3 37.8 5.7 0
network type is used by 20 miners. Given the CSP price set of
(ùëùùë† , ùëùùëê ) = (1, 12), Table 3 shows miners‚Äô strategy profiles under
different delay ratios, whereùë• andùë¶ represent the number of storage
units for cloud-mining and for self-mining, respectively. In each
scenario, only type-1 miners will apply self-mining for cost saving
since they can take advantage of their short delay. However, as
their download delay increases, they have to reduce the ratio of
self-mining and turn to cloud-mining. As type-2 and type-3 miners
have long delays, they prefer cloud-mining. Compared with type-
2 miners, type-3 miners also buy more storage units in order to
mitigate their disadvantages caused by their longer delays.
6.3.2 Influences of population distribution. Then, we investigate
the influence caused by population distribution of each network
type. We use 5G, 4G, and 3G to represent type-1, type-2, and type-3
network, respectively. Thus, the delay ratio ùúÉ1 : ùúÉ2 : ùúÉ3 = 3 : 20 :
500 is obtained based on the real-world data[28]. We assume all
miners have unlimited budgets and the CSP price set is (ùëùùë† , ùëùùëê ) =
(5, 30), then Table 4 shows the corresponding miner strategies
under different population distributions, where ùõæùëñ represents the
number of miners using the type-ùëñ network. We can conclude that,
if the percentage of type-ùëñ miners increases, miners of this type
will decrease their storage investment, while the remaining miners
have to buy more units. Also, we observe an interesting result: even
if miners use different network types, their rates of utility on cost
are almost equal. This further confirms egalitarian nature of PoC
consensus mechanism.
6.3.3 Influences of CSP prices. Finally, we investigate the influence
incurred by the CSP‚Äôs pricing strategy. We consider a small mining
network with 3 miners using 5G, 4G, and 3G, respectively, i.e.,
ùúÉ1 : ùúÉ2 : ùúÉ3 = 3 : 20 : 500. Assuming each miner has a budget
of 200, Table 5 shows their equilibrium strategies under different
populations. As the 5G-miner can exploit his advantage of the fast
download speed, he prefers low-cost self-mining. However, the
3G-miner chooses cloud-mining to avoid the winning probability
decrease caused by his slow network, even if ùëùùëê is high. For the
intermediate 4G-miner, his strategies are tightly related to the value
of ùëùùëê , where a smaller ùëùùëê is attractive.
7 RELATEDWORK
7.1 Blockchain Mining Consensus Mechanism
A blockchain is viewed as a distributed ledger stored and main-
tained by a network of nodes across the world. The key to operating
a blockchain is its consensus mechanism, which regulates how to
update this ledger to reach a decentralized agreement. Currently,
Blockchain consensus mechanisms can be divided into two cate-
gories, i.e., Proof of Concept (PoX) which requires miners to devote
178
Storage Offloading in PoC-based Mobile Blockchain Mining Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA
resources tomining, and virtual miningwithout real-world resource
contribution.
7.1.1 PoX series. As the origin of PoX series, PoW [21] uses com-
puting power for preimage searching and creates a huge amount of
electricity waste. In [25], Proof of Exercise is proposed to replace
useless searching in PoWwith the useful exercise of matrix product
problems. Apart from delegation of expensive computation, PoX
can also be designed to incentivize cheap storage provisions. The
existing mechanisms include Proof of Capacity adopted by Burst-
coin [1] and Spacemint [22], Proof of Retrievability [13] used in
Permacoin [20] and Ipfs [2] etc.
7.1.2 Virtual-mining mechanisms. Compared to PoX series, there
are fewer virtual-mining mechanisms, among which PoS is a repre-
sentative. In the PoS mechanism, miners decide their mining right
based on stake, which is the amount of crypto-currencies one pos-
sesses. There is a refined version of PoS [24], which uses coin age,
the currency amount times the holding period, to decide reward.
One of its implementations is Peercoin [15]. Another extension is
delegated PoS [16]. [14] adds more security measurements to ensure
persistence and liveness of the system. There also exist some hybrid
consensus mechanisms atop PoW protocols and BFT [3] protocols,
e.g. bitcoin-NG [7], PeerCensus [5] and Hybrid Consensus [23].
7.2 Game Theory in Offloading Mechanism
Game theory is a widely-used model in the field of offloading mech-
anisms. A large body of existing literature [6, 10, 17, 19, 26, 27, 29‚Äì
31, 33, 34] focuses on minimizing offloading users‚Äô computation
overhead in terms of energy and latency. To this end, researchers
have developed distributed decision making methodologies. In the
field of mobile blockchain mining offloading [12, 18, 32], there
are few works and most of them are in the PoW-mining scenario
where mobile miners only offload their computation to a service
provider. In our paper, we consider mining based on a PoC mecha-
nism, thereby storage offloading, instead of computation offloading,
becomes the core. Meanwhile, the computation offloading is still in
need if miners decide to mine remotely in the cloud.
8 CONCLUSION
We have proposed a Nash equilibrium game among the mobile
miners for optimal storage offloading in the PoC mining setting.
Two practical mining strategies are investigated for miners, i.e.,
cloud-mining and self-mining. We start with a uniform network
setting where each miner experiences the same download delay
for self-mining. We discuss the existence and the uniqueness of
Nash equilibrium in the proposed game and a distributed algorithm
is proposed to achieve NE point(s). We also find the close-form
expressions of offloading and mining strategies for homogeneous
miners with identical budgets. Then, we extend our results to non-
uniformed delays, where miners with different network settings
experience different download delays. We prove that there exists
at least one Nash equilibrium in this setting, and our previously-
proposed algorithm still can be applied to achieve one NE point.
We also find that a miner using a fast-speed network can decrease
his cost on cloud resources while obtaining higher utility. This is
reasonable since the price goes higher if subscribing to a better
network, which can be considered as another investment source for
mobile mining. Both numerical evaluation and testbed experiments
on Burstcoin and Google Cloud are conducted to show the feasibil-
ity of storage offloading and to validate the proposed models and
theoretical results.
9 ACKNOWLEDGEMENTS
This research was supported in part by NSF grants CNS 1824440,
CNS 1828363, CNS 1757533, CNS 1629746, CNS 1651947, and CNS
1564128.
A PROOF OF THEOREM 2
First we show the existence of NE.
Claim 1: There is at least one NE for the gameOPminer. Any game
has NEs if its equivalent variational inequality (ùëâ ùêº ) problem [8]
has a nonempty solution set. Given a ùëâ ùêº problem, ùëâ ùêº (ùêæ,ùê∫), if ùêæ is
convex and compact, and ùê∫ is monotone on ùêæ , then the solution
set of ùëâ ùêº (ùêæ,ùê∫) is nonempty, closed, and convex. We define the
equivalent VI problem ùëâ ùêº (ùêæ,ùê∫) = ùëÇùëÉ (ùëã,ùëà ), where
ùê∫ := (‚àáùëñùëàùëñ )ùëõùëñ=1, ùëã := ((ùë•ùëñ , ùë¶ùëñ ))ùëõùëñ=1, ùëà := (ùëàùëñ )ùëõùëñ=1,
ùêæ :=
‚àèùëõ
ùëñ=1
ùêæùëñ , ùêæùëñ := {(ùë•ùëñ , ùë¶ùëñ ) |ùê∂ùëñ ‚â§ ùëèùëñ , ùë•ùëñ , ùë¶ùëñ ‚â• 0}.
It can be easily verified that ùêæùëñ is convex and closed, ‚àÄùëñ . Thus, ùêæ is
convex and compact. Andùê∫ is monotone if and only ifùëàùëñ (ùëüùëñ , ùíì‚àíùëñ ) is
concave in ùëüùëñ for given ùíì‚àíùëñ , ‚àÄùëñ , which is true as shown below. Since
the VI problem has a nonempty solution set, the existence of NE
thus follows the sufficient conditions. Denote ùêª for the Hessian
matrix ofùëàùëñ :
ùêª :=
[
ùëà ùëñ
ùë•ùë• ùëà ùëñ
ùë•ùë¶
ùëà ùëñ
ùë¶ùë• ùëà ùëñ
ùë¶ùë¶
]
,
where
ùëà ùëñ
ùë•ùë• =
ùúï2ùëàùëñ
ùúïùë•2ùëñ
,ùëà ùëñ
ùë•ùë¶ = ùëà ùëñ
ùë¶ùë• =
ùúï2ùëàùëñ
ùúïùë•ùëñ ùúïùë¶ùëñ
,ùëà ùëñ
ùë¶ùë¶ =
ùúï2ùëàùëñ
ùúïùë¶2ùëñ
.
The expressions of the Jacobian elements are as below:
ùúïùëàùëñ
ùúïùë•ùëñ
=ùëùùë† + ùëùùëê ‚àí ùëÖ
{
(1 ‚àí (ùë•ùëñ + ùë¶ùëñ )/ùëÜ) + ùõºùëãlnùõº (ùë¶ùëñ ‚àí ùëåùë•ùëñ/ùëã )
+
(
1 ‚àí ùõºùëã
)
[ùëå (1 ‚àí ùë•ùëñ/ùëã ‚àí ùë•ùëñ/ùëÜ) /ùëã + ùë¶ùëñ/ùëÜ]
}
/ùëÜ,
ùúïùëàùëñ
ùúïùë¶ùëñ
=ùëùùë† ‚àí ùëÖùõºùëã [1 ‚àí (ùë•ùëñ + ùë¶ùëñ )/ùëÜ] /ùëÜ.
Next, we showùêª is positive definite by proving its leading principal
minors, i.e.,ùëà ùëñ
ùë•ùë• and ùëëùëíùë° (ùêª ), are bigger than 0.
ùëëùëíùë° (ùêª ) = ùëà ùëñ
ùë•ùë•ùëà
ùëñ
ùë¶ùë¶‚àíùëà ùëñ
ùë•ùë¶ùëà
ùëñ
ùë¶ùë• =ùëÖ
2 (ùúìùúô‚àíùúì ‚Ä≤ùúô ‚Ä≤)/(ùëã 3ùëÜ4),
where
ùúì = 4ùëã‚àíùëñùëÜ,ùúì ‚Ä≤ = ùëÜùëã‚àíùëñ + ùë¶ùëñùëã‚àíùëñ ‚àí ùë•ùëñùëå‚àíùëñ ,
ùúô = 1 ‚àí ùõºùëã
(
1 ‚àí lnùëéùëã
)
, ùúô ‚Ä≤ = ùõºùëã
(
lnùëéùëã
)2
.
The sign of ùëëùëíùë° (ùêª ) is decided by the value ofùúìùúô ‚àíùúì ‚Ä≤ùúô ‚Ä≤, which is
always positive for non-negative requested units.
ùúìùúô ‚àíùúì ‚Ä≤ùúô ‚Ä≤ = 4ùëã‚àíùëñùëÜùúô ‚àí [(ùëÜ + ùë¶)ùëã‚àíùëñ ‚àí ùë•ùëñùëå‚àíùëñ ]ùúô ‚Ä≤
> 4ùëã‚àíùëñùëÜùúô ‚àí (2ùëÜùëã‚àíùëñ ‚àí ùë•ùëñùëå‚àíùëñ )ùúô ‚Ä≤
> 4ùëã‚àíùëñùëÜùúô ‚àí 2ùëã‚àíùëñùëÜùúô ‚Ä≤ = 2ùëã‚àíùëñùëÜ (2ùúô ‚àí ùúô ‚Ä≤).
Since 2ùúô ‚àí ùúô ‚Ä≤ = 2 ‚àí 2ùõºùëã
(
1 ‚àí lnùõºùëã
)
‚àí ùõºùëã
(
lnùõºùëã
)2
is a monotone
increasing function, it is obvious that 2ùúô ‚àí ùúô ‚Ä≤ ‚â• 2ùúô ‚àí ùúô ‚Ä≤ |ùëã=0= 0,
179
Mobihoc ‚Äô20, October 11‚Äì14, 2020, Boston, MA, USA Suhan Jiang and Jie Wu
‚àÄùëå ‚â• 0. Thus, ùëëùëíùë° (ùêª ) > 0 holds. Obviously, ùëà ùëñ
ùë•ùë•ùëà
ùëñ
ùë¶ùë¶ > 0 and
ùëà ùëñ
ùë¶ùë¶ > 0, then ùëà ùëñ
ùë•ùë• > 0 is logically well-reasoned. As ùëëùëíùë° (ùêª ) > 0
and ùëà ùëñ
ùë¶ùë¶ > 0, ‚àÄ(ùë•ùëñ , ùë¶ùëñ ) ‚àà ùêæùëñ , and the positive definiteness holds
for any ùëñ . Therefore, ùëâ ùêº (ùêæ,ùê∫) is equivalent to ùëÇùëÉ (ùëã,ùëà ) and has a
nonempty solution set. We thus prove that Claim 1 is legitimate.
We finish the proof for the uniqueness of NE.
Claim 2: There is at most one NE for the game OPminer. We first
introduce the matrices ùêΩùëôùëúùë§ , defined as
[ùêΩùëôùëúùë§]ùëñ ùëó := inf
ùë• ‚ààùêæ
‚éß‚é™‚é™‚é™‚é®‚é™‚é™‚é™‚é©
|‚àá2
ùëñùëñùëàùëñ |, if ùëñ = ùëó,
‚àí1
2
( |‚àá2
ùëñ ùëóùëàùëñ | + |‚àá2
ùëóùëñùëà ùëó |), else.
We prove the uniqueness of NE solution by showing that ùêΩùëôùëúùë§ is a
strictly copositive matrix. We first give the explicit-form expression
of ‚àá2
ùëñùëñùëàùëñ and ‚àá2
ùëñ ùëóùëàùëñ as follows:
‚àá2
ùëñùëñùëàùëñ =ùëà
ùëñ
ùë•ùë• +ùëà ùëñ
ùë¶ùë¶, ‚àá2
ùëó ùëóùëà ùëó = ùëà
ùëó
ùë•ùë• +ùëà ùëó
ùë¶ùë¶,
‚àá2
ùëñ ùëóùëàùëñ =
ùúï2ùëàùëñ
ùúïùë•ùëñ ùúïùë¶ ùëó
+ ùúï2ùëàùëñ
ùúïùë•ùëñ ùúïùë• ùëó
+ ùúï2ùëàùëñ
ùúïùë¶ùëñ ùúïùë¶ ùëó
+ ùúï2ùëàùëñ
ùúïùë•ùëñ ùúïùë¶ ùëó
,
‚àá2
ùëóùëñùëà ùëó =
ùúï2ùëà ùëó
ùúïùë• ùëó ùúïùë¶ùëñ
+ ùúï2ùëà ùëó
ùúïùë¶ ùëó ùúïùë•ùëñ
+ ùúï2ùëà ùëó
ùúïùë• ùëó ùúïùë¶ùëñ
+ ùúï2ùëà ùëó
ùúïùë¶ ùëó ùúïùë•ùëñ
.
W.L.O.G. we show that the second-order ùêΩùëôùëúùë§ is strictly coposi-
tive.The uniqueness to generalized cases can be simply proved
using induction, due to the repetitive pattern of the objective func-
tionùëàùëñ . By the symmetry given in Eq. (20), ùêΩùëôùëúùë§ can be written into
the form:
ùêΩùëôùëúùë§ =
[
ùëé11 ùëé12
ùëé21 ùëé22
]
,
where
ùëé11= inf
(ùë•1,ùë¶1) ‚ààùêæ
|‚àá2
11ùëà1 |, ùëé22= inf
(ùë•2,ùë¶2) ‚ààùêæ
|‚àá2
22ùëà2 |,
ùëé12=ùëé21= (‚àí1
2
)
(ùë•2,ùë¶2) ‚ààùêæ
inf
(ùë•1,ùë¶1) ‚ààùêæ
( |‚àá2
12ùëà1 | + |‚àá2
21ùëà2 |).
It suffices to show that ùëé11, ùëé22 ‚â• 0 and ùëé12 + ‚àö
ùëé11ùëé22 > 0, where
the non-negativity of the first two terms are trivial.
ùëé12 +
‚àö
ùëé11ùëé22 =
(ùë•2,ùë¶2) ‚ààùêæ
inf
(ùë•1,ùë¶1) ‚ààùêæ
ùëÖ(1 ‚àí ùõΩ) [1 ‚àí 2(ùëÜ ‚àí ùë•ùëñ ‚àí ùë¶ùëñ )]/ùëÜ2
+ ùõΩ (2ùë•ùëñ ‚àí ùëã )/ùëå 3 > 0.
Then, ùêΩùëôùëúùë§ is strictly copositive as shown above. Since we have
shown that ùê∫ is continuously differentiable with the derivatives
bounded on ùêæ (as the derivatives are all linear on the compact
solution space ùêæ ),ùê∫ is strictly monotone. Therefore OPminer has at
most one solution. Now, we conclude our proof since the uniqueness
of NE immediately follows by combining Claim 1 and Claim 2.
REFERENCES
[1] P Andrew. 2019. What is Burstcoin?
[2] Juan Benet. 2014. Ipfs-content addressed, versioned, p2p file system. arXiv
preprint arXiv:1407.3561 (2014).
[3] Miguel Castro and Barbara Liskov. 2002. Practical Byzantine fault tolerance and
proactive recovery. ACM Transactions on Computer Systems (TOCS) (2002).
[4] Bram Cohen and Krzysztof Pietrzak. 2019. The Chia Network Blockchain.
[5] Christian Decker, Jochen Seidel, and Roger Wattenhofer. 2016. Bitcoin meets
strong consistency. In Proceedings of the 17th International Conference on Dis-
tributed Computing and Networking. ACM.
[6] Jianbo Du, Liqiang Zhao, Jie Feng, and Xiaoli Chu. 2018. Computation offloading
and resource allocation in mixed fog/cloud computing systems with min-max
fairness guarantee. IEEE Transactions on Communications 66, 4 (2018), 1594‚Äì1608.
[7] Ittay Eyal, Adem Efe Gencer, Emin G√ºn Sirer, and Robbert Van Renesse. 2016.
Bitcoin-ng: A scalable blockchain protocol. In 13th {USENIX} Symposium on
Networked Systems Design and Implementation ({NSDI} 16). 45‚Äì59.
[8] Franco Giannessi and Antonino Maugeri. 1995. Variational inequalities and
network equilibrium problems. Springer.
[9] Google. 2019. Google Cloud. https://cloud.google.com/
[10] Tai Manh Ho, Nguyen H Tran, Cuong T Do, SM Ahsan Kazmi, Tuan LeAnh, and
Choong Seon Hong. 2015. Data offloading in heterogeneous cellular networks:
Stackelberg game based approach. In 2015 Asia-Pacific Network Operations and
Management Symposium. IEEE, 168‚Äì173.
[11] Markus Jakobsson and Ari Juels. 1999. Proofs of work and bread pudding proto-
cols. In Secure Information Networks. Springer, 258‚Äì272.
[12] Suhan Jiang, Xinyi Li, and Jie Wu. 2019. Hierarchical Edge-Cloud Computing for
Mobile Blockchain Mining Game. In Proc. of the 39th IEEE International Conference
on Distributed Computing Systems (ICDCS 2019), Vol. 15.
[13] Ari Juels and Burton S Kaliski Jr. 2007. PORs: Proofs of retrievability for large
files. In Proceedings of the 14th ACM conference on Computer and communications
security. Acm.
[14] Aggelos Kiayias, Alexander Russell, Bernardo David, and Roman Oliynykov. 2017.
Ouroboros: A provably secure proof-of-stake blockchain protocol. In Annual
International Cryptology Conference. Springer.
[15] Sunny King and Scott Nadal. 2012. Ppcoin: Peer-to-peer crypto-currency with
proof-of-stake. self-published paper, August (2012).
[16] Daniel Larimer. 2014. Delegated proof-of-stake (dpos). Bitshare whitepaper
(2014).
[17] Liqing Liu, Zheng Chang, Xijuan Guo, Shiwen Mao, and Tapani Ristaniemi. 2017.
Multiobjective optimization for computation offloading in fog computing. IEEE
Internet of Things Journal 5, 1 (2017), 283‚Äì294.
[18] Mengting Liu, F Richard Yu, Yinglei Teng, Victor CM Leung, and Mei Song.
2018. Joint computation offloading and content caching for wireless blockchain
networks. In IEEE INFOCOM 2018-IEEE Conference on Computer Communications
Workshops.
[19] Yang Liu, Changqiao Xu, Yufeng Zhan, Zhixin Liu, Jianfeng Guan, and Hongke
Zhang. 2017. Incentive mechanism for computation offloading using edge com-
puting: a Stackelberg game approach. Computer Networks 129 (2017), 399‚Äì409.
[20] Andrew Miller, Ari Juels, Elaine Shi, Bryan Parno, and Jonathan Katz. 2014. Per-
macoin: Repurposing bitcoin work for data preservation. In 2014 IEEE Symposium
on Security and Privacy. IEEE.
[21] Satoshi Nakamoto et al. 2008. Bitcoin: A peer-to-peer electronic cash system.
(2008).
[22] Sunoo Park, Krzysztof Pietrzak, Albert Kwon, Jo√´l Alwen, Georg Fuchsbauer,
and Peter Gazi. 2018. Spacemint: A cryptocurrency based on proofs of space.
Financial Cryptography and Data Security (2018).
[23] Rafael Pass and Elaine Shi. 2017. Hybrid consensus: Efficient consensus in the
permissionless model. In 31st International Symposium on Distributed Computing
(DISC 2017). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[24] Fahad Saleh. 2019. Blockchain without waste: Proof-of-stake. Available at SSRN
3183935 (2019).
[25] Ali Shoker. 2017. Sustainable blockchain through proof of exercise. In 2017 IEEE
16th International Symposium on Network Computing and Applications (NCA).
IEEE, 1‚Äì9.
[26] Lingyang Song, Dusit Niyato, ZhuHan, and EkramHossain. 2014. Game-theoretic
resource allocation methods for device-to-device communication. IEEE Wireless
Communications 21, 3 (2014), 136‚Äì144.
[27] Youming Sun, Hongxiang Shao, Xin Liu, Jian Zhang, Junfei Qiu, and Yuhua
Xu. 2015. Traffic Offloading in Two-Tier Multi-Mode Small Cell Networks over
Unlicensed Bands: A Hierarchical Learning Framework. TIIS 9, 11 (2015), 4291‚Äì
4310.
[28] Ken‚Äôs Tech Tips. 2018. Download Speeds: What Do 2G, 3G, 4G and 5G Actually
Mean?
[29] Xiumin Wang, Xiaoming Chen, Weiwei Wu, Ning An, and Lusheng Wang. 2016.
Cooperative application execution in mobile cloud computing: A Stackelberg
game approach. IEEE Communications Letters 20, 5 (2016), 946‚Äì949.
[30] Qiufen Xia,Weifa Liang, ZichuanXu, and Bingbing Zhou. 2014. Online algorithms
for location-aware task offloading in two-tiered mobile cloud environments. In
Proceedings of the 2014 IEEE/ACM 7th international conference on utility and cloud
computing. IEEE Computer Society, 109‚Äì116.
[31] Liang Xiao, Caixia Xie, Tianhua Chen, Huaiyu Dai, and H Vincent Poor. 2016. A
mobile offloading game against smart attacks. IEEE Access 4 (2016), 2281‚Äì2291.
[32] Zehui Xiong, Shaohan Feng, Dusit Niyato, Ping Wang, and Zhu Han. 2018. Opti-
mal pricing-based edge computing resource management in mobile blockchain.
In 2018 IEEE International Conference on Communications.
[33] Huaqing Zhang, Yong Xiao, Shengrong Bu, Dusit Niyato, Richard Yu, and Zhu
Han. [n.d.]. Fog computing in multi-tier data center networks: a hierarchical
game approach. In 2016 IEEE international conference on communications.
[34] Xiaonan Zhang, Linke Guo, Ming Li, and Yuguang Fang. 2016. Social-enabled
data offloading via mobile participation-a game-theoretical approach. In 2016
IEEE Global Communications Conference.
180