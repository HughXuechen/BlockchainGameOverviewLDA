User Matching on Blockchain for Computation Offloading in Ultra-Dense Wireless Networks
User Matching on Blockchain for Computation
Offloading in Ultra-Dense Wireless Networks
Shuming Seng , Changqing Luo,Member, IEEE, Xi Li , Heli Zhang , and Hong Ji , Senior Member, IEEE
Abstract—The popularity of mobile devices has driven the
occurrence of ultra-dense wireless networks (UDNs) to
accommodate high volumes of data therein generated by mobile
users (MUs) running various mobile applications, such as virtual
reality/augmented reality (VR/AR) and online gaming. Since many
such mobile applications are computation-intensive, mobile edge
computing (MEC), a promising computing paradigm that can
provide on-demand computation resources (i.e., virtual machines
(VMs)), is considered to adopt for allowing MUs to offload their
computation tasks to EgSvrs in the proximity. Previous works have
developed many schemes to schedule computation tasks to be
offloaded to edge servers (EgSvrs). However, these developed
schemes are centralized, which are vulnerable to congested
coordination operations, and have no trustworthiness guarantee as
well. In this paper, we propose to design a decentralized
coordination scheme to orchestrate MUs and EgSvrs for scheduling
computation tasks to their right VMs by taking advantage of
blockchain technology. Specifically, we develop an efficient task-VM
matching algorithm that jointly considers task execution time and
energy consumption. Particularly, we prove the stability of the task-
VM matching achieved by the developed matching algorithm.
Besides, we further implement the developed task-VM matching
algorithm on the blockchain by developing a smart matching
contract to perform task-VM matching on the blockchain without
trusted third parties. Extensive simulation results demonstrate that
our decentralized coordination scheme can improve the
performance significantly and converge to a stable state very quickly.
Index Terms—Ultra-dense wireless networks (UDNs), mobile
edge computing (MEC), blockchain, computation offloading,
matching.
I. INTRODUCTION
T HE increasing popularity of mobile devices like smart-
phones and tablets has led to the ever-increasing data
volumes, which hence have driven the evolution of wireless
networks. In the past decades, we have witnessed the emer-
gence of various wireless networks, such as the macrocell
based, the microcell based, the picocell based, the femtocell
based, etc., [1]–[4]. Their emergences are due to the demand
for accommodating the ever-increasing data traffic therein.
Specifically, they take advantage of the cell splitting technol-
ogy [5] to continually divide the cells of wireless networks
into smaller and smaller ones along with the time. As a result,
cells in some areas (e.g., metro-cities) are very crowded,
which naturally leads to an ultra-dense wireless network
(UDN) with small-cell base stations (SBSs) [6], [7], for pro-
viding very high system capacity to accommodate high data
volumes.
On the other hand, mobile devices’ explosive growth has
also driven the emergence of various mobile applications.
More importantly, many of them are generally computation-
intensive, such as virtual reality/augmented reality (VR/AR),
object recognition, and online gaming [8], [9]. Running these
mobile applications typically requires high computations
from mobile devices. However, it is a well-known fact that
current mobile devices usually have limited computation
resources that cannot meet the demand sufficiently. Therefore,
new computing frameworks are in dire need to enable
mobile users (MUs) to play with various computation-
intensive mobile applications smoothly.
For this purpose, academia and industry propose mobile
edge computing (MEC) to empower MUs to run computation-
intensive mobile applications. Specifically, the MEC paradigm
enables MUs to offload computations to their nearby edge
servers (EgSvrs), which provide on-demand computation
resources, i.e., virtual machines (VMs) (e.g., Amazon EC2
M3.large instances [10]), to help conduct the required compu-
tation tasks [11], [12]. In particular, though offloading trans-
missions incur extra transmission delay, the time is acceptable
because EgSvrs are very close to MUs (e.g., sitting at SBSs),
which makes MEC very suitable for UDNs. In response to
adopting MEC in UDNs, many researchers have been con-
cerned about the most related research issues and developed
quite a few computation offloading schemes. For example,
Chen et al. [13] develop an online SBS peer offloading frame-
work in MEC-enabled UDNs to maximize the long-term sys-
tem performance without knowing future system dynamics
information. Sun et al. [14] consider the energy consumption
of the computation offloading in MEC-enabled UDNs.
Despite having been studied for years, many problems are
still open, and extensive efforts are required to fulfill the
Manuscript received October 1, 2019; revised February 19, 2020 and May
10, 2020; accepted May 23, 2020. Date of publication June 9, 2020; date of
current version July 7, 2021. This work was partially supported by the
National Natural Science Foundation of China under Grants 61771070 and
61671088, Commonwealth Cyber Initiative (CCI) Smart Cities, and the
Beijing University of Posts and Telecommunications (BUPT) Excellent Ph.D.
Students Foundation under Grant CX2019219. Recommended for acceptance
by Dr. Yulei Wu. (Corresponding author: Xi Li.)
Shuming Seng is with the Key Laboratory of Universal Wireless Communi-
cations, Ministry of Education, Beijing University of Posts and Telecommuni-
cations, Beijing, China, and also with the Department of Computer
Science, Virginia Commonwealth University, Richmond, VA 23284 USA
(e-mail: seng@bupt.edu.cn).
Changqing Luo is with the Department of Computer Science, Virginia Com-
monwealth University, Richmond, VA 23284USA (e-mail: cluo@vcu.edu).
Xi Li, Heli Zhang, and Hong Ji are with the Key Laboratory of Universal
Wireless Communications, Beijing University of Posts and Telecommunica-
tions, Beijing 100876, China (e-mail: lixi@bupt.edu.cn; zhangheli@bupt.edu.
cn; jihong@bupt.edu.cn).
Digital Object Identifier 10.1109/TNSE.2020.3001081
IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021 1167
2327-4697 � 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-9740-7082
https://orcid.org/0000-0001-9740-7082
https://orcid.org/0000-0001-9740-7082
https://orcid.org/0000-0001-9740-7082
https://orcid.org/0000-0001-9740-7082
https://orcid.org/0000-0003-0466-1933
https://orcid.org/0000-0003-0466-1933
https://orcid.org/0000-0003-0466-1933
https://orcid.org/0000-0003-0466-1933
https://orcid.org/0000-0003-0466-1933
https://orcid.org/0000-0002-5994-9419
https://orcid.org/0000-0002-5994-9419
https://orcid.org/0000-0002-5994-9419
https://orcid.org/0000-0002-5994-9419
https://orcid.org/0000-0002-5994-9419
https://orcid.org/0000-0002-1640-2894
https://orcid.org/0000-0002-1640-2894
https://orcid.org/0000-0002-1640-2894
https://orcid.org/0000-0002-1640-2894
https://orcid.org/0000-0002-1640-2894
mailto:
mailto:
mailto:
mailto:
mailto:
mailto:
mission of adopting MEC in UDNs. First, previously devel-
oped schemes are centralized and vulnerable to a single point
of failure and congested coordination operations among MUs
and EgSvrs. Specifically, these schemes assume one central-
ized coordinator to orchestrate the scheduling of computation
offloading among massive MUs and EgSvrs in a practical
UDN. The fact is that most of the MUs may request computa-
tion offloading services at a moment. As a consequence, the
concurrent service requests can cause considerable coordina-
tion operations, which hence challenges the single coordina-
tor. In particular, UDNs in nature suffer higher mobility
management demands, which can significantly increase the
number of computation offloading service requests, further
exacerbating the congested coordinations [14], [15]. Second,
these previously developed schemes have not carefully con-
sidered the trustworthiness among MUs, EgSvrs, and the coor-
dinator. In practice, there is no fully established trust among
them, as all of them are individually rational and attempt to
maximize their own profits [16]. As a result, the yielded coor-
dination results are not trustworthy. Therefore, a decentralized
computation offloading coordination scheme with trustworthi-
ness is in desperate need.
The emergence of blockchain provides a promising alterna-
tive solution to the aforementioned issues. Blockchain is a
decentralized public ledger shared and agreed among all par-
ticipants in a peer-to-peer (P2P) network [17]–[19]. Each par-
ticipant in the P2P network can view the contents in all
blocks. All users can write their transactions into a block after
creating this block, and all participants can verify the content
in the block. Thus, contents stored on blockchain are unable to
be manipulated, enhancing the trustworthiness of all users and
participants. However, how to leverage blockchain technology
to design decentralized computation offloading schemes is still
a challenging problem. In the literature, there have been a few
existing works on blockchain-based applications in wireless
networks [20]–[28]. Nevertheless, most of them attempt to
address research issues within wireless networks, such as data
security, trustworthiness, and blockchain-based radio resource
management. Exploiting blockchain technology in wireless
networks is still in the infancy, particularly when applying it
to perform the coordination among MUs and EgSvrs for com-
putation offloading in MEC-enabled UDNs.
In this paper, we propose to take advantage of blockchain
technology to design a decentralized coordination scheme for
computation offloading in UDNs. Specifically, to schedule
MUs’ computations to the right EgSvrs, we base a deferred
acceptance algorithm, a widely studied matching algo-
rithm [29], to design a task-VM matching algorithm that
jointly considers task execution time and energy consumption.
In particular, we have proved that the designed matching algo-
rithm can achieve a stable matching. Moreover, to perform the
task-VM matching between MUs and EgSvrs without trusted
third-parties, we leverage smart contract to develop a novel
smart matching contract to implement the designed task-VM
matching algorithm on the blockchain. Simulation results
demonstrate the significant performance improvement and the
fast convergence of the designed coordination scheme.
Our major contributions of this paper are summarized as
follows.
1) We take advantage of blockchain technology to design
a decentralized coordination scheme for computation
offloading in UDNs.
2) We design an efficient task-VM matching algorithm to
perform the matching between MUs and EgSvrs, which
jointly takes into account task execution time and
energy consumption.
3) We implement the designed task-VM matching algo-
rithm on the blockchain by developing a new smart
matching contract to perform matching on the block-
chain without trusted third parties.
4) We have proved that the achieved task-VM matching is
stable.
5) We conduct extensive and thorough simulations to eval-
uate the performance of the decentralized coordination
scheme. The simulation results show the significant per-
formance improvement and the fast convergence speed
achieved by the developed scheme.
The rest of this paper is organized as follows. We first intro-
duce the most related works in Section II. Then, we present
the considered system model in Section III. Afterwards, we
describe the developed decentralized coordination scheme for
computation offloading in UDNs in Section IV. We subse-
quently present and discuss the performance results of the sim-
ulation thoroughly in Section V, and finally conclude this
paper in Section VI.
II. RELATED WORKS
Due to the popularity of cryptocurrency systems, block-
chain technology, one of the most fundamental techniques
applied in cryptocurrency systems, has received extensive
attention from academia and industry. Particularly, many
researchers have explored blockchain technology in wireless
networks and studied research issues therein, such as data
security, trustworthiness, and blockchain-based radio resource
management. We summarize them as follows.
A chunk of previous works has leveraged blockchain tech-
nology to protect data security and privacy in wireless net-
works. For example, Kotobi et al. [20] employed blockchain
technology to design a verification scheme for secure spec-
trum sharing in cognitive radio networks. Raju et al. [21] took
advantage of blockchain technology to develop a decentral-
ized user identity management system for user privacy protec-
tion in cloud-centric cognitive cellular networks.
In addition to data security and privacy, some previous works
are concerned about trustworthiness in wireless networks and
have explored blockchain technology to address this issue. For
instance, Liu et al. [22] designed a blockchain-based consensus
algorithm for the trust establishment amongst electric vehicles
in vehicle-to-vehicle (V2V) networks with the support of edge
computing. Lin et al. [23] also developed a blockchain-based
consensus scheme to verify the authenticity of channel state
information for device-to-device (D2D) communications in
wireless cellular networks. Yazdinejad et al. [24] designed a
1168 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
blockchain-enabled authentication approach for a re-authentica-
tion issue incurred by frequent handovers between two base sta-
tions. Guo et al. [25] designed a practical Byzantine fault
tolerance consensus method to guarantee the trusted authentica-
tion of IoT (Internet of Things) terminals.
Some previous works have employed blockchain technol-
ogy for managing radio resources in wireless networks. For
example, Dai et al. [26] exploited blockchain and artificial
intelligence techniques to construct a secure and intelligent
network architecture to enable a secure and flexible resource
sharing in wireless networks. Qiao et al. [27] applied block-
chain technology to design a radio resource management
framework for radio resource trading and task assignments in
MEC-enabled wireless networks. Rawat et al. [28] also
exploited one of the blockchain features, i.e., a public ledger,
to construct a sublease system for radio resource allocation.
From the above analysis, we notice that applying block-
chain technology in wireless networks has been widely stud-
ied. However, few of them take advantage of blockchain
technology into computation offloading for UDNs.
III. SYSTEM MODEL
In this section, we first present the mobile application model
and then the computation offloading in the considered UDN.
A. The Mobile Application Model
We consider that M MUs in a UDN run computation-
intensive mobile applications composed of many computation
tasks1. Specifically, MU m runs a mobile application that con-
sists of Cm tasks. Let Cm ¼ f1; 2; . . . ; Cmg denote the set of
tasks. Thus, we have T ¼ C1 [ C2 � � � [ CM to represent the
tasks of the mobile applications run by the M MUs. Task cm,
cm 2 Cm, is usually defined by a tuple hlcm; dcm; tcmi, where
lcm is the computation workload, indicating the number of
CPU cycles, dcm is the data size, i.e., the number of bits, and
tcm is the task execution deadline.
B. Computation Offloading in a UDN
To ease the presentation, we consider a typical but simpli-
fied UDN with one conventional high-power macro-cell base
station (MBS) and N low-power SBSs (e.g., picocells, micro-
cells, and femtocells), as shown in Fig. 1. Particularly, only
one EgSvrs is deployed at an SBS. Let N ¼ f1; 2; . . . ; Ng
denote the set of EgSvrs. M MUs, represented by M¼
f1; 2; . . . ;Mg, are geographically distributed in this UDN.
The MUs’ access to the MBS and the SBSs are coordinated by
adopting the orthogonal frequency division multiple access
(OFDMA) technique. Besides, we also consider employing a
channel assignment strategy to allocate available radio chan-
nels for the communications between MUs and the MBS/
SBSs, in order to avoid the same channel interference.
An EgSvr generally has a limited available computation
resource that is a set of VMs. Specifically, we consider that
EgSvr n has Vn VMs. Let Vn ¼ f1; 2; . . . ; Vng denote the set
of VMs. Hence, we have V ¼ V1 [ V2 � � � [ VN to represent
the available VMs provided by N EgSvrs. VM vn, vn 2 Vn, is
defined by the CPU frequency fvn . In practice, an EgSvr
assigns one VM to a mobile device that offloads a computation
task, and a VM can only be allocated to one task at a time.
To enable an MU to run a computation-intensive mobile
application efficiently, the MU needs to schedule the place of
executing computation tasks, i.e., determining whether a compu-
tation task to be executed locally or remotely. More importantly,
due to the ultra-dense deployment, an MUmay be surrounded by
multiple SBSs, and hence can offload computations to multiple
corresponding EgSvrs at a time. Thus, the MU needs to further
determine which EgSvr to execute a task, i.e., finding the associa-
tion between a VM belonged to an EgSvr and a task. We define a
binary variable xcm;vn to indicate whether MU m’s task cm,
8cm 2 Cm and 8m 2M, is assigned to a VM vn belonged to
EgSvr n, 8vn 2 Vn and 8n 2 N . As a result, we can haveP
cm2T xcm;vn � 1; 8vn 2 V, as a VM can only be associated
with one task, and
P
vn2Vn xcm;vn � 1; 8cm 2 T, as a task can
only be assigned to oneVM.
When a task is scheduled to be executed by an EgSvr, the
MU needs to transmit the task to the EgSvr via a wireless con-
nection. We consider that the wireless connection follows a
Rayleigh fading channel model. The signal-to-interference
and noise rate (SINR) of a wireless connection between MU
m and SBS n can be obtained by
gcm;n ¼
pcm;ngm;n
Im;n þN0B0
; (1)
where Im;n is the co-channel interference of the link from MU
m to SBS n, pcm;n is the transmission power, B0 is the trans-
mission bandwidth, gm;n is the channel gain of the wireless
connection between MU m and SBS n, and N0 is the power
spectrum density of noise. Particularly, to conduct reliable
communications, the SINR needs to satisfy
gcm;n � Sth; 8cm 2 T; n 2 N ; (2)
where Sth is the pre-defined threshold. According to the Sha-
non theory, the transmission rate is
Rcm;n ¼ B0 log 2ð1þ gcm;nÞ: (3)
Fig. 1. An example of the considered UDN.
1 Note that we can obtain the information about a mobile application’s
computation tasks by parsing its profile, which is studied by many previous
works [30], [31].
SENG et al.: USER MATCHING ON BLOCKCHAIN FOR COMPUTATION OFFLOADING IN ULTRA-DENSE WIRELESS NETWORKS 1169
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
IV. DECENTRALIZED COORDINATION ON BLOCKCHAIN
FOR COMPUTATION OFFLOADING
In this section, we first present the developed blockchain
platform for matching MUs and EgSvrs, then the designed
task-VM matching algorithm, and finally the smart matching
contract implementation.
A. The Blockchain Platform for Matching MUs and EgSvrs
Our developed blockchain platform features a decentral-
ized matching between MUs and EgSvrs to conduct compu-
tation offloading in UDNs, as shown in Fig. 2. Specifically,
we use the blockchain, which is backed up by miners, to
replace the traditional centralized task assignment platform.
EgSvrs are sellers who are willing to sell their available
computation resources (i.e., VMs) to MUs for profits, while
MUs are buyers who need to buy EgSvrs’ available compu-
tation resources to conduct remote computations. Particu-
larly, both MUs and EgSvrs communicate with the
blockchain platform directly, instead of among themselves.
The blockchain platform enables MUs and EgSvrs to make
transactions by conducting the task-VM matching. In partic-
ular, the matching is implemented by employing smart con-
tracts. In addition, the developed blockchain platform
supports two types of actions: on-chain actions that are
recorded into the blockchain (i.e., represented by the solid
lines in the figure) and off-chain actions that are executed
without blockchain (i.e., represented by the dotted lines in
the figure).
To enable the matching, EgSvrs and MUs submit to the
blockchain platform with their computation provisioning
service requests and computation offloading service
requests, respectively. A computation provisioning service
request includes the description of the number of available
VMs and its price, and a computation offloading service
request contains the description of all computation tasks
owned by the MU and the information of radio channels
between the MU and nearby SBSs. The matching is imple-
mented by a smart contract which is actually a program to
automate service transactions (i.e., the task-VM matching)
by using the data submitted by MUs and EgSvrs to the
blockchain. A transaction can generally trigger the execu-
tion of predefined functions in a smart contract and change
the state of the smart contract (i.e., the state of the match-
ing process). Miners store and execute the predefined
functions, and matching results are packed as transactions
to be added into the blockchain.
B. Stable Task-VM Matching for Computation Offloading
1) Problem Formulation: To conduct the task-VM match-
ing, tasks and VMs are virtual buyers and sellers, respectively.
We formally define task-VM matching as follows.
Definition 1 (A task-VM matching): Given the set of sellers
V and the set of buyers T, a task-VM matching is a mapping
function f: V [ T! 2T [ 2V, such that:
� For 8cm 2 T, fðcmÞ 2 V.
� For 8vn 2 V, fðvnÞ 2 T.
� For 8cm and 8vn, fðcmÞ ¼ vn if and only if fðvnÞ ¼ cm.
However, performing task-VM matching in practical UDNs
is subject to some constraints. First, due to reliable wireless
transmissions, the SINR of a channel between an MU and an
SBS needs to meet its threshold Sth. Second, a task can be
assigned to at most one VM, rather than multiple VMs. Thus,
we can define a feasible task-VM matching as follows.
Definition 2 (A feasible task-VM matching): A task-VM
matching f is feasible, if:
� For 8cm 2 T, each of its matched seller vn ¼ fðcmÞ
should satisfy gcm;vn � Sth.
� For 8cm 2 T, there exists at most one matched seller,
i.e., jffðcmÞgj � 1.
2) The Utility Function: We consider the utility as a metric
to construct matching preferences of the buyers and sellers.
Recall that a task needs to be executed at the expense of
energy consumption while satisfying the required task execu-
tion deadline. Thus, we consider energy consumption and task
execution time in the utility function. The energy consumed
for executing task cm locally can be derived by elcm ¼ klcmf
2
m
[8], [36], where k is a coefficient related to the chip architec-
ture and fm is the frequency clock of MU m. Likewise, the
energy consumed for executing task cm remotely by VM vn is
given by evmcm;vn
¼ klcmf
2
vn
, where fvn is the frequency clock of
the VM. Moreover, we can find the task computing time tlcm
and tvmcm;vn
by tlcm ¼ lcm=fm and tvmcm;vn
¼ lcm=fvn , respectively.
When task cm is executed by VM vn, the energy is consumed
by the offloading transmission, and the extra time is required
for the transmission delay. Hence, we can obtain the the
amount of energy consumption and the transmission delay by
eocm;n ¼ pcm;ndcm=Rcm;n and t
o
cm;n ¼ dcm=Rcm;n, respectively.
We consider that the buyers’ and sellers’ utility function
consists of two parts: the immediate cost due to task exeuction
time and energy consumption and the immediate revenue due
to completing the required computations. Hence, the utility
function is defined as
U ¼ alRlðlÞ � atCtðtÞ � aeCeðeÞ; (4)
where al, at, and ae (al;at;ae � 0, and al þ at þ ac ¼ 1) are
coefficients, RlðlÞ is a revenue function that is related to a
task’s workload l, CtðtÞ is a cost function that depends on the
task execution time t, and CeðeÞ is a cost function that is
related to the amount of consumed energy e.
Fig. 2. The blockchain platform for matching MUs and EgSvrs.
1170 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
Specifically, we have the buyer’s utility function of assign-
ing task cm to VM vn as follows.
Ub
cm;vn
¼ �atCtðtocm;vn
Þ � aeCeðeocm;vn
Þ; (5)
where Cb
t ðtocm;vn
Þ and Ceðeocm;vn
Þ are the costs received by
buyer cm. It is noteworthy that since no computations are con-
ducted at the buyer side in this case, RlðlcmÞ ¼ 0. Ctðtocm;vn
Þ is
obtained by
Ctðtocm;vn
Þ ¼ lnð1þ tocm;vn
Þ= lnð1þ tmx
cm
Þ; (6)
where tmx
cm
¼ maxftlcm; tocm;vn
j8vn 2 Acmg (Here, Acm is
defined as the set of buyer cm’s feasible matching sellers).
Likewise, Ctðtocm;vn
Þ is given by
Ctðtocm;vn
Þ ¼ lnð1þ eocmÞ= lnð1þ emx
cm
Þ; (7)
where emx
cm
¼ maxfelcm; eocm;vn
j8vn 2 Acmg.
Similarly, we can have the buyer’s utility function of exe-
cuting task cm locally as follows.
Ub
cm;0 ¼ alRlðlcmÞ � atCtðtlcm;0Þ � aeCeðelcm;0Þ; (8)
where RðllcmÞ, Ctðtlcm;0Þ, and Ceðelcm;0Þ are the received reve-
nue and costs. RlðlcmÞ is defined as
RlðlcmÞ ¼ lnð1þ lcmÞ= lnð1þ lmxÞ; (9)
where lmx ¼ maxflcm j8cm 2 Bvng.
In addition, we can also have the seller’s utility function
accordingly as
Us
cm;vn
¼ alRlðtcmÞ � atCtðlcmÞ � aeCeðevmcm;vn
Þ; (10)
where RlðlcmÞ, Ctðtvmcm;vn
Þ, and Ceðevmcm;vn
Þ are the revenue
and costs, respectively, received by seller vn. Similarly, we
have Ctðtvmcm;vn
Þ ¼ lnð1 þ tvmcm;vn
Þ= lnð1 þ tmx
vn
Þ; 8vn 2 V,
where tmx
vn
¼ maxftvmcm;vn
j8cm 2 Bvng (Here Bvn is the set of
seller vn’s feasible matching buyers). Likewise, we have
Ceðevmcm;vn
Þ ¼ lnð1þ evmcm;vn
Þ= lnð1þ emx
vn
Þ, where emx
vn
¼ max
fevmcm;vn
j8cm 2 Bvng.
According to the aggregated transaction information, i.e.,
task profile, wireless connection conditions, and available
computational resources, on the blockchain platform, buyer
cm and seller vn (8cm 2 T and 8vn 2 V) can independently
construct preference lists, respectively, by sorting the utilities
in a descending order. Denote by �cm ¼ des½fUb
cm;vn
;
Ub
cm;0j8vn 2 Acmg� and Dvn ¼ des½fUs
cm;vn
j8cm 2 Bvng� the
descending utility lists of buyer cm and seller vn (8cm 2
T; 8vn 2 V), respectively, where des½�� is to sort the given list
in a descending order, Ub
cm;vn
and Us
vn;cm
are the buyer’s and
seller’s utilities between buyer cm and seller vn, respectively.
The corresponding sellers and buyers in�cm and Dvn construct
preference lists Pb
cm
and Ps
vn
.
3) The Matching Algorithm Design: We base the deferred
acceptance algorithm to design a task-VM matching algo-
rithm. In particular, due to the feasibility and stability, we
enhance the deferred acceptance matching algorithm to enable
the designed task-VM matching algorithm to find a stable
matching result. In the following, we describe the designed
matching algorithm.
At the initialization step, buyers and sellers choose feasible
matching candidates satisfying the conditions, i.e.,
gcm;vn � Sth given by Definition 2. Denote by Acm and Bvn
the feasible matching candidates of buyer cm and seller vn,
respectively. Based on both candidate lists, buyers and sellers
then construct their preference lists (Pb
cm
and Ps
vn
), respec-
tively. Afterwards, they initialize their rejection lists as empty
sets. Denote by Rb
cm
and Rs
vn
the rejection lists of buyer cm
and seller vn, respecitvely. Hence, we have Rb
cm
¼ ;, and
Rs
vn
¼ ;, for 8cm 2 T, vn 2 V.
At the main iteration step, the matching process is con-
ducted. Specifically, Pb
cm
, Ps
vn
, Rb
cm
, Rs
vn
, and xcm;vm , for
8cm 2 T; 8vn 2 V, are updated at each iteration round. More-
over, buyer cm 2 T applies to its favorite seller vn� in Pb
cm
,
i.e., Ub
cm;vn� > Ub
cm;vn
; 8vn 2 Pb
cm
; vn 6¼ vn�, or determines to
execute the task locally if Ub
cm;0 > Ub
cm;vn
; 8vn 2 Pb
cm
. On the
other hand, every seller vn 2 V receives a set of requests from
buyers. These requests are assigned to a waiting queue, which
is represented byWvn . Note that all waiting queues will be ini-
tialized to be empty at the beginning of each matching round.
Seller vn accepts buyer cm� if the buyer has the highest utility
in Wvn , i.e., Us
vn;cm� > Us
vn;cm
; 8cm 2 Wvn ; cm 6¼ cm�, and
rejects the other buyers in Wvn , i.e., xcm�;vn ¼ 1. Specifically,
seller vn will remove its rejected buyers from Ps
vn
into Rs
vn
.
The rejected buyers will also move the sellers who reject them
from their preference lists into their rejection lists, i.e.,
xcm;vn ¼ 0; 8cm 2 Rs
vn
. As a result, parts of EgSvrs receive
one or more requests at each iteration round. The above pro-
cess continues until no more buyers are rejected.
We summarize the designed matching algorithm in
Algorithm 1.
4) The Stability of the Task-VM Matching: It is of great
importance to show whether the task-VM matching is stable
or not. To explore the stability of the task-VM matching, we
first give two definitions as follows.
Definition 3 (Individual Rationality): A task-VM matching
f is individually rational if:
� Every buyer is matched to a seller to obtain the utility
which is greater than that being obtained for executing
the buyer’s task locally, i.e., Ub
cm;fðcmÞ > Ub
cm;0.
� For every buyer cm, fðcmÞ should satisfy the conditions
in Definition 2, i.e., Ub
cm;fðcmÞ ¼ �1 if the conditions
in Definition 2 are not met.
For a stable task-VM matching, being individually rational
is a requisite condition. It guarantees that a buyer prefers exe-
cuting tasks by utilizing EgSvrs that can maximize its utility
as long as the basic requirements of conducting computation
offloading need to be satisfied for ensuring reliable
communications.
In addition to the individual rationality, a stable task-VM
matching also needs to satisfy another necessary condition
called blocking pair, i.e., no blocking pair exists. Let p 	k q
denote participant k preferring p to q because k can obtain the
higher utility for matching with p than that of matching with
q. We define the blocking pair as follows.
SENG et al.: USER MATCHING ON BLOCKCHAIN FOR COMPUTATION OFFLOADING IN ULTRA-DENSE WIRELESS NETWORKS 1171
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
Definition 4 (Blocking Pair): For every buyer cm/seller vn
(cm 2 T; vn 2 V), which are matched with fðcmÞ=fðvnÞ, there
exists a blocking pair if there is a pair of buyer p and seller q
satisfying q 	cm fðcmÞ and p 	vn fðvnÞ.
Particularly, the definition of the blocking pair can be pre-
sented mathematically as follows.
ð8cm 2 T; vn 2 VÞ ðcm; fðcmÞÞ; ðvn; fðvnÞÞð Þ )
ð9p 2 T; q 2 VÞ q 	cm fðcmÞ and p 	vn fðvnÞð Þ:
Blocking pairs can obtain higher utilities. This means the
matched participants have a strong willingness to deviate
from the matching result, i.e., the matching is not stable.
In the following, we define the stability of the task-VM
matching based on the definitions of individual rationality and
blocking pairs.
Definition 5 (Stability): A task-VM matching f is stable if
it is individually rational and contains no blocking pairs.
As a result, we can arrive at Proposition 1 about the stability
of the task-VM matching achieved by Algorithm 1.
Proposition 1: The matching result derived by applying
Algorithm 1 is stable.
Proof: To show the stability of the task-VM matching, we
first prove that the algorithm is individually rational. Specifi-
cally, (5) and (8) are used in the algorithm to compare the util-
ities received by executing a task remotely and locally, which
thus leads to a higher utility received by a matched seller.
Moreover, the initialization of Algorithm 1 can also ensure the
feasibility of matching results. Therefore, we can conclude
that individual rationality is satisfied.
Then, we show the nonexistence of blocking pairs. Assume
there is a blocking pair ðp; qÞ, p 2 T; q 2 V. According to Def-
inition 4, ðp; qÞ satisfies q 	p fðpÞ and p 	q fðqÞ. According
to Algorithm 1, if buyer p prefers q to fðpÞ, q should have a
greater utility than that obtained by fðpÞ. As a result, buyer p
applies to q before applying to fðpÞ. However, p fails to be
matched with q. The reason is only that q has rejected p, in
order to accept another buyer who has a higher utility. This
contradicts with p 	q fðqÞ. As a result, there is no blocking
pair after obtaining the matching result by applying
Algorithm 1, which thus concludes the proof. &
5) Computational Complexity: Algorithm 1 derives the
matching result iteratively. Based on the algorithm, we can
notice that the number of iterations is highly related to the
number of candidates to be matched at the sides of both buyers
and sellers. Let Mcm and Nvn denote the number of candidates
to be matched at the sides of buyer cm and seller vn,
respectively.
To analyze the computational complexity, we first consider
the best case where every buyer prefers the seller who also
prefers the corresponding buyer in the first-matching round.
The matching process is completed within the one-round itera-
tion, which takes the computational complexity of Oð1Þ.
Then, we consider a worst-case where a buyer is finally
matched to a seller after both the buyer and seller search all
their candidates (i.e., �cm and Dvn ), respectively. Particularly,
buyers have matching collisions to one another. In this case,
the number of iterations at the side of buyers is
P
m Mcm , andP
n Nvn at the side of the sellers. Therefore, we can find that
the matching process requires the computational complexity
of OðPm McmÞ ðorOð
P
n NvnÞÞ. From this result, we can
conclude that the computational complexity required by
Algorithm 1 is in polynomial time, which theoretically shows
that our designed matching algorithm can efficiently find a
matching result.
C. Smart Matching Contract Implementation
We employ a smart contract-based approach to implement
the task-VM matching on the blockchain. The smart contract
allows buyers and sellers to define and execute contracts on
the blockchain. Specifically, a smart contract is a piece of a
computer program that consists of functions (i.e., the execut-
able units of code within a contract) and data (i.e., the states of
the smart contract). The functions can only be triggered
by specific roles (i.e., sellers or buyers) in the contract, and
the data is the information used for performing task-VM
matching.
After a smart matching contract is deployed on the block-
chain, buyers and sellers can participate in the matching pro-
cess. The contract will first accept and store action data from
the buyers and sellers and then automatically execute the
designed task-VM matching algorithm. The detailed opera-
tions are summarized as follows.
Algorithm 1: The Designed Task-VM Matching Algorithm
1: Initialization
(1) Round t ¼ 0;
(2) Acm ;Bvn ; 8cm 2 T; 8vn 2 V;
(3) Pb
cm
;Ps
vn
; 8cm 2 T; 8vn 2 V;
(4)Rb
cm
;Rs
vn
;Wvn ¼ ;; 8cm 2 T; 8vn 2 V.
2: while true do
3: for all cm 2 T do
4: Find the first element vn� inPb
cm
, the utility of which isUb
cm;vn� ;
5: if vn� ¼ 0 then
6: xcm;vn ¼ 0; 8vn 2 Pb
cm
;
7: else
8: cm applies to vn�, and vn� moves cm intoWvn� ;
9: end if
10: end for
11: for all vn 2 V do
12: Find the favorite buyer cm� inWvn according to Ps
vn
;
13: xcm�;vn ¼ 1;
14: xcm;0vn ¼ 0; 8cm 0 2 Wvn ; cm
0 6¼ cm�;
15: Move the buyers inWvn (except for cm�) fromPs
vn
intoRs
vn
;
16: The rejected buyer cm
0 2 Rs
vn
puts vn from Pb
cm 0 intoRb
cm 0 ;
17: end for
18: if No buyers are rejected at round t then
19: Break;
20: else
21: t �tþ 1;
22: Wvn ¼ ;; 8vn 2 V;
23: end if
24: end while
1172 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
– A new smart contract is created on the blockchain.
– The buyers advertise the task information and wireless
connection conditions, while the sellers advertise the
VM information.
– The smart contract executes the designed matching
algorithm to determine a matching result.
– The buyers and sellers confirm the transactions of task-
VM matchings.
– The smart contract finalizes the market clearing.
Fig. 3 demonstrates the process of a smart matching con-
tract, involving the buyers’ and sellers’ state transitions in the
contract. Specifically, “B”, “S”, and “P” in the figure represent
a buyer, a seller, and a participant (a buyer or a seller), respec-
tively. A buyer has five states: “Offline”, “Online”, “Busy”,
“Completed”, and “Local”, while a seller has four states:
“Offline”, “Online”, “Busy”, and “Completed”.
A state transition is triggered by executing a function in the
contract. The text format of a function is “R: f”, showing that
only the role R can trigger the function f . We describe the
principal functions as follows.
� regist: regist is a function that triggers a buyer or seller
who wants to participate in matching to register to the
blockchain. The buyer or seller is in the “Offline” state
before executing this function and can advertise its
matching information, e.g., task profile, wireless con-
nection conditions, and available computational resour-
ces. Moreover, to prevent violations, the buyer or seller
must pay the refundable deposit once successfully regis-
tering to the blockchain, which encourages participants
to follow the smart contract’s rules faithfully. Since the
payment strategy is widely studied by many previous
works [37], [38], we ignore the description here. The
registered buyer or seller will be transited from the
“Offline” state to the “Online” state after executing this
function.
� match: The function match is automatically executed
by smart contract when buyers and sellers are in the
“Online” state. It first checks the integrity of the match-
ing information and the deposition and then runs
Algorithm 1 to output a matching result. In the mean-
time, the matched buyers and sellers will be transited
from the “Online” state to a “Busy” state after obtaining
the matching result, while the unmatched buyers and
sellers will remain in the “Online” state.
� local and confirm: In the “Busy” state, buyers deter-
mine to offload tasks or to execute tasks locally accord-
ing to the matching result. If the buyers determine to
execute tasks locally, the function local is executed to
trigger state transitioning from “Busy” to “Local”. As a
result, the deposit is refunded, and the buyer is removed
from the contract. If a buyer is matched with a seller, it
sends data to the matched seller who first receives and
executes the offloaded computation task to obtain a
computing result (off-chain actions). When buyers
receive computing results from their corresponding sell-
ers (off-chain actions), they send confirmation messages
to the smart contract and pay the payment to their
matched sellers on the blockchain (on-chain actions).
The sellers also send confirmation messages to the
smart contract after receiving payments (on-chain
actions). The function confirm is used by the con-
firmed buyers and sellers to trigger the state transition-
ing from “Busy” to “Completed” and get deposits and
payments back from the contract (on-chain).
� return: The function return is executed to directly
trigger state transitioning from “Completed” to
“Offline”, if a seller in the “Completed” state wants to
sell its spare computational resources for profits. Then,
the seller performs the registration and pays the
required deposit again to transit the “Offline” state to
the “Online” state.
V. SIMULATION RESULTS
In this section, we present the performance of the designed
matching algorithm by conducting thorough simulations.
A. The Simulation Settings
We evaluate the performance of our designed matching
algorithm by conducting extensive simulations. Specifically,
the network scenario of the simulations is described in Fig. 1,
where MUs are randomly moving within a given area with
multiple SBSs and EgSvrs. The deployment of SBSs follows a
widely-used Poisson point process [6]. The number of MUs
and SBSs are set to be f50; 70; 100g and N ¼ f50; 70g,
respectively.
The wireless connections between MUs and SBSs are con-
sidered as Rayleigh fading channels. Hence, we adopt the path
loss model as 38:46þ 20 log 10ðlÞ dB [39], where l is in meter.
We set the noise power spectrum density at receivers as
�174 dBm=Hz, and the maximum transmission power of
MUs as 26 dBm (or 0.398 W) [39]–[41]. The communication
bandwidth of a wireless connection is randomly drawn from
the range ½10; 20�MHz.
For each EgSvr, the number of its available VMs is ran-
domly chosen from f4; 6; 8; 10g, and the CPU frequency of a
VM is set to be a number randomly drawn from the set
f1:25; 1:5; 1:75; 2g GHz. For each MU, its CPU frequency
cycle is set to 1 GHz, and the number of its computation tasks
is randomly chosen from f5; 10g. For each task, the workload
is a random number within the range ð0; 1:6� Mbs, the corre-
sponding required CPU cycle is set to be a value randomly
drawn from ð0; 0:1� GHz, and the execution deadline is ran-
domly selected from ½0:3; 1� s. The initial weights of utility
Fig. 3. The state transition diagram of smart matching contract
implementation.
SENG et al.: USER MATCHING ON BLOCKCHAIN FOR COMPUTATION OFFLOADING IN ULTRA-DENSE WIRELESS NETWORKS 1173
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
functions are set to be al ¼ at ¼ ae ¼ 1=3. We employ the
Monte Carlo simulation to conduct the simulations over 100
times to find the average performance results.
We summarize the detailed parameter settings in Table I.
B. The Performance Improvement of the Designed Matching
Algorithm
To validate our designed matching algorithm’s efficiency,
we show the average task execution time and the average con-
sumed energy and compare them with that using a decentral-
ized user-EgSvr matching algorithm [42], an energy-based
matching algorithm, and a random matching algorithm. To
analyze the two performance metrics, we change the number
of MUs in the simulation example. Besides, we set N to be 50.
Fig. 4 reveals that the designed matching algorithm can sig-
nificantly decrease the average task execution time. We
observe that the average task execution time achieved by the
designed matching algorithm is lower than that of the user-
server matching algorithm and the randommatching algorithm,
but higher than that of the energy-based matching algorithm.
For example, when the number of MUs in the simulation exam-
ple is 80, the MU spends about 0.28 s, 0.319 s, 0.268 s, and
0.332 s for executing a task by using the designed matching
algorithm, the user-server matching algorithm, the energy-
based matching algorithm, and the random matching algo-
rithm, respectively. This is because the designed matching
algorithm takes into account both execution time and energy
consumption, while others do not. Besides, we can find that the
MUs complete the required computations very quickly. In addi-
tion, we notice that the average task execution time is approxi-
mately linear regarding the number of MUs, which shows that
designing a matching algorithm for computation offloading is
in dire need.
Fig. 5 compares the average consumed energy achieved by
the designed matching algorithm with that by the decentral-
ized user-EgSvr matching, energy-based matching, and ran-
dom matching algorithms. We find that the average energy
consumption achieved by the designed matching algorithm is
the lowest. For example, when the number of MUs in the sim-
ulation example is 60, the MU consumes the energy about
0.21 J , 0.315 J , 0.293 J , and 0.336 J for executing a task by
using the designed matching algorithm, the user-server match-
ing algorithm, the energy-based matching algorithm, and the
random matching algorithm, respectively. The primary reason
is that the designed matching algorithm allows MUs to exe-
cute tasks locally, which can avoid the case that offloading
transmission costs much higher energy consumption. Besides,
we observe that the average energy consumption increases
with the increase in the number of MUs. This is because more
computation tasks compete for the limited computational
resources, resulting in a higher probability that some tasks are
scheduled to EgSvrs with higher energy consumption.
The performance results shown in these figures demonstrate
that the average task execution time and energy consumption
can be improved by jointly taking task execution time and
energy consumption into account. This implies that we need
to balance task execution time and energy consumption when
designing a matching algorithm for computation offloading.
C. The Convergence Performance
To evaluate the convergence performance of the designed
matching algorithm, we show the matching rate, i.e., the ratio
of the number of matched buyers to the number of all buyers,
and compare it with different settings of the number of MUs
and EgSvrs. In this simulation example, we set at ¼ 0:5.
TABLE I
THE PARAMETER SETTINGS USED IN THE SIMULATION EXAMPLES
Fig. 4. The comparison of the average task execution time.
Fig. 5. The comparison of the average execution energy consumption.
1174 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 6 shows the convergence performance of the designed
matching algorithm. We observe that the designed matching
algorithm can converge very quickly. For example, the num-
ber of iteration rounds spent for reaching a stable state is 7
when M ¼ 50 and N ¼ 70, and 17 when M ¼ 70 and
N ¼ 50. This is consistent with the theoretical analysis of the
computational complexity. Additionally, we find that the con-
vergence speed is faster when N=M is higher. For instance,
the number of iteration rounds spent for reaching a stable state
is 9 when M ¼ 50 and N ¼ 50, and 23 when M ¼ 100 and
N ¼ 50. This is because more EgSvrs can provide more
matching choices for MUs. The performance results imply
that the designed matching algorithm is very efficient.
D. The Received Utility
Figs. 7 and 8 show the average utilities received by a buyer
and a seller, respectively, when the task-VM matching is sta-
ble. Specifically, we compare the average utilities received by
buyers and sellers by varying the number of MUs M and
EgSvrs N , respectively. From Fig. 7, we observe that a
buyer’s average utility decreases as the number of MUs
increases, while it increases with the increase in the number of
EgSvrs. Increasing the number of buyers means that more
buyers need to compete for limited resources, resulting in
lower opportunities to obtain high utilities. In contrast to the
MUs, increasing the number of EgSvrs implies more chances
of getting high utilities by the buyers, which leads to higher
average utility. From Fig. 8, we find that each seller’s average
utility increases with the increase in the number of MUs. The
reason is that more MUs can provide more matching candi-
dates that can enable sellers to obtain high utilities. Similarly,
we can also see the growing utilities when increasing the num-
ber of EgSvrs. The reason is the same as that of providing
more MUs.
E. Effects of the Utility Functions’ Coefficient
To explore the impact of the utility functions’ coefficient,
we show the change of the average task execution time and
the average consumed energy when varying the coefficient at
from 0 to 1. Note that, as al þ at þ ae ¼ 1, the effects of the
coefficient al and ae on the performance results can be shown
by the figures obtained by changing at.
Specifically, Figs. 9 and 10 reveal that the average task exe-
cution time and the average energy consumption, respectively,
as the coefficient at increases. When the coefficient of the util-
ity function is small (e.g., at < 0:6), the changes in the per-
formance results are minor. The curves then are changing
sharply when the coefficient is increasing. Particularly, when
the coefficient at is larger than 0.8, the curves even change
more sharply. This is because when the coefficient is small,
Fig. 6. The convergence of the designed matching algorithm.
Fig. 7. The average utility received by each buyer.
Fig. 8. The average utility received by each seller.
Fig. 9. The impact of at on the average task execution time.
SENG et al.: USER MATCHING ON BLOCKCHAIN FOR COMPUTATION OFFLOADING IN ULTRA-DENSE WIRELESS NETWORKS 1175
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
the utility related to the average energy consumption plays the
leading role in the received utility. On the contrary, the cost
related to the average task execution time plays an important
role in the received utility when the coefficient is large. This is
also the reason that as we increase the coefficient at, the curve
of the average task execution time is decreasing, while the
curve of the average energy consumption is increasing.
VI. CONCLUSIONS
In this paper, we have investigated the coordination prob-
lem among MUs and EgSvrs for computation offloading in
MEC-enabled UDNs. To address this issue, we have proposed
to take advantage of blockchain technology to design a decen-
tralized coordination scheme to orchestrate MUs and EgSvrs
for scheduling computation tasks to be offloaded. To schedule
MUs’ computations to the right EgSvrs, we have jointly con-
sidered task execution time and energy consumption to
develop an efficient task-VM matching algorithm that has
been proved to achieve a stable matching. Besides, we have
developed a novel smart matching contract to implement the
developed task-VM matching algorithm on the blockchain to
perform matching on the blockchain without trusted third par-
ties. To validate the efficacy of the designed matching algo-
rithm, we have conducted extensive and thorough simulations.
Simulation results demonstrate that our decentralized coordi-
nation scheme can significantly improve the performance and
converge to a stable state quickly.
REFERENCES
[1] C. Wang et al., “Cellular architecture and key technologies for 5 G wire-
less communication networks,” IEEE Commun. Mag., vol. 52, no. 2,
pp. 122–130, Feb. 2014.
[2] J. Ling and D. Chizhik, “Capacity scaling of indoor pico-cellular net-
works via reuse,” IEEE Commun. Lett., vol. 16, no. 2, pp. 231–233,
Feb. 2012.
[3] C. Luo, S. Guo, S. Guo, L. T. Yang, G. Min, and X. Xie, “Green com-
munication in energy renewable wireless mesh networks: Routing, rate
control, and power allocation,” IEEE Trans. Paral. Distr. Syst., vol. 25,
pp. 3211–3220, Dec. 2014.
[4] V. Chandrasekhar, J. G. Andrews, and A. Gatherer, “Femtocell net-
works: A survey,” IEEE Commun. Mag., vol. 46, no. 9, pp. 59–67,
Sep. 2008.
[5] C. Galiotto, N. Marchetti, and L. Doyle, “The role of the total transmit
power on the linear area spectral efficiency gain of cell-splitting,” IEEE
Commun. Lett., vol. 17, no. 12, pp. 2256–2259, Dec. 2013.
[6] M. Kamel, W. Hamouda, and A. Youssef, “Ultra-dense networks: A
survey,” IEEE Commun. Surv. Tut., vol. 18, no. 4, pp. 2522–2545,
Oct.–Dec. 2016.
[7] Y. Dai, D. Xu, S. Maharjan, and Y. Zhang, “Joint computation off-
loading and user association in multitask mobile edge computing,”
IEEE Trans. Veh. Technol., vol. 67, no. 12, pp. 12313–12325,
Dec. 2018.
[8] Y. Mao, C. You, J. Zhang, K. Huang, and K. B. Letaief, “A
survey on mobile edge computing: The communication perspective,”
IEEE Commun. Surv. Tut., vol. 19, no. 4, pp. 2322–2358, Oct.–Dec.
2017.
[9] Z. Chen et al., “An empirical study of latency in an emerging class of
edge computing applications for wearable cognitive assistance,” in
Proc. IEEE/ACM SEC’17, Oct. 2017, pp. 1–14.
[10] “Amazon AWS Instances,” [Online] Available: https://docs.aws.ama-
zon.com/AWSEC2/latest/UserGuide/instance-types.html.
[11] Y. Hu, M. Patel, D. Sabella, N. Sprecher, and V. Young, “Mobile edge
computing: A key technology towards 5 G,” ETSI White Paper, vol. 11,
no. 11, pp. 1–16, Sep. 2015.
[12] G. Min, Y. Wu, and A. Y. Al-Dubai, “Performance modelling and analy-
sis of cognitive mesh networks,” IEEE Trans. Commun., vol. 60, no. 6,
pp. 1474–1478, Jun. 2012.
[13] L. Chen, S. Zhou, and J. Xu, “Computation peer offloading for energy-
constrained mobile edge computing in small-cell networks,” IEEE/ACM
Trans. Netw., vol. 26, no. 4, pp. 1619–1632, Aug. 2018.
[14] Y. Sun, S. Zhou, and J. Xu, “EMM: Energy-aware mobility management
for mobile edge computing in ultra dense networks,” IEEE J. Select.
Areas Commun., vol. 35, no. 11, pp. 2637–2646, Nov. 2017.
[15] C. Luo, G. Min, F. R. Yu, M. Chen, L. T. Yang, and V. C. M. Leung,
“Energy-efficient distributed relay and power control in cognitive radio
cooperative communications,” IEEE J. Select. Areas Commun., vol. 31,
no. 11, pp. 2442–2452, Nov. 2013.
[16] T. Wang, G. Zhang, A. Liu, Z. A. Bhuiyan, and Q. Jin, “A secure IoT ser-
vice architecture with an efficient balance dynamics based on cloud and
edge computing,” IEEE Internet Things J., vol. 6, no. 3, pp. 4831–4843,
Jun. 2019.
[17] X. Chen, J. Ji, C. Luo, W. Liao, and P. Li, “When machine learning
meets blockchain: A decentralized, privacy-preserving, and secure
design,” in Proc. IEEE Bigdata’18, (Seattle, WA USA), Dec. 2018,
pp. 1178–1187.
[18] A. A. Omar, Z. A. Bhuiyan, A. Basu, S. Kiyomoto, and M. S. Rahman,
“Privacy-friendly platform for healthcare data in cloud-based on block-
chain environment,” Future Gener. Comput. Syst., vol. 95, pp. 511–521,
Jun. 2019.
[19] S. Seng, X. Li, C. Luo, H. Ji, and H. Zhang, “A D2D-assisted MEC com-
putation offloading in the blockchain-based framework for udns,” in
Proc. IEEE ICC’19, May 2019, pp. 1–6.
[20] K. Kotobi and S. G. Bilen, “Secure blockchains for dynamic spectrum
access: A decentralized database in moving cognitive radio networks
enhances security and user access,” IEEE Veh. Technol. Mag., vol. 13,
no. 1, pp. 32–39, Mar. 2018.
[21] S. Raju, S. Boddepalli, S. Gampa, Q. Yan, and J. S. Deogun, “Identity
management using blockchain for cognitive cellular networks,” in Proc.
IEEE ICC’17, May 2017, pp. 1–6.
[22] H. Liu, Y. Zhang, and T. Yang, “Blockchain-enabled security in electric
vehicles cloud and edge computing,” IEEE Netw., vol. 32, no. 3, pp. 78–83,
May 2018.
[23] D. Lin and Y. Tang, “Blockchain consensus based user access strategies
in D2D networks for data-intensive applications,” IEEE Access, vol. 6,
pp. 72683–72690, Nov. 2018.
[24] A. Yazdinejad, R. M. Parizi, A. Dehghantanha, and K. R. Choo,
“Blockchain-enabled authentication handover with efficient privacy pro-
tection in SDN-based 5 G networks,” IEEE Trans. Netw. Sci. Eng., vol. 8,
no. 2, pp. 1120–1132, Apr.–Jun. 2021.
[25] S. Guo, X. Hu, S. Guo, X. Qiu, and F. Qi, “Blockchain meets edge com-
puting: A distributed and trusted authentication system,” IEEE Trans.
Ind. Informatics, vol. 16, no. 3, pp. 1972–1983, Mar. 2020.
[26] Y. Dai, D. Xu, S. Maharjan, Z. Chen, Q. He, and Y. Zhang, “Blockchain
and deep reinforcement learning empowered intelligent 5 G beyond,”
IEEE Netw., vol. 33, no. 3, pp. 10–17, May 2019.
[27] G. Qiao, S. Leng, H. Chai, A. Asadi, and Y. Zhang, “Blockchain
empowered resource trading in mobile edge computing and networks,”
in Proc. IEEE ICC’19, May 2019, pp. 1–6.
[28] D. B. Rawat and A. Alshaikhi, “Leveraging distributed blockchain-
based scheme for wireless network virtualization with security and QoS
constraints,” in Proc. IEEE ICNC’18, Mar. 2018, pp. 332–336.
Fig. 10. The impact of at on the average energy consumption.
1176 IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, VOL. 8, NO. 2, APRIL-JUNE 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
[29] D. Gale and L. S. Shapley, “College admissions and the stability of mar-
riage,” Amer. Mathe. Monthly, vol. 69, no. 1, pp. 9–15, Jan. 1962.
[30] H. Wu, W. Knottenbelt, and K. Wolter, “An efficient application parti-
tioning algorithm in mobile environments,” IEEE Trans. Parallel Dis-
trib. Syst., vol. 30, no. 7, pp. 1464–1480, Jul. 2019.
[31] W. Zhang and Y. Wen, “Energy-efficient task execution for application
as a general topology in mobile cloud computing,” IEEE Trans. Cloud
Comput., vol. 6, no. 3, pp. 708–719, Jul. 2018.
[32] Y. Xiao, N. Zhang, J. Li, W. Lou, and Y. T. Hou, “Distributed consensus
protocols and algorithms.” book chapter in Blockchain for Distributed
Systems Security, Hoboken, NJ, USA: (John) Wiley & (Sons, Inc.),
2019.
[33] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” [Online
Available] Bitcoin.–URL: https://bitcoin.org/bitcoin.pdf, 2008.
[34] W. Li, S. Andreina, J. M. Bohli, and G. Karame, Securing proof-of-stake
blockchain protocols. Springer-Verlag, New York; Berlin, Germany;
Vienna, Austria, 2017.
[35] J. Kang, Z. Xiong, D. Niyato, P. Wang, D. Ye, and D. I. Kim,
“Incentivizing consensus propagation in proof-of-stake based consor-
tium blockchain networks,” IEEE Wireless Comm. Lett., vol. 8, no. 1,
pp. 157–160, Feb. 2019.
[36] C. Wang, F. R. Yu, C. Liang, Q. Chen, and L. Tang, “Joint computation
offloading and interference management in wireless cellular networks
with mobile edge computing,” IEEE Trans. Veh. Technol., vol. 66,
no. 8, pp. 7432–7445, Aug. 2017.
[37] H. Zhou, X. Ouyang, Z. Ren, J. Su, C. de Laat, and Z. Zhao, “A block-
chain based witness model for trustworthy cloud service level agreement
enforcement,” in Proc. IEEE INFOCOM’19, Apr. 2019, pp. 1567–1575.
[38] F. Shi, Z. Qin, D. Wu, and J. McCann, “MPCSToken: Smart contract
enabled fault-tolerant incentivisation for mobile P2P crowd services,” in
Proc. IEEE ICDCS’18, Jul. 2018, pp. 961–971.
[39] 3GPP, “3GPP TR 36.814 V9.0.0-evolved universal terrestrial radio
access (E-UTRA); further advancements for e-utra physical layer
aspects,” 3rd Generation Partnership Project (3GPP), Tech. Rep. (TR)
36.814, Version 9.0.0, Mar. 2010.
[40] L. Chen, C. Shen, P. Zhou, and J. Xu, “Collaborative service placement
for edge computing in dense small cell networks,” IEEE Trans. Mobile
Comput., vol. 20, no. 2, pp. 377–390, Feb. 2021.
[41] N. Nouri, J. Abouei, M. Jaseemuddin, and A. Anpalagan, “Joint access
and resource allocation in ultra-dense mmwave noma networks with
mobile edge computing,” IEEE Internet Things J., vol. 7, no. 2, pp.
1531–1547, Feb. 2020.
[42] Q. Pham, T. Leanh, N. H. Tran, B. J. Park, and C. S. Hong,
“Decentralized computation offloading and resource allocation for
mobile-edge computing: A matching game approach,” IEEE Access,
vol. 6, pp. 75868–75885, 2018.
Shuming Seng is currently working toward the Ph.D.
degree at the School of Information and Communica-
tion Engineering, Beijing University of Posts and Tel-
ecommunications (BUPT), China. Prior to this, he
received the B.E. degree majoring in telecommunica-
tion engineering from Zhengzhou University (ZZU),
China, in 2016. He is a Visiting Student with the
Department of Computer Science at Virginia Com-
monwealth University, USA. His current research
interests include radio resource management, block-
chain, and mobile edge computing in wireless com-
munications and networks.
Changqing Luo (Member, IEEE) is an Assistant
Professor with the Department of Computer Science
at Virginia Commonwealth University. He received
the Ph.D. degrees from Case Western Reserve Uni-
versity and the Beijing University of Posts and Tele-
communications in 2018 and 2011, respectively, and
the M.E. and B.E. degrees from the Chongqing Uni-
versity of Posts and Telecommunications in 2007 and
2004, respectively. His research interests include
cybersecurity, big data, and complex networks.
Xi Li received the B.E. and Ph.D. degrees in commu-
nication and information system from the Beijing
University of Posts and Telecommunications
(BUPT), in 2005 and 2010, respectively. In 2018, she
was a Visiting Scholar with The University of British
Columbia, Vancouver, BC, Canada. She is currently
a Professor with the School of Information and Com-
munication Engineering of BUPT. She has published
more than 100 papers in international journals and
conferences. Her current research interests include
resource management and intelligent networking in
next generation networks, the Internet of Things, and cloud computing. She
has also served as a TPC Member of IEEE WCNC 2012/2014/ 2015/2016/
2019/2020, PIMRC 2012/2017/2018/2019/2020, GLOBECOM 2015/2017/
2018/2019, ICC 2015/2016/2017/2018/2019, Infocom 2018/2019, and Cloud-
Com 2013/2014/2015, the Chair of Special Track on cognitive testbed in CHI-
NACOM 2011, the Workshop Chair of IEEE GreenCom 2019, and a Peer
Reviewer of many academic journals.
Heli Zhang received the B.S. degree in communica-
tion engineering from Central South University,
China, in 2009, and the PH.D. Degree in communica-
tion and information System from Beijing University
of Posts and Telecommunications (BUPT), China, in
2014. From 2014 to 2018, she was the Lecturer in the
School of Information and Communication Engineer-
ing at BUPT. From 2018, she has been the associate
professor in the School of Information and Commu-
nication Engineering at BUPT.
She has been the reviewer for Journals of IEEE
WIRELESS COMMUNICATIONS, IEEE Communication Magazine, IEEE TRANSAC-
TIONS ON VEHICULAR TECHNOLOGY, IEEE COMMUNICATION LETTERS and IEEE
TRANSACTIONS ON NETWORKING. She participated in many National projects
funded by National Science and Technology Major Project, National 863
High-tech and National Natural Science Foundation of China, and cooperated
with many Corporations in research. Her research interests include heteroge-
neous networks, long-term evolution/fifth generation and Internet of Things.
Hong Ji (Senior Member, IEEE) received the B.S.
degree in communications engineering and the M.S.
and Ph.D. degrees in information and communica-
tions engineering from the Beijing University of
Posts and Telecommunications (BUPT), Beijing,
China, in 1989, 1992, and 2002, respectively. In
2006, she was a Visiting Scholar with The University
of British Columbia, Vancouver, BC, Canada. She is
currently a Professor with BUPT. She has authored
more than 300 journal/conference papers. Several of
her papers had been selected for best paper. Her
research interests include wireless networks and mobile systems, including
cloud computing, machine learning, intelligent networks, green commu-
nications, radio access, ICT applications, system architectures, management
algorithms, and performance evaluations.
She has guest-edited International Journal of Communication Systems,
(Wiley) Special Issue on Mobile Internet: Content, Security and Terminal. She
has served as the Co-Chair for Chinacom’11, and a member of the Technical
Program Committee of WCNC’19/15/14/12, Globecom’17/16/15/14/13/12/
11/10, ISCIT’17, CITS’16/15/12, WCSP’15, ICC’20/13/12/11, ICCC’13/12,
PIMRC’12/11, IEEE VTC’12S, and Mobi-World’11. She is serving on the
Editorial Boards of the IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND
NETWORKING,Wiley International Journal of Communication Systems.
SENG et al.: USER MATCHING ON BLOCKCHAIN FOR COMPUTATION OFFLOADING IN ULTRA-DENSE WIRELESS NETWORKS 1177
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:16:59 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice