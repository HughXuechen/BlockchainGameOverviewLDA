Cloud Mining Pool Aided Blockchain-Enabled Internet of Things: An Evolutionary Game Approach
Cloud Mining Pool Aided Blockchain-Enabled
Internet of Things: An Evolutionary
Game Approach
Tianle Mai , Student Member, IEEE, Haipeng Yao , Senior Member, IEEE, Ni Zhang,
Lexi Xu,Member, IEEE, Mohsen Guizani , Fellow, IEEE, and Song Guo , Fellow, IEEE
Abstract—The past few years have witnessed an exponential growth of diverse Internet of Things (IoT) devices as well as compelling
applications ranging from industrial production to medical care. Dramatic advances in IoT technology not only brought enormous
economic opportunities but also challenges (e.g., privacy and security vulnerabilities). Recently, with the appearance of blockchain
technology, the integration of IoTand blockchain (BCoT) is considered a promising solution to address these issues. Blockchain
provides a secure and scalable data management framework for IoT devices. However, the huge computation and energy cost of the
consensus process in blockchain prevents it from being directly applied as a generic platform. To overcome this challenge, in this
article, we propose a cloud mining pool-aided BCoTarchitecture, where the IoT devices can rent the computing resources from the
cloud mining pools to offload the mining process. Based on this architecture, we study the mining pool selection problem and analyze
the colony behaviors of IoT devices with different pooling strategies. We propose a centralized evolutionary game-based pool selection
algorithm for the sake of maximizing the system utility. Considering the non-cooperative relationship among multiple miners, we also
propose a lightweight distributed reinforcement learning algorithm, named the ‘WoLF-PHC’ algorithm.
Index Terms—Evolutionary game, mining pool, cloud mining pool, WoLF-PHC
Ç
1 INTRODUCTION
IN the past decade, the Internet of things (IoT) has attracted
a large amount of attention from both academia and
industry [1]. The IoT refers to the billions of physical devices
that are now connected to and transfer data through the
Internet without requiring human-to-human or human-to-
computer interaction. These connected IoT devices are
slowly entering every aspect of our lives ranging from
healthcare to industrial manufacture. According to
Gartner’s prediction, it is expected more than 25 billion IoT
connections in the future year 2025. However, with the
large-scale IoT deployments, IoT applications are facing
challenges in the aspect of scalability, privacy, and secu-
rity [2]. The current IoT system adopts a centralized man-
agement platform to authenticate, authorize and connect a
massive of heterogeneous IoT devices, which will turn into
a bottleneck. Besides, unsecured IoT devices provide an
easy target for distributed-denial-of-service (DDoS) attacks,
malicious attackers, and data breaches.
In recent years, another breakthrough technology, block-
chain, offers significant opportunities to address these chal-
lenges [3]. The blockchain is a distributed digital ledger of
transactions that is maintained by a community of partici-
pants without the intervention of a trusted third party [4].
Within a blockchain community, any new transactions or
events must be validated upon the agreement among the
majority of the participants through a consensus process
(e.g., proof of work (PoW), proof of stake (PoS)) before they
are attached to the chain [5]. Such a process creates tamper-
resistant records of shared transactions and events among
the involved parties. Therefore, no single organization has
control over the data generated by IoT devices in blockchain,
thereby protecting the privacy of data and enhancing scal-
ability.Moreover, blockchain adds a layer of security in terms
of encryption, the removal of a single point of failure, and the
ability to quickly identify the weak point in the network [6].
Recently, a large number of applications combining block-
chain and the IoT can be seen [2]. For example, Deloitte uses
blockchain and IoT technology in supply chain traceability.
While blockchain provides a secure and scalable data
management framework, there still exist challenges to be
addressed before it can serve as a generic platform for IoT.
As discussed above, the consensus process (e.g., proof of
work (PoW)) in the blockchain is particularly computation-
ally intensive and energy-consuming. The participants,
termed as miners, have to constantly try to solve a
� Tianle Mai and Haipeng Yao are with the State Key Laboratory of Net-
working and Switching Technology, Beijing University of Posts and Tele-
communications, Beijing 100876, China. E-mail: machealmai@gmail.com,
yaohaipeng@bupt.edu.cn.
� Ni Zhang is with the Sixth Research Institute, China Electronic Corpora-
tion, Beijing 100141, China. E-mail: Zhangni@ncse.com.cn.
� Lexi Xu is with the Research Institute, China United Network Communica-
tions Corporation, Beijing 100140, China. E-mail: xulx29@chinaunicom.cn.
� Mohsen Guizani is with the College of Engineering, Qatar University,
Doha, Qatar. E-mail: mguizani@gmail.com.
� Song Guo is with the Department of Computing, Hong Kong Polytechnic
University, Hong Kong, China. E-mail: cssongguo@comp.polyu.edu.hk.
Manuscript received 20 Jan. 2021; revised 26 June 2021; accepted 26 Aug. 2021.
Date of publication 8 Sept. 2021; date of current version 8 Mar. 2023.
(Corresponding Author: Haipeng Yao.)
Recommended for acceptance by D. Mohaisen.
Digital Object Identifier no. 10.1109/TCC.2021.3110965
692 IEEE TRANSACTIONS ON CLOUD COMPUTING, VOL. 11, NO. 1, JANUARY-MARCH 2023
2168-7161 © 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tps://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-8500-1461
https://orcid.org/0000-0002-8500-1461
https://orcid.org/0000-0002-8500-1461
https://orcid.org/0000-0002-8500-1461
https://orcid.org/0000-0002-8500-1461
https://orcid.org/0000-0003-1391-7363
https://orcid.org/0000-0003-1391-7363
https://orcid.org/0000-0003-1391-7363
https://orcid.org/0000-0003-1391-7363
https://orcid.org/0000-0003-1391-7363
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0002-8972-8094
https://orcid.org/0000-0001-9831-2202
https://orcid.org/0000-0001-9831-2202
https://orcid.org/0000-0001-9831-2202
https://orcid.org/0000-0001-9831-2202
https://orcid.org/0000-0001-9831-2202
mailto:machealmai@gmail.com
mailto:yaohaipeng@bupt.edu.cn
mailto:Zhangni@ncse.com.cn
mailto:xulx29@chinaunicom.cn
mailto:mguizani@gmail.com
mailto:cssongguo@comp.polyu.edu.hk
cryptographic puzzle in the form of the hash computation.
Considering that the majority of IoT devices are too limited
in terms of computing, storage, and energy resources, this
computationally intensive process hinders the integration of
IoT and blockchain. While some energy-efficient consensus
algorithms (e.g., proof of stake (PoS), practical byzantine
fault tolerance (PBFT)) are developed, the computation and
energy overhead are still inevitable.
To address these challenges, the cloud mining mechanism
becomes a viable option. Cloud computing can empower
resource-constrained IoT devices with extra sufficient storage
and computing resource. In this way, more IoT devices are
enabled to participate in the blockchain network, so as to
increase the whole system utility. Recently, a large and grow-
ing body of literature has investigated cloud mining-based
BCoT architecture [6], [7], [8]. These works are mainly focus-
ing on the resource allocation between the devices and cloud
servers. For example, in [9], Xiong et al. formulated the
resource allocation problem between cloud services and IoT
devices as a Stackelberg game and implemented a backward
induction algorithm to search theNash equilibria of this game.
However, with the exponential growth of the number of
IoT devices and hash rate, the probability for a single miner
to win the mining competition game tend to be slim. Only a
few fortunate miners would obtain large rewards and the
majority will get no rewards. To seek a steady reward
stream, miners are gradually willing to group into several
teams, called mining pools. In the mining pool, miners will
share the rewards according to their contributed hash
power (i.e., computing resource).
Therefore, in this paper, we design a cloud mining pool-
aided BCoT architecture, where IoT devices can rent the
computing and storage resources from the cloud mining
pool. In terms of this architecture, we discuss the mining
pool selection problem among IoT devices. Assuming that
the IoT devices are rational (i.e. profit-driven), we model
the dynamic mining-pool selection process as an evolution-
ary game. To search the evolutionary stable strategy (ESS),
we design a centralized evolutionary game-based pool
selection algorithm, where a centralized controller is used
to synchronize information. Besides, considering the non-
cooperative relationship among miners, we propose a dis-
tributed reinforcement learning algorithm, termed as the
’WoLF-PHC’ algorithm.
The major contributions of this paper can be summarized
as follows.
� We design a cloud mining pool aided BCoT architec-
ture, where the IoT devices can offload their comput-
ing or storage tasks to the cloud servers.
� We discuss the pool selection problem in our system.
First, we propose a centralized evolutionary game-
based algorithm. A centralized controller is used to
synchronize information.
� Moreover, considering the non-cooperation relation-
ship among miners, we introduce a distributed rein-
forcement learning algorithm, termed as the ‘WoLF-
PHC’, to search for the evolutionary stable strategy.
Some extensive simulations are presented to evalu-
ate the convergence of our algorithm and compare it
to the other state-of-the-art schemes.
The rest of this paper is organized as follows. In Section 2,
we review the related works. In Section 3.2, we present a
cloud mining pool aided BCoT architecture and discuss the
system model. We present a centralized population evolu-
tion algorithm in Section 4, and a distributed reinforcement
learning algorithm in Section 5. In Section 6, we present the
simulation results, and the conclusion is in Section 8.
2 RELATED WORK
Recently, a considerable amount of literature has been pub-
lished on BCoT. In [2], Dai et al. presented a comprehensive
survey on BCoT and discussed the research challenges of
this new paradigm. In the following, we will briefly discuss
related works from the perspective of cloud mining and the
mining pool.
2.1 Cluod Mining
Much of the current literature on BCoT pays particular
attention to the cloud mining mechanism. In [6], Qiu et al.
proposed a cloud mining assisted blockchain-enabled IoT
architecture, where the cloud miner act as a mining proxy
for physical IoT in cloud services to offload mining tasks.
Then, the authors modeled the computing, networking
resources allocation as a joint optimization problem, and
proposed a dueling deep reinforcement learning to search
for the optimal solution. In [10], Yao et al. modeled the
resource allocation among cloud services and IoT devices as
a Stackelberg game and proposed a lightweight multi-agent
reinforcement learning algorithm. The experimental results
showed that the system can converge to the Nash equilib-
rium point. In [11], Li et al. designed a blockchain-enabled
edge-cloud IoT system, and proposed a double auction
scheme for computing resource trading. In [12], Liu et al.
discussed two offloading mechanisms (including the nearby
access point, a group of nearby users) in cloud mining. An
alternating direction algorithm is introduced to solve the
offloading problem in a distributed fashion. In addition, we
notice that cloud mining also receives a large amount of
attention from industries. Some mining-as-a-service com-
pany (e.g., CloudHashing, MineOnCloud) offers cloud min-
ing contracts in exchange of a fee.
2.2 Mining Pools
Recently, a large and growing body of literature has investi-
gated the mining pool mechanism. In [13], Schrijvers et al.
modeled the reward allocation in Bitcoin mining pools as a
non-cooperative game among the miners and the pool
managers. The pool manager allocates the amount of reward
for each miner according to their contributed computing
resources. In [14], Fisch et al. designed the utility and social
welfare to the pooling strategies for the sake of maximizing
the utility of miners. The experimental results showed that a
geometric pay pool is able to achieve the optimal steady-state
income for the individual miners. In [15], Lewenberg et al.
formulated the allocation of profit among pool participants
as a coalitional game, which is found to be difficult to distrib-
ute in a stable way. Besides, considering the peer-to-peer
relationship among the miners, Kim et al. adopted the group
bargaining solution to implement an incentive payment pro-
cess in [16]. In addition, Luu et al. used a computing power-
MAI ETAL.: CLOUD MINING POOL AIDED BLOCKCHAIN-ENABLED INTERNETOF THINGS: AN EVOLUTIONARYGAME APPROACH 693
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
splitting game to enable miners’ subscription to more than
one mining pool in [17]. Within this mechanism, the miners
split their computation resources into different pools for the
sake of maximizing the expected mining reward. In [18], Liu
et al. studied the evolutionary stability of the mining pool
selection game in a blockchain network and proposed a cen-
tralized iterative algorithm to search the evolutionary stable
strategy point. However, considering the non-cooperative
relationship amongminers, this centralizedmethod presents
poor scalability and robustness.
3 SYSTEM MODEL
In this section, we first design a cloud mining pool-aided
BCoT architecture. Then, we present the system model and
problem formulation of the mining pool selection problem.
3.1 Cloud Mining Pool Aided BCoT
As discussed above, the blockchain cannot be directly
applied to IoT systems. To fulfill the computing and storage
resources required in the consensus process, we adopt the
cloud mining paradigm in this paper. As shown in Fig. 1,
there exist two types of nodes to participate in the blockchain
network, including the cloud services nodes and the IoT devi-
ces nodes [2]. The cloud services are responsible for storing
the entire blockchain data (the full Bitcoin blockchain data
occupies about 200G large) and undertaking computational
intensive operations (e.g., consensus process), while IoT devi-
ces are only responsible for undertaking some simple opera-
tions (e.g., initiating transactions). It is worthmentioning that
the IoT devices still need to keep a partial blockchain local for
validating the authenticity of transactions.
During the initializing phase, the IoT devices first regis-
ter as a legitimate entity (i.e., cloud miner) on cloud servers,
and obtain an identity ID and a public/privacy key. These
cloud miners act as the proxy nodes of the IoT devices to
offload their mining and storage tasks. Then, to secure a
steady reward, these miners will group themselves into sev-
eral mining pools. In mining process, these pools present
themselves to the whole system as single powerful proxy
nodes. Combing with more computing resources, the min-
ing pools are able to gain a computation advantage over
other individual miners. Note that the miner can choose to
redirect its hash power to any other mining pool at any
time. In each pool, the cloud provider will place a coordina-
tor in charge of managing the miners. They’ll work as a task
scheduler to guarantee the miners are undertaking different
subtasks so that they’re not wasting hash power by trying
to solve the same sub-cryptographic puzzle. Once success-
fully mining a block, the coordinator will divide the profit
to each miner according to its devoted hash power. We will
present the system model in the following.
3.2 System Model
Consider a set of IoT devices that are interested in partici-
pating in the consensus process, which is denoted as N ¼
f1; . . . ; Ng. We assume that these miners are willing to form
M¼ f1; . . . ;Mg mining pools, where each mining pool
adopts a different pooling strategy with different hash
power requirement [18]. Let vj represent the hash power
required by the pool j 2 M. According to consensus proto-
col, the probability of winning the mining game is related to
the ratio between local hash power and the total hash power
of the entire blockchain network. Therefore, we define a rel-
ative hash power aj of pool j with respect to the entire hash
power of all miners, which can be described as:
ajðvv; xj; x�jx�jÞ ¼ xjvjP
k2M xkvk
;aj > 0; (1)
where xj represents the pool j’s population fraction, and the
x�jx�j represents the sum of pools’ population fraction expect
to pool j. Note that a satisfies following condition:X
k2M
ak ¼ 1: (2)
During the mining process, mining pools compete with
each other in a race to solve the cryptographic puzzle. The
appearance of solving the cryptographic puzzle can be for-
mulated as a Poisson process with a mean random variable
� ¼ 1
T , where T denote the complexity of finding a block (e.g.,
T ¼ 600 sec in Bitcoin). After successfully mining a block, the
winner needs to propagate its solution to the entire network
for reaching a consensus. Only the first block, which is con-
firmed by the majority of the participant, could be accepted
as a new block. All other candidate blocks will be discarded,
called orphaning. According to previous works [19], the
propagation time of a block to reach consensus is mainly
determined by the set of transaction size Q included in a
block. We denote tðQÞ ¼ � �Q as the propagation time.
Then, the probability of orphaning can be formulated as:
PorphanðQÞ ¼ 1� e��tðQÞ: (3)
The successful probability of mining pool j to win the min-
ing game can be formulated as:
Pjðaj; QjÞ ¼ aj � ð1� Porphan
j ðQjÞÞ ¼ aj � e��tðQjÞ: (4)
After successfully mining a block, the winner can obtain
a reward, which is composed of a fixed reward R � 0 and a
Fig. 1. Cloud mining pool aided BCoTarchitecture.
694 IEEE TRANSACTIONS ON CLOUD COMPUTING, VOL. 11, NO. 1, JANUARY-MARCH 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
variable reward rQ [19]. The variable reward linearly
increases with the size of the transaction Q in the block, and
the r is the linear coefficient. Therefore, the expected reward
for pool j can be expressed:
ujðaj; QjÞ ¼ ðRþ rQjÞaj � e��tðQjÞ: (5)
And the expected profit of the miner i 2 N in pool j can be
expressed as:
Riðaj; QjÞ ¼ ðRþ rQjÞ
Nxj
aj � e��tðQjÞ: (6)
Besides, since the miners rent the computation resource
from the cloud servers, the miners have to pay for it [20].
We denote the price of each computing resource unit as p.
Thus, the expected reward of the miner i 2 N in pool j can
be reformulated as:
riðaj; QjÞ ¼ ðRþ rQjÞ
Nxj
aj � e��tðQjÞ � pvj: (7)
As shown in Table 1, we list the notations of this paper.
4 EVOLUTIONARY GAME FORMULATION OF THE
POOL SELECTION PROBLEM
In this section, we apply the evolutionary game to the min-
ing pool selection problem [21]. The evolutionary game
defines a framework of contests, strategies, and analytic
into which colony competition can be modeled. It can cap-
ture the strategy adaptation of rational agents according to
their fitness. That is, the agent can slowly adjust its strategy
(i.e., evolves) based on the environment knowledge. Mathe-
matically, for mining pool selection, the evolutionary game
can be formulated as a 4-tuple G ¼< N ; x;M; R>, where
� Players: Players are the decision-makers with pre-
programmed strategies in the game. In our scenario,
each individual miner can be regarded as a player.
� Population: The population x ¼ ½x1; . . . ; xM � 2 X
refers to the set of players in a mining pool. The
population will present variation among compet-
ing players.
� Strategy: The strategy is a set of action M¼
f1; . . . ;Mg that the player can perform. The different
strategies will obtain different rewards. The strategy
space in our scenario is the all availablemining pools.
� Payoff: Payoff rj reflects the player’s expected out-
come based on its strategy, where riðaj; QjÞ ¼ðRþrQjÞ
Nxj
aj � e��Qj � pvj. Note that the reward is not
only determined by the local strategy, but also the
other players’ strategies.
4.1 Replicator Dynamics of Pool Selection
To express the evolutionary dynamics in the game, the repli-
cator dynamics function is introduced. The replicator dynam-
ics function is a non-linear game dynamic used to explain
learning as well as evolution in evolutionary game [22]. The
core idea of replicator dynamics is that the population will
increase (decrease) if fitness is larger (smaller) than the aver-
age fitness. In our scenario, the replicator dynamics function
of pool j can be described as:
_xjðtÞ ¼ sxjðtÞðujðajðtÞ;QjÞ � �uðxðtÞÞÞ; (8)
where _xjðtÞ is the growth rate of the pool j’s population, s is
the speed parameter, and �uðxÞ is the network average pay-
off, which can be formulated as:
�uðxðtÞÞ ¼
X
j2M
ujðaj; QjÞxj: (9)
The replicator dynamics functions must satisfy the follow-
ing condition:
X
j2M
_xjðtÞ ¼ 0 (10)
From the players’ perspective, the miners will slowly adjust
their selection strategies, if their payoff is less than the aver-
age payoff, otherwise the miners will keep their current
strategies.
4.2 Evolutionary Equilibrium and Stability Analysis
As discussed above, the players constantly adjust their strate-
gies (i.e., evolve) for the sake of a higher expected payoff.
Along with the players evolves over time, the whole system
will finally converge to the evolutionary stable strategy (ESS).
The ESS is phenotypes that can persist in populations and
cannot be invaded by any other strategies [23]. We can define
that the x� is an ESS if the following condition is satisfied:
X
j2M
x�jujðð1� sÞx� þ �x0Þ �
X
j2M
x0jujðð1� sÞx� þ sx0Þ;
(11)
where x0 is the invade state.
According to this definition, in the ESS, none of the play-
ers is willing to deviate its selection strategy (i.e., the rate of
strategy adaptation is zero). By solving the replicator
dynamics functions (i.e., _xjðtÞ ¼ 0), a set of fixed points can
be obtained. According to [24], these fixed points are stable
(i.e., ESS) if all eigenvalues of the Jacobian matrix have neg-
ative real parts. Then, the ESS can be defined as a set of sta-
ble fixed points, which can be described as follows.
TABLE 1
Notations
Parameter Definition
N Number of miniers
M Number of pools
vj The hash rate required by pool j
Qj The set of transactions size included in a block
xj Population fraction of pool j
aj The relative computing power of pool jwith respect to
the all system
R The fixed reward when mining a block
p The price of each computing and storage resource unit
rQ The variable reward when mining a block
tðQÞ The time needed for a block to propagation
Pjðaj; QjÞ The successful probability of mining pool j to win the
mining game
ujðaj; QjÞ The expected reward of pool j
riðaj; QjÞ The expected reward of the device i in pool j
MAI ETAL.: CLOUD MINING POOL AIDED BLOCKCHAIN-ENABLED INTERNETOF THINGS: AN EVOLUTIONARYGAME APPROACH 695
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
Definition 1. A population state x� is an ESS, if the condition
ðx� x�ÞTRðx�Þ ¼ 0 implies that:
ðx� � xÞTRðxÞ � 0: (12)
where 8x 2 B� x� is the neighborhood ofX.
4.3 Two Mining Pool Study
To demonstrate the evolutionary stable strategy, in this part,
we will present a two mining pools case study. We set the
population fraction of two pool as x1 ¼ x, and x2 ¼ 1� x.
Then, we can obtain the Ordinary Differential Equations:
_x1ðtÞ ¼ x1x2
 
v1k1 � v2k2
Nðx1v1 þ x2v2Þ � pðv1 � v2Þ
!
; (13)
_x2ðtÞ ¼ x1x2
 
v1k1 � v2k2
Nðx1v2 þ x2v1Þ � pðv1 � v2Þ
!
; (14)
where
ki ¼ ðRþ rQiÞ � e��tðQiÞ: (15)
By solving the above formulas, we can obtain the
fixed points as ðx�; 1� x�Þ, where x� ¼ v1k1�v2k2
pNðv1�v2Þ2
� v2
v1�v2 .
According to the above definition, this fixed point is ESS if all
eigenvalues of the Jacobian matrix have negative real parts.
For this replicate dynamic system, the Jacobian matrix of the
replicator dynamics is
J ¼
@fðx1Þ
x1
@fðx1Þ
x2
@fðx2Þ
x1
@fðx2Þ
x2
 !
After some tedious mathematical manipulations, the rest
point with x� ¼ v1k1�v2k2
pNðv1�v2Þ2
� v2
v1�v2 is an ESS if the following
conditions are satisfied:
v1k1 � v2k2 < 0
v2v1ðk2 � k1Þðv2 � v1Þ > 0
�
:
4.4 Delay in Replicator Dynamics
As discussed above, the players can adjust their strategies
based on the system’s average fitness. However, in actual
deployment, the latest fitness information may not be avail-
able to all players. They can only rely on historical information
to make decisions. Therefore, in this paper, we introduce a
certain period delayed t in our system. The replicator dynam-
ics will be reformulated as:
_xjðtÞ ¼ xjðt� tÞðujðajðt� tÞ;QjÞ � �uðxðt� tÞÞÞ; (16)
which is a delay differential equation. To obtain the solution
to this equation, the Runge-Kutta method can be applied.
Besides, the stability of the delay differential equation has
been well studied. In [25], Obando et al. investigated the sta-
bility of the replicator dynamics with the effect of a time
delay using the Lyapunov method. The theoretical results
show that the ESS strategy is stable if the time delay is small
enough. The detailed analysis can be founded in [25]. We
will evaluate the impact of delay in the Section 6.
4.5 Evolutionary Game-based Pool Selection
Algorithm
As discussed above, we apply the evolutionary game to the
mining pool-selection problem. The miners continually
adjust their strategies based on the system average fitness
for the sake of a higher expected payoff. Along with the
players evolves over time, the whole blockchain network
can converge to the ESS. Therefore, in this paper, we pro-
pose a centralized population evolutionary strategy algo-
rithm. In this approach, a centralized controller is deployed
to calculate the average fitness of all players. Then, the aver-
age fitness is issued to each player to evaluate the current
strategy based on its current payoff (i.e., switch their strate-
gies or keep them) [26]. The centralized pool-selection algo-
rithm can be described as follows.
Algorithm 1. The Population Evolution Approach for
Pools Selection
1: Each pool set v; Q.
2: All devices randomly choose the pool.
3: repeat
4: Each device compute the payoff from:
5: riðaj; QjÞ ¼ ðRþrQjÞ
Nxj
aj � e��Qj � pvi
6: The payoff information is sent to the controller.
7: The centralized controller computes average payoff and
broadcast it to all devices.
8: �rðxÞ ¼ Si2N riðaj;QjÞ
N
9: for i 2 N do
10: if ri < �r then
11: if randðÞ < ð�r� riÞ=�r then
12: Choose other pool.
13: end if
14: end if
15: end for
16: until
5 DISTRIBUTD REINFORCEMENT LEARNING
APPROACH
Thus far, the paper has argued an ideal model where a cen-
tralized controller cloud be placed to guide behaviors of all
players. However, in an actual IoT network, considering the
non-cooperative relationship among them, the centralized
controller may not be available [27]. Each player has to
adapt its pool-selection decision independently. Therefore,
how could the individual devices optimize their strategy in
the non-stationary system (i.e., multi-agent system) is a criti-
cal challenge. Inspired by the recent success of applying
reinforcement learning algorithms in multi-agent system,
we introduce a distributed reinforcement learning algo-
rithm, named ‘WoLF-PHC’ [28].
5.1 The Multi-Agent System
With the decision-making shift to each miner, these inde-
pendent miners constitute a multi-agent system, which can
be modeled as a decentralized partially observable Markov
decision process (Dec-POMDP) [29]. Formally, a Dec-
POMDP can be formalized as a 5-tuple < N;S;Oi; Ai; R>,
where N is the set of agents, S is the global states space, Oi
696 IEEE TRANSACTIONS ON CLOUD COMPUTING, VOL. 11, NO. 1, JANUARY-MARCH 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
is the local observations space of agent i, Ai is the action
space of agent i, and R is the immediate rewards [30]. As
shown in Fig. 2, at each step, each agent takes an action ai
according to current policy piðaijoiÞ and its local observation
oi. Then, the system will generate an immediate reward R,
and the state swill transit to a new state s0.
Specifically, in our scenario, the observation can be
described as Ot ¼ ½xt�11 ; . . . ; xt�1
M � (i.e., current mining pools’
state, which is determined by all agents’ action in the last
time t� 1), the action of each agent can be described as At ¼
½M�, where M is the set of the mining pools, and the imme-
diate reward can be formulated as the expected profit ri. In
the following, we will define the three components of the
miners:
Definition 2. The three components of the miners:
� Observation:
Ot ¼ ½xt�11 ; . . . ; xt�1
M �:
� Action:
At ¼ ½M�:
� Immediate reward:
Rt
iðat1; at2; . . . ; atnÞ ¼
ðRþ rQjÞ
Nxj
aj � e��Qj � pvj:
Note that the reward is only related to the joint action
ðat1; at2; . . . ; atnÞ.
5.2 Policy Generation
Learning in a multi-agent system is much more difficult
than in a single-agent system [31]. One of the critical chal-
lenges is the moving target problem (i.e., non-stationary
learning problem), which is caused by the noise signal
brought by other agents [32]. Directly applying single-agent
reinforcement learning (e.g., Q-learning, Policy gradient)
will suffer seriously no-convergence problem [33]. In this
paper, we introduce an enhanced policy gradient algorithm,
termed as the WoLF Policy Hill Climbing (WoLF-PHC). It
adopts the ’wining or learning fast’ scheme (i.e. learn slowly
while winning or quickly while losing), where a variety of
learning rates are used to encourage convergence.
In the WoLF-PHC, the updating rule of the Q value can
be described as [34]:
QiðatÞ  ð1� aÞQiðatÞ þ aðRi þ dmax
a2A
Qiðatþ1ÞÞ; (17)
where d 2 ð0; 1� is the discount factor, and a 2 ð0; 1� is the
learning rate. The discount factor determines the impor-
tance of future rewards and the learning rate determines
what extent new knowledge overrides the old knowledge.
During the training process, agents continually update their
strategies, i.e. piðaÞ :! PrðAÞ, for the sake of maximizing
the cumulative reward by learning from the environment.
To update the piðaÞ, the WolF-PHC adopts two learning
rates uwin and ulose, where uwin > ulose (i.e., learn slowly
while winning or quickly while losing). They are used to
update agents’ policy depending upon if the agent is win-
ning or losing [35]. To determine the winning or loss of cur-
rent policy, a baseline is designed. The baseline is the
expected reward of the average policy piðatÞ, which can be
formulated as:
piðatÞ  piðatÞ þ piðatÞ � piðatÞ
NiðtÞ ; 8at 2 A; (18)
where
Niðtþ 1Þ  NiðtÞ þ 1: (19)
Then, the uwin is applied to update the policy cautiously in
the condition of win, otherwise, ulosem is used, i.e.
u ¼ uwin; P;
ulose; o:w;
�
(20)
where P :X
a2Ai
piðatÞQiðatÞ >
X
a2Ai
piðatÞQiðatÞ (21)
In the learning process, the agents constantly learn and
adapt their policy toward maximizing the expected reward,
followed by the decrease of the other actions [36]. The
update of the pool selection policy of the mining pool can
be formulated as:
piðatÞ  piðatÞ þ~at ; 8a 2 A; (22)
where
~at ¼
�min piðatÞ; ui
M�1
� �
;P
0
;
Sa0 6¼a min piða0tÞ; ui
M�1
� �
; o:w:
(
(23)
where
P
0
: at 6¼ argmax
a0t2A
Qiða0tÞ; (24)
andM is a constant coefficient.
Fig. 2. The multi-agent system.
MAI ETAL.: CLOUD MINING POOL AIDED BLOCKCHAIN-ENABLED INTERNETOF THINGS: AN EVOLUTIONARYGAME APPROACH 697
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
Based on this, the WoLF-PHC algorithm based pool
selection policy is described in Algorithm 2.
Algorithm 2. The WoLF-PHC algorithm for the Pool
Selection
Set a; d; uwin; ulose
Initialization
repeat
for t ¼ 1; 2; 3 do
Select action at according to current policy pi
Each miner observes the immediate reward R
Update QiðatÞ by:
QiðatÞ  ð1� aÞQiðatÞ þ aðRi þ dmaxa2AQiðatþ1ÞÞ
Update piðaÞ and piðaÞ by:
piðatÞ  piðatÞ þ piðatÞ�piðatÞ
NiðtÞ ; 8at 2 A
piðatÞ  piðatÞ þ~at ; 8at 2 A;
end for
until
6 PERFORMANCE EVALUATION
In this section, we first analyze the colony behaviors of IoT
devices in the pool selection problem. Then, we present the
experimental results to evaluate the performance of our pro-
posed WoLF-PHC based algorithms.
6.1 Evolution Analysis
In our experiments, we simulate a blockchain network with
5000 IoT devices (i.e.,N ¼ 5000). These resources constrained
IoT devices are willing to rent the computing resource from
the cloud services and evolve to form several mining pools.
For the blockchain, we set the fixed rewardR as 1000, and the
variable reward parameter r as 0.01. For the cloud server, we
set the price p of computing and storage resources unites as
0.01. The parameters setting can be found in Table 2.
We first investigate the dynamic behavior of the players’
population. In this case, we deploy two mining pools, where
the hash power requirement of two pools is v1 ¼ 10 and
v2 ¼ 30, and the size of transactions size of both two pools
is 100. As shown in Fig. 3, we plot the phase plane of the
replicator in our system. The figure shows that the direction
of the adaptation in mining pool selection to the ESS point
(i.e. Population1 : 0:3; Population2 : 0:7). For example, when
the initial population state is x ¼ ½0:5; 0:5�, the trajectory of
replicator dynamics follows the arrows to reach the ESS.
6.2 Evolution Analysis With Different Pooling
Strategies
Then, we evaluate the evolution behavior of the players pop-
ulation with different pooling strategies. In this case, we
design three groups of experiments, where themining pools’
configuration and the ESS point can be found in Table 3. As
shown in Fig. 4, we notice that the miner is more willing to
join in the pool with less hash power requirement. The
increasing hash requirement will reduce the number of play-
ers who are willing to joining in. This is mainly caused by the
cost of renting the cloud-computing resource. The slim profit
gained from mining a block can not meet the exorbitant cost
of resource renting. Therefore, to attract more miners to join
in, the pool’s coordinator should lower the threshold of the
hash requirement for eachminer.
6.3 Evolutionary Game-Based Pool Selection
Algorithm
In this section, we will evaluate the convergence of the cen-
tralized evolutionary game-based pool selection algorithm.
The trajectories of players’ strategies adaptation over time
are shown in Fig. 6. We can find that the players with our
algorithm can quickly converge to the ESS point. This is
mainly because that the centralized controller can con-
stantly revise the player behavior. The average payoff �r is
issued to each IoT device to evaluate its current strategy.
Then, these players can adjust their strategies based on
their current payoff (i.e., switch their strategies or keep
them).
TABLE 2
List of Parameters Setting
Parameter Value
Fixed reward R 1000
Number of IoT devices N 5000
Number of agent 30
The price of computation resource unite p 0.01
The variable reward parameter r 0.01
The maximum episode numbers 10000
The learning rate a 0.2
The discount factor b 0.8
The learning rates (win) uwin 0.0025
The learning rates (lose) ulose 0.01
Fig. 3. The phase plane of replicator dynamics.
TABLE 3
Experiments Configuration
Mining Pool Setting ESS Point
Pool 1 v1 ¼ 10, v2 ¼ 30 (0.3, 0.7)
Pool 2 v1 ¼ 10, v2 ¼ 50 (0.35, 0.65)
Pool 3 v1 ¼ 30, v2 ¼ 20 (0.4, 0.6)
Pool 4 v1 ¼ 30, v2 ¼ 200 (1, 0)
698 IEEE TRANSACTIONS ON CLOUD COMPUTING, VOL. 11, NO. 1, JANUARY-MARCH 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
6.4 Impact of Delay in Strategy Adaptation
pt?>As discussed above, considering the communication
latency between miners and the centralized controller, we
investigate a certain period of time delay t in our system. In
this section, we evaluate the impact of delay in the process
of strategy adaptation. We set four mining pools in our sys-
temwith the different hash power requirement, where v1 ¼
10, v2 ¼ 20, v3 ¼ 30 and v4 ¼ 40. Also, we set three groups
of experiments, where the time delay t are separately set as
0, 10, and 20. Note that the units of t are steps in our
experiments.
As shown in Fig. 6, when the time delay t is 0, the trajectory
of strategy adaptation is relatively smooth. The system can
quickly converge to the evolutionary equilibrium. And when
the delay is introduced, we notice fluctuating dynamics of
strategy adaptation over time toward the ESS. Especially, with
the time delay of t becoming larger, the more fluctuating will
be brought. This is because that when outdated knowledge is
used by the players, the decisions tend to be inaccurate. But
although the trajectory of strategy adaptation is fluctuating,
the system can also converge to the near ESS, whichmeans the
system still be stable if the time delay is not very large [37].
Fig. 4. The phase plane of replicator dynamics with different pooling strategies.
Fig. 5. Convergence analysis of the evolutionary game-based pool selection algorithm.
Fig. 6. The impact of delay in strategy adaptation.
MAI ETAL.: CLOUD MINING POOL AIDED BLOCKCHAIN-ENABLED INTERNETOF THINGS: AN EVOLUTIONARYGAME APPROACH 699
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
7 WOLF-PHC BASED POOL SELECTION
Then, in this section, we evaluate the performance of the
WoLF-PHC based algorithm in the mining pool selection
problem. We construct an trading environment with 30 IoT
devices (i.e., agents) and two mining pools. The blockchain
environment setting is consistent with previous experi-
ments. We set the maximum training episode numbers as
10000, the learning rate a as 0.2, the discount factor b as 0.8,
the uwin as 0.0025 and ulose as 0.01.
7.1 Performance Convergence of WoLF-PHC
First, we evaluate the convergence of our algorithm.WeuseQ-
Learning as the baseline algorithm, where the learning rate a
and the discount factor b are also set as 0.2 and 0.8. 17. As
shown in Fig. 7, the learning process of WoLF-PHC and Q-
learning algorithm are demonstrated. We notice that the
agents with the Q-learning algorithm exhibit a poor conver-
gence performance. This is caused by the moving target prob-
lem in multi-agent system. By contrast, benefiting from the
’wining or learning fast’ scheme, the WoLF-PHC algorithm
present amuch better convergence performance.
Besides, as shown in Fig. 8, we present the trajectories of
agents’ strategies adaptation. In this case, we design three
groups of experiments, where the mining pools’ configuration
can be found in Table 3. We notice that while the adaptation
process exists fluctuation, after about 400 steps, the systemwill
converge. By comparing to the phase plane of the replicator
dynamics, these convergence points are the ESS of the system.
Moreover, we evaluate our proposed algorithm in compari-
son with other state-of-the-art reinforcement learning algo-
rithms, including Policy Gradient (PG), Deep Q-learning
(DQN), and Deep Deterministic Policy Gradient (DDPG). In
this experiment, we set the mining pool’s hash power require-
ment as v1 ¼ 10 and v2 ¼ 30, and the value of learning rate a
and the discount factor b as 0.2 and 0.8. The other algorithm
parameters setting of DQN and DDPG can be found in [38].
As shown in Table 4, we notice that all algorithms can con-
verge to a small neighborhood of the ESS point ð0:3; 0:7Þ. This
demonstrates that reinforcement algorithms can adapt to the
non-stationary system and converge to the system’s ESS point.
But different algorithmspresent different rates of convergence.
TheWolF-PHC algorithms exhibit the best performance. It can
converge in around 320 steps. In contrast, the convergence of
DQN and DDPG are the worst. This is because that they have
toomanyparameters that need to be updatedduring the learn-
ing process. Therefore, we can draw the conclusion that while
the complex neural network design enables them to solve com-
plex tasks, simple learning algorithms may more efficient for
simple tasks.
7.2 Reward versus Pooling Strategies
In the following, we evaluate the impact of the pooling strate-
gies to the agent’s reward. In this case, we fixed the pool1’s
hash power requirement asv1 ¼ 10, and the set of transactions
Fig. 7. Convergence analysis of Q-learning and WoLF-PHC algorithm.
Fig. 8. Convergence analysis of Wolf-PHC based pool selection algorithm.
TABLE 4
Convergence Performance
Algorithm Steps Conv Point
WoLF-PHC 320 (0.3, 0.7)
Q-Learning 860 (0.33, 0.67)
Policy Gradient 1020 (0.3, 0.7)
DQN 2470 (0.27, 0.73)
DDPG 1930 (0.3, 0.7)
700 IEEE TRANSACTIONS ON CLOUD COMPUTING, VOL. 11, NO. 1, JANUARY-MARCH 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
size as q ¼ 100. As shown in Fig. 9, as the hash power require-
ment of pool2 v2 increasing, the total reward reduces. This is
caused by the cost of renting the cloud computing resource.
Because the total reward gained from the blockchain network
remains unchanged, renting more computing resources will
reduce the total profit of the miners. Besides, we evaluate the
impact of the variable reward q on the agent’s reward. With
the size growing, the more reward will bring to the whole sys-
tem, and therefore improve the agent’s profit.
7.3 Reward versus Number of Miners
Next, we evaluate the impact of the number of miners and
the number of pools to the agent’s reward. In this experi-
ment, we design three groups of experiments, where the
mining pools’ configuration can be found in Table 5. We set
the size of transactions size in a block of all pools as 30. As
shown in Fig. 10, as the number of miners increasing, the
agent’s reward reduces, which is caused by the competition
among miners. Due to the total gain from the mining block
is constant, the single agent’s profit will decrease with the
number of miners increasing. Besides, we find that the
agent’s reward will increase with the number of pools
growing. This result may be explained by the fact that more
pools will offer more opportunities for each agent. More
choices will reduce the competition among miners, there-
fore improving the individual agent’s profit.
8 CONCLUSION
In this paper, we propose a cloud mining pool aided BCoT
architecture, where the IoT devices can rent the computing
resource from the cloud services to offload their mining
tasks. In addition, to seek a steady income, the miners are
grouped into several mining pools. In the blockchain, these
mining pools present themselves as single powerful proxy
nodes to gain an advantage over other miners during the
mining process. Based on this architecture, we discuss the
mining pool selection problem. We first propose a central-
ized evolutionary game-based pool selection algorithm. A
centralized controller is used to guide behaviors of all play-
ers. Besides, considering the non-cooperative relationship
among miners, we propose a WoLF-PHC based pool selec-
tion algorithm. The WoLF-PHC adopts the ’wining or
learning fast’ scheme to encourage convergence. The
agents can constantly adjust their strategies by only inter-
acting with the environment and other agents. The experi-
mental results show that both algorithms can quickly
converge to the ESS.
ACKNOWLEDGMENTS
This work was supported by the funding from Hong Kong
RGC Research Impact Fund (RIF) with the Project No.
R5060-19, General Research Fund (GRF) with the Project
No. 152221/19E and 15220320/20E, the National Natural
Science Foundation of China under Grant 61872310, Shenz-
hen Science and Technology Innovation Commission
(R2020A045), Artificial Intelligence and Smart City Joint
Laboratory (BUPT-TGSTII) (B2020001), Future Intelligent
Networking and Intelligent Transportation Joint Laboratory
(BUPTCTTIC) (B2019007), and the BUPT Excellent Ph.D.
Student Foundation under Grant CX2020108.
REFERENCES
[1] X. Huang, R. Yu, J. Kang, Z. Xia, and Y. Zhang, “Software defined
networking for energy harvesting Internet of Things,” IEEE Inter-
net of Things J., vol. 5, no. 3, pp. 1389–1399, Jun. 2018.
[2] H. Dai, Z. Zheng, and Y. Zhang, “Blockchain for Internet of
Things: A survey,” IEEE Internet of Things J., vol. 6, no. 5,
pp. 8076–8094, Oct. 2019.
[3] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “Blockchain chal-
lenges and opportunities: A survey,” Int. J. Web Grid Services, vol. 14,
no. 4, pp. 352–375, 2018.
[4] Z. Li, J. Kang, R. Yu, D. Ye, Q. Deng, and Y. Zhang, “Consortium
blockchain for secure energy trading in industrial Internet of
Things,” IEEE Trans. Ind. Inform., vol. 14, no. 8, pp. 3690–3700,
Aug. 2018.
Fig. 9. Reward versus pooling strategies.
TABLE 5
Experiments Configuration
Mining Pool Setting
status 1 v1 ¼ 20, v2 ¼ 30
status 2 v1 ¼ 20, v2 ¼ 30, v2 ¼ 40
status 3 v1 ¼ 20, v2 ¼ 30, v2 ¼ 40, v2 ¼ 50
Fig. 10. Reward versus number of miners.
MAI ETAL.: CLOUD MINING POOL AIDED BLOCKCHAIN-ENABLED INTERNETOF THINGS: AN EVOLUTIONARYGAME APPROACH 701
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
[5] I. Bentov, A. Gabizon, and A. Mizrahi, “Cryptocurrencies without
proof of work,” in Proc. Int. Conf. Financial Cryptogr. Data Secur.,
2016, pp. 142–157.
[6] C. Qiu, H. Yao, C. Jiang, S. Guo, and F. Xu, “Cloud computing
assisted blockchain-enabled Internet of Things,” in Proc. IEEE
Trans. Cloud Comput., 2019, p. 1, doi: 10.1109/TCC.2019.2930259.
[7] C. Esposito, A. De Santis, G. Tortora, H. Chang, and K. R. Choo,
“Blockchain: A panacea for healthcare cloud-based data security
and privacy?,” IEEE Cloud Comput., vol. 5, no. 1, pp. 31–37, Jan./
Feb. 2018.
[8] P. Yang, N. Zhang, Y. Bi, L. Yu, and X. S. Shen, “Catalyzing cloud-
fog interoperation in 5G wireless networks: An SDN approach,”
IEEE Network, vol. 31, no. 5, pp. 14–20, 2017.
[9] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/fog computing resource management and pricing for
blockchain networks,” IEEE Internet of Things J., vol. 6, no. 3,
pp. 4585–4600, Jun. 2019.
[10] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource
trading in blockchain-based industrial Internet of Things,” IEEE
Trans. Ind. Inform., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[11] Z. Li, Z. Yang, and S. Xie, “Computing resource trading for edge-
cloud-assisted Internet of Things,” IEEE Trans. Ind. Inform.,
vol. 15, no. 6, pp. 3661–3669, Jun. 2019.
[12] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song,
“Computation offloading and content caching in wireless block-
chain networks with mobile edge computing,” IEEE Trans. Veh.
Technol., vol. 67, no. 11, pp. 11 008–11 021, Nov. 2018.
[13] O. Schrijvers, J. Bonneau, D. Boneh, and T. Roughgarden, “Incentive
compatibility of bitcoin mining pool reward functions,” in Proc. Int.
Conf. Financial Cryptogr. Data Secur., 2017, pp. 477–498.
[14] B. Fisch, R. Pass, and A. Shelat, “Socially optimal mining pools,”
in Proc. Int. Conf. Web Internet Economics, 2017, pp. 205–218.
[15] Y. Lewenberg, Y. Bachrach, Y. Sompolinsky, A. Zohar, and
J. S. Rosenschein, “Bitcoin mining pools: A cooperative game
theoretic analysis,” in Proc. Int. Conf. Auton. Agents Multiagent
Syst., 2015, pp. 919–927.
[16] S. Kim, “Group bargaining based bitcoin mining scheme using
incentive payment process,” Trans. Emerg. Telecommun. Technolo-
gies, vol. 27, no. 11, pp. 1486–1495, 2016.
[17] L. Luu, R. Saha, I. Parameshwaran, P. Saxena, and A. Hobor, “On
power splitting games in distributed computation: The case of bit-
coin pooled mining,” in Proc. IEEE 28th Comput. Secur. Foundations
Symp., 2015, pp. 397–411.
[18] X. Liu, W. Wang, D. Niyato, N. Zhao, and P. Wang, “Evolutionary
game for mining pool selection in blockchain networks,” IEEE
Wireless Commun. Lett., vol. 7, no. 5, pp. 760–763, Oct. 2018.
[19] A. Kiayias, E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis,
“Blockchain mining games,” in Proc. ACM Conf. Economics Compu-
tation, 2016, pp. 365–382.
[20] Y. Liu, C. Yang, L. Jiang, S. Xie, and Y. Zhang, “Intelligent edge
computing for IoT-based energy management in smart cities,”
IEEE Netw., vol. 33, no. 2, pp. 111–117, Mar./Apr. 2019.
[21] J. Hofbauer and K. Sigmund, “Evolutionary game dynamics,”
Bull. Amer. Math. Soc., vol. 40, no. 4, pp. 479–519, 2011.
[22] C. Taylor,D. Fudenberg, A. Sasaki, andM.A.Nowak, “Evolutionary
game dynamics in finite populations,” Bull. Math. Biol., vol. 66, no. 6,
pp. 1621–1644, 2004.
[23] D. Friedman, “Evolutionary games in economics,” Econometrica,
vol. 59, no. 3, pp. 637–666, 1991.
[24] R. Cressman, C. Ansell, and K. Binmore, Evolutionary Dynamics
and Extensive Form Games, vol. 5. Cambridge, MA, USA: MIT
Press, 2003.
[25] F.Mazenc and S. Niculescu, “Lyapunov stability analysis for nonlin-
ear delay systems,” Syst. Control Lett., vol. 42, no. 4, pp. 245–251, 2001.
[26] T. Mekki, I. Jabri, A. Rachedi, and M. B. Jemaa, “Vehicular cloud
networking: Evolutionary game with reinforcement learning
based access approach,” Int. J. Bio-Inspired Computation, vol. 13,
no. 1, pp. 45–58, 2019.
[27] W. He, Y. Liu, H. Yao, T. Mai, N. Zhang, and F. R. Yu,
“Distributed variational bayes-based in-network security for the
Internet of Things,” IEEE Internet of Things J., vol. 8, no. 8,
pp. 6293–6304, Apr. 2021.
[28] L. Busoniu, R. Babuska, and B. De Schutter, “Multi-agent rein-
forcement learning: A survey,” in Proc. 9th Int. Conf. Control
Automat. Robot. Vis., 2006, pp. 1–6.
[29] M. T. J. Spaan, “Partially observable markov decision processes,”
in Proc. Reinforcement Learn., 2012, pp. 387–414.
[30] X. Yuan, H. Yao, J. Wang, T. Mai, and M. Guizani, “Artificial intel-
ligence empowered QoS-oriented network association for next-
generation mobile networks,” IEEE Trans. Cognitive Commun.
Netw., vol. 7, no. 3, pp. 856–870, Sep. 2021.
[31] H. Yao, B. Zhang, P. Zhang, S. Wu, C. Jiang, and S. Guo, “RDAM:
A reinforcement learning based dynamic attribute matrix repre-
sentation for virtual network embedding,” IEEE Trans. Emerg.
Topics Comput., vol. 9, no. 2, pp. 901–914, Second Quarter 2021.
[32] J. Wang, C. Jiang, H. Zhang, Y. Ren, K.-C. Chen, and L. Hanzo,
“Thirty years of machine learning: The road to pareto-optimal
wireless networks,” IEEE Commun. Surveys Tuts., vol. 22, no. 3,
pp. 1472–1514, Third Quarter 2020.
[33] P. Hernandezleal, B. Kartal, and M. E. Taylor, “A survey and cri-
tique of multiagent deep reinforcement learning,” Auton. Agents
Multi-Agent Syst., vol. 33, no. 6, pp. 750–797, 2019.
[34] J. Wang, C. Jiang, K. Zhang, X. Hou, Y. Ren, and Y. Qian,
“Distributed q-learning aided heterogeneous network association
for energy-efficient IIoT,” IEEE Trans. Ind. Inform., vol. 16, no. 4,
pp. 2756–2764, Apr. 2020.
[35] D. Bloembergen, K. Tuyls, D. Hennes, and M. Kaisers,
“Evolutionary dynamics of multi-agent learning: A survey,” J. Artif.
Intell. Res., vol. 53, no. 1, pp. 659–697, 2015.
[36] Y. Zhang, R. Yu, M. Nekovee, Y. Liu, S. Xie, and S. Gjessing,
“Cognitive machine-to-machine communications: visions and
potentials for the smart grid,” IEEE Netw., vol. 26, no. 3, pp. 6–13,
May/Jun. 2012.
[37] D. Niyato and E. Hossain, “Dynamics of network selection in het-
erogeneous wireless networks: An evolutionary game approach,”
IEEE Trans. Veh. Technol., vol. 58, no. 4, pp. 2008–2017, May 2009.
[38] D. Silver, G. Lever, N. Heess, T. Degris, D. Wierstra, and M. Ried-
miller, “Deterministic policy gradient algorithms,” in Proc. Int.
Conf. Mach. Learn., 2014, pp. 387–395.
Tianle Mai (Student Member, IEEE) is working
toward the PhD degree at the School of Informa-
tion and Communication Engineering, Beijing
University of Posts and Telecommunications, Bei-
jing. His research interests include future network
architecture, network artificial intelligence, multi-
agent system, space-terrestrial integrated net-
work, network resource allocation and dedicated
networks.
Haipeng Yao (Senior Member, IEEE) received
the PhD from the Department of Telecommunica-
tion Engineering, University of Beijing University
of Posts and Telecommunications, in 2011. He is
currently an associate professor with the Beijing
University of Posts and Telecommunications. His
research interests include future network archi-
tecture, network artificial intelligence, networking,
space-terrestrial integrated network, network
resource allocation and dedicated networks. He
has published more than 100 papers in presti-
gious peer-reviewed journals and conferences. He has served as an edi-
tor of IEEE Network, IEEE Access, and a guest editor of IEEE Open
Journal of the Computer Society and Springer Journal of Network and
Systems Management. He has also served as a member of the technical
program committee as well as the Symposium chair for a number of
international conferences, including IWCMC 2019 Symposium chair,
ACM TUR-C SIGSAC2020 publication chair.
Ni Zhang received the PhD degree from the Insti-
tute of Computing Technology, Chinese Academy
of Sciences, in 2007. He currently serves with the
Sixth Research Institute of China Electronic Cor-
poration, Beijing, China. His research interests
include the area of future internet architecture,
network security and artificial intelligence.
702 IEEE TRANSACTIONS ON CLOUD COMPUTING, VOL. 11, NO. 1, JANUARY-MARCH 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TCC.2019.2930259
Lexi Xu (Member, IEEE) receivedMS degree from
the Beijing University of Posts and Telecommuni-
cations, Beijing, China, in 2009, and the PhD
degree from theQueenMary University of London,
London, United Kingdom, in 2013. He is currently a
senior engineer with ChinaUnicomResearch Insti-
tute. He is also a China Unicom delegate in ITU,
ETSI, CCSA. He served as Workshop Chair of
ICSINC, IEEE ISCIT, 5GWN, NGDN, IEEE IUCC.
His research interests include big data, self-orga-
nizing networks, radio resourcemanagement.
Mohsen Guizani (Fellow, IEEE) received the BS
(Hons.) and MS degrees in electrical engineering
and the MS and PhD degrees in computer engi-
neering from Syracuse University, Syracuse, NY,
U.S. in 1984, 1986, 1987, and 1990, respectively.
He is currently a professor with the Computer Sci-
ence and Engineering Department, Qatar Univer-
sity, Qatar. Previously, he has served in different
academic and administrative positions with the
University of Idaho, Western Michigan University,
University of West Florida, University of Missouri-
Kansas City, University of Colorado Boulder, and Syracuse University. He
is the author of nine books and more than 600 publications in refereed
journals and conferences. His research interests include wireless com-
munications and mobile computing, computer networks, mobile cloud
computing, security, and smart grid. He is a senior member of ACM.
He also served as a member, the chair, and the general chair of a number
of international conferences. Throughout his career, he received three
teaching awards and four research awards. He was a recipient of 2017
IEEE Communications Society Wireless Technical Committee (WTC)
Recognition Award, 2018 Ad Hoc Technical Committee Recognition
Award for his contribution to outstanding research in wireless communi-
cations and Ad-Hoc Sensor networks, and the 2019 IEEE Communica-
tions and Information Security Technical Recognition (CISTC) Award for
outstanding contributions to the technological advancement of security.
He was the chair of IEEE Communications Society Wireless Technical
Committee and the Chair of the TAOS Technical Committee. He has
served as the IEEE Computer Society Distinguished Speaker. He is cur-
rently the IEEE ComSoc distinguished lecturer. He guest edited a number
of special issues in IEEE journals andmagazines. He is also the editor-in-
chief of IEEE Network Magazine. He serves on the editorial boards for
several international technical journals and the Founder and the editor-in-
chief forWireless Communications andMobile Computing (Wiley).
Song Guo (Fellow, IEEE) is currently a full pro-
fessor with the Department of Computing, The
Hong Kong Polytechnic University. He also holds
a changjiang chair professorship awarded by the
Ministry of Education of China. He is a fellow of
the Canadian Academy of Engineering and a fel-
low of the IEEE (Computer Society). His research
interests include big data, edge AI, mobile com-
puting, and distributed systems. He published
many papers in top venues with wide impact in
these areas and was recognized as a Highly
Cited Researcher (Clarivate Web of Science). He is the recipient of over
a dozen best paper awards from IEEE/ACM Conferences, Journals, and
Technical Committees. He is the editor-in-chief of IEEE Open Journal of
the Computer Society and the chair of IEEE Communications Society
(ComSoc) Space and Satellite Communications Technical Committee.
He was an IEEE ComSoc distinguished lecturer and a member of IEEE
ComSoc Board of Governors. He has served for IEEE Computer Society
on fellow Evaluation Committee, and been named on editorial board of a
number of prestigious international journals like IEEE Transactions on
Parallel and Distributed Systems, IEEE Transactions on Cloud Comput-
ing, IEEE Transactions on Emerging Topics in Computing, etc. He has
also served as chairs of organizing and technical committees of many
international conferences.
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/csdl.
MAI ETAL.: CLOUD MINING POOL AIDED BLOCKCHAIN-ENABLED INTERNETOF THINGS: AN EVOLUTIONARYGAME APPROACH 703
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:59:47 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice