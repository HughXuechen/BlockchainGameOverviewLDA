Reputation-Based Coalition Formation for Secure Self-Organized and Scalable Sharding in IoT Blockchains With Mobile-Edge Computing
11830 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
Reputation-Based Coalition Formation for Secure
Self-Organized and Scalable Sharding in IoT
Blockchains With Mobile-Edge Computing
Alia Asheralieva and Dusit Niyato , Fellow, IEEE
Abstract—We propose a fully distributed system architecture
and a scalable self-organized sharding scheme for the Internet-
of-Things (IoT) blockchains that can guarantee system security
without reducing its throughput. In the system, the IoT devices
are supported by the set of blockchain peers that gather, pro-
cess, verify, and store the blocks of IoT transaction records. To
support communications among peers, the system is realized in
the mobile-edge computing (MEC) network. We design a new
consensus mechanism in which each peer votes on the outputs
of each block task in its shard. The peer’s voting power is com-
puted from its reputation, i.e., trustworthiness in the system. By
adopting a reputation-based coalitional game model, we formu-
late a novel self-organized shard formation algorithm in which
each peer acts as a rational player aiming to maximize both its
payoff and the coalitional reputation. We prove that the algo-
rithm converges to the reputation-based stable shard structure,
i.e., a structure that maximizes the payoff and coalitional repu-
tation of each peer without negatively affecting other peers. The
algorithm shows a superior performance in terms of system secu-
rity and throughput when compared to state-of-the-art sharding
schemes and reputation-based blockchains.
Index Terms—Blockchains, edge computing, game theory,
Internet of Things (IoT), reputation management, security,
self-organization, trust.
I. INTRODUCTION
W ITH the widespread deployment of Internet-of-Things
(IoT) applications (e.g., smart city, connected vehicles,
smart grid, e-health, smart home, etc.) enormous volumes of
Manuscript received February 3, 2020; revised May 16, 2020; accepted
June 10, 2020. Date of publication June 17, 2020; date of current ver-
sion December 11, 2020. The work of Dusit Niyato was supported in
part by the National Natural Science Foundation of China under Project
61950410603; in part by the National Research Foundation (NRF), Singapore,
through Singapore Energy Market Authority, Energy Resilience under Grant
NRF2017EWT-EP003-041; in part by Singapore NRF under Grant NRF2015-
NRF-ISF001-2277; in part by Singapore NRF National Satellite of Excellence,
Design Science and Technology for Secure Critical Infrastructure NSoE
under Grant DeST-SCI2019-0007; in part by the A*STAR-NTU-SUTD Joint
Research Grant on Artificial Intelligence for the Future of Manufacturing
under Grant RGANS1906; and in part by the Wallenberg AI, Autonomous
Systems and Software Program and Nanyang Technological University under
Grant M4082187 (4080). (Corresponding author: Alia Asheralieva.)
Alia Asheralieva is with the Department of Computer Science and
Engineering, Southern University of Science and Technology, Shenzhen
518055, China (e-mail: aasheralieva@gmail.com).
Dusit Niyato is with the School of Computer Science and
Engineering, Nanyang Technological University, Singapore 639798 (e-mail:
dniyato@ntu.edu.sg).
This article has supplementary downloadable material available at
https://ieeexplore.ieee.org, provided by the authors.
Digital Object Identifier 10.1109/JIOT.2020.3002969
data which requires massive amounts of computing, commu-
nication, and storage resources, will be generated repeatedly
by the rapidly growing number of IoT devices. This puts an
extraordinary strain on all kinds of networking and data man-
agement services causing increased concerns about security,
privacy, and performance degradation [1]. Indeed, many cur-
rent IoT applications, such as e-health or connected vehicles,
are time sensitive, compute intensive, and involve private data.
Therefore, the IoT data must be collected, processed, and uti-
lized very fast in an anonymous and secure manner. However,
when the vast data volumes are produced continuously, it is
very hard to efficiently exchange, process, verify, and store
these data, or to detect numerous malicious attacks and cyber
threats on a large scale [2]. Due to the absence of trans-
parency, single points of failure, and limited scalability and
reliability, traditional centralized management approaches can-
not meet these challenges [3]. Instead, a distributed ledger
technology called blockchain has been recently proposed to
address the main limitations of centralized approaches [1], [2].
In blockchains, data are organized in the form of blocks, e.g.,
records of IoT transactions, to preserve logical relations in
the appended blocks. The copies of blocks are distributed
across the entire blockchain network—a connected system
formed by geodistributed blockchain peers. The process by
which the blocks are verified and appended to a blockchain
is referred to as a mining [3]. During mining, a blockchain
peer performs a compute-intensive task, e.g., block process-
ing or verification, and broadcasts its output to the other peers.
The transaction is validated, and a new block is appended
to the blockchain only if the output reaches a consensus,
which ensures improved data integrity and security com-
paring to centralized approaches [4]. As such, blockchain
can become a powerful platform for data management and
networking in IoT systems, since it is capable of fulfilling
the main requirements of current IoT applications, including
decentralization, anonymity, reliability, transparency, and low
operational costs [1]–[4].
Although blockchains have already been deployed in some
distributed system scenarios, e.g., connected vehicles, content
delivery networks, and smart grids [5]–[7], they are still not
widely adopted in the IoT and other mobile applications. In
order to support these applications, the blockchain system must
scale well with the number of peers [8]. In particular, in the
blockchain systems, scalability is measured with respect to
three key performance metrics: 1) throughput—the number of
2327-4662 c© 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-4430-5928
https://orcid.org/0000-0002-7442-7416
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11831
transactions verified per time unit; 2) storage efficiency—the
size of blockchain which can be handled by peers with limited
storage capacities; and 3) security—the number of malicious
peers that the system can tolerate. Scalability means that all
metrics can improve or, at least, do not deteriorate as the num-
ber of peers increases [8], [9]. Poor scalability is the main
drawback of the current blockchain systems, i.e., Ethereum
and Bitcoin, that are based on classical Proof-of-Work (PoW)
and Proof-of-Stake (PoS) consensus algorithms [9], [10]. The
reason is that both PoW and PoS require full replication of
the computation and storage—each appended block must be
verified and stored by all peers in the system. Full replica-
tion results in high system security (up to 49% of adversarial
peers is tolerated). Yet, the throughput and storage efficiency
are compromised—the number of operations and the number
of blocks stored by each peer per time unit increase linearly
with the number of peers, which causes throughput and stor-
age efficiency to drop [11]. In addition to the aforementioned
problems, PoW is highly compute-intensive and demands large
energy consumption of peers; PoS is unfair to users with low
stakes leading to “rich get richer” phenomenon [8]. Other pop-
ular alternatives to PoS and PoW are the practical Byzantine
Fault Tolerance (pBFT) and Delegated PoS (DPoS) that do not
require each block to be verified and stored by all peers [11].
As such, the consensus must be reached among the preselected
validators represented by known or “trustworthy” peers in
pBFT and the peers with large stakes in DPoS. This increases
throughput and storage, and reduces energy costs compar-
ing to PoS and PoW. However, this approach limits security,
because less than 33% of adversaries can be tolerated. In addi-
tion, in DPoS, malicious peers can collude with compromised
high-stake peers, whereas pBFT needs a great amount of com-
munications among peers putting restrictions on the size of the
system (otherwise, the latency will grow which further reduces
throughput). However, smaller sizes can lead to “sybil attacks”
performed by forging the number of malicious nodes to exceed
33% [11].
Up to now, one of the leading solutions to address the scala-
bility of the blockchains is via sharding [12]–[16]. The idea is
to split an entire “global” blockchain into a number of local
subchains or “shards” which are then replicated, processed,
and stored in parallel. In this way, the computation and stor-
age requirements can be reduced by a factor is equal to the
number of shards. In order to allow the throughput and stor-
age efficiency to scale up with the system size, the number
of shards must grow linearly with the number of peers which
results in the constant number of peers managing each shard.
Consequently, when the system expands, it becomes more
susceptible to adversaries. Existing sharding models maintain
security with system solutions, e.g., by randomly sampling
and regularly updating the subsets of peers associated with the
same shards [12]. Such solutions can achieve a near-optimal
security in the cloud-based blockchains, but are not suitable
for IoT and mobile applications because: 1) peers are assigned
to shards by the leader, i.e., central authority node, which
leads to a single failure point; 2) any randomly assigned peer
can be malicious; and 3) peers assigned to the same shards
according to a random sampling can be located very far from
each other, which increases the block propagation time and,
hence, reduces blockchain throughput [3]. As such, the alter-
native sharding models are required to support IoT/mobile
blockchains. For example, to maximize the system throughput
in a decentralized way, peers can be allowed to select shards
that maximize their individual throughputs, whereas, to ensure
shards’ security, peers can be admitted to the shards based on
their reputations or “trustworthiness” [5] in the system.
In this article, we propose a decentralized and self-organized
implementation of sharding for IoT applications which enables
enhancing both the blockchain throughput and the security. In
particular, we study the IoT-blockchain with sharding, where
IoT devices are served by the set of blockchain peers that col-
lect, process, verify, and store the blocks of IoT transaction
records. Similar to [17], [18], to support the communications
among peers, the blockchain is realized in the mobile-edge
computing (MEC) network formed by the set of base sta-
tions (BSs) equipped with MEC servers. Shards are formed
in a self-organized way, i.e., each peer independently selects
its shard with the aim to maximize its payoff which depends
on the peer’s throughput. To ensure the security of the local
shards’ subchains, peers are admitted to shards based on their
reputations [5], [19]. The reputation is determined based on
the past behavior of the peer from its trustworthiness by the
peer’s customers, i.e., the users of IoT devices associated with
the peer, as well as by the other peers in the same shard. As
such, a block is appended to the shard’s subchain only if all
peers in this shard reach a consensus on the block’s validity.
On the other hand, to improve the global blockchain security,
each block of the local subchain is also validated by at least
one randomly assigned peer outside of the shard which min-
imizes collusions among the malicious peers operating in the
same shards.
The main contributions of the article are as follows.
1) We design a novel fully decentralized system architec-
ture and a sharding scheme for the blockchain with MEC
(BC-MEC) to facilitate IoT applications. The proposed
sharding scheme enhances both the system throughput
and security with a two-stage solution: a) self-organized
reputation-based shard formation to improve through-
put and security of the local shards and b) random
assignment of peers to guarantee the global blockchain
security.
2) We formulate a new consensus methods for the shards
in which the peers take a vote on the output of each
block task in their shards. The peer’s voting power is
calculated based on its reputation. The peer’s reputation
is defined according to a subjective logic model [5], [19]
by considering both the opinions submitted by the peer’s
customers and the opinions of other peers.
3) We formulate a comprehensive analytical model of the
BC-MEC system which takes into account: a) shard
structure and the subsets of randomly assigned peers;
b) parameters of the peers’ tasks; c) locations of the
peers and BSs; d) wireless channel parameters and
co-channel interference; and e) waiting time in the
processor buffers. Based on the model, we derive the
closed-form expressions of: a) exact and expected block
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11832 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
delays, i.e., the sum of processing, transmission, and ver-
ification delays for a task; b) exact and expected energy
consumption of peers, i.e., the sum of the energies con-
sumed on processing, transmitting and verifying a task;
c) orphaning probability, i.e., probability that the task
is discarded due to long block delay; and d) exact and
expected payoffs of the peers in any shard structure.
4) We model a self-organized shard formation by the peers
as a reputation-based coalitional game where coalitions
represent the subsets of players/peers managing every
shard. Unlike conventional nonreputational games in
which a coalition is determined only by its value, i.e.,
expected payoff to the players, in our game, a coali-
tion is determined by both the value and the coalitional
reputation defined by the average reputation of all play-
ers/peers validating task outputs in the respective shard.
Thus, the coalitional reputation measures the trustwor-
thiness of block confirmations in the shard.
5) We propose a novel distributed reputation-based coali-
tion formation algorithm where each peer acts inde-
pendently as a rational player aiming to select the
best shard, i.e., the coalition of peers which maximizes
both: a) peer’s payoff determined by its throughput and
b) coalitional reputation. Accordingly, each consecutive
shard structure formed as a result of such a coalition for-
mation is better (or, at least, not worse) than the previous
one in terms of the total throughput and coalitional
reputations, i.e., trustworthiness of block confirmations.
We prove that the proposed algorithm converges to
a reputation-based stable shard structure, i.e., structure
which maximizes both the payoff and coalitional repu-
tation of every player/peer without negatively affecting
all other players/peers. We also show that the algorithm
has a linear rate of convergence and polynomial time
complexity.
The remainder of the article is organized as follows. In
Section II, we review existing research on blockchains for IoT
and mobile systems, sharding systems, reputation-based coali-
tional games, and other prospective solutions. In Section III,
we present the system model of BC-MEC with sharding
for IoT applications. In Section IV, we develop the analyti-
cal model of the BC-MEC system. In Section V, we define
a reputation-based coalitional game and formulate the algo-
rithm for self-organized shard formation. In Section VI, we
evaluate the performance of the proposed algorithm and draw
conclusions in Section VII.
II. RELATED WORK
A. Blockchains for IoT and Mobile Systems
Recently, there has been a surge of interest in integrating
blockchain with IoT and mobile systems, as well as the design
of suitable consensus protocols [3]–[8]. In particular, the clas-
sical PoW and PoS algorithm which ensures optimal security
(up to 49% of malicious peers is tolerated) are not suitable
for IoT blockchains due to reduced throughput and stor-
age efficiency caused by full replication of computation and
storage—each appended block must be verified and cached
by all peers. Thus, a variety of alternative consensus meth-
ods has been proposed to support IoT/mobile applications. In
this regard, a variety of lightweight blockchain models have
been proposed (e.g., [5], [7], and [19]–[30]) with the objec-
tive to minimize the total amount of required computations
and storage. To reach this objective, peers have been sep-
arated into two groups: 1) lightweight peers that can issue
transactions and store only the block headers in their local
caches and 2) validators that can store the full blocks and
are capable of confirming transactions. The main question
arising in these models is how to select the validators so
as to satisfy the computation and storage constraints. For
example, in [20], [22], [23], [25], [27], and [28], validators
are chosen based on their resources, i.e., any peer with ade-
quate processing and caching capabilities can be a validator.
In [7] and [21], validators are peers with the highest stakes,
whereas, in [5], [19], [24], [26], [29], and [30], validators are
selected from the “trustworthy” peers. The “trustworthiness” is
determined based on either: 1) credits and certificates issued by
certain external blockchain authorities [24], [26] or 2) peers’
reputations and voting [5], [19], [29], [30].
In this way, the lightweight blockchains can reduce the total
amount of computations and storage in the system. However,
they still have several limitations which are listed as follows.
1) In [20], [22], [23], [25], [27], and [28], i.e., the first
group of works, no additional measures are taken to
secure protection against adversarial nodes during the
block verification. As a result, system security can
degrade significantly (comparing to PoW and PoS pro-
tocols) when the number of validators is small [3]. The
reason is that any validator can be malicious, as the val-
idators are selected based only on their computing and
storage resources.
2) In [7] and [21], i.e., the second group of works, the
adversaries can collude with high-stake peers to gen-
erate false results during block verification, or even to
launch double-spending attacks, which are very hard to
prevent [3], [5].
3) In [5], [19], [24], [26], [29], and [30], i.e., the third
group of works, challenges lie in determining the trust-
worthiness of the peers. In particular, in [24] and [26],
the models fully rely on the credits and certificates of
external blockchain authorities that are hard to evaluate
and trace (given the absence of other evaluation met-
rics). In [5], [19], [29], and [30], peers earn the right to
become validators, so there are incentives to retain posi-
tions they have gained by reducing the number of poten-
tial competitors, e.g., by voting out or by providing neg-
ative opinions about other validators or candidate peers
even if they are “well-behaved.” This leads to reduced
security (only up to 33% malicious peers can be toler-
ated) comparing to baseline PoW and PoS methods [3].
Besides, in many reputational models, e.g., based on
pBFT [5], [19] or Proof-of-Authority (PoA) [29], [30],
the validators run a software allowing them to add trans-
actions in blocks. The process is automated and does
not require the validators to constantly monitor their
computers. However, it requires maintaining a computer,
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11833
an authority node, uncompromised [3], [31]. In addi-
tion, PoA only allows the nonconsecutive block approval
from the same validators, i.e., the risk of serious damage
is centralized to the authority node [3], [31]. As such,
there is a single failure point, i.e., authority node, which
also threatens security. A detailed description of the
security issues in current reputation-based blockchains
can be found, e.g., in [3] and [31].
To summarize, in general, the lightweight blockchains can
increase the overall throughput and storage efficiency, but with
the compromise on security. Unlike these models, in this arti-
cle, system security is enhanced with a two-stage solution:
1) self-organized reputation-based shard formation aiming to
improve throughput and security of local shards and 2) ran-
dom assignment of peers to secure a global blockchain. More
specifically, we have the following.
1) In the first stage, both the system throughput and security
are enhanced by allowing each peer to independently
select the best shard, i.e., the coalition of peers which
maximizes both: a) peer’s expected payoff determined
by its throughput and b) peer’s coalitional reputation that
depends on reputations of the other shard members and
measures trustworthiness of block confirmations in the
shard. Hence, each consecutive shard structure formed
as a result of such a self-organized shard formation is
better (or, at least, not worse) than the previous one in
terms of the throughput and the coalitional reputations,
i.e., trustworthiness of block confirmations.
2) In the second stage, each block of a local shard is
validated by at least one randomly assigned peer out-
side of the shard with the aim to minimize collusions
among malicious peers operating in the same shards and
improve global blockchain security.
3) Unlike existing reputation-based blockchains, e.g., [5],
[19], [24], [26], [29], and [30], in our model, peers have
no incentives to provide false opinions about other peers,
as they do not compete with each other to become val-
idators (every peer is the validator of the blocks in its
shard). Instead, each peer is incentivized in providing
true opinion scores so as to select the best shard and
increase its coalitional reputation (that depends on the
reputations of all shard’s members). Such a cooperative
reputation-based approach allows achieving the coali-
tional structure that maximizes both: a) expected payoff
or, equivalently, throughput of each peer and b) coali-
tional reputations. Moreover, since the shard formation
process is fully decentralized, i.e., does not depen-
dent on the authority node, there is no single point of
failure.
B. Sharding Systems
Recent studies of sharding systems to enhance scalabil-
ity, i.e., ability to simultaneously maintain the desired levels
of throughput, storage efficiency, and security when the size
of the blockchain network increases, have been conducted
in [12]–[16]. In [12], a sharding scheme called OmniLedger
is devised based on the bias-resistant distributed randomness
generation model to sample and update subsets of peers man-
aging shards aiming to improve security. In [13], a blockchain
with static domain-based sharding is designed where peers
competitively generate PoW blocks. The top peers are selected
as validators verifying the blocks according to the pBFT
algorithm. As the composition of validators changes dynam-
ically depending on the results of PoW competition, the
system security is maintained. Forestier et al. [14] proposed
a blockchain architecture referred to as Blockclique, which
shards transactions in a block graph with multiple threads
in order to parallelize block creation, and does not rely on
the network sharding. As such, Blockclique is more simi-
lar to a traditional blockchain: every participant is randomly
selected according to a PoS consensus to record and verify
blocks of all threads. Manshaei et al. [15] analyzed the strate-
gic behaviors of peers to design the appropriate incentives to
foster cooperation among peers and prevent free-riding. The
problem is modeled as a static noncooperative game where
each peer aims to maximize its reward at a minimum cost.
It is shown that depending on the reward sharing mecha-
nism, the peer can increase its payoff by defecting unilaterally,
which leads to a social dilemma. To address this issue,
the authors formulate an incentive-compatible reward shar-
ing scheme that promotes cooperation and improves system
performance. Li et al. [16] developed a coded sharding model
called PolyShard that allows injecting the computation redun-
dancy in the unorthodox codes. Unlike the models in [12]–[15]
that are susceptible to dynamic adversaries which corrupt peers
after they have been assigned to shards, PolyShard ensures
security against erroneous results generated by both fixed and
dynamic malicious peers.
To summarize, the works in [12]–[16] presented a variety of
sharding solutions to improve scalability. Unfortunately, these
solutions are not applicable to IoT applications, since: 1) peers
are assigned to shards by the leader, i.e., central authority
node, which leads to a single failure point; 2) any randomly
assigned peer can be malicious; and 3) peers assigned to
the same shards according to a random sampling can be
located far from each other, which increases the block propa-
gation time and reduces system throughput [3]. The impact
of block propagation time on system throughput has been
studied in several prior works (e.g., [32]–[36]). In particular,
the block propagation delay can be very high in large-scale
mobile/IoT blockchains where geodistributed peers can be
connected through multihop wireless links, in which case the
throughput can drop significantly [3], [32], [37]–[39]. Thus,
unlike existing sharding schemes, in our model, both the
system throughput and security are enhanced with a two-
stage solution: 1) self-organized shard formation to improve
throughput and security inside the formed shards and 2) ran-
dom assignment of peers for the global blockchain security.
Self-organized shard formation allows a peer to independently
select the best shard, i.e., a coalition of peers that maximizes
both: a) the peer’s payoff determined by its throughput and
b) peer’s coalitional reputation which measures the trustwor-
thiness of block confirmation in the shard. Therefore, each
consecutive shard structure formed as a result of shard forma-
tion is better (or, at least, not worse) than the previous one in
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11834 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
terms of the throughput and coalitional reputations, i.e., trust-
worthiness of block confirmations. In the second stage, each
block of a local shard is validated by at least one randomly
assigned peer outside of the shard. This allows minimizing col-
lusions among malicious peers operating in the same shards
and improves global blockchain security.
C. Reputation-Based Coalitional Games and Other Solutions
A few reputation-based coalitional games have already
been analyzed in the past (e.g., in [40]–[43]). However, prior
works have several limitations. For example, with the excep-
tion of [42], they analyze the existence of a reputation-based
reward sharing mechanism which leads to a formation of a tra-
ditional stable structure. As such, these works do not suggest
any new solution concepts for the game and do not define
a coalition formation strategy for its players. On the other
hand, in [42], a search algorithm aiming is developed to find
a coalition with the maximal average reputation and payoff.
This is achieved by iteratively removing players with mini-
mal reputations from the formed coalitions. Nevertheless, the
proposed algorithm is not suitable for a distributed shard for-
mation because of the following reasons: 1) only one coalition
is formed as a result of the algorithm; 2) players with mini-
mal reputations are forced out of each formed coalition, even if
this reduces their payoffs; and 3) the algorithm is fully central-
ized. We also note that there are other methods, such as static
and dynamic clustering [44]–[47] or learning-based coalition
formation [48]–[50], that have a potential to facilitate sharding
in IoT and mobile blockchains. However, the main disadvan-
tage of such methods is that they do not provide any means to
track the reputations of peers in the system. Hence, it is hard
to measure the trustworthiness of block confirmations in the
formed shards. In addition, there are other disadvantages, e.g.,
low convergence rate and high computational and communica-
tion complexities [44], [48], [49], which make these methods
inappropriate for use in large-scale blockchains.
III. BC-MEC WITH SHARDING FOR IOT APPLICATIONS
A. Architecture and System Model
Consider the BC-MEC system for IoT applications real-
ized in the network formed by BSs equipped with MEC
servers. In the system, the IoT devices are served by the
set N = {1, . . . , N} of BC-MEC nodes or peers labeled
as P1, . . . , PN . Peers can be represented by small-cell BSs,
mobile terminals (e.g., laptops, smartphones, and tablets) or
desktop computers equipped with processors, as shown in
Fig. 1. The main functions of peers are to: 1) gather data,
e.g., sensing records, from the associated IoT devices which
are connected to one or more BC-MEC customers, i.e., users
of IoT devices; 2) process IoT data and record processing
outputs as unconfirmed transactions; 3) validate unconfirmed
transactions; and 4) store confirmed records of transactions
to control associated IoT devices. The macrocell BSs are
reserved for basic control/forwarding functions and for provid-
ing typical communication/offloading services for their cellular
customers. Macrocell BSs are labeled as BS1, . . . , BSM , with
M = {1, . . . , M} denoting the set of BSs’ labels. Every
Fig. 1. BC-MEC system with two macrocell BSs, BS1 and BS2, and 16 peers,
P3, . . . , P18, represented by the small-cell BSs, mobile terminals and desktop
computers. Each peer serves a set of IoT devices in its service range associated
with one or more BC-MEC customers.
macrocell BS is connected to other macrocell BSs via fiber
links.
In order to be registered in the system, each peer Pn, n ∈ N,
submits a digital signature for its identification and a deposit,
i.e., stake, that will be withdrawn if the peer fails to follow the
rules specified in the system, e.g., refusing to perform its BC-
MEC task. Upon registering, peer Pn is assigned with a set of
IoT devices in its service range and allotted an orthogonal full-
duplex (FD) channel of some bandwidth Bn. The bandwidth
Bn can be allocated, e.g., based on the number and/or expected
demands of the IoT devices associated with peer Pn. The peer’s
channel can be used for: 1) transmissions between peer Pn
and IoT devices and 2) forwarding the peer’s tasks to other
peers. The channels allotted to the peers may overlap with each
other and with the channels reserved for cellular customers
of the macrocell BSs. Also, note that because the number of
IoT devices is usually large, it is rather inefficient (e.g., in
terms of bandwidth costs and spectrum utilization) to assign
them with a separate spectrum [48], [49]. Instead, transmis-
sions between any peer Pn and its associated IoT devices can
be implemented (e.g., as in [48] and [49]) over the device-
to-device (D2D) [50], [51] links overlaying the uplink (UL)
bandwidth of the peer’s channel. The UL is favored because
it is underloaded compared to the downlink (DL) direction,
since most transmissions between peer Pn and other peers or
the associated macrocell BS are carried over a DL channel.
The process of mining the IoT blockchain is divided into
a number of stages, denoted as t = 0, . . . , T , during which
each subsequent block of the entire IoT blockchain is pro-
cessed and verified. The peers and IoT devices remain in the
system for an indefinitely long time, i.e., even if the duration
of their stay in the system is finite, it is unknown. Hence,
the total number of stages is T →∝. Within one stage, all
network parameters (e.g., channel quality, numbers/locations
of peers, and IoT devices) are constant, but can change as the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11835
system transits to the next stage. At every stage t, peer Pn
collects, records, and processes IoT data at its local processor
of some computing power X n in CPU cycles per second. The
processed task output represents an unconfirmed transaction
that must be distributed to and verified by other peers. If ver-
ified, the transaction is appended to a blockchain, in which
case peer Pn receives some positive reward r n > 0 that may
depend, e.g., on the number of BC-MEC customers connected
to IoT devices associated with this peer.
B. Block Mining With Sharding
In order to improve scalability, i.e., reduce the total amount
of computations, the concept of sharding [16] can be uti-
lized to verify transactions. With sharding, an entire global
blockchain can be partitioned into K subchains, each of which
forms a so-called “shard” managed by the disjoint subset of
peers, which reduces the amount of computations by a factor
of K. To scale up with the number of peers N, the number of
shards K must increase with N, i.e., K = O(N), which results
in the constant number of peers in each shard [16]. Therefore,
as the sharding system expands, it becomes more suscepti-
ble to the adversaries which compute/communicate erroneous
results to disrupt the block mining process [11]. Existing
sharding models improves security with system solutions, e.g.,
by randomly sampling and updating subsets of peers managing
shards [12]. Although such solutions can achieve near-optimal
security for cloud-based blockchains, they are not suitable for
IoT applications because: 1) peers are assigned to shards by the
leader, i.e., central authority node, which leads to a single point
of failure; 2) any randomly assigned peer can be malicious;
and 3) peers assigned to the same shards based on random
sampling can be located far from each other, which increases
the block propagation time and reduces throughput [3]. Hence,
since the output of every task in the shard is distributed to
and verified by all peers managing this shard, the task may
be orphaned, i.e., discarded, due to long transmission delay
which further reduces the throughput [11], [32], [37]–[39].
For example, in a scenario in Fig. 1, peers P6 and P9 are
located far from each other. In particular, in order to send
the task output to peer P9, peer P6 must, first, transmit this
output to BS1 via a wireless link. After receiving this out-
put, BS1 must forward it to BS2 through a fiber link. In its
turns, BS2 must forward the output to peer P9 via a wire-
less link. As such, communication between peers P6 and P9
is realized through a three-hop link, P6 − BS1, BS1 − BS2,
and BS2 − P9.
In order to guarantee security of the sharding system without
its unnecessary centralization and without reducing the system
throughput, the following approaches can be considered.
1) To facilitate a decentralized blockchain implementation,
the shards can be formed in a self-organized way so that
every peer can independently select a shard which max-
imizes its expected payoff (determined by the expected
throughput of the peer).
2) To ensure security of local shards’ subchains,
peers can be admitted to shards based on their
reputations [5], [19]. The peer’s reputation can be
determined from its trustworthiness, e.g., by the BC-
MEC customers connected to IoT devices associated
with the peer, or by the other peers managing this
shard, based on the peer’s past behavior in the system.
As such, the output of the shard’s task is added to
a block of a local shard’s subchain only if all peers in
this shard reach a consensus on its validity before the
task is orphaned. As a result, the peers must take a vote
on the output of each task in their shard.
3) To minimize collusions among malicious peers in the
same shard, each block of the local shard’s subchain can
also be verified by one or more randomly assigned peers
outside of the shard. The block is appended to a global
blockchain only if randomly assigned peers reach con-
sensus on its validity. This further enhances the global
blockchain security.
The above considerations enable a fully distributed BC-
MEC network model with minimal control over its nodes, such
as determining the maximal number of peers in a shard and
the random assignment of peers outside shards. Consequently,
at any stage t, there exists some shard structure � =
{N1, . . . , NK} ∈ � that represents a partition of set N into
K subsets of peers managing each shard, where the set �
holds all feasible shard structures. A subset Nk ∈ � contains
Nk = |Nk| ∈ [1, Nsh_ max] peers associated with the shard k,
where Nsh_ max ∈ (1, N] is a predefined maximal number of
peers that can be assigned per shard. Note that since the shards
are formed in a self-organized manner, the number of peers
in different shards may vary. As such, the set � is defined by
� =
⎧
⎪⎪⎨
⎪⎪⎩
� = {N1, . . . , NK}
∣
∣
∣
∣
∣
∣
∣
∣
Nk = |Nk| ∈
[
1, Nsh_ max
]
Nk ∩ Nj = ∅
∀k, j ∈ {1, . . . , K}⋃
k∈{1,...,K} Nk = N
⎫
⎪⎪⎬
⎪⎪⎭
. (1)
Note that by fixing the maximal number of peers assigned per
shard, we reduce the total number of computations in the BC-
MEC system by a factor of N/Nsh_ max, which scales up with
the number of peers N, since N/Nsh_ max = O(N). As such, we
can preserve the system scalability without any need for setting
and updating the number of shards K. That is, the number of
shards K depends on the peers’ decisions about the shards. The
number Nsh_ max can be defined based on considerations of the
trade-off between security and complexity of block validation
process in the shard. In particular, by increasing Nsh_ max, we
can improve security of block validations in shards, but this
comes together with the growing computational complexity.
C. Block Mining Process and Reputation of Peers
In order to be appended to a local shard’s subchain, the
output of any task in the shard must be verified by all shard’s
peers before the task is orphaned. In other words, peers in the
shard must reach a consensus on the output validity. Hence,
the peers must vote on the task output. In many IoT-blockchain
applications, the voting is based on the peers’ stakes, as in PoS
consensus [3]. As such, the peers with high stakes have higher
voting powers. However, this approach does not ensure system
security. The reason is that the peers with high stakes can be
compromised by malicious peers, i.e., attackers [5], [19]. The
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11836 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
attackers can launch voting collusion with the high-stake peers
that have greater voting power, e.g., ask them to confirm false
results. To eliminate such cases, voting must be based on some
other metrics, e.g., reputations or trustworthiness of the peers.
As such, at any stage t, the voting power of peer Pn, n ∈ Nk,
in the shard k managed by the set Nk of peers can be defined
by its normalized reputation in this shard, i.e.,
ωn(Nk|ρ) = ρn
∑
i∈Nk
ρi
∈ [0, 1] (2)
where ωn(Nk|ρ) ∈ [0, 1] is the voting power of peer Pn in
the shard k managed by the subset of peers Nk; ρ = {ρn}n∈N
are the peers’ reputations.
Note that any peer in the system can be compromised.
That is, any peer may generate a false opinion about other
peers to increase/decrease their reputation scores. Therefore,
the peers’ opinions alone cannot be used as an objective mea-
sure of the reputations of the other peers. Consequently, in
addition to the opinions of peers, the system can collect opin-
ions of parties which are not interested in falsifying their
scores, e.g., the BC-MEC customers connected to IoT devices
associated with each peer. As such, both the BC-MEC cus-
tomers and other peers can be asked to rank their experience
of interacting with the peer as a “positive” or a “negative.”
Then, the reputation ρn of peer Pn can be updated accord-
ing to a subjective logic model [5], [19]. In the model, the
opinion about peer Pn submitted by its BC-MEC customers
is represented by the tuple o0→n = (t 0→n, d 0→n, u0→n),
where t 0→n, d 0→n and u0→n define the customers’ trust, dis-
trust and uncertainty about peer Pn, respectively. Similarly,
the opinion about peer Pn submitted by another peer Pi is
the tuple oi→n = (t i→n, d i→n, u i→n), where t i→n, d i→n, and
u i→n are the trust, distrust, and uncertainty about peer Pn by
peer Pi. Note that for all i ∈ {0} ∪ N\{n}, the trust, distrust,
and uncertainty are such that t i→n + d i→n + u i→n = 1 and
t i→n, d i→n, u i→n ∈ [0, 1].
Then, given that all customers and all peers have the same
evaluation criteria for generating opinions, at the end of every
stage t, the trust and distrust can be updated according to
⎧
⎪⎨
⎪⎩
t i→n = (
1− u i→n
) χ i→n+
χ i→n+ +χ i→n−
d i→n = (
1− u i→n
) χ i→n−
χ i→n+ +χ i→n−
(3)
for all i ∈ {0}∪N\{n}, where χ i→n+ and χ i→n− are, respectively,
the total numbers of positive and negative opinions about peer
Pn submitted by its customers (for i = 0) or another peer Pi
(for i ∈ N\{n}) by the end of stage t. From (3), the reputation
ρn of peer Pn can be defined (e.g., as in [19]) by the weighted
sum of expected trusts of other peers and customers to the
peer, i.e.,
ρn = wCρ0→n + (1− wC)
∑
i∈N\{n}
ρi→n
= wCt 0→n + (1− wC)
∑
i∈N\{n}
t i→n
+ φ
⎛
⎝wCu0→n + (1− wC)
∑
i∈N\{n}
u i→n
⎞
⎠ (4)
where wC ∈ [0, 1] is the weight of customers’ opinions in the
peer’s assessment within the system that indicates how much
these opinions are valued in the peer’s reputation compared to
the opinions of peers; ρi→n = t i→n + φu i→n is the expected
trust of the peer’s customers (for i = 0) or another peer Pi (for
i ∈ N\{n}) to peer Pn; φ ∈ [0, 1] is a given constant indicating
the effect of the uncertainty on the peer’s reputation.
If the output of the task in the shard k is confirmed by the
shard’s peers before the task is orphaned, it can be appended to
a global IoT blockchain. For this, the output must be validated
by N̂k = Nsh_ max+1−Nk peers not associated with the shard
k that are assigned uniformly at random from the subset N\Nk
by the BC-MEC system. As such, in order to be appended to
a global blockchain, the task must be confirmed by N̂k+Nk =
Nsh_ max+1 peers. Let N̂k
t ∈ �̂
k
be the subset of peers which
are randomly assigned to the shard k at stage t, where �̂
k =
{N̂k|N̂k ⊆ N\Nk, |N̂k| = N̂k = Nsh_ max+1 − Nk} is a set that
comprises all possible subsets of peers which can be randomly
assigned to the shard k. To verify the task output, every peer
Pi, i ∈ N̂k
t , in the subset N̂k
t must take a vote. Similar to the
local task validation, voting is based on the peers’ reputations.
Thus, at any stage t, the voting power of peer Pi in the subset
N̂k
t , randomly assigned to the shard k can be defined as
ωi
(
N̂k
t ∪ Nk|ρ
)
= ρi
∑
n∈N̂k
t ∪Nk
ρn
∈ [0, 1]. (5)
If the task output is appended to the global IoT blockchain,
the peer which has recorded the task receives a certain positive
reward r n > 0 that may depend, e.g., on the number of BC-
MEC customers connected to IoT devices associated with this
peer. Otherwise, the peer receives no reward.
Based on the above, at any stage t, the trustworthiness of the
block confirmation in any shard k depends on trustworthiness
of all peers validating outputs of the shard’s tasks, i.e., every
peer Pn, n ∈ Nk, managing shard k and each peer Pi, i ∈ N̂k
t ,
randomly assigned to shard k. As such, the reputation of shard
k at stage t can be defined by the average reputation of peers
verifying outputs of the shard’s tasks, i.e.,
ρ
(
Nk
∣
∣N̂k
t
)
=
∑
n∈Nk
ρn +∑
i∈N̂k
t
ρi
Nsh_ max+1
∀Nk ∈ �. (6)
From (6), the expected reputation ρNk of shard k is given by
ρNk = E
{
ρ
(
Nk
∣
∣N̂k
t
)∣
∣N̂k
t
}
=
∑
n∈Nk
ρn + (
Nsh_ max+1− Nk
)
ρ̂−Nk
Nsh_ max + 1
(7)
where ρ̂−Nk is the expected reputation of the peer randomly
assigned to shard k, which is defined by the average reputation
of the peers outside of subset Nk, i.e.,
ρ̂−Nk =
∑
i∈N\Nk
ρi
N − Nk
. (8)
The expected shard’s reputation ρNk measures trustworthiness
of the block confirmation process in shard k. In particular, the
higher is the value of ρNk , the most trustworthy is the block
confirmation in the corresponding shard.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11837
IV. ANALYTICAL MODEL OF THE
BC-MEC WITH SHARDING
A. Block Delays and Energy Consumption of Peers
In order to be appended as a block of the local shard’s
subchain, data from IoT devices associated with the shard
must be collected, processed, and verified by the shard’s peers
before the block’s tasks are orphaned. The blocks in a local
shard’s subchain can be utilized to control the associated IoT
devices, and for data management and analytics inside the
shard. On the other hand, the block of a local shard’s sub-
chain is appended to the global IoT blockchain only if it is
verified by at least one additional peer, randomly assigned
to the shard. The blocks stored in a global IoT blockchain
can be used for control, data management, and analytics in
the entire BC-MEC network. As such, data gathered by peer
Pn, n ∈ N, from its associated IoT devices at the beginning
of stage t is recorded as a mining task defined by the tuple
θn
t = (θ
n(P)
t , θ
n(O)
t , θ
n(V)
t ) with following parameters: 1) pro-
cessing size θ
n(P)
t ≥ 0, i.e., the number of CPU cycles required
to process the task; 2) output size θ
n(O)
t ≥ 0, i.e., the size of
the task output in bits; and 3) verification size θ
n(V)
t ≥ 0, i.e.,
the number of CPU cycles required to verify the task output.
Without loss of generality, θn
t = (0, 0, 0), if no task has been
recorded at stage t.
Consider peer Pn that has recorded a mining task θn
t at
stage t. Upon recording the task, the peer processes it locally.
Note that the task must be processed by the peer within one
mining stage. Otherwise, the task is discarded due to orphan-
ing. Thus, at the beginning of every stage, the local processor
buffer of peer Pn is empty. Then, given that the peer prioritizes
its own tasks, i.e., processes its own tasks prior to verifying
the outputs of the tasks of other peers, the processing delay
for the task θn
t of peer Pn is given by
Dn(P)
(
θn
t
) = θ
n(P)
t /xn (9)
and the energy spent on processing the task is given by
En(P)
(
θn
t
) = ϑnθ
n(P)
t (10)
where ϑn is the energy consumption of peer Pn per CPU cycle.
If peer Pn operates in a nonsingleton shard k, i.e., Nk > 1, it
must distribute the task output to other peers in the shard, i.e.,
the peers in the subset Nk\{n} �= ∅. Otherwise, i.e., if peer Pn
belongs to a singleton shard, it must distribute the task output to
randomly assigned peers, i.e., peers in the subset N̂k
t ∈ �̂
k
. Thus,
the transmission delay for the task θn
t of peer Pn is given by
Dn(O)
(
�, �̂t, θ
n
t
)
=
∑
Nk∈�
1n∈Nkθ
n(O)
t
(
1Nk>1 min
i∈Nk\{n}
Rn,i(ln, li
)
+ 1Nk=1min
i∈N̂k
t
Rn,i(ln, li
)
)−1
(11)
where 1x = 1, if x is true and 0, otherwise; the structure
�̂t = {N̂1
t , . . . , N̂K
t } contains the subsets of peers randomly
assigned to all shards at stage t; ln ∈ R is the location of
peer Pn, where R ∈ R
2 is the service range of the BC-MEC
system, such that R = ⋃
m∈M Rm, where Rm is the coverage
area of BSm; Rn,i is the rate at which the output of the task
of peer Pn is transmitted to peer Pi that depends on locations
ln and li of peers Pn and Pi.
In particular, if peer Pi is in the transmission range of peer
Pn, the task output can be transmitted directly to peer Pi over
the DL channel of peer Pn. Otherwise, if peer Pi is not in the
transmission range of peer Pn, the output is transmitted to the
associated macrocell BS. The BS either: 1) transmits the task
output directly to peer Pi, if this peer is in its coverage area or 2)
forwards the output to the BS associated with peer Pi via fiber
link, if this peer is not in its coverage area. Thus, given that the
output is forwarded over the DL channel of peer Pn, we have
Rn,i(ln, li
) = 1li∈R(ln) Rn,i(n)
P2P + 1li /∈R(ln)
∑
m∈M
1bn=m
×
⎛
⎝Rn,m(n)
P2B +
∑
j∈M
1bi=j
(
Ri,j(n)
P2B + 1bi �=mRm,j
B2B
)
⎞
⎠
= Rn,i(n)
(
ln, li
)+ 1li /∈Rn(ln)
∑
m∈M
∑
j∈M
1bn=m,bi=j
×
(
Ri,j(n)
P2B + 1bi �=m Rm,j
B2B
)
. (12a)
In (12a), R(ln) denotes the transmission range of peer Pn that
depends on its location ln in the system; bn ∈ M indicates the
BS associated with peer Pn; Rn,i(n)
P2P is the rate of a wireless link
between peers Pn and Pi realized over the DL channel of peer
Pn; Ri,j(n)
P2B is the rate of a wireless link between peer Pi and
BSj realized over a DL channel of peer Pn; Rm,j
B2B is the rate of
a fiber link between BSm and BSj that can be estimated (e.g., as
in [52]) from fiber link parameters; Rn,i(n) is the rate at which
peer Pn transmits the output of its task to peer Pi (if peer Pi is
in the transmission range of peer Pn) or the associated BSm (if
peer Pi is beyond the transmission range of peer Pn), given by
Rn,i(n)
(
ln, li
) = 1li∈R(ln)R
n,i(n)
P2P
+ 1li /∈R(ln)
∑
m∈M
1bn=mRn,m(n)
P2B . (12b)
Assuming that the multicast transmission [53] can be used
to forward the task output over a DL channel of peer Pn, the
rates Rn,i(n)
P2P and Ri,m(n)
P2B are given by
Rn,i(n)
P2P = Bn log2
(
1+ pnGn,i(n)
∑
j∈N∪M\{n} bn,jpjGj,i(n) + σ 2
)
(13a)
and
Ri,m(n)
P2B = Bn log2
(
1+ piGi,m(n)
∑
j∈N∪M\{n} bi,jpjGj,m(n) + σ 2
)
(13b)
respectively, where bi,j ∈ {0, 1}, for all i ∈ N, j ∈ N∪M\{i},
is the band overlap factor, such that bi,j = 1, if the spectrum
allotted to peer Pn overlaps with the spectrum allotted to peer
Pj (for j ∈ N) or BSj (for j ∈M\{i}); pj is the transmit power
of peer Pj or BSj; Gj,i(n) ∈ {0, 1} is the gain of a wireless
link between peer Pj or BSj and peer Pi realized over a DL
channel of peer Pn; σ 2 is the variance of a zero-mean additive
white Gaussian noise (AWGN) power. Then, we can compute
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11838 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
the energy consumed by peer Pn on sending the output of its
task θn
t for verification. From (12a), this energy is given by
En(O)
(
�, �̂t, θ
n
t
)
=
∑
Nk∈�
1n∈Nk pnθ
n(O)
t
(
1Nk>1 min
i∈Nk\{n}
Rn,i(n)
(
ln, li
)
+ 1Nk=1 min
i∈N̂k
t
Rn,i(n)
(
ln, li
)
)−1
. (14)
Any peer Pi which has received the task output θ
n(O)
t must
validate it by utilizing its local processor. Note that the peer
processes its own task θ i
t prior to verifying the task outputs of
other peers. However, the peer does not differentiate among
the tasks of other peers. As such, the tasks of other peers have
the same priorities. Hence, the probability that the output θ
n(O)
t
is placed after the task of peer Pi is equal to the probability
that the output is placed at the end of a local processor buffer
of peer Pi. Hence, the verification delay for the task θn
t of peer
Pn in the shard k is given by
Dn(V)
(
�, �̂t, θ t
)
=
∑
Nk∈�
1n∈Nk
(
1Nk>1 max
i∈Nk\{n}
Dn,i(V)
(
Nk, �̂t, θ t
)
+ 1Nk=1 max
i∈N̂k
t
Dn,i(V)
(
Nk, �̂t, θ t
)
)
(15a)
where θ t = {θn
t }n∈N are the parameters of the tasks of peers;
Dn,i(V)(Nk, �̂t, θ t) is the verification delay for the task of peer
Pn at the local processor buffer of peer Pi, given by
Dn,i(V)
(
Nk, �̂t, θ t
)
= 1
xi
⎛
⎝θ
i(P)
t + θ
n(V)
t
+ 1
2
⎛
⎝
∑
j∈Nk\{i,n}
θ
j(V)
t +
∑
N̂r
t∈�̂t
1i∈N̂
r
t
∑
j∈Nr
θ
j(V)
t
⎞
⎠
⎞
⎠. (15b)
In the above equation, the last two terms are represented by the
sum 1Nk>2
∑
j∈Nk\{i,n} θ
j(V)
t +∑
N̂r
t∈�̂t
1i∈N̂
r
t
∑
j∈Nr
θ
j(V)
t that
takes into account both: 1) verification of tasks generated in
the shard k of peer Pi, i.e.,
∑
j∈Nk\{i,n} θ
j(V)
t and 2) verifica-
tion of tasks generated in shards to which peer Pi is assigned
randomly, i.e.,
∑
N̂r
t∈�̂t
1i∈N̂
r
t
∑
j∈Nr
θ
j(V)
t . On the other hand,
the energy spent by peer Pn on verifying the tasks of other
peers, i.e., peers in the shard k of peer Pn and peers in shards
to which peer Pn is assigned randomly, is given by
En(V)
(
�, �̂t, θ t
)
=
∑
Nk∈�
1n∈Nk
⎛
⎝
∑
i∈Nk\{n}
ϑnθ
i(V)
t
+
∑
N̂r
t∈�̂t
1n∈N̂
r
t
∑
i∈Nr
ϑnθ
i(V)
t
⎞
⎠. (16)
B. Expected Task Delays and Energy Consumption of Peers
Apparently, the total delay for the task θn
t of peer Pn given
the shard structures � and �̂t, and task parameters θ t is the
sum of processing, transmission and verification delays, i.e.,
Dn(�, �̂t, θ t
) = Dn(P)
(
θn
t
)+ Dn(O)
(
�, �̂t, θ t
)
+ Dn(V)
(
�, �̂t, θ t
)
. (17)
Note that the voting delay (or, equivalently, time on returning
the votes, i.e., verification results, to peer Pn) is negligible, as
the vote of any peer Pi verifying the task output of peer Pn
can be encoded with only one bit, e.g., “1,” if the output is
verified and “0,” otherwise. Therefore, the delay on returning
the vote, denoted as Dn(R), is such that
Dn(R)
(
�, �̂t
) =
∑
Nk∈�
1n∈Nk
(
1Nk>1 min
i∈Nk\{n}
Rn,i(ln, li
)
+ 1Nk=1min
i∈N̂k
t
Rn,i(ln, li
)
)
 Dn(O)
(
�, �̂t, θ
n
t
)
i.e., very small compared to the transmission delay Dn(O)
in (11). On the other hand, the total energy spent by peer Pn
per stage on processing and transmitting its own task θn
t and
verifying the tasks of other peers given the shard structures �
and �̂t, and task parameters θ t is given by
En(�, �̂t, θ t|	
) = En(P)
(
θn
t
)+ En(O)
(
�, �̂t, θ
n
t |	
)
+ En(V)
(
�, �̂t, θ t
)
. (18)
Then, assuming that the task parameters θ t follow the certain
probability distributions with the means θ = (θP, θO, θV), we
can obtain the closed-form expressions of the expected task
delay and expected energy consumption per stage for peer Pn
in any shard structure � ∈ �.
Proposition 1: The expected delay Dn(�) for a task of peer
Pn in the shard structure � = {N1, . . . , NK} ∈ � is a sum
Dn(�) = Dn(P) +Dn(O)(�)+Dn(V)(�) (19a)
of the expected processing delay Dn(P), expected transmission
delay Dn(O), and expected verification delay Dn(V), given by
Dn(P) = θP/xn (19b)
Dn(O)(�)
=
∑
Nk∈�
1n∈Nkθ
O
⎛
⎝1Nk>1 min
i∈Nk\{n}
Rn,i
(
ln, li
)
+ 1Nk=1
∑
N̂k⊆�̂
k mini∈N̂k Rn,i(ln, li
)
(N − 1)Nsh_ max
⎞
⎠
−1
(19c)
and
Dn(V)(�)
=
∑
Nk∈�
1n∈Nk
⎛
⎝1Nk>1 max
i∈Nk\{n}
Dn,i(V)(�|Nk)
+ 1Nk=1
∑
N̂k⊆�̂
k maxi∈N̂k
t
Dn,i(V)(�|Nk)
(N − 1)Nsh_ max
⎞
⎠
(19d)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11839
respectively, where Dn,i(V)(�|Nk) is the expected verification
delay for the tasks of peer Pn at the local processor buffer of
peer Pi in the shard k, given by
Dn,i(V)(�|Nk) = 1
xi
(
θP + θV
2
(
2+ �Nk − 2�+ + Z(�)
)
)
(19e)
for �x�+ = max{0, x}, and
Z(�) =
∑
Nr∈�
Nr(N − Nr)
Nsh_ max−Nr−1. (19f)
Proposition 2: The expected energy En(�) spent by peer
Pn per stage in the shard structure � = {N1, . . . , NK} ∈ � is
a sum
En(�) = En(P) + En(O)(�)+ En(V)(�) (20a)
of the expected energy consumed on task processing En(P),
expected energy spent on task transmission En(O) and expected
energy spend on task verification En(V), given by
En(P) = ϑnθP (20b)
En(O)(�)
=
∑
Nk∈�
1n∈Nk pnθO
(
1Nk>1 min
i∈Nk\{n}
Rn,i(n)
+ 1Nk=1
∑
N̂k⊆�̂
k mini∈N̂k Rn,i(n)
(N − 1)Nsh_ max
)−1
(20c)
and
En(V)(�) =
∑
Nk∈�
1n∈Nkϑ
nθ
V
((Nk − 1)+ Z(�)) (20d)
respectively.
The proofs of Propositions 1 and 2 are given in
Appendices A and B, respectively. These propositions present
the closed-form expressions of the expected task delay and
expected energy consumption per stage for every peer in any
possible shard structure. However, the computation of these
expressions is intractable for a large number of peers N. In
particular, since
∣
∣
∣�̂
k
∣
∣
∣ ⊆
{
N̂k|N̂k ⊆ N\{n}, N̂k =
∣
∣
∣N̂k
∣
∣
∣ = Nsh_ max
}
≤ (N − 1)!
the time complexity of estimating Dn and En is O(|�̂k|) =
O(N!). Accordingly, in Corollaries 1 and 2, we establish the
tight (i.e., least) upper bounds or suprema of expected delay
Dn and energy En which are computable in polynomial time.
Corollary 1: The expected delay Dn(�) for a task of peer
Pn in the shard structure � = {N1, . . . , NK} ∈ � is tightly
bounded from above by the value
D̃n(�) = supDn(�) = Dn(P) + D̃n(O)(�)+ D̃n(V)(�)
(21a)
where D̃n(O) is the least upper bound of expected transmission
delay Dn(O) for the task, given by
D̃n(O)(�) =
∑
Nk∈�
1n∈Nkθ
O
(
1Nk>1 min
i∈Nk\{n}
Rn,i
(
ln, li
)
+ 1Nk=1Z(1) min
i∈N\{n}R
n,i
(
ln, li
))−1
= supDn(O)(�) (21b)
and D̃n(V) is the least upper bound of expected verification
delay Dn(V) for the task, given by
D̃n(V)(�) =
∑
Nk∈�
1n∈Nk
(
1Nk>1 max
i∈Nk\{n}
Dn,i(V)(�|Nk)
+ 1Nk=1Z(1) max
i∈N\{n}
Dn,i(V)(�|Nk)
)
= supDn(V)(�) (21c)
with Z(x) given by
Z(x) = 1
(N − x)Nsh_ max+1−x
(
N − x
Nsh_ max+1−x
)
. (21d)
Corollary 2: The expected energy En(�) spent by peer Pn
per stage in the shard structure � = {N1, . . . , NK} ∈ � is
tightly bounded from above by the value
Ẽn(�) = sup En(�) = En(P) + Ẽn(O)(�)+ En(V)(�)
(22a)
where Ẽn(O)(�) is the least upper bound of expected energy
En(O) spent on task transmission, given by
Ẽn(O)(�) =
∑
Nk∈�
1n∈Nk pnθO
(
1Nk>1 min
i∈Nk\{n}
Rn,i(n)
+ 1Nk=1Z(1) min
i∈N\{n}R
n,i(n)
)−1
= sup En(O)(�). (22b)
The proofs of Corollaries 1 and 2 are given in Appendices C
and D, respectively. These corollaries present the least upper
bounds D̃n and Ẽn of the expected task delay and expected
energy consumption per stage for peer Pn in any shard structure
� ∈ �. Unlike the exact expected values Dn and En, their least
upper bounds can be estimated in polynomial time, since the
worst case complexity of computing D̃n and Ẽn is O(NK).
V. SELF-ORGANIZED SHARD FORMATION BY PEERS
A. Expected Rewards and Payoffs of the Peers
From the expressions of the expected delay Dn and its least
upper bound D̃n in (19a) and (21a), peer Pn can estimate the
probability of orphaning Pn
O(�) for its tasks, i.e., probability
that the peer’s task is discarded due to long delay, in any shard
structure � ∈ �. In particular, according to [36], [54], we have
Pn
O(�) = 1− e−Dn(�)/
t ≤ P̃n
O(�) = supPn
O(�)
= 1− e−D̃n(�)/
t (23)
where 
t is the expected block interval time or stage duration;
P̃n
O is the least upper bound or supremum of Pn
O. Note that if
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11840 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
all peers in the system were faithful, i.e., if NF = N, where
NF is a subset of faithful peers, both the expected throughput
T n
F (�) and expected reward Rn
F (�) of peer Pn would depend
only on the orphaning probability Pn
O(�) in a shard structure
� ∈ �. In particular, the expected throughput T n
F (�), i.e., the
number of transactions of peer Pn verified per time unit, and its
greatest lower bound or infimum T̃ n
F (�) would take the form
T n
F (�) = (
1− Pn
O(�)
)
/
t ≥ T̃ n
F (�)
= inf T n
F (�) = (
1− P̃n
O(�)
)
/
t. (24a)
The expected reward Rn
F (�) is simply the product of expected
throughput T n
F (�), block reward rn and block interval time
t [36], [54]. Hence, we have
Rn
F (�) = T n
F (�)rn
t = (
1− Pn
O(�)
)
r n ≥ R̃n
F (�)
= infRn
F (�) = T̃ n
F (�)r n
t = (
1− P̃n
O(�)
)
r n
(24b)
where R̃n
F (�) is the greatest lower bound or infimum of
Rn
F (�).
In general, however, we have NF ⊆ N, i.e., any subset NM
= N\NF of peers in the system can be malicious. The goal of
malicious peers is to disrupt the process of block mining and
minimize rewards of faithful peers by deliberately computing
and communicating incorrect results. More specifically, if the
faithful peer Pn, n ∈ NF , transmits the correct task output to
a malicious peer, the output may be not verified, in which case
peer Pn does not receive a reward. Thus, both the throughput
and the reward of peer Pn in shard k depend on faithfulness of
peers verifying its task output, i.e., peers in shard k and peers
that are randomly assigned to shard k. As such, at any stage t,
given a subset NF , the expected throughput T n(�|NF , �̂t, ρ)
and expected reward Rn(�|NF , �̂t, ρ) of peer Pn in the shard
structure � ∈ � for a given structure �̂t of randomly assigned
peers and peers’ reputations ρ, take the forms
T n(�|NF , �̂t, ρ
)
= T n
F (�)
∑
Nk∈�
1n∈Nk
×
⎛
⎝
∑
i∈Nk\{n}
1i∈NF Pr{i ∈ NF}ωi(Nk|ρ)
+
∑
i∈N̂k
t
1i∈NF Pr{i ∈ NF }ωi
(
N̂k
t ∪ Nk|ρ
)
⎞
⎠ (25a)
and
Rn(�|NF , �̂t, ρ
) = T n(�|NF , �̂t, ρ
)
r n
t (25b)
respectively, where Pr{i ∈ NF } is the probability that peer Pi
is faithful.
Unfortunately, no faithful peer Pn knows if another peer Pi is
faithful, i.e., if i ∈ NF . That is, no peer Pn can directly estimate
its expected throughput T n(�|NF , �̂t, ρ) and expected reward
Rn(�|NF , �̂t, ρ) from (25a) and (25b). As such, the peer
can only rely on its own experience of interacting with peer
Pi, as well as on reputation scores submitted by BC-MEC
customers of peer Pi and the other peers, to construct its estimate
Bn→i = Prn{i ∈ NF } ∈ [0, 1] of the probability that peer Pi
is faithful. The estimate Bn→i which, essentially, represents
the “belief” of peer Pn in faithfulness of another peer Pi can
be updated with a subjective logic model [5], [19], as
Bn→i = Prn{i ∈ NF }
= (
1− wn
O
)
⎛
⎝wn
Cρ0→i + (
1− wn
C
) ∑
j∈N\{n,i}
ρj→i
⎞
⎠
+ wn
Oρn→i. (26)
In (26), wn
O ∈ [0, 1] is the weight of the opinion of peer Pn in
its assessment of another peer which indicates how much the
peer’s own opinion is valued compared to other opinions; wn
C ∈
[0, 1] is the weight of the opinion of the peer’s customer(s) in
the assessment of peer Pn. As such, the greater is the weight
wn
O, the more is the peer’s own opinion is valued; the greater
is the weight wn
C , the more is the customers’ opinion is valued
in the peer’s assessment.
Based on beliefs Bn = {Bn→i}i∈N\{n} ∈ [0, 1]N−1 of
peer Pn in faithfulness of other peers updated according
to (26), peer Pn can estimate its own expected throughput
T n(�|Bn, �̂t, ρ) and expected reward Rn(�|Bn, �̂t, ρ) in
the shard structure � ∈ � given a structure �̂t of randomly
assigned peers and the peers’ reputations ρ. In particular, from
(25a) and (25b), we have
T n(�|Bn, �̂t, ρ
) = T n
F (�)
∑
Nk∈�
1n∈Nk
×
⎛
⎝
∑
i∈Nk\{n}
Bn→iωi(Nk|ρ)
+
∑
i∈N̂k
t
Bn→iωi
(
N̂k
t ∪ Nk|ρ
)
⎞
⎠
(27a)
and
Rn(�|Bn, �̂t, ρ
) = T n(�|Bn, �̂t, ρ
)
rn
t. (27b)
Then, the value Vn(�|Bn, ρ), i.e., expected payoff of peer
Pn in the shard structure � ∈ � given its beliefs Bn→i and
peers’ reputations ρ is the difference between its expected
reward and expected cost. That is
Vn(�|Bn, ρ
) = Rn(�|Bn, ρ
)−ϕnEn(�)
= T n(�|Bn, ρ
)
rn
t−ϕnEn(�)
= E
{
T n(�|Bn, �̂t, ρ
)|�,Bn, ρ
}
r n
t − ϕnEn(�)
= E
{
Rn(�|Bn, �̂t, ρ
)|�,Bn, ρ
}− ϕnEn(�) (28)
where T n(�|Bn, ρ) = E{T n(�|Bn, �̂t, ρ)|�,Bn, ρ}
is expected throughput and Rn(�|Bn, ρ) =
E{Rn(�|Bn, �̂t, ρ)|�,Bn, ρ} is expected reward of peer Pn
in the shard structure � ∈ � given its beliefs Bn
t and the
peer’s reputations ρ; ϕn is the cost per energy unit for peer
Pn. Note that in order to estimate its value Vn(�|Bn, ρ)
in (28), the peer should be able to compute the expectation
E{Rn(�|Bn, �̂t, ρ)|�,Bn, ρ}. Thus, we must obtain the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11841
closed-form expression of this expectation leading to the
value Vn(�|Bn, ρ), which we do in Proposition 3.
Proposition 3: The value or expected reward Vn(�|Bn, 	)
of peer Pn in the shard structure � = {N1, . . . , NK} ∈ � given
the beliefs Bn and reputations ρ, is expressed by
Vn(�|Bn, ρ
)
= Rn
F (�)
∑
Nk∈�
1n∈Nk
⎛
⎝
∑
i∈Nk\{n}
Bn→iωi(Nk|ρ)
+
∑
N̂k⊆�̂
k
∑
i∈N̂k Bn→iωi
(
N̂k
t ∪ Nk|ρ
)
(N − Nk)
Nsh_ max+1−Nk
)
− ϕnEn(�). (29)
The proof of Proposition 3 is provided in Appendix E,
in the supplementary material. This proposition presents the
closed-form expressions of the value of peer Pn in any shard
structure � ∈ � given the beliefs Bn and reputations ρ.
Unfortunately, the computation of this value is intractable
for large N, because the complexity of estimating Rn
F and
∑
N̂k⊆�̂
k
∑
i∈N̂k Bn→iωi(N̂k
t ∪ Nk|ρ) is O(|�̂k|) = O(N!).
Thus, in Corollary 3, we provide the tight (i.e., greatest) lower
bound or infimum of the value Vn which can be computed in
polynomial time.
Corollary 3: The value or expected payoff Vn(�|Bn, 	) of
peer Pn in the shard structure � = {N1, . . . , NK} ∈ � given
the belief Bn and reputations ρ, is tightly bounded from below
by the value
Ṽn(�|Bn, ρ
) = infVn(�|Bn, ρ
)
= R̃n
F (�)
∑
Nk∈�
1n∈Nk
⎛
⎝
∑
i∈Nk\{n}
Bn→iωi(Nk|ρ)
+ (
Nsh_ max+1− Nk
)
Z(Nk) min
i∈N\Nk
× Bn→iωi
(
N̂k
t ∪ Nk|ρ
)
⎞
⎠−ϕnẼn(�).
(30)
The proof of Corollary 3 is presented in Appendix F, in the
supplementary material. This corollary establishes the greatest
lower bound Ṽn(�|Bn, ρ) of the value of peer Pn in any shard
structure � ∈ � given the belief Bn and reputations ρ. Unlike
the exact value Vn, this bound can be estimated in polynomial
time, since the worst case time complexity of computing R̃n
F
and the sum
∑
Nk∈�
1n∈Nk
⎛
⎝
∑
i∈Nk\{n}
Bn→iωi(Nk|ρ)+ (
Nsh_ max+1− Nk
)
× Z(Nk) min
i∈N\Nk
Bn→iωi
(
N̂k
t ∪ Nk|ρ
)
⎞
⎠
is O(NK). Thus, to presume the tractability of computations
in the BC-MEC, we assume that each peer Pn estimates its
value Vn based on the greatest lower bounds in (30).
B. Reputation-Based Coalitional Game for Shard Formation
In order to enable a distributed implementation of the BC-
MEC system, shards should be formed in a self-organized way,
so that the peers can select their shards independently. In this
section, we introduce a reputation-based coalition formation
game to model the process of self-organized shard forma-
tion. In the game, the subsets of peers operating in the same
shards are regarded as coalitions. The proposed game can be
defined as follows.
Definition 1 (Reputation-Based Coalition Formation Game):
A reputation-based coalition formation game is the game defined
bythe tuple� = (N,�, ρn,Bn,Vn) thatcomprises thefollowing
elements: 1) a set of peers or players N; 2) a finite space �
of feasible coalitional structures defined in (1), where each
structure � = {N1, . . . , NK} ∈ � is a partition of set N into
K ≥ 1 coalitions, with coalition Nk ∈ � representing a subset
of players/peers managing shard k and, for each player/peer
Pn; 3) the peer’s individual reputation ρn defined in (4); 4) the
peer’s belief Bnin faithfulness of other peers defined in (26);
and 5) the peer’s value Vn(�|Bn, ρ) in the structure � ∈ �
given its belief Bn and reputations ρ of all peers defined by the
lowest bound of its expected payoff in (30).
Recall that in the conventional (nonreputational) coalitional
games, players care only about their own values, i.e., expected
payoffs. Therefore, in any structure �, each player/peer Pn will
select such coalition Nk ∈ � which can maximize the player’s
value Vn while not hurting the other members of this coalition
[re]. As such, the goal of coalition formation in conventional
games is to reach a stable structure, as defined as follows.
Definition 2 (Stable Structure): A structure � ∈ � is
a stable structure of game � = (N,�, ρn,Bn,Vn) if and
only if there is no other structure �́ ∈ �\{�}, such that
∃Ńk ∈ �́, ∃n ∈ Ńk:
Vn
(
�́|Bn, ρ
)
> Vn(�|Bn, ρ
)
V i
(
�́|Bi, ρ
)
≥ V i(�|Bi, ρ
) ∀i ∈ Ńk\{n}. (31)
In other words, a structure is stable if and only if there is no
other structure that can increase the value of at least one player
without reducing the values of other members of its coalition.
Unlike conventional games, in the reputation-based coalitional
game, coalitions are not only characterized by their values to
different players but also by the coalitional reputations [42]. In
particular, in our game, the reputation of coalition Nk ∈ � is
represented by the expected reputation ρNk of a corresponding
shard k defined in (7). That is, the coalitional reputation ρNk
measures trustworthiness of the block confirmation process in
shard k. Accordingly, in any structure �, each player/peer Pn
is characterized not only by its individual reputation ρn but
also by its coalitional reputation, given by
ρ̃n(�) =
∑
Nk∈�
1n∈Nk ρNk . (32)
Note that unlike the individual reputation ρn that is defined
by opinion scores about the overall performance of peer Pn
in the game (possibly, in different shards), coalitional reputa-
tion ρ̃n depends on the reputations of all peers verifying task
outputs in the shard managed by peer Pn. As a result, in any
structure �, player/peer Pn will select such coalition Nk ∈ �
which can maximize both the player’s value Vn and coalitional
reputation ρ̃n without hurting other members of this coalition.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11842 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
Hence, the goal of coalition formation in a reputation-based
game is to reach a so-called “reputation-based” stable structure
defined below.
Definition 3 (Reputation-Based Stable Structure): A struc-
ture � ∈ � is the reputation-based stable structure of game
� = (N,�, ρn,Bn,Vn) if and only if there is no other struc-
ture �́ ∈ �\{�}, such that ∃Ńk ∈ �́, ∃n ∈ Ńk ∀i ∈
Ńk\{n}:
Vn
(
�́|Bn, ρ
)
> Vn(�|Bn, ρ
)
, ρ̃n
(
�́
)
= ρŃk ≥ ρ̃n(�)
V i
(
�́|Bi, ρ
)
≥ V i(�|Bi, ρ
)
and ρ̃i
(
�́
)
= ρŃk ≥ ρ̃i(�)
(33a)
or
Vn
(
�́|Bn, ρ
)
≥ Vn(�|Bn, ρ
)
, ρ̃n
(
�́
)
= ρŃk > ρ̃n(�)
V i
(
�́|Bi, ρ
)
≥ V i(�|Bi, ρ
)
and ρ̃i
(
�́
)
= ρŃk ≥ ρ̃i(�).
(33b)
In other words, a structure is a reputation-based stable struc-
ture if and only if there is no other structure that can increase
the value or coalitional reputation of at least one player without
reducing values and coalitional reputations of other members
of the player’s coalition.
Proposition 4: Game � = (N,�, ρn,Bn,Vn) admits at least
one reputation-based stable structure � ∈ �.
The proof of Proposition 4 is provided in Appendix G,
in the supplementary material. From Proposition 4, there
exists at least one reputation-based stable structure � ∈ �.
Unfortunately, an exhaustive search of this structure is non-
deterministic polynomial time (NP) complete because the
computational complexity of this search is at least the com-
plexity of the search of a stable structure, which is known
to be an NP-complete problem [42]. Hence, in the next sec-
tion, we propose a distributed coalition formation algorithm
that allows all players/peers to reach a reputation-based sta-
ble structure � by following a simple protocol. If some
player/peer Pn refuses to follow the protocol, its stake is with-
drawn from the player, and the player is removed from the
system.
C. Distributed Reputation-Based Coalition Formation
The proposed coalition formation algorithm is realized at
every stage t of the mining process assuming that at any stage,
there exists some shard structure � ∈ �. To track the changes
in the structure � and determine if this structure is stable,
we utilize a variable 
� and a subset of “visited” players
NV ⊆ N, where 
� shows the number of modifications in
the structure from the moment when NV = ∅. A variable and
a subset are initialized as 
�← 0 and NV ← ∅, respectively,
at the start of the algorithm (i.e., at t = 0) and each time
when all players in the set N are visited, i.e., if NV = N.
Any player can propose the changes to the current structure
� = {N1, . . . , NK} ∈ �. In particular, at the beginning of
every stage t, if NV = N and 
� = 0, i.e., all players in the set
N are visited, but there are no changes in the structure from the
moment when NV = ∅, the algorithm terminates. Otherwise,
if NV = N and 
�>0, we set 
� ← 0 and NV ← ∅,
so that N\NV �= ∅. After this, we randomly choose one of
nonvisited players from the subset N\NV to make a proposal
to join a new coalition Nj ∈ �\{Nk}, where Nk ∈ � is the
current player’s coalition. If player/peer Pn is chosen, it is
labeled as “visited” and the subset NV is updated as NV ←
NV ∪ {n}.
If chosen, player/peer Pn can only select such coalition Nj
that can maximize both the player’s value Vn and coalitional
reputation ρ̃n without hurting other members of coalition Nj.
The player determines this coalition by solving the following
bicriteria optimization problem:
arg max
Nj∈�n
k(f )
(
Vn
(
�n
k→j|Bn, ρ
)
, ρ̃n
(
�n
k→j
))
(34)
where �n
k→j ∈ � is the structure derived from the current one
by moving peer Pn from its coalition Nk ∈ � into coalition
Nj ∈ �, given by
�n
k→j =
{
Ńr
∣
∣
∣ Ńk = Nk\{n}, Ńj = Nj ∪ {n}, Ńi = Ni
∀i /∈ {k, j}
}
(35)
�n
k(f ) ⊆ � is the subset of feasible coalitions in the structure
�, i.e., coalitions that can accept peer Pn without reducing
the values and coalitional reputations of their members, given
by
�n
k(f ) =
⎧
⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
Nj ∈
�\{Nk}
∣
∣
∣
∣
∣
∣
∣
∣
∣
∣
ρ̃i
(
�n
k→j
)
= ρNj∪{n}
≥ ρ̃i(�) = ρNj ,
V i
(
�n
k→j
∣
∣
∣ Bi, ρ
)
≥ V i
(
�
∣
∣ Bi, ρ
)
∀i ∈ Nj
⎫
⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎭
. (36)
If �n
k(f ) �= ∅, there is at least one coalition Nj ∈ �\{Nk}
that satisfies (34). In this case, peer Pn joins coalition Nj if
either
Vn
(
�n
k→j
∣
∣
∣ Bn, ρ
)
> Vn(�
∣
∣ Bn, ρ
)
ρ̃i
(
�n
k→j
)
≥ ρ̃i(�) (37)
or
Vn
(
�n
k→j
∣
∣
∣ Bn, ρ
)
≥ Vn(�
∣
∣ Bn, ρ
)
ρ̃i
(
�n
k→j
)
> ρ̃i(�). (38)
If there are several coalitions which satisfy (34), peer Pn
selects among them randomly. Otherwise, if �n
k(f ) = ∅, or
Vn
(
�n
k→j
∣
∣
∣ Bn, ρ
)
≤ Vn(�
∣
∣ Bn, ρ
)
ρ̃i
(
�n
k→j
)
≤ ρ̃i(�) (39)
peer Pn remains in its old coalition Nk. If peer Pn moves into
coalition Nj, a modified structure �← �n
k→j is formed at the
end of stage t, and a variable 
� is updated as 
�← 
�+1.
Otherwise, if peer Pn remains in coalition Nk, the structure �
does not change.
The above algorithm is repeated at each mining stage t until
it converges to some final stable structure � ∈ �. Note that the
structure � ∈ � is considered stable if it remains unchanged
after all players in the set N are visited, i.e., if NV = N
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11843
and 
� = 0. In other words, the algorithm terminates if the
structure does not change after N stages from the moment
when NV = ∅. Proposition 5 below verifies that this algorithm
converges to a reputation-based stable structure.
Proposition 5: With probability one, the proposed coalition
formation algorithm converges to the reputation-based stable
structure � ∈ � of game � = (N,�, ρn,Bn,Vn).
The proof of Proposition 5 is provided in Appendix H, in
the supplementary material. Next, Proposition 6 below estab-
lishes the computational complexity and convergence rate of
the proposed algorithm.
Proposition 6: The proposed coalition formation algorithm
has the worst case time complexity of O(N3) and convergence
rate is equal to ‖xi+1−x‖ = O(‖xi−x‖), where xi = (Vi, ρ̃i)
= ({Vn
i }n∈N, {ρ̃n
i }n∈N) are the players’ values and coalitional
reputations after every ith algorithm iteration; x = (V, ρ̃) =
({Vn}n∈N, {ρ̃n}n∈N) are the values and coalitional reputations
of players in a reputation-based stable structure � ∈ � of
game � = (N,�, ρn,Bn,Vn).
The proof of Proposition 6 is provided in Appendix I, in
the supplementary material. From Proposition 6, the proposed
algorithm has a polynomial worst case complexity and a near-
linear rate of convergence.
D. Theoretical Performance of Self-Organized Sharding
We now conduct the theoretical analysis of the performance
of the proposed self-organized sharding model in terms of the
system security and throughput, i.e., the number of transactions
validated per time unit. We start by analyzing the local shard
security and global blockchain security of our sharding model.
In particular, based on common blockchain security definitions
(e.g., [3] and [10]), we say that the for some given number
NM of malicious peers in the shard, the local shard security
is ensured if both of the following conditions are satisfied:
1) all correct task outputs are accepted by the shard’s
members and appended to a local shard’s subchain;
2) all incorrect outputs are rejected by the shard’s members.
When the number of malicious peers in the shard does not
exceed NM. Similarly, given up to NM malicious peers in the
sharding system, the global blockchain security is guaranteed
if both of the following conditions are satisfied:
1) all correct task outputs are accepted by the shard’s mem-
bers and randomly assigned peers, and appended to the
global blockchain;
2) all incorrect outputs are rejected by the shard’s members
and randomly assigned peers.
Proposition 7: For any wC > 0 and φ > 0.5, given that the
total number of malicious peers in the BC-MEC system does
not exceed �N/2� or 50% of peers, a self-organized sharding
model provides local shard security for up to �Nk/2� malicious
peers in each shard k and global blockchain security for up to
Nk − �(Nsh_ max + 1)/2� malicious peers in every shard k.
The proof of Proposition 7 is provided in Appendix J, in
the supplementary material. From Proposition 7, we obtain
Corollary 4 that provides the optimal value of the maximal
number of peers per shard, Nsh_ max, i.e., the value that guar-
antees security against the maximal number of malicious peers.
Corollary 4: For any wC > 0 and φ > 0.5, given that
the total number of malicious peers in the BC-MEC system
does not exceed �N/2� or 50% of peers, in a self-organized
sharding model, the global blockchain security is optimal for
Nsh_ max = maxNk∈� Nk . In this case, the model ensures pro-
tection against the maximal number of malicious peers—it
tolerate up to
N − K
⌈(
max
Nk∈�
Nk + 1
)
/2
⌉
=
⎧
⎪⎪⎨
⎪⎪⎩
⌊N−K
2
⌋
, max
Nk∈�
Nk = min
Nk∈�
Nk = N/K
⌊
N
2
(
1−
min
Nk∈�
Nk
max
Nk∈�
Nk
)⌋
, max
Nk∈�
Nk> min
Nk∈�
Nk
malicious peers in the entire BC-MEC system.
The proof of Corollary 4 is provided in Appendix K,
in the supplementary material. From Corollary 4, the
global blockchain security of our proposed self-organized
sharding model with wC > 0 and φ > 0.5 can
be optimized if the maximal number of peers in every
shard is adjusted dynamically, i.e., based on the cur-
rent shard structure, as Nsh_ max = maxNk∈� Nk . In
this case, the entire BC-MEC system tolerates up to
�(N − K)/2� malicious peers if all the formed shards have
the same size maxNk∈� Nk = minNk∈� Nk = N/K, and up
to �N(1−minNk∈� Nk /maxNk∈� Nk )/2� malicious peers if
the shards have different sizes, i.e., maxNk∈� Nk>minNk∈� Nk.
Moreover, when all shards have the same size, the global
blockchain security improves when the number of shards
reduces. In particular, the system tolerates:
1) up to �N/3� malicious peers (or 33% of all peers) for
K = N/3 (i.e., 3 peers in each formed shard);
2) up to �9N/20� malicious peers (or 45% of all peers) for
K = N/10 (i.e., 10 peers in each shard);
3) up to �(N − 1)/2� malicious peers (or slightly less than
50% of all peers) for K = 1 (i.e., all peers form one
shard).
When the size of the shards in the system varies,
the global blockchain security improves when the ratio
minNk∈� Nk /maxNk∈� Nk of the minimal to the maximal
shard sizes reduces. That is, the system tolerates:
1) up to �N/3� or 33% malicious peers for
minNk∈� Nk /maxNk∈� Nk = 1/3;
2) up to �9N/20� or 45% malicious peers for
minNk∈� Nk /maxNk∈� Nk = 1/10;
3) up to �(N − 1)/2� or slightly less than 50% malicious
peers for minNk∈� Nk /maxNk∈� Nk = 1/N (i.e., all
peers form one shard).
Accordingly, our self-organized sharding model can provide
enhanced security comparing with lightweight blockchains and
other sharding techniques. In particular, with the exception of
PolyShard (Lagrange polynomial-based coded sharding), most
sharding schemes, e.g., OmniLedger [12], static domain-based
sharding [13], and Blockclique [14], tolerate only one adver-
sarial peer in each shard, i.e., up to K malicious nodes in
the system. PolyShard tolerates up to �(N − K)/2K� adver-
saries per shard and �(N − K)/2� malicious peers in the
system [16] which is comparable to security guarantees of
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11844 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
our model. On the other hand, the lightweight blockchains,
including reputation-based systems utilizing PoA [29], [30]
or pBFT [5], [19], can tolerate only up to �N/3� or 33%
adversaries in best-case scenarios.
Next, in Proposition 8, we show that after converging to
a reputation-based stable structure � ∈ �, the proposed self-
organized sharding model can achieve the maximal blockchain
throughput subject to the security guarantees in Proposition 7
and Corollary 4.
Proposition 8: After converging to a reputation-based stable
structure � ∈ �, a self-organized sharding model achieves the
maximal system throughput. In particular
∑
n∈N
T n(�
∣
∣ Bn, ρ
) ≥
∑
n∈N
T n
(
�́
∣
∣
∣ Bn, ρ
)
∀�́ ∈ �\{�}
i.e., the aggregated throughput of peers in any shard structure
�́ ∈ �\{�} different from � is less than or equal to that in
the reputation-based stable structure �.
The proof of Proposition 8 is provided in Appendix L, in the
supplementary material. From Proposition 8, there is no shard
structure that can achieve the higher blockchain throughput
than the reputation-based stable structure. Consequently, after
converging to a reputation-based stable structure, our proposed
sharding model can maximize the system throughput without
compromising on security, i.e., subject to security guarantees
established in Proposition 7 and Corollary 4. As a result, based
on our analytical evaluation, this model is able to improve
performance of existing sharding schemes in terms of both
the throughput and the security (note that the storage efficiency
of our model is the same as in other sharding schemes). To
verify the theoretical claims of this work, in the next section,
we provide a numerical evaluation of the performance of the
proposed sharding model.
VI. NUMERICAL PERFORMANCE EVALUATION
A. Simulation Model and Settings
A simulation model of the BC-MEC with sharding has been
developed by using the OPNET package [55]. Comparing
with other popular network simulators, such as Omnet [56]
or NS2 [57], OPNET provides a more realistic and reliable
simulation environment in all network types, as well as pre-
built models of all standard wireless and wireline protocols,
and network devices (e.g., servers, BSs, routers, switches,
IoT devices, etc.) with easily reprogrammable interfaces [58].
The MEC network model has been implemented upon
the long-term evolution—advanced (LTE-A) time division
duplex (TDD) platform [59]. The MEC network comprises
M = 3 BSs represented by macrocell LTE-A evolved Node
Bs (eNBs) placed as shown in Fig. 2, each of which operates
on the separate spectrum with the bandwidth 20 MHz. The
macrocell eNBs are interconnected by the ITU-T G.657 brand
B fiber (designated for the use in access networks, such as
our LTE-A based MEC, in proximity to end-users [60]) with
the capacity 20 wavelengths. The number of wavelengths is
selected to support dedicated simultaneously fast forwarding
of task outputs from up to 20 peers (one wavelength to for-
ward the output of each peer). The peers are represented by
Fig. 2. Simulation model of the BC-MEC with three BSs, i.e., macrocell
eNBs, and 20 peers, i.e., small-cell eNBs. The locations of BSs are fixed
during all simulation runs, as shown in the figure. All numerical results are
collected and averaged for three simulation runs with the randomized locations
of peers. In particular, at the beginning of each simulation run, a peer is placed
randomly inside the service area of the MEC network. The peer’s location
remains fixed during one simulation run, but can be changed at the beginning
of the next run.
small-cell eNBs placed randomly in the service area of the
MEC network. Each peer Pn is allotted with the bandwidth
Bn = 2.5 MHz that can be used by the peer to communicate
with its IoT devices, the macrocell eNBs, and the other peers.
Each peer serves 100 IoT devices represented by the typi-
cal temperature, smoke, image, and motion detector sensors
simulated with the common parameters (listed, e.g., in [61]).
The number of IoT devices connected to a peer is chosen to
comply with bandwidth requirements of a typical IoT device
(described, e.g., in [61]). To simplify our further performance
evaluation, the IoT devices connected to the same peer are
assumed to be associated with a single BC-MEC customer.
All parameters related to the LTE-A model are set in accor-
dance with the LTE-A 3rd Generation Partnership Project
(3GPP) specifications [59]. For example, the values of trans-
mit powers and cell radiuses of eNBs are the same as the
standard values defined in [59], i.e., 42 dBm and 3000 m (for
a macrocell eNB) and 23 dBm and 500 m (for a small-cell
eNB). The wireless channel parameters, e.g., antenna gain,
path loss, and noise and shadowing, are also based on the
3GPP specifications [59].
Similar to prior works on mobile/IoT blockchains (e.g., [49],
[62] and [63]), we assume that: 1) the parameters of the mining
tasks recorded by peers follow a Poisson distribution with the
means θ = (θP, θO, θV) = (1-G CPU cycle [Gc], 1 kb, 0.5 Gc)
and 2) task interarrival times are distributed exponentially with
the mean of 5 min. As such, the expected block interval time
or stage duration (which is equal to the mean task interarrival
time) is 
t = 5 min. Each peer Pn, i.e., small-cell eNB, is
equipped with 7150N Dual Core Xeon server processor [64]
of the computing power xn = 3.5 Gc/s, 16-MB L2 Cache and
the power consumption 150 W, i.e., the energy spent per CPU
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11845
cycle by the peer is ϑn = 150/(3.5× 109) = 42.8 nJ. All the
payments made in the system are counted in units of a digital
currency, i.e., bitcoin. Assuming that the peer pays a minimal
possible cost, i.e., 1 bitcoin, for each kJ of energy, the cost
per energy unit of peer Pn is set as ϕn = 10−3. Next, noting
that rn > ϕn
t(ϑnxn + pnθO), i.e., the block reward rn of
peer Pn must be significantly higher than the expected energy
costs ϕn
t(ϑnxn+ pnθO) of the peer (otherwise, the peer has
no incentives to participate in the block mining), the peer’s
reward is set equal to rn = 500 > ϕn
t(ϑnxn+ pnθO) = 105.
All reputation-related parameters are similar to those in the
prior reputation-based systems, e.g., [5] and [19]. In partic-
ular, we set φ = 0.6 and wC = 0.5; uncertainties ui→n, i ∈
{0}∪N\{n}, are modeled according to a standard normal distri-
bution; weights wn
C and wn
O follow Poisson distributions with
means 0.5.
By default, the total number of peers is N = 20, the number
of malicious peers is NM = 6 or 30% of all peers; the max-
imal number of peers per shard is Nsh_ max = maxNk∈� Nk,
i.e., equal to the optimal number (see Corollary 4). All
simulation results are collected and averaged for three sim-
ulation runs with the randomized peers’ locations. At the
beginning of a simulation run, each peer is placed randomly
inside the service area of the MEC network. The peer’s loca-
tion remains fixed during one simulation run but can be
changed at the beginning of the next run. The remainder
of this section is organized as follows. In Section VI-B, we
analyze the performance of our self-organized shard forma-
tion model to validate theoretical claims in Propositions 6–8
and Corollary 4. In Section VI-C, we compare our model
with state-of-the-art sharding schemes and a reputation-based
lightweight blockchain.
B. Performance of the Self-Organized Sharding Model
Recall that the goal of our work is to enhance the over-
all throughput and security of the BC-MEC system through
self-organized reputation-based shard formation. Therefore, in
the following, we evaluate our proposed sharding model in
terms of its throughput, i.e., the number of transactions veri-
fied per time unit, and security, i.e., the number of malicious
peers the system can tolerate. For this, let us, first, analyze
the performance of our self-organized shard/ coalition forma-
tion algorithm during the first 50 stages starting from t = 0
and until convergence to a reputation-based stable structure
� ∈ � at t = 50. The main objectives here is to show that
each consecutive shard structure formed as a result of the algo-
rithm is better (or, at least, not worse) that the previous one in
terms of the peers values, i.e., expected payoffs, and coalitional
reputations which measure the trustworthiness of block con-
firmations inside formed shards. As such, we aim to: 1) show
that the peers’ values (and, hence, total blockchain throughput)
and coalitional reputations (and, therefore, system security)
improve consistently during self-organized shard formation
until reaching the stable levels and 2) validate theoretical
claims in Propositions 6–8 and Corollary 4.
Figs. 3–9 show the results of simulations with NM = 2,
NM = 4, NM = 6, NM = 8, and NM = 9 or, respectively,
Fig. 3. Average peer’s value during shard/coalition formation starting from
t = 0 until convergence to a reputation-based stable structure at t = 50 for
the varying number of malicious peers.
Fig. 4. Average coalitional reputation during shard/coalition formation start-
ing from t = 0 until convergence to a reputation-based stable structure at
t = 50 for the varying percent of malicious peers.
Fig. 5. Average system throughput (transactions/min) during shard/coalition
formation starting from t = 0 until convergence to a reputation-based stable
structure at t = 50 for the varying percent of malicious peers.
10%, 20%, 30%, 40%, and 45% malicious peers, each of
which generates arbitrarily erroneous results, reject correct
outputs and confirms incorrect outputs. Initially, at t = 0, all
shards are singletons, i.e., each managed by one peer. First,
to verify that the values and coalitional reputations of peers
improve consistently until reaching the stable levels, in Figs. 3
and 4, we present the average peer’s value and coalitional rep-
utation during the first 50 stages of the algorithm. We observe
that the values and coalitional reputations increase from t = 0
to t = 40 stages and stabilize after t = 40 stages. The rea-
son is that a peer moves to another shard/coalition only if it
can maximize both the peer’s value and coalitional reputation
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11846 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
Fig. 6. Average block delay (min) during shard/coalition formation starting
from t = 0 until convergence to a reputation-based stable structure at t = 50
for the varying percent of malicious peers.
Fig. 7. Percent of appended correct outputs during shard/coalition formation
starting from t = 0 until convergence to a reputation-based stable structure at
t = 50 for the varying percent of malicious peers.
Fig. 8. Percent of rejected incorrect outputs during shard/coalition formation
starting from t = 0 until convergence to a reputation-based stable structure at
t = 50 for the varying percent of malicious peers.
without hurting other shard members, i.e., without reducing
their values and coalitional reputations. Accordingly, prior to
convergence to a reputation-based stable structure �, each
consecutive shard structure formed as a result of the algorithm
will be better than the previous one in terms of value and/or
coalitional reputation of at least one peer. On the other hand,
after convergence, the peers stop forming new shards and,
therefore, their values and coalitional reputations reach stable
levels, which concurs with the findings of Proposition 6. We
also observe that the peers’ values and coalitional reputations
reduce with the number of malicious peers NF . The reason is
that when the number of malicious peers is at most 50%, the
Fig. 9. Ratio of minimal to maximal shard sizes and theoretical security, i.e.,
percent of tolerable malicious peers, during shard/coalition formation starting
from t = 0 until convergence to a reputation-based stable structure at t = 50.
reputation of a faithful peer in our system is always higher than
that of a malicious peer (see the proof of Proposition 7 given
in Appendix J, in the supplementary material). Therefore, the
average reputations of peers in shards reduce with the grow-
ing percent of malicious peers. In its turn, the peer’s value
depends on the peer’s beliefs about other members of its shard
defined by the reputations of the shard’s members [see (26)
and (29)]. Accordingly, the peer’s value decreases when the
average reputation of the members of its shard reduces.
Next, to analyze the throughput improvements during self-
organized shard formation, in Figs. 5 and 6, we present the
average throughput, i.e., the number of outputs or transactions
verified per time unit, and average block delay, i.e., expected
delay per task of each peer, during the first 50 stages of the
algorithm. We observe that the values of throughput increase,
whereas, the value of the block delay decrease from t = 0
to t = 40 stages and stabilize after t = 40 stages. The rea-
son is that in any shard/coalition, the peer’s value is mainly
defined by the peer’s throughput [see (28)]. Hence, when
moving to a shard that maximizes its value, the peer is able
to increase its throughput without hurting other shard’s mem-
bers. Furthermore, from (24a), the throughput is determined
by the orphaning probability which depends on the expected
delay for the peer’s task. That is, when moving to a coalition
that increases its throughput, the peer can reduce the delay
for its tasks. As such, initially, i.e., at t = 0, each shard in
the structure is a singleton. That is, the output of a task in
the shard is verified by the randomly assigned peers outside
of the shard. Any of these randomly assigned peers can be
malicious and/or located far from the peer that has produced
the output, which leads to reduced throughput and increased
block delay in the initial shard structure. Nonetheless, each
consecutive shard structure that will be formed at t = 1, 2, . . . ,
as a result of self-organized shard formation will be better
(or, at least, not worse) than the previous one in terms of the
throughput and block delay, which concurs with the claims of
Proposition 8.
Furthermore, to study the security bounds of our algorithm,
in Figs. 7 and 8, we present the percent of appended cor-
rect outputs and percent of rejected incorrect outputs during
self-organized shard formation. We note that with time, the
percent of appended correct outputs and rejected incorrect
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11847
Fig. 10. Average convergence time (stages) as a function of the total number
of peers for the varying percent of malicious peers in the system.
outputs increases reaching 100% after t = 15 stages (with up
to 40% malicious peers) or t = 50 stages (with 45% malicious
peers), which means that security improves until it reaches its
optimal level. To understand such a performance, note that
initially, i.e., at after t = 0, each shard is a singleton, i.e.,
the output of a task in the shard is verified only by the ran-
domly assigned peers outside of the shard. Since any of the
randomly assigned peers can be malicious, some of the correct
outputs maybe not confirmed or, alternatively, some incorrect
outputs maybe accepted. However, with a self-organized shard-
ing, each peer will eventually move to a shard/coalition which
maximizes its coalitional reputation (which depends on repu-
tations of all the shard’s members). In this case, the percent
of malicious peers verifying the outputs in each shard can be
minimized. Hence, every consecutive shard structure is bet-
ter (or, at least, not worse) than the previous one in terms of
shards’ security.
To show that the results in Figs. 7 and 8 concur
with the findings of Corollary 4, in Fig. 9, we present
the ratio of the minimal to the maximal shard sizes
minNk∈� Nk /maxNk∈� Nk during self-organized shard forma-
tion and the corresponding tolerable percent of malicious peers
�(1−minNk∈� Nk/maxNk∈� Nk)/2�×100% computed accord-
ing to Corollary 4. From Fig. 9, at t = 0, only one malicious
peer can be tolerated; at t = 5, up to 25% malicious peers are
tolerated; at t = 10, up to 33% malicious peers are tolerated;
at t = 15, up to 38% malicious peers are tolerated; at t = 20,
up to 40% malicious peers are tolerated; at t = 25, up to 42%
malicious peers are tolerated; after t = 30, up to 43% mali-
cious peers can be tolerated, which supports numerical results
in Figs. 7 and 8. Thus, after convergence, the proposed self-
organized shard formation algorithm is able to enhance the
throughput and security of our system. To study the algorithm
convergence, in Fig. 10, we show the average convergence
time for the increasing total number of peers N, with 10%,
20%, 30%, 40%, and 45% malicious peers. From Fig. 10,
the algorithm converges relatively fast regardless of the per-
cent of malicious peers. The algorithm convergence time is
logarithmic O(log N) with respect to the number of peers N.
C. Comparison With Other Related Algorithms
Let us now evaluate the performance of our self-organized
sharding model after stabilization, i.e., after convergence to
Fig. 11. Percent of appended correct outputs in different algorithms depend-
ing on the percent of malicious peers for the average number of shards
K = 5.
Fig. 12. Percent of rejected incorrect outputs in different algorithms depend-
ing on the percent of malicious peers for the average number of shards
K = 5.
a reputation-based stable structure � ∈ �, by comparing it
with the performance of the state-of-the-art sharding meth-
ods and a reputation-based lightweight blockchain system
(described in Section II) applicable to our BC-MEC system:
1) OmniLedger [12] based on bias-resistant distributed ran-
domness generation for sampling and updating subsets of peers
managing shards to preserve blockchain security; 2) domain-
based sharding [13] where the validators are selected based on
the results of PoW competition, which enables changing the
set of validators to improve security; and 3) reputation-based
lightweight blockchain for vehicular IoT [5] where the valida-
tors are selected from the peers with the highest reputations.
In order to be comparable with our sharding model where
each task output in the shard is confirmed by Nsh_ max shard’s
peers, the number of shards in OmniLedger and domain-based
sharding, and the number of validators in a reputation-based
blockchain is adjusted as K = N/Nsh_ max, so that every val-
idator verifies Nsh_ max outputs, as in our sharding model. The
main objective here is to show that our sharding model can out-
perform other simulated algorithms in terms of system security
and blockchain throughput.
First, we compare the performance of our sharding scheme
with the performance of other algorithms in terms of secu-
rity, i.e., the tolerable number of malicious peers. For this, in
Figs. 11 and 12, we show the percent of appended correct out-
puts and percent of rejected incorrect outputs in simulations
with the increasing percent of malicious peers and the average
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11848 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
Fig. 13. Average system throughput (transactions/min) in different algorithms
depending on the total number of peers for the percent of malicious peers fixed
to 30%.
number of shards K = 5. We observe that due to the growing
number of malicious peers, the percent of appended correct
outputs and percent of rejected incorrect outputs decrease
in all algorithms, but with different rates. In particular, the
decrease rates are the highest in the domain-based sharding
and OmniLedger where the percent of accepted correct out-
puts and rejected incorrect outputs drops rapidly when there
are more than 25% malicious peers, which means that these
methods can only tolerate up to 25% or NM = 5 malicious
peers. Such results concur with the theoretical security bounds
of sharding models (reported, e.g., in [12], [13], and [16])—
only one malicious peer is tolerated in each shard and, hence,
up to NM ≤ K = 5 malicious peers can be tolerated in
the system. This is due to the fact that in the domain-based
sharding and OmniLedger, the consensus inside each shard
is reached only when all peers in the shard agree on the
result. Therefore, if there is at least one malicious peers in
the shard, the correct outputs can be rejected and the incorrect
ones can be appended. On the other hand, as shown in [5], a
reputation-based blockchain can tolerate up to 30% malicious
peers, whereas, a self-organized sharding model can tolerate up
to 40% malicious peers achieving the best performance among
all algorithms. One of the reasons is that in a reputation-based
blockchain, the consensus among validators is reached through
conventional equal-weighted voting. Although the validators
are selected from trustworthy peers, i.e., peers with the highest
reputations, some of them can still be malicious. Accordingly,
if the number of malicious validators is at least the number of
faithful validators, the correct outputs can be rejected and the
incorrect ones can be appended. On the contrary, in our self-
organized sharding model, the consensus inside each shard is
reached through weighted voting, in which the peer’s weight is
proportional to its normalized reputation. As such, the correct
outputs will be rejected and incorrect ones will be appended
only if there are shards where the total reputation of malicious
peers is higher than that of faithful peers (which occurs much
rarer than in the case with equal-weighted voting).
Next, we compare the simulated algorithms in terms of their
throughputs. Figs. 13 and 14 show the overall throughput and
average block delay in simulations with the increasing total
number of peers N and percent of malicious peers fixed to
30%. We observe that because of the growing number of peers,
the throughput increases in all algorithms, but with different
Fig. 14. Average block delay (min) in different algorithms depending on the
total number of peers for the percent of malicious peers fixed to 30%.
rates—the rates of increase are lower in the domain-based
sharding, OmniLedger, and reputation-based blockchain, and
higher in our self-organized sharding scheme. The main rea-
son is that in the domain-based sharding and OmniLedger,
shards are formed based on results of PoW competition and
random sampling, respectively, whereas, in a reputation-based
system, validators are selected based on their reputations. As
such, the peers’ preferences (such as peers’ locations and
opinions about other peers in their shards) are ignored dur-
ing shard formation. This leads to the growing block delay
(Fig. 14), especially in scenarios with large numbers of peers.
On the contrary, in our self-organized sharding model, each
peer can select the shard that maximizes both: 1) peer’s pay-
off which depends on its throughput and 2) peer’s coalitional
reputation which depends on reputations of other peers in
the shard. This allows reducing the block delay (Fig. 14)
and improving the throughput and security of the formed
shards.
VII. CONCLUSION
We have designed a fully decentralized system architec-
ture and a secure self-organized and scalable sharding scheme
for the IoT-BC-MEC. We have proposed a new consensus
method for the system where each peer votes on the outputs
of block tasks in its shard. The peer’s voting power is deter-
mined based on its reputation. By adopting a reputation-based
coalitional game, we have developed a novel self-organized
shard formation algorithm in which each peer acts as a ratio-
nal player aiming to maximize both: 1) the peer’s payoff which
depends on its throughput and 2) the peer’s coalitional reputa-
tion which depends on the reputations of other members of the
peer’s shard/coalition. We have shown that the algorithm con-
verges to a reputation-based stable shard structure and achieves
a superior performance in terms of the system throughput and
security when compared to state-of-the-art sharding schemes
and reputation-based blockchains.
REFERENCES
[1] O. Novo, “Blockchain meets IoT: An architecture for scalable
access management in IoT,” IEEE Internet Things J., vol. 5, no. 2,
pp. 1184–1195, Mar. 2018.
[2] O. Novo, “Scalable access management in IoT using blockchain:
A performance evaluation,” IEEE Internet Things J., vol. 6, no. 3,
pp. 4694–4701, Jun. 2019.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
ASHERALIEVA AND NIYATO: REPUTATION-BASED COALITION FORMATION FOR SECURE SELF-ORGANIZED AND SCALABLE SHARDING 11849
[3] W. Wang et al., “A survey on consensus mechanisms and mining
strategy management in blockchain networks,” IEEE Access, vol. 7,
pp. 22328–22370, 2019.
[4] K. Yeow, A. Gani, R. W. Ahmad, J. J. P. C. Rodrigues, and K. Ko,
“Decentralized consensus for edge-centric Internet of Things: A review,
taxonomy, and research issues,” IEEE Access, vol. 6, pp. 1513–1524,
2018.
[5] J. Kang, Z. Xiong, D. Niyato, D. Ye, D. I. Kim, and J. Zhao, “Toward
secure blockchain-enabled Internet of vehicles: Optimizing consensus
management using reputation and contract theory,” IEEE Trans. Veh.
Technol., vol. 68, no. 3, pp. 2906–2920, Mar. 2019.
[6] W. Wang, D. Niyato, P. Wang, and A. Leshem, “Decentralized caching
for content delivery based on blockchain: A game theoretic perspective,”
in Proc. IEEE Int. Conf. Commun., Kansas City, MO, USA, May 2018,
pp. 1–6.
[7] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-in hybrid
electric vehicles using consortium blockchains,” IEEE Trans. Ind.
Informat., vol. 13, no. 6, pp. 3154–3164, May 2017.
[8] A. Reyna, C. Martín, J. Chen, E. Soler, and M. Díaz, “On blockchain and
its integration with IoT. Challenges and opportunities,” Future Gener.
Comput. Syst., vol. 88, pp. 173–190, Nov. 2018.
[9] Z. Zheng et al., “Blockchain challenges and opportunities: A survey,”
Int. J. Web Grid Services, vol. 14, no. 4, pp. 352–375, 2018.
[10] A. P. Joshi, M. Han, and Y. Wang, “A survey on security and privacy
issues of blockchain technology,” Math. Found. Comput., vol. 1, no. 2,
pp. 121–147, May 2018.
[11] Y. Xiao, N. Zhang, W. Lou, and Y. T. Hou. (2019). A Survey of
Distributed Consensus Protocols for Blockchain Networks. [Online].
Available: https://arxiv.org/abs/1904.04098
[12] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and
B. Ford, “OmniLedger: A secure, scale-out, decentralized ledger via
sharding,” in Proc. IEEE Security Privacy, 2018, pp. 583–598.
[13] H. Yoo, J. Yim, and S. Kim, “The blockchain for domain
based static sharding,” in Proc. IEEE TrustCom/BigDataSE, 2018,
pp. 1689–1692.
[14] S. Forestier, D. Vodenicarevic, and A. Laversanne-Finot.
(2018). Blockclique: Scaling Blockchains Through Transaction
Sharding in a Multithreaded Block Graph. [Online]. Available:
https://arxiv.org/abs/1803.09029
[15] M. H. Manshaei, M. Jadliwala, A. Maiti, and M. Fooladgar, “A game-
theoretic analysis of shard-based permissionless blockchains,” IEEE
Access, vol. 6, pp. 78100–78112, 2018.
[16] S. Li, M. Yu, C.-S. Yang, A. S. Avestimehr, S. Kannan, and
P. Viswanath. (Sep. 2018.). Polyshard: Coded Sharding Achieves
Linearly Scaling Efficiency and Security Simultaneously. [Online].
Available: https://arxiv.org/abs/1809.10361
[17] R. Yang, F. R. Yu, P. Si, Z. Yang, and Y. Zhang, “Integrated blockchain
and edge computing systems: A survey, some research issues and chal-
lenges,” IEEE Commun. Surveys Tuts., vol. 21, no. 2, pp. 1508–1532,
2nd Quart., 2019.
[18] B. Omoniwa, R. Hussain, M. A. Javed, S. H. Bouk, and S. A. Malik,
“Fog/edge computing-based IoT (FECIoT): Architecture, applica-
tions, and research issues,” IEEE Internet Things J., vol. 6, no. 3,
pp. 4118–4149, Jun. 2019.
[19] Z. Yang, K. Yang, L. Lei, K. Zheng, and V. C. M. Leung, “Blockchain-
based decentralized trust management in vehicular networks,” IEEE
Internet Things J., vol. 6, no. 2, pp. 1495–1505, May 2018.
[20] V. Hassija, V. Chamola, S. Garg, D. N. G. Krishna, G. Kaddoum, and
D. N. K. Jayakody, “A blockchain-based framework for lightweight data
sharing and energy trading in V2G network,” IEEE Trans. Veh. Technol.,
vol. 69, no. 6, pp. 5799–5812, Jun. 2020.
[21] Y. Liu, K. Wang, Y. Lin, and W. Xu, “A lightweight blockchain system
for industrial Internet of Things,” IEEE Trans. Ind. Informat., vol. 15,
no. 6, pp. 3571–3581, Mar. 2019.
[22] K. Dorri, S. S. Kanhere, R. Jurdak, and P. Gauravaram, “LSB: A
lightweight scalable blockchain for IoT security and anonymity,” J.
Parallel Distrib. Comput., vol. 134, pp. 180–197, Dec. 2019.
[23] R. Blum and T. Bocek, “Superlight–A permissionless, light-client only
blockchain with self-contained proofs and BLS signatures,” in Proc.
IFIP/ IEEE Symp. Integr. Netw. Service Manag. (IM), Apr. 2019,
pp. 36–41.
[24] L. Li et al., “CreditCoin: A privacy-preserving blockchain-based incen-
tive announcement network for communications of smart vehicles,”
IEEE Trans. Intell. Transp. Syst., vol. 19, no. 7, pp. 2204–2220,
Jan. 2018.
[25] R. A. Michelin et al., “SpeedyChain: A framework for decou-
pling data from blockchain for smart cities,” in Proc. 15th EAI Int.
Conf. Mobile Ubiquitous Syst. Comput. Netw. Services, Nov. 2018,
pp. 145–154.
[26] N. Lasla, M. Younis, W. Znaidi, and D. B. Arbia, “Efficient distributed
admission and revocation using blockchain for cooperative its,” in Proc
9th IFIP Int. Conf. New Technol. Mobility Security (NTMS), 2018,
pp. 1–5.
[27] L. Xu, L. Chen, Z. Gao, S. Xu, and W. Shi, “EPBC: Efficient public
blockchain client for lightweight users,” in Proc. 1st Workshop Scalable
Resilient Infrastruct. Distrib. Ledgers, Dec. 2017, pp. 1–6.
[28] C. Ehmke, F. Wessling, and C. M. Friedrich, “Proof-of-property:
A lightweight and scalable blockchain protocol,” in Proc. 1st
Int. Workshop Emerg. Trends Softw. Eng. Blockchain, May 2018,
pp. 48–51.
[29] Z. Liu, S. Tang, S. S. M. Chow, Z. Liu, and Y. Long, “Fork-free hybrid
consensus with flexible proof-of-activity,” Future Gener. Comput. Syst.,
vol. 96, pp. 515–524, Jul. 2019.
[30] A. C. An, P. T. X. Diem, L. T. T. Lan, T. V. Toi, and L. D. Q. Binh,
“Building a product origins tracking system based on blockchain and
PoA consensus protocol,” in Proc. IEEE Int. Conf. Adv. Comput. Appl.
(ACOMP), Nov. 2019, pp. 27–33.
[31] Binance Academy. Proof of Authority Explained. Accessed: Apr. 2020.
[Online]. Available: https://www. binance.vision/blockchain/proof-of-
authority-explained
[32] H. Wei, W. Feng, C. Zhang, Y. Chen, Y. Fang, and N. Ge.
(Jan. 2020). Creating Efficient Blockchains for the Internet of Things
by Coordinated Satellite-Terrestrial Networks. [Online]. Available:
https://arxiv.org/pdf/2001.01358.pdf
[33] Q. Zhou, H. Huang, Z. Zheng, and J. Bian, “Solutions to scalability of
blockchain: A survey,” IEEE Access, vol. 8, pp. 16440–16455, 2020.
[34] N. Chawla, H. W. Behrens, D. Tapp, D. Boscovic, and K. S. Candan,
“Velocity: Scalability improvements in block propagation through rate-
less erasure coding,” in Proc. IEEE Int. Conf. Blockchain Cryptocurrency
(ICBC), May 2019, pp. 447–454.
[35] R. Yasaweerasinghelage, M. Staples, and I. Weber, “Predicting latency of
blockchain-based systems using architectural modelling and simulation,”
in Proc. IEEE Int. Conf. Softw. Archit. (ICSA), Apr. 2017, pp. 253–256.
[36] C. Decker and R. Wattenhofer, “Information propagation in the bitcoin
network,” in Proc. IEEE P2P, Sep. 2013, pp. 1–10.
[37] W. Chen, Z. Zhang, Z. Hong, C. Chen, J. Wu, and S. Mahar,
“Cooperative and distributed computation offloading for blockchain-
empowered industrial Internet of Things,” IEEE Internet Things J.,
vol. 6, no. 5, pp. 8433–8446, Oct. 2019.
[38] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Distributed
resource allocation in blockchain-based video streaming systems with
mobile edge computing,” IEEE Trans. Wireless Commun., vol. 18, no. 1,
pp. 695–708, Jan. 2019.
[39] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Computation
offloading and content caching in wireless blockchain networks with
mobile edge computing,” IEEE Trans. Veh. Technol., vol. 67, no. 11,
pp. 11008–11021, Nov. 2018.
[40] S. Sen, I. Goswami, and S. Airiau, “Expertise and trust-based forma-
tion of effective coalitions: An evaluation of the art testbed,” in Proc.
AAMAS, 2006, pp. 71–78.
[41] Y. Liu, Q. Li, and J. Zhang, “Coalition formation game based reputation
system,” in Proc. ACM WIT-EC, 2012, pp. 1–12.
[42] L. Mashayekhy and D. Grosu, “A reputation-based mechanism for
dynamic virtual organization formation in grids,” in Proc. IEEE ICPP,
2012, pp. 108–117.
[43] L. F. Bilecki, A. Fiorese, and F. Matos, “A trust reputation architecture
for virtual organization integration in cloud computing environment,” in
Proc. ICEIS, 2017, pp. 695–702.
[44] D. Xu and Y. Tian, “A comprehensive survey of clustering algorithms,”
Ann. Data Sci., vol. 2, no. 2, pp. 165–193, Jun. 2015.
[45] S. Shukri, H. Faris, I. Aljarah, S. Mirjalili, and A. Abraham,
“Evolutionary static and dynamic clustering algorithms based on
multi-verse optimizer,” Eng. Appl. Artif. Intell., vol. 72, pp. 54–66,
Jun. 2018.
[46] J. Chen, H. Sun, D. Woodruff, and Q. Zhang, “Communication-optimal
distributed clustering,” in Proc. Adv. Neural Inf. Process. Syst., 2016,
pp. 3727–3735.
[47] L. Bing, M. Zhuang, Z. Yanshuo, and C. Juliang, “Distributed dynamic
clustering in wireless networks with capacity constraint and concealed
data,” in Proc. IEEE CCET, 2018, pp. 86–90.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
11850 IEEE INTERNET OF THINGS JOURNAL, VOL. 7, NO. 12, DECEMBER 2020
[48] A. Asheralieva and D. Niyato, “Hierarchical game-theoretic and
reinforcement learning framework for computational offloading in
UAV-enabled mobile edge computing networks with multiple service
providers,” IEEE Internet Things J., vol. 6, no. 5, pp. 8753–8769,
Oct. 2019.
[49] A. Asheralieva and D. Niyato, “Distributed dynamic resource manage-
ment and pricing in the IoT systems with blockchain-as-a-service and
UAV-enabled mobile edge computing,” IEEE Internet Things J., vol. 7,
no. 3, pp. 1974–1993, Mar. 2020.
[50] A. Asheralieva, T. Q. S. Quek, and D. Niyato, “An asymmetric evolution-
ary Bayesian coalition formation game for distributed resource sharing
in a multi-cell device-to-device enabled cellular network,” IEEE Trans.
Wireless Commun., vol. 17, no. 6, pp. 3752–3767, Jun. 2018.
[51] A. Asheralieva, “Bayesian reinforcement learning-based coalition for-
mation for distributed resource sharing by device-to-device users in
heterogeneous cellular networks,” IEEE Trans. Wireless Commun.,
vol. 16, no. 8, pp. 5016–5032, Aug. 2017.
[52] G. Q. Pérez, J. A. Hernández, and D. L. López, “Delay analysis of
fronthaul traffic in 5G transport networks,” in Proc. IEEE ICUWB,
Sep. 2017, pp. 1–5.
[53] R. O. Afolabi, A. Dadlani, and K. Kim, “Multicast scheduling and
resource allocation algorithms for OFDMA-based systems: A survey,”
IEEE Commun. Surveys Tuts., vol. 15, no. 1, pp. 240–254, 1st Quart.,
2013.
[54] A. Asheralieva and D. Niyato, “Learning-based mobile edge com-
puting resource management to support public blockchain networks,”
IEEE Trans. Mobile Comput., early access, Dec. 16, 2019,
doi: 10.1109/TMC.2019.2959772.
[55] OPNET Network Simulator. Accessed: Apr. 2020. [Online]. Available:
http://opnetprojects.com/opnet-network-simulator/
[56] Omnet Disrete Event Simulator. Accessed: Apr. 2020. [Online].
Available: https://omnetpp.org/
[57] The Network Simulator—NS-2. Accessed: Apr. 2020. [Online].
Available: https://www.isi.edu/nsnam/ns/
[58] M. Chen, Y. Miao, and I. Humar, “Introduction to OPNET network
simulation,” in OPNET IoT Simulations. Singapore: Springer, 2019,
pp. 77–153.
[59] Evolved Universal Terrestrial Radio Access (E-UTRA) and Evolved
Universal Terrestrial Radio Access Network (E-UTRAN); Overall
Description; Stage 2, Release 13, 3GPP Standard TS 36.300, 2016.
[60] “Characteristics of a bending-loss insensitive single-mode optical fibre
and cable for the access network,” ITU-T, Geneva, Switzerland,
Recommendation G.657, Dec. 2017.
[61] P. Sethi and S. R. Sarangi, “Internet of Things: Architectures, proto-
cols, and applications,” J. Elect. Comput. Eng., vol. 2017, Jan. 2017,
Art. no. 9324035.
[62] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/fog computing resource management and pricing for blockchain
networks,” IEEE Internet Things J., vol. 6, no. 3, pp. 4585–4600,
Jun. 2019.
[63] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When mobile
blockchain meets edge computing,” IEEE Commun. Mag., vol. 56, no.
8, pp. 33–39, Aug. 2018.
[64] Intel� Xeon� Processor 7150N. Accessed: Apr. 2020. [Online].
Available: https://ark.intel.com/content/www/us/en/ark/products/28029/
intel-xeon-processor-7150n-16m-cache-3-50-ghz-667-mhz-fsb.html
[65] K. P. Apt and A. Witzel, “A generic approach to coalition formation,”
Int. Game Theory Review, vol. 11, no. 3, pp. 347–367, Sep. 2009.
Alia Asheralieva received the B.S. degree from
Kyrgyz Technical University, Bishkek, Kyrgyzstan,
in 2004, the M.E. degree from the Asian Institute of
Technology, Khlong Luang, Thailand, in 2007, and
the Ph.D. degree from the University of Newcastle,
Callaghan, NSW, Australia, in 2015.
From 2015 to 2016, she was a Research
Assistant Professor with the Graduate School of
Information Science and Technology, Hokkaido
University, Sapporo, Japan. In 2017, she was a
Postdoctoral Research Fellow with the Information
Systems Technology and Design Pillar, Singapore University of Technology
and Design, Singapore. She is currently an Assistant Professor with the
Department of Computer Science and Engineering, Southern University
of Science and Technology, Shenzhen, China. Her main research interests
span many areas of communications and networking, including cognitive
radio networks, heterogeneous networks, D2D and IoT communications,
cloud/edge/fog computing, mobile blockchains, cross-layer resource allocation
and optimization, congestion control and routing, game theory, computational
and artificial intelligence for wireless networks, as well as queuing theory,
simulation and network modeling, QoS, and performance evaluation.
Dusit Niyato (Fellow, IEEE) received the B.Eng.
degree from the King Mongkut’s Institute of
Technology Ladkrabang, Bangkok, Thailand, in
1999, and the Ph.D. degree in electrical and com-
puter engineering from the University of Manitoba,
Winnipeg, MB, Canada, in 2008.
He is currently a Professor with the School
of Computer Science and Engineering, Nanyang
Technological University, Singapore. His research
interests include energy harvesting for wireless com-
munication, Internet of Things, and sensor networks.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:24:50 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TMC.2019.2959772
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice