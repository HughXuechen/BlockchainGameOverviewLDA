Trustworthy Blockchain-Empowered Collaborative Edge Computing-as-a-Service Scheduling and Data Sharing in the IIoE
14752 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
Trustworthy Blockchain-Empowered Collaborative
Edge Computing-as-a-Service Scheduling
and Data Sharing in the IIoE
Fenhua Bai , Graduate Student Member, IEEE, Tao Shen , Member, IEEE, Zhuo Yu ,
Kai Zeng , and Bei Gong , Member, IEEE
Abstract—Owing to the technology of 5G and beyond, col-
laborative edge computing-as-a-service has enabled trillions of
interconnected edge applications. It has also become a prospec-
tive paradigm for providing computing services by offloading
computationally intensive assignments to mobile-edge servers or
fog nodes due to terminals constrained computing and caching
resources. Nevertheless, in this process, trust of computing-as-
a-service scheduling and edge data sharing in heterogeneous
systems is an unavoidable challenge of paramount importance.
As a powerful tool that addresses security issues, blockchains can
ensure the trustworthiness and irreversibility of computing data
by consensus mechanisms. However, in the Industrial Internet
of Energy (IIoE), the storage burden of a single blockchain
has increased. Therefore, from the perspective of a stable real-
time operation, we propose a multiedgechain structure that
accommodates thousands of edge data and promotes on-chain
data efficiency to achieve cross-chain edge data sharing for
heterogeneous blockchain systems. Moreover, aiming at the prof-
its of computing resource scheduling in the IIoE, a two-stage
Stackelberg game strategy with an optimal scheduling demand
and reward is provided considering the edge user’s preferences
and risk factors. Finally, the simulation results verify the supe-
riority of the proposed scheme, regarding the game equilibrium,
utility optimization, and data sharing efficiency of cloud–edge
collaboration.
Index Terms—Blockchain, cross-chain, edge computing,
Industrial Internet of Energy (IIoE), noncooperative games.
I. INTRODUCTION
W ITH the continuous implementation of new infras-
tructure in the Industrial Internet of Energy (IIoE),
Manuscript received 15 August 2020; revised 24 December 2020
and 21 January 2021; accepted 30 January 2021. Date of publication
9 February 2021; date of current version 8 August 2022. This work was sup-
ported in part by the Major Scientific and Technological Projects in Yunnan
Province under Grant 202002AB080001; in part by the National Natural
Science Foundation of China under Grant 61702128; and in part by the
Yunnan Applied Basic Research Projects under Grant 2018FA034. The work
of Tao Shen was supported in part by the Yunnan Young Top Talents of Ten
Thousands Plan under Grant 201873. (Corresponding author: Tao Shen.)
Fenhua Bai, Tao Shen, and Kai Zeng are with the Faculty of Information
Engineering and Automation, Kunming University of Science and Technology
of China, Kunming 650500, China (e-mail: bofenhua@stu.kust.edu.cn;
shentao@kust.edu.cn; zengkailink@sina.com).
Zhuo Yu is with the Department of Research and Development, State Grid
Information and Telecommunication Company, Ltd., Beijing 102209, China
(e-mail: yuzhuo@sgitg.sgcc.com.cn).
Bei Gong is with the Department of Computing, Beijing University of
Technology, Beijing 100124, China (e-mail: gongbei@bjut.edu.cn).
Digital Object Identifier 10.1109/JIOT.2021.3058125
the number of edge devices and applications has grown
exponentially. For various applications, such as electric vehi-
cles, smart energy metering, and unmanned patrol inspection
machines, edge/fog computing can meet the requirement of
real-time operation and provide edge intelligent services near
the edge [1]–[2]. However, a nonnegligible challenge when
exploiting these services in the IIoE is that the required com-
puting and storing capacity may not be well provided by the
limited resources of edge devices [3]. Mobile-edge servers
(MSs) or fog nodes (FNs) with intensive computing resources
can undertake computing tasks and improve the efficiency of
edge computing services [4], [5].
When utilizing the computation and storage capacity of
MSs and FNs, it is worth mentioning that the offloaded
task scheduling should be concerned with the participant’s
cost optimization to determine the optimal strategy. Many
researchers [6]–[9] have discussed the issue of edge comput-
ing resource scheduling. For example, Li et al. [6] optimized
computational offloading with minimum energy consumption.
In [7], the proposed methods reduced the computing task
latency of edge devices and significantly improved the appli-
cation service quality. Goudarzi et al. [8] and Luo et al. [9]
provided a dynamic calculation for the real-time vehicle oper-
ation. From the perspective of participant cost optimization, a
Stackelberg game was applied to construct interactions among
neighboring devices, edge cloud operators, and collaborative
mining networks to ensure the maximum profit of edge–
cloud operators [10]. In [11] and [12], noncooperative games
were also formulated to determine the optimal price of both
sides when tradable activities occur. A risk-aware computa-
tion offloading policy was modeled as a Bayesian–Stackelberg
game to safely distribute computation tasks in [13]. Although
the reward mechanism is crucial for the collaborative edge
computing-as-a-service (CaaS) scheduling problem in the
IIoE, except for mining networks [14], there has been lit-
tle work that analyzes the optimal rewards by means of a
game approach. Thus, efficient CaaS scheduling and reward
schemes are needed to compensate for constrained resources
and improve the edge computing resource availability in
the IIoE.
Moreover, a trustworthy data consistency mechanism
between the edge computing-unloaded devices and providers
is important. Fortunately, the data integrity and computation
verifiability of the system can be considerably improved by
2327-4662 c© 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-2505-0288
https://orcid.org/0000-0003-1273-7950
https://orcid.org/0000-0002-2185-3948
https://orcid.org/0000-0002-9648-1819
https://orcid.org/0000-0003-3188-3531
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14753
integrating blockchains into the edge computing network [3].
For the majority of the existing schemes [10], [15], [16], the
blockchain technological paradigm can offer reliable access
control and storage over a great number of decentralized
edge nodes. Essentially, a blockchain can act as a trustwor-
thy solution because of the consensus algorithm that it adopts
with strong data consistency and irreversible hash encryp-
tion. It can resist information leakage attacks from both sides
for interactive computation. What is more, as a distributed
database, blockchains can store edge computing data and out-
comes reliably in a chronological order so that the results of
being on the blockchain cannot be changed [17].
Clearly, as a new infrastructure develops in the IIoE, the bur-
den of blockchain data storage has gradually increased, leading
to significant disadvantages of low efficiency. Consequently,
how to efficiently and securely share the massive amount of
available data to improve the edge computing experience and
provide a higher quality of computing is of significance. To
alleviate the burden of blockchains and increase their trans-
action efficiency, the sidechain structure was first proposed
by Back et al. [18]. Most notably, each sidechain is com-
pletely independent in this scheme [19], and there are different
consensus algorithms or blockchain types (e.g., private, con-
sortium, or public blockchains) [20]. Certainly, as a technology
for accomplishing cross-chain interoperability, sidechains can
perform cross-chain data interaction at the edge of the network
in the IIoE under the condition of security.
Regarding cross-chain verification, edge data consistency
is still an outstanding issue in data sharing among heteroge-
neous blockchains. Zaghloul et al. [21] provided a scheme for
multilevel organizational data sharing in cloud computing but
does not consider the edge computing. The existing different
assets trading the validation of sidechain technology depends
on the two-way peg protocol by simplified payment verifica-
tion (SPV) [18]. This tends be slow and involves more time
overhead because the data user has to wait for the confirm
and contest periods before having access to sharing data on
either the sidechain or the mainchain [19]. Accordingly, in this
article, we adopt the cloudlet chain as a cross-chain applica-
tion programming interface (API) to reduce the complexity of
cross-chain data interaction. Both edgechains register a cross-
chain service on the cloudlet chain. Then, edge data sharing
among edgechains can be quickly accomplished.
The specific contributions of this article are threefold.
1) Aiming at the real-time and stability requirements of the
edge devices dealing with computing tasks in the IIoE,
we propose a multiedgechain and cloudlet chain struc-
ture. Each edge blockchain can run independently, and
collaborative edge computing results on chain storage
can be performed concurrently. Moreover, when employ-
ing a consortium blockchain or private blockchain, the
edgechains are responsible for the transaction of CaaS
scheduling in different domains and provide an unal-
terable storage method for a variety of computing data
from different domains (such as energy trading, intel-
ligent manufacturing factories and electric vehicles) in
the IIoE.
2) We construct a noncooperative game model in which we
use a two-stage Stackelberg game to address the problem
of optimizing participants’ utilities. This game contains
offloading calculation demand and reward strategies
between the constrained edge devices and MSs or FNs
for CaaS scheduling while practically considering the
edge user’s preferences and risk factors. Additionally,
gradient descent is used to solve the game equilibrium
rapidly to satisfy the real-time requirements of CaaS
scheduling.
3) In particular, in our devised multichain structure, the
double-level improved practical Byzantine fault tol-
erance (DLPBFT) consensus algorithm is proposed
to reduce transaction processing time and guarantee
the data consistency stored on the blockchains. Then,
concerning the interoperability among heterogeneous
edgechains and edge-cloud collaboration in the IIoE, the
cloudlet chain is used to provide a cross-chain interface,
bridge each of the edgechains, and further support cross-
chain data sharing for itself or other edgechains with
edge terminals and applications in different domains.
The remainder of this article is organized as follows.
Section II introduces the game theory for CaaS scheduling
and the cross-chain technology that aims at heterogeneous
blockchain interoperability, and then gives an overview of
related works. Section III presents the system formulation
and the proposed multiedgechain architecture of this article.
Section IV describes the evaluation and simulation results of
this research. Finally, the conclusion is given in Section V.
II. RELATED WORKS
Recently, the blockchain concept has emerged as one of the
most influential technologies that enables its application with
the Internet of Things (IoT), artificial intelligence, edge com-
puting, and big data. Nevertheless, blockchains have run into a
wall in terms of challenges regarding scalability, interoperabil-
ity, security, etc., [3]. Since a single blockchain to rule them all
is impracticable [19], rather than having disparate blockchains,
it would seem more worthwhile to make separate blockchains
be interoperable such that they can communicate and interact
with one another.
A. Interoperability of the State-of-the-Art Cross-Chains
1) On-Chain Interoperability: One way to solve the inter-
operability problem is to use another blockchain as a commu-
nication bridge. In short, a third blockchain is built between
two blockchains to record the transaction and message data
in a securely encrypted manner. In general, the hub-spoke
mode, in which the parent blockchain is the hub of other
blockchains (also known as sidechains), is the most common
mode for on-chain interaction. At present, Polkadot, Cosmos,
and Ethereum have adopted this model in several sidechain
proposals (plasma, matic, and loom) [19].
Furthermore, the general bridge can be used to verify,
record, and store cross-chain interactive data into accounts,
and provide blockchain consensus with a timestamp.
2) Off-Chain Interoperability: The function of Oracle is
to connect two blockchains as a universal bridge. This
function cannot only achieve information exchange between
blockchains but also interact with any enterprise system
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
14754 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
beyond the blockchains. For example, transaction data on one
blockchain are used as the input to trigger a smart contract
on another blockchain. Oracles can empower many kinds of
cross-chain interaction modes that others cannot.
Chainlink, the first decentralized oracle network, is equiva-
lent to the HTTP protocol in function (or HTTPS in a trusted
execution environment); it performs on-chain and off-chain
information transmission in the protocol and application lay-
ers. Chainlink nodes are able to package information and data
from the validated APIs into a format that smart contracts can
read. Moreover, a Chainlink node can be connected to any
API, whether it is a blockchain, enterprise system, Web API
or IoT device. If a task is not supported by the Chainlink core
node, it is also easy to establish an external adapter to extend
the node function. Although a new era for smart contracts 3.0
is expected to open, Chainlink is relatively immature and still
in the exploratory stage.
B. Existing Cross-Chain Technology
Currently, there are three kinds of mainstream cross-chain
technology: 1) notary mechanisms; 2) sidechains/relays; and
3) hash locking.
1) Notary Mechanism: A notary mechanism is a centralized
cross-chain mode. Both sides of the cross-chain establish trust
through a trustworthy third party elected as a notary, which
is in charge of validating the legitimacy and consistency of
information only and does not participate in business details.
The most prominent characteristic of the notary mechanism is
its operation irrespective of the structure and consensus mech-
anism for both parties in the blockchain. Representative cases
are Interleger and Corda [22]. However, the notary mechanism
has an obvious defect, which is that there need to be sufficient
trust in the notary, and there is a great risk of centralization
for the single node notary mechanism [19].
2) Sidechains/Relays: Seeing the obstruction in the appli-
cation and further growth of blockchains for constructing
scalable, advanced, and implementable information systems,
Back et al. [18] first proposed the concept of two-way anchor-
ing sidechains in 2014 for addressing the interoperability of
traditional blockchains. Essentially, the structure of a sidechain
is a main blockchain with secondary subblockchains, which
are connected to other blockchains with the help of a two-way
peg based on SPV [23]. Two-way anchoring is a mechanism
that allows bidirectional interactions between the mainchain
and the sidechain. Sidechains may have their own consen-
sus protocol and implementation, which can be thoroughly
distinct from the parent blockchain. The adjustability of this
design provides flexibility to users regarding access, especially
for heterogeneous functionalities and features offered on a
sidechain. Furthermore, sidechains are separated from the par-
ent blockchain so that protecting the mainchain from malicious
attacks due to damage is completely limited to the sidechain
itself [19].
3) Hash Locking: Hash locking is a mechanism that relies
on the unidirectionality and low collision of hash functions.
Cross-chain interactions in different blockchains are realized
by setting triggers that depend on a smart contract. The
first project to use hash locking technology resulted from
the Bitcoin’s lightning network [24], which establishes trust
without a notary. As long as there is a channel connecting
the two sides of the transaction in the network, this chan-
nel can be used for transactions. In simple terms, the two
chains receive unlocking information within the specified time
and then send assets. As a result, the operation cost of hash
locking technology is high and is accompanied by insufficient
security [22].
C. Edge Computing Resource Scheduling
As mentioned above, to decrease the communication over-
head of cloud computing, as well as address the limited edge
equipment computing ability, edge computing has emerged as
a promising solution in which distributed energy terminals can
offload computationally intensive tasks [25] to adjacent edge
servers or FNs in the IIoE. Computational resource-optimized
scheduling approaches are important for providing effective
and low-delay computing services during task offloading.
Several strategies have been adopted to optimize edge comput-
ing resource scheduling, such as deep reinforcement learning
(DRL) [3], [26], [27]–[29], auction theory [10], [30], [31], and
game theory [32], [33]. Among these approaches, the game
theory has been the most extensively applied to optimize the
problem of resource scheduling. The contract theory is also a
powerful tool to solve the incentive problem with asymmetric
information [34].
D. Cross-Chain Edge Data Sharing
Edge data sharing is a crucial segment among heterogeneous
edge blockchains in the IIoE. To provide better schedule-
based decision making, users in different energy domains
need to share their data on the chain with adjacent edge
chain data [35], [36]. For instance, smart energy factories
can share edge data resources with energy production plants
to optimize CaaS scheduling and further facilitate energy
management. In the process of cross-chain data sharing, cryp-
tographic mechanisms that consider privacy preservation are
also applied to encrypt the data so that only the user autho-
rized by the data owner can decrypt the data and preserve the
data confidentiality of edge terminals [37].
Although a large number of studies have analyzed how to
share and avoid the excessive disclosure of the data of the
owner in this process [36], [38], the existing schemes for data
sharing based on blockchain leave out of consideration the
problem of the heterogeneous blockchain in IIoE systems, and
the related research is insufficient.
E. Blockchain Consensus Mechanism
As a crucial component of blockchain technology, the con-
sensus algorithm is commonly used to reach an agreement
among the validated nodes and decide whether to generate
a new block into the blockchain. It is the consensus algo-
rithm that ensures the trust and confidentiality of the generated
block.
There are some widely used consensus mechanisms for
security and data consistency. For public blockchains, Proof
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14755
Fig. 1. Proposed system architecture in the IIoE.
Fig. 2. CaaS scheduling and edge–cloud collaboration.
of Work (PoW) [39] (depending on the node’s computational
power to win the right of adding a new block by solving
a computationally expensive puzzle) is commonly used in
Bitcoin, and Proof of Stake (PoS) [40] is applied in Ethereum.
To address the problem of expensive investment of energy
in PoW, the Proof of Elapsed Time (PoET) was introduced
by Intel for permissioned blockchain applications [41] in
Hyperledger Sawtooth. The validator with the shortest wait-
ing time for a particular block is selected as the leader in the
trusted enclave. Delegated PoS (DPoS) [42] is a variant of PoS;
the primary difference between them is that DPoS is faster than
PoS in the generated block because the former chooses only
the delegated nodes to participate in the consensus. Generally,
applying in alliance blockchains, PBFT solves the challenges
associated with the Byzantine general problem [43] for asyn-
chronous circumstances. It is necessary that at least two-thirds
of the participants are honest. Moreover, other newly consen-
sus algorithms, including Ouroboros [44], Algorand [45], and
Snowflake to Avalanche [46], are emerging.
III. SYSTEM FORMULATION
In this section, the triple-layer architecture shown in Fig. 1
is proposed to address the challenge of trustworthy CaaS
scheduling and cross-chain data sharing in the IIoE. The
constructed architecture comprises the edge service layer,
intelligent blockchain layer, and industrial application layer.
1) Edge Service Layer: A large number of mobile-edge
energy terminals are interconnected in the IIoE. Thus,
the end devices with constrained computing resources
can offload the computational tasks to MSs and FNs by
CaaS scheduling to improve the efficiency of the cal-
culation and make full use of the computing resources.
To optimize CaaS scheduling, we make a model of a
noncooperative game between edge energy devices and
MSs or FNs to determine the optimal CaaS dispatching
demands and best rewards after finishing the computing
tasks.
2) Trustworthy Blockchain Layer: In this layer, a trustwor-
thy blockchain secures reliable data coherency and pro-
vides tamper-resistant storage for the computing results.
Moreover, the multiedgechain structure can decrease the
storage burden and efficiency dilemma of the single
blockchain. In addition to describing the data structure
itself, the proposed structure can achieve cross-chain
data sharing among heterogeneous edge blockchains in
the IIoE.
3) Industrial Application Layer: For the industrial applica-
tion layer, the success of CaaS scheduling is achieved
through the trustworthy blockchain and cross-chain edge
data sharing. Consequently, industrial applications, such
as energy trading, intelligent manufacturing, and electric
vehicles can be further integrated into the best services
and bring about efficiency improvements for the IIoE.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
14756 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
Fig. 3. Two-way peg based on SPV.
Fig. 4. Cross-chain data interactions.
The purpose of the multiedgechain structure (shown in
Fig. 2) in this article is to decrease the single blockchain’s bur-
den due to the massive CaaS scheduling data and computing
result storage, concurrently preventing the blocks from under-
going tampering. Since enabling interactions among different
edgechains is a significant problem, sidechain technology has
received much attention in recent years. The majority of the
existing research on sidechain technology has focused on
cross-chain value circulation with two-way pegs [20]; then,
SPV is applied to verify that a transaction does exist in a
block according to a Merkle path proof. This is obviously
time consuming due to the confirmation and contest periods
(shown in Fig. 3). The time complexity of SPV is O(n).
Herein, we adopt a single-cloudlet-chain and multi-
edgechain structure. As shown in Fig. 4, the function of the
cloudlet chain is to act as a bridge that connects two arbi-
trarily edgechains (for example, edgechains A and C). In the
process of cross-chain data interaction, each edgechain should
register services on the cloudlet chain. The cloudlet chain
is responsible for storing and maintaining the services pro-
vided by each edgechain, and the service directory is open to
each edgechain. When an edgechain needs cross-chain data
interaction, the edgechain service recorded in the cloudlet
chain should be used for data crosslink sharing. First, the oper-
ator for each of the edgechains registers as a service node on
the cloudlet chain. Next, if edgechain A needs to share the
data or information of edgechain C, it invokes the API of
edgechain C on the cloudlet chain. Then, edgechain C sends
back the hashed data to edgechain A. Additionally, the cloudlet
chain can share the information of all the edgechains so that
cloud edge collaboration is realized.
A. Optimizing CaaS Scheduling
In our proposed system model, CaaS participants exploit
blockchain technology to record edge computing service
Fig. 5. Trustworthy access control.
Fig. 6. Task offloading and allocation.
transaction information on the edgechain and ensure the max-
imum scheduling profit of edge computing services through
game theory.
1) Trustworthy Access Control: In our devised architecture,
we leverage the blockchain as a trustworthy network access
control technique among the participants (such as the energy
end users, CaaS vendors, and MSs or FNs in Fig. 6) through
the characteristics of consistent consensus. Particularly, in this
process, the requesting terminators and MSs or FNs use a hash
function designed to anonymously obtain information when
participating in the blockchain network as a consensus node
in a secure manner. Specifically, the entities in the interaction
adopt the DLPBFT consensus algorithm to reach an agreement
for CaaS scheduling.
Moreover, to ensure the reliability of the task calculation and
manage all the equipment’s identification, the CaaS provider
is designed as a monitoring node on one edgechain in the form
of a consortium blockchain to carry out the management func-
tions and control entering or leaving for edge energy devices
and MSs or FNs. Notably, the supervised node makes schedul-
ing decisions and has the right to reward the remaining nodes;
it also makes credit evaluations according to the calculation
results.
By coordinating the computing resources of MSs with FNs,
the resource capacity at the edge of the IIoE can be expanded,
and the processing ability can be further enhanced. This
ensures that the CaaS provider deploys a better computing
offloading service near terminal users. Based on the collabo-
rative computing of the MSs and FNs, the service provider can
optimize the distribution of the computing load to maximize
the energy terminal user’s satisfaction. Specifically, the ser-
vice provider divides a complete calculation task uploaded into
corresponding copies and distributes several copies to differ-
ent MSs and FNs for independent execution. Once the task
is finished, all executors summarize the calculation results for
the CaaS provider, which aggregates them into the final cal-
culation results and then returns them to the requesting end
equipment.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14757
2) Utility Function Formulation: Provided that the set of
edge energy devices is N = {1, 2, . . . , i, . . . , n}, the end
terminal i sends the request of task offloading. Some of its
computing tasks can be unloaded to MSs, and the rest can
be offloaded to FN. The load to be calculated is denoted as
L = ∑N
i=1 hiDi, where Di is the size of the data and hi repre-
sents a coefficient related to the type of running application.
A calculation task with a computing load L is divided into
a group of subtasks and distributed to a group of selected
MEC servers κ within the resource scheduling period. Each
MEC server chooses to perform subtasks with different com-
puting loads. If the total calculation load is too large during
calculation offloading, a part of the task is allocated to FNs.
Therefore, the collaborative edge calculation process that
coordinates the MSs with the FN is shown in Fig. 6. The
computing services supplier responds to the request of the edge
energy device in light of the MEC server’s utility function. At
the same time, the MEC server determines whether to perform
a subtask according to its own utility function.
The utility function of the MEC server concerns mainly the
reward and computing load status. When responding to energy
end user i, xi
k represents the calculated load promised by the
MEC server k, k ∈ κ . In addition, ri
k (ri
k ≥ 0) and ck are the
per-unit calculation load reward given by the requesting device
i and the per-unit load cost of the MEC server k, respec-
tively. Thus, the profits of the MEC server are (ri
k − ck)xi
k.
Obviously, when ri
k ≥ ck, the MS can obtain revenue or
reach the breakeven point. Furthermore, we should consider
the maximum calculated load sk
max that the MEC server can
support. The risk factors caused by temporary participation in
the calculation of task offloading are assumed to be ξk(xi
k)
2
,
where ξk = wksk
max and wk are the weight coefficients of
the risk factors. Hence, the kth MEC server’s utility can be
formulated as
Ui
k = (
ri
k − ck
)
xi
k − ξk
(
xi
k
)2
. (1)
Similarly, the utility of the jth FN (j ∈ J, where J represents
the set of FNs) is
Ui
j =
(
ri
j − cj
)
xi
j − ξj
(
xi
j
)2
(2)
where ξj = wjg
j
max and where gj
max denotes that the jth FN
can bear the maximum calculated load.
For the requesting end devices, the cost function is rele-
vant mainly to the service cost to be paid. The service charge
of the MS processing unit calculation load is pm; then, what is
the charge received by the MS is pm
∑
k∈κ xi
k. What is more,
if the calculation load exceeds the maximum bearing capac-
ity sk
max, the MSs can transfer the remaining tasks xi
j to FNs.
Therefore, the service overhead of the requested edge energy
devices in the calculation of offloading can be written as
Ci = pm
∑
k∈κ
xi
k + pf
∑
j∈J
xi
j +
∑
k∈κ
ri
kxi
k +
∑
j∈J
ri
jx
i
j
s.t. λiL ≤
∑
k∈κ
xi
k +
∑
j∈J
xi
j ≤ L (3)
where pm and pf are the service charges of the MS and FN
when undertaking the calculation load, respectively. The goal
of the requesting user i is to optimize the reward strategy for
all MSs and FNs, and further minimize the service cost under
the condition of certain constraints while avoiding an excessive
calculated load.
Indeed, the end devices have personal preferences when the
CaaS provider allocates the computational load to MSs or FNs.
Specifically, we introduce a preference ratio λi(0 ≤ λi ≤ 1)
on the basis of the recorded credit evaluation of MSs and FNs
on the blockchain that is created by the monitoring nodes.
Consequently, the requesting client can propose a proportional
constraint λi [as shown in (3)] on the calculated load when the
CaaS provider is distributed to the MSs and FNs.
3) CaaS Scheduling: From the perspective of the end
requestors, as an intelligent agent, the CaaS provider repre-
sents the client in negotiating with the MS and FN about
the reward strategy of the calculated load bearing. This rela-
tionship between requestors and responders exhibits a leader–
follower attribute. Thus, we model this optimized problem as
a two-stage Stackelberg game as
� =
⎧
⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎩
(
N ∪ {sk}k∈κ ∪ {
gj
}
j∈J
)
(
{
xi
k
}
k∈κ
,
{
xi
j
}
j∈J
,
{
ri
k
}
k∈κ
,
{
ri
j
}
j∈J
)
(
Ci,
{
Ui
k
}
k∈κ
,
{
Ui
j
}
j∈J
)
⎫
⎪⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎪⎭
.
In the first stage, the computing task scheduling optimal
demands that {xi
k}k∈κ
, {xi
j}j∈J
be obtained; in the second stage,
the best reward mechanism {ri
k}k∈κ
, {ri
j}j∈J
is determined by
the CaaS provider under the maximization of the energy end
user’s utility function.
4) Game Equilibrium: The optimal solution of the
Stackelberg game model is named the Stackelberg equilib-
rium. At this point, the leader (requesting devices) obtains the
minimum edge computing service cost given the best response
of followers (MS and FN). For the Stackelberg game model
�, the Stackelberg equilibrium is defined as follows.
Definition: A set of strategies ({(ri
k
∗
, xi
k
∗
), (ri
j
∗
, xi
j
∗
)}
k∈κ,j∈J
)
is considered to reach the Stackelberg equilibrium only if it
satisfies the following group of inequalities:
⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎩
∀ri
k, ri
j, Ci
({(
ri
k
∗
, xi
k
∗)
,
(
ri
j
∗
, xi
j
∗)}
k∈κ,j∈J
)
≤ Ci
({(
ri
k, xi
k
∗)
,
(
ri
j, xi
j
∗)}
k∈κ,j∈J
)
∀xi
k, Ui
k
(
ri
k
∗
, xi
k
∗) ≥ Ui
k
(
ri
k
∗
, xi
k
)
∀xi
j, Ui
j
(
ri
j
∗
, xi
j
∗) ≥ Ui
j
(
ri
j
∗
, xi
j
)
.
(4)
The goal of the Stackelberg game model � is to solve
the unique Stackelberg equilibrium so that neither the CaaS
provider (the agent of the requesting devices) nor the energy
device has a motivation to change their decisions. At this point,
no player can benefit from a unilateral change in strategy in
terms of overall cost and personal utility. In other words, when
all participants are in the Stackelberg equilibrium, the ser-
vice provider cannot reduce the reward parameters from the
Stackelberg equilibrium value (ri
k
∗
, ri
j
∗
) to help the request-
ing device reduce the service cost. Similarly, except for the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
14758 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
committed Stackelberg equilibrium value (xi
k
∗
, xi
j
∗
), no arbi-
trary device can further improve personal utility by changing
different calculated load bearing capacities. The best response
of the followers.
It is clear that the second-order derivatives Ui
k with respect
to xi
k are less than 0; i.e., the utility function is concave.
Therefore, when ∂Ui
k/∂xi
k = 0, we can obtain the maximum
value of the function, and the best response is as follows:
xi
k
∗ = ri
k − ck
2ξk
= ri
k − ck
2wksk
max
, ri
k ≥ ck. (5)
When ∂Ui
j/∂xi
j = 0, we obtain
xi
j
∗ = ri
j − cj
2ξj
= ri
j − cj
2wjg
j
max
, ri
j ≥ cj. (6)
Optimal cost of the leaders.
By substituting xi
k
∗
and xi
j
∗
into the end user’s cost func-
tion Ci, the CaaS provider rewrites the cost minimization
problem as
min
ri
k,r
i
j
pm
∑
k∈κ
ri
k − ck
2ξk
+ pf
∑
j∈J
ri
j − cj
2ξj
+
∑
k∈κ
(
ri
k
)2 − ri
kck
2ξk
+
∑
j∈J
(
ri
j
)2 − ri
jcj
2ξj
s.t. λiL ≤
∑
k∈κ
ri
k − ck
2ξk
+
∑
j∈J
ri
j − cj
2ξj
≤ L
ri
k ≥ ck
ri
j ≥ cj. (7)
The Lagrange multipliers α, β, γ, and μ are introduced
into the inequality-constrained problem; then, the Lagrange
function can be expressed as
L =
⎛
⎜
⎝pm
∑
k∈κ
ri
k − ck
2ξk
+ pf
∑
j∈J
ri
j − cj
2ξj
+
∑
k∈κ
(
ri
k
)2 − ri
kck
2ξk
+
∑
j∈J
(
ri
j
)2 − ri
jcj
2ξj
⎞
⎟
⎠
− α
⎛
⎝
∑
k∈κ
ri
k − ck
2ξk
+
∑
j∈J
ri
j − cj
2ξj
− λiL
⎞
⎠
+ β
⎛
⎝
∑
k∈κ
ri
k − ck
2ξk
+
∑
j∈J
ri
j − cj
2ξj
− L
⎞
⎠
− (
ri
k − ck
) − μ
(
ri
j − cj
)
s.t. λiL ≤
∑
k∈κ
ri
k − ck
2ξk
+
∑
j∈J
ri
j − cj
2ξj
≤ L
ri
k ≥ ck
ri
j ≥ cj. (8)
Equation (8) shows that ∂2L /∂(ri
k)
2 = 1/ξk > 0,
∂2L /∂(ri
j)
2 = 1/ξj > 0. Equation (8) is a strictly convex
optimization problem with linear constraints. In other words,
under the condition that xi
k
∗
and xi
j
∗
are known, there are
always unique ri
k
∗
and ri
j
∗
to be solved.
5) Game-Solving Gradient-Based Algorithm: In this article,
we adopt an algorithm based on a gradient to find the solu-
tion of the strictly convex optimization problems mentioned
above and to obtain ri
k
∗
and ri
j
∗
. Equation (8) can be rewrit-
ten as minri
k
∗
,ri
j
∗ L (ri
k, ri
j, α, β, γ, μ), s.t. α, β, γ, μ ≥ 0. The
Lagrange multipliers above are updated in turn according to
the following formula:
αl+1 =
∣
∣
∣
∣
∣
∣
αl − θ
⎛
⎝
∑
k∈κ
ri
k − ck
2ξk
+
∑
j∈J
ri
j − cj
2ξj
− λiL
⎞
⎠
∣
∣
∣
∣
∣
∣
+
β l+1 =
∣
∣
∣
∣
∣
∣
β l + φ
⎛
⎝
∑
k∈κ
ri
k − ck
2ξk
+
∑
j∈J
ri
j − cj
2ξj
− L
⎞
⎠
∣
∣
∣
∣
∣
∣
+
γ l+1 =
∣
∣
∣γ l − ϑ
(
ri
k − ck
)∣∣
∣
+
μl+1 =
∣
∣
∣μl − σ
(
ri
j − cj
)∣
∣
∣
+
(9)
where l indicates the updated rounds and θ, φ, ϑ, and σ rep-
resent the updated step size. In addition, | � |+ = max(�, 0).
Regarding (ri
k)
l+1
and (ri
j)
l+1
, we calculate these terms accord-
ing to the KKT condition. From ∂L/∂ri
k = 0 and ∂L/∂ri
j = 0,
we obtain
(
ri
k
)l+1 = 1
2
(
ck + αl − β l − pm
)
+ ξkγ
l
(
ri
j
)l+1 = 1
2
(
cj + αl − β l − pf
)
+ ξjμ
l. (10)
According to the aforementioned updating expression, an
iterative algorithm based on the gradient method is proposed
(Algorithm 1) to determine the Stackelberg equilibrium. In the
application, the CaaS provider acts as the agent of the request-
ing devices to negotiate with the MS or FN in each Stackelberg
game. We input the data size of computing tasks and basic
parameters, including the MS/FN charge of CaaS, risk factors
bearing the computing task, and edge energy devices’ prefer-
ences for offloading tasks. We then initialize the number of
iterations, Lagrange multipliers, updated step size, etc. Then,
we iteratively calculate the rewards of the MS and FN until
the condition satisfies threshold ε; hence, the current rounds
of the MS and FN rewards are the optimal rewards ri
k
∗ = (ri
k)
l
and ri
j
∗ = (ri
j)
l
. Next, we can calculate the follower’s optimal
offloading tasks xi
k
∗
and xi
j
∗
. Finally, we output the comput-
ing load distribution and reward strategy of CaaS scheduling
{(xi
k
∗
, xi
j
∗
), (ri
k
∗
, ri
j
∗
)}
k∈κ,j∈J
. The utilities of the participants
are Ui
k
∗
, Ui
j
∗
, and Ci
∗.
Theorem: There is a unique Stackelberg equilibrium
between the CaaS provider and all edge energy devices.
Proof: Given the incentive mechanism, the edge energy
devices act as followers. Since the utility function is a con-
cave function, it always has optimal responses xi
k
∗
and xi
j
∗
.
As a leader, based on the prediction of xi
k
∗
and xi
j
∗
, the CaaS
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14759
Fig. 7. Flow of cross-chain data sharing.
Algorithm 1 Gradient-Based Iterative Algorithm to Find the
Equilibrium of the Stackelberg Game
Input: Edge computing tasks and corresponding
parameters pm, pf , {hi, Di, λi},
{
ck, ωk, sk
max
}
k∈κ
and{
cj, ωj, gj
max
}
j∈J
.
Output: Computing load distribution and reward strat-
egy of CaaS scheduling
{
(xi
k
∗
, xi
j
∗
), (ri
k
∗
, ri
j
∗
)
}
k∈κ,j∈J
; the
utility of participants Ui
k
∗
,Ui
j
∗
, Ci
∗.
Initialize: l = 0, α0, β0, γ 0, μ0, ri
k
0
, ri
j
0
and θ, φ, ϑ, σ .
Calculate L =
N∑
i=1
hiDi, ξk = wksk
max, ξj = wjg
j
max.
While l = l + 1
The CaaS provider updates αl+1, β l+1, γ l+1, μl+1 based
on (9);
The CaaS provider updates (ri
k)
l+1
, (ri
j)
l+1
according to
(10);
Until
∣
∣
∣(ri
k)
l − (ri
k)
l−1
∣
∣
∣ ≤ ε and
∣
∣
∣(ri
j)
l − (ri
j)
l−1
∣
∣
∣ ≤ ε
Determine the optimal reward: ri
k
∗ = (ri
k)
l
,ri
j
∗ = (ri
j)
l
.
For all the edge energy devices in the set of N, do
according to Eqs. (5) and (6), calculate xi
k
∗
and xi
j
∗
based
on ri
k
∗ = (ri
k)
l
,ri
j
∗ = (ri
j)
l
.
If L − ∑
k∈κ
xi
k
∗ − ∑
j∈J
xi
j
∗ 	= 0
Allocate the remaining calculation L − ∑
k∈κ
xi
k
∗ − ∑
j∈J
xi
j
∗
to
the near edge energy devices.
end
With Eqs. (1)-(3), calculate the utility of the MS, FN and
edge energy devices Ui
k
∗
,Ui
j
∗
, Ci
∗, respectively.
End
provider can make the optimization function L in (8), which is
proven to be a strictly convex optimization problem. Therefore,
the CaaS provider can establish the optimal solutions ri
k
∗
and ri
j
∗
by using Algorithm 1. For the leader, given the
best strategies of all edge energy devices, the CaaS provider
always has a unique optimal strategy. In the end, both lead-
ers and followers are completely satisfied, and the decisions
{(ri
k
∗
, xi
k
∗
), (ri
j
∗
, xi
j
∗
)}
k∈κ,j∈J
maximize their respective utility
simultaneously. In addition, all participants have their opti-
mized payments and expenses. Considering the strategies
chosen by other members in the game model, the members
have no reason to change their decisions and take other actions.
Therefore, in this game model, the unique Stackelberg equi-
librium state represented by {(ri
k
∗
, xi
k
∗
), (ri
j
∗
, xi
j
∗
)}
k∈κ,j∈J
can
be achieved.
B. Cross-Chain Data Sharing
Assume that an edge server on edgechain A needs to have
access to the data, specifically the data information in domain
Id2 on edgechain C to improve the computing efficiency.
The specific flow is shown in Fig. 7. When receiving the
request of edgechain A, the service API of edgechain C on
the cloudlet chain is invoked. Then, the request is forwarded
until edgechain C responds to this request and returns the data
by the hash encryption from domain Id2 to the cloudlet chain.
Next, the service API of edgechain A is invoked for edge data
sharing service. Finally, the data arrive at the requested edge
server on edgechain A. Similarly, data sharing between any
two edgechains can be realized by this approach.
C. Communication Complexity and Overhead
In our proposed system, the communication complexity and
overhead are analyzed (Fig. 8). This involves tasks upload-
ing, tasks scheduling, tasks offloading, tasks computing, and
computing result storage.
S1 (Task Uploading:) The constrained edge energy devices
N upload the tasks to the CaaS provider. During this progress,
the communication complexity is O(N), and the time overhead
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
14760 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
Fig. 8. Communication flow of our proposed system.
is expressed as
T tran
i = |Di|/ri = |Di|/Wlog2(1 + SNR) (11)
where We is the bandwidth and the signal-to-noise ratio is
SNR ∈ [70, 110] dB.
S2 (Task Scheduling): The CaaS provider determines the
optimal offloading and rewards between the requesters and
MS/FN according to the two-stage Stackelberg game. The time
overhead and complexity are Tgame and O(N), respectively.
S3 (Task Offloading): After obtaining the scheduling strat-
egy, the provider conducts tasks assignment, offloading the
computing data to the MS/FN near requested devices in
the same domain. The communication complexity is O(N).
Similarly, the time cost is T tran
i .
S4 (Task Computing): The designated task undertaker
accomplishes the assignment. The communication complexity
is O(N) (because the number of MSs and FNs is less than the
large number of edge energy devices N). The time overhead is
Tcom
i = I
ce|Di|
fe
. (12)
Here, I ∈ (0, 1) means the computing accuracy, and the data
size to be calculated for the edge energy device is |Di|, ce indi-
cates the number of CPU cycles for the MSs/FNs to process
per data size, and fe means the CPU frequency of MSs/FNs.
S5 (Computing Result Storage): Once the MSs/FNs finish
the calculation task, they receive the previously determined
rewards by game. For the computing results, the consensus
mechanism is employed to ensure trusted data storage and
tamper resistance. For PBFT, the primary node accepts the
consensus request from the client, and then it sends the data
to the remaining (N − 1) nodes for voting [Fig. 9(a)]; hence,
the interaction complexity is O(N2).
To decrease the communication interaction to O(N) while
considering the multichain consensus in our devised system,
the DLPBFT consensus method is applied, as shown in
Fig. 9(b).
The time of consensus is Tcons
i = tstore−tvote = t3′−t1; tstore
means the block time stored in the chain, and tvote indicates
the time to start voting.
The leader of the edgechain is selected according to the edge
node’s comprehensive ability in terms of computing, com-
municating, and caching. Then, the second-level consensus is
implemented among each edgechain leader.
Based on the above analysis, the total communication com-
plexity is O(N) (since the number of blockchain consensus
nodes is less than the large number of edge energy devices
Fig. 9. Consensus process comparison. (a) PBFT. (b) DLPBFT.
N), and the total time spent is
T = 2T tran
i + Tgame + Tcom
i + Tcons
i . (13)
D. Tamper Resistance
In our proposed multiedgechain structure, every
edgechain ElA , ElB , ElC , ElD is responsible for the
data storage of the corresponding domain, including
energy trading, intelligent manufacturing, and elec-
tric vehicles in the IIoE. Each edge block format is
El = <pre_hash, hEl , t, m_root, Sig, Id_device, Id_MS/FN>.
The Ids of four edgechains and the summary info of the
cloud computing results are stored on the cloudlet chain
Cl = <Id(El), hc, tc>. The purpose of this design lies in data
isolation and classified storage for security, and convenient
management as well as promoting the data processing speed
in parallel.
When CaaS scheduling is finished, the related data and
computing results are broadcasted in the corresponding type
of edgechain (or the two edgechains for CaaS scheduling
between two edgechains). In the edgechain, consensus nodes
of this period collect all the corresponding types of consen-
sus requests within this time and then produce a block. After
the edge block is constructed, the builder of the edge block is
responsible for raising another consensus request and broad-
casting in the cloudlet chain. The voting representative nodes
(namely, the builders of the four edgechain blocks) of the cloud
chain reach a consensus on information submitted by all cre-
ators of edge blocks within one block time and store it in
the next cloud block attaching the edgechain Id of the data
source. In this way, the construction of the cloud chain block
is completed.
The trusted storage of a multichain structure adopts a cost-
based approach to ensure that the blockchain model cannot
be tampered with, but its security is further improved over
that of the single chain structure. If a malicious node seeks to
modify any block, it needs to not only modify all subsequent
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14761
blocks under the chain but also alter the subsequent blocks of
all other chains related to the block. Assuming that the height
of block m tampered with by malicious node in Cl is hcm ,
the block height in El = ElA , ElB , ElC , ElD storing related and
more detailed computing data is hEm = hEmA , hEmB , hEmC , hEmD ,
the current height of Cl is hc, and the current height of El
is hEl = {hElA
, hElB
, hElC
, hElD
}. Suppose that when falsifying
block m, the minimum number of blocks to be modified on a
single node is as follows:
Bnum =
(
hElA
− hEmA
)
× nElA
+
(
hElB
− hEmB
)
× nElB
+
(
hElC
− hEmC
)
× nElC
+
(
hElD
− hEmD
)
× nElD
+ (
hc − hcm
) × N (14)
where nElA
, nElB
, nElC
, and nElD
are the blockchain node
numbers of ElA , ElB , ElC , and ElD , respectively. Because the
verification block is saved in the whole network, N represents
the total node numbers in the edge–cloudlet chain.
To tamper with a certain block, at least Bnum related blocks
need to be tampered with in the whole network. In this case,
modifying any data requires modifying almost all network
data, incurring a very large cost. In the majority of cases, the
price is far greater than the benefits of tampering. Moreover,
under the normal operation of the whole network, the tamper-
ing cost increases with time, and the growth rate is much
higher than that of a single chain structure. Only by con-
trolling the voting rights of all edgechains and cloud chain
can the attacker tamper with the block data, which means
that the attacker must control almost all nodes in the system.
Based on this, the multichain structure cannot be tampered
with under the condition that a certain number of trusted nodes
can complete the consensus normally.
IV. SIMULATION EXPERIMENTS AND RESULTS ANALYSIS
First, we analyze the utility of the offloading computation
with several sets of experimental parameters in MATLAB for
the proposed Stackelberg game-based CaaS scheme. Then,
both computational result storage and cross-chain data shar-
ing are implemented on the multichain structure, which is
most applicable to the increasing number of edge devices and
applications in the IIoE. Four edgechains are deployed on a
distributed local area network and require a Core CPU with
32-GB memory. Here, the total number of nodes in each pri-
vate edgechain is set to 5, and the number of nodes in each
consortium edgechain is set to 20. In particular, edgechain A
acts as a private blockchain and edgechain C acts as a con-
sortium blockchain. All the nodes on both edgechains are
equipment with JDK 1.8, distributed data storage MySQL
5.7. In addition, Spring is adopted as the underlying frame-
work. GRPC serves as the communication protocol among
blockchain nodes on the same edgechain.
A. Security Analysis
1) Asymmetric Cryptographic Algorithm Based on ECC:
An elliptic curve Ep(a, b) is a set defined as y2 = x3 +ax+b,
a ≥ 0, b ≥ 0, x, y ∈ [0, p − 1] (where p is a prime). A cyclic
group G is formed by all points on the elliptic curve and the
infinite point O [47]. Let G1 and G2 be two cyclic groups
with the same prime order q. G1 and G2 are the additive cyclic
group and multiplicative cyclic group, respectively. We assume
that e : G1 × G1 → G2 has the bilinear map’s properties of
nondegeneracy, bilinearity, and computability [47].
Parameter Establishment: It is assumed that with a secure
parameter k, an edge energy node selects two groups G1 and
G2 with the same prime order q. In addition, e is a bilinear
mapping. We randomly select a generator P ∈ G1. Then, a
number s ∈ Z∗
q is chosen as the node’s master private key,
and the public key is calculated according to Ppub = s · P.
The pair of keys is used to encrypt and decrypt computing
messages preventing malicious manipulation. To protect the
identity anonymity and message security of energy terminals,
two secure hash functions are selected: 1) H1 : {0, 1}∗ → G1
and 2) H2 : {0, 1}∗ → Z∗
q , respectively. Public parameters
{G1, G2, e, n, q, P, Ppub, h1, h2} are broadcast among nodes.
Public–Private Key Pair Generation of Energy Devices: By
randomly selecting a number si ∈ Z∗
q as the private key, the
energy terminal device calculates the corresponding public key
Pi = si ·P so that signatures can be generated and identity can
be verified.
Note that the public parameters must be kept confidential.
Then, the energy terminals and MSs/FNs can confirm the
reliability of the received messages. Furthermore, they send
encrypted messages with their signatures during the calcula-
tion results (namely, block) verification. Due to the inability
to solve the key mathematical problem, it is nearly impossible
for attackers to compute correct digital signatures given ECC
results. With asymmetric cryptography, the blockchain guar-
antees the integrity and security of computing messages in the
broadcasting.
2) DLPBFT Consensus Mechanism: In the proposed mul-
tichain structure, the DLPBFT consensus algorithm is imple-
mented to vote for the calculation messages, including data and
results after game optimization, and then provides traceability
and secure data confidentiality. In the first level of DLPBFT,
we assume that the number of edgechain nodes is nEl . For
each round of consensus, we select the edgechain primary peer
nElp
(p = (h mod nEl)+1) based on the node’s comprehensive
ability ranking. The top 80% of nodes (except for the master
node) are ordinary consensus nodes and vote for the received
message from master peer broadcasting; the remaining nodes
serve as the storage node. In the second level of DLPBFT, the
consensus nodes consist of each edgechain’s primary peers so
that the trust of nodes is guaranteed, and the consensus effi-
ciency can be improved as a result of reducing the number of
consensus nodes.
Moreover, during each round of the consensus process,
voting is divided into two phases: 1) reserve block voting
and 2) formal block voting. First stage: the receiving block
message is expressed as <preblock, Sigp> (Sigp is the sig-
nature of the master peer). If the master peer receives votes
from over 2f + 1 (f = |(nEl − 1)/3| represents the maxi-
mum number of malicious peers) different ordinary nodes,
then it enters the second stage. It then broadcasts the for-
mal block <pre_hash, h, t, m_root, Sigod> messages among
the others. (Here, pre_hash is the previous block hash, t is
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
14762 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
Fig. 10. Comparison of communication time overhead.
Fig. 11. Impact of preferences.
Fig. 12. Iterations of MSs reward.
the timestamp, m_root represents the Merkel root, which com-
prises hashed transaction, and Sigod stands for the signature
of ordinary peer.) As long as the primary node receives over
2f + 1 votes, consensus is reached, generating a new block
on the edgechain. Otherwise, the block is abandoned, and a
new consensus round starts. Based on this trusted and fault-
tolerant consensus mechanism, voting can securely operate
even though malicious peers exist.
3) Data Confidentiality and Tamper-Proofness: It is well
known that the data confidentiality of blockchain depends
upon the consensus mechanism and encrypted storage. The
blockchain storage structure comprises chronological blocks
in which each block includes the cryptographic hash of the
previous block. Therefore, it is difficult to falsify one block
without tampering with all the subsequent blocks. Moreover,
the computing data contained in a block are encrypted with an
asymmetric encryption algorithm. It would take a large amount
of resources to decrypt the encrypted data without knowing the
private key.
4) Transparency and Traceability: The transparency of
blockchain technology is ensured by permitting all users and
the edge computing provider to have access to the blockchain
Fig. 13. Iterations of FNs reward.
Fig. 14. Utilities of the MS with various risk factors.
and monitor the corresponding data. That is, the calculated
data are not stored by one single node but are open to all
entities in the consortium. As a result, any malicious data
modification is noticeable and traceable.
B. Performance Analysis
1) Communication Overhead: In contrast with the cloud
computing mode, which uploads all the computing tasks from
the edge energy devices to the remote cloud server, the advan-
tage of collaborative edge computing in the edge range lies in
its low time delay and fast response for the calculation requests
of edge energy IoT devices. Under the analysis in Section III,
We ∈ [200, 500] Mb/s is the 5G bandwidth, the data size to be
calculated for the edge energy device is |Di| = 200 MB, and
the CPU frequency of each MS /FN ce, fe is 3 GHz. The total
time consumption of our proposed scheme and cloud comput-
ing is shown in Fig. 10. Subjected to the transmission distance
as well as signal interference factors, the average communica-
tion overhead of collaborative edge computing is 35.5% less
than that of cloud computing when adopting the DLPBFT
algorithm. Moreover, even in collaborative edge computing,
the average time overhead of PBFT is 20% higher than that
of DLPBFT. The reduced consensus time complexity indicates
that the consensus efficiency has been improved.
2) Utility Analysis: Because of the limited computing
capacity of edge devices, it is optimal for the MSs and FNs
to undertake the computation-intensive tasks offloaded by the
end devices. Combined with the Stackelberg game-theoretical
approach, the offloading cost of the edge energy devices can
be minimized and the utilities of the MS/FN are maximized.
According to Section III, as a leader in the Stackelberg game,
optimal offloading tasks of edge energy devices rely on the
follower MS and FN reward strategy solved by the gradient-
based method. After acquiring the rewards, the utility of the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14763
Fig. 15. Relationship between the unit cost of the MS or FN bearing the computation and the corresponding rewards as well as providing demands. (a) Utilities
vary with FN rewards. (b) Utilities vary with FN’s bearing tasks. (c) Utilities vary with MS’s bearing tasks.
MS/FN and the offloading cost of the edge terminals can be
obtained. Considering the requester’s preferences and the com-
puting provider’s risk factors, we set the range of preference,
unit cost, risk factors, and charge of offloading computation
as λi ∈ [0, 1], ck, cj ∈ [0.1, 1.5], ξk, ξj ∈ [100, 1000], and
pm, pf ∈ [1, 10], respectively.
Fig. 11 illustrates the impact of preferences on the unit
reward and the utilities of the MS and FN. With the growth of
the preference value, the unit incentive provided by the edge
device becomes stronger. Although the unit reward is raised,
the utilities of the FN and MS are decreased. This reflects that
the computation offloading requester’s preference has a great
influence on the provider’s utilities. Thus, the CaaS provider
should consider the profits of participants as well as the user’s
preference and rationally allocate the computing tasks.
Figs. 12 and 13 show the iterations of rewards ri
k and ri
j
influenced by different parameters, respectively. To carry out a
reasonable analysis, we compare the rounds of iterations of the
rewards ri
k and ri
j under the different charges of CaaS, unit cost,
preferences, and risk factors when bearing the offloading tasks.
From Fig. 12, the iteration of the rewards for the MEC server
converges in rounds 7, 10, 6, and 8 under the influence of the
charge, unit cost, preference, and risk factors, respectively. The
performance is faster than that of [48], converging at round 18.
The number of iterations of the FN’s reward received from
the end energy device converges at rounds 7, 10, 10, and
8 under the influence of the charge, unit cost, preference,
and risk factors, respectively. This proves that the proposed
gradient-based iterative algorithm is effective in seeking game
equilibria.
We consider a scenario, where the utilities of the MS and
FN have various factors of risk ξk and ξj and vary with the
different rewards ri
k and ri
j and offloading tasks xi
k and xi
j.
As shown in Fig. 14, there is a downward trend for the util-
ity of the MS when it is faced with increased risk factors.
Specifically, the minimum risk factors ξk = 300 and ξj = 200
lead to the greatest benefits for the MS, and the largest risk
factors ξk = 900 and ξj = 800 appear to be the lowest profits
curve considering the reward change. On the one hand, under
the same risk factor, more rewards ri
k assigned by the CaaS
provider contribute to the increased revenue.
In addition, Fig. 15(a)–(c) shows the relationship between
the unit cost of the MS/FN and the offloading tasks sent
by the energy end device. As the unit costs of the MS and
Fig. 16. Different parameters influenced by CaaS charges.
FN decline, both the MS and FN tend to undertake more
offloading computation xi
k and xi
j; hence, the corresponding
rewards gradually increase.
Finally, we discuss the impact of different charges on
MS/FN rewards, offloading loads, and profits. As shown in
Fig. 16, before game optimization, the cost of the end device
linearly increases. With a higher charge for the edge computing
services pm and pf , the rewards ri
k and ri
j, number of calcu-
lated tasks xi
k and xi
j, and utilities Ui
k and Ui
j decrease. This
is because the improved price reduces the willingness of the
edge device to offload computing tasks. Furthermore, although
the CaaS price increases, it is clear that the cost of the end
device Ci is reduced by our proposed optimized approach.
3) Difficulty of Block Tampering: Assuming that there are
four edgechains El = ElA , ElB , ElC , ElD , the current height of
each edgechain and cloudchain is 30, and the height of block
m tampered with by malicious node is 10. Based on the analy-
sis in Section III, we can calculate the number of blocks to be
tampered with for a single node in the single-edge blockchain
and multichain structures. Fig. 17 shows the comparison of the
number of blocks to be modified between the single blockchain
and multichain structures. The more nodes there are in each
edgechain, the more difficulty the malicious node faces in
modifying blocks. However, when comparing the number of
blocks tampered with, it is not hard to find that our designed
multichain structure is more difficult to modify than single
chain and double blockchains.
4) TPS of the Edgechain: For one edgechain, we adopt the
DLPBFT consensus algorithm to maintain data consistency of
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
14764 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
Fig. 17. Comparison of the number of blocks to be tampered.
Fig. 18. TPS of the edgechain.
Fig. 19. Comparison of consensus algorithms.
computing. If there is only one blockchain in the IIoE, it is
clear that the tolerable number of malicious nodes is nonneg-
ligible and is in fact large for a high rate of energy terminal
nodes joining the blockchain system. At this time, the advan-
tages of the multiedgechain structure we designed emerge.
Since each edgechain can operate independently and achieve
consensus by itself, the TPS of the edgechain is significantly
improved over the situation of one blockchain, and the security
is ensured because the number of malicious nodes declines to
an acceptable level. We now analyze the performance of the
edgechain when we utilize the DLPBFT. As shown in Fig. 18,
to guarantee that the TPS is not affected, the optimal block size
is 2000 transactions, which is larger than the 1500 transactions
of the PBFT consensus algorithm. Moreover, the optimal block
size of the DPoS reputation-based consensus algorithm in [49]
is nearly one-quarter that of the DLPBFT. Fig. 19 shows that
the transaction confirmation time of PBFT is greater than that
Fig. 20. Realization of cross-chain edge data sharing.
of our proposed algorithm. Additionally, the DPoS reputation-
based confirmation time is eight times that of DLPBFT as the
blocksize (meaning the number of transactions included in a
block) increases.
5) Cross-Chain Edge Data Sharing: Herein, we use
Postman to verify cross-chain interface call testing (Fig. 20).
Through the proposed methods, the edge data of the desired
sharing in one edgechain can be called and read by the
requesters from other edgechains.
V. CONCLUSION
In this article, we proposed a structure of multiedgechain
for edge devices dealing with real-time computing tasks in
the IIoE. The proposed framework, which reduces the storage
burden of a single blockchain and improves the computing
efficiency, enables the edge devices and applications to reli-
ably store the computing information. Then, the problem of
offloading computation in collaborative edge computing was
modeled as a two-stage leader–follower game. The gradient-
based iterative algorithm was applied to obtain the optimal
reward and a computational offloading strategy under the var-
ious impact indices including preferences and risk factors.
We also considered the interoperability among heteroge-
neous edgechains and edge–cloud collaboration in the IIoE.
Therefore, a method of cross-chain edge data sharing by
cloudlet chain is achieved. The simulation results validated the
theoretical analysis and the effectiveness of the proposed algo-
rithms. In future studies, we plan to specifically analyze the
energy consumption for the proposed architecture and consider
the optimized blockchain node classification methods. There
are potential directions worth exploring in cross-chain energy
trading and other digital asset trading among different fields.
REFERENCES
[1] X. Li, J. Wan, H. N. Dai, M. Imran, M. Xia, and A. Celesti, “A hybrid
computing solution and resource scheduling strategy for edge computing
in smart manufacturing,” IEEE Trans. Ind. Informat., vol. 15, no. 7,
pp. 4225–4234, Jul. 2019.
[2] C. Yu, B. Lin, P. Guo, W. Zhang, S. Li, and R. He, “Deployment and
dimensioning of fog computing-based Internet of Vehicle infrastruc-
ture for autonomous driving,” IEEE Internet Things J., vol. 6, no. 1,
pp. 149–160, Feb. 2019.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
BAI et al.: TRUSTWORTHY BLOCKCHAIN-EMPOWERED COLLABORATIVE EDGE COMPUTING-AS-A-SERVICE SCHEDULING AND DATA SHARING 14765
[3] R. Yang, F. R. Yu, P. Si, Z. Yang, and Y. Zhang, “Integrated blockchain
and edge computing systems: A survey, some research issues and chal-
lenges,” IEEE Commun. Surveys Tuts., vol. 21, no. 2, pp. 1508–1532,
2nd Quart., 2019.
[4] J. Xu, B. Palanisamy, H. Ludwig, and Q. Wang, “Zenith: Utility-aware
resource allocation for edge computing,” in Proc. IEEE Int. Conf. Edge
Comput. (EDGE), 2017, pp. 47–54.
[5] L. Yin, J. Luo, and H. Luo, “Tasks scheduling and resource allocation
in fog computing based on containers for smart manufacturing,” IEEE
Trans. Ind. Informat., vol. 14, no. 10, pp. 4712–4721, Oct. 2018.
[6] M. Li, N. Cheng, J. Gao, Y. Wang, L. Zhao, and X. Shen, “Energy-
efficient UAV-assisted mobile edge computing: Resource allocation and
trajectory optimization,” IEEE Trans. Veh. Technol., vol. 69, no. 3,
pp. 3424–3438, Mar. 2020.
[7] J. Fang and A. Ma, “IoT application modules placement and dynamic
task processing in edge-cloud computing,” IEEE Internet Things J., early
access, Jul. 7, 2020, doi: 10.1109/JIOT.2020.3007751.
[8] S. Goudarzi, M. H. Anisi, H. Ahmadi, and L. Mousavian, “Dynamic
resource allocation model for distribution operations using SDN,” IEEE
Internet Things J., vol. 8, no. 2, pp. 976–988, Jan. 2021.
[9] Q. Luo, C. Li, T. H. Luan, and W. Shi, “Collaborative data scheduling
for vehicular edge computing via deep reinforcement learning,” IEEE
Internet Things J., vol. 7, no. 10, pp. 9637–9650, Oct. 2020.
[10] S. Guo, Y. Dai, S. Guo, X. Qiu, and F. Qi, “Blockchain meets edge
computing: Stackelberg game and double auction based task offload-
ing for mobile blockchain,” IEEE Trans. Veh. Technol., vol. 69, no. 5,
pp. 5549–5561, May 2020.
[11] Q. Xu, Z. Su, Q. Zheng, M. Luo, B. Dong, and K. Zhang, “Game
theoretical secure caching scheme in multihoming edge computing-
enabled heterogeneous networks,” IEEE Internet Things J., vol. 6, no. 3,
pp. 4536–4546, Jun. 2019.
[12] Y. Chen, Z. Li, B. Yang, K. Nai, and K. Li, “A Stackelberg game
approach to multiple resources allocation and pricing in mobile edge
computing,” Future Gener. Comput. Syst., vol. 108, pp. 273–287,
Jul. 2020.
[13] Y. Bai, L. Chen, L. Song, and J. Xu, “Risk-aware edge computation
offloading using Bayesian Stackelberg game,” IEEE Trans. Netw. Serv.
Manag., vol. 17, no. 2, pp. 1000–1012, Jun. 2020.
[14] Z. Chang, W. Guo, X. Guo, Z. Zhou, and T. Ristaniemi, “Incentive
mechanism for edge-computing-based blockchain,” IEEE Trans. Ind.
Informat., vol. 16, no. 11, pp. 7105–7114, Nov. 2020.
[15] B. Huang et al., “BPS: A reliable and efficient pub/sub communication
model with blockchain-enhanced paradigm in multi-tenant edge cloud,”
J. Parallel Distrib. Comput., vol. 143, pp. 167–178, Sep. 2020.
[16] S. Zhang and J.-H. Lee, “A group signature and authentication scheme
for blockchain-based mobile-edge computing,” IEEE Internet Things J.,
vol. 7, no. 5, pp. 4557–4565, May 2020.
[17] Q. Kong, L. Su, and M. Ma, “Achieving privacy-preserving
and verifiable data sharing in vehicular fog with blockchain,”
IEEE Trans. Intell. Transp. Syst., early access, Apr. 16, 2020,
doi: 10.1109/TITS.2020.2983466.
[18] A. Back et al., “Enabling blockchain innovations with pegged
sidechains,” 2014.
[19] A. Singh, K. Click, R. M. Parzi, Q. Zhang, A. Dehghantanha, and
K. K. R. Choo, “Sidechain technologies in blockchain networks:
An examination and state-of-the-art review,” J. Netw. Comput. Appl.,
vol. 149, Jan. 2020, Art. no. 102471.
[20] M. Li, H. Tang, A. R. Hussein, and X. Wang, “A sidechain-based decen-
tralized authentication scheme via optimized two-way peg protocol for
smart community,” IEEE Open J. Commun. Soc., vol. 1, pp. 282–292,
2020.
[21] E. Zaghloul, K. Zhou, and J. Ren, “P-MOD: Secure privilege-based
multilevel organizational data-sharing in cloud computing,” IEEE Trans.
Big Data, vol. 6, no. 4, pp. 804–815, Dec. 2020.
[22] H. He et al., “Joint operation mechanism of distributed photovoltaic
power generation market and carbon market based on cross-chain trading
technology,” IEEE Access, vol. 8, pp. 66116–66130, 2020.
[23] N.-Y. Lee, J. Yang, M. M. H. Onik, and C.-S. Kim, “Modifiable pub-
lic blockchains using truncated hashing and sidechains,” IEEE Access,
vol. 7, pp. 173571–173582, 2019.
[24] I. A. Seres, L. Gulyás, D. A. Nagy, and P. Burcsi, Topological Analysis
of Bitcoin’s Lightning Network, 2019.
[25] X. Xu, X. Zhang, H. Gao, Y. Xue, L. Qi, and W. Dou, “Become:
Blockchain-enabled computation offloading for IoT in mobile edge com-
puting,” IEEE Trans. Ind. Informat., vol. 16, no. 6, pp. 4187–4195,
Jun. 2020.
[26] P. Dong, X. X. Wang, J. J. P. C. Rodrigues, and Z. Ning, “Deep reinforce-
ment learning for vehicular edge computing: An intelligent offloading
system,” ACM Trans. Intell. Syst. Technol., vol. 10, no. 6, p. 60,
2019.
[27] X. Qiu, L. Liu, W. Chen, Z. Hong, and Z. Zheng, “Online deep rein-
forcement learning for computation offloading in blockchain-empowered
mobile edge computing,” IEEE Trans. Veh. Technol., vol. 68, no. 8,
pp. 8050–8062, Aug. 2019.
[28] E. Chang, K. Y. Chan, P. Clark, and V. Potdar, “Guest editorial:
Blockchain and AI enabled 5G mobile edge computing,” IEEE Trans.
Ind. Informat., vol. 16, no. 11, pp. 7067–7069, Nov. 2020.
[29] K. Zhang, Y. Zhu, S. Maharjan, and Y. Zhang, “Edge intel-
ligence and blockchain empowered 5G beyond for the indus-
trial Internet of Things,” IEEE Netw., vol. 33, no. 5, pp. 12–19,
Oct. 2019.
[30] Y. Jiao, P. Wang, D. Niyato, and Z. Xiong, “Social welfare maximization
auction in edge computing resource allocation for mobile blockchain,”
in Proc. IEEE Int. Conf. Commun. (ICC), Kansas City, MO, USA, 2018,
pp. 1–6.
[31] N. C. Luong, Z. Xiong, P. Wang, and D. Niyato, “Optimal auction for
edge computing resource management in mobile blockchain networks:
A deep learning approach,” in Proc. IEEE Int. Conf. Commun. (ICC),
Kansas City, MO, USA, 2018, pp. 1–6.
[32] Z. Xiong, S. Feng, D. Niyato, P. Wang, and Z. Han, “Optimal pricing-
based edge computing resource management in mobile blockchain,” in
Proc. IEEE Int. Conf. Commun. (ICC), Kansas City, MO, USA, 2018,
pp. 1–6.
[33] A. Asheralieva and D. Niyato, “Distributed dynamic resource manage-
ment and pricing in the IoT systems with blockchain-as-a-service and
UAV-enabled mobile edge computing,” IEEE Internet Things J., vol. 7,
no. 3, pp. 1974–1993, Mar. 2020.
[34] L. Duan, L. Gao, and J. Huang, “Cooperative spectrum sharing: A
contract-based approach,” IEEE Trans. Mobile Comput., vol. 13, no. 1,
pp. 174–187, Jan. 2014.
[35] A. Fu, S. Yu, Y. Zhang, H. Wang, and C. Huang, “NPP: A new
privacy-aware public auditing scheme for cloud data sharing with
group users,” IEEE Trans. Big Data, early access, May 5, 2017,
doi: 10.1109/TBDATA.2017.2701347.
[36] Y. Pu, C. Hu, S. Deng, and A. Alrawais, “R2PEDS: A recoverable and
revocable privacy-preserving edge data sharing scheme,” IEEE Internet
Things J., vol. 7, no. 9, pp. 8077–8089, Sep. 2020.
[37] H. Deng, Z. Qin, L. Sha, and H. Yin, “A flexible privacy-preserving data
sharing scheme in cloud-assisted IoT,” IEEE Internet Things J., vol. 7,
no. 12, pp. 11601–11611, Dec. 2020.
[38] S. Qi, Y. Lu, Y. Zheng, Y. Li, and X. Chen, “Cpds: Enabling com-
pressed and private data sharing for industrial Internet of Things over
blockchain,” IEEE Trans. Ind. Informat., vol. 17, no. 4, pp. 2376–2387,
Apr. 2021.
[39] S. Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System. Accessed:
Oct. 31, 2008. [Online]. Available: https://bitcoin.org/bitcoin.pdf
[40] M. B. Mollah et al., “Blockchain for future smart grid: A comprehensive
survey,” IEEE Internet Things J., vol. 8, no. 1, pp. 18–43, Jan. 2021.
[41] L. Chen, L. Xu, N. Shah, Z. Gao, Y. Lu, and W. Shi, “On security anal-
ysis of proof-of-elapsed-time (poET),” in Proc. Int. Symp. Stabilization
Safety Security Distrib. Syst., 2017, pp. 282–297.
[42] D. Larimer. Delegated Proof of Stake Blockchain. Accessed: Apr.
3, 2014. [Online]. Available: https://en.bitcoinwiki.org/wiki/DPoS
[43] L. Lamport, R. Shostak, and M. Pease, “The Byzantine generals
problem,” ACM Trans. Program. Lang. Syst., vol. 4, no. 3, pp. 382–401,
1982.
[44] A. Kiayias, A. Russell, B. David, and R. Oliynykov, Ouroboros: A
Provably Secure Proof-of-Stake Blockchain Protocol, 2017.
[45] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich. (2017).
Algorand: Scaling Byzantine Agreements for Cryptocurrencies. [Online].
Available: https://people.csail.mit.edu/nickolai/papers/gilad-algorand.pdf
[46] T. Rocketet, “Snowflake to avalanche: A novel metastable consensus
protocol family for cryptocurrencie,” 2018.
[47] S. Guo, X. Hu, S. Guo, X. Qiu, and F. Qi, “Blockchain meets edge com-
puting: A distributed and trusted authentication system,” IEEE Trans.
Ind. Informat., vol. 16, no. 3, pp. 1972–1983, Mar. 2020.
[48] X. Huang, “Research on resource and service optimization in edge
computing of Internet of Vehicles,” Ph.D. dissertation, School Autom.,
Guangdong Univ. Technol., Guangzhou, China, 2019.
[49] F. Wei, “Research and application of the improved DPoS blockchain
consensus mechanism,” Ph.D. dissertation, School info., Yunnan Univ.
Finance Econ., Kunming, China, 2020.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/JIOT.2020.3007751
http://dx.doi.org/10.1109/TITS.2020.2983466
http://dx.doi.org/10.1109/TBDATA.2017.2701347
14766 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 16, 15 AUGUST 2022
Fenhua Bai (Graduate Student Member, IEEE)
received the B.S. degree from the Faculty of
Information Engineering and Automation, Kunming
University of Science and Technology, Kunming,
China, in 2017, where she is currently pursuing the
Ph.D. degree.
Her current research interests include blockchains,
edge computing, games application, and IoT.
Tao Shen (Member, IEEE) received the Ph.D.
degree from the Illinois Institute of Technology,
Chicago, IL, USA, in 2013.
He is a Professor and the Deputy Dean
of the College of Information Engineering and
Automation, Kunming University of Science and
Technology, Kunming, China. His research interests
cover blockchain technology, artificial intelligence,
and the Internet of Energy.
Zhuo Yu received the Ph.D. degree from Beijing
University of Aeronautics and Astronautics, Beijing,
China, in 2011.
He is a Senior Engineer with State Grid
Information and Telecommunication Company, Ltd.,
Beijing. His research directions include blockchains,
artificial intelligence, VR/AR, GIS, BPM, and
information consulting.
Kai Zeng received the Ph.D. degree from the
University of Electronic Science and Technology of
China, Chengdu, China, in 2015.
He is currently an Associate Professor with
Kunming University of Science and Technology,
Kunming, China. His research interests include dis-
tributed computing, granular computing, and deep
learning.
Bei Gong (Member, IEEE) received the Ph.D.
degree from Beijing University of Technology,
Beijing, China, in 2012.
He has published six national invention patents
and one monograph textbook. In the past five years,
he has published more than 30 papers in first-class
SCI/EI and other internationally famous journals and
top international conferences in relevant research
fields. He has presided over eight national projects,
such as the National Natural Science Foundation,
and six provincial and ministerial projects, such as
for the general science and technology program of the Beijing Municipal
Education Commission. His research interests include trusted computing,
Internet-of-Things security, the mobile Internet of Things, and mobile-edge
computing.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:08:12 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice