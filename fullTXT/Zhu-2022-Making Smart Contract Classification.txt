Making Smart Contract Classification Easier and More Effective
Making Smart Contract Classification Easier and
More Effective
Zhirong Zhu †, Jianzhong Su #, Zigui Jiang #, Mingxi Ye #, Zibin Zheng* #,
†School of Computer Science and Engineering, Sun Yat-sen University,
#School of Software Engineering, Sun Yat-sen University
zhuzhr7@mail2.sysu.edu.cn, sujzh3@mail2.sysu.edu.cn, jiangzg3@mail.sysu.edu.cn,
yemx6@mail2.sysu.edu.cn, zhzibin@mail.sysu.edu.cn
Abstract—Nowadays, as an emerging and powerful technology,
smart contract supports decentralized trusted computing and is
widely used in various business fields such as finance, exchange
and game. Although smart contracts provide a convenient way
to manage funds in the business, they also bring economic loss to
users. Particularly, there are a huge number of malicious smart
contracts running on blockchain, which defraud users of money.
Therefore, identifying the intention of smart contracts is of great
significance, which will help users have a better understanding of
smart contracts and reduce their financial losses. In this paper, we
purpose a supervised classification method to detect the intention
of smart contracts. Specifically, we extract the features of smart
contracts from codes and transactions, and then use XGBoost to
classify smart contracts. We conduct extensive experiments on
on-chain smart contracts. The experimental results demonstrate
that our features and model are capable of effectively identifying
the types of smart contracts.
Index Terms—Blockchain, Smart contract, Ethereum, Classi-
fication
I. INTRODUCTION
Blockchain is a decentralized distributed ledger used to
record transactions, the data on which is written by miners.
Based on an asymmetric encryption algorithm and consensus
mechanism, miners write compliant transactions into blocks
and upload them to the blockchain. Once the data reach a
consensus on most nodes, these data then become immutable.
In particular, the most famous and successful blockchain
is Bitcoin [1], which can perform peer-to-peer transactions
without the need for a third party, ensuring the security of
users’ assets and improving efficiency. In addition, blockchain
is also applied to various fields, including financial services,
public services, Internet of Things (IoT), etc.
The emergence of smart contracts has brought new tech-
nological innovations to the industry. A smart contract is a
snippet of completed codes deployed on the blockchain. The
effect of a smart contract is similar to that of a program,
which is that people can send transactions with data and
value to trigger the start of a smart contract, and then it will
perform specific actions. In another way, smart contracts are
programs deployed on the blockchain. As smart contracts can
be performed as programs, many projects have coded their
smart contracts and deployed them on the blockchain to make
them work in reality.
With the widespread use of smart contract applications,
a series of security issues have appeared. On the one hand
is code security, which has attracted a large number of
researchers. On the other hand, many malicious contracts
were used to defraud money. In response to this problem, the
loss would be reduced if we can identify the real purpose
of the smart contract. However, low attention has been paid
to this work. The classification and identification of smart
contracts can help us better understand their behavior and
it is of great significance for the security, performance, and
blockchain system. In the following we will analyze various
aspects:
• Different types of contracts have different behavior char-
acters and produce different vulnerabilities. For classified
contracts, we can design targeted software analysis meth-
ods, which can improve the accuracy and efficiency.
• The issuer of a contract may conceal its true purpose.
The classification approach can discover the certain type
of a contract, which can help users to identify the true
purpose.
• Classifying the contracts can help identify malicious
contracts. For example, Ponzi contracts are generally
masked as Finance contracts.
• There are some smart contracts in the blockchain which
have defects in their design. These contracts may con-
sume too much GAS, which will cause loss for users
and reduce the performance of the blockchain system.
Our approach can provide a reference for identifying such
contracts.
At present, Ethereum [2] and EOSIO [3] are two of the
largest blockchain platforms supporting smart contracts. Most
of the classification research focused on Ethereum, but few on
EOSIO. In this paper, we propose a cross-platform classifica-
tion method based on transaction and code data, which can
be applied to Ethereum and EOSIO. In order to do this, we
totally collect more than 7000 smart contracts with labels from
Ethereum and EOSIO. Based on our analysis, we find each
type of contract has specific behavior on transactions and code.
In terms of transactions, we find that the balance, transaction
amount, volume, and interactive address of different contracts
have different characteristics. For example, exchange contracts
228
2022 IEEE International Conferences on Internet of Things (iThings) and IEEE Green Computing & Communications
(GreenCom) and IEEE Cyber, Physical & Social Computing (CPSCom) and IEEE Smart Data (SmartData) and IEEE Congress
978-1-6654-5417-9/22/$31.00 ©2022 IEEE
DOI 10.1109/iThings-GreenCom-CPSCom-SmartData-Cybermatics55523.2022.00067
20
22
 IE
EE
 In
te
rn
at
io
na
l C
on
fe
re
nc
es
 o
n 
In
te
rn
et
 o
f T
hi
ng
s (
iT
hi
ng
s)
 a
nd
 IE
EE
 G
re
en
 C
om
pu
tin
g 
&
 C
om
m
un
ic
at
io
ns
 (G
re
en
C
om
) a
nd
 IE
EE
 C
yb
er
, P
hy
si
ca
l &
 S
oc
ia
l C
om
pu
tin
g 
(C
PS
C
om
) a
nd
 IE
EE
 S
m
ar
t D
at
a 
(S
m
ar
tD
at
a)
 a
nd
 IE
EE
 C
on
gr
es
s o
n 
C
yb
er
m
at
ic
s (
C
yb
er
m
at
ic
s)
 | 
97
8-
1-
66
54
-5
41
7-
9/
22
/$
31
.0
0 
©
20
22
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
iT
hi
ng
s-
G
re
en
C
om
-C
PS
C
om
-S
m
ar
tD
at
a-
C
yb
er
m
at
ic
s5
55
23
.2
02
2.
00
06
7
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:50 UTC from IEEE Xplore.  Restrictions apply. 
have more active token inflows and outflows; the transaction
amount of finance contracts is large but the transaction volume
is small, while game contracts are the opposite. As for the
code, since there is substantial code re-use in smart contracts
[4], we count the frequency of opcodes, which can reflect the
similarity of different contracts. Based on the analysis above,
we extract the transaction and code features and used XGBoost
to classify the types of smart contracts. In summary, the major
contributions in this paper are as follows:
• We collect more than 7000 smart contracts with labels
from Ethereum and EOSIO and published them on the
XBlock1, providing data for subsequent research.
• We construct 32 basic features to describe the transaction
behavior and 20 pivotal opcodes as code features, which
are helpful for identifying the types of smart contracts.
• We use XGBoost to classify smart contracts and the re-
sults showed that our approach can be effectively applied
on Ethereum and EOSIO.
The remainder of this paper is organized as follows. Sec-
tion II firstly introduces the background of Ethereum and
EOSIO, highlighting their difference. Section III then performs
data processing, data analysis, and model design. Section IV
next describes the details of the experiments and analyzes
the results. Section V reviews related studies and Section VI
provides the summary of this paper.
II. BACKGROUND
A. Ethereum and EOSIO
Ethereum was proposed in 2014, using Proof-of-Work
(PoW) as its consensus mechanism, as of now it has more than
14 million blocks. Smart contract is built in a high-level lan-
guage, such as Solidity [5], and converted to bytecode, which
can be executed in Ethereum virtual machine (EVM) [6].
Users can use ETHs (the cryptocurrency of Ethereum) to trade
with others and invoke smart contracts to complete specific
business.
EOSIO was proposed in 2018, unlike Ethereum, its con-
sensus mechanism is Delegated Proof of Stake (DPoS). In
addition, EOSIO is almost the same as Ethereum, users can
use EOS (the cryptocurrency of EOSIO) to do the same things
as on Ethereum.
B. Account and smart contract
An account is essentially a unique address, which records
how many tokens the account contains. The owner of an
account can transfer the token to other accounts through
transactions.
Smart contract is a special account, it not only records the
number of tokens but also contains code and related storage.
Users can deploy a smart contract by initiating a transaction
that contains the code. After deploying, users can invoke
the smart contract by sending transactions. Once receiving
transactions, the smart contract can automate the execution
of specific business according to its deployed code.
1http://xblock.pro/
Besides, we note that there are some differences between
Ethereum and EOSIO. For example, 1) the code in Ethereum
is EVM bytecode while the code in EOSIO is Web Assembly
(WASM). 2) The smart contract in Ethereum can not be
modified once deployed but the smart contract in EOSIO can
be modified after deployed.
C. Transaction
Fig. 1: The external transaction and internal transaction
Transaction is a message with specific data and value sent
from one address to another, which will trigger state transition
of the blockchain database, including the flow of tokens,
creation, and invocation of smart contracts. Transactions are
initiated by accounts and are usually divided into two types,
one is that the receiver is an account, for example, account
A sends a transaction to account B with value of 10 tokens,
this will result in a decrease in the token balance for A by
10 while an increase for B by 10. Another type is that the
receiver is a smart contract, which will trigger the running of
the smart contract and specific actions will be performed by
the smart contract. To avoid ambiguity, we define two types of
transactions in this paper, one is external transaction which is
from the account and another is internal transaction which is
from the smart contract as it is actually the action of a smart
contract following an external transaction. Fig. 1 shows the
illustration of external transaction and internal transaction.
III. DATA, ANALYSIS AND MODEL
In this section, we first illustrate how we collect the labeled
data. Then, because of insufficient data, we use the slicing
method to expand the dataset. Finally, we extract the transac-
tion and code features of smart contracts and use XGBoost to
classify and identify the types of smart contracts.
A. Data collection
We collect smart contracts deployed on Ethereum and
EOSIO with different labels including gambling, game, fi-
nance, exchange, and high-risk, from DappRadar2, Dapp3 and
DappReview4. After that, we download transactions and code
of smart contracts from XBlock5, which include Ethereum’s
2https://dappradar.com
3https://www.dapp.com
4https://www.dapp.review/
5http://xblock.pro
229
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:50 UTC from IEEE Xplore.  Restrictions apply. 
230
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:50 UTC from IEEE Xplore.  Restrictions apply.