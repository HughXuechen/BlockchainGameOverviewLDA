Game of Coins
Game of Coins
Alexander Spiegelman
Novi Reseacrh
USA
Idit Keidat
Technion
Israel
Moshe Tennenholtz
Technion
Israel
Abstract—The cryptocurrency market is blooming. Tens of new
coins emerge every year and their total market cap keeps growing.
The research community is trying to keep up by proposing
improved mining protocols and attacking existing ones. However,
surprisingly as it may sound, most existing works overlook the
real-life multi-coin market, by focusing on a system with a single
coin.
To the best of our knowledge, this paper was the first to
consider a system with many coins and strategic miners that
are free to choose where to mine. We first formalize the current
practice of strategic mining in multi-coin markets as a singleton
weighted congestion game and prove that any better-response
dynamics in such a game converges to an equilibrium. Then, in
our main result, we present a reward design attack that moves
the system configuration from any initial equilibrium to a desired
one. The attack is executed via temporary manipulation of coin
rewards, which leads strategic miners to switch between coins.
It applies to any better-response dynamics of the miners. To
motivate our attack we show that in any equilibrium there is
always at least one miner whose profit is higher in a different
one, and thus may benefit from such an attack.
Index Terms—Cryptocurrency, Game Theory, Equilibrium
Convergence
I. INTRODUCTION
Cryptocurrencies are an arms race. Hundreds of digital
coins have crept into the world market in the last decade [6],
including more than a dozen with over a billion dollar market
cap, e.g., [1], [3], [9], [10], [14]. The vast majority of
cryptocurrencies are based on the notion of proof of work
(PoW) [38]. As a result, the major strategic players in the
cryptocurrency market are miners who devote their power to
solving computational puzzles to find PoWs [14], [38].
The miners for a particular coin usually gain rewards that
are proportional to the power they invest in the coin out of
the total invested power (in the coin) by all miners. Each coin
can be viewed as having some weight that reflects the reward
it divides among its miners. In practice, a coin’s weight (or
reward) depends on its transaction rate, transaction fees, and
its fiat exchange rate.
While the above description is not complete, it does
capture the fundamental decision faced by a miner: where
should I mine? One evidence for the prevalence of reward-
based coin switching can be found online in websites like
www.whattomine.com [11], where miners enter their mining
parameters (technology, power, cost, et cetra) and get a list
of coins they can mine for, ordered by their profitability. An
interesting example happened on November 12 2017 [5], when
a dramatic change in the Bitcoin to Bitcoin Cash [1] (a hard
fork from Bitcoin) exchange rate led to a major inrush of
miners to Bitcoin Cash (see Figure 1).
All in all, the structure of the cryptocurrency market suggests
that we face here a game among miners, where each miner
wishes to mine coins with high rewards while avoiding
competition with other miners. In this paper we introduce for
the first time the study of the cryptocurrency market as a game,
consisting of a set of strategic players (miners) with possibly
different mining powers and a set of coins with possibly
different rewards (weights). The miners are free to choose
to mine for any coin from the set, and we consider general
better-response dynamics of the miners. That is, whenever
any miner may benefit from deviating (i.e., changing the coin
it mines for), some miner will take a step that improves his
payoff; we allow an arbitrary sequence of such individual
improvement steps (sometimes called improving path [35]). In
our first result we prove that any such better response dynamics
converges to a pure equilibrium (sometimes called the finite
improvement property [35]) regardless of miner powers and
coin rewards. This result is obtained by showing an ordinal
potential, which according to [35], implies that an arbitrary
better response dynamics converges to an equilibrium.
Having at hand the above result, we move to a discussion of
strategic attacks and manipulations [40]. While many efforts
have been invested in the study of single-coin attacks [17],
[18], [23], [39], [41], we consider for the first time a multi-coin
system and introduce an attack that manipulates the miners’
optimization process. Given that a shift in the weight of a
coin may influence miners to leave or join the coin, it is
quite possible for an interested party to affect this weight,
either by creating additional transactions with high fees [8]
(sometimes called whale transactions [32]) or by manipulating
the coin exchange rate [2], [4], [7], [21]. This way, a miner
(or another interested party) can attempt to change the system
equilibrium to a better one for them by moving players between
coins. We show that under broad circumstances, for every
equilibrium of such a game, there exists a miner and another
equilibrium in which the miner’s payoff is higher. The question
is therefore: can one attack the system by temporarily increasing
coin weights (rewards) in a way that will lead the system from
a given equilibrium to a desired one, so that the system will
remain in the desired equilibrium after reverting to the original
weights?
The above reward design problem is challenging since miners
might take any better response step, and may make their moves
in any order. Nevertheless, having modified the weights, we
954
2021 IEEE 41st International Conference on Distributed Computing Systems (ICDCS)
2575-8411/21/$31.00 ©2021 IEEE
DOI 10.1109/ICDCS51616.2021.00095
20
21
 IE
EE
 4
1s
t I
nt
er
na
tio
na
l C
on
fe
re
nc
e 
on
 D
ist
rib
ut
ed
 C
om
pu
tin
g 
Sy
st
em
s (
IC
DC
S)
 |
 9
78
-1
-6
65
4-
45
13
-9
/2
1/
$3
1.
00
 ©
20
21
 IE
EE
 |
 D
O
I: 
10
.1
10
9/
IC
DC
S5
16
16
.2
02
1.
00
09
5
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
(a) Bitcoin and Bitcoin Cash exchange rates over time. (b) Hashrate corresponds to the number of miners.
Fig. 1: Miners move from Bitcoin to Bitcoin Cash.
can use the previous result to claim that any better response
dynamics will converge to an equilibrium. Notice that the latter
may not be the desired one, but we can now modify the rewards
again. We show that such a reward design (attack) for strategic
players is feasible. Namely, we provide a (multi-step) algorithm
for assigning rewards in equilibrium states that moves strategic
players from any initial equilibrium to a desired one.
In summary, our contributions are as follows:
1) We formalize strategic mining in multi-coin systems as a
game (Section II).
2) We prove that any better-response dynamics in such games,
starting from an arbitrary configuration, converges to an
equilibrium (Section III).
3) We show that, in many cases, for every equilibrium
there is a miner and another equilibrium in which the
miner’s payoff is higher, motivating strategic attacks by
manipulation. (Section IV).
4) We introduce the first attack on multi-coin systems by
offering a reward design scheme that moves the system
configuration from any initial equilibrium to any desired
one for any better-response dynamics of the miners
(Section V).
A. Related work
a) Game theory in cryptocurrencies: Several previous
works have presented game theoretical analyses and attacks on
cryptocurrencies [15], [17], [18], [23], [29], [30], [32], [39],
[41], [42], [48]. A survey can be found in [33]. However, the
vast majority of them deal (in one way or another) with miners’
incentives to follow the coins’ mining protocols. To the best
of our knowledge, our work was the first to extend the study
to a multi-coin system, establish fundamental game theoretical
results, and present possible strategic attacks therein.
Since our work was first published in Arxiv on May 2018,
several works have followed it [12], [23], [31], [34]. Mirkin et
al. [34] exploit the reward mechanism of PoW cryptocurrencies
to discourage miner participation in order to perform Denial-of-
Service attacks. Goren and Spiegelman [23] presented an attack,
called smart mining, that strictly dominates honest mining
for rational miners. This attack exploits the vulnerability of
the difficulty adjustment mechanism, which grows when new
miners join the coin. Kwon et al. [31] consider a game with two
coins and assume miners possess infinitesimal computational
power. Under this assumptions they show that the game
either converges to an equilibrium in which both coins are
equally profitable or all non-loyal miners move to the more
profitable one. We consider a more complex setting with an
arbitrary number of coins and miners that cannot infinitesimally
divide their power. In addition, we do not only prove that
equilibrium always exists, but also prove that under a wide set
of assumptions, there is more than one equilibrium and show
how a powerful entity can manipulate the system to move
among equilibria. Altman et al. [12] followed on our work by
extending the model to allow edge computing service providers
to support PoW offloading. In addition, they provide efficient
algorithms for finding equilibria, which is complementary to
our reward design schema that shows how to move the system
among them.
b) Congestion games: Monderer and Shapley [35] proved
that it is enough to show an ordinal potential in order to prove
that every better response dynamics in a game convergences
to a pure equilibrium. In addition, they proved in [35] that
unweighted congestion games coincide with games that possess
exact potentials. We show (in Section III) that our class of
games does not possess an exact potential, and thus is not an
unweighted congestion game. In fact, our game belongs to a
broader family, called weighted congestion games [22], [25],
where a player’s payoff (or cost) depends on its weight and the
weights of other players who share the resource, rather than
only on the number of players that share the same resource as
in unweighted congestion games. More specifically, our game
is a singleton weighted congestion game, where each player is
allowed to choose one resource.
Convergence to a pure Nash equilibrium in weighted
congestion games was broadly studied before [13], [16], [19],
[20], [22], [25]–[27]. Harks et al. [27] presented conditions on
the cost functions in order for every better response dynamic to
converge to an equilibrium in weighted congestion games. In
particular, they showed that a cost function must be monotonic
in order for every better response dynamic to converge to an
equilibrium in a general weighted congestion game, and for the
non-singleton case, they showed that affine (linear) or certain
exponential cost functions are sufficient for convergence. The
payoff function in our game is indeed monotonic (as necessary
for convergence), but while their result on singleton weighted
congestion games does not provide sufficient conditions for
convergence, we show that in our game every better response
dynamic indeed converges.
Anshelevich et al. [13] consider network design games in
which the cost of each edge in the network is divided among
all the players that share it, and players try to reduce the total
cost on a path between two given nodes. Note that in this
955
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
setting, the weights of all players are equal, and the game is
not a singleton weighted congestion game since each path may
consist of several edges. In our game, in contrast, each miner
may have a different mining power (weight) and is allowed to
choose one coin (resource).
Even-Dar et al. [16] and Fotakis et al. [19] considered
singleton weighted congestion games in the load balancing
and selfish routing contexts, respectively. In both of these
games, the cost function of a resource (machine or network
link) is the the total sum of weights (jobs or traffic) of the
players who share it divided by the resource weight (machine
speed or link capacity). Both showed (among other results)
that their games possess an ordinal potential and thus every
better response dynamic converges therein. Our payoff function
resembles theirs but is not identical to them. First, we consider
payoff functions whereas they consider cost functions and
the reduction between the two is usually not trivial. Second,
two miners (players) who share the same coin (resource) in
our game get different payoffs if they have different weights
(mining power), whereas in their game, the cost of a resource
is identical for all players who share it. We do, however, use
a similar lexicographical technique to prove the existence of
an ordinal potential in our game (our first result - Section III).
c) Reward design: Our main result is related to the
literature on reward design [24], [44], [45] in machine learning,
and to the best of our knowledge, is the first to introduce
iterated reward design for strategic players in a multi-round
multi-player setting. While seminal works in reward design
assign/modify state rewards specifically in a reinforcement
learning context [47], we design rewards for equilibrium states
for any better response dynamics. On a more abstract game-
theoretic level, our work complements work on mediator design,
where a game is modified in order to lead to some desired
behavior. The modification can be in the form of constraints
on allowed behavior, as in the theory of social laws [43],
conditional payment as a function of joint behavior [36], or even
a conditional contract [37]. Our work is novel in introducing
a multi-round dynamic intervention technique.
II. MODEL
A system in our model is a tuple 〈Π, C〉, where Π is a
finite set of n miners (players) and C is a finite set of coins
(resources). A miner p ∈ Π has mining power mp ∈ R+,
which it can invest in one of the coins, i.e., the set of possible
actions of p is C. We denote the set of configurations of
a system Q = 〈Π, C〉 as SQ , Cn and denote by s.p the
action of miner p ∈ Π in configuration s ∈ SQ. When clear
from the context, we omit the subscript indicating the system
and simply write S. Given s ∈ S and c ∈ C, we denote
by Pc(s) ⊆ Π the set of miners who mine for c in s, i.e.,
Pc(s) , {p ∈ Π | s.p = c}, and by Mc(s) their total mining
power, i.e., Mc(s) , Σp∈Pc(s)mp. For s ∈ SQ, p ∈ Π, c ∈ C
we denote by (s−p, c) the configuration that is identical to s
except that s.p is replaced by c.
A reward function F : C → R+ maps coins to rewards. A
game GΠ,C,F consists of a system 〈Π, C〉 and a reward function
F . Every coin in a game GΠ,C,F divides its reward among all
the players who mine for it, and the miners’ payoffs are defined
as follows: For s ∈ S, the revenue per unit (RPU) of coin c in
s is RPUc(GΠ,C,F )(s) , F (c)
Mc(s)
. When clear from the context,
we omit the parameter indicating the game. The payoff function
of a miner p ∈ Π is up(s) , mp
F (s.p)
Ms.p(s) = mp · RPUs.p(s).
Table I summarizes the notations and definitions we use in this
paper.
Π set of miners
C set of coins
Q = 〈Π, C〉 a system
mp mining power of miner p
SQ set of all conf. in system Q
s.p the coin miner p mines for in conf. s
Pc(s) set of miners that mine for coin c in conf. s
Mc(s) total mining power invested in coin c in conf. s
RPUc(s) revenue per unit of coin c in conf. s
up(s) payoff function of miner p in conf. s
TABLE I: Notations and definitions.
Given a game GΠ,C,F , a configuration s ∈ S, a miner p ∈ Π,
and a coin c ∈ C, we say that p moves from s.p to c in s
if it changes its action from s.p to c. A move from s.p to c
is a better response step for p if up(s) < up((s−p, c)). We
say that a miner p ∈ Π is stable in a configuration s in game
GΠ,C,F if p has no better response steps in s. A configuration
s is stable or a (pure) equilibrium if every miner p ∈ Π is
stable in s. A better response dynamics from s in GΠ,C,F is a
sequence of configurations resulting from a sequence of better
response steps starting from s, which is either infinite or ends
with a stable configuration. In case it is finite, we say that it
converges to its final configuration.
A function f : S → R is an ordinal potential for a game
GΠ,C,F if for any two configurations s, s′ ∈ S s.t. some better
response step of a miner p ∈ Π leads from s to s′, it holds
that f(s) < f(s′). If, in addition, f(s′) − f(s) = up(s
′) −
up(s), then f is an exact potential. By [35], if a game GΠ,C,F
has an ordinal potential, then every better response dynamics
converges.
a) Remark.: For simplicity of the presentation, we assume
in this paper that coin rewards are fixed and do not depend on
the total mining power invested in the coins. However, since the
security of cryptocurrencies grows with the total mining power,
it is reasonable to assume that the value of a coin – and thus
also its reward– increases when the mining power increases
and vice versa. As long as the reward moderately increases
with the mining power, all our results hold. More specifically,
for our results, it suffices to assume the following: Consider
two configurations s1, s2 ∈ S s.t. a better response step of
some miner p leads from s1 to s2 by moving from coin c to c′.
Then, RPUc(s) ≥ RPUc(s′) and RPUc′(s) ≤ RPUc′(s′).
III. BETTER RESPONSE DYNAMICS CONVERGENCE
In this section we prove that although a game GΠ,C,F
has no exact potential (Section III-A), every better-response
dynamics of the miners in game GΠ,C,F converges to a stable
956
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
configuration (pure equilibrium) regardless of the sets Π and
C and the reward function F (Section III-B). To gain intuition,
the reader is referred to the full paper [46], where we show
how to construct a particular equilibrium in a game GΠ,C,F for
any Π, C and F , and give a simple ordinal potential function
for the symmetric case in which F is a constant function i.e.,
∀c, c′ ∈ C, F (c) = F (c′), respectively.
A. No exact potential
Proposition 1. The game GΠ,C,F does not always have an
exact potential.
Proof. Let GΠ,C,F be a game where Π = {p1, p2}, mp1 =
2,mp2 = 1, C = {c1, c2}, and F (c1) = F (c2) = 1. Assume
by way of contradiction that GΠ,C,F has an exact potential
function H , and consider the following four configurations:
• s1 = 〈c1, c1〉. Payoffs: up1(s1) =
F (c1)·mp1
mp1+mp2
= 2/3,
up2(s1) =
F (c1)·mp2
mp1+mp2
= 1/3.
• s2 = 〈c1, c2〉. Payoffs: up1(s2) =
F (c1)·mp1
mp1
= 1,
up2(s2) =
F (c2)·mp2
mp2
= 1.
• s3 = 〈c2, c2〉. Payoffs: up1(s3) =
F (c2)·mp1
mp1+mp2
= 2/3,
up2(s3) =
F (c2)·mp2
mp1+mp2
= 1/3.
• s4 = 〈c2, c1〉. Payoffs: up1(s4) =
F (c2)·mp1
mp1
= 1,
up2(s4) =
F (c1)·mp2
mp2
= 1.
Note that H(s2)−H(s1)+H(s3)−H(s2)+H(s4)−H(s3)+
H(s1)−H(s4) = 0. However, by definition of exact potential,
we get that (H(s2)−H(s1)) + (H(s3)−H(s2)) + (H(s4)−
H(s3)) + (H(s1) − H(s4)) = (2/3) + (−1/3) + (2/3) +
(−1/3) = 2/3 6= 0. A contradiction.
B. Ordinal potential
To show an ordinal potential, we use the following defini-
tions:
For a configuration s ∈ S in a game GΠ,C,F , we define
list(s) to be the sequence of pairs in {〈RPUc(s), c〉 | c ∈ C}
ordered lexicographically from smallest to largest. Denote
by vi(s) the coin (second element of the pair) in the ith
entry in list(s). Consider the ordered set 〈L,≺L〉, where L ,
{list(s) | s ∈ S} is the set of all lists in GΠ,C,F , and ≺L
is the lexicographical order. The rank of a list list(s) ∈ L,
rank(list(s)), is the rank of list(s) in ≺L from smallest to
largest. An illustration of a list(s) can be found in Figure 2.
Note that since Π and C are finite, we know that S and L are
finite. The following two observations establish a connection
between better response steps and the RPUs of the associated
coins.
Observation 1. Consider a game GΠ,C,F , s ∈ S, vi(s) ∈ C,
and p ∈ Π s.t. s.p = vi(s). Then in every better response step
of p that changes s.p to a coin vj(s), it holds that j > i.
Proof. By the definition of a better response step,
F (vj(s))
Mvj(s)(s) +mp
>
F (vi(s))
Mvi(s)(s)
,
Fig. 2: Illustration of list(s) in a system with three coins and
five miners s.t. for 1 ≤ i ≤ 5, mpi = i and for 1 ≤ i ≤ 3, the
reward function F (ci) = 10i.
and thus
RPUvj(s)(s) =
F (vj(s))
Mvj(s)(s)
>
F (vi(s))
Mvi(s)(s)
= RPUvi(s)(s).
By definition of v(s), we get that j > i.
Observation 2. Consider a game GΠ,C,F . If some better
response step from configuration s to configuration s′ of a
miner p changes s.p = c to s′.p = c′, then RPUc(s) <
min(RPUc(s
′), RPUc′(s
′)).
Proof. By definition of a better response step, RPUc′(s′) >
RPUc(s). In addition, since Mc(s
′) = Mc(s) −mp, we get
that
RPUc(s
′) =
F (c)
Mc(s′)
=
F (c)
Mc(s)−mp
>
F (c)
Mc(s)
= RPUc(s).
We are now ready to prove that any game GΠ,C,F has an
ordinal potential function.
Theorem 1. For any finite sets Π and C of miners and coins
and reward function F , H(s) , rank(list(s)) is an ordinal
potential in the game GΠ,C,F .
Proof. Consider two configurations s, s′ ∈ S s.t. some better
response step of a miner p ∈ Π leads from configuration s
to configuration s′, and let vi(s) = s.p and vj(s) = s′.p. We
need to show that H(s) < H(s′). Since only the RPUs of
vi(s) and vj(s) are affected we get that
∀k 6= i, j RPUvk(s)(s) = RPUvk(s)(s
′). (1)
By Observation 1, we get that j > i, and thus ∀k, 1 ≤ k < i,
RPUvk(s)(s) = RPUvk(s)(s
′). By Observation 2, we get that
min(RPUvi(s)(s
′), RPUvj(s)(s
′)) > RPUvi(s)(s), and thus,
together with the definition of vi and Equation 1, we get that
∀k, i ≤ k ≤ |C|, RPUvk(s)(s
′) ≥ RPUvi(s)(s). Therefore,
none of these coins “move down” to a position before i in
list(s′) and so
∀k, 1 ≤ k < i, 〈RPUvk(s)(s), vk(s)〉 = 〈RPUvk(s′)(s
′), vk(s′)〉.
(2)
That is, the first i − 1 elements of list(s) are equal to the
first i − 1 elements of list(s′). It remains to show that the
ith element of list(s′) is lexicographically larger than the ith
957
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
element of list(s). Let vl(s) = vi(s
′). From Equation 2, we
know that l ≥ i, so there are two possible cases:
• First, l ∈ {i, j}. The theorem follows from Observation 2.
• Second, l > i, l 6= j. In this case,
〈RPUvi(s)(s), vi(s)〉
< 〈RPUvl(s)(s), vl(s)〉 (List order)
= 〈RPUvl(s)(s
′), vl(s)〉 (Equation 1)
= 〈RPUvi(s′)(s
′), vi(s
′)〉 (Definition of vl(s)),
as needed.
Corollary 1. For any finite sets Π and C of miners and coins
and reward function F . For any configuration s ∈ 〈Π, C〉, any
better response dynamic starting form s in the game GΠ,Q,F
converges to a stable configuration.
IV. THERE IS OFTEN A BETTER EQUILIBRIUM
Before moving to our main result in which we describe
an attack through dynamic reward design that transitions the
system between equilibria, we establish a motivation for such an
attack. In this section, we show that under broad circumstances,
in every stable configuration there is at least one miner who
has a higher payoff in another stable configuration. This means
that such a miner will gain from moving the system there.
Specifically, we prove this for games that satisfy the following
assumptions (note that we use these assumptions only in this
section):
Assumption 1 (Never alone). For a configuration s ∈ S in
a game GΠ,C,F , if there is a coin c ∈ C s.t. |Pc(s)| ≤ 1,
then there is a miner p ∈ Π s.t. changing s.p to c is a better
response step for p.
Although this assumption cannot hold when |Π| < 2|C|, it
often holds in practice since the number of miners must be
much larger than the number of coins for the cryptocurrency
to be secure (truly decentralized).
Assumption 2 (Generic game). For any two coins c 6= c′ ∈ C
and two sets of players P, P ′ ⊆ Π in a game GΠ,C,F ,
F (c)
Σp∈Pmp
6= F (c′)
Σp∈P ′mp
.
This assumption is common in game theory [28], and it makes
sense in our game since mining power in practice is measured
in billions of operations per hour and coin rewards are coupled
with coin fiat exchange rates, so exact equality is unlikely.
The following observation follows from Assumption 1 and
the fact that coins that are chosen by at least one miner always
divide their entire reward. It stipulates that in every stable
configuration, the sum of the payoffs the miners get is equal
to the sum of the coins’ rewards.
Observation 3 (All stable configurations are globally optimal).
For every stable configuration s ∈ S in a game GΠ,C,F under
Assumption 1, it holds that∑
p∈Π
up(s) =
∑
c∈C
F (c).
From Observation 3 and Assumption 2 it is easy to show
the following claim:
Claim 4. Consider a game GΠ,C,F under Assumptions 1 and 2.
If the game has more than one stable configuration, then for
every stable configuration s there exist a miner p and a stable
configuration s′ s.t. up(s′) > up(s).
Proof. Consider a stable configuration s. By assumption, there
exists another stable configuration s′ 6= s. Therefore, there is
a player p and coins c 6= c′ s.t. p ∈ Pc(s) and p ∈ Pc′(s′).
By Assumption 2, F (c)
Mc(s)
6= F (c′)
Mc′ (s
′) . Thus, up(s′) 6= up(s). If
up(s
′) > up(s), then we are done. Otherwise, by Observation 3,
there is another player p′ 6= p s.t. up′(s′) > up′(s).
It remains to show that GΠ,C,F has more than one stable
configuration. We give here a sketch of the proof, which appears
in Appendix A. Consider Π = {p1, . . . , pn} s.t. mp1 ≥ mp2 ≥
. . . ≥ mpn , and ∀i, 1 ≤ i ≤ n, let Πi = {p1, . . . , pi}. We first
show (in Lemma 3 in Appendix A) that the game GΠ2,C,F has
two different configurations in which miners p1, p2 do not share
a coin and at most one of them is unstable. Then, we inductively
construct two configurations in GΠi,C,F , ∀i, 3 ≤ i ≤ n, based
on the two configurations in GΠi−1,C,F , in which all miners
in Πi−1 keep their locations and all miners except maybe the
one that was unstable in GΠ1,C,F are stable. The construction
step is captured by Claim 6 (Appendix A), where pnew = pi
in the ith step.
Finally, we show in Lemma 3 (Appendix A) that the two
configurations we construct in GΠ,C,F are stable: Let pns be
the (possibly) unstable miner. By Assumption 1 (note that the
assumption refers only to game GΠ,C,F ), pns cannot be alone
in a coin (otherwise there must be another unstable miner),
and thus it shares the coin with a smaller (with less mining
power) stable miner, which we show implies that pns is stable.
Our result is then captured by the following proposition,
which follows from Claim 4 and Lemma 3 that are proven in
Appendix A.
Proposition 2. Consider a game GΠ,C,F under Assumptions 1
and 2. Then for every stable configuration s in GΠ,C,F there
exist a miner p and a stable configuration s′ 6= s in which
up(s
′) > up(s).
V. REWARD DESIGN ATTACK: MOVING BETWEEN
EQUILIBRIA
Having established motivation for strategic attacks, we
proceed to present our main result. We consider a system
Q = 〈Π, C〉, where Π = {p1, . . . pn} s.t. mp1 > mp2 > . . . >
mpn , and a function F . For every two stable configurations
s0, sf ∈ SQ in the game GΠ,C,F we provide a mechanism
to move the system from s0 to the desired configuration sf
by temporarily increasing coin rewards. Note that once we
lead the system to sf , we can return to the original rewards
(i.e., stop manipulating coin weights) because sf is stable in
GΠ,C,F .
958
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
a) Dynamic reward design attack.: Consider a system
〈Π, C〉 and a reward function F . A dynamic-reward design
attack for game GΠ,C,F is an algorithm that for any two stable
configurations s0, sf in GΠ,C,F moves the system from s0 to
sf by following the protocol schema in Algorithm 1.
Algorithm 1 Protocol schema to move a system 〈Π, C〉 with
reward function F from s0 to sf .
1: s← s0
2: while s 6= sf do
3: choose a reward function H s.t.
∀c ∈ C, H(c) ≥ F (c)
4: allow better-response dynamics in GΠ,C,H , starting
from
s, to converge to some stable configuration s′
. convergence is guaranteed due to Corollary 1
5: s← s′
The rest of the section is organized as follows: In Section V-A
we describe the algorithm of our dynamic reward design attack
and in Section V-B we present the algorithm’s proof outline
(some technical parts are defer to the Appendix).
A. Reward design attack
To describe the algorithm of a dynamic reward design attack
we need to specify the reward function for every loop iteration
in Algorithm 1. To this end, we define the notion of a reward
design function, which maps system configurations to reward
functions:
Definition 1 (reward design function). Consider a system Q. A
reward design function F for system Q is a function mapping
every configuration s ∈ SQ to a reward function, i.e., F (s) :
C → R+.
As we shortly explain, we divide the algorithm into n stages,
each of which may consists of many loop iterations, and provide
one reward design function for each stage to define a specific
reward function for each iteration.
Intuitively, we observe that miners with less mining power
are easily moved between coins, meaning that we can increase
a coin reward so that a small miner with little mining power
will benefit from moving there, but bigger miners with more
mining power prefer to stay in their current locations. Therefore,
the idea is to evolve the current configuration to sf ∈ S in
n = |Π| stages, where in stage i, we move the n− i+1 miners
with the smallest mining powers to the location (coin) of miner
pi in the final configuration sf (i.e., sf .pi) while keeping the
remaining miners in their (final) places. To this end, we define
n intermediate configurations. For i, 1 ≤ i ≤ n, we define si
as:
si.pk =
{
sf .pk ∀1 ≤ k < i
sf .pi ∀i ≤ k ≤ n
(3)
That is, in si, miners p1, . . . , pi are in their final locations and
miners pi, . . . , pn are in the final location of miner pi. Note
that sn = sf . Figure 3a illustrates the stage transitions in the
algorithm.
Notice that since we allow arbitrary better response dynamics
(in every iteration), choosing a reward design function is a
subtle task; miners can move according to any better response
step, and we cannot control the order in which they move.
One may attempt to design a reward function so that in the
resulting game there is exactly one unstable miner with exactly
one better response step in the current configuration. However,
even given such a function, after that miner takes its step, other
miners might become unstable, which can in turn lead to a
better response dynamics process that depends on the order in
which miners move and on the choices they make (in case they
have more than one better response step). Hence, the main
challenge is to be able to restrict the set of possible stable
configurations reached by better response dynamics in each
iteration.
In every loop iteration of stage i > 1 we pick a miner pk
that we want to move from sf .pi−1 to sf .pi (as explained
shortly) and choose the reward function carefully so that (1)
pk’s only better response step is sf .pi, (2) all other miners are
stable, and (3) in every stable configuration reached by better
response dynamics after pk’s step, pk is in sf .pi, all miners
pk+1, . . . , pn are in either sf .pi−1 or sf .pi, and all the other
miners (who have more mining power) remain in their (final)
locations.
Moreover, we prove by induction below that our reward
design function of stage i (defined below) guarantees that
the set of possible configurations reached by better response
dynamics in a stage i > 1 is
Ti ,
{
s ∈ S
∣∣∣∣ ∀k, 1 ≤ k < i : s.pk = sf .pk
∀k, i ≤ k ≤ n : s.pk ∈ {sf .pi, sf .pi−1}
}
Notice that the stage starts at si−1, which is in Ti. We now
explain how we choose the reward design function for stage
i. First, for every configuration s ∈ Ti \ {si}, we choose the
mover – the miner to move from sf .pi−1 to sf .pi – to be the
miner with the following index:
µi(s) , min{j|∀l, j < l ≤ n : s.pl = sf .pi}.
Let αi(s) = µi(s)− 1. Intuitively, we use pαi(s) as an anchor
in configuration s; we choose a reward function that increases
the reward of coin sf .pi as much as possible without making
the anchor unstable. As a result, all the miners in Psf .pi−1(s)
(who are bigger than or equal to the anchor) remain stable,
whereas miner pµi(s) has a unique better response step to move
to sf .pi. Note that, by definition, s.pµi(s) 6= sf .pi. Figure 3b
illustrates µi(s) and αi(s) for some configuration s ∈ Ti.
In order to make sure that miners not in Psf .pi−1
(s) ∪
Psf .pi(s) also remain stable, and in order to guarantee that that
every better response dynamics after pµi(s)’s step converges to
a configuration in Ti, we choose a reward function that evens
out the RPUs of all coins other than sf .pi. For s ∈ S, let
959
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
(a) Configuration si. (b) Iteration starting from s ∈ Ti and moving pµi(s) to sf .pi. pαi(s) is the anchor.
Fig. 3: Reward design algorithm: (a) stages; and (b) iteration within stage i. Boxes represent coins, discs represent miners. The
unlabeled bottom discs represent possible bigger miners who are in their final locations.
R(s) , max{RPUc(s) | c ∈ C}. The reward design function
Hi for stage i > 1 is:
for n ≥ i > 1, s ∈ Ti, c ∈ C,
Hi(s)(c) =
{
R(s) · (Mc(s) +mpαi(s)
) for c = sf .pi
R(s) ·Mc(s) otherwise
(4)
That is, we add the weight of the anchor αi(s) to the reward
of the coin we wish to have the mover µi(s) move to. Note
that the RPUs of all coins except sf .pi in the game GΠ,C,Hi(s)
are equal to R(s). In addition, note that if a miner bigger than
or equal to pαi(s) moves to sf .pi, then sf .pi’s RPU becomes
no bigger than R(s). However, since mpµi(s)
< mpαi(s)
, pµi(s)
has a unique better response step to move to sf .pi. Therefore,
we get that our reward design function allows us to control
the first step of the better response dynamics process. In the
next section we give more intuition on how it also restricts the
stable configuration at the end of any better response dynamics
process at stage i to the set Ti.
As for the first stage, note that we need to move all miners
to coin sf .p1, so intuitively we only need to increase its reward
high enough. We therefore choose:
for s ∈ S, c ∈ C,
H1(s)(c) =
{
max{F (c′) | c′ ∈ C} · Σp∈Πmp for c = sf .p1
F (c) otherwise
(5)
In Algorithm 2 we present the algorithm of our reward design
attack, and in the next sections we prove that every stage in
the algorithm eventually completes.
Algorithm 2 The algorithm of the reward design attack.
1: s← s0
2: for i=1 . . . n do
3: while s 6= si do . si is defined in Equation 3
4: define Hi as in Equations 4 and 5
5: allow better-response dynamics in GΠ,C,Hi(s), start-
ing
from s, to converge to some stable configuration s′
6: s← s′
B. Proof outline
The proof for stage 1 termination is straightforward so we
skip it. To prove that every stage i > 1 eventually completes
we use the following key lemma on stable configurations in
the stage:
Lemma 2. Consider a configuration s ∈ Ti \{si}. Then every
better response dynamics in the game GΠ,C,Hi(s) that starts
at s converges to a configuration s′ ∈ Ti such that:
1) ∀k, 1 ≤ k < µi(s), s′.pk = s.pk.
2) s′.pµi(s) = sf .pi.
The formal proof of the lemma is technical and for better
readability is given in Appendix B. Here we give an intuitive
justification for it. As part of the proof, we show that within
stage i, all the reached configurations (both stable and unstable)
are in Ti. Let c = sf .pi−1 and c′ = sf .pi. After pµi(s) moves
to c′ according to his only better response step, in the resulting
configuration s′, the RPUs of all coins not in {c, c′} remain
R(s). Moreover,
RPUc(s
′) =
Hi(s)(c)
Mc(s′)
=
R(s) ·Mc(s)
Mc(s)−mpµi(s)
,
and
RPUc′(s
′) =
Hi(s)(c
′)
Mc′(s′)
=
R(s) · (Mc(s) +mpαi(s)
)
Mc(s) +mpµi(s)
.
Note that, although RPUc(s′) > RPUc(s), it is still not high
enough to drive miners not in Pc′(s′), which by definition have
more mining power than pµi(s), to move to c. In addition, since
RPUc′(s
′) < RPUc′(s), no miner want to move to c′, and
thus the only miners that possibly have better response steps
at s′ are miners in Pc′(s′) who wish to move to c. Moreover,
the total mining power of the miners who actually move to
c is smaller than pµi(s), otherwise, c’s RPU would go below
R(s). In the proof we use the above intuition to formulate an
invariant who captures the lemma statement and prove it by
induction on better response steps. The lemma then follows
from Theorem 1 (every better response dynamics converges to
a stable configuration).
We next use Lemma 2 to prove that every stage i > 1
completes in a finite number of loop iterations. To this end,
we associate with every configuration s ∈ Ti a binary vector
veci(s) indicating, for each j ≥ i, whether pj is in Psf .pi(s),
960
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
where it needs to be at the end of the stage. Formally, consider
the ordered set 〈V,≺v〉, where V , {0, 1}n is the set of all
binary vectors of length n, and ≺v is the lexicographical order.
For a configuration s ∈ Ti, we define veci(s) to be a vector
in V such that:
∀j, 1 ≤ j < i, veci(s)[j] = 0
∀j, i ≤ j ≤ n, veci(s)[j] =
{
1 if pj ∈ Psf .pi(s)
0 otherwise
and the function Φi : Ti → {1, .., |V |} to be the rank of
vec(s) in V . For example, by the definition, the vector veci(si)
contains zeros in the first i− 1 entries and ones in the rest.
Theorem 2. Every stage i > 1 of Algorithm 2 completes in a
finite number of loop iterations.
Proof. By definitions of stage i and set Ti, the first config-
uration of stage i is si−1 ∈ Ti. By definition of µi(s) , for
all s ∈ Ti \ {si}, µi(s) 6∈ Psf .pi(s). By inductively applying
Lemma 2, we get that every loop iteration in stage i ends
in a configuration in Ti. Therefore, consider a loop iteration
of stage i that starts in configuration s 6= si and ends in
configuration s′, we get by Lemma 2 that pµi(s) ∈ Psf .pi(s′)
and ∀k, i ≤ k < µi(s), s.pk = s′.pk. In addition, by definition
of µi(s), pµi(s) 6= Psf .pi(s). Meaning that vectors veci(s)
and veci(s
′) are equals up to the index µi(s) − 1, and in
veci(s)[µi(s)] = 0 whereas veci(s′)[µi(s)] = 1. Therefore
Φ(s′) > Φ(s). Now since the set Ti is finite, we get that after
a finite number of iterations we reach configuration si.
VI. DISCUSSION
Our work studies and challenges the cryptocurrency market
from a novel angle – the strategic miners’ behavior in a system
with multiple coins. Although our model is theoretical, it does
capture the nature of the real-life cryptocurrency market and
our results emphase that cryptocurrency protocol designers
must take into account the whole market environment when
reasoning about their coin’s security.
There are several central followups one may consider. First,
our reward design attack is effective for arbitrary better-
response dynamics, but one may wonder about its speed
of convergence under specific markets. Second, we consider
convergence to an equilibrium, and one may consider also
convergence to a bad (possibly unstable) configuration in which,
for example, a particular miner will have a dominant position
in a coin, killing (at least for a while) the basic guarantee
of security for that coin and allowing him to get a bigger
portion of the reward. In addition, one may wonder about the
asymmetric case, where some coins can be mined only by
a subset of the miners. Finally, we believe that the reward
design attack is an interesting technique on it own and might
be applicable to other domains like load balancing and selfish
routing.
REFERENCES
[1] Bitcoin cash. https://www.bitcoincash.org/, Accessed: 2019-07-01.
[2] Bitcoin price manipulation: Economists warn just one person may have
caused value surge. https://www.express.co.uk/finance/city/905222/
bitcoin-price-news-latest-manipulation-cryptocurrency-surge-plummet-stock-exchange,
Accessed: 2019-07-01.
[3] Cardano. https://www.cardano.org/en/home/, Accessed: 2019-07-01.
[4] Crypto whales and how they manipulate the
price. https://steemit.com/cryptocurrency/@endpoint/
crypto-whales-and-how-they-manipulate-the-price, Accessed: 2019-07-
01.
[5] Cryptocurrency info charts. https://bitinfocharts.com/comparison/
hashrate-btc-bch.html, Accessed: 2019-07-01.
[6] Cryptocurrency market state visualization. https://coin360.io/, Accessed:
2019-07-01.
[7] Cryptocurrency price manipulation is un-
avoidable. https://www.cnbc.com/2018/02/13/
cryptocurrency-price-manipulation-is-unavoidable-nem-president-says.
html, Accessed: 2019-07-01.
[8] How the winner got fomo3d prize a de-
tailed explanation. https://medium.com/coinmonks/
how-the-winner-got-fomo3d-prize-a-detailed-explanation-b30a69b7813f,
Accessed: 2019-07-01.
[9] Litecoin. https://litecoin.com/, Accessed: 2019-07-01.
[10] Neo. https://neo.org/, Accessed: 2019-07-01.
[11] What to mine. https://whattomine.com/, Accessed: 2019-07-01.
[12] Eitan Altman, Alexandre Reiffers, Daniel S Menasche, Mandar Datar,
Swapnil Dhamal, and Corinne Touati. Mining competition in a
multi-cryptocurrency ecosystem at the network edge: a congestion
game approach. ACM SIGMETRICS Performance Evaluation Review,
46(3):114–117, 2019.
[13] E. Anshelevich, A. Dasgupta, J. Kleinberg, É. Tardos, T. Wexler, and
T. Roughgarden. The price of stability for network design with fair cost
allocation. SIAM Journal on Computing, 38(4):1602–1623, 2008.
[14] Vitalik Buterin et al. A next-generation smart contract and decentralized
application platform, 2014.
[15] Miles Carlsten, Harry Kalodner, S Matthew Weinberg, and Arvind
Narayanan. On the instability of bitcoin without the block reward.
In Proceedings of the ACM SIGSAC Conference on Computer and
Communications Security, pages 154–167. ACM, 2016.
[16] Eyal Even-Dar, Alex Kesselman, and Yishay Mansour. Convergence
time to nash equilibria. In Jos C. M. Baeten, Jan Karel Lenstra, Joachim
Parrow, and Gerhard J. Woeginger, editors, Automata, Languages and
Programming, pages 502–513, Berlin, Heidelberg, 2003. Springer Berlin
Heidelberg.
[17] Ittay Eyal. The miner’s dilemma. In Security and Privacy (SP), 2015
IEEE Symposium on, pages 89–103. IEEE, 2015.
[18] Ittay Eyal and Emin Gun Sirer. Majority is not enough: Bitcoin mining
is vulnerable. In International Conference on Financial Cryptography
and Data Security, pages 436–454. Springer, 2014.
[19] Dimitris Fotakis, Spyros Kontogiannis, Elias Koutsoupias, Marios
Mavronicolas, and Paul Spirakis. The structure and complexity of nash
equilibria for a selfish routing game. In Peter Widmayer, Stephan
Eidenbenz, Francisco Triguero, Rafael Morales, Ricardo Conejo, and
Matthew Hennessy, editors, Automata, Languages and Programming,
pages 123–134, Berlin, Heidelberg, 2002. Springer Berlin Heidelberg.
[20] Dimitris Fotakis, Spyros Kontogiannis, and Paul Spirakis. Selfish
unsplittable flows. In Josep Díaz, Juhani Karhumäki, Arto Lepistö,
and Donald Sannella, editors, Automata, Languages and Programming,
pages 593–605, Berlin, Heidelberg, 2004. Springer Berlin Heidelberg.
[21] Neil Gandal, JT Hamrick, Tyler Moore, and Tali Oberman. Price
manipulation in the bitcoin ecosystem. Journal of Monetary Economics,
2018.
[22] M. Goemans, Vahab Mirrokni, and A. Vetta. Sink equilibria and
convergence. In 46th Annual IEEE Symposium on Foundations of
Computer Science (FOCS’05), pages 142–151, Oct 2005.
[23] Guy Goren and Alexander Spiegelman. Mind the mining. In Proceedings
of the 2019 ACM Conference on Economics and Computation, pages
475–487, 2019.
[24] Dylan Hadfield-Menell, Smitha Milli, Pieter Abbeel, Stuart J Russell,
and Anca Dragan. Inverse reward design. In I. Guyon, U. V. Luxburg,
S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett,
bitcoin-price-news-latest-manipulation-cryptocurrency-surge-plummet-stock-exchange,
961
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
editors, Advances in Neural Information Processing Systems 30, pages
6765–6774. Curran Associates, Inc., 2017.
[25] Tobias Harks. Theoretical and Computational Aspects of Resource
Allocation Games. PhD thesis, Technical University of Berlin, 2012.
[26] Tobias Harks and Max Klimm. On the existence of pure nash equilibria
in weighted congestion games. Mathematics of Operations Research,
37(3):419–436, 2012.
[27] Tobias Harks, Max Klimm, and Rolf H. Mohring. Characterizing the
existence of potential functions in weighted congestion games. Theory
of Computing Systems, 49, 2011.
[28] Ron Holzman and Nissan Law-yone. Network structure and strong
equilibrium in route selection games. Mathematical Social Sciences,
46(2):193–205, 2003.
[29] Benjamin Johnson, Aron Laszka, Jens Grossklags, Marie Vasek, and
Tyler Moore. Game-theoretic analysis of ddos attacks against bitcoin
mining pools. In International Conference on Financial Cryptography
and Data Security, pages 72–86. Springer, 2014.
[30] Aggelos Kiayias, Elias Koutsoupias, Maria Kyropoulou, and Yiannis
Tselekounis. Blockchain mining games. In Proceedings of the 2016
ACM Conference on Economics and Computation, pages 365–382. ACM,
2016.
[31] Yujin Kwon, Hyoungshick Kim, Jinwoo Shin, and Yongdae Kim. Bitcoin
vs. bitcoin cash: Coexistence or downfall of bitcoin cash? In 2019 IEEE
Symposium on Security and Privacy (SP), pages 935–951. IEEE, 2019.
[32] Kevin Liao and Jonathan Katz. Incentivizing blockchain forks via whale
transactions. In International Conference on Financial Cryptography
and Data Security, pages 264–279. Springer, 2017.
[33] Ziyao Liu, Nguyen Cong Luong, Wenbo Wang, Dusit Niyato, Ping Wang,
Ying-Chang Liang, and Dong In Kim. A survey on blockchain: a game
theoretical perspective. IEEE Access, 7:47615–47643, 2019.
[34] Michael Mirkin, Yan Ji, Jonathan Pang, Ariah Klages-Mundt, Ittay Eyal,
and Ari Jules. Bdos: Blockchain denial of service. arXiv preprint
arXiv:1912.07497, 2019.
[35] D. Monderer and L.S. Shapley. Potential games. Games and Economic
Behavior, 14:124–143, 1996.
[36] Dov Monderer and Moshe Tennenholtz. k-implementation. Journal of
Artificial Intelligence Research, 21:37–62, 2004.
[37] Dov Monderer and Moshe Tennenholtz. Strong mediated equilibrium.
Artif. Intell., 173(1):180–195, 2009.
[38] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system, 2008.
[39] Kartik Nayak, Srijan Kumar, Andrew Miller, and Elaine Shi. Stubborn
mining: Generalizing selfish mining and combining with an eclipse attack.
In 2016 IEEE European Symposium on Security and Privacy (EuroS&P),
pages 305–320. IEEE, 2016.
[40] Noam Nisan, Tim Roughgarden, Eva Tardos, and Vijay V. Vazirani.
Algorithmic Game Theory. Cambridge University Press, New York, NY,
USA, 2007.
[41] Ayelet Sapirshtein, Yonatan Sompolinsky, and Aviv Zohar. Optimal
selfish mining strategies in bitcoin. In International Conference on
Financial Cryptography and Data Security, pages 515–532. Springer,
2016.
[42] Okke Schrijvers, Joseph Bonneau, Dan Boneh, and Tim Roughgarden.
Incentive compatibility of bitcoin mining pool reward functions. In
International Conference on Financial Cryptography and Data Security,
pages 477–498. Springer, 2016.
[43] Yoav Shoham and Moshe Tennenholtz. On social laws for artificial agent
societies: off-line design. Artificial intelligence, 73(1-2):231–252, 1995.
[44] Jonathan Sorg, Richard L Lewis, and Satinder P. Singh. Reward
design via online gradient ascent. In J. D. Lafferty, C. K. I. Williams,
J. Shawe-Taylor, R. S. Zemel, and A. Culotta, editors, Advances in
Neural Information Processing Systems 23, pages 2190–2198. Curran
Associates, Inc., 2010.
[45] Jonathan Sorg, Satinder P. Singh, and Richard L. Lewis. Internal rewards
mitigate agent boundedness. In Proceedings of the 27th International
Conference on Machine Learning (ICML-10), June 21-24, 2010, Haifa,
Israel, pages 1007–1014, 2010.
[46] Alexander Spiegelman, Idit Keidar, and Moshe Tennenholtz. Game of
coins. arXiv preprint arXiv:1805.08979, 2018.
[47] Richard S. Sutton and Andrew G. Barto. Reinforcement learning - an
introduction. Adaptive computation and machine learning. MIT Press,
1998.
[48] Itay Tsabary and Ittay Eyal. The gap game. In Proceedings of the 2018
ACM SIGSAC conference on Computer and Communications Security,
pages 713–728, 2018.
APPENDIX
A. Formal Proofs From Section IV
Claim 5. Consider a game GΠ,C,F , a configuration s ∈ S, a
coin c ∈ C, and two miners p, p′ ∈ Pc(s) s.t. mp ≤ mp′ . If p
is stable in s, then p′ is stable in s as well.
Proof. Since p is stable in s, we get that
F (c)
mp
Mc(s)
≥ F (c′)
mp
Mc′(s) +mp
for every c′ ∈ C
Thus,
F (c)
1
Mc(s)
≥ F (c′)
1
Mc′(s) +mp
for every c′ ∈ C.
Since, mp ≤ mp′ , it follows that
F (c)
1
Mc(s)
≥ F (c′)
1
Mc′(s) +mp′
for every c′ ∈ C.
Thus,
F (c)
mp′
Mc(s)
≥ F (c′)
mp′
Mc′(s) +mp′
for every c′ ∈ C,
and p′ is stable in s.
Claim 6. Let F be a reward function. Consider a system
Q = 〈Π, C〉, and a configuration s ∈ SQ. Now consider
another system Q′ = 〈Π′, C〉 s.t. Π′ = Π∪{pnew}, pnew 6∈ Π,
and mpnew ≤ min{mp|p ∈ Π}. Let
c = argmax
c′∈C
F (c′)
mpnew
Mc′(s) +mpnew
and consider a configuration s′ ∈ SQ′ s.t. for all p ∈ Π
s′.p = s.p and s′.pnew = c. Then pnew is stable in s′ in game
GΠ′,C,F , and every player p ∈ Π that is stable in s in GΠ,C,F
is also stable in s′ in GΠ′,C,F .
Proof. By construction of configuration s′, Mc(s
′) = Mc(s) +
mpnew and ∀c′ 6= c Mc′(s
′) = Mc′(s). Therefore, by the way
we pick c, we get that
F (c)
mpnew
Mc(s′)
≥ F (c′)
mpnew
Mc′(s′)
for all c′ ∈ C,
and thus pnew is stable in s′. Now consider a player p ∈ Π
that is stable in s, we show that p is stable also in s′. Consider
two cases:
• First, p ∈ Pc′(s′) s.t. c 6= c′. By construction, p ∈ Pc′(s),
and since p is stable in s we know that
F (c′)
mp
Mc′(s)
≥ F (c′′)
mp
Mc′′(s) +mp
for every c′′ ∈ C. Now since Mc(s
′) > Mc(s) and for
all c′′ 6= c, Mc′′(s
′) = Mc′′(s), we get
F (c′)
mp
Mc′(s′)
≥ F (c′′)
mp
Mc′′(s′) +mp
for every c′′ ∈ C. Meaning that p is stable in s′.
• Second, p ∈ Pc(s′). Since pnew is stable in s′ and mp ≥
mpnew , we get by Claim 5 that p is stable in s′.
962
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
Lemma 3. Any game GΠ,C,F under Assumptions 1 and 2 has
at least two different stable configurations.
Proof. Let p1, . . . , pn be the miners in Π in decreasing mining
power, i.e., mp1 ≥ mp2 ≥ . . . ≥ mpn and let c1, . . . , cl be the
coins in C sorted by decreasing coin rewards, i.e., F (c1) ≥
F (c2) ≥ . . . ≥ F (cl). Note that through the proof we construct
several games, but we assume Assumptions 1 and 2 only in the
original game GΠ,C,F . Let Π1, . . . ,Πn be the following sets
of miners s.t. Πk , {p1, . . . , pk}, 1 ≤ k ≤ n. Next consider
two configurations s2
1, s
2
2 in game GΠ2,C,F : s2
1 = 〈c1, c2〉 (i.e.,
s2
1.p1 = c1 and s2
1.p2 = c2) and s2
2 = 〈c2, c1〉. Note that
s2
1 6= s2
2, and since F (c1) ≥ F (c2), p1 is stable in s2
1 and p2
is stable in s2
2.
We now use s2
1, s
2
2 to inductively construct a sequence of
pairs of configurations 〈s2
1, s
2
2〉, 〈s3
1, s
3
2〉, . . . , 〈sn1 , sn2 〉, where
∀ 2 ≤ k ≤ n, sk1 , s
k
2 are two configurations in game GΠk,C,F .
For 3 ≤ k ≤ n, let
x1 = argmax
c∈C
F (c)
mpk
Mc(s
k−1
1 ) +mpk
and
x2 = argmax
c∈C
F (c)
mpk
Mc(s
k−1
2 ) +mpk
,
we construct sk1 = sk−1
1 ×x1 (i.e., ∀1 ≤ i < k, sk1 .pi = sk−1
1 .pi
and sk1 .pk = x1) and sk2 = sk−1
2 × x2.
Note that since s2
1 6= s2
2, we get by construction that sn1 6= sn2 .
It remains to show that configurations sn1 and sn2 are stable.
Assume by way of contradiction that it is not the case, and
assume w.l.o.g. that sn1 is not stable. By inductively applying
Claim 6, and since p1 is stable in s2
1 we get that players p1
and p3, . . . , pn are stable in sn1 . Thus p2 is not stable. Recall
that s2
1.p2 = c2, and thus by construction sn1 .p2 = c2. Recall
also that we assume Assumptions 1 and 2, and consider two
cases:
• First, |Pc2(sn1 )| = 1 . By Assumption 1, there is a miner
p ∈ Π s.t. changing sn1 .p to c2 is a better response
step for p. Thus, p is not stable in sn1 . In addition, by
definition of better response step, we know that pi 6= p2.
A contradiction to p2 being the only unstable miner in
sn1 .
• Second, |Pc2(sn1 )| > 1. Since p1 ∈ Pc1(s2
1), we get that
there is a stable miner p ∈ Pc2(s2
1) s.t. p ∈ {p3, . . . , pn},
and thus, m2 ≥ mp. Therefore, by Claim 5, we get that
p2 is stable in sn1 . A contradiction.
B. Proof of The Key Lemma 2 From Section V
Lemma 2 (restated). Consider a configuration s ∈ Ti \ {si}.
Then every better response dynamics in the game GΠ,C,Hi(s)
that starts at s converges to a configuration s′ ∈ Ti such that:
1) ∀k, 1 ≤ k < µi(s), s′.pk = s.pk.
2) s′.pµi(s) = sf .pi.
Proof. Let c = sf .pi−1 and c′ = sf .pi. By definition of µi(s),
and since s 6= si we know that pµi(s) ∈ Pc(s). We first show
that the only better response step in configuration s in game
GΠ,C,Hi(s) is that pµi(s) moves to c′. This follows from the
following three observations.
1) Since ∀c′′ 6= c′, RPUc′′(s) = R(s) and RPUc′(s) >
R(s), we get that no miner has a better response step to
move to any coin c′′ 6= c′.
2) Since mpµi(s)
< mpαi(s)
, we get that
RPUc′((s−pµi(s) , c
′)) =
R(s) · (Mc′(s) +mpαi(s)
)
Mc′(s) +mpµi(s)
> R(s) = RPUc(s),
and thus moving to c′ is a better response step for pµi(s)
in configuration s.
3) Now consider a miner pk 6∈ Pc′(s) s.t. k 6= µi(s). By
definition of µi(s), k < µi(s), thus mpk > mpµi(s)
, and
thus,
R(s) · (Mc′(s) +mpαi(s)
)
Mc′(s) +mpk
≤ R(s).
All in all, we get that the only better response step in
configuration s is that pµi(s) moves to c′.
Let s0 = (s−pµi(s) , c
′) be the configuration reached after
pµi(s) takes its step. We next prove by induction that every
configuration s′ that is reached by better response steps starting
from s0 satisfies the following properties:
Ψ1. ∀k, 1 ≤ k < µi(s): s′.pk = s.pk. The heavy miners up
to the anchor remain stable.
Ψ2. s′.pµi(s) = c′. The mover remains stable.
Ψ3. ∀k, µi(s) < k ≤ n: s′.pk ∈ {c, c′}. The light miners
have two options.
Ψ4. Mc(s
0) ≤Mc(s
′) ≤Mc(s). The power of miners in coin
c does not fluctuate.
Ψ5. Mc′(s) ≤ Mc′(s
′) ≤ Mc′(s
0). The power of miners in
coin c′ does not fluctuate.
Note that since s ∈ Ti, Ψ1 −Ψ3 imply that s′ ∈ Ti.
Base. We show that the properties Ψ1−Ψ5 are satisfied for
configuration s0.
Ψ1 − Ψ3. Follow by definitions of µi(s) and Ti,
and since s0 = (s−pµi(s) , c
′).
Ψ4 − Ψ5. Trivially follows.
Induction step. Consider two configurations s1, s2 ∈ S s.t.
a better response step of some miner leads from s1 to s2,
and s1 satisfies properties Ψ1 −Ψ5. We show that s2 satisfies
properties Ψ1 −Ψ5 as well.
a) Useful equations for configuration s1.: We start by
proving two useful equations on the RPUs of coins c and c′
in configuration s1 using Ψ4 and Ψ5:
By Ψ4, Mc(s
1) ≤ Mc(s). In addition, since Hi(s)(c) =
R(s) ·Mc(s), we get that
RPUc(s
1) =
Hi(s)(c)
Mc(s1)
=
R(s) ·Mc(s)
Mc(s1)
≥ R(s) ·Mc(s)
Mc(s)
= R(s).
(6)
963
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply. 
By Ψ5, Mc′(s
1) ≤Mc′(s
0). In addition, since (1) mpµi(s)
<
mpαi(s)
, (2) Mc′(s) = Mc′(s
0)−mpµi(s)
, and (3) Hi(s)(c
′) =
R(s) · (Mc′(s) +mpαi(s)
), we get that
RPUc′(s
1) =
Hi(s)(c
′)
Mc′(s1)
=
R(s) · (Mc′(s) +mpαi(s)
)
Mc′(s1)
=
R(s) · (Mc′(s
0)−mpµi(s)
+mpαi(s)
)
Mc′(s1)
≥ R(s) ·Mc′(s
0)
Mc′(s0)
= R(s).
(7)
b) Useful equations for configurations s1 and s2.: We
now prove two useful equations on the RPUs of coins not in
{c, c′} in configurations that satisfy Ψ1 −Ψ3.
By definition of Hi, ∀c′′ 6∈ {c, c′}, Hi(s)(c
′′) = R(s) ·
Mc′′(s). Since s ∈ Ti, ∀k, i ≤ k ≤ n : s.pk ∈ {c, c′}, and
by definition of µi(s), we know that µi(s) ≥ i. Therefore, by
Ψ1 −Ψ3, we get that
∀c′′ 6∈ {c, c′}, Mc′′(s
1) = Mc′′(s), (8)
and thus
∀c′′ 6∈ {c, c′}, RPUc′′(s1) =
Hi(s)(c
′′)
Mc′′(s1)
=
R(s) ·Mc′′(s)
Mc′′(s)
= R(s) .
(9)
c) Induction step proof.: We are now ready to prove that
s2 satisfies properties Ψ1 −Ψ5.
Ψ1 −Ψ2. Since Ψ1 and Ψ2 hold in s1, we only need to show that
p1, . . . , pµi(s) are stable in s1. Let k ∈ {1, . . . , µi(s)}
and note that mpk ≥ mpµi(s)
. By Equation 9, for all c′′ 6∈
{c, c′}, RPUc′′(s1) = R(s), and by Equations 6 and 7,
we know that RPUc(s1) ≥ R(s) and RPUc′(s1) ≥ R(s),
respectively. Therefore, it remains to show that pk does
not have a better response step to c or c′:
– By Ψ4, Mc(s
1) ≥Mc(s
0), and thus we get that
Hi(c)
Mc(s1) +mpk
≤ Hi(c)
Mc(s0) +mpµi(s)
=
Hi(c)
Mc(s)
=
Mc(s) ·R(s)
Mc(s)
= R(s).
Therefore, pk does not have a better response step to
c.
– By Ψ2, pµi(s) ∈ Pc′(s1). Therefore, if pk = pµi(s),
then we are done. Otherwise, k < µi(s) = αi(s) + 1,
so mpk ≥ mpαi(s)
. By Ψ5, Mc′(s
1) ≥ Mc′(s), and
thus
Hi(c
′)
Mc′(s1) +mpk
≤ Hi(c
′)
Mc′(s) +mpαi(s)
=
R(s) · (Mc′(s) +mpαi(s)
)
Mc′(s) +mpαi(s)
= R(s).
Therefore, pk does not have a better response step to
c′.
Ψ3. By Equations 6 and 7, RPUc(s
1) ≥ R(s) and
RPUc′(s
1) ≥ R(s). By Equation 9, for all c′′ 6∈ {c, c′},
RPUc′′(s
1) = R(s). Therefore, since by the induc-
tive assumption (Ψ3), miners pµi(s)+1, . . . , pn are in
Pc(s
1) ∪ Pc′(s1), we get that none of them has a better
response step to move to a coin c′′ 6∈ {c, c′}, and thus Ψ3
holds in s2 as well.
Ψ4. By definitions of s0, µi(s), and Ti, we know that Pc(s0)∩
{pµi(s), . . . , pn} = ∅. Since Ψ1 holds in s0 and in s1, we
get that ∀k, 1 ≤ k < µi(s): s1.pk = s0.pk. Therefore,
we get that Mc(s
0) ≤ Mc(s
2). It remains to show that
Mc(s
2) ≤ Mc(s). By Equation 9, for all c′′ 6∈ {c, c′},
RPUc′′(s
1) = R(s). By Equations 6 and 7, RPUc(s1) ≥
R(s) and RPUc′(s
1) ≥ R(s). Now assume by way of
contradiction that Mc(s
2) > Mc(s). Thus,
RPUc(s
2) =
Hi(c)
Mc(s2)
<
Hi(c)
Mc(s)
=
R(s) ·Mc(s)
Mc(s)
= R(s).
Now since RPUc(s
2) < R(s) ≤ RPUc(s
1), we get
that s2 = (s1
−p, c) for some p ∈ Π. A contradiction to
Observation 2.
Ψ5. Since we already showed that s2 satisfies Ψ1 − Ψ3, by
Equation 8, we get that ∀c′′ 6∈ {c, c′}, Mc′′(s
2) =
Mc′′(s). In addition, since s0 = (s−pµi(s) , c
′), ∀c′′ 6∈
{c, c′}, Mc′′(s
0) = Mc′′(s). Therefore, we get that
∀c′′ 6∈ {c, c′}, Mc′′(s) = Mc′′(s
0) = Mc′′(s
2), and
thus Mc(s
2) +Mc′(s
2) = Mc(s
0) +Mc′(s
0) = Mc(s) +
Mc′(s). Hence, Ψ5 follows from Ψ4.
Now together with Theorem 1, we know that every better
response dynamics in the game GΠ,C,Hi(s) that starts at s
converges to some configuration s′ that satisfies Ψ1 − Ψ5.
Since s ∈ Ti, we get that
∀k, 1 ≤ k ≤ i− 1 : s.pk = sf .pk
∀k, i ≤ k ≤ n : s.pk ∈ {sf .pi, sf .pi−1}
And since s 6= si, we get that i ≤ µi(s). Thus, by Ψ1,
∀k, 1 ≤ k ≤ i − 1 : s′.pk = sf .pk. In addition, by Ψ3, we
get that ∀k, i ≤ k ≤ n, s.pk ∈ {sf .pi, sf .pi−1}. Therefore,
s′ ∈ Ti, and the lemma follows from Ψ1 and Ψ2.
964
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:17 UTC from IEEE Xplore.  Restrictions apply.