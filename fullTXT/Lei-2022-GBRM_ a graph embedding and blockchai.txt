GBRM: a graph embedding and blockchain-based resource management framework for 5G MEC
Vol:.(1234567890)
The Journal of Supercomputing (2022) 78:16266–16285
https://doi.org/10.1007/s11227-022-04528-x
1 3
GBRM: a graph embedding and blockchain‑based resource 
management framework for 5G MEC
Kai Lei1  · Hao Ye1 · Junjie Fang1 · Peiwu Chen2 · Liangjie Zhang3 · Jing Xiao2
Accepted: 30 March 2022 / Published online: 3 May 2022 
© The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature 
2022
Abstract
In the 5G scenario of the convergence of information technology (IT) and communi-
cation technology (CT), multi-operators collaborate to form edge computing, which 
makes the problem of resource optimization more complicated than ever. Users may 
access resources deployed by various MEC’s operators to achieve ultra-low latency. 
However, traditional resource management methods consider only a single opera-
tor failure to handle profit allocation and privacy security issues among different 
operators. To address this problem, we proposed a resource management framework 
named GBRM based on graph embedding and blockchain. Specifically, we use the 
Stackelberg game model to solve MEC servers’ cache-offloading problem; non-
indexed content sharing by Deepwalk graph embedding between MECs ensures the 
privacy of different operators’ content. Consortium blockchain assists in the trusted 
profit allocation of services across various operators. Experiments show in the vir-
tual network scenario that our work performance is significantly better than the 
RandomSelect and the LocalIndex method in global latency and close to the global 
index’s ideal situation. Multi-operators collaborate to form edge computing, which 
makes the problem of resource optimization more complicated than ever.
Keywords 5G · Mobile edge computing · Graph embedding · Blockchain · 
Stackelberg game · Resource management
1 Introduction
In the 5G era, information technology (IT) and communication technology (CT) are 
integrated together. Mobile edge computing (MEC) is one of the main approaches 
that enable the integration of IT into the telecommunication infrastructure [1]. MEC 
implements the cloud computing paradigm to the network’s edge, especially the 
 * Kai Lei 
 leik@pkusz.edu.cn
Extended author information available on the last page of the article
https://orcid.org/0000-0001-9197-895X
http://crossmark.crossref.org/dialog/?doi=10.1007/s11227-022-04528-x&domain=pdf
16267
1 3
GBRM: a graph embedding and blockchain‑based resource…
radio access network (RAN). By equipping the edge network infrastructures with 
enhanced computing and caching capabilities, many applications such as the Inter-
net of Things (IoT) and large scale video content distribution with stringent latency, 
scalability and throughput requirements will benefit from it.
We consider a typical 5G MEC scenario MEC servers belonging to multiple 
Internet Service Providers (ISP) provide network access, computing tasks, cached 
content and other services for end-users and content providers, where users may 
access resources deployed by other operators. Generally, MEC servers refer to the 
Internet infrastructures such as 5G base stations deployed by certain Internet Ser-
vice Providers (ISP). However, MEC’s vision is to utilize all possible spare comput-
ing and caching resources of edge devices owned by ordinary users or particular 
infrastructure providers. Furthermore, 5G requires base stations to be deployed in an 
ultra-dense fashion. Therefore, we consider a future vision and refer MEC servers to 
macro-base stations deployed by different stakeholders. Apart from providing net-
work access services to end-users, MEC servers cache content for content providers 
(CPs) to reduce average download delay and backbone pressure.
Three challenges remain to be tackled to construct a multi-stakeholders 5G MEC 
system for content caching and distribution. Firstly, due to the limitation of cach-
ing resources of MEC servers and the dynamics of content request distribution, it is 
challenging to design a caching scheme for multiple CPs and multiple MEC serv-
ers. Secondly, considering that one 5G end-user may attach to multiple MEC serv-
ers and one content may exist in multiple MEC servers and CPs, there is a con-
tent source recommendation problem for end-user requests. Thirdly, MEC servers 
are deployed by different stakeholders and end-users, which belong to one specific 
stakeholder. They may utilize the MEC server deployed by other stakeholders as a 
network access point. Therefore, there exists a cross stakeholder settlement problem. 
We propose a GBRM framework for solving the above problem.
We consider a continuous caching decision-making process among multiple CPs 
and multiple MEC servers. CPs can lease caching resources from MEC servers 
with a specific caching incentive price. After being informed of the offered cach-
ing incentive price, MEC servers decide on the caching amount allocated to this 
CP. The caching incentive price decision of CPs is made based on the estimation of 
MEC servers’ reaction, while the caching amount decision of MEC servers is made 
based on the observation of CPs’ action. This continuous caching decision-making 
process is entirely under the Stackelberg game. Therefore, we propose a Stackelberg 
game-based caching scheme with CPs acting as leaders and MEC servers acting as 
followers. Furthermore, the benefits of CPs and MEC servers are defined separately 
as utilities. Stackelberg equilibrium at which point both CPs and MEC server get 
their maximum utilities is proved by mathematical analysis and simulation results.
After the Stackelberg game solves the problem of caching decision-making, the 
remaining issue is how to select the best MEC when the user requests content when 
the base station(BS) connects to multiple MECs. A naive but direct way is that the 
MEC connected to the base station sends the index of the content it contains to the 
MEC connected to it, and then, the BS uses these indexes to find the best MEC 
server. However, the BS will connect to the other operator’s MEC in the 5G sce-
nario who may not be willing to share their MEC content index due to privacy and 
16268 K. Lei et al.
1 3
security considerations; at the same time, the MEC may have a lot of content, caus-
ing the content index too large, sharing all content indexes may cause traffic load 
pressure on the network. To solve the above problem, we introduced a method based 
on embedding matching to reduce the amount of index transmission while preserv-
ing MEC content’s privacy. The MEC content is formed into embedding and then 
combined to form the embedding of MEC send to the BS, and the BS measures 
the similarity between the content request and the embedding of the MEC to calcu-
late the MEC is most likely to contain the request’s content for access. Experiments 
show that GBRM performance is much better than random selection and is close to 
the traditional index method.
There remains a problem when MEC servers provide service (e.g., provide their 
cached content resources) to the users. Different operator’s own MEC servers may 
serve customers who are not their own operators. Therefore, the base station may 
not be willing to do these things if they cannot benefit from these services. A rea-
sonable solution to this problem is charge by service. Specifically, MEC servers will 
get paid each time they provide service whether the customers belong to their opera-
tor or not. There will be a system between the operators handling the cross-operator 
service cost. After all, the users do not care who provides the service; they still only 
pay their own operators, which share a portion of their revenue with MEC serv-
ers that serve their customers. Therefore, we have introduced blockchain to build 
the system for service cost settlement across operators. The scenario we are deal-
ing with is a large number of untrusted or partly trusted nodes. MEC servers may 
lie to earn more benefits, and there is no supernode between operators to verify the 
authenticity or guarantee safe dealings of the MEC server’s service. In a word, the 
aiming is to realize a reliable and efficient settlement beyond the distributed peer by 
its characters. The main contributions of this paper lie in:
• We propose a multi-stakeholders 5G MEC resource management framework 
named GBRM for content caching and distribution with graph embedding and 
blockchain assisted. The interrelations among different stakeholders are elabo-
rated.
• The interaction of CPs and MEC servers is modeled as a Stackelberg game-
based caching decision-making process, the Stackelberg equilibrium of which is 
proved by mathematical analysis and simulation results.
• In consideration of the multiple access points and multiple content sources fea-
ture of 5G, we solve the end-user requests and content sources matching problem 
using the graph embedding-based recommendation approach. This method is of 
high accuracy while protecting the operator’s privacy.
• Since the MEC server will be deployed by different stakeholders in the future, 
there exists a problem of resolution between the untrusted stakeholders. We 
propose a consortium blockchain-based settlement scheme to encourage and 
enhance MEC servers’ participation in this system.
The remainder of this paper is structured as follows. Section 2 gives a brief summary 
of related work in terms of Stackelberg game-based edge caching, graph embedding-
based recommendation approach and blockchain and consensus. Section 3 presents 
16269
1 3
GBRM: a graph embedding and blockchain‑based resource…
the multi-stakeholders 5G MEC system model. Then, the following three sections 
elaborate on the design details of our Stackelberg game-based caching scheme, 
graph embedding-based recommendation approach and blockchain-based settlement 
scheme, respectively. Section 7 presents the simulation results and analysis. We con-
clude this paper in Sect. 8.
2  Background and related work
2.1  Stackelberg game‑based edge caching
Many research effort has been dedicated to the edge caching problem, among which 
Stackelberg game-based ones are listed below. Li et al. [2] considers an edge cach-
ing scenario with several video retailers (VRs), network service providers (NSP) and 
several mobile users. The NSP acts as a leader and sets the price of leasing small-
cell base stations (SBS), while the VRs act as followers and compete to rent a frac-
tion of the SBSs. In [3], an edge caching scenario with one content provider (CP), 
one Internet Service Provider (ISP) and several users is considered. Furthermore, the 
Stackelberg Game-based solutions are listed below caching scheme is reversed with 
CP acting as a leader to offer to cache incentive price and ISP acting as a follower to 
decide on the caching amount allocation. In [4], the Stackelberg game-based cach-
ing scheme is decomposed into two kinds of sub-games, a storage allocation game 
(SAG) and multiple user allocation games (UAGs). Special attention is paid to the 
scalability issue. Xiong et al. [5] investigated a sponsored and edge caching content 
service market model. A three-stage Stackelberg game is formulated to jointly opti-
mize each content service provider and mobile users’ benefits.
2.2  Graph embedding‑based recommendation
In the early recommendation system, collaborative filtering [6] is usually used to 
recommend content. First, the connection between the user and the content is 
formed into an adjacency matrix, and then, it is decomposed into two low-rank 
matrices of the user and the content through the method of matrix decomposition. 
However, this kind of approach faces a cold start and high computational complex-
ity (the complexity of matrix factorization is O(n3)) . With the development of deep 
learning, DeepWalk [7] was proposed as a new method of graph embedding. Deep 
walk borrowed the training method in word2vec [8] and first used the random walk 
to traverse the graph for generating a walk sequence similar to a language sentence; 
a skip-gram is adopted to minimize the distance of similar nodes to generate embed-
ding for the nodes. Some subsequent work improved the similarity calculation, such 
as Line [9] change the first-order similarity of Deepwalk to second-order or even 
higher-order similarity; some work improved the random walk method to consider 
various types of node features and extract more comprehensive information of the 
16270 K. Lei et al.
1 3
graph, such as metapath2vec [10] and HeteSpaceyWalk [11] for solving heterogene-
ous network; the paper BiNE [12] and BiANE [13] for solving the problem in Bi-
part network.
2.3  Blockchain and consensus
Blockchain is known as Bitcoin’s underlying technology, which can be regarded as a 
shared digital ledger. The records of the transactions are stored in blocks, which are 
linked in chronological order. Each node in the blockchain network all has a copy of 
the ledger and synchronizes it regularly [14].
Blockchain is widely used to keep records, especially transaction records, in a 
distributed environment. It is due to non-tampering nature. Notably, each block is 
encrypted using the hash algorithm. Any change in input information will result in a 
significant change in the hash result and easily verified by all nodes.
If new blocks are trying to add to the blockchain’s end, they need to pass the 
consensus across the entire networks’ nodes. In our view, a consensus mechanism 
must address two issues: Firstly, Which node is selected to add a new block to the 
blockchain during this period? This can also be understood as a matter of avoiding 
forks by ensuring that all nodes keep the same copy of the blockchain in a distrib-
uted environment; secondly, how to ensure that the blockchain records are real and 
effective? For example, in Bitcoin, each node must query the blockchain to verify 
that one transaction generator has enough money to complete the transaction.
The proof of work (PoW) consensus [14] mechanism is the broadest deployed 
consensus mechanism in existing blockchains, which was introduced by Bitcoin. Its 
idea can be summarized as follows: All nodes try to solve a mathematical problem 
with a certain difficulty nonce, and the node which gets the answer first will get the 
right to add a block to the blockchain and the Bitcoin reward. One thing that can be 
inferred is that the more computational power one node has, the more likely it is to 
get the right to add a block.
Proof of Stake(PoS) [15, 16] is another widespread consensus applied in the 
blockchain. It has been seen as a strong candidate to replace the largely inefficient 
Proof of Work mechanism currently plugged in most existing open blockchains. In 
PoS, a node will not get the right to add a new block by solving the mathematical 
problem. The right is related to the proportion of coins held by a miner.
Proof of storage (PoS) is substantially not a consensus but an interactive cryp-
tographic protocol that allows a client to verify that a server faith-fully stores a file 
efficiently [17, 18]. A blockchain focuses more on the second issue that a consensus 
must address–the records’ authenticity and validity. The Filecoin has improved POS 
and implemented a distributed environment that pays for every node that helps users 
store files.
16271
1 3
GBRM: a graph embedding and blockchain‑based resource…
3  System model
We consider a typical 5G edge computing scenario with M CPs, N FN(Fog 
node)s and G users, as shown in Fig.  1. The sets of CPs, FNs and users are 
denoted by {P1,P2,… ,PM} , {F1,F2,… ,FL} and {U1,U2,… ,UG} , respectively. 
FNs refer to 5G base stations, which are equipped with caching resources along 
with enhanced transmission capability that is densely deployed. Each user may 
be served by multiple FNs as long as it locates in an overlapping service area, 
which is a distinct feature of 5G. In the prospect of edge computing, FN may be 
deployed by any stakeholders, including Internet Service Providers, infrastruc-
ture manufactures and even common users.
CPs lease cache from FNs to cache popular content at the edge of the network 
to reduce average service delay. Due to the numerous amount of content, we 
divide content into K classes according to content popularity. The content class 
set is denoted as {f1, f2,… , fK} . Suppose the amount of requests delivered by FN 
Fn to CP Pm for content fk is �nmk . The caching incentive offered by CP Pm to FN 
Fn for caching a unit amount of content fk is denoted as vmnk . Let xnmk denotes 
the amount of caching resource that FN Fn allocates to CP Pm for caching con-
tent fk.
Fig. 1  5G MEC system model
16272 K. Lei et al.
1 3
4  Caching scheme
In this section, a Stackelberg game-based caching scheme is proposed. We sim-
plify the caching incentive and caching amount decision problem between mul-
tiple CPs and multiple FNs and consider the interaction between one CP and 
multiple FNs. Firstly, we define the utilities of each CP and each FN separately. 
The optimization goal of the caching scheme is to maximize the utilities of CP 
and FNs simultaneously. Then, considering the continuous decision-making pro-
cess between CP and multiple FNs, we model the interaction between CP and 
multiple FNs as a Stackelberg game between one leader and multiple followers. 
Afterward, the Stackelberg equilibrium between CP and FNs is solved by math-
ematical analysis.
4.1  Utility definition
As for CP Pm , its utility equals income minus cost as shown in Eq.  (1). Content fee 
from users is the major income source of CP. Suppose that the unit content fee is set 
as vcon and users request �mk chunks of content fk from CP Pm , thus the income of CP 
equals to 
∑K
k=1
vcon�mk . The cost of CP is composed of three parts including caching 
fee, transmission fee and users’ dissatisfaction level. The caching fee that CP Pm pays 
to all FNs adds up to 
∑K
k=1
vmnkxnmk . With vtra denoted as the unit transmission fee, the 
transmission cost of CP Pm equals to 
∑K
k=1
{vtra(�mk −
∑N
n=1
xnmk)} . Users’ dissatisfac-
tion level depends on the average service delay and reflects the long-term profitability 
of CP. As shown in Eq. (1), users’ dissatisfaction level is modeled as a non-decreasing 
function of the total caching amount, whose first derivative is non-increasing. Smk is 
normalized into the interval [0, 1] and stays unchanged as 1 in the case of total caching 
amount exceeds request amount. g denotes the weight factor of users’ dissatisfaction 
level in the utility of CP.
As shown in Eq.  (4), ISP Pm gets profit by providing caching services to CP and 
transmission service to CP and users. Let vtra and C denote the unit transmission 
fee and cost, respectively. It is worth noting that the content transmitted for CP Pm 
(1)Wm(Vm) =
K∑
k=1
{vcon�mk − Costmk}
(2)Costmk =
N∑
n=1
vmnkxnmk − vtra(�mk −
N∑
n=1
xnmk) − g(1 − Smk)
(3)S
mk
=
⎧
⎪⎪⎨⎪⎪⎩
−
1
SF
(
∑N
n=1
xnmk)
2+2wk
∑N
n=1
xnmk
wk�mk
N∑
n=1
x
nmk
< �
mk
1
N∑
n=1
x
nmk
≥ �
mk
16273
1 3
GBRM: a graph embedding and blockchain‑based resource…
equals to cache miss amount xnmk − �nmk . Therefore, the transmission profit equals 
to 
∑K
k=1
{vtra − C)(2�nmk − xnmk)} . 
∑K
k=1
vmnkxnmk denotes the caching reward of FN 
Fn which is the same as the caching cost of CP Pm . �nk denotes the caching cost of 
FN Fn for caching xnmk chunks of content fk , the definition of which follows the gen-
eral rule of marginal cost.
4.2  Stackelberg game‑based caching scheme
As caching scheme between multiple CPs and multiple FNs can be easily expanded 
to caching scheme between one CP and multiple FNs. We solve the caching amount 
and caching price decision problem between one CP and multiple FNs. In the inter-
action between CP and FNs, CP decides on the caching prices Vm to maximize its 
utility. Afterward, each FN makes decision on the caching amount Xn to maximize 
its utility. The caching price decision of CP is based on the estimation of FN’s reac-
tion. The caching amount decision of FN is based on the observation of CP’s action. 
Based on the above analysis, we model the interaction between CP and FNs as a 
Stackelberg game with CP acting as a leader and FNs acting as followers. We aim 
at designing a caching scheme that solve the caching price and caching amount that 
maximize the utilities of CP and FNs simultaneously, which is the Stackelberg equi-
librium between CP and FNs.
Since the action of CP is made based on the estimation of each FN’s reaction. 
Therefore, we try to figure out the optimal reaction function of each FN. More spe-
cifically, given the caching prices offered by CP, what’s the optimal caching amount 
to maximize the utility of FN. The second-order derivative of the utility of FN Fn 
with respect to xnmk is shown in Eq.  (6). On the condition of 𝜃 > 0 , the Hessian 
matrix is negative definite matrix. Therefore, the maximum utility of CP is obtained 
at setting the first-order derivative of Wn with respect to xnmk as 0. The optimal reac-
tion function of caching amount x∗
nmk
 with respect to caching price vmnk is shown in 
Eq. (7).
Replacing xnmk in the utility of CP Wm(Vm) with x∗
nmk
 , Wm(Vm) remains the function 
of Vm = {Vm1,Vm2, ...,VmN} . Since multiple variables remain to be resolved in one 
(4)Wn(Xn) =
K∑
k=1
{(vtra − C)(2�nmk − xnmk) + vmnkxnmk − �nk}
(5)�nk = C0xnmk(
xnmk
�nmk
)�
(6)
�
2W
n
�x
nmk
�x
nmh
=
{
−
C0�(�+1)
(�nmk)
�
(x
nmk
)�−1, k = h
0, k ≠ h
(7)x∗
nmk
= �nmk[
vmnk + C − vtra
C0(� + 1)
]
1
�
16274 K. Lei et al.
1 3
function, coordinate ascent algorithm is adopted to find the optimal Vm that maxi-
mizes the utility of CP. According to coordinate ascent algorithm, the initial value 
of Vm = {Vm1,Vm2, ...,VmN} is picked randomly. Then, update the value of each vnmk 
according to the optimal update function supposing that other vnmk are known. The 
iterative update terminates on condition that the gap of the value of Wm(Vm) between 
two iterations is smaller than certain threshold. Therefore, we intend to find the opti-
mal update function of each vnmk . On the condition of the first-order derivative of 
Wm(Vm) with respect to vmik equal to 0, the second-order derivative of Wm(Vm) with 
respect to vmik is shown in Eq. (8). As long as 𝜆imk >
𝜃
3
 and g > 0 , the second-order 
derivative of Wm with respect to vmik is negative, which means the maximum Wm is 
obtained when the first-order derivative of Wm with respect to vmik equals to 0. The 
first-order derivative of Wm with respect to vmik is shown in Eq. (9).
5  Graph embedding‑based MEC framework
The purpose of graph embedding is to design a framework to solve the end-users 
requests and content sources matching problem. As we described before, a 5G edge 
computing scenario may contain multiple CPs, FNs and G users. This chapter elabo-
rates on this problem as a communication base station requests content for multiple 
MECs. Since in 5G scenarios, the user, mobile phone and IoT devices may be con-
nected to multiple base stations. So we can solve the content source match problem 
in the communication base station. After the simplify, the problem becomes this: 
The communication base station receives the end-user device’s request. Then, com-
munication base station depends on a specific strategy to choose a MEC or central 
network to get the user request content. At last, the base station gets the content and 
returns what end-user needed. We list the matching strategy challenge below:
• When should a base station request content from MEC and when should it 
request from the central network? The base station may not know the MEC serv-
er’s content, as the MEC content may holder by multiple stakeholders who are 
not want to share the content details they owned caused by the problem of pri-
vacy. Simultaneously, the item may also change quickly from time and the vast 
(8)
�
2Wm
�2vmik
=
(
1 −
3�imk
�
)(
x∗
imk
�imk
)1−�
−
2 ∗ g ∗ flag
�2
(
x∗
imk
�imk
)2−2�
(9)
�Wm
�vmik
= −ximk +
�ximk
�vmik
�
vtra − vmik + 2g ∗ flag ∗
�
1
�mk
−
∑N
n=1
xnmk
�
2
mk
��
(10)flag =
�
1,
∑N
n=1
xnmk < 𝜆mk
0,
∑N
n=1
xnmk ≥ 𝜆mk
16275
1 3
GBRM: a graph embedding and blockchain‑based resource…
number of MEC leads the base station to save the content index impossible and 
impractical.
• How to ensure the service delay is as low as possible. If the base station chooses 
to connect to MEC to get the required content but failed and subsequently 
chooses to connect to the central network. The latency may too high to satisfy the 
end-user, or the base station flooding to choose the optimal MEC, the price may 
not be affordable. So we need a feasible method to choose the highest probability 
MEC, which meets the content demand.
To solve the above problem, we propose a graph embedding-based content recom-
mended system. Firstly, we use a graph representation algorithm to represent the 
different contents in the MEC as embedding vector, and then, the MEC combines 
the different content embeddings as a single embedding vector represents the whole 
MEC content storage, at last, the communication base station calculates the simi-
larity between the multiple MEC embedding and request content embedding for 
choosing the MEC includes the content with the highest probability. We split the 
framework into three parts: (1) content embedding, (2) MEC embedding, (3) graph 
embedding indexing, as shown in Fig. 2
5.1  Content embedding
The process to generate content embedding is to generate a global content index. 
As a content provider may contain various modal content, such as videos, images, 
and text, the request matching system should handle it with the same input to pro-
duce the same outputs in different MEC for consistency. We select a message-digest 
algorithm like MD5 [19] and SHA-256, which function generate equal length string 
Fig. 2  Graph embedding base framework
16276 K. Lei et al.
1 3
output for arbitrary length input and reach our previous need with the same inputs 
produce the same outputs.
5.2  MEC embedding concat
The total amount of hash string generated by each MEC is too tremendous to trans-
fer, and direct share the hash string to other operator base stations will also lead 
to privacy leaks. So a suitable performance aggregation method that can integrate 
the embedding in the MEC information aggregation is needed. A naive aggregate 
method is summed all content embedding in a single MEC, which is an effective 
method used in regular network embedding application in the graph representation. 
However, only dozens of content embeddings will be aggregated in a regular appli-
cation, while a MEC may contain tens of thousands of contents. Simply add up all 
the MEC contents embedding directly, then the mixed embedding may only indicate 
the higher price content in the MEC while ignoring other content possible values 
not so high. Therefore, we introduce an effective MEC hybrid embedding method to 
balance low-value and high-value content.
We propose a graph embedding-based aggregate method to solve the MEC hybrid 
embedding problem and express our algorithm in Algorithm 1. Firstly, as described 
in [20], the demand of the content follows the Zipf distributions and we use it to 
simulate the MEC request sequence. Then, we use the used skip-gram algorithm 
[8] to maximize the co-occurrence probability so that the frequently visited content 
can be expressed as similar as possible, and at the same time, the representations 
between different contents are as different as possible. To let all content be repre-
sented, we add a sequence to represent all content in a single MEC to ensure that all 
MEC content can generate better embedding. The objective function of this step is 
the maximum the following probability:
After generating the content embedding, we can train the MECs embedding simul-
taneously, randomly initialize a MECs embedding, and then minimize the distance 
between the MECs embedding and the content embedding. Finally, we design the 
loss function for a single MEC to include embedding for a single content and the 
entire MEC content as Eq. (12). Then, SGD is used to optimize this function.
(11)P
�
wo ∣ wc
�
=
exp
�
u
⊤
o
vc
�
∑
i∈V exp
�
u
⊤
i
vc
�
(12)
minimizeΦ − log Pr
({
vi−w,⋯ , vi+w
}
�vi ∣ Φ
(
vi
))
− log Pr
({
vi−w,⋯ , vi+w
}
�MECi ∣ Φ
(
MECi
))
16277
1 3
GBRM: a graph embedding and blockchain‑based resource…
5.3  Bi‑part network recommend and update
With the MEC representation obtain, each MEC of different operators can deliver 
its embedding to the base station. When the base station receives a content request 
from the user, the base station calculates the similarity between the user request and 
the MEC embedding, and then selects the MEC node with the highest similarity 
request content. When MEC receives the request, it finds whether the content is in 
its own storage. If it does not exist, it feeds back to the base station and sets a coun-
ter. When the failure ratio reaches a certain threshold or content in the MEC replace-
ment reaches a certain percentage, it recalculates the MEC’s embedding.
6  Blockchain design
The purpose of our design is to build a user-friendly MEC system. Suppose a cus-
tomer belonged to operator A uses operator B’s infrastructure services, which will 
be common in real life because of the nearby service principle. In that case, operator 
A &B should coordinate the cost allocation problem by themselves and let the user 
only pay his operator’s cost as usual.
This scenario leaves out the issue of a complete and trusted record of each user’s 
use of the cross-operator service. Suppose the operators are selfish; it is not feasible 
to let them keep their own records, as they may fabricate false usage records to gain 
16278 K. Lei et al.
1 3
profit. An independent third party is introduced to monitor and record all the use 
of cross-operator service in the region is a kind of solution, but like all other third-
party centralized systems, the operators have to share part of their interests to others, 
and the third party may be attacked or has a single point failure. This is not the opti-
mal solution in this scene.
Blockchain provides a solution for building distributed trusted records between 
untrusted peers. Blockchain is a distributed database that maintains a growing list 
of records (for example, account transfer records, the cross-carrier service giant in 
our scenario) stored in blocks and linked together by the previous block, which are 
immutable. For this reason, blockchain technology can build trusted records between 
untrusted peers, as all records in this chain are verified by nodes in the blockchain 
network that are not associated with the records and are permanently open for later 
queries. In the case of malicious activity, the validation node can track the recorded 
properties and resolve the problem.
6.1  Blockchain construction
As illustrated in Fig. 3, multiple MEC servers are belonging to multiple operators 
in a region, and in our design, each operator in each region has a MEC server who 
is rich in storage and computing resources as the node to deploy the blockchain—or 
miner as it is called in Bitcoin. This deployment is because we do not want to pres-
sure the MEC servers for storage and calculation. After all, it is frequent for the 
miner node to perform transaction verification and save and synchronize ledger data. 
In the dense MEC servers in 5G environment, it seems unnecessary for each base 
station to store massive ledger data.
Fig. 3  blockchain scenario
16279
1 3
GBRM: a graph embedding and blockchain‑based resource…
So when the MEC server provides services across operator domains, it prepares a 
transaction to notify the miner’s node of its operator in this region. A transaction is 
stipulated to include the following contents: time, area, service content, how many 
operators X should pay to operator Y, and the verification part. The miners will then 
consolidate transactions into a block and add new blocks to the blockchain under 
consensus rules.
6.2  Consensus and verification
Considering scenario and consensus efficiency issues, we decided to use the con-
sortium blockchain, which is not a complete distrust between nodes. In fact, nodes 
belonging to the same operator have no reason to cheat on each other. Therefore, 
the consensus similar to Bitcoin POS that each block needs about 10 minutes of 
confirmation time for security seems unnecessary. Considering the number of cross-
operator services, a consensus for shorter confirmation times under the consortium 
blockchain would be more appropriate.
Thus, we improved the DPOS consensus to accommodate business requirements; 
specifically, we added the part that verifies the transaction’s validity. A DPOS con-
sensus can be simply explained as follows: All nodes elect a group of block pro-
ducers, then block producers produce blocks in a randomly given order, and the 
produced blocks can be finally determined (that is, irreversibly join the blockchain) 
after being signed and authenticated by more than two-thirds of the block producers.
In our system, this consensus process can be described as three phases: 
(1) All nodes vote for 21 block producers proposed in [21], and the top 21 in the 
vote will automatically become the block producer of this round. Each node’s 
voting right is related to each node’s honesty. (The initial honesty of each node 
is the same.) If a node publishes a transaction without providing a service to the 
user, its honesty will be deducted if the verification fails.
(2) Each block producer generates blocks in a random order, and the block genera-
tion time is 2s. A block that is not generated in the producer’s own build block 
time is invalid.
(3) When the block producer receives a new block, it needs to do two verifications. 
First, whether the corresponding producer has produced the block in a legal time; 
and second, whether the transaction contained in the block is real and valid, only 
both validations succeed, it signs the block. When an ordinary node receives a 
new block, it checks the signatures on the block, and only blocks with more than 
two-thirds of the producers’ signatures (i.e., 15 +) are added to the ledger of the 
node.
Next, we will explain how the block producer verifies that the transaction is real and 
effective. When MEC servers provide a service to the user (such as providing their 
own cached resource), MEC servers will send a challenge to the user and receive 
a user response. Then, when a transaction is initiated, the MEC server will attach 
its own challenge and the answer and a signed response from the user. The block 
16280 K. Lei et al.
1 3
producer determines whether the user initiated the response and whether it met the 
answer. To be clear, if the response meets the answer, the user must have received 
the service provided by the MEC server. Such a challenge/response mechanism 
draws on the idea of POS.
A challenge-response mechanism can be described in detail below. MEC servers 
will regard file � as an n-dimensional vector and each element of it will be tagged. 
When serving the users, it will send a file not only � but also all tags � . Meanwhile, 
it is required to send a challenge, which is a random vector � and then receive a 
response that should be a tag � computed using �,� and � along with user’s public 
key. The verification node will see the result tag calculated by the MEC server itself 
and the � , which is encrypted by the user’s private key and received by the MEC 
server. All they need to do is to decrypt � with the public key and compare it with 
the tag to see if equal.
7  Simulation results and analysis
In this section, we present the simulation results and mainly evaluate the following: 
(1) the utilities of CP and FNs at Stackelberg equilibrium compared with at other 
action points; (2) the matching success rate use our graph embedding-based MEC 
framework compared with other strategies.
7.1  Experimental setup for cache scheme
We consider a 5G edge computing scenario with 7 CPs, 7FNs, 100 users. The FNs 
are distributed in a cellular fashion with distance between two FNs as 150m. Users 
are randomly distributed and may be served by multiple FNs if it locates in the over-
lapping area of two FNs. Content is divided into 20 classes according to popular-
ity. FNs provide caching services for CPs. The caching price and caching amount 
decision between CPs and FNs are made based on Stackelberg game-based cach-
ing scheme. Users made 2000 requests for content following Zipf distribution with 
parameter � . The users’ requests and content source matching problem are solved by 
graph-based recommendation scheme.
7.2  Utilities of CPs and FNs at Stackelberg equilibrium
In Fig. 4, we demonstrate the joint optimization of utilities of CPs and FNs at Stack-
elberg equilibrium. Setting the content distribution parameter � as 1.6. We obtained 
the Stackelberg equilibrium using the method elaborated in Sect. 4 which are shown 
in Fig. 4 as filled red dot. Deviation from the Stackelberg equilibrium results in the 
decline of the utilities of CPs and FNs. Therefore, the simulation results proved the 
correctness of the Stackelberg equilibrium derived from mathematical analysis.
16281
1 3
GBRM: a graph embedding and blockchain‑based resource…
(b)
(a)
Fig. 4  the utilities of CP and FN at Stackelberg equilibrium
16282 K. Lei et al.
1 3
7.3  Experiment for graph embedding matching
We first simulated a virtual network scenario in MATLAB. There are five operators 
in this network environment, and then, each operator sets up 1000 users, and each 
operator deploys the same number of base stations and MEC servers. The simulated 
user requests the content in the MEC during use. The request sequence follows the 
Zipf distribution according to the content’s popularity, and the Zipf parameters are 
the same as the above cache scheme experiment. We verify our proposed method’s 
overall system delay performance and common methods under different MEC cache 
capacities and different MEC deployment quantities through experiments. We com-
pare our graph-based method against the following traditional method: 
(1) RandomSelect: The base station processes the request by randomly choose the 
MEC server.
(2) LocalIndex: The base station processes the request by search the index. However, 
these indexes only include their own MEC server. When the requested content 
cannot be found, the base station request content from the cloud server.
(3) GlobalIndex: Same as the LocalIndex method, which base station requests con-
tent use the index, but instead of partially content index, there exists a MEC’s 
global index. It is an ideal situation but may cause privacy leakage.
7.4  Impact of the MEC content capacity
In this experiment, we set the number in MEC to 100 to explore the influence of 
different MEC server storage capacity on our graph embedding model. Each base 
station user-generated 500 content requests in the experiment, and these requests are 
randomly allocated to different base stations. The experiment measured GBRM’s 
performance and other methods in the overall network request delay performance of 
MEC with different cache storage capacities.
As we can see from Fig. 5a, GBRM is significantly better than the RandomSelect 
and the LocalIndex method in global latency and close to the ideal situation of the 
global index. After the MEC cache capacity expanded to 5000, the global latency 
showed some decline, and at 10,000, there was some increase, which may mean that 
our GBRM method can obtain better results in the capacity of 4000–5000. In gen-
eral, GBRM can reach a good compromise between global indexing and random 
selection with MEC content privacy protection.
7.5  Impact of the MEC quantity
In this experiment, we set the cache capacity in the MEC to 4000 to explore the 
impact of different MEC deployments in the network on the overall network request 
delay performance. The remaining experimental settings are consistent with the 
above MEC content capacity experiment. From the experimental results Fig. 5b, we 
can find that the performance of GBRM is very close to the global indexing method 
16283
1 3
GBRM: a graph embedding and blockchain‑based resource…
Fig. 5  The impact of MEC capacity and quantity on system delay performance
16284 K. Lei et al.
1 3
and far superior to the local indexing and random selection methods in global 
latency. Therefore, through MEC capacity and quantity experiments, we can prove 
that the method based on graph embedding matching can more effectively help users 
match the required resources across different operators and simultaneously protect 
the content privacy of different operators.
8  Conclusion
In this paper, a multi-stakeholders 5G MEC system for content caching and distri-
bution with graph embedding recommend system and blockchain assisted. We first 
studied the interaction of CPs and MEC server and modeled as a Stackelberg game. 
We then propose a graph embedding-based content recommended system to solve 
the user requests and content sources matching problems. Finally, to solve the multi-
ple different MEC stakeholders, a blockchain-based settlement scheme is proposed. 
Our framework systematically solves the 5G mobile environment MEC caching 
problem in an elegant way. In the future, We hope to test our algorithm in actual 5g 
edge computing scenarios and find issues in actual deployment.
Acknowledgements This work is supported by the National Science Foundation of China (NSFC 
62072012), Key-Area Research and Development Program of Guangdong Province (2020B0101090003), 
Shenzhen Project (JSGG20191129110603831), and Shenzhen Key Laboratory Project 
(ZDSYS201802051831427).
References
 1. Abbas N, Zhang Y, Taherkordi A, Skeie T (2018) Mobile edge computing: a survey. IEEE Internet 
Things J 5(1):450–465
 2. Li J, Chen H, Chen Y, Lin Z, Vucetic B, Hanzo L (2016) Pricing and resource allocation via game 
theory for a small-cell video caching system. IEEE J Sel Areas Commun 34(8):2115–2129
 3. Lei K, Xie Y, Shi J, Zhang H, Zhang G, Bai B (2018) Optcaching: a Stackelberg game and belief 
propagation based caching scheme for joint utility optimization in fog computing. In: 2018 IEEE 
24th International Conference on Parallel and Distributed Systems (ICPADS), pp 747–754
 4. Zheng Z, Song L, Han Z, Li GY, Poor HV (2018) A Stackelberg game approach to proactive cach-
ing in large-scale mobile edge networks. IEEE Trans Wirel Commun 17(8):5198–5211
 5. Xiong Z, Feng S, Niyato D, Wang P, Leshem A, Zhang Y (2018) Game theoretic analysis for joint 
sponsored and edge caching content service market. In: 2018 IEEE Global Communications Confer-
ence (GLOBECOM), pp 1–7
 6. Sarwar B, Karypis G, Konstan J, Riedl J (2001) Item-based collaborative filtering recommendation 
algorithms. In: Proceedings of the 10th International Conference on World Wide Web, pp 285–295
 7. Perozzi B, Al-Rfou R, Skiena S (2014) Deepwalk: online learning of social representations. In: Pro-
ceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data 
Mining, pp 701–710
 8. Mikolov T, Chen K, Corrado G, Dean J (2013) Efficient estimation of word representations in vector 
space. arXiv preprint arXiv: 1301. 3781
 9. Tang J, Qu M, Wang M, Zhang M, Yan J, Mei Q (2015) Line: Large-scale information net-
work embedding. In: Proceedings of the 24th International Conference on World Wide Web, pp 
1067–1077
 10. Dong Y, Chawla NV, Swami A (2017) Metapath2vec: scalable representation learning for hetero-
geneous networks. In: Proceedings of the 23rd ACM SIGKDD International Conference on Knowl-
edge Discovery and Data Mining, pp 135–144
http://arxiv.org/abs/1301.3781
16285
1 3
GBRM: a graph embedding and blockchain‑based resource…
 11. He Y, Song Y, Li J, Ji C, Peng J, Peng H (2019) Hetespaceywalk: a heterogeneous spacey random 
walk for heterogeneous information network embedding. In: Proceedings of the 28th ACM Interna-
tional Conference on Information and Knowledge Management, pp 639–648
 12. Gao M, Chen L, He X, Zhou A (2018) Bine: bipartite network embedding. In: The 41st Interna-
tional ACM SIGIR Conference on Research & Development in Information Retrieval, pp 715–724
 13. Huang W, Li Y, Fang Y, Fan J, Yang H (2020) Biane: bipartite attributed network embedding. In: 
Proceedings of the 43rd International ACM SIGIR Conference on Research and Development in 
Information Retrieval, Ser. SIGIR ’20. Association for Computing Machinery, New York, pp 149–
158 [Online]. https:// doi. org/ 10. 1145/ 33972 71. 34010 68
 14. Nakamoto S (2018) Bitcoin: a peer-to-peer electronic cash system [online]. https:// bitco in. org/ bitco 
in. pdf
 15. King S, Nadal S (2012) PPCoin: peer-to-peer crypto-currency with proof-of-stake
 16. Vasin P (2014) Blackcoin’s proof-of-stake protocol v2 [online]. https:// www. black coin. co/ black 
coin- pospr otoco lv2- white paper. pdf
 17. Kamara S (2013) Proofs of storage: theory, constructions and applications. In: Muntean T, Poulakis 
D, Rolland R (eds) Algebraic Informatics. Springer, Berlin, Heidelberg, pp 7–8
 18. Ateniese G, Kamara S, Katz J (2009) Proofs of storage from homomorphic identification protocols. 
In: Matsui M (ed) Advances in Cryptology—ASIACRYPT 2009. Springer, Berlin, Heidelberg, pp 
319–333
 19. Rivest R, Dusse S (1992) The MD5 message-digest algorithm, internet request for comments. Inter-
net Request for Comments (RFC) 1321
 20. Newman ME (2005) Power laws, pareto distributions and zipf’s law. Contemp Phys 46(5):323–351
 21. Elrom E (2019) EOS.IO wallets and smart contracts. Apress, Berkeley, pp 213–256 [Online]. 
https:// doi. org/ 10. 1007/ 978-1- 4842- 4847-8_6
Publisher’s Note Springer Nature remains neutral with regard to jurisdictional claims in published 
maps and institutional affiliations.
Authors and Affiliations
Kai Lei1  · Hao Ye1 · Junjie Fang1 · Peiwu Chen2 · Liangjie Zhang3 · Jing Xiao2
 Hao Ye 
 yehao@pku.edu.cn
 Junjie Fang 
 1801213354@pku.edu.cn
 Peiwu Chen 
 chenpeiwu194@pingan.com.cn
 Liangjie Zhang 
 zhanglj@kingdee.com
 Jing Xiao 
 xiaojing661@pingan.com.cn
1 ICNLAB, School of Electronic and Computer Engineering (SECE), Peking University, 
Shenzhen, China
2 Ping An Technology (Shenzhen) Co., Ltd., Shenzhen, China
3 Kingdee Software Company Limited, Shenzhen, China
https://doi.org/10.1145/3397271.3401068
https://bitcoin.org/bitcoin.pdf
https://bitcoin.org/bitcoin.pdf
https://www.blackcoin.co/blackcoin-posprotocolv2-whitepaper.pdf
https://www.blackcoin.co/blackcoin-posprotocolv2-whitepaper.pdf
https://doi.org/10.1007/978-1-4842-4847-8_6
https://orcid.org/0000-0001-9197-895X
	GBRM: a graph embedding and blockchain-based resource management framework for 5G MEC
	Abstract
	1 Introduction
	2 Background and related work
	2.1 Stackelberg game-based edge caching
	2.2 Graph embedding-based recommendation
	2.3 Blockchain and consensus
	3 System model
	4 Caching scheme
	4.1 Utility definition
	4.2 Stackelberg game-based caching scheme
	5 Graph embedding-based MEC framework
	5.1 Content embedding
	5.2 MEC embedding concat
	5.3 Bi-part network recommend and update
	6 Blockchain design
	6.1 Blockchain construction
	6.2 Consensus and verification
	7 Simulation results and analysis
	7.1 Experimental setup for cache scheme
	7.2 Utilities of CPs and FNs at Stackelberg equilibrium
	7.3 Experiment for graph embedding matching
	7.4 Impact of the MEC content capacity
	7.5 Impact of the MEC quantity
	8 Conclusion
	Acknowledgements 
	References