Blockchain-Envisioned Trusted Random Oracles for IoT-Enabled Probabilistic Smart Contracts
IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021 14797
Blockchain-Envisioned Trusted Random Oracles for
IoT-Enabled Probabilistic Smart Contracts
Nikunjkumar Sureshbhai Patel, Pronaya Bhattacharya , Shivani Bharatbhai Patel ,
Sudeep Tanwar , Senior Member, IEEE, Neeraj Kumar , Senior Member, IEEE,
and Houbing Song , Senior Member, IEEE
Abstract—In modern decentralized Internet-of-Things (IoT)-
based sensor communications, pseudonoise-diffusion oracles are
heavily investigated as random oracles for data exchange among
peer nodes. As these oracles are generated through algorithmic
processes, they pass the standard random tests for finite and
bounded intervals only. This ensures a false sense of privacy
and confidentiality in exchange through open protocol IoT-stacks
in public channels, i.e., Internet. Recently, blockchain (BC)-
envisioned random sequences as input oracles are proposed about
financial applications, and windfall games like roulette, poker,
and lottery. These random inputs exhibit fairness, and nondeter-
minism in SC executions termed as probabilistic smart contracts
(PSCs). However, the IoT-enabled PSC process might be con-
trolled and forged through humans, machines, and bot-nodes
through physical and computational methods. Moreover, dis-
honest entities like contract owners, players, and miners can
co-ordinate together to form collusion attacks during consensus
to propagate false updates, which ensures forged block additions
by miners in BC. Motivated by these facts, in this article, we pro-
pose a BC-envisioned IoT-enabled PSC scheme, SaNkhyA, which
is executed in three phases. In the first phase, the scheme elim-
inates colluding dishonest miners through the proposed miner
selection algorithm. Then, in the second phase, the elected min-
ers agree through the proposed consensus protocol to generate
a stream of random bits. In the third phase, the generated ran-
dom bit-stream is split through random splitters and fed as input
oracles to the proposed PSC among participating entities. In sim-
ulation, the scheme ensures a trust probability of 0.38 even at
85% collusion among miners and has an average block process-
ing delay of 1.3 s compared to serial approaches, where the block
processing delay is 5.6 s, thereby exhibiting improved scalabil-
ity. The overall computation and communication cost is 28.48
Manuscript received November 1, 2020; revised March 23, 2021; accepted
April 2, 2021. Date of publication April 9, 2021; date of current ver-
sion September 23, 2021. (Corresponding authors: Houbing Song; Sudeep
Tanwar.)
Nikunjkumar Sureshbhai Patel, Pronaya Bhattacharya, Shivani Bharatbhai
Patel, and Sudeep Tanwar are with the Department of Computer Science
and Engineering, Institute of Technology, Nirma University, Ahmedabad
382481, India (e-mail: 17bce083@nirmauni.ac.in; pronoya.bhattacharya@
nirmauni.ac.in; 17bce117@nirmauni.ac.in; sudeep.tanwar@nirmauni.ac.in).
Neeraj Kumar is with the Department of Computer Science and
Engineering, Thapar Institute of Engineering and Technology, Deemed to
be University, Patiala 147004, India, also with the Department of Computer
Science, King Abdulaziz University, Jeddah 21589, Saudi Arabia, also with
the Department of Computer Science and Information Engineering, Asia
University, Taichung City 402701, Taiwan, and also with School of Computer
Science, University of Petroleum and Energy Studies, Dehradun 248007, India
(e-mail: neeraj.kumar@thapar.edu).
Houbing Song is with the Security and Optimization for Networked Globe
Laboratory, Department of Electrical Engineering and Computer Science,
Embry-Riddle Aeronautical University, Daytona Beach, FL 32114 USA
(e-mail: h.song@ieee.org).
Digital Object Identifier 10.1109/JIOT.2021.3072293
ms, and 101 bytes, respectively, that indicates the efficacy of the
proposed scheme compared to the traditional schemes.
Index Terms—Blockchain (BC), consensus, Internet-of-Things
(IoT), probabilistic smart contracts (PSCs), random numbers.
I. INTRODUCTION
DECENTRALIZED Internet-of-Things (IoT)-based sensor
communication among peer nodes involves the genera-
tion of random inputs through the pseudocomputational pro-
cess, exchanged via public wireless channels. These processes
are intuitively random noise-based algorithms and follow a
predictable pattern of discovery. This induces a false sense of
privacy of exchanged sensor data among peer nodes, which
can be compromised through intelligent attack vectors [1].
Moreover, the exchanged sensor data needs to be modu-
lated with high-performance networks, so latency and error
rates can be decreased [2]. Thus, to address the mentioned
limitations, blockchain (BC) can be a potential solution to
IoT-enabled random oracles due to its inherent nature of ensur-
ing trust, transparency, immutability, and chronology in mined
transactions.
Initially started as cryptocurrency derivatives, BC can lever-
age the generation of secure random oracles that ensures trust
among IoT-based stakeholders. Also, to allow fair, secure, and
trusted resource trading among decentralized IoT-ecosystems,
BC-envisioned random oracles ensure fair and transparent
prices among different players—buyers and sellers in IoT
ecosystems. Random sequences are also applicable in online
windfall games like lottery, casinos, and pokers, which gained
prominence due to government regulations. Windfall games
select a game winner from a set of game players (GPs), which
is decided by game owners (GOs) in the ecosystem. Once
a winner is selected, SC automates anonymous transactional
payments among winners and GO based on an agreed set of
fed oracles and deterministic conditions as specified in the SC
by GP and GO. Thus, in such multiparty lottery games, and
IoT-based resource trading scenarios, fairness in the execution
of SC, and selection of winners from GP is a critical issue. GO
can form biased oracles as fed inputs to SC, and can collude
with miners entities to propagate false block additions.
Thus, GO can control game inputs and game environments
to ensure SC execute in their favor, that selects a biased win-
ner from the set of GP. Also, deterministic SC are exposed
2327-4662 c© 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-1206-2298
https://orcid.org/0000-0002-4861-6395
https://orcid.org/0000-0002-1776-4651
https://orcid.org/0000-0002-3020-3947
https://orcid.org/0000-0003-2631-9223
14798 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021
TABLE I
CHARACTERIZATION OF RANDOM NUMBER GENERATION
to security flaws like call stack depth limitations [3], under-
flow/overflow issues [4], and greedy contracts [5]. Due to this,
even in secured BC ecosystems, GP feels cheated due to finan-
cial losses, nontransparency in-game evaluation, and winner
selection. Thus, secure randomness in the generation of inputs
to deterministic SC is required, termed as probabilistic smart
contract (PSC). PSC ensures oracles achieve nondetermin-
ism, unpredictability, fairness, and verifiability, with a defined
probability, on different runs of the same SC.
In PSC, the pseudorandom sequences are created by users
through different seed generation methods, such as usage of a
hash of current mined block [15], random sequences digitized
through physical processes, usage of library functions [16],
providing an incentive to users in BC to generate random
bits [17]. A security characterization of the random number
generation sources is presented in Table I. However, PSC fails
to produce fairness and transparency in the selection of ora-
cles as they are nonresistant to collusion attacks by dishonest
parties in BC. Collusion attacks can proceed through different
ways, such as selection of a fraudulent leader through consen-
sus, confiscating random seed, and fraudulent miner selection
through bribe of incentives like computational power, stor-
age, and cryptocurrencies. Thus, necessary countermeasures
are required in BC to prevent collusion attacks by dishon-
est entities. This ensures a fair selection scheme for random
oracle to PSC that guarantees trust and in-game correctness
outputs. To mitigate the effects of game manipulation by GO,
the source of randomness needs to be secured, and consen-
sus mechanism needs to correctly decide game operations and
incentives for miners [18]. SC execution conditions must favor
random function calls so that dishonest miners are not favored
by more block additions. Also, PSC in IoT allows resilient and
secure communication stack, with effective coding schemes fit-
ted to sensor microprocessor units [19]. It allows effective true
random number seeds, with low-powered hardware encryption
costs, and are resilient to hardware-injection, clock-based, and
time-delay attacks.
II. STATE OF THE ART
In literature, the author’s proposed solutions to random-
ize SC and to ensure transparency, immutability, privacy,
and trust among participating stakeholders in BC. For exam-
ple, Chatterjee et al. [6] proposed a game-theoretic approach
to generate immutable pseudorandom sequences in BC. The
application environment allows PSC executions through ran-
dom environment variables that do not rely on consensus on
selected miners. Du et al. [7] proposed node participation for
random number generation to improve trust and performed
experiments that validated security and privacy computations.
However, inducing trust as a parameter in SC execution was
not addressed. Nguyen Van et al. [8] proposed generation of
verifiable random numbers based on homomorphic encryption
that generates unpredictable, and immutable random num-
bers with public access. Mulders [20] proposed a scheme to
generate randomization environment on Ethereum based on
parameters like eth.blockstamp, and eth.timestamp. However,
if the generated random number is not favorable in malicious
miner, the number is not submitted for consensus.
Choi et al. [9] proposed a system to generate random seed
using out-of-band communication and hardware variation for
the use of IoT. Li et al. [10] proposed a random lottery-
based smart contract scheme that ensures winning sequences
for GPs to be generated fairly. Wang et al. [11] reviewed
the bitcoin transaction having vulnerability because of weak
randomness.To overcome the same, Datta [12] proposed a
secure pseudorandom generation scheme on point-based GF(p)
encryption for collusion attacks. However, the time complex-
ity of determining a set of GF(p) over arbitrary polynomial
curves is exponential, rendering the approach nonscalable.
Ehara and Tada [13] proposed a transparent random number
generation scheme on public BC. To frame out the consen-
sus among stakeholders, the authors used the proof-of-work
consensus scheme, which is resource-intensive for constrained
environments. This issue was addressed by Feng et al. [14] in
which they proposed a new consensus protocol proof of negoti-
ation to randomize the selection of miners, which eliminates the
collusion among dishonest miners and achieves high through-
put in block creation. A summary of the state-of-the-art works
based on the proposed techniques and simulation environments
to generate random sequences is shown in Table II.
A. Motivation
As discussed in Section II, ensure fairness and transparency
in-game operations among GP and GO, secure randomiza-
tion in input oracles to SC [6], [7] is necessary. Moreover,
collusion among dishonest miners forces nontransparency in
SC evaluation, which ensures forged block additions in favor
of dishonest entity. Incorrect oral updates are propagated in
BC, which results in compromised consensus among partic-
ipating entities. Thus, the authors in [12] and [13] proposed
a stable election scheme that eliminates colluding miners and
allows honest block additions. To design a random scheme to
secure oracles, and eliminate dishonest entities, the proposed
scheme, SaNkhyA, exploits a model that ensures triple benefits-
elimination of dishonest miners, validation of honest miner
selection through a stable consensus protocol termed as Proof-
of-Validity (PoV), and selection of random bit-sequences as
outputs of PoV to fed to SC. Thus, the scheme achieves non-
determinism in fed oracles to PSC and eliminates the risk of
bribery attacks by colluding miners in parallel. This allows an
end-to-end solution of transparent operations through correct
block updates in the proposed ecosystem.
B. Research Contributions
Following are the research contribution of this article.
1) A BC-envisioned scheme is proposed to ensure the
immutability and transparency of events among entities
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
PATEL et al.: BLOCKCHAIN-ENVISIONED TRUSTED RANDOM ORACLES FOR IoT-ENABLED PSCs 14799
Fig. 1. SaNkhyA: the system model.
TABLE II
RELATIVE COMPARISON OF STATE-OF-THE-ART EXISTING LITERATURE
GP and GO, and facilitates effective random oracle gen-
eration among resource players in IoT-enabled trading
ecosystems.
2) A random miner selection algorithm is proposed to elim-
inate dishonest miners and PoV consensus protocol to
agree on selected random number R as a sequence of
bits.
3) Based on stream of bits R, a random splitter mechanism
is used to split the bit-stream as subsequences to PSC,
which is to be executed among GP and GO to ensure
fairness and transparency in-game events.
C. Layout
This article is presented as follows. Section III presents
the system model and the problem formulation. Section IV
discusses the proposed scheme for the generation of ran-
dom number R and proposed PSC. Section V discusses the
performance evaluation and finally, Section VI concludes this
article.
III. SaNkhyA: SYSTEM MODEL AND PROBLEM
FORMULATION
This section describes the system model and the problem
formulation.
A. System Model
A BC-based scheme, SaNkhyA, is proposed to ensure fair
oracles to PSC and to leverage the trust among GP and
GO as shown in Fig. 1. The generation of random oracles
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
14800 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021
are proposed to allow fair, trusted and secure trading among
resource traders in IoT ecosystems. Also, in windfall games,
random numbers are an important choice for in-transparency
in game events. In this scheme, EGP and EGO represents the
GP and GO, respectively. Moreover, EGP is denoted by the set
{W1, W2, . . . , Wp} and EGO by {O1, O2, . . . , Og}. The game-
set is denoted as a set G = {G1, G2, . . . , Gg} owned by GO.In
any gth game, EGP generates a registration request R to EGO,
that on request acceptance, forms a mapping M : Wp ← Gg,
that denotes Wp information to be stored with game-set G.
G contains metadata of R to be stored in BC B denoted as
Mp = {Wg
p , Tg
p }, i.e., wallet and timestamp information. After
the successful registration, Wp makes a request for generation
of a random number R for the game Gg based on Mp as an
input from B. To ensure fairness in generation of R, we con-
sider entity EM as miners, which consists of new miners Mn
and existing miners Me in the scheme. EM participates in gen-
eration of R as fed random oracles. To address the same, Mn
are added to a miner pool M and once this pool is full then
both Me and Mn can participate in the proposed miner elimi-
nation algorithm to allow only honest miners in the scheme.
This algorithm takes trust factor TR for each miner as inputs
based on their past participation and activities in B. If TR is
less than the minimum trust threshold TRmin for any EM , then
the corresponding miner is eliminated in process of generation
of random R.
Based on miner elimination process as explained above,
a reduced set Ared is formed. From this set, we can create
two entities termed as- group creators Ac and value generators
Ag. Ac forms a request pool of Wp as Mg
p . Mg
p requests R to
be generated for any gth game from game-set G. Ac assigns
metadata Mp collected from Mg
p to Ag in a first-come-first
serve (FCFS) manner. Ag assign a value V to each request.
Collectively all Ag execute a consensus procedure base on the
value V generated for requests and agree on a random number
R, which is outputted as a continuous stream of bit-sequence
{bo, b1, b2, . . . , bn} denoted as final string FS. Then, this final
string is passed through a random splitter, which divides
{b0, b1, b2, . . . , bn} into equal-sized substring of bits repre-
sented as {R1, R2, . . . , Rn} where each Ri is a subsequence
{bk, bk+1, . . . , bl}, with conditions 0 ≤ k ≤ (n− 1), 1 ≤ l ≤ n
and k < l, respectively. The generated FS serves as an
input oracles to PSC set {PSC1, PSC2, . . . , PSCk}. Thus, ran-
dom splitter allows k subsequences for ∀PSCk. As inputs
are random, PSCk execution varies for different runs on
same Rn, exhibiting nondeterminism. Also, as R is gener-
ated through consensus, the input Rn achieves trust among
EGP and EGO. Post execution of PSC, the wallet balances of
EGP and EGO are updated to indicate that winning amount is
transferred to the respective winner Wg as per their bet for
game Gg.
B. Problem Formulation
In SaNkhyA as explained in Section III-A, to formulate
the problem, we consider p players are mapped to g games
through mapping M. The metadata Mp consists of wallet Wg
p
information with the following attributes:
Wg
p =
{
PKg
p, IDg
p, TXg
p, mroot
}
(1)
where PKg
p is public key of the pth GP in gth game, IDg
p is
the identifier information of pth GP for authentication, TXg
p
denotes the set of transactional entries among different play-
ers pi and pj involved in Gg, with 1 ≤ i, j ≤ p and i �= q, and
mroot is the merkle root information with trivial minimum
constraints defined as: g ≥ 1 and p ≥ 2. For registration,
Wp registers to Gg through generated metadata Mp and times-
tamp Mg
p recorded in request pool based on FCFS policy. In
a particular game Gg, we consider two players Pa and Pb,
with condition a �= b, as opponents in Gg. Their combined
metadata in Gg is represented as Mg
ab and is represented as
follows:
Mg
ab =
{
Tg
a , Tg
b , Wg
a , Wg
b , IDg
ab
}
(2)
where Tg
a and Tg
b denotes the transactional entries of Pa and
Pb, respectively, in Gg, Wg
a , and Wg
b denotes the respective
wallets of the opponents for Gg, and IDg
ab represents the com-
bined ID of Pa and Pb in Gg. Based on Mg
ab, a common request
Rab for generation of R is entered in common request pool Mg
p
as follows:
Rab ←
{
Mg
ab, Nab, Tab, B(R)
}
(3)
where Nab is the required security level of the gener-
ated random number R, Tab is the common timestamp of
request generation, and B(R) is the sequence of random bits
{bi, bi+1, . . . , bj} from R to game Gg. A collection of such
requests is stored in Mg
p for different associated p players
mapped to different game-sets G.
To generate secure random number R, we consider entity
Em, which consists of existing (old) miners in B denoted as
Me = {M1, M2, . . . , Me} and new nodes proposed as miners
Mn = {Me+1, Me+2, . . . , Mn} with constraints as follows:
C1 = e ≥ 1
C2 = n− (e+ 1) ≥ 0. (4)
Then, we define A as aggregate set of all miner Em in the
system as follows:
A = Me +Mn
A = {M1, M2, . . . , Me, Me+1, Me+2, . . . , Me+n}. (5)
As the arrival of new miners is nondeterministic and con-
tinuous so we define a miner pool M of size s. To prevent
collusion attacks by dishonest miners, conditional probabil-
ity Ci = P(Tbi |Ybi) is computed for any ith miner entity Em.
Here, Tbi denotes the true block proposals proposed by the ith
miner validated in B and added as new blocks and Ybi denotes
the total block proposals by ith miner. If Ci > 0.51, a boolean
trust value Ti is mapped to 1 for ith miner and Ti is mapped to
0, otherwise. Based on Ci, a trust value {T1, T2, . . . , Te+n} is
assigned to each miner in A. Once M is full, then the aggre-
gate set A is passed through a miner elimination process in
which Ti is compared against a minimum threshold Tmin. Tmin
is computed by measuring deviation ω of block additions of ith
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
PATEL et al.: BLOCKCHAIN-ENVISIONED TRUSTED RANDOM ORACLES FOR IoT-ENABLED PSCs 14801
miner from valid proposals by all other miners. From the total
aggregate set A, we form a reduced miner set Ared by elimi-
nating colluding miners Ael. The detailed process is explained
in Section IV-C. Ared is denoted as follows:
|Ared| = |A| − |Ael|. (6)
We compute a reduced set TRk that denotes the trust value
of k miners in Ared denoted as {T1, T2, . . . , Tk}. Based on trust
scores, Ared is divided into entities {Ac, Ag}, which include the
group creators and value generators, respectively. As explained
in Section III-A, metadata information Mp
g is collected by
Ac for entity EGP and the resultant is mapped with TRk.
Now, any kth miner fetches TRk with trust values from set
{T1, T2, . . . , Tk} and matches the value against the measured
trust deviation ω to validate block proposals. These rules are
described as follows.
1) Rule 1: If Tk ≥ ω and k ∈ (e+ n) then Ag ← Ak.
2) Rule 2: Else-if Tk ≥ 0 then Ag ← Ak.
The mean deviation ω is computed as follows:
ω =
e+n∑
i=1
Ti − μ
(
TRk
)
(7)
where TRk is set of trust value of all miners in Ared. Consider
q miners in Ac as {c1, c2, . . . , cq} and s miners in Ag as
Ag = {g1, g2, . . . , gs}. The entities Ac and Ag are subject to
the constraints as follows:
C3 : |q| + |s| ≤ |e| + |n|. (8)
The metadata collected from request pool are clustered into
w groups by q miners in Ac denoted as GRq and defined as
follows:
GRq = {f1, f2, . . . , fw}. (9)
The numbers of total groups created are w. Every group w
is assigned a generator Aw
g , to generate an independent value
denoted by vw. Timestamp of all vw are recorded as tw. Based
on vw and tw, two vectors V and T are initialized as inputs to
the random string generation algorithm, which is represented
as follows:
V = {v1, v2, . . . , vw}
T = {t1, t2, . . . , tw}. (10)
{V, T} generates a string of random sequence
{b0, b1, . . . , bn} as FS. FS is divided into subsequences
bk, bk+1, . . . , bl as oracles for generation of PSC denoted as
{PSC1, PSC2, . . . , PSCk} used to satisfy EGP request from
pool. Any kth PSC is executed among EGP and EGO based
on input oracle Rn. The list of symbols and their associated
meanings are defined in Table III.
IV. SaNkhyA: THE PROPOSED SCHEME
As discussed in Section III, we present the interaction
sequences among different entities in the game G played
between EGP and EGO as shown in Fig. 2. We consider
that mapping for any pth player, presented as public wal-
let address to gth game. The wallet keys are independent of
TABLE III
SYMBOLS AND ASSOCIATED MEANINGS
underlying BC, and thus can be referenced without access to
chain structure and network connectivity, simplifying the over-
all complexity. Once the game G receives Mp, it generates a
request to BC for generation of R, that invokes the entities Me
and Mn. They generate the numbers based on PoV, and operate
on reduced miner set Ared, by eliminating the colluding min-
ers Ael. The request Qr is generated as an asynchronous signal
request, and miner entities compute the conditional probability
P(Tbi |Ybi), to ensure trust in the ecosystem. Once the random
bit sequences are generated, they are communicated back to
BC. The step is conformed as request satisfaction, which is
a single-bit flag process. The game G decides the winner W
based on execution of PSC, which are splitted into k PSC,
based on randoms-splitter process. The game fairly selects the
winner and presents an acknowledgement (ACK), or negative
ACK (NAK) to EGP. As the entire process is based on gener-
ation of random oracles for PSC, the inherent complexity of
the scheme is proportional to the computational time required
for generation of FS.
For entity EGP, we consider two players Pa an Pb in game
G. The players collectively places request for generation of
secure random oracle R to request pool Qr. Miner A proposes
a novel Miner_Selection_Algorithm is proposed to create Ac
and Ag. Then, based on received requests from Ac, a novel
consensus procedure PoV is proposed so that Ared achieves a
common truth to generate R, and eliminate collusion attacks.
Based on PoV, a random number generation algorithm is
proposed to generate stream of bits in FS, and then splitter
mechanism is proposed to generate subsequences for k dif-
ferent {PSC1, PSC2, . . . , PSCk}, based on winner of game G.
Then, proposed k PSC are executed between EGP and EGO
to process the transfer of funds securely. The details of these
phases are presented as follows.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
14802 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021
Fig. 2. SaNkhyA: interaction sequences among different entities.
Algorithm 1 SaNkhya: Mapping Requests to Ac and Value
Generation by Ag
Input: GRq,PKc
g
Output: vw,tw
Initialization: i = 1,message = “OpenGroup′′
1: procedure MINER_SELECTION_ALGORITHM(GRq)
2: Broadcast(GRq, Mg
p)
3: Qactive ← Accept_Response(Ag)
4: message = “ClosedGroup′′
5: Broadcast(GRq, Mg
p)
6: e : map(GRq, Ag)
7: end procedure
8: procedure MINER_VALUE_GENERATION(e, PKc
g)
9: for i to w− 2 do
10: Extract (vw,Mg
ab)
11: x ← Hash (Tg
a ,Wg
b ), y ← Hash(IDg
ab,PKc
g), z ←
Hash(Tg
b ,Wg
a )
12: x←Hash(x,y), z← Hash(y, z)
13: Array_Values[i]← Hash(x,z)
14: end for
15: vw ← Hash(Array_values)
16: tw ← Block.timestamp
17: end procedure
A. SaNkhyA: Group Creators Ac and Value Generators Ag
In this section, we propose an algorithm for miner selection
and value generators Ag. Based on Ag, we propose a random
number generation algorithm in which Gg sends a request for
generation of R to the request pool Mg
p . The metadata Mg
p is
clustered into w groups to form GRq. Then, Rq is broadcasted
to group creators Ag and a mapping e is formed to map any
wth group details to any Ag following the FCFS policy. Public
key of miner Ag is computed and passed as inputs to value
generation algorithm denoted as PKc
g.
Based on mapping e, w groups are considered and process is
iterated ∀w groups. In each group, a generator Aw
g is assigned
independently. Aw
g generates an independent value, denoted as
vw at timestamp tw. From vw, metadata Mg
ab is extracted and
is hashed and result is stored as output hashes x y, and z. x
stores the hash of transactional entries of Pa with wallet of
Pb, y stores hash of combined ID of Pa and Pb with public
identifiers, and z stores the hash of transactional entries of Pb
with a wallet of Pa. To map transactional entries with ID, the
hashes are further hashed in a recursive binary tree fashion for
(w−2) inputs and extracted to form fixed output, stored in an
array that stores hashes for all (w−2) entries {v1, v2, . . . , vw−2}
at timestamps {t1, t2, . . . , tw−2}. The final hash is stored as
root, or Merkle hash value denoted by vw at timestamp tw.
Then these combined values are passed to the random number
generation algorithm to produce the final random number R.
The details of the random number generation are given in
Algorithm 1. As the algorithm processes w inputs as binary
tree construction, the overall complexity of the algorithm is
O(w.GRq).
B. PoV: Proof-of-Validity Consensus Mechanism
Ac collects requests from miner pool Mg
p and this request is
passed to Ag selected based on FCFS policy. Consider Ag can
create w groups denoted as {Ag1, Ag2, . . . , Agw}. Any group
Agw can have members {M1, M2, . . . , Mk}, where k < w. Then,
the following steps are performed to frame out the consensus.
1) Agreement: All k members in Agw share their secret
values {S1, S2, . . . , Sk} with each other, encrypted with
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
PATEL et al.: BLOCKCHAIN-ENVISIONED TRUSTED RANDOM ORACLES FOR IoT-ENABLED PSCs 14803
public key of remaining k − 1 members, that ensures
secrecy and confidentiality. The secret values Sk are then
broadcasted by group creator Mc in Agw within its group
to ensure an agreement.
2) Publish Step: In next phase, encrypted secret
value is broadcasted by different group creators
{Mc1, Mc2, . . . , Mck} within their group. All group
creators Mc informs other members that they have
completed the Agreement step in their group.
This information exchange is termed as pub-
lish step. The published information is denoted as
{Mp1, Mp2, . . . , Mpk}.
3) Miner Elimination: In case any kth group creator Mck
did not publish Mpk, then the respective group is elimi-
nated and the trust value TRk for their group is decreased
based on the given rule set.
a) Initialization: threshold = μ(TRk).
b) Rule 1: Set TRk ← ω.
c) Rule 2: If Mpk is published, then TRk = TRk + α,
else TRk = TRk−α, where α is a scaling constant.
d) Rule 3: If TRk < ω, then eliminate group Gk.
The consensus agreement is subject to the following con-
straints:
C1 : ∃Gk : (∀Mck : Mck → H(k))
C2 : !�Gk : (∀Mck : Mck → D(k)). (11)
Constraint C1 specifies that at least one group Gk exits that
have all honest members Mck denoted as H(k). Constraint C2
specifies that no group Gk such that all members Mck are dis-
honest denoted by D(k). Based on these constraints, two events
E1 and E2 are represented as follows:
E1 : Aj : ∀Mj → H(j)
E2 : Aj : ∃Mj ∧ H(j) (12)
where E1 specifies that all value generators Mj are honest for
any jth group and E2 signify that at least one value generator
Mj is honest in jth group, where j ∈ {1, 2, . . . , e+ n/k}. The
relation among E1 and E2 is depicted as X = ⋃e+n/k
j=1 E1 and
Y =⋂e+n/k
j=1 E2. To reach to the consensus, value of k needs to
be selected such that P |X ∩ Y| ≈ 1. To achieve this, consider
k = ε ln t where t = e+ n and ε > 0 is an arbitrary constant
that determines probability of occurrence of events E1 and E2.
Then, consider the probability of independent malicious
value generators as p in the jth group and also all Mcj are col-
luding in the group j. Then, P[E1(j)] = (1−p)k = (1−p)ε ln t.
Finally
P
[
E1(j)
] = t−ε ln(1−p)−1
. (13)
Based on P[E1(j)], P[E1] can be written as follows:
P[E1] = 1− P
⎡
⎣
t⋂
j=1
E1(j)
⎤
⎦
= 1−
(
1− (1− p)k
)t/k
= 1−
(
1− t−ε ln(1−p)−1
) t
ε ln t
≈ 1− exp
(
−t1−ε ln(1−p)−1
ε ln t
)
. (14)
The above expression value is close to 1 iff ε ln(1 − p)−1 <
1 and t is infinitely large value. Similarly, P[E2(j)] can be
defined as P[E2(j)] = (1 − p)k = 1 − t−ε ln p−1
. P[E2] can be
computed as follows:
P[E2] = (P[E2(j)
])t/k
= 1−
(
1− pk
)t/k
= 1−
(
1− t−ε ln p−1
) t
ε ln t
≈ exp
(
− t−ε ln p−1+1
ε ln t
)
≈ 1− t−ε ln p−1+1
ε ln t
.
If ε ln p−1 > 1, then P[E�] is close to 1. So epsilon must
satisfy this condition
1
ln p−1
< ε <
1
ln(1− p)−1
. (15)
It happened, if p < 0.5. Thus, to achieve k close to 1 more than
50% of the miners in the system need to be honest H(k). Based
on the computation of P[E1], P[E2], and ε, value generators
Aw
g update the TRk values in Ared to update vw. Based on the
values of {v1, v2, . . . , vw}, vector V is updated at timestamps
{t1, t2, . . . , tw}, respectively, to fed as inputs in generator of
random number R to generate stream of random bit-sequences
as FS.
C. Novel Method to Generate Random Numbers
Post generation of vw, the string V is passed to a ran-
dom number generation algorithm as depicted in Algorithm 2,
with timestamp information T to generate FS. FS then goes
through a random splitter procedure that splits the string into
equal subsequences. The process is depicted in Fig. 3. To
achieve this, we consider the input sequences {V1, V2, . . . , Vw}
in block ranges of size from 0 to 255 bits. Any wth block Vw
is divided into left and right sub-blocks, denoted as L(Vw)
and R(Vw), respectively. L(Vw) consists of 128 bits ranging
from 0 to 127 and R(Vw) is from 128 to 255 bits. At each
round, L(Vw) is utilized for key-generation K. Then, to add
diffusion, for any kth block, an XOR operation is performed
between R(Vk−1) and L(Vk), respectively. The result of XOR
is 128 bit output. The rightmost sub-block is discarded at each
round. In total, w blocks are present as inputs. After the first
XOR, (w − 1) 128-bit blocks are constructed. These blocks
go through a permutation sequence for 128 bits. To add con-
fusion, the permutation sequence is generated based on key
values from the previous round. The 128 bits (w − 1) per-
muted blocks are then subdivided into 64 bit left and right
sub-blocks. The process is iterative and the final block is per-
muted through a final permutation to generate a random string
sequence of {b0, b1, . . . , bn} bits, denoted as FS. From FS, the
random sequence R is generated.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
14804 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021
Fig. 3. SaNkhyA: random number generation.
The string FS is passed through random splitter to generate
subsequences {bk, bk+1, . . . , bl} as random oracles for execu-
tion of k PSC among EGP and EGO, based on winner of gth
game in G. As the algorithm processes inputs as block sizes
of 256 bits to produce R, which are sorted the complexity is
O(k.w log(w)).
D. Implementation of Probabilistic Smart Contract
After R is generated, splitter procedure creates
k subsequences as input oracles to k PSC, namely,
{PSC1, PSC2, . . . , PSCk}. Any kth PSC is executed between
winner EGP an EGO for fund transfer. Credit funds of winner
of the game is stored by EGO in variable game.balance. To
select winner of a game Gg, consider two players a and b in
Gg with wallets Wa an Wb, respectively. A random number in
range {1, . . . , 100} is generated and stored in wallet addresses
Wa and Wb, termed as x and y. Then, a lottery selection is
executed to check whether the stored number x or y equals
R. If R equals x, a is declared as winner of game Gg and
funds are transferred from game.balance to Wa. The transfer
of funds is processed through PSCk based on input oracle
bk. If R equals y, then b wins the game and game.balance
is credited to Wb through PSCk. The complexity depends on
number of parallel users operational in the scheme. Consider
k users in parallel, then the time complexity of execution of
contract is O(k.R) with interconnections as O(k2).
V. PERFORMANCE EVALUATION
In this section, we evaluate the performance of the proposed
scheme SaNkhyA against conventional approaches. For trust
values TRk, we compare the proposed scheme employing
miner selection scheme, depicted in Section IV-B against exist-
ing nonminer selection schemes [6], [7]. Then, SaNkhyA is
compared for parameters-latency creation in block generation,
and scalability of mined transactions. For block generation,
we compare the proposed work against existing serial schemes
Algorithm 2 SaNkhya: Random Number Generation
Algorithm
Input: GRq,PKc
g, vw, tw
Output: FS
Initialization: i = 1, k = 1, count = 0
1: procedure RANDOM_NUMBER_GENERATION
2: Vw, Tw ← MINER_VALUE_GENERATION(GRq, PKc
g)
3: Sort(Vw,Tw)
4: for 1 to w− 1 do
5: k← V1[0 : 127]
6: for every Vw−1 and Vw, do
7: Vw−1 ← Vw−1[128 : 255]⊕ Vw[0 : 127]
8: for i to length(K) do
9: if mark(Ki)==False then
10: if Ki==1 then
11: for j=i+1 to length(K) do
12: if Kj==1 then
13: swap(Vi
w,Vj
w)
14: mark(Ki)← True
15: mark(Kj)← True
16: GOTO step 7
17: end if
18: end for
19: else
20: for j=i+1 to length(K) do
21: if Kj==0 then
22: swap(Vi
w,Vj
w)
23: mark(Ki)← True
24: mark(Kj)← True
25: GOTO step 7
26: end if
27: end for
28: end if
29: else
30: GOTO step 7
31: end if
32: end for
33: end for
34: R← FS← Vw
35: end procedure
36: procedure RANDOM_NUMBER_SPLITTER(R)
37: for i = 0 to w do
38: l← R.length
39: for j = k to l do
40: n← ri
j
41: Count = Count + n
42: if Count ≤ size(w) then
43: (x← Left_shift(R, n)
44: Pass x to ri
j
45: end if
46: end for
47: end for
48: Q← Purge(R)
49: end procedure
in [6], [9], and [11] and scalability of mined transactions is
compared against nonminer selection schemes in [6] and [7].
Then, we evaluate throughput-latency trade-offs for SaNkhyA
and compare the proposed scheme for delay in random num-
ber generation against traditional approaches in [7], [8], and
[14]. For block-convergence time, we compare the proposed
consensus PoV against traditional consensus schemes.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
PATEL et al.: BLOCKCHAIN-ENVISIONED TRUSTED RANDOM ORACLES FOR IoT-ENABLED PSCs 14805
(a) (b) (c)
Fig. 4. SaNkhyA: impact of collusions and security of random number generation. (a) Impact on trust with measured collusions. (b) Latency comparison in
block creation. (c) Security-latency tradeoff in SaNkhyA.
TABLE IV
SIMULATION PARAMETERS
A. Experimental Setup and Simulation Parameters
For experimental setup, we consider the formulation of PSC
between EGP and EGO through using Remix IDE and execu-
tion through Solidity v0.5.11. The PSC are deployed on BC
using the Truffle suite with npm v5.1.0. For generating plots,
MATLAB Online R2019b v 9.7 is used. The details of the sim-
ulation parameters for the experimental setup are presented in
Table IV.
B. Simulation Results
1) Impact of Consensus and Security Level of Random
Numbers: Based on the trust values of Ared, a consensus algo-
rithm PoV is proposed to weed out colluding miners from Mck
at defined threshold μ(TRk). For the same, Fig. 4(a) consid-
ers a mapping of TRk to event P[E1]. As evident from the
graph, the trust drops drastically when colluding nodes are
more than 50% in nonminer schemes, but the effect is lower
in the proposed scheme. At 85% collusion, P[E1], TRk is close
to 0.38, indicating that the proposed scheme effectively dis-
cards Mck in case Mpk broadcast is not reached. The reason for
the same is improved correct oral propagation updates through
honest miners.
Fig. 4(b) evaluates the time delay in generation of R with
parallel block processing as indicated in Algorithm 2, against
conventional serial approaches. As the proposed scheme
processes block sequences {V1, V2, . . . , Vw} in parallel with
any kth block Vk divided into L(Vk) and R(Vk−1), processing
delay is less compared to serial generation of blocks where
Algorithm 3 SaNkhya: Smart Contract Algorithm
Input: Wa,Wb
Output: R
Initialization: is = 1,es = 100
1: x← select_num(Wa, is, es)
2: y← select_num(Wb, is, es)
3: Bx ← lottery_selection(Wa, x)
4: By ← lottery_selection(Wb, y)
5: game.balance = Bx + By
6: R = RANDOM_VALUE_GENERATION()
7: if x == R then
8: Wa+ = game.balance
9: game.balance = 0
10: else if y == R then
11: Wb+ = game.balance
12: game.balance = 0
13: end if
any kth block input is processed when output of (k − 1)th
block is present. The average block processing delay is 1.3
s in SaNkhyA compared to serial approaches with an average
process time of 5.6 s for 1000 blocks.
Fig. 4(c) depicts the relationship between the throughput
of B at the desired security levels in the range of 0–10 and
obtained latency to achieve the desired security. Any game
Gg demands low throughput η with low-security level, then
the latency � is less. If Gg demands a higher security level,
then the throughput and latency increase gradually. This is evi-
dent from the fact that as the security level is increased, then
the diffusion in block structure Vk increases and key size K
also increases with more rounds w to generate R. To sup-
port high encryption structures, keeping η as constant and
� increases. IF η is made variable, then � is proportional
to the security of R generation. Hence, processing applica-
tions face a security-latency tradeoff based on selected η as
throughput.
2) PoV and Efficiency of Random Number Generation of
SaNkhyA Against Conventional Approaches: Fig. 5(a) high-
lights the improved latency of SaNkhyA against nonminer
selection schemes. As from Ared, based on deviation μ, dis-
honest miners are eliminated, honest miners are proposed
higher incentives. Also, due to parallel block generation, bit-
sequences {b0, b1, . . . , bn} of generated R are decomposed
into subsequences bk in less-time compared to traditional non-
miner selection approaches. Thus, for any Gg, input oracles to
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
14806 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021
(a) (b) (c)
Fig. 5. SaNkhyA: scalability and PoV measurement against conventional approaches. (a) Scalability of mined transactions. (b) Delay in random number
generation. (c) PoV: improved BCT.
PSCk is presented with lower latency. Hence, more PSC are
added per quantum of time, that leads to improved scalability.
Fig. 5(b) shows a significant improvement in measured
average delay of SaNkhyA against other state-of-the art
approaches [7], [14], [21]. This is due to the fact of parallel
block creation in generation of R.
Fig. 5(c) defines parameter block convergence time (BCT)
to measure the improvements in proposed consensus mecha-
nism PoV. BCT is defined as the time required by all group
creators {Mc1, Mc2, . . . , Mck} to perform publish step denoted
as {Mp1, Mp2, . . . , Mpk}. If publish step is unconfirmed, and
Mck is eliminated, then the scheme converges to common
truth due to correct oral updates against traditional consen-
sus mechanisms. However, as more players EGP are added to
the scheme, the convergence rate decreases as block valida-
tion increases and approaches linearity with increases in added
blocks.
C. Functionalities of Probabilistic Smart Contracts
As shown in Fig. 6, secure PSC functionalities are
designed between EGP and EGO for transfer of funds from
game.balance, based on generated inputs PSCk from random
oracle R. Any EGP registers to game Gg as shown in Fig. 6(a).
Post registration, Wp
g is added to Mp and player p makes a
request for generation of R. These requests are collected in
request pool from all players as Mg
p . The request for genera-
tion of R from Mg
p is depicted in Fig. 6(b). The call invokes
Algorithm 2, and produces output string FS. Then, k subse-
quences are generated as input oracles for PSCk that selects
game winner W among players Pa and Pb. Selection of W is
depicted in Fig. 6(c). The transfer of funds is processed from
game.balance and is credited to wallet of W and these steps
are shown in Fig. 6(d).
D. Security Evaluation
This section evaluates the overall computation cost (CC) and
communication cost (CCM) of SaNkhyA based on identifiers
selected from [22]. The details are presented as follows.
1) Formal Verification: The section presents the formal
verification of PSC in SaNkhyA for security flaws. Smart con-
tracts are vulnerable to various attack vectors like transaction
origin, re-entrant problem, order dependence of contract eval-
uations, gas attacks, and timestamp dependencies. Thus, it is
Fig. 6. Proposed SC functionalities in SaNkhyA scheme. (a) Select number.
(b) Ask for a random number. (c) Winner. (d) Amount of money won.
Fig. 7. Formal security verification of SaNkhyA.
imperative to verify the security validation of the proposed
contract between the players Pp in the game Gg in the scheme
before deploying the contract. Mythril performs security analy-
sis techniques on contracts, for instance, taint analysis, control
flow checks, reordering checks, and transactional flows. The
contract file SaNkhya.sol is passed and no issues were detected
as shown in Fig. 7.
2) Computation and Communication Cost: To compute
CC, we first evaluate Algorithm 1. Metadata Mg
p is assigned to
Ac. The process consists of asymmetric encryption and hash
operations. Considering 10 users for broadcast, the cost is
10 ∗ (0.0056+ 0.00032+ 0.00032) ≈ 0.00624 s. Ac performs
a mapping Ag and the mapping cost is 0.0032 s. Then, the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
PATEL et al.: BLOCKCHAIN-ENVISIONED TRUSTED RANDOM ORACLES FOR IoT-ENABLED PSCs 14807
TABLE V
COMPARISON OF OVERALL COMPUTATION (CC) AND COMMUNICATION
COST (CCM) AGAINST EXISTING SCHEMES
TABLE VI
COMPARATIVE ANALYSIS WITH EXISTING SCHEMES
procedure MINER_VALUE_GENERATION contains a group
request GRq using public key PKc
g. Total 6 hash operations are
present and end block is appended in chain. Thus, the overall
cost is 6∗(0.00032) + 0.00032 + 0.00032 ≈ 0.00256 s. The
total cost of Algorithm 1 is 0.00624 + 0.00256 + 0.00032 ≈
0.00912 s. Algorithm 2 computes R. It consists of one asym-
metric encryption of Vw and 1 hash operation, thus the overall
cost is 0.00032+ 0.00056 ≈ 0.00816 s. Algorithm 3 builds a
PSC between Pa and Pb. It consists of two asymmetric encryp-
tion of wallet Wa and Wb, and 1 nonce identifier. The overall
cost is 0.0056∗2+0.00032 ≈ 0.0112 s. Thus, the overall CC
of SaNkhyA is 0.00912 + 0.00816 + 0.0112 ≈ 0.02848 s or
28.48 milliseconds.
CCM is evaluated in same pattern of CC. Algorithm 1 con-
sists of broadcast information, of 1 bits. Considering 10 users,
the broadcast takes 10 bits. Mapping e is 1 bit. Hash identity of
IDg
ab is 160 bits. Block timestamp append tw is 160 bits. Thus,
total CCM of Algorithm 1 is 10+ 1+ 160+ 160 ≈ 331 bits.
Algorithm 2 consists of XOR operation of 128 bits, boolean
mark operation of 1 bit, and public-key-operation PKc
g of
32 bits. Thus, overall CCM of Algorithm 2 is 128 + 1 +
32 ≈ 161 bits. Algorithm 3 consists of 2 wallet information
exchanges, each of 160 bits hash output. game.balance check-
ing condition requires 1 bit for flow condition. Thus, CCM
for Algorithm 3 is 160+ 160+ 1 ≈ 321 bits. Thus, the over-
all CCM of SaNkhyA is 331 + 161 + 321 ≈ 813 bits or 101
bytes. Table V shows the overall comparison of CC, CCM, and
several messages exchange (ME) against existing schemes.
E. Comparative Analysis
The proposed scheme SaNkhyA is compared against tradi-
tional schemes. Table VI presents the comparative analysis
against conventional security models on BC. Results indi-
cate the proposed scheme outperforms other state-of-the-art
approaches against chosen parameters.
VI. CONCLUSION
In modern decentralized IoT networks, randomization in
input oracles is critical for secured sensor-based exchange
over open channels. Also, a randomized nonce is required in
transactional tradings pertaining to financial institutions and
windfall games. It allows nondeterminism in input oracles to
PSC and leverages an efficient ecosystem to tackle colluding
dishonest entities. In a similar direction, the BC-envisioned
scheme SaNkhyA is proposed for the IoT-enabled PSC ecosys-
tem that ensures fairness and transparency in game-events.
The scheme exploits a miner selection algorithm that out-
puts an unbiased independent value. The value is then fed to
the proposed consensus scheme PoV that formulates a miner-
elimination process through a stable agreement scheme among
all miners. The scheme weeds out colluding miners from the
system. The step ensures that block additions are fair and
transparent. The honest miners then agree on the generation
of random oracle R as a sequence of stream bits, that are
passed through a splitting mechanism, to generate secure ran-
dom oracles to different PSC. The obtained results indicate
the efficacy of the proposed scheme. In the future, we will
propose a light-weight signing mechanism for EGP and EGO
using lattices to secure the proposed scheme against colluding
miners that can induce quantum attacks in the system.
REFERENCES
[1] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trad-
ing in blockchain-based industrial Internet of Things,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[2] P. Bhattacharya, A. Singh, A. Kumar, A. K. Tiwari, and R. Srivastava,
“Comparative study for proposed algorithm for all-optical network
with negative acknowledgement (AO-NACK),” in Proc. 7th Int. Conf.
Comput. Commun. Technol. (ICCCT), New York, NY, USA, 2017,
pp. 47–51.
[3] N. Grech, M. Kong, A. Jurisevic, L. Brent, B. Scholz, and
Y. Smaragdakis, “MadMax: Surviving out-of-gas conditions in Ethereum
smart contracts,” in Proc. ACM Program. Lang., vol. 2, Oct. 2018,
pp. 1–27.
[4] N. Atzei, M. Bartoletti, T. Cimoli, S. Lande, and R. Zunino, “SoK:
Unraveling bitcoin smart contracts,” in Principles of Security and
Trust (Lecture Notes in Computer Science), vol. 10804, L. Bauer
and R. Küsters, Eds. Cham, Switzerland: Springer, 2018, pp. 217–242.
doi: 10.1007/978-3-319-89722-6_9.
[5] I. Nikoli, A. Kolluri, I. Sergey, P. Saxena, and A. Hobor, “Finding the
greedy, prodigal, and suicidal contracts at scale,” in Proc. 34th Annu.
Comput. Security Appl. Conf. (ACSAC), New York, NY, USA, 2018,
pp. 653–663.
[6] K. Chatterjee, A. K. Goharshady, and A. Pourdamghani, “Probabilistic
smart contracts: Secure randomness on the blockchain,” in Proc. IEEE
Int. Conf. Blockchain Cryptocurrency (ICBC), Seoul, South Korea,
May 2019, pp. 403–412.
[7] M. Du, Q. Chen, L. Liu, and X. Ma, “A blockchain-based random num-
ber generation algorithm and the application in blockchain games,” in
Proc. IEEE Int. Conf. Syst. Man Cybern. (SMC), Bari, Italy, Oct. 2019,
pp. 3498–3503.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
https://doi.org/10.1007/978-3-319-89722-6_9
14808 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 19, OCTOBER 1, 2021
[8] T. Nguyen Van et al., “Scalable distributed random number genera-
tion based on homomorphic encryption,” in Proc. Blockchain, Jul. 2019,
pp. 572–579.
[9] J. Choi, W. Shin, J. Kim, and K. Kim, “Random seed generation for IoT
key generation and key management system using blockchain,” in Proc.
Int. Conf. Inf. Netw. (ICOIN), Barcelona, Spainm 2020, pp. 663–665.
[10] J. Li, Z. Zhang, and M. Li, “BANFEL: A blockchain based smart con-
tract for fair and efficient lottery scheme,” in Proc. IEEE Conf. Depend.
Secure Comput. (DSC), Hangzhou, China, Nov. 2019, pp. 1–8.
[11] Z. Wang, H. Yu, Z. Zhang, J. Piao, and J. Liu, “Ecdsa weak random-
ness in bitcoin,” Future Gener. Comput. Syst., vol. 102, pp. 507–513,
Jan. 2020.
[12] P. Datta, “Constrained pseudorandom functions from functional encryp-
tion,” Theor. Comput. Sci., vol. 809, pp. 137–170, Feb. 2020.
[13] Y. Ehara and M. Tada, “How to generate transparent random num-
bers using blockchain,” in Proc. Int. Symp. Inf. Theory Appl. (ISITA),
Singapore, Oct. 2018, pp. 169–173.
[14] J. Feng, X. Zhao, K. Chen, F. Zhao, and G. Zhang, “Towards random-
honest miners selection and multi-blocks creation: Proof-of-negotiation
consensus mechanism in blockchain networks,” Future Gener. Comput.
Syst., vol. 105, pp. 248–258, Apr. 2020.
[15] M. R. Dorsala, V. Sastry, and S. Chapram, “Fair payments for verifi-
able cloud services using smart contracts,” Comput. Security, vol. 90,
pp. 1–19, Mar. 2020.
[16] N. Kabra, P. Bhattacharya, S. Tanwar, and S. Tyagi, “MudraChain:
Blockchain-based framework for automated cheque clearance in finan-
cial institutions,” Future Gener. Comput. Syst., vol. 102, pp. 574–587,
Jan. 2020.
[17] P. Bhattacharya, S. Tanwar, R. Shah, and A. Ladha, “Mobile edge
computing-enabled blockchain framework—A survey,” in Proc. ICRIC,
2020, pp. 797–809.
[18] U. Bodkhe, P. Bhattacharya, S. Tanwar, S. Tyagi, N. Kumar, and
M. S. Obaidat, “BloHosT: Blockchain enabled smart tourism and hospi-
tality management,” in Proc. Int. Conf. Comput. Inf. Telecommun. Syst.
(CITS), Aug. 2019, pp. 1–5.
[19] J. Choi, “On throughput of compressive random access for one short
message delivery in IoT,” IEEE Internet Things J., vol. 7, no. 4,
pp. 3499–3508, Apr. 2020.
[20] Solidity Pitfalls: Random Number Generation for Ethereum. Accessed:
Jun. 4, 2018. [Online]. Available : https://www.sitepoint.com/solidity-
pitfalls-random-number-generation-for-ethereum/
[21] T. Nguyen-Van et al., “A system for scalable decentralized random
number generation,” in Proc. IEEE 23rd Int. Enterprise Distrib. Object
Comput. Workshop (EDOCW), Paris, France, Oct. 2019, pp. 100–103.
[22] S. B. Patel, P. Bhattacharya, S. Tanwar, and N. Kumar, “KiRTi:
A blockchain-based credit recommender system for financial insti-
tutions,” IEEE Trans. Netw. Sci. Eng., early access, Jun. 29, 2020,
doi: 10.1109/TNSE.2020.3005678.
[23] V. Odelu, A. K. Das, M. Wazid, and M. Conti, “Provably secure authen-
ticated key agreement scheme for smart grid,” IEEE Trans. Smart Grid,
vol. 9, no. 3, pp. 1900–1910, May 2018.
Nikunjkumar Sureshbhai Patel is currently pur-
suing the graduation degree with Nirma University,
Ahmedabad, India.
His research interest lies in the area of integration
of blockchain technology with IoT with a special
focus on securing financial transactions.
Pronaya Bhattacharya received the B.Tech degree
from Uttar Pradesh Technical University, Lucknow,
India, in 2008, and the M.Tech degree from IPM
Institute, Karnataka State University, Mysore, India,
in 2012. He is currently pursuing the Ph.D. degree
with specialization in optical communications from
Dr. A. P. J Abdul Kalam Technical University,
Lucknow, India.
He is employed as an Assistant Professor with
the Computer Science and Engineering Department,
Institute of Technology, Nirma University,
Ahmedabad, India. He has over eight years of teaching experience. He
has authored or co-authored 35 research papers in leading SCI journals
and top core IEEE ComSoc conferences. Some of his top findings are
published in IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, IEEE
TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, Transactions
on Emerging Telecommunications Technologies (Wiley), Future Generation
Computer Systems (Elsevier), Journal of Engineering Research (Kuwait
University), ACM-MobiCom, IEEE-InfoCom, IEEE-ICC, and IEEE-
CITS. His research interests include optical switching, high-performance
networking, blockchain, IoT, and deep learning.
Mr. Bhattacharya is awarded the best paper award in Springer ICRIC-2019
and COMS2-2021. He is working as a Reviewer of reputed SCI journals IEEE
INTERNET OF THINGS JOURNAL, IEEE TRANSACTIONS ON INDUSTRIAL
INFORMATICS, IEEE NETWORK, IEEE-ACCESS, Transactions on Emerging
Telecommunications Technologies (Wiley), Scandinavian Political Studies
(Wiley), International Journal of Communication Systems (Wiley), Optical
Switching and Networking (Elsevier), Multimedia Tools and Applications
(Springer), Wireless Personal Communications (Springer), and Journal of
Engineering Research (Kuwait University). He has also been appointed as
the Session Chair in IC4S-2019, IC4S-2020, and IICT-2020, organized by
Springer. He is a Lifetime Member of professional societies like ISTE and
IAENG.
Shivani Bharatbhai Patel is currently pursu-
ing the graduation degree with Nirma University,
Ahmedabad, India.
Her research interests lie in the area of blockchain
technology, deep learning, and IoT to solve real-
world problems.
Sudeep Tanwar (Senior Member, IEEE) received
the B.Tech degree from Kurukshetra University,
Kurukshetra, India, in 2002, M.Tech degree
(Honor‘s) from Guru Gobind Singh Indraprastha
University, Delhi, India, in 2009, and the Ph.D.
degree with specialization in wireless sensor
network from Mewar University, Chittorgarh, India,
in 2016.
He is currently an Associate Professor with the
Computer Science and Engineering Department,
Institute of Technology, Nirma University,
Ahmedabad, India. He is a Visiting Professor with Jan Wyzykowski
University, Polkowice, Poland, and the University of Pitesti Piteşti, Piteşti,
Romania. He has authored 2 books and edited 13 books, over 200
technical papers, including top journals and top conferences, such as
IEEE TRANSACTIONS ON NETWORK SCIENCE AND ENGINEERING, IEEE
TRANSACTIONS ON VEHICULAR TECHNOLOGY, IEEE TRANSACTIONS
ON INDUSTRIAL INFORMATICS, IEEE WIRELESS COMMUNICATIONS,
Networks, ICC, GLOBECOM, and INFOCOM. His h-index is 36. His
research interests include blockchain technology, wireless sensor networks,
fog computing, smart grid, and IoT. He initiated the research field of
blockchain technology adoption in various verticals in 2017. He actively
serves his research communities in various roles.
Dr. Tanwar has been awarded the best research paper awards from IEEE
GLOBECOM 2018, IEEE ICC 2019, and SpringerICRIC-2019. He is
currently serving the editorial boards of Physical Communication, Computer
Communications, International Journal of Communication System, and
Security and Privacy. He has served many international conferences as a
member of the organizing committee, such as the Publication Chair for
FTNCT-2020, ICCIC 2020, WiMob2019, the Member of the advisory board
for ICACCT-2021, ICACI 2020, the Workshop Co-Chair for CIS 2021, and
the General Chair for IC4S 2019, 2020, and ICCSDF 2020. He is a final
voting member for IEEE ComSoc Tactile Internet Committee in 2020. He is
a Senior Member of CSI, IAENG, ISTE, and CSTA, and the member of the
Technical Committee on Tactile Internet of IEEE Communication Society
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TNSE.2020.3005678
PATEL et al.: BLOCKCHAIN-ENVISIONED TRUSTED RANDOM ORACLES FOR IoT-ENABLED PSCs 14809
Neeraj Kumar (Senior Member, IEEE) received the
Ph.D. degree in CSE from Shri Mata Vaishno Devi
University, Katra, India, in 2009.
He is currently working as a Full Professor
with the Department of Computer Science and
Engineering, Thapar Institute of Engineering and
Technology, Deemed to be University, Patiala, India,
and also with also with King Abdulaziz University,
Jeddah, Saudi Arabia, and also with the Department
of Computer Science and Information Engineering,
Asia University, Taichung City, Taiwan. He is
a Visiting Professor with Coventry University. He has published over
300 technical research papers in leading journals and conferences from
IEEE, Elsevier, Springer, and John Wiley. Some of his research find-
ings are published in top-cited journals, such as IEEE TRANSACTIONS
ON INDUSTRIAL ELECTRONICS, IEEE TRANSACTIONS ON DEPENDABLE
AND SECURE COMPUTING, IEEE TRANSACTIONS ON CLOUD COMPUTING,
IEEE TRANSACTIONS ON CLOUD COMPUTING, IEEE TRANSACTIONS
ON KNOWLEDGE AND DATA ENGINEERING, IEEE TRANSACTIONS
ON VEHICULAR TECHNOLOGY, IEEE TRANSACTIONS ON CONSUMER
ELECTRONICS, IEEE NETWORKING, IEEE COMMUNICATION, IEEE
WIRELESS COMMUNICATIONS, IEEE INTERNET OF THINGS JOURNAL,
IEEE SYSTEMS JOURNAL, Future Generation Computer Systems, Journal of
Network and Computer Applications, and Computer Communications. He has
guided many Ph.D. and M.E./M.Tech. His research is supported by fundings
from the Tata Consultancy Service, the Council of Scientific and Industrial
Research, and the Department of Science and Technology.
Dr. Kumar has been awarded the best research paper awards from IEEE
ICC 2018 and IEEE Systems Journal 2018. He is leading the research group
Sustainable Practices for the Internet of Energy and Security where group
members are working on the latest cutting-edge technologies. He is a TPC
member and reviewer of many international conferences across the globe.
Houbing Song (Senior Member, IEEE) received the
M.S. degree in civil engineering from The University
of Texas at El Paso, El Paso, TX, USA, in 2016, and
the Ph.D. degree in electrical engineering from the
University of Virginia, Charlottesville, VA, USA, in
August 2012.
He was an Engineering Research Associate with
the Texas A&M Transportation Institute, Bryan, TX,
USA, in 2007. From 2012 to 2017, he was with the
Faculty of West Virginia University, Morgantown,
WV, USA. In 2017, he joined the Department of
Electrical, Computer, Software, and Systems Engineering, Embry-Riddle
Aeronautical University, Daytona Beach, FL, USA, where he is currently
an Assistant Professor and the Director of the Security and Optimization
for Networked Global Laboratory. He has authored over 100 articles. His
research interests include cyber-physical systems, cybersecurity and privacy,
the Internet of Things, edge computing, big data analytics, unmanned aircraft
systems, connected vehicles, smart and connected health, and wireless com-
munications, and networking.
Dr. Song was a recipient of the Navigation and Surveillance Technologies
(ICNS) Conference, the very first recipient of the Golden Bear Scholar
Award, the Highest Campus-Wide Recognition for Research Excellence at
the West Virginia University Institute of Technology (WVU Tech), in 2016,
the prestigious Air Force Research Laboratory’s Information Directorate
(AFRL/RI) Visiting Faculty Research Fellowship, in 2018, and the Best
Paper Award from 2019 Integrated Communication. He has served as an
Associate Technical Editor for the IEEE Communications Magazine. He has
served as a Guest Editor for the IEEE JOURNAL ON SELECTED AREAS IN
COMMUNICATIONS, the IEEE INTERNET OF THINGS JOURNAL, the IEEE
TRANSACTIONS ON INDUSTRIAL INFORMATICS, and the IEEE NETWORK.
He is the Editor of six books, including Big Data Analytics for Cyber-Physical
Systems: Machine Learning for the Internet of Things (Elsevier, 2019),
Smart Cities: Foundations, Principles, and Applications (Hoboken, NJ, USA:
Wiley, 2017), Security and Privacy in Cyber-Physical Systems: Foundations,
Principles, and Applications (Chichester, U.K.: Wiley-IEEE Press, 2017),
Cyber-Physical Systems: Foundations, Principles, and Applications (Boston,
MA, USA: Academic Press, 2016), and Industrial Internet of Things:
Cybermanufacturing Systems (Cham, Switzerland: Springer, 2016). He is a
Senior Member of ACM.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:09:54 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice