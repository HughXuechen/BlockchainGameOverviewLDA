Arbitrage Attack: Miners of the World, Unite!
Arbitrage Attack: Miners of the World,
Unite!
Yuheng Wang1, Jiliang Li1(B), Zhou Su1, and Yuyi Wang2(B)
1 School of Cyber Science and Engineering, Xi’an Jiaotong University, Xi’an, China
wangdahu1211@stu.xjtu.edu.cn, jiliang.li@xjtu.edu.cn, zhousu@ieee.org
2 ETH Zürich, Zürich, Switzerland
yuyiwang920@gmail.com
Abstract. Blockchain oracles are introduced to mitigate the gap between
blockchain-based applications and real-world information. To solve the
centralization problem of current oracle systems, many decentralized pro-
tocols have been designed. In this paper, we define the basic model for
decentralized oracles that rely on unencrypted transactions for verifica-
tion and adjustment tasks. Furthermore, we introduce Arbitrage attack
against such decentralized oracles carried out by rational miners and min-
ing pools. We analyze the attack based on game-theoretic methods. More-
over, we briefly discuss the price of anarchy to demonstrate the character-
istic of attackers’ cooperation union under different circumstances.
Keywords: Blockchain · Decentralized price oracle · Nash
equilibrium · Price of anarchy (PoA)
1 Introduction
If we take a look at all the impressive events that happened in 2021, the epic
“Gamestop (GME) Short Squeeze” war that happened among the union of retail
investors, certain hedge funds as well as short-sellers at the very beginning of
this year can’t avoid discussion [28]. Gamestop is an offline game retailer com-
pany selling games, game consoles, and accessories. Under the influence of e-
commerce, the revenue of Gamestop had been greatly impacted. Therefore many
hedge funds and short-sellers believe that the stock price is going to drop and
took the opportunity to short sell Gamestop’s stock. However, many Gamestop’s
loyal customers as well as some speculators, on the contrary, started to buy in
Gamestop’s stock in order to hinder venture capital firms’ plan. Due to the inter-
net propaganda, more and more retail investors and even some famous investors
also participated in and started to buy in the stock. Consequently, Gamestop’s
stock price had surprisingly risen a lot, which caused many venture capital firms
great loss [31].
The important reason for this great victory is that a large number of inde-
pendent retail investors, who even don’t know each other before, take the same
action and manage to “change” and “manipulate” the price of Gamestop’s stock
price together. From the view of a bystander, it seems that these retail investors
c© International Financial Cryptography Association 2022
I. Eyal and J. Garay (Eds.): FC 2022, LNCS 13411, pp. 464–487, 2022.
https://doi.org/10.1007/978-3-031-18283-9_23
http://crossmark.crossref.org/dialog/?doi=10.1007/978-3-031-18283-9_23&domain=pdf
https://doi.org/10.1007/978-3-031-18283-9_23
Arbitrage Attack: Miners of the World, Unite! 465
form a temporary union to achieve this goal. So will this kind of temporary union
appear in other fields? Currently, there have been extensive discussions about
possible applications of blockchain technology, and decentralized finance (DeFi)
has become a main driver of blockchain adoption. Compared with the traditional
finance industry, DeFi uses transparent and immutable on-chain smart contracts
to realize trading activity instead of centralized custodians, banks, and brokers.
So will a temporary union appears in the DeFi system and “manipulate” the
DeFi market price to obtain high profit?
Noted that, most of DeFi projects rely on smart contracts to perform trading
operations, and these smart contracts need an oracle (also known as data feed)
to carry the real-world information (e.g., the current market price of Bitcoin) to
the blockchain as evidence to trigger execution. This is because smart contracts
are only able to use on-chain information, to guarantee the safety of blockchain
systems. Most of the oracle systems currently being used are centralized oracles
that depend on trusted third-party facilities or platforms (e.g., Town Criers [8])
to fetch outside information, and later the information will be given to the
customer through a transaction proposed by the oracle’s on-chain account.
Although such a method is effective, the deployment of centralized oracles
brings back the problem of centralization. To mitigate the problem, decentralized
oracles protocols have been proposed. Decentralized oracles (e.g., the NEST
protocol [18]) try to avoid the centralization problem by letting different users
propose opinions after hearing a query task and make decisions for the final
output together. Consequently, some inaccurate and malicious personal opinions
might inevitably be brought in. Therefore verification and adjustment methods
will be the only guarantee of decentralized oracle’s reliability. And in most cases,
procedures of opinion proposition, verification as well as adjustment are realized
in the form of on-chain transactions.
Most studies about decentralized oracles only take opinion proposers’ influ-
ence into consideration and neglect miners as well as mining pools. It is well
known that miners, especially mining pools, have considerable influence on the
publishing of transactions, which can also cause damage to the reliability and
accuracy of decentralized oracles. However, to our notice there have been very
few decentralized oracle studies considering the power of miners and mining
pools, especially when tampering with the publishing of certain transactions will
benefit them more. We believe that under such circumstances, the miners and
mining pools can form a temporary union just like retail investors in “Gamestop
Short Squeeze” event to manipulate the output of decentralized oracles and
obtain greater profit. So in this paper, we introduce the Arbitrage attack, an
attack against decentralized oracles by the union of miners and mining pools,
and carry out further analysis based on game theory.
1.1 Related Work
Oracles have been a very hot research topic these days due to the prosperous
applications based on smart contracts. Different kinds of oracle protocols have
466 Y. Wang et al.
been proposed. In general, oracles can be classified into two different types:
centralized and decentralized.
For centralized oracles, there is always a third party involved in the informa-
tion transportation task. Zhang et al. presented a very famous and widely used
centralized oracle model, Town Crier (TC) [8]. TC guarantees reliability and
confidentiality by using Software Guard Extensions (SGX). Each user’s query
request is executed by codes running in SGX, and corresponding information
is fetched from corresponding official websites. Similarly, the Provable oracle in
[29] directly fetches information from data sources and uses TLSNotary to prove
the integrity. And the PriceGeth oracle from [30] continuously sends fetched data
through the oracle’s smart contract. However, the implementation of centralized
oracles like the ones mentioned above brings centralized problems back to the
blockchain system. Since safety, confidentiality, and reliability are once again
dependent on a third party that needs to be trusted.
Therefore, various decentralized oracle protocols have been proposed to miti-
gate the shortcomings of centralized oracles [10]. In Augur, proposed by Peterson
et al. [15], all users can vote on the possible outputs given by the oracle system,
and each vote weights differently based on users’ reputation. Adler et al. designed
an oracle protocol ASTRAEA [14] which outputs results proposed and certified
also by the votes of users. However, such an oracle can only report data in the
form of Boolean propositions, each user will vote for agreement or disagreement
for query questions e.g., today’s weather is sunny. Similarly, in Witnet oracle,
designed by de Pedro et al. [16], information is retrieved and attested by different
users based on their reputation.
The rational mining pool is another important question attracting many
researchers’ attention. In [20], Eyal et al. analyze the feasibility and effect for
mining pools to carry out selfish mining attack, which shows the power of mining
pools in the blockchain system. Besides, there are other kinds of attacks due to
the rationality of mining pools like bribing [24,25], and front-running [26,27]
that may tamper with blockchain-based applications.
1.2 Our Contributions
In this paper, we first provide a basic model for decentralized oracles that depend
on unencrypted transactions to realize adjustment and verification like NEST
protocol [18]. This model contains the necessary procedures for a decentralized
oracle of this type to form a reliable output.
Based on the proposed decentralized oracle model, we introduce the Arbitrage
attack which is carried out by rational miners and mining pools. We argue that
it is possible for rational miners and mining pools to maliciously manipulate
the decentralized oracle’s output by taking the same actions together like a
temporary union in order to obtain more profit.
We further conduct a game-theoretic analysis on this attack. We use a multi-
stage static game of perfect information to model the whole attack procedure
and analyze each participant’s Nash equilibrium strategies during the game to
depict the progress of the whole attack under different circumstances. When
Arbitrage Attack: Miners of the World, Unite! 467
possible. We also compute the price of anarchy, the ratio of the social costs of
the worst Nash equilibrium, and the social optimum, to represent the influence
when the attack union is lacking cooperation.
2 Preliminaries
In the following, we outline the required background of blockchains and decen-
tralized oracles for our proposed Arbitrage attack.
2.1 Blockchains
Smart Contract and DeFi. Currently, many blockchain platforms like Ethereum
have supported smart contracts, which are based on pseudo-Turing complete
programs to manage cryptocurrency assets. Thanks to the flexibility of smart
contracts, blockchain network users are able to do more complex tradings besides
transferring to accounts, e.g., lend and borrow assets [2], margin trade [3], short
and long trading [3] and derivative assets creation [2], and all these complex
tradings constitute the foundation of Decentralized Finance (DeFi).
Mining Pool. A mining pool refers to a group of miners that gather their com-
putational power together to solve the POW problem and divide the revenue
for the creation of a new block according to each miner’s contribution [5]. The
chance of solving the cryptography puzzles is prominently increased by form-
ing mining pools. Hence, miners’ revenue becomes higher and more stable. At
present, nearly 80% hashrate of Bitcoin belong to less than 8 mining pools and
less than 3 mining pools controls 60% of Ethereum’s total hashrate [6]. Although
miners’ revenue is guaranteed because of the emergence of the mining pool, the
problem of centralization has appeared again. To be more specific, each mining
pool has a pool server connecting to an on-chain account to gather the latest
transaction information, construct a block template, and send it to pool miners.
In this case, the pool server can decide which transactions will be selected [7] in
the block template.
2.2 Oracle
Most blockchain applications, especially in DeFi projects, rely on certain infor-
mation to trigger the execution of smart contracts, but only on-chain information
can be reached by smart contracts because blockchain systems are isolated from
the outside world to guarantee safety [10]. Although information like the lat-
est trading price in Uniswap can be used, these kinds of on-chain information
sources are unreliable due to the lack of variety and stability. To be more specific,
in Uniswap, there may only be one or two transactions about two niche digital
assets at a certain time, which is not convincing enough. Besides, the price of
these transactions could be proposed by the same person, which means the price
might be malicious. Therefore, oracles that carry information from the outside
468 Y. Wang et al.
world back to the blockchain are designed to solve this problem [11,12]. Up till
now, many oracles being used bring back the problem of centralization since a
trusted third party is always required for transporting information to blockchain
systems from the real world [8,13]. Consequently, decentralized oracles, whose
output information is decided by different users is currently a hot research spot
with many problems that need to be solved [14–16].
3 Decentralized Oracle Model
In this section, we propose the basic model of decentralized oracles relying on
unencrypted transactions based on the NEST protocol [18], which is a currently
widely used decentralized oracle.
3.1 Participants
A decentralized oracle can accomplish basic query tasks generally based on four
different kinds of participants: customer, oracle platform, contributors: proposers
& verifiers, and information sources.
Customer. Decentralized oracles’ customers could be any blockchain network
user or smart contract that needs information from the outside world. They can
send transactions to oracle platforms to submit an information query task, and
certain fees are required for each query which constitutes the main income source
of oracle platforms.
Oracle Platform. Oracle platform, which usually exists in the form of smart
contracts and on-chain accounts, acts as a portal that collects query tasks and
outputs required information. Oracle platform is also responsible for managing
collected enquiry fees, distributing rewards, and adjusting the oracle protocol’s
parameters.
Contributors: Proposer & Verifier. According to the definition of the decentral-
ized oracle, each oracle’s output can actually be considered as the consensus of
different users, who are also noted as Contributors. To reach consensus, contrib-
utors who first propose their opinions are called Proposers, and those who verify
and make adjustments to these proposed opinions are called Verifiers. Noted that
all messages from both two kinds of contributors are unencrypted, therefore can
be viewed by any blockchain user without limitations. For instance, assuming
that a decentralized oracle accepts a request to search Bitcoin’s current market
price. Proposers will propose their opinions about the current price based on the
information sources they subscribed to. However, these personal opinions may be
inaccurate due to narrow information resources or delays, and some may even be
malicious. Therefore, verifiers are required or incentivized to make adjustments
or verification based on their information sources to these personal propositions,
and finally form a final oracle output at last.
Arbitrage Attack: Miners of the World, Unite! 469
Information Sources. Decentralized oracles’ outputs are formed based on users’
personal opinions, and these users can form an opinion based on their freely
chosen information sources like official websites as well as the latest on-chain
transactions like mentioned in Sect. 2.2. As a result, the choice of information
resources is not limited compared with centralized oracles and only using on-
chain information, which makes the oracles’ outputs more convincing.
3.2 Enquiry Process
Consider a decentralized oracle platform O, a customer C, a set of n con-
tributors Con = {Con1, Con2, · · · , Conn} and m different information sources
I = {I1, I2, · · · , Im}. To finish a query task Q proposed by C, all of the partici-
pants of decentralized oracles should carry out following procedures as shown in
Fig. 1:
Fig. 1. Decentralized oracle model and necessary procedures for a query task proposed
by a customer smart contract.
1. Propose query request. The customer C propose a query task Q with
required query fees to decentralized oracle platform O through a transaction.
2. Form and propose personal opinions. After noticing a new query task,
contributor Coni will form a personal opinion pi about the query based on
personal subscribed information sources set IConi
⊆ I. Noted that different
personal information source sets IConi
and IConj
could be the same, totally
different, or partly overlapped since there is no limitation for choosing infor-
mation sources. After that, some of the contributors (proposers) will propose
their personal opinion to O.
470 Y. Wang et al.
3. Verification and adjustment. For each of the proposed personal opinions,
some of the rest of the contributors, except the one who proposes this opinion,
will be verifiers and may choose to make an adjustment to these personal
opinions or propose verification for valid opinions. Such verification process
may last for a limited time, e.g., after s blocks are mined.
4. Deliver output. The opinion after adjustment and verification will be the
final output of O and given to C also in the form of transaction. Some encryp-
tion methods may be applied here to protect the customer’s privacy and
interest.
Note that in some decentralized oracle protocols, there may only be opin-
ion proposers and no contributor specially dedicated as a verifier to propose
adjustment and verification transactions. Instead, mechanisms or algorithms
like reputation or voting are used by the oracle platform itself to adjust pro-
posed opinions. Assume there are total n opinion transactions been proposed
to the oracle platform for a query task, and if we set a specific transaction as
the target opinion, then among the rest n − 1 transactions, those opinions that
are against the target opinions’ will therefore be regarded as adjustment and
verification opinions. The contributors who propose these transactions can rela-
tively be considered as verifiers. In that case, the decentralized oracle model we
proposed above can still apply to these kinds of decentralized oracle protocols.
Besides, we also believe that the Arbitrage attack introduced in the following
sections will also be feasible in these decentralized oracle protocols.
4 Arbitrage Attack
In this section, we propose a possible attack against the decentralized oracle
model mentioned before, which is carried out by rational mining pools.
4.1 Mining Pools’ Influence on Decentralized Oracle
As mentioned before, mining pools with overwhelming hashrate nearly have the
right to decide which transactions would be added to the chain as well as the
corresponding order. The accuracy of decentralized oracles’ outputs can also be
influenced by mining pools since in most cases, oracles’ main procedures are
also carried out through on-chain transactions sent by contributors. Therefore,
if some transactions are delayed or ignored because of mining pools’ intervention,
then the oracle’s outputs might be seriously affected.
Due to the negative influence of mining pools, many mitigation methods have
been implemented in the updates of the existing blockchain system. Besides,
many mining pools cut their hashrate voluntarily, since the negative influence of
their dominating hashrate may do damage to the blockchain system and further
cause a loss to their assets in the blockchain system. Consequently, the dominat-
ing mining pools have gradually been replaced by several different mining pools
with less hashrate. In that case, the capacity of mining pools is greatly weakened
Arbitrage Attack: Miners of the World, Unite! 471
and transactions will be less likely to be blocked or delayed because of one or
two mining pools’ willingness.
What can go wrong?
Because of the distribution of total hashrate, divergence may appear among
mining pools, since decisions will only be made based on each one’s own benefits.
However, once their target overlaps during a time period, a temporary union
may appear, which is similar to retail investors in the Gamestop event. When it
comes to decentralized oracles, different mining pools may take the same action
and cooperate to block contributors’ certain transactions to manipulate oracles’
outputs and arbitrage later. This is what we called the Arbitrage attack that
may happen in a decentralized oracle.
4.2 Arbitrage Attack Model
Fig. 2. Procedures of the whole Arbitrage attack. The customer contract will be caused
huge damage due to the rationality of mining pools
Assuming that there are n rational mining pools in the blockchain network and
search for high profit in the blockchain network (i.e., individual miners can be
considered as mining pools with lower hashrate). And there is a decentralized
oracle O that outputs the current price of Bitcoin, for instance, to all its con-
sumers in the blockchain network.
When a malicious user wants to intervene in the oracle’s output, it will first
propose a malicious price quotation through transaction tm which is greatly
deviated from the real market price, much higher for example. According to
the mechanism of O, an honest verifier may notice the difference during the
verification procedure and propose an adjustment transaction ta with gas fee.
Generally, mining pools would be willing to include ta into the next block they are
472 Y. Wang et al.
currently mining and win normal profit A, which is the reward for following the
protocol. However, after noticing the malicious transaction tm, rational mining
pools may hesitate because tm represents an arbitrage opportunity for higher
profit than A.
As a result, instead of simply including ta, a rational mining pool may choose
to buy or loan a large amount of Bitcoin as soon as they see the price quota-
tion tm, and prepare a set of arbitrage transactions to propose after the attack
succeeds. Noted that these transactions are all against customer contracts of
oracle O. Later they will together ignore any adjustment transactions that want
to amend the quotation together like a union, since these transactions are also
unencrypted and therefore can be distinguished easily. Finally, they can sell out
all the Bitcoin they have by proposing a newly mined block containing arbi-
trage transactions set tarb they want to make after the quotation tm becomes
valid. By doing so, mining pools are able to obtain higher arbitrage profit B.
Consequently, customers using O as their information source will be severely
influenced because of these arbitrage transactions. The whole attack process is
shown in Fig. 2. It is worth to be noted that, the detailed expressions and cal-
culated methods of profit A and B should be uncertain and depend on specific
decentralized oracle protocol. But generally speaking, the arbitrage profit B will
always be higher than the normal profit A.
4.3 Attack Feasibility
The profit of a successful Arbitrage attack is usually attractive and irresistible.
Intuitively, it seems that mining pools will definitely choose to attack when B is
larger than the normal profits A. However, not all of the rational mining pools
will obtain B at last. Currently, most cryptocurrency transactions are based on
AMM DEXs (automated market maker decentralized exchanges), like Uniswap.
For AMM DEXs, an exchange with a large scale will cause a great slippage,
which means the second user who wants to arbitrage will gain no profit [4]. To
simplify the analysis, we propose the following assumption:
Assumption 1. Each mining pool has sufficient property to propose large
enough transactions to every victim smart contracts using oracle O.
The assumption above is reasonable since the current prosperous DeFi system
allows users to borrow specific crypto assets through services like Flash Loan [23].
Besides, what we mean by a transaction is “large enough” here is that the
transaction will cause a great slippage. And based on Assumption 1 we can
propose the following theorem:
Theorem 1. There can be only one winner to obtain profit for the Arbitrage
attack no matter success or not.
On the one hand, Theorem 1 shows that the final arbitrage profit B could
be tremendous compared to the normal transaction fee A, and rational mining
pools are fully incentivized to carry out this attack. On the other hand, since
Arbitrage Attack: Miners of the World, Unite! 473
there can be only one winner, some rational mining pools may give up before
the oracle’s output is changed (i.e. before the attack succeeds) and decide to
obtain the normal transaction fee A, especially for those mining pools with less
hashrate. However, even though a mining pool with less hashrate decides to stop
the attack and break the union by publishing a block containing transaction ta,
the possibility of success is based on its hashrate which is also very low.
Consequently, a key question that needs to be figured out is that whether
this temporary union of rational mining pools trying to manipulate the oracle’s
output will maintain during the whole oracle’s adjustment period until the final
decisive output. In the following section, we will analyze this question based on
game-theoretical analysis.
5 Game Theory Analysis
5.1 Game Model Forming
Before formal analysis, we first use the following assumption to restrict the ability
of mining pools:
Assumption 2. A mining pool can only decide not to include certain trans-
actions in the block building by itself, but will not ignore or block valid blocks
containing certain transactions proposed by others.
What assumption 2 guarantees is that mining pools can leave the attack
union by publishing a new block containing the adjustment transactions. And
we will not consider the situations like blockchain forking in this paper.
Assuming that there are n mining pools in the network denoted by [n] and
they are all rational, searching for high profits. w.l.o.g., the hashrate satisfy P1 >
P2 > ... > Pn and
∑n
j=1 Pj = 1. Noted that in reality, mining pools may use part
of hashrate for selfish mining [20], which won’t contribute to the attack. However
such a situation will not have a fundamental effect on the following analysis, so
we only consider the hashrate assumption mentioned above for simplicity. We
also assume that these mining pools know each other’s hashrate ratio:
Assumption 3. Rational mining pools are all aware of each other’s hashrate
proportion.
According to the attack model mentioned in Sect. 4.2, consider a malicious
proposition tm arrives in block b0 and an adjustment transaction ta is broadcast
to the entire blockchain network at the very moment after b0 is published (in the
real scenario, there might be a longer period of time between the appearance of
these two transactions), and [n] rational mining pools will simultaneously notice
this arbitrage opportunity. During the verification period which lasts for s blocks,
if the adjustment transaction ta is included in block bi, b0 + 1 ≤ bi ≤ b0 + s,
the malicious proposition tm will become invalid and the Arbitrage attack will
fail, the mining pool which publish block bi will be the only winner and obtain
normal profit A. On the contrary, if no adjustment appeared during s blocks,
474 Y. Wang et al.
then the rational mining pool that successfully mines the block with arbitrage
transactions set tarb in block b0 + s + 1 will obtain the arbitrage profit B. And
the possibility for a rational mining pool to mine a block approximately equal
to its hashrate ratio Pi.
Consequently, when mining blocks between b0 and b0 + s + 1, each rational
mining pool need to decide whether include the adjustment transaction ta and
tarb into the next block it is mining right now (tarb is only decided for block
b0+s+1). Therefore, we can denote the whole Arbitrage attack into a multi-stage
static game, and according to Assumption 3, the game is of perfect information
since mining pools know each others’ hashrate ratio and the revenue for this
attack. There are at most s + 1 static games of perfect information during the
whole attack. From game 1 to game s, mining pools need to decide whether
include transaction ta in the block they are mining, and in game s + 1 mining
pools will decide whether include arbitrage transactions set tarb. The multi-stage
game will end if a block with ta is successfully mined. During the attack, after
block b0 + i− 1 has been added to the chain, [n] rational mining pools’ strategy
for forming template of block b0 + i, which is also game i, can be denoted as
Ti = (T1i, T2i, ..., Tni)
where
Tji =
{
Y include transaction ta in block b0 + i
N not include transaction ta in block b0 + i
T ji∗ represent the Nash equilibrium strategy and the utility function for each
mining pool’s strategy is
U(Ti) = (U1(Ti), U2(Ti), ..., Un(Ti))
For simplicity, in the following part we will use i block (1 ≤ i ≤ s + 1) to
represent block b0 + i.
5.2 Nash Equilibrium Strategy
Based on the multi-stage static game of the perfect information model mentioned
above, we can easily get the following conclusion
Theorem 2. For a rational mining pool j, its strategy for block i should be the
Nash equilibrium strategy for game i.
Theorem 2 shows that it is necessary to analyze each stage game’s Nash
equilibrium strategy Ti
∗. It is already known that the expression of the utility
function of strategy for each stage game is crucial to finding the Nash equilib-
rium strategy. However, things are really complicated if we sequentially analyze
the problem from game 1 to game s+1, since the utility function will be complex
due to a large number of potential strategy combinations. Therefore, we need to
Arbitrage Attack: Miners of the World, Unite! 475
find another method to obtain the Nash equilibrium strategy of each game. Intu-
itively, it is obvious that at block s+1 every rational mining pools’ strategy will
be the same Y , for they will have no chance to gain profit at last. Conclusively,
we can learn from the idea of reverse induction and start to analyze the Nash
equilibrium strategy at s+ 1 block, then infer the Nash equilibrium strategy for
previous blocks.
Block s + 1 After publishing s block, which doesn’t include ta, all rational
mining pools need to decide whether include the arbitrage transactions set tarb
into the s+1 block they are building. Apparently, we can easily obtain the Nash
equilibrium strategy for this final game by comparing the utility function:
Theorem 3. The Nash equilibrium strategy for block s + 1 is
Ts+1 = (Y, Y, ..., Y
︸ ︷︷ ︸
n
)
Block s Since all rational mining pools’ Nash equilibrium strategies when decid-
ing the s + 1 block are determinate, it will be practical to obtain mining pool
j’s utility function for block s:
Uj(Ts) =
{
PjA + PNs(j)PjB Tjs = Y
(PNs(j) + Pj)PjB Tjs = N
where PNs represent the sum of hashrate of mining pools whose strategy is N ,
except mining pool j, PNs =
∑
k∈{k|Tks=N,k �=j} Pk. We use PNs
∗ to represent
the situation for Nash equilibrium strategy.
By comparing those two different utility functions, the Nash equilibrium
strategy Tjs
∗ should be related to the ratio of two different profits and the
hashrate:
Tjs
∗ =
{
Y B
A < 1
Pj
N B
A > 1
Pj
We can therefore consider Nash equilibrium strategies in three different sce-
narios:
Proposition 1. When B
A > 1
Pn
> ... > 1
P1
, for a random mining pool j, Tjs∗ =
N , Ts
∗ = (N,N, ..., N
︸ ︷︷ ︸
n
) and Uj(Tjs∗) = PjB
Proposition 2. When B
A < 1
P1
< ... < 1
Pn
, for a random mining pool j, Tjs∗ =
Y , T ∗
s = (Y, Y, ..., Y
︸ ︷︷ ︸
n
) and Uj(Tjs∗) = PjA
476 Y. Wang et al.
Proposition 3. When 1
P1
< B
A < 1
Pn
, w.l.o.g. 1
P1
< ... < 1
PR
< B
A < 1
PR+1
<
... < 1
Pn
. Then for a random mining pool j, Nash equilibrium strategy should be
Tjs
∗ =
{
Y j ≥ R + 1
N j ≤ R
and the utility function should be:
Uj(Tjs∗) =
{
PjA + PNs(j)∗PjB Tj∗
s = Y
(PNs(j)∗ + Pj)PjB Tj∗
s = N
Propositions above show that the ratio of two different kinds of profit will
influence the Nash equilibrium strategies for game s. If B greatly exceeds the
normal transaction fee profit A, then more mining pools will persist in the attack,
which fits our intuition. Based on the analysis of s+1 and s blocks, we can extend
our analysis method to the more general scenarios like the Nash equilibrium
strategies for i (0 ≤ i < s) block.
Block i Similar to s block, a random mining pool j’s utility function at i block
should be related to its Nash equilibrium utility function in i + 1 block:
Uj(Ti) =
{
PjA + PNi(j)Uj(Tji+1
∗) Tji = Y
(PNi(j) + Pj)Uj(Tji+1
∗) Tji = N
and therefore the Nash equilibrium strategy should be
Tji
∗ =
{
Y Uj(Tji+1
∗) < A
N Uj(Tji+1
∗) > A
Similar to the analysis for the s block, we also consider the Nash equilibrium
strategies in three different scenarios.
Proposition 4. When B
A > 1
Pn
> ... > 1
P1
, for a random mining pool j,
Uj(Tjs∗) = PjB > Aholds. By mathematical induction, the Nash equilibrium
strategy for game i should be Ti
∗ = (N,N, ..., N
︸ ︷︷ ︸
n
)
Proposition 5. When B
A < 1
P1
< ... < 1
Pn
, for a random mining pool j,
Uj(Tjs∗) = PjB < Aholds. By mathematical induction, the Nash equilibrium
strategy for game i should be Ti
∗ = (Y, Y, ..., Y
︸ ︷︷ ︸
n
)
When 1
P1
< B
A < 1
Pn
, divergence will appear in the attack union compared
to the two other conditions mentioned above, it is worthwhile to figure out the
change of Nash equilibrium strategies of each mining pool during the whole
attack process.
In order to depict the change of Nash equilibrium strategy for different stage
game, here we also assume that 1
P1
< ... < 1
PR
< B
A < 1
PR+1
< ... < 1
Pn
, we first
give following theorem:
Arbitrage Attack: Miners of the World, Unite! 477
Theorem 4. For a random mining pool j, if its Nash equilibrium strategy for
block i + 1 is Y , then the Nash equilibrium strategy for block i is also Y .
From Theorem 4 we can conclude that
Corollary 1. For a mining pool j, it is impossible that the Nash equilibrium
strategy for game i is N and Y for game i + 1.
Corollary 2. PNi(j)
∗ should increase with i increase to s.
Have these corollaries in mind, we only need to consider mining pool j’s Nash
equilibrium strategy for game i when the equilibrium strategy for game i + 1 is
N .
Theorem 5. For a mining pool j, if its Nash equilibrium strategy for game i+1
is N and Y for j. Then for any mining pool h with Ph < Pj, there should be
Thi
∗ = Y .
From Theorem 5 we can get the following results:
Corollary 3. With block number i increases, mining pools with more hashrate
will change their strategy from Y to N more sooner than mining pools with less
hashrate.
Corollary 4. There won’t be a Nash equilibrium strategy Ti
∗ for game i where
Thi
∗ = N,Tji
∗ = Y (Ph < Pj).
Fig. 3. Example of four different mining pool’s Nash equilibrium strategies’ changes
during the whole attack.
Combine Theorem 4 and 5 as well as corollaries above we can depict the
change of Nash equilibrium strategy for mining pool j at game i (0 ≤ i ≤ s)
when 1
P1
< B
A < 1
Pn
, Fig. 3 shows an example with four different mining pools:
478 Y. Wang et al.
– If j’s Nash equilibrium strategy is Y at game i + 1, for any other game
g, g < i + 1, mining pool j’s Nash equilibrium strategy will also be Y .
– If j’s Nash equilibrium strategy is N at game i + 1. Then Nash equilibrium
strategy at game i will be Y if PjB
∏s
k=i(PNk(j) + Pj) < A, else the Nash
equilibrium strategy will be N .
With the Nash equilibrium strategy change under different circumstances
mentioned above, each mining pool is able to decide their strategies for each
block they are building with the attack proceeding. The whole process for a
rational mining pool to decide the final strategy is described as an algorithm
pseudo-code in Appendix B.
5.3 Price of Anarchy
The ratio between the worst Nash equilibrium and the social optimum is the
price of anarchy (PoA), the formal definition can be denoted as:
PoA =
mint∈Nprofit(t)
maxt∈Tall
profit(t)
where N is the set of Nash equilibrium strategies and Tall is the set of all possible
strategies during the process of attack. profit(t) represents the expected profit
for the union of rational mining pools when the attack ends, no matter successful
or not.
The price of anarchy provides an insight into the effects of lack of corporation.
To be more specific, PoA represents the gap between system performance when
players all behave selfishly and follow central coordination. When the price of
anarchy is close to 1, selfish players don’t severely influence the union’s total
profit, which means the union is stable. In contrast, the low price of anarchy
shows that the union is loose.
Since the ratio of two kinds of profit B and A will influence the Nash equi-
librium strategies, we can determine the price of anarchy in different situations.
Corollary 5. When B
A > 1
Pn
> ... > 1
P1
, the price of anarchy is PoA = 1.
Corollary 6. When B
A < 1
P1
< ... < 1
Pn
, the price of anarchy is PoA = A
B .
Corollary 7. When 1
P1
< B
A < 1
Pn
, the price of anarchy is
PoA =
(1 − ∏s
i=1 PNi)A +
∏s
i=1 PNiB
B
.
6 Conclusion, Limitations and Extensions
In this paper, we introduce an Arbitrage attack against decentralized oracles
carried out by rational mining pools. We show that when potential arbitrage
profit weights far more than regular profits, different mining pools will take the
Arbitrage Attack: Miners of the World, Unite! 479
same actions to delay or block transactions like a temporary union to carry on
the attack. And as the attack progresses, the union becomes more and more
stable. In the parts below, we will further discuss the limitations and possible
extensions of this paper.
Generality. As mentioned before, the attack discussed in this paper is against
decentralized oracles that depend on transactions to make adjustments and ver-
ification, therefore a very promising topic to discuss is whether this attack will
be feasible to a more general decentralized oracle model.
And in another aspect, this attack may be feasible to not only decentral-
ized oracles. To be more specific, similar to decentralized oracles, many other
blockchain applications also realized certain functions based on proposing differ-
ent transactions. Therefore, we believe that the temporary union in Arbitrage
attack may happen in other blockchain applications. For instance, consider a
DAO managing the parameters of a transaction pool of two kinds of digital
assets like Curve [19], members of DAO are supposed to vote to decide the
specific parameters like the exchange rate of these two assets for the next sev-
eral days. Assume that all members need to vote by proposing transactions to
DAO’s official voting account, and the voting period will last for several blocks
for example. In that case, the rational mining pools may take the same actions
in Arbitrage attacks by blocking or delaying voting transactions against their
will during the voting period, to manipulate the final decision. Consequently,
although efficient incentive mechanisms are applied to guarantee DAO’s rational
members to vote honestly, the final decision still can be influenced because of
the power of mining pools.
Game Theory Analysis. The game theory analysis in this paper can become
more complete. For one thing, in this paper, we only depict the possible pro-
cess during the attack when the two revenue A and B are stable. However, in
reality, the revenue A and B could be dynamic, since the number of adjustment
transactions could increase which will makes A increase during the process. By
considering changes of A may help to depict the whole attack process more
dynamically. Similarly, the attack revenue B could also change due to the price
fluctuation of the digital assets associated with the attack. For the other, even a
mining pool becomes the final winner of the attack, the negative social influence
of the attack may also cause the winner a great loss. Such a potential loss may
exert influence on mining pools’ strategy during the attack. However, such kind
of loss is difficult to describe, which also makes the game theory analysis pretty
challenging.
Forking. In Assumption 2, we make some restrictions about mining pools’ abil-
ity since the attack is closely related to the forking problem. Without the restric-
tion, mining pools that wish to continue the attack can choose to fork and ignore
the block containing adjustment transactions published by mining pool that
chooses to give up the attack. Besides, at the end of the attack, loser mining
pools can even call for forking by claiming that the only winner is the “evil
480 Y. Wang et al.
attacker” in order to make the winner unable to obtain the revenue. These kinds
of problems are complicated but deserve further discussion.
Mitigation Methods. Detailed mitigation methods are not given in this paper,
and we plan to do further exploration about feasible solutions to this attack. So
far, we believe there may be two practical ways to solve the problem. One is
to adjust the time of the verification process s. Intuitively, longer s will make
the attack less likely to succeed. But longer verification time will also make
the oracle’s outputs less time-sensitive, which could be a deadly drawback for
oracles designed for scenarios like the high-frequency trading market. Therefore
the optimal verification time or period can only be obtained by detailed analysis.
The other possible solution is to bring in cryptography methods like “secret
ballots” [32] in the internet voting system. The mining pools will be unable to
distinguish transactions with adjustments information if transactions’ contents
are encrypted. But the detailed procedure needs to be well designed to ensure
safety.
A Proofs
Theorem 1. There can be only one winner for the Arbitrage attack no matter
success or not.
Proof. In the case of failure, since there can be only one block containing adjust-
ment transaction ta, therefore this block’s publisher should be the only winner
with normal profit A.
In the case of success, each rational mining pool can publish a smart contract
in the blockchain including all the transaction it would like to make after the
oracle’s output is manipulated. This smart contract has enough time to become
valid during the oracle’s verification period. After the output has been changed,
the mining pool can propose a newly mined block containing arbitrage transac-
tions set tarb and exploit all arbitrage opportunities. ��
Theorem 2. For a rational mining pool j, its strategy for block i should be the
Nash equilibrium strategy for game i.
Proof. The Nash equilibrium strategy at game i for mining pool j should satisfy
U1(Ti
∗) ≥ U1(Ti
∗)
where Ti
∗ represents the equilibrium strategy and Ti
∗ represents other strategies.
Thus a rational mining pool will choose the equilibrium strategy while making
decision for block i. ��
Theorem 3. The Nash equilibrium strategy for block s + 1 is
Ts+1 = (Y, Y, ..., Y
︸ ︷︷ ︸
n
)
Arbitrage Attack: Miners of the World, Unite! 481
Proof. According to the attack model, all the rational mining pools will try to
mine their own block containing the arbitrage transactions set tarb, so the utility
function for a mining pool j can be easily denoted as:
Uj(Ts+1) =
{
PjB Tjs+1 = Y
0 Tjs+1 = N
Where Pj is the hashrate ratio of mining pool j. Therefore, all the rational
mining pools will choose to add the transaction to the block. ��
Proposition 1. When B
A > 1
Pn
> ... > 1
P1
, for a random mining pool j, Tjs∗ =
N , Ts
∗ = (N,N, ..., N
︸ ︷︷ ︸
n
) and Uj(Tjs∗) = PjB.
Proof. For all rational mining pools that participated in the attack, the profit
ratio B
A is larger than the reciprocal of any mining pool’s hashrate. As a result,
according to the utility function of two different actions, every mining pool’s
Nash equilibrium strategy will be N , which will guarantee the attack will succeed
and game s+1 will be conducted, therefore the utility will be PjB for a random
mining pool j. ��
Proposition 2. When B
A < 1
P1
< ... < 1
Pn
, for a random mining pool j, Tjs∗ =
Y , T ∗
s = (Y, Y, ..., Y
︸ ︷︷ ︸
n
) and Uj(Tjs∗) = PjA.
Proof. For all rational mining pools that participated in the attack, the profit
ratio B
A is less than the reciprocal of any mining pool’s hashrate. Similarly,
according to the utility function of two different actions, every mining pool’s
Nash equilibrium strategy will be Y , which will guarantee the attack will fail
and game s + 1 will be not conducted, therefore the utility will be PjA for a
random mining pool j. ��
Proposition 3. When 1
P1
< B
A < 1
Pn
, w.l.o.g. 1
P1
< ... < 1
PR
< B
A < 1
PR+1
<
... < 1
Pn
. Then for a random mining pool j, Nash equilibrium strategy should be
Tjs
∗ =
{
Y j ≥ R + 1
N j ≤ R
and the utility function should be:
Uj(Tjs∗) =
{
PjA + PNs(j)∗PjB Tj∗
s = Y
(PNs(j)∗ + Pj)PjB Tj∗
s = N
Proof. According to the utility function, mining pools whose hashrate ratio’s
reciprocal is higher than B
A will choose Y and N for the rest of the mining pools,
and the utility can be easily obtained based on their Nash equilibrium strategies.
��
482 Y. Wang et al.
Proposition 4. When B
A > 1
Pn
> ... > 1
P1
, for a random mining pool j,
Uj(Tjs∗) = PjB > Aholds. By mathematical induction, the Nash equilibrium
strategy for game i should be Ti
∗ = (N,N, ..., N
︸ ︷︷ ︸
n
).
Proof. According to Theorem 1, for a random mining pool j, Uj(Tjs∗) = PjB >
A holds. Therefore, for game s−1, the Nash equilibrium strategy and correspond-
ing utility can be easily obtained:
Ts−1
∗ = (N,N, ..., N
︸ ︷︷ ︸
n
)
Uj(Tjs−1
∗) = PjB > A
Then by mathematical induction, rational mining pools’ Nash equilibrium
strategy for every game should be (N,N, ..., N
︸ ︷︷ ︸
n
). ��
Proposition 5. When B
A < 1
P1
< ... < 1
Pn
, for a random mining pool j,
Uj(Tjs∗) = PjB < A holds. By mathematical induction, the Nash equilibrium
strategy for game i should be Ti
∗ = (Y, Y, ..., Y
︸ ︷︷ ︸
n
).
Proof. According to Theorem 2, for a random mining pool j, Uj(Tjs∗) = PjA <
A holds. Therefore, for game s − 1, the Nash equilibrium strategy and corre-
sponding utility can be easily obtained:
Ts−1
∗ = (Y, Y, ..., Y
︸ ︷︷ ︸
n
)
Uj(Tjs−1
∗) = PjA < A
Then by mathematical induction, rational mining pools’ Nash equilibrium
strategy for every game should be (Y, Y, ..., Y
︸ ︷︷ ︸
n
). ��
Theorem 4. For a random mining pool j, if its Nash equilibrium strategy for
block i + 1 is Y , then the Nash equilibrium strategy for block i is also Y .
Proof. Assuming that mining pool j’s Nash equilibrium strategy for block i+ 1
is Y , then
Uj(T ∗
i+2) < A
Therefore
Uj(Tji+2
∗) < A
Uj(Tji+1
∗) = PjA + PN(i+1)(j)∗Uj(Tji+2
∗)
< (Pj + PN(i+1)(j)∗)A ≤ A
⇒ Uj(Tji+1
∗) < A
The Theorem is therefore proved. ��
Arbitrage Attack: Miners of the World, Unite! 483
Corollary 1. For a mining pool j, it is impossible that the Nash equilibrium
strategy for game i is N and Y for game i + 1.
Proof. According to Theorem 4, a mining pool’s Nash equilibrium strategy for
game i can only be Y , if its Nash equilibrium strategy for game i + 1 is Y . ��
Corollary 2. PNi(j)∗ will not decrease with i increase to s.
Proof. According to Corollary , once a mining pool’s Nash equilibrium strategy
is N for a game, then its Nash equilibrium strategy will not change to Y in
later games. Instead, it is possible for mining pools with Y as Nash equilibrium
strategy to change in later games. Therefore, the total hashrate of mining pools
with Nash equilibrium strategy N will not decrease with the process of the whole
attack. ��
Theorem 5. For a mining pool j, if its Nash equilibrium strategy for game i+1
is N and Y for i. Then for any mining pool h with Ph < Pj, there should be
Thi
∗ = Y .
Proof. We can prove the theorem with contradiction. Assuming that there is a
mining pool h with Ph < Pj , and its Nash equilibrium strategy for game i is N .
According to Theorem 4, mining pool h’s Nash equilibrium strategy for game
i+1 should be N , therefore Uh(Thi+1
∗) = Phb
∏s
k=i+1(PNk(h)+Ph) should be
greater than A
Uh(Thi+1
∗) > A
However, for mining pool j
Uj(T ∗
i+1) = PjB
s∏
k=i+1
(PNk(j) + Pj) < A
since the Nash equilibrium strategy changes to Y . Notice that
Uh(Thi+1
∗) < Uj(T ∗
i+1)
because Ph < Pj . Then a contradiction happens. ��
Corollary 3. With block number i increases, mining pools with more hashrate
will change their strategy from Y to N more sooner than mining pools with less
hashrate.
Proof. According to Theorem 5, if a mining pool j’s Nash equilibrium strategy
is N for game i + 1 and Y for i, then in game i the Nash equilibrium strategy
for all the mining pools with less hashrate will also be Y , which will not change
for the game before i according to Theorem 4. Consequently, with block number
i increase, mining pool j’s Nash equilibrium strategy will change from Y to N
before the mining pools with less hashrate. ��
484 Y. Wang et al.
Corollary 4. There won’t be a Nash equilibrium strategy Ti
∗ for game i where
Thi
∗ = N,Tji
∗ = Y (Ph < Pj).
Proof. Corollary 3 shows that with block number i increases, mining pools with
higher hashrate will change its strategy from Y to N sooner, besides it is not
possible to change from N to Y . Conclusively, there won’t be a Nash equilibrium
strategy Ti
∗ for game i where Thi
∗ = N,Tji
∗ = Y (Ph < Pj). ��
Corollary 5. When B
A > 1
Pn
> ... > 1
P1
, the price of anarchy is PoA = 1.
Proof. According to Proposition 4, all rational mining pools will choose N during
the whole s blocks period, then
PoA =
profit(N for all)
profit(N for all
=
B
B
= 1
��
Corollary 6. When B
A < 1
P1
< ... < 1
Pn
, the price of anarchy is PoA = A
B .
Proof. According to Proposition 5, all rational mining pools will choose Y during
the whole s blocks period, then
PoA =
profit(Y for all)
profit(N for all)
=
A
B
��
Corollary 7. When 1
P1
< B
A < 1
Pn
, the price of anarchy is
PoA =
(1 − ∏s
i=1 PNi)A +
∏s
i=1 PNiB
B
.
Proof. When 1
P1
< B
A < 1
Pn
, since there will always be mining pools that decide
to publish the adjustment contract ta during the s blocks and gain profit A, the
only situation to obtain profit B is when mining pools whose Nash equilibrium
strategy is N successfully mine the block ��
Arbitrage Attack: Miners of the World, Unite! 485
B Algorithm
Algorithm 1. Mining pool q’s Nash equilibrium strategy for block k
Input: Pool q’s hashrate ratio Pq, block number for verification period s, mining
pools’ total number n, target block number k, profit A,B, mining pools’ hashrate
sequence P = (P1, P2, P3...Pn) //in descending order
Output: Strategy T //T = Y represents including adjustment transaction in block k
template, T = N represents not including.
1: ArrayN=[ ]; //array for mining pools with strategy N
2: ArrayT=[Y, Y...Y ]; //strategy array
3: for j = 1, i = 1;j ≤ n;j + + do
4: if 1
Pj
< B
A
then
5: ArrayN[i++]=Pj ;
6: ArrayT[j]=N ;
7: end if
8: end for
9: if len(ArrayN)==n then //Nash equilibrium strategy for every block is N
10: return N ;
11: end if
12: if len(ArrayN)==0 then //Nash equilibrium strategy for every block is Y
13: return Y ;
14: end if
15: if q /∈ ArrayN then //Nash equilibrium strategy for block s is Y , return Y
16: return Y ;
17: end if
18: for i = s − 1;i ≥ k + 1;i − − do
19: COMPARE(A,U(Tq∗
i+1)) //compare the utility with A to decide final strategy
20: if A is larger then
21: return Y
22: end if
23: for q ∈ ArrayN do
24: if A > U(Tji+1
∗) then
25: POP(ArrayN,j) //delete mining pools whose strategy changes
26: end if
27: end for
28: U(Tq∗
i )=SUM(ArrayN)*U(Tq∗
i+1)
29: end for
30: return N
References
1. Zheng, Z., et al.: An overview on smart contracts: challenges, advances and plat-
forms. Futur. Gener. Comput. Syst. 105, 475–491 (2020)
2. Finance, C.: Compound finance (2021). https://compound.finance/
3. bZx network: bzx network (2021). https://bzx.network/
4. Zhou, L., Qin, K., Torres, C.F., Le, D.V., Gervais, A.: High-frequency trading on
decentralized on-chain exchanges. arXiv preprint arXiv:2009.14021 (2020)
https://compound.finance/
https://bzx.network/
http://arxiv.org/abs/2009.14021
486 Y. Wang et al.
5. Apostolaki, M., Zohar, A., Vanbever, L.: Hijacking bitcoin: routing attacks on
cryptocurrencies. In: 2017 IEEE Symposium on Security and Privacy (SP), pp.
375–392. IEEE (2017)
6. Shi, H., Wang, S., Hu, Q., Cheng, X., Zhang, J., Yu, J.: Fee-free pooled mining
for countering pool-hopping attack in blockchain. IEEE Trans. Depend. Secur.
Comput. 18, 1580–1590 (2020)
7. Antonopoulos, A.M.: Mastering Bitcoin (2019)
8. Zhang, F., Cecchetti, E., Croman, K., Juels, A., Shi, E.: Town crier: an authen-
ticated data feed for smart contracts. In: Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, pp. 270–282 (2016)
9. Yamashita, K., Nomura, Y., Zhou, E., Pi, B., Jun, S.: Potential risks of hyperledger
fabric smart contracts. In: 2019 IEEE International Workshop on Blockchain Ori-
ented Software Engineering (IWBOSE), IEEE, pp. 1–10 (2019)
10. Al-Breiki, H., Rehman, M.H.U., Salah, K., Svetinovic, S.: Trustworthy blockchain
oracles: review, comparison, and open research challenges. IEEE Access 8, pp. 85
675–85 685 (2020)
11. Xu, X., et al.: The blockchain as a software connector. In: 2016 13th Working
IEEE/IFIP Conference on Software Architecture (WICSA). pp. 182–191. IEEE
(2016)
12. Moudoud, H., Cherkaoui, S., Khoukh, L.: An IoT blockchain architecture using
oracles and smart contracts: the use-case of a food supply chain. In: 2019 IEEE
30th Annual International Symposium on Personal, Indoor and Mobile Radio Com-
munications (PIMRC), pp. 1–6. IEEE (2019)
13. Cloud, G.: Building hybrid blockchain/cloud applications with ethereum
and google cloud (2021). https://cloud.google.com/blog/products/data-analytics/
building-hybrid-blockchain-cloud-applications-with-ethereum-and-google-cloud
14. Adler, J., Berryhill, R., Veneris, Z. Poulos, A., Veira, N., Kastania, A.: Astraea: a
decentralized blockchain oracle. In: 2018 IEEE International Conference on Inter-
net of Things (IThings) and IEEE Green Computing and Communications (Green-
Com) and IEEE cyber, Physical and Social Computing (CPSCom) and IEEE
Smart Data (SmartData), pp. 1145–1152, IEEE (2018)
15. Peterson, J., Krug, J., Zoltu, M., Williams, A.K., Alexander, S.: Augur: a decen-
tralized oracle and prediction market platform. arXiv preprint arXiv:1501.01042
(2015)
16. de Pedro, A.S., Levi, D., Cuende, L.I.: WitNet: a decentralized oracle network
protocol. arXiv preprint arXiv:1711.09756 (2017)
17. Wang, S., et al.: Decentralized autonomous organizations: concept, model, and
applications. IEEE Trans. Comput. Soc. Syst. 6(5), 870–878 (2019)
18. NEST Protoco: The NEST protocol (2021). https://nestprotocol.org/
19. Curve finance (2021). https://curve.fi/
20. Eyal, I., Sirer, E.G.: Majority is not enough: bitcoin mining is vulnerable. In:
Christin, N., Safavi-Naini, R. (eds.) FC 2014. LNCS, vol. 8437, pp. 436–454.
Springer, Heidelberg (2014). https://doi.org/10.1007/978-3-662-45472-5 28
21. Zhou, L., Qin, K., Ferreira Torres, C., Gervais, A., et al.: High-frequency trading on
decentralized on-chain exchanges. In: IEEE Symposium on Security and Privacy,
pp. 23–27 May 2021
22. Nakamoto, S.: Bitcoin: a peer-to-peer electronic cash systemBitcoin: a peer-to-peer
electronic cash system. Decent. Bus. Rev. 21260 (2008)
23. Wang, D., et al.: Towards a first step to understand flash loan and its applications in
DEFI ecosystem. In: Proceedings of the Ninth International Workshop on Security
in Blockchain and Cloud Computing, pp. 23–28 (2011)
https://cloud.google.com/blog/products/data-analytics/building-hybrid-blockchain-cloud-applications-with-ethereum-and-google-cloud
https://cloud.google.com/blog/products/data-analytics/building-hybrid-blockchain-cloud-applications-with-ethereum-and-google-cloud
http://arxiv.org/abs/1501.01042
http://arxiv.org/abs/1711.09756
https://nestprotocol.org/
https://curve.fi/
https://doi.org/10.1007/978-3-662-45472-5_28
Arbitrage Attack: Miners of the World, Unite! 487
24. Liao, K., Katz, J.: Incentivizing blockchain forks via whale transactions. In: Bren-
ner, M., et al. (eds.) FC 2017. LNCS, vol. 10323, pp. 264–279. Springer, Cham
(2017). https://doi.org/10.1007/978-3-319-70278-0 17
25. McCorry, P., Hicks, A., Meiklejohn, S.: Smart contracts for bribing miners. In:
Zohar, A., et al. (eds.) FC 2018. LNCS, vol. 10958, pp. 3–18. Springer, Heidelberg
(2019). https://doi.org/10.1007/978-3-662-58820-8 1
26. Daian, P., et al.: Flash boys 2.0: Frontrunning in decentralized exchanges, miner
extractable value, and consensus instability. In: 2020 IEEE Symposium on Security
and Privacy (SP), pp. 910–927. IEEE (2020)
27. Eskandari, S., Moosavi, S., Clark, J.: SoK: transparent dishonesty: front-running
attacks on blockchain. In: Bracciali, A., Clark, J., Pintore, F., Rønne, P.B., Sala, M.
(eds.) FC 2019. LNCS, vol. 11599, pp. 170–189. Springer, Cham (2020). https://
doi.org/10.1007/978-3-030-43725-1 13
28. Chohan, U.W.: Counter-Hegemonic Finance: The Gamestop Short Squeeze. SSRN
(2021)
29. provable: Provable documentation (2021). https://docs.provable.xyz
30. Eskandari, S., Clark, J., Sundaresan, V., Adham, M.: On the feasibility of decen-
tralized derivatives markets. In: Brenner, M., et al. (eds.) FC 2017. LNCS, vol.
10323, pp. 553–567. Springer, Cham (2017). https://doi.org/10.1007/978-3-319-
70278-0 35
31. Anand, A., Pathak, J.: WallStreetBets against wall street: the role of reddit in the
GameStop short squeeze. IIM Bangalore Research Paper, no. 644 (2021)
32. Wu, H., Vora, P.L., Zagórski, F.: PrivApollo-secret ballot E2E–V Internet voting.
In: Financial Cryptography Workshops, pp. 299–313 (2019)
https://doi.org/10.1007/978-3-319-70278-0_17
https://doi.org/10.1007/978-3-662-58820-8_1
https://doi.org/10.1007/978-3-030-43725-1_13
https://doi.org/10.1007/978-3-030-43725-1_13
https://docs.provable.xyz
https://doi.org/10.1007/978-3-319-70278-0_35
https://doi.org/10.1007/978-3-319-70278-0_35
	Arbitrage Attack: Miners of the World, Unite!
	1 Introduction
	1.1 Related Work
	1.2 Our Contributions
	2 Preliminaries
	2.1 Blockchains
	2.2 Oracle
	3 Decentralized Oracle Model
	3.1 Participants
	3.2 Enquiry Process
	4 Arbitrage Attack
	4.1 Mining Pools' Influence on Decentralized Oracle
	4.2 Arbitrage Attack Model
	4.3 Attack Feasibility
	5 Game Theory Analysis
	5.1 Game Model Forming
	5.2 Nash Equilibrium Strategy
	5.3 Price of Anarchy
	6 Conclusion, Limitations and Extensions
	A Proofs
	B Algorithm
	References