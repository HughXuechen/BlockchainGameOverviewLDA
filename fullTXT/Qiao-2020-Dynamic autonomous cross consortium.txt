Dynamic Autonomous Cross Consortium Chain Mechanism in e-Healthcare
IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020 2157
Dynamic Autonomous Cross Consortium Chain
Mechanism in e-Healthcare
Rui Qiao , Xiang-Yang Luo , Si-Feng Zhu, Ao-Di Liu , Xin-Qing Yan, and Qing-Xian Wang
Abstract—Safe and scalable dynamic autonomous data
interaction between medical institutions can increase the
number of clinical trial records, which is of great signifi-
cance for improving the level of medical trial collaboration,
especially for clinical decision-making with regard to rare
diseases. Through a preset authorization access and con-
sensus mechanism, consortium chain provides integrity
and traceability management for medical clinical data. How-
ever, how to enable users have ownership of their own med-
ical data and share their medical data safely and dynami-
cally between different medical institutions remains an area
of particular concern. To achieve dynamic communication
between medical consortium chains, this paper proposes
(i) a cross-chain communication mechanism by simplifying
the heterogeneous node communication topology and (ii)
the construction rules of the node identity credibility path-
proof to carry out dynamic construction and verification
of the path-proof for cross-chain transactions. In addition,
the consensus of the cross-chain transaction is modeled
as a threshold digital signature process with multiple privi-
leged subgroups; thus, the intra-chain consortium consen-
sus based on the verification node list is extended to the
cross-chain consensus. A smart contract deployment and
execution scheme based on rational node value transfer
mechanism is proposed by analyzing the value transfer
game between nodes. Experimental results showed that the
proposed scheme can not only enable patients to share
their records safely and autonomously in an authorized
medical consortium chain within milliseconds but also re-
alize dynamic adaptive interaction among heterogeneous
consortium chains.
Index Terms—Medical collaboration, cross consortium
chain, value transfer, group signature.
Manuscript received October 1, 2019; revised December 2, 2019;
accepted December 24, 2019. Date of publication January 1, 2020;
date of current version August 5, 2020. This work was supported by the
National Natural Science Foundation of China under Grant 61902447
and also by the Key R&D and Promotion Project of Henan Province in
2020, China (Researches on theoretical model and algorithm of perfor-
mance optimization of IoT consortium chain). (Corresponding author:
Xiang-Yang Luo.)
R. Qiao is with Zhoukou Normal University, Zhoukou, China, and
also with the State Key Laboratory of Mathematical Engineering and
Advanced Computing, Zhengzhou, China (e-mail: jorui_314@126.com).
X.-Y. Luo, A.-D. Liu, and Q.-X. Wang are with the State Key
Laboratory of Mathematical Engineering and Advanced Computing,
Zhengzhou China (e-mail: luoxy_ieu@sina.com; ladyexue@163.com;
wqx2008@vip.sina.com).
S.-F. Zhu is with Tianjin Chengjian University, Tianjin, China
(e-mail: 304854105@qq.com).
X.-Q. Yan is with the North China University of Water Resources and
Electric Power, Zhengzhou, China (e-mail: yanxq@ncwu.edu.cn).
Digital Object Identifier 10.1109/JBHI.2019.2963437
I. INTRODUCTION
M EDICAL research institutions usually lack sufficient
patient records for clinical trials and urgently require to
access the data of other medical institutions dynamically and au-
tonomously to increase the number of records. Thus, secure and
scalable data interaction between different institutions is critical
for clinical collaboration. However, there are two challenges to
the dynamic autonomous interaction of medical clinical data:
on the one hand, direct sharing of patient data between different
medical institutions may entail privacy disclosure risks [1], [2];
on the other hand, the key requirements for medical clinical
data interaction and sharing are data integrity and traceability.
Medical research institutions must be able to report the reliability
of their data sources to ensure the reliability of clinical trial
results from data capture to final analysis. Therefore, it is of
great significance to investigate the reliable sharing mechanism
of e-Healthcare records for improving the effective cooperation
among medical institutions.
At present, many medical institutions outsource their storage
services to cloud servers. Under the centralized cloud service
technology and management, the security and privacy associated
with storing and sharing medical data have attracted consider-
able attention. For example, in [3], a solution was proposed for
sharing sensitive data on the basis of non-standard diagonal data
aggregation methods. In [4], a context-aware privacy protection
scheme was proposed. In [5], a security model was proposed
on the basis of fog computing facilities. However, the above-
mentioned solutions rely on fully trusted third parties to improve
the security of medical information sharing with authentication
and key agreement schemes [6], which are vulnerable to offline
password guessing attacks and privileged internal attacks [7].
It is difficult to achieve clinical trial data security, traceability,
and management across institutions. In contrast to centralized
management, a blockchain develops a chain structure to store
data blocks containing the complete transaction history in a
distributed manner, thus it has high tamper resistance [8], [9].
Blockchain-based data sharing mechanism can achieve in-
tegrity and traceability for medical data, so as to improve
the safety and efficacy of medical data application. Therefore,
the mechanism is considered as a feasible solution [10]–[12].
According to the manner of node access, blockchains can be
divided into three categories: public chain, private chain and
consortium chain. Under decentralized supervision, the consor-
tium chain can implement hierarchical management of users,
independent dynamic flow of values between trusted nodes, and
2168-2194 © 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-0569-2179
https://orcid.org/0000-0003-3225-4649
https://orcid.org/0000-0002-9644-3812
mailto:jorui_314@126.com
mailto:luoxy_ieu@sina.com
mailto:ladyexue@163.com
mailto:wqx2008@vip.sina.com
mailto:304854105@qq.com
mailto:yanxq@ncwu.edu.cn
2158 IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020
API-qualified queries based on the preset authorized access and
consensus mechanism of the organization [13], [14]. Studies
on medical consortium chains have been conducted in recent
years [15]–[19]. Health Level Seven (HL7) Fast Healthcare
Interoperability Resources (FHIR) was first proposed in [15]. It
provides a framework for the exchange, integration, sharing, and
retrieval of electronic medical information. On the basis of HL7
FHIR, a shared medical clinical data architecture FHIRChain
based on Ethereum was proposed [16], and data management
and access authorization in a case study of remote cancer care
clinical data sharing were achieved. In [17], it was shown that
smart contracts have broad application prospects in medical
data mining and are expected to benefit patients on the basis of
their personal medical data for research purposes. Following the
above-mentioned studies, a smart contract request model based
on FHIR was proposed [18]. The latest researches of blockchain
in biomedical health care were summarized in [19].
Existing studies on cross-chain communication mainly focus
on asset mapping and asset transaction to reconstruct the value
exchange network of blockchains. Typical cross-chain technolo-
gies for asset transfer are based on hash locking and side chain
technologies [20]–[23], and those for chain state transition are
based on fragmentation technology [24]. With the increasing de-
mand for asset up-chain and cross-chain communication, some
studies have explored the decentralized cross-chain asset man-
agement method based on smart contracts [25]–[27]. However,
the above-mentioned cross-chain communication technology
mainly guarantees the atomicity of asset interaction by means
of electronic cryptocurrency deployment. The logic of routing
general digital assets upstream and asset interaction transaction
is complex, and it cannot be directly applied to the lightweight
cross-chain dynamic autonomous interaction scenario of the
medical consortium chain.
At present, how to enable users to have ownership of their
own medical data and share their medical data safely and dy-
namically between different medical institutions remains an area
of particular concern. On the basis of previous work [27], a
dynamic autonomous cross consortium chain mechanism for
e-Healthcare data sharing based on patient privacy protection is
proposed in this paper. Compared with existing medical record
management methods, the proposed scheme can minimize the
dependence of patients on the record generation mechanism and
enable patients to selectively share their records with specific
users according to their privacy preferences. Thus, the number
of clinical trial records in medical institutions can be increased
and the level of clinical collaboration can be enhanced.
The main contributions of this paper are as follows:
1) We propose cross-chain communication identity credibil-
ity path-proof construction rules based on the life cycle
of the smart contract to achieve dynamic construction and
verification of the interactive path-proof for cross-chain
transactions.
2) We model the consensus of cross-chain transactions as
a threshold digital signature process with multiple priv-
ileged subgroups without increasing the computational
complexity. The intra-chain consortium consensus based
Fig. 1. System model of cross consortium chain in e-Healthcare.
on the verification node list is extended to the cross-chain
consensus.
3) We analyze the deployment and trigger mechanism of the
smart contract cross-chain, and propose the value transfer
and independent interaction mechanism between nodes.
The remainder of this paper is organized as follows. Sec-
tion II describes the communication model between medical
consortium chains and summarizes the main problems of cross-
chain communication. Section III discusses the improvement
of the communication mechanism between medical consortium
chains from three aspects: cross-chain consensus mechanism,
path-proof construction, and value transfer mechanism. Sec-
tion IV proves the safety and effectiveness of the cross-chain
communication mechanism through theoretical analysis and
experimental deployment. Finally, Section V summarizes the
study and explores directions for future work.
II. PROBLEM DESCRIPTION
The system model of cross consortium chain in e-Healthcare
is shown in Fig. 1. In the medical Internet of Things system,
the underlying network collects user health information through
medical monitoring equipment and transmits it to the conver-
gence gateway. The convergence gateway usually has greater
storage, processing, and communication capabilities than the
collection device. Entities such as ordinary users, patients, and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
QIAO et al.: DYNAMIC AUTONOMOUS CROSS CONSORTIUM CHAIN MECHANISM IN e-HEALTHCARE 2159
Fig. 2. Medical consortium chains communication model.
managers of the same medical institutions are common nodes in
the medical consortium chain. Any node in the system can write
its own data as assets to the smart contract through the gateway.
The contract storage file is stored in the consortium blockchain.
When the contract code receives a trigger signal from another
trusted node or the smart contract, it performs corresponding
operations on the storage file. Owing to the independence of the
consortium chains, the data communication and value transfer
between existing consortium chains in e-Healthcare still face
challenges, and the problem of value isolation emerges gradu-
ally. In this paper, we introduce an efficient, secure and dynamic
autonomous cross consortium chain mechanism in e-Healthcare
to build healthcare IoT network to solve the above problems
simultaneously.
The relevant definitions of cross-chain communications are
as follows:
Definition 1: In the P2P communication mode, the consor-
tium chain is denoted as CX , the set of CX is denoted as
{CXi
}(i > 0), the validation node list of CX is denoted as CX ,
and the resource owned by node CXi
is denoted as asset ξCXi
.
The manner in which rational node CXi
uses local asset ξCXi
to
perform operations on message m and only output results that
do not reveal private information is called blind response.
Definition 2: CX is abstracted as a single point. The com-
munication path without relay between any individual points is
denoted as a single-hop path. Further, Δt represents the upper
limit of time at which a node can respond to a single hop
when deploying or executing a smart contract in the medical
consortium chain system.
Definition 3: sig(m,X) represents the signature of the mes-
sage m(m �= φ) with the private key of X , the triple (m, p, σ)
represents the node path-proof, p = {u0, . . . , uk} is the directed
connected path from the request node u0 to the response node
uk, and σ = sig(· · · sig(m,u0), . . . , uk) is the path signature
from u0 to uk. If uk is a relay response node, the path-proof
from u0 to uk is called the current path-proof. If uk is the final
response node, the path-proof from u0 to uk is called the full
path-proof.
The cross-chain communication process is shown in Fig. 2.
Suppose that CA and CB are cooperative consortium chains.
CBj
∈ CB initiates an interactive requestTXBj . request toCAi
∈
CA. The cross-chain communication process consists of six
stages:
1) CBj
(marked with red dots in the right half of Fig. 2)
constructs the identity certificate and the value transfer
keyCBj .s and then writes the description of the interactive
requirements mBj
for the asset ξCAi
, the value transfer
mechanism fromCBj
to CB , and the trading deadline into
the smart contract transaction TXBj . request and deploy it.
2) CB verifies the transaction TXBj . request by the consensus
mechanism proposed in Section III. If the verification
is passed, the path-proof is updated, and the new smart
contract transaction is constructed and deployed to realize
the value transfer between CB and CA; otherwise, the
transaction TXBj . request is ignored.
3) If the path-proof of the transaction is verified and up-
dated by 2), CA verifies the transaction by the consensus
mechanism proposed in Section III. If the verification is
passed, the path-proof is updated and the smart contract
is constructed and deployed to realize the value transfer
between CA andCAi
(marked with red dots in the left half
of Fig. 2); otherwise, the transaction will be ignored.
4) CAi
verifies the transaction whose path-proof is updated
by 3). If Equations (1)–(3) are true, CAi
updates the path-
proof and writes the blind response result Reply(mBj
),
full path-proof, etc., into transaction TXAi.Bj .response and
deploys TXAi.Bj .response. Otherwise, it ignores the trans-
action.
tcurrent ≤ tcontract − deadine −Δt (1)
Request
(
mBj
) ∈ ξCA1
(2)
Path
(
mBj
, p, σ
)
== 1 (3)
5) CBj
verifies smart contract transaction TXAi.Bj .response
from response node CAi
. After passing, CBj
inputs the
hash of the value transfer key CBj .s to the smart con-
tract to extract the query response Reply(mBj
). After
the smart contract executes, it returns the value transfer
key to CAi
. The remaining stages of the value transfer
smart contract are carried out in turn similarly to the
above-mentioned process.
6) CBj
constructs and broadcasts the transaction confir-
mation. Then, CA verifies the confirmation from CBj
and modifies the credit value of the response node CAi
according to the internal incentive strategy.
In the above-mentioned cross-chain communication model,
to achieve cross-chain consensus, it is necessary to establish
a cross-chain consensus mechanism between the cooperating
institutions on the basis of the VNL consensus mechanism. To
dynamically identify a node, it is necessary to construct the path-
proof of the nodes that provides the reliability identity for cross-
chain communication; thus, the behavior of the nodes is limited
to the credibility scope of the mechanism license. In addition,
from the analysis of the honest node cooperation motivation
in the medical consortium chain, it is necessary to propose a
method to deploy the smart contract to realize decentralized,
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
2160 IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020
dynamic, and autonomous transfer of values between the nodes
of different medical consortium chains.
III. ALGORITHM DESIGN
The cross-chain interaction algorithm mainly includes three
parts: threshold-digital-signature-based cross-chain consensus
mechanism (TCCM), path-proof construction (PPC), and value
transfer mechanism (VTM). If a certain stage of the transaction
processing fails, the transaction is ignored. This paper only
analyzes the situation in which each stage of the transaction
processing is passed.
A. Threshold-Digital-Signature-Based Cross-Chain
Consensus Mechanism (TCCM)
In [27], a reputation-based consensus mechanism was pro-
posed as follows: within the consortium blockchain, a part of
the trust nodes is authorized to form VNL. The full-node server
in the system is responsible for maintaining the list, and it
provides all valid actions not recorded before the consensus
to the verification nodes. The system relies on the verification
results of VNL to reach a consensus and complete the block
generation.
Based on the above-mentioned internal consensus of the
consortium chain, TCCM proposed in this paper abstracts the
cooperation between different consortium chains into a thresh-
old digital group signature process and models the consensus be-
tween multiple consortium chains based on VNL for cross-chain
transactions as a threshold digital signature process for multiple
privileged subgroups, thereby expanding the internal consensus
of the consortium chain into a cross-chain consensus among
multiple consortium chains. A formal description of TCCM is
given below.
Definition 4: The set of verification node lists of m consor-
tium chains C1, C2, . . . , Cm that cooperate is recorded as group
C, and the verification node list of each consortium chain is
recorded as m mutually disjoint privileged verification nodes
subgroups (VNS) C1, C2, . . . , Cm in group C. Then, public-
private key pair (SKC , PKC) of group C is generated on the
basis of the privileged subgroup threshold signature mecha-
nism. Thus, the cooperation relationship between the consortium
chains is expressed as:
C = {C1 ‖C2‖ , . . . , ‖Cm, Ci ∩ Cj = φ} , (1 ≤ i, j ≤ m) (4)
|Ci| = ni, (ni > 0) (5)
m∑
i=1
ni = n,m ≥ 1 (6)
ESKCi (TX, ti, ni) =
{
True, if ni ≥ t′i ≥ ti
False, otherwise.
(7)
ESKC (TX, t1, n1; · · · ; tm, nm; t, n) =
⎧⎪⎪⎨
⎪⎪⎩
True, if ni ≥ t′i ≥ ti
&
∑m
i=1
ti ≥ t
False, otherwise
(8)
Fig. 3. Path-proof topology.
In the above-mentioned mechanism,ni represents the number
of nodes of the verification node list in subgroup Ci, ti represents
the minimum number of ni verification nodes in subgroup Ci
required to pass a certain verification, and t′i represents the actual
number ofni verification nodes in subgroup Ci that pass a certain
verification. Further, t represents the minimum number of n
verification nodes in group C required to pass a certain verifica-
tion. Equation (4) defines the cooperation relationship between
consortium chains, while Equations (5) and (6) represent the
scale of the verification nodes of the cooperating consortium
chains. Equation (7) represents the threshold consensus based
on the verification node list in a single consortium chain, and
Equation (8) represents cross-chain consensus based on the
privileged subgroup threshold signature mechanism.
B. Path-Proof Construction (PPC)
The path-proof topology under P2P communication is shown
in Fig. 3. The trusted propagation path is simplified on the basis
of the P2P information forwarding method, and the PPC rules
are as follows:
Rule 1: Under the path-proof topology, abstract the nodes of
VNS as one node in the directed path-proof and correspondingly
abstract the legal threshold subgroup signature (TSS) into one
signature in the path signature.
Rule 2: Simplify the path-proof from one common node of
the consortium chain to the VNS relayed by several common
nodes to the single-hop path-proof from the node to the VNS.
Rule 3: The relay nodes in the cross-chain path-proof be-
tween different consortium chains consist of only VNS nodes.
Rule 4: The single hop in the path-proof among common
nodes represents a blind response based on the value transfer
key s = CBj .s of the node from which the request originates.
The intra-chain path-proof topology is shown in Fig. 3(a).
By Rule 1, the VNS is abstracted into a node in the direc-
tional path-proof. By Rule 2, the path-proof relayed by several
common nodes from node CAk
to the VNS CA is simplified
to the single-hop path-proof from CAk
to CA. The cross-chain
path-proof topology is shown in Fig. 3(b), where CBj
∈ CB ,
CAi
∈ CA, andCA ∩ CB = φ. By Rule 3, the relay nodes in the
cross-chain path-proof from CBj
to CAi
consist of only VNS
{CB , . . . , CX , . . . , CA}.
By Rule 4, the path-proofs in Fig. 3 have loops, and the
path-proof between any two common nodes is a multi-hop path
to be relayed by several VNSs. The single-hop path between
two common nodes (the red arrow in Fig. 3) is a single-hop
response from the response node to the requesting node when
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
QIAO et al.: DYNAMIC AUTONOMOUS CROSS CONSORTIUM CHAIN MECHANISM IN e-HEALTHCARE 2161
Fig. 4. Cross-chain path signature construction time sequence.
the requesting node issues the value transfer key s to the response
node on the basis of the path-proof between the requesting node
and the responding node.
To simplify the description, we assume that there are only
two privileged subgroups in group C. The cross-chain path
signature construction time sequence is shown in Fig. 4. The
cross-chain path-proof group signature protocol is denoted as
(tA, nA; tB , nB ; t, n). The PPC from both intra-chain and cross-
chain is presented below.
Intra-chain PPC. By Definition 3, a recursive path-proof gen-
eration formula based on the threshold signature is proposed:
u0
TX1−−−→ u1 : TX1 = m‖ESKC0 (m, t0, n0) ,
ui
TXi+1−−−−→ ui+1 : TXi+1 = m‖ESKCi (TXi, ti, ni) , i > 0
(9)
(Note: The parameter t, n in Equation (9) is optional and used
for threshold signature.)
In Fig. 4, node CBj
constructs request mBj
for another
consortium node CAi
in a plaintext manner, and the single-hop
path-proof from CBj
to CB is constructed as Equation (10)
according to Rule 2 and Equation (9). Then, a smart contract
transaction TXBj .request is generated and deployed in the con-
sortium chain CB .
CBj
TXBj. request−−−−−−−→ CB : TXBj . request = mBj
‖ESKCBj
(
mBj
)
(10)
CB in CB is to reach a consensus on transaction TXBj .request .
If Equation (7) is true, i.e., the transaction TXBj .request passes
the VNL consensus in CB , then ESKCB (TXBj .request , tB , nB)
calculated by Equation (7) is used as the threshold sub-
group signature of transaction TXBj .request signed by CB .
ESKCB (TXBj .request , tB , nB) and mBj
are written into the
smart contract transaction TX ′
Bj .request by CB according to
Equation (11), and the transaction path-proof is updated.
CB
TX ′
Bj.request−−−−−−−→ C : TX ′
Bj .request
= mBj
‖ESKCB
(
TXBj .request, tB , nB
)
(11)
Cross-chain PPC. In Fig. 4, the path-proof of TX ′
Bj .request is
verified by CA to reach a consensus of TX ′
Bj .request . If Equation
(7) is TRUE, i.e., transaction TX ′
Bj .request passes the internal
consensus of CA, then ESKCA (TX
′
Bj .request , tA, nA) calculated
by Equation (7) is used as the threshold subgroup signature of
transaction TX ′
Bj .request signed by CA. Since the response node
CAi
∈ CA, each threshold subgroup signature in the path-proof
is synthesized by CA with the group key.
The construction of the cross-chain path-proof group sig-
nature includes three parts: group key generation and sharing,
threshold subgroup signature generation, and path-proof update.
Group key generation and sharing. The security prime num-
bers u, v are selected by the key issuing authority, and v|(u− 1)
is satisfied. Then, three polynomials f(x), gA(x), gB(x) are
secretly selected on the finite field Zv , and the powers in order
are (t− 1), (tA − 1), (tB − 1). The primitive element α of the
finite field Zv is selected. Then, (u, v, α) and xi, yAj
, yBk
∈R
Zv, i = 1, 2, . . . , n; j = 1, 2, . . . , nA; k = 1, 2, . . . , nB are dis-
played. The group private key is randomly generated by the
key issuing authority according to Equation (12). Then, the
group public key is calculated according to Equation (13). The
group private key is distributed by a Shamir-based secret sharing
algorithm.
SKc = (f(0) + gA(0) + gB(0)) mod v (12)
PKC = α(f(0)+gA(0)+gB(0)) mod v mod u (13)
The group private key fragment f(xi), gA(yAj
), gB(yBk
) is
secretly assigned to Ci on the basis of the secret sharing algo-
rithm. Then, its public key is calculated and disclosed according
to Equation (14).
PKCi = α
λif(xi)+µi
∑
X gX
(
yXij
)
mod u (14)
Threshold subgroup signature generation. From Equation (5),
the number of nodes of subgroup CX is |CX | = nX , (nX >
0, X ∈ {A,B}) and the threshold number of nodes that pass a
certain verification is tX ∈ nX . The signed transaction is TX .
For each ti ∈ {tX},Ki ∈ Z∗
u is secretly and randomly selected.
The public key segment rXi
is calculated by Equation (15), the
subgroup public key rX is calculated byCi according to Equation
(16), and each verification node private key fragment SXi
is
calculated by Equation (17), where λi, μi are the Lagrangian
coefficients that are publicly calculated in the Shamir secret
sharing algorithm, and h(x) is a safe hash function.
rXi
= αKi mod u, (Ki ∈ Z∗
u) (15)
rX =
tX∏
i=1
rXi
mod u (16)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
2162 IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020
Fig. 5. Value transfer smart contract life cycle.
sXi
=
(
f (xi) λih(TX)+
∑
X
gX
(
yXij
)
μih(TX)−KirX
)
mod v,X ∈ {A,B} (17)
The validity of a single verification node signature sXi
in a
subgroup is verified by Equation (18):
αsXi rrXi = PK
h(TX)
Ci , X ∈ {A,B} (18)
If Equation (18) is true, the VNS accepts the single verification
node signature in the subgroup, and sX is calculated by Equa-
tion (19) when |sXi
| ≥ tX . In Fig. 5, the threshold subgroup
signature (rB , sB) for transaction TX ′
Bj .request is calculated by
CB according to the above-mentioned method. Similarly, since
the response node CAi
∈ CA, the subgroup synthesis signature
(rC , sC) is generated by CA according to Equation (20).
sX = (sX1
+ sX2
+ · · ·+ sXi
) mod v,X ∈ {A,B} (19)⎧⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎩
sC = (sA1
+ sA2
+ · · ·+ s′AtA
+ sB1
+ sB2
+ · · ·+ s′BtB
) mod v,
(nA + nB) ≥ (t′A + t′B) ≥ t, t′A ≥ tA, t
′
B ≥ tB ,
rC =
∏
X rX mod u.
(20)
Path-proof update. After the subgroup signatures are synthe-
sized, the group signature of the transaction TX ′
Bj .request and
mBj
are written into transaction TX ′′
Bj .request by according to
Equation (21). Then, the transaction path-proof is updated.
CA
TX ′′
Bj.request−−−−−−−→ CA : TX ′′
Bj .request
= mBj
‖ESKCA
(
TX ′
Bj .request, tA, nA; tB , nB ; t, n
)
(21)
The response node CAi
verifies the transaction TX ′′
Bj .request .
After it passes, request mBj
is calculated by CAi
using local
asset ξCAi
to generate a blind response CAi.mBj
.response. Then,
the blind response to transaction TX ′′
Bj .request , the updated path-
proof, and mBj
are written into transaction TXAi.Bj .response
according to Equation (22).
CAi
TXAi.Bj.response−−−−−−−−−→ CBj
: TXAi.Bj .response
= mBj
∥∥∥ESKCAi
(
TX ′′
Bj .request
)∥∥∥CAi.mBj
.response (22)
After receiving transaction TXAi.Bj .response, CBj
verifies its
path-proof. If it passes,CBj
sends the value transfer keyCBj .s to
TXAi.Bj .response to trigger the transaction. Then, the transaction
TX ′′
Ai.Bj .feedback containing feedback fromCBj
is generated and
broadcasted similar to that in Equations (10), (11), (21), so that
the institution can motivate the responder.
C. Value Transfer Mechanism (VTM)
Based on a previous study on the reputation incentive mech-
anism [27], the institution sets (i) an integral mechanism for
constraining the value transfer of the smart contract within
the consortium chain and (ii) a heterogeneous integral value
exchange function between different chains. Equal value trans-
formation of heterogeneous assets is achieved by calling this
function in smart contracts. In the consortium chain, the node
public-private key is used as the identifier. When a node enters
the system for the first time, the institution allocates a certain
number of points for starting. In each transaction, the requesting
node needs to deposit a certain number of points in the smart
contract and set the transfer condition as the value incentive.
When the transfer condition is triggered, the point is transferred
irreversibly; accordingly, the request node reduces the deposited
quantity integral and the response node obtains the equivalence
integral. Moreover, as nodes with a score of 0 are unable to
provide incentives, they risk being starved to death without being
responded to for long periods of time. The manner in which value
is transferred cross-chain is described below.
Cross-chain value transfer is realized by deploying smart
contracts. One deployment of smart contracts is called a stage of
inter-chain value transfer. If cross-chain communication smart
contract deployment is divided into k(k > 1) stages, corre-
spondingly, the execution process also has k stages. By Defi-
nition 2, after the previous stage is deployed or executed at least
Δt times, the system reaches a stable state before deploying or
executing the next stage. Otherwise, there will be cases where
the smart contract from the previous stage is not deployed or
not executed, and the latter stage of the smart contract cannot
be executed, causing some node losses. Therefore, a rational
node will deploy and execute the smart contract with Δt as the
minimum time interval:
• If the time of deploying the first stage of the cross-chain
communication smart contract is ttimestamp, accordingly,
the time of smart contract deployment in each stage is
{ttimestamp, ttimestamp +Δt, . . . , ttimestamp + (k − 1)Δt}.
• The smart contract execution order triggered by the value
transfer key is opposite to the deployment order, and the ex-
ecution starting time of the corresponding smart contracts
is ttimestamp + {(2k − 1)Δt, (2k − 2)Δt, . . . , kΔt}.
• The smart contract life cycle with hash lock is {2kΔt,
(2k − 1)Δt, . . . , 2Δt}.
• In systems that require timely communication, such as IoT
smart devices, the effective deadline for smart contracts
in each stage is ttimestamp + {2 kΔt, (2k − 1)Δt, . . . , (k +
1)Δt}.
In Fig. 4, the cross-chain communication value transfer smart
contract deployment is divided into four stages (exclud ing feed-
back incentives). The smart contract life cycle of each stage is
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
QIAO et al.: DYNAMIC AUTONOMOUS CROSS CONSORTIUM CHAIN MECHANISM IN e-HEALTHCARE 2163
Fig. 6. Value transfer smart contract deployment time sequence.
shown in Fig. 5, where the horizontal axis represents the timeline
in Δt and the vertical axis represents the nodes participating in
contract deployment and execution. The red arrow indicates the
smart contract deployment negotiated by the head and tail nodes
of the arrow, and the arrow direction indicates the transfer of the
promised value in the smart contract. The blue arrow indicates
that the corresponding node of the arrow header sends the value
transfer key CBj .s to trigger the execution of the contract at
the corresponding time of the arrow tail. The arrow direction
indicates the direction in which the value in the smart contract is
transferred. After the execution of the smart contract, the value
transfer key is sent to the node indicated by the red dotted arrow
in the form of a return value to trigger the subsequent smart
contract execution. The black bold line represents the smart
contract life cycle with the corresponding node on the vertical
axis as the originating node.
A rational node expects the contract to be executed without
losing its own interests; hence, it tends to trigger the contract
as soon as possible after obtaining the value transfer key and
realize the value transfer. Figs. 6 and 7 show a more detailed
description of the smart contract deployment, triggering, and
execution shown in Fig. 5.
The major process of VTM is as follows:
Step 1: As shown in Fig. 6(a), request node CBj
creates value
transfer key CBj .s, selects one-way anti-collision hash function
H(·), and calculates h = H(CBj .s). CBj
negotiates with CB
to generate a smart contract with hash lock h and time lock
ttimestamp + 8Δt, and it deploys the contract to achieve CBj
to
CB point transfer depositing. If CB sends value transfer key
CBj .s to the smart contract before time ttimestamp + 8Δt and
h = H(CBj .s) is true, then the points deposited in the smart
contract will be irrevocably transferred from CBj
to CB ; if CB
cannot reveal the secret before time ttimestamp + 8Δt, a refund
transaction is executed by CBj
, and the points deposited in the
smart contract will be refunded to CBj
.
Step 2: As shown in Fig. 6(b), after CB confirms that the smart
contract generated in step 1 is deployed stably, CB negotiates
with CA to generate a smart contract with hash lock h and time
Fig. 7. Value transfer smart contract trigger time sequence.
(Note: Solid arrow in the figure indicates that the smart contract has
been deployed, black dotted arrow indicates that the smart contract has
been executed, and red dotted arrow indicates that the smart contract is
being executed.)
lock ttimestamp + 7Δt, as well as the same value as the contract
deployed by Step 1 calculated by the preset heterogeneous value
exchange function between the consortium chains. Then, CB
deploys the smart contract deposited point of CA to achieve
CBj
to CB point transfer depositing. The execution logic of the
smart contract in Step 2, 3, and 4 is similar to that in Step 1 and
will not be described again.
Step 3: As shown in Fig. 6(c), after CA confirms that the smart
contract generated in Step 2 is deployed stably, CA negotiates
with CAi
to generate a smart contract with hash lock h and time
lock ttimestamp + 6Δt, as well as the same value as the contract
deployed by Step 2. Then, it deploys the smart contract to achieve
CA to CAi
point transfer depositing.
Step 4: As shown in Fig. 6(d), afterCAi
confirms that the smart
contract generated in Step 3 is deployed stably, CAi
negotiates
with CBj
to generate a smart contract with hash lock h and time
lock ttimestamp + 5Δt as well as the same value as the contract
deployed by Step 2. Then, it deploys the smart contract to achieve
CAi
to CBj
point transfer depositing.
Step 5: As shown in Fig. 7(a), afterCBj
confirms that the smart
contract generated in Step 4 is deployed stably, CBj
reveals the
value transfer key s to the contract within the validity period
of the contract. Then, the contract is triggered to execute, and
CBj
obtains the assets deposited by CAi
in the contract. After
the contract is executed, s is returned to the smart contract
deployer CAi
.
Step 6: As shown in Fig. 7(b), similarly to Step 5, after CAi
learns s, CAi
reveals s to the contract deployed in Step 3 within
the validity period of the contract. Then, the contract is triggered
to execute, and CAi
obtains the assets deposited by CA in the
contract. After the contract is executed, s is returned to the smart
contract deployer CA.
Step 7: As shown in Fig. 7(c), after CA learns s, CA reveals
s to the contract deployed in Step 2 within the validity period
of the contract. Then, the contract is triggered to execute, and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
2164 IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020
CA obtains the assets deposited by CB in the contract. After
the contract is executed, s is returned to the smart contract
deployer CB .
Step 8: As shown in Fig. 7(d), after CB learns s, CB reveals s
to the contract deployed in Step 1 within the validity period of
the contract. Then, the contract is triggered to execute, and CB
obtains the assets deposited by CBj
in the contract.
Steps 1–8 realize value transfer between different consortium
chains. The smart contract value transfer algorithm is shown
in Algorithm 1. The algorithm is developed according to the
following appointment. The value transfer smart contract only
accepts and verifies the value transfer key provided by the spec-
ified transaction partner, and it only returns the value transfer
key to the node that provides a legal path-proof. Further, the
refund function only accepts and verifies the call from the asset
deployer of the contract.
IV. ANALYSIS AND VERFICATION
A. Performance Analysis
Security analysis. Suppose that there are actually t nodes in
group C that sign transaction TX , and there are at least tA
nodes from CA and tB nodes from CB . Then, Equation (23)
is established.
sC = h(TX)
(
t∑
i=1
f (xi) λi +
tA∑
j=1
gA
(
yAj
)
μi
+
tB∑
k=1
gB (yBk
)μi
)
rC
t∑
i=1
Ki
= h(TX) (f(0) + gA(0) + gB(0))− rC
t∑
i=1
Ki (23)
Therefore, the verification equation, i.e., Equation (24) is
established.
αsCrrCC = PK
h(TX)
C (24)
It can be seen from Equations (23) and (24) that nodes not in
group C cannot participate in or interfere with the above- men-
tioned verification process, the forged non-cooperative cross-
chain communication path-proof will not be verified, and the
system will ignore the corresponding transaction. If the number
of nodes participating in signature in CXi
is less than t, it is
possible to recover gX(0), X ∈ {A,B}, but the component f(0)
cannot be recovered; hence, the group private key cannot be
recovered and verified. If the number of nodes participating in
signature in C is greater than or equal to t and the number of
nodes participating in verification in subgroup CX is less than
tX , it is possible to recover f(0), but the component gX(0)
cannot be recovered; hence, the group private key still cannot
be recovered and verified. Therefore, the threshold group signa-
ture mechanism based on privileged subgroups can realize the
identity validity proof of communication between consortium
chains, thus improves the system security.
Scalability analysis. The cross-chain protocol TCCM based
on PPC (tA, nA; tB , nB ; t, n) can be easily extended to
Algorithm 1: Smart Contract Value Transfer Algorithm.
Input: transaction responder (i.e., asset deployer)
responder, transaction sponsor requester, deployed asset
ξ, path-proof triple (m, p, σ) of responder, value transfer
key s, current time tcurrent.
Output: If the contract is triggered within the validity
period, the contract executes so that the assets deployed in
the contract are transferred to requester and value trigger
key s is returned to responder. Otherwise, responder
calls the refund transaction to return the asset
deployed in the smart contract to responder.
Contract Asset _ transfer {
bool locked; address responder, requester; asset ξ;
unti ttimelock, hhashlock, unit ttimestamp;
Function Deploy(address responder′, requester′;
asset ξ′;
unti t′timelock, h′
hashlock){
responder = responder′; requester = requester′;
ξ = ξ′;
ttimelock = t′timelock; hhashlock = h′
hashlock; locked = true;
}
Function Asset_transfer(unit s; path p; sig σ){
Require(s.sender = requester);
If(tcurrent ≤ ttimelock) ∩ (hhashlock == h(s))∩
isPath(p) ∩ isSig(m, p, σ) ∩(locked == true)
{locked == false;
Transfer asset to requester;
Return s to responder;
}
Else
Halt;
}
Function Refund() {
Require(msg.sender == responder) ∩ (tcurrent >
ttimelock);
If(locked == true)
Transfer asset to responder;
Return;
}
}
multi- privileged subgroup path-proof group signature proto-
col (tA, nA; tB , nB ; · · · ; tX , nX ; t, n) with more consortium
chains participating. The extended method is as follows. In the
protocol establishment stage, |{A,B, . . . ,X}|+ 1 polynomi-
als f(x), gA(x), gB(x), . . . , gX(x) are selected. The extended
group private key and public key calculation equations can be
derived from Equations (12) and (13) as follows:
SK ′
c =
(
f(0) +
X∑
i=A
gi(0)
)
mod v, i ∈ {A,B, . . . ,X}
(25)
PK ′
c = α(f(0)+
∑X
i=A gi(0))mod v mod u (26)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
QIAO et al.: DYNAMIC AUTONOMOUS CROSS CONSORTIUM CHAIN MECHANISM IN e-HEALTHCARE 2165
Fig. 8. Four possible scenarios for value transfer.
In Equations (25) and (26), the node in each privileged
subgroup holds the component f(xi) and the corresponding
component gX(yXj
). The verification process is the same as
that described in Section III.
The directed connected path signature σ = sig(· · · ,
sig(m,u0), . . . , uk) from request node u0 to response node uk
includes the single node signature of u0, uk and some relay
subgroup threshold signatures on the path. In this mechanism,
the reliability of node identity is guaranteed by the consortium
chain VNL subgroup consensus where the single node is located.
Security of the threshold group signature mechanism provides a
security guarantee for cross-chain communication while it limits
the communication to only the cooperated consortium chains.
The system has good scalability.
Game analysis of value transfer. Fig. 8 shows four possible
scenarios for value transfer at nodeCXi
(or CX ) by triggering the
smart contract from the node cooperative game perspective. The
black arrow indicates that the value transfer smart contract has
been deployed and the red arrow indicates that when the inter-
action ends, only the corresponding smart contract is triggered
and its assets are transferred.
In Fig. 8(a), smart contracts corresponding to the inbound and
outbound edges of the node are both not triggered, indicating that
no value is transferred through the node and the balance of the
node has not changed. However, it conflicts with the willingness
of rational nodes to participate and reach an interaction.
In Fig. 8(b), only the smart contract corresponding to the
outbound edge of the node is triggered, and the contract cor-
responding to the inbound edge of the node is not triggered.
Thus, the node suffers losses. Therefore, excluding the complex
situation in which the node is latent in the system and deliber-
ately engages in other types of attacks, rational nodes will not
choose this strategy.
In Fig. 8(c), only the smart contract corresponding to the
inbound edge of the node is triggered, and the contract cor-
responding to the edge of the node is not triggered. Thus, the
assets of the node increase. Hence, if there is no constraint, the
node will select this approach to maximize its own interests.
In Fig. 8(d), smart contracts corresponding to the inbound and
outbound edges of the node are both triggered, and the value of
the node participating in value transfer is conserved. This is the
normal situation that rational nodes would like to achieve. From
the above-mentioned analysis, the best way for rational nodes to
perform selection is shown in Fig. 8(c); however, the reasonable
value transfer strategy between different medical consortium
chains is shown in Fig. 8(d).
In VTM proposed in this paper, the nodes participating in
the cross-chain value transfer include the requesting node, the
responding node, and the relay node. In Fig. 6, when the re-
questing node CBj
observes that its inbound smart contract is
deployed stably by CAi
, CBj
sends the value transfer key CBj .s
to the contract to trigger value transfer. When CAi
observes that
its inbound smart contract is deployed stably by CA, it would
deploy its outbound smart contract, and so on.
The above-mentioned mechanism ensures that the value trans-
fer smart contract between nodes is sequentially deployed within
time ttimestamp + {kΔt, (k − 1)Δt, . . . ,Δt} (here, k = 4). As
shown in Fig. 7, the expiry time of value transfer smart con-
tracts deployed counterclockwise starting from CBj
between
adjacent communication nodes is ttimestamp + {(k + 1)Δt, (k +
2)Δt, . . . , 2kΔt}.
The value transfer game process of nodes on the communica-
tion link fromCBj
toCAi
is analyzed as follows. The initial state
ofCBj
is shown in Fig. 8(a). As a rational transaction requesting
node,CBj
wishes to achieve cross- chain interaction. Therefore,
CBj
will send the value transfer key CBj .s to its inbound smart
contract before its expiry time to trigger value transfer. CBj
will
temporarily enter the state in Fig. 8(c), and the value transfer
key will be returned to CAi
after the smart contract is executed.
Then, CAi
will temporarily enter the state shown in Fig. 8(b).
As CAi
is rational, once it obtains the value transfer key, it
will send the key to its incoming edge smart contract during
its lifetime and convert its state to that shown in Fig. 8(d). After
the smart contract is executed, the value transfer key is returned
to CA. Similarly, the state of CA, CB is finally converted from
that shown in Fig. 8(b) to that shown in Fig. 8(d), and the state
ofCBj
is converted from that shown in Fig. 8(c) to that shown in
Fig. 8(d) by triggering the incoming edge smart contract during
the validity period.
It can be seen from the above-mentioned analysis that VTM
proposed in this paper can ensure value transfer between dif-
ferent medical consortium chains by the deployment of smart
contracts. If all the parties involved comply with the mechanism
proposed in this paper, cross-chain value interaction can be
achieved by triggering the smart contract. If there is a node that
violates the mechanism, only that node will suffer.
B. Experimental Deployment
To test the feasibility and performance of TCCM based on
PPC proposed in this paper, we built an Ethereum simulation
test environment consisting of 230 virtual verification nodes on
five servers. The experimental platform is as follows: CPU, Intel
Xeon E5; memory size, 64 GB; operating system, Ubuntu 64-bit.
The consensus process consists of four parts: node key gener-
ation, key reconstruction calculation, consensus signature, and
consensus signature verification. The node key generation is
obtained by pre-calculation between nodes; hence, it does not
add to the network delay. The actual network delay is mainly
affected by key reconstruction calculation, consensus signature,
and consensus signature verification. Therefore, the network
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
2166 IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020
Fig. 9. Single-chain performance test.
latency calculation method is to sum the time costs of these
three parts.
Single-chain performance. In a single-chain environment, the
number of verification nodesn = 230, and the system constructs
transactions at intervals of 10 ms. When threshold t takes differ-
ent values in the interval [10,100] with a step size of 10, and the
number of transactions in a single consensus takes τ = 1, 20, 30,
the average network delay of individual transaction varies with
the threshold as shown in Fig. 9(a). It can be seen that (i) the
network delay increases significantly when t ∈ (50, 100] and (ii)
increasing the number of transactions in a single consensus is
beneficial for improving the system throughput. However, it will
result in an increase in the average network delay for individual
transactions. Therefore, by taking t = 20 and t = 50 separately,
the network delay variation is tested when the total number of
verification nodes n varies in the interval [50,230] with a step
size of 20. The results are shown in Fig. 9(b). It can be seen
that the network delay fluctuates with n but is basically stable.
Thus, the network delay is not affected by n significantly but it
is mainly affected by t.
Cross-chain performance. We constructed two consortium
chains with n = 230, nA = nB = n/2, tA = tB = t/2 to com-
pare the performance of the chains. When t = 30, t = 50, t =
70, and threshold tB takes different values in the interval [5,45]
with a step size of 5, the actual cross-chain network delay varies
with the threshold as shown in Fig. 10(a). It can be seen that when
the group threshold t is fixed, as the subgroup threshold value
changes, inter-chain network delay occurs regularly. Multiple
tests show that the network delay is smaller and the performance
is better when tX → t/m (X ∈ {A,B, . . .},m > 1,m is the
number of cooperative consortium chains).
Fig. 10. Cross-chain performance test.
The test result of inter-chain communication delay when the
VNLs of all consortium chains have the same scale and the priv-
ileged subgroups have the same rights is presented above. From
the result in Section IV of the single-chain performance test, the
network delay is not significantly affected by VNL numbern but
it is mainly affected by the threshold t. Thus, it can be concluded
that when the scales of the consortium VNL are different, and
the group threshold tX → t/m (X ∈ {A,B, . . .},m > 1), the
inter-chain communication still achieves better performance.
Consider a situation of unequal rights between the partners of
the consortium chains in an actual application scenario. Hence,
tA is fixed while tB varies, and the system is tested when tA +
tB > t. Reset the parameters of the above-mentioned
consortium chains :n = 100, t = 50, nA = nB = 50, tA =
25. The network delay is tested when tB varies in the interval
[25,45] with a step size of 5; then, the experiment is repeated
when n = 230. The results are shown in Fig. 10(b). In this sce-
nario, as tB increases, the cross-chain network latency fluctuates
to some extent, but the general trend is to increase. Therefore, it
can be concluded that on the basis of the equal rights between
the consortium chain partners, privilege escalation of one chain
will increase the network delay between the chains. However,
the increase in the number of verification nodes has no obvious
effect on the network delay.
Smart contract deployment and execution. In the above-
mentioned simulation test environment, lightweight smart con-
tracts are constructed according to Algorithm 1, and a complete
cross-chain interaction is realized by deploying 8-stage smart
contracts with the hash lock function SHA 256. According to
the communication performance test results presented above,
the upper limit of the response time Δt between nodes is set to
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
QIAO et al.: DYNAMIC AUTONOMOUS CROSS CONSORTIUM CHAIN MECHANISM IN e-HEALTHCARE 2167
Fig. 11. 4-Stage smart contracts deployment delay.
Fig. 12. 4-Stage smart contracts execution delay.
160 ms. For threshold values t = tA + tB , tA = tB , the number
of verification nodes takes different values of n = 100 and
n = 200, which are tested separately, the result of 4-stage smart
contracts deployment delay is shown in Fig. 11.
The above-mentioned 4-stage smart contracts deployment
delay is mainly due to three factors: the intra-chain consensus,
the cross-chain consensus, and the upper limit of the response
time Δt of the nodes to the contract deployment. As can be
seen from Fig. 11, under the assumption that the upper response
intervalΔt of the nodes to the contract deployment is a constant,
(i) the network delay increases with the threshold value when
the number of verification nodes is n = 100 and n = 200, and
(ii) if the threshold value of the consensus mechanism is a
constant, increasing the number of verification nodes can reduce
the network delay in a certain range.
Under the two test cases n = 100 and n = 200, the execution
delay of the 4-stage contracts are tested separately. After the
smart contracts are deployed in each stage, the value transfer key
is revealed by the node from which the request originates to the
smart contract deployed in the fourth stage. Then, the remaining
stages of the contracts are triggered in turn. The 4-stage smart
contracts execution delay is shown in Fig. 12. It can be seen
from the graph that with the increase in the consensus threshold
value, the execution process network delay of the 4-stage smart
contracts presents a change similar to its deployment process.
However, there is a slight increase in the execution process
network delay of the 4-stage smart contracts in comparison with
its deployment process network delay. This is mainly because
in addition to the delay caused by the consensus within and
between the chains, the 4-stage contracts execution delay is also
affected by the calculation of the function SHA 256 and the
actual response delay of nodes on the communication path.
In the proposed cross-chain interaction mechanism, a com-
plete cross-chain interaction network delay includes the above-
mentioned 4-stage smart contracts deployment delay and its
execution delay, which is mainly affected by the consensus
threshold value and the upper limit of the response time Δt of
nodes to the contract deployment and execution. Nevertheless,
under the existing terminal computing capacity, the hash opera-
tion for value transfer locking brings a shorter delay. Therefore,
the proposed scheme facilitates the use of the unidirectivity of
the high-security hash algorithm to guarantee reliability of the
value transfer between multi-stage smart contracts. In addition,
a complete cross-chain interaction takes place within seconds
in the test environment, which basically meets the response
requirements between medical consortium chains.
V. CONCLUSION
Consortium chains have considerable potential for medical
applications. To optimize the collaboration between heteroge-
neous medical consortium chains, we improved the dynamic
autonomous interaction cross-chain from three aspects: TCCM,
PPC, and VTM. Based on the consensus mechanism VNL
within consortium chain, consensus between multiple cooper-
ative medical consortium chains was modeled as a threshold
digital signature process with multiple privileged subgroups. By
simplifying the P2P communication topology, the PPC rules and
the recursive path-proof generation formula based on the thresh-
old signature were proposed to construct the cross-chain node
identity credibility proof. We analyzed the deployment and exe-
cution time sequence of the smart contract from the perspective
of the node cooperative game, determined the best way for value
transfer of rational nodes, and proposed the life cycle of the smart
contract with hash locking. Experimental results showed that the
proposed scheme can achieve autonomous dynamic cross-chain
interaction within a tolerable network delay on the basis of
satisfying data privacy and security requirements. However, our
experiment was carried out under the condition that the scale of
the consortium chain was limited, the actual performance and the
cost of building a system is unclear. Its promotion requires med-
ical institutions, governments, and other relevant departments
to invest heavily in storage and management standards, policy
formulation, and infrastructure construction of medical data.
REFERENCES
[1] L. Sweeney, “Simple demographics often identify people uniquely,”
Health (San Francisco), vol. 671, pp. 1–34, 2000.
[2] D. Munro, “Data breaches in healthcare totaled over 112 million records in
2015. [Online]. Available: https://www.forbes.com/sites/danmunro/2015/
12/31/data
[3] K. Singh and L. Batten, “Aggregating privatized medical data for secure
querying applications,” Future Gener. Comput. Syst., vol. 7, no. 72,
pp. 250–263, 2017.
[4] F. Jabeen et al., “Enhanced architecture for privacy preserving data
integration in a medical research environment,” IEEE Access, vol. 5,
pp. 13308–13326, 2017.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
https://www.forbes.com/sites/danmunro/2015/12/31/data
2168 IEEE JOURNAL OF BIOMEDICAL AND HEALTH INFORMATICS, VOL. 24, NO. 8, AUGUST 2020
[5] H. A. Al Hamid, S. M. M. Rahman, M. S. Hossain, A. Almogren, and A.
Alamri, “A security model for preserving the privacy of medical big data
in a healthcare cloud using a fog computing facility with pairing-based
cryptography,” IEEE Access, vol. 5, pp. 22313–22328, 2017.
[6] H. Arshad and A. Rasoolzadegan, “Design of a secure authentication
and key agreement scheme preserving user privacy usable in telecare
medicine information systems,” J. Med. Syst., vol. 40, no. 11, p. 237,
2016.
[7] K. Abouelmehdi, A. Beni-Hessane, and H. Khaloufi, “Big healthcare data:
Preserving security and privacy,” J. Big Data, vol. 5, no. 1, pp. 1–5, 2018.
[8] G. Zyskind and O. Nathan, “Decentralizing privacy: Using blockchain to
protect personal data,” in Proc. IEEE Secur. Privacy Workshops, 2015,
pp. 180–184.
[9] K. WÃijst and A. Gervais, “Do you need a blockchain?” in Proc. Crypto
Valley Conf. Blockchain Technol., 2018, pp. 45–54.
[10] E. Zaghloul, T. Li, and J.Ren, “Security and privacy of electronic health
records: Decentralized and hierarchical data sharing using smart con-
tracts,” in Proc. Int. Conf. Comput., Netw. Commun., 2019, pp. 375–379.
[11] G. G. Dagher, J. Mohler, M. Milojkovic, and P. B. Marella, “Ancile:
Privacy-preserving framework for access control and interoperability of
electronic health records using blockchain technology,” Sustain. Cities
Soc., vol. 39, pp. 283–297, 2018.
[12] R. Guo, H. Shi, Q. Zhao, and D. Zheng, “Secure attribute-based
signature scheme with multiple authorities for blockchain in elec-
tronic health records systems,” IEEE Access, vol. 6, pp. 11676–11686,
2018.
[13] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “An overview of
blockchain technology: Architecture, consensus, and future trends,” Proc.
IEEE Int. Congr. Big Data, 2017, pp. 557–564.
[14] H. Wang, Z. Zheng, S. Xie, and H. N. Dai, “Blockchain challenges and
opportunities: A survey,” Int. J. Web Grid Services, vol. 14, no. 4, pp. 352–
375, 2018.
[15] D. Bender and K. Sartipi, “HL7 FHIR: An agile and restful approach to
healthcare information exchange,” in Proc. 26th IEEE Int. Symp. Comput.-
Based Med. Syst., 2013, pp. 326–331.
[16] P. Zhang, J. White, D. C. Schmidt, G. Lenz, and S. T. Rosenbloom,
“FHIRChain: Applying blockchain to securely and scalably share clinical
data,” Comput. Structural Biotechnol. J., vol. 16, pp. 267–278, 2018.
[17] PhUSE Emerging Trends & Technology, “How blockchain can transform
the pharmaceutical and healthcare industries,” 2018. [Online]. Available:
https://www.phuse.eu/documents/working-groups/deliverables/phuse-
blockchain-white-paper-version-10-final-18719.pdf
[18] M. Li, L. Xia, and O. Seneviratne, “Leveraging standards based ontolog-
ical concepts in distributed ledgers: A healthcare smart contract exam-
ple,” in Proc. IEEE Int. Conf. Decentralized Appl. Infrastructures, 2019,
pp. 152–157.
[19] T. T. Kuo, H. E. Kim, and L. Ohno-Machado, “Blockchain distributed
ledger technologies for biomedical and health care applications,” J. Amer.
Med. Inform. Assoc., vol. 24, no. 6, pp. 1211–1220, 2017.
[20] J. Poon and T. Dryja, “The bitcoin lightning network: Scalable off-chain
instant payments,” 2016. [Online]. Available: https://lightning. network/
lightning-network-paper.Pdf
[21] D. Piatkivskyi, S. Axelsson, and M. Nowostawski, “Digital forensic im-
plications of collusion attacks on the lightning network,” in Proc. IFIP Int.
Conf. Digit. Forensics, 2017, pp. 133–147.
[22] BlockStream 2014. [Online]. Available: https://blockstream.com/
[23] A. Back et al., “Enabling blockchain innovations with pegged sidechains,”
2014. [Online]. Available: http: //www. opensciencereview.com/papers/
123/enablingblockchain-innovations-with -pegged-sidechain-s
[24] V. Buterin, “Ethereum sharding faq,” 2018. [Online]. Available: https:
//git hub.com/ethereum/wiki/wiki/Sharding-FAQs
[25] V. Buterin, “A next-generation smart contract and decentralized ap-
plication platform,” 2014. [Online]. Available: https://cryptorating.eu/
whitepapers/Ethereum/Ethereum_white_paper.pdf
[26] Y. Zhang, S. Kasahara, Y. Shen, X. Jiang, and J. Wan, “Smart contract-
based access control for the Internet of Things,” IEEE Internet Things J.,
vol. 6, no. 2, pp. 1594–1605, Apr. 2019.
[27] R. Qiao, S. Zhu, Q. Wang, and J. Qin, “Optimization of dynamic data trace-
ability mechanism in Internet of Things based on consortium blockchain,”
Int. J. Distrib. Sensor Netw., vol. 14, no. 12, pp. 1–15, 2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:33:32 UTC from IEEE Xplore.  Restrictions apply. 
https://www.phuse.eu/documents/working-groups/deliverables/phuse-blockchain-white-paper-version-10-final-18719.pdf
https://lightning. ignorespaces network/lightning-network-paper.Pdf
https://blockstream.com/
http: ignorespaces //www. ignorespaces opensciencereview.com/papers/123/enablingblockchain-innovations-with ignorespaces -pegged-sidechain-s
https://git ignorespaces hub.com/ethereum/wiki/wiki/Sharding-FAQs
https://cryptorating.eu/ ignorespaces whitepapers/Ethereum/Ethereum_white_paper.pdf
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice