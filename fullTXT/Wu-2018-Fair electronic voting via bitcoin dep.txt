Fair Electronic Voting via Bitcoin Deposits
Fair Electronic Voting via Bitcoin Deposits
Xijuan Wu1,2,3(&), Baodian Wei1,2,3, Haibo Tian1,2,3, Yusong Du1,2,3,
and Xiao Ma1,2,3
1 School of Data and Computer Science,
Sun Yat-sen University, Guangzhou, China
wuxj5@mail2.sysu.edu.cn
2 Guangdong Key Laboratory of Information Security Technology,
Guangzhou, China
3 Chongqing Key Lab of Computer Network and Communication Technology,
Chongqing, China
Abstract. Bitcoin is the most popular decentralized digital currency now in use.
Block chain is the basic technology of Bitcoin, providing a trustable ledger that
can be publicly verified. Research on distributed applications based on block
chain has become a new trend. We propose an electronic voting scheme based on
block chain and prime numbers, which can support voting situations for multiple
candidates. We design protocols for the Bitcoin voting situation, in which there
are n voters and k candidates. Each voter will vote for one candidate. The
proposed protocols could guarantee that the candidate who gets the majority
voting wins the game and no individual voting information is disclosed. Due to
the nature of the block chain, the voting results could not be tampered. It is
transparent since the block chain is open to the public for verification.
Keywords: Bitcoin � Blockchain � Electronic voting � Deposit
1 Introduction
With the rapid development of the current communication network, a variety of net-
work services have been widely used in our daily life and work. Electronic voting is a
substitute for the traditional way of voting network services. The electronic voting
system provides a more simple and efficient way for voting organizations and voters to
participate in the voting process. There have been many electronic voting systems
being used to meet diverse needs in real life. In this work, we describe how to use
blockchain to implement an anonymous, secure electronic voting system.
1.1 Related Works
Neumann proposed the principle of electronic voting, including the following [1]:
– system integrity
– data integrity and reliability
– voter anonymity and data confidentiality
– operator authentication
© Springer Nature Singapore Pte Ltd. 2018
H. Yuan et al. (Eds.): GSKI 2017, CCIS 849, pp. 650–661, 2018.
https://doi.org/10.1007/978-981-13-0896-3_64
http://crossmark.crossref.org/dialog/?doi=10.1007/978-981-13-0896-3_64&amp;domain=pdf
http://crossmark.crossref.org/dialog/?doi=10.1007/978-981-13-0896-3_64&amp;domain=pdf
http://crossmark.crossref.org/dialog/?doi=10.1007/978-981-13-0896-3_64&amp;domain=pdf
The blind signature [2, 3], Mixnet [4–6] and homomorphic encryption [7–9] are the
mainstream building blocks for electronic voting. A blind signature is a cryptographic
protocol used to verify the identity of a voter, without disclosing the voting content.
Mixnets use encryption and replacement to disrupt the correspondence between voters
and their ballots through anonymous channels to ensure the confidentiality of ballot
information. The homomorphic encryption makes use of the homology of the public
key cryptosystem. The voting results can be easily obtained without decrypting every
single ballot to achieve the confidentiality of votes.
There have been new methods of e-voting using block chain, such as Fol-
lowMyVote [10] and TIVI [11]. They use the block chain as a ballot box to store voting
data and a trusted third party to guarantee the privacy of voters. In FollowMyVote, the
trusted third party blurs the correspondence between the voter’s identity and the voting
key. In TIVI, the encrypted votes must be shuffled before decrypting and counting
through the trusted third party. Trusted third parties are most likely to be attacked and
difficult to defend. In our work, we use Blockchain as a trustable global database to
store voting data without a trusted third party.
The Bitcoin protocol has inspired many research topics since its launch in 2008
[12]. Fairness, validation and privacy are usually the most interesting issues in these
studies. The Bitcoin system provides a natural way to implement the “fair compen-
sation” concept. Bentov and Kumaresan formalize the “Claim-or-Refund” pattern in a
universal composable model [13]. This mechanism allows the protocol parties to reveal
their secrets one by one so that the first party who deviates from the protocol must
compensate the parties who have honestly revealed their secrets. Andrychowicz et al.
propose a new timed-commitment mechanism to achieve fairness, which is designed to
enforce the commitment made by each party that he will pay other parties a certain
amount, unless he (publicly) reveals a certain secret before a certain time [14]. The
timed-commitment mechanism is extended for multiple-parties to reveal their secrets
together in [15]. Andrychowicz et al. further give a “Simultaneous-Timed-
Commitment” pattern to provide mutual fairness [16]. However, Bitcoin’s scalability
problem makes it temporarily unable to support large-scale voting data. Therefore, the
scene we studied was some small-scale voting, like a boardroom voting.
Zhao et al. use both patterns to design voting protocols in [17]. They include two
components. One is the vote commitment. The other is the vote casting. They use the
“Simultaneous-Timed-Commitment” pattern as “Joint Transaction” and designed
protocols for the Bitcoin-based voting. There are n voters in the voting scheme, each of
which wishes to fund exactly one of two candidates A and B. The candidate who is
funded more will win. The scheme is suitable for the situation when there are only two
candidates. Following this framework, we propose a voting scheme based on block
chain and prime numbers, which can support voting situations for more candidates.
Fair Electronic Voting via Bitcoin Deposits 651
2 Preliminaries
In this section, we introduce notation and cryptographic primitives used in subsequent
sections, including Bitcoin & Blockchain, threshold signature scheme, commitment
scheme and zero-knowledge proof. It should be noted that we only describe the nec-
essary content, not a complete introduction.
2.1 Bitcoin and Blockchain
Bitcoin is a decentralized cryptocurrency and a payment system [12]. The concept of
virtual currency Bitcoin was originally proposed by Satoshi Nakamoto in 2008, which
is now also used to refer to Bitcoin’s open source software on the P2P network.
Blockchain is the basic technology of Bitcoin, providing a trustable ledger that can be
publicly verified and could not be tampered. The money is transferred directly between
two parties without a trusted third party. Bitcoin currency system consists of addresses
and transactions between them.
Bitcoin Addresses. A Bitcoin address is simply a public key pk, technically the hash
ofpk. Bitcoin user is associated with the public-private key pairs (sk, pk). Then
Sigsk(m) represents a signature on the message m computed with sk and Verpk(m, r)
represents the result (true or false) of the verification of a signature r on message
m with respect to the public key pk.
Bitcoin Transactions. A Bitcoin transaction has some inputs, outputs and an optional
locktime. We follow the work in [16] to denote a Bitcoin transaction in diagram
notation. In Fig. 1, user A associated with key pair (pkA, skA) wants to transfer 10
Bitcoin to user B associated with key pair (pkB, skB). They generate two transactions T
A
and TB respectively. The transaction id TxID is the hash of the transaction’s contents.
Each input contains a reference to a previous transaction and an input-script. Each
output contains a transferred value and an output-script. Input and output scripts are
used to check the validity of the transactions. An output-script serves as a validation
algorithm and input-script is a signature, serving as the parameter of the output script in
the previous transaction. Figure 1 shows transactions between A and B. The output
script VerpkB (r) inside TA transaction indicates that the money is given to user B.
User B can create TB transaction with input script SigskB ([TB]) to provide his own
signature and if verified, user B can get 10 Bitcoin. A transaction can also have a
locktime t, meaning that it is valid only if time t is reached.
2.2 Threshold Signature Scheme
As defined in the Encyclopedia of Cryptography and Security, a (t, n)-threshold sig-
nature scheme is a digital signature scheme where any tor more signers of a group of
n signers can produce signature on behalf of the group [18]. No less than t group
members can do so. In general, we generate a private signing key and a public verifying
key for everyone, a private group key and a public group key for the trusted group
authority. We have also an operation for signing messages and an operation for veri-
fying signatures against a public group key. It is common to share a private group key
652 X. Wu et al.
among all the members, employing the technique of a secret sharing scheme. The
private pairs are then used to produce partial signatures which are further combined by
the trusted group center to get the threshold signature verifiable against the public
verifying key of the group.
2.3 Commitment Scheme
Making a commitment simply means that the player in the agreement can choose a
value from some (limited) set and promise his choice so that he can no longer change
his mind. However, he does not have to reveal his choice - although he may later
choose to do so.
The commitment scheme includes two phases, the committing phase and the
opening phase. In the committing phase, the sender generates commitment (c,
k) ← Commit(m)for the secret value m, where k is the opening key. Commitment c is
sent to the receiver, while m and k remain secret. In the opening phase, the sender
reveals k to the receiver, so the receiver gets the original secret value m ← Open(c, k).
If the pair (c, k) is considered to be invalid, Open(c, k) will return ⊥. There are two
basic properties of this scheme, which are essential to any commitment scheme:
– binding property: After making a commitment, the sender can no longer change the
content of the commitment. So, when the commitment is opened, we know that the
revealed content is the original choice of the sender.
– hiding property: When the receiver gets a commitment, he could not tell what is
inside before receiving the corresponding opening key.
2.4 Zero-Knowledge Proof
We use the definition for zk_SNARKS (zero-knowledge Succinct Non-Interactive
Argument of Knowledge) from [19]. It proves a statement such as “there exists w such
that z = F(x, w)” without revealing the corresponding witness w.
Consider a Boolean circuit C: {0,1}n � {0,1}h! {0,1}, a binary relation RC = {(x,
w)2{0,1}n{0,1}h:C(x, w) = 1}, and its language LC = {x2{0,1}n: 9 w, C(x, w) = 1}.
For every x2LC, w is a witness for x such that C(x, w) = 1. Zero-knowledge proof
allows a party to convince others that he knows a secret witness w such that C(x,
w) = 1, where x is publicly known by all parties and w is remained secret. We can
informally summarize zk_SNARKS as a triple (G, P, V):
Fig. 1. Transactions TA and TB between A and B
Fair Electronic Voting via Bitcoin Deposits 653
– Generator G: (1k, C) ! (pk, vk). The security parameter 1k and the Boolean circuit
C are taken as inputs, and G outputs a proving key pk and a verification key vk.
These two keys are publicly known and can be used any number of times.
– Prover P: (pk, x, w) ! g. The proving key pk, x2LC and a corresponding witness
w are taken as inputs, and P outputs a proof g.
– Verifier V : ðvk; x; gÞ ! 0; 1f g. The verification key vk, x and a corresponding
proof g are taken as inputs, and V outputs 1 if x2LC.
In short, zero-knowledge-proofs is used to allow one party to prove the correctness
of a statement to another party, without revealing additional information. Furthermore,
the use of zk_SNARKS in this work is to guarantee that the votes and the random
numbers that voters generate are valid, without revealing the specific voting
information.
3 Models for Electronic Voting Schemes Based on Bitcoin
System
The participants of the system are an organization Org, n voters V1,…, Vn, k candidates
C1, …, Ck, and the public ledge blockchain. Voters vote for candidates through
blockchain transactions. The model consists of the following four stages: Set-up,
Vote-commitment, Vote-casting, Vote-auditing.
Set-Up. This stage declares the participants of the system and the resources they have,
as well as the pre-interaction process between the participants. Each Vi registers his
own ID to Org. Org verifies their identity and issue ballots, and then publish a list of
valid voters and candidates.
Vote-Commitment. In this stage, each Vi makes a commitment to his ballot to ensure
that the ballot is valid and lawful.
Vote-Casting. This stage is achieved through the Bitcoin transactions, including
paying the deposit, claiming the votes, and finally redeeming the deposit. For each Vi
that is dishonest, his deposit will be used for compensation.
Vote-Auditing. After every Vi has revealed his ballot, anyone can count the votes and
get the winning candidate.
4 The Proposed Voting Scheme
We propose a voting scheme based on blockchain transactions and prime numbers,
which can support voting situations for multiple candidates. It consists of four stages
and will be described in detail as follow.
654 X. Wu et al.
4.1 Set-Up
Suppose there are n voters V1, …, Vn, k candidates C1, …, Ck. At the registration stage,
each voter is required to register at the organization, presenting proof of identity and
providing its own voting address (the hash of Bitcoin public key). The organization
maintains a list of valid voters and their corresponding voting addresses, as shown in
Table 1.
The organization publishes all valid voter polling addresses so that everyone can
verify the validity of each vote. Then the organization assigns a different small odd
prime number to each candidate from the set P, e.g. {3, 5, 7, 11,…}. Suppose m is the
maximum number in P, we define a parameter M, which is the smallest number greater
than mn and is the power of 2. Then the list of the candidates with their corresponding
prime numbers and Bitcoin addresses is published and the candidate is associated with
the only prime number. In this way, voting for different candidates can be done by
choosing different prime numbers, as shown in Table 2.
4.2 Vote-Commitment
Each voter Vi has a private vote Oi 2 {3, 5, 7, …}, Oi is the prime number associated
with the selected candidate. Vi and other voters apply the voting commitment protocol
to generate Ri. He commits to Ri and mask the vote bOi :¼ Ri � Oi. After all the voters
revealing their bOi’s, the outcome could be calculated, and the winner is determined.
Each voter has proving and verification keys for zk_SNARKS. For each i 2 {1, …, n},
the procedure for Vi is as follows.
1. Generate n secret random numbers rij2ZM, for j2{1, …, n}, such that their product
equals 1 (mod M). This is done by generating n-1 random numbers and derives the
last. Check therij to ensure that the prime factor of the candidate is not included.
2. For j 2 {1, …, n}, commit (cij, kij) ← Commit(rij) where kij is the opening key to
the commitment cij.
Table 1. Voting addresses of voters
Voter Voting address
Alice 1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV
Bob 1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK
… …
Table 2. Prime numbers and addresses of candidates
Candidate Prime Address
A 3 1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA
B 5 1hvzSofGwT8cjb8JU7nBsCSfEVQX5u9CL
… … …
Fair Electronic Voting via Bitcoin Deposits 655
3. Generate zero-knowledge proofs that shows
Q
j rij ¼ 1ðmodMÞ using the
zk_SNARKS.
4. Broadcast the commitments and zero-knowledge proofs to all other voters.
5. Receive commitments and verify the zero-knowledge proofs from all other voters.
6. For all j 2 {1, …, n}\{i}, send to Vj the opening key kij via the secret channel.
7. For all j 2 {1,…, n}\{i}, on receiving the opening key kji fromVj, check that rji= Open
(cji, kji) 6¼ ⊥.
8. Compute Ri  
Q
j rji and bOi  Ri � Oi, and commit (Ci, Ki) ← Commit(Ri) and
ðbCi; bKiÞ  CommitðbOiÞ, where Ki, bKi are the corresponding opening keys
respectively.
9. Broadcast the commitment Ci and bCi publicly.
10. Generate and broadcast publicly the zero-knowledge proofs for the following
statements using the zk_SNARKS:
(a) Ri: =
Q
j rji(mod M).
(b) The quotient of the committed value in bCi to that in Ci is a prime number that
appears in the specified prime set.
11. Receive and verify all proofs from other voters.
4.3 Vote-Casting
Figure 2 shows the overall voting transaction scheme of the Vote-casting and
Vote-auditing phase.
Each voter Vi needs (1 + d) Bitcoin, 1 Bitcoin is to be paid to the winning can-
didate; d Bitcoin is for deposit. We suppose d : = n – 1 and if someone is dishonest,
his deposit will be taken away by other n – 1 participants as compensation.
The timed-commitment technique can be used to handle the deposit and com-
pensation. The protocol can guarantee that:
– If a voter reveals his masked vote, he can get back the deposit d Bitcoin.
– If every voter reveals his masked vote, the product
Q
i
bO i determines the winner
who receives n Bitcoin.
Fig. 2. The voting transaction scheme
656 X. Wu et al.
– If at least one voter does not reveal his masked vote, the n Bitcoin originally
intended for the winner will be redeemed by all voters. For each voter that does not
reveal his masked vote, his deposit will be used for compensation.
The complete procedure for Vote-casting protocol is as follows.
1. Key Setup. In this phase a ð n
2
� �þ 1; nÞ threshold signature scheme is required. It is
assumed that at least half of the voters are honest. The n voters jointly generate a
group address such that voter Vi learns the group public key cpk and his share bski of
the private key. (pki, ski) denotes the address of Vi in the Bitcoin system.
2. Check Input. For each i, Vi broadcasts a transaction TVi with (1 + d) Bitcoin. And
Vi receives transactions of all other voters and checks whether each transaction has
at least (1 + d) Bitcoin unspent.
3. JOIN Transaction. Suppose t1, t2 are times far enough in the future and t1 < t2.
Each voter runs the following protocol:
(a) Each voter generates the same simplified transaction JOIN (as shown in Fig. 3)
as follows. It has n inputs, each of which refers to (1 + d)Bitcoin from TVi.
And it has n + 1 outputs:
– out-depositi, i2{1, …, n}: each has value d Bitcoin, and requires either
(1) the opening key bK i and a signature verifiable with Vi’s public key pki,
or (2) a valid signature verifiable with the group’s public key cpk , to get the
d Bitcoin deposit.
– out-winner: has value n Bitcoin, and requires either (1) all opening keys
bKis and a signature verifiable with the winning candidate’s public key pkw,
where the output script includes expressions to identify a winner, or (2) a
valid signature verifiable with the group’s public key cpk .
(b) The voters jointly sign JOIN using their own private key skis. There are n signatures
to be created.
(c) Each voter generates, for each i2{1, …, n}, the same simplified transaction PAYi
with timelock t2 whose input refers to out-depositi. The PAYi transaction is signed
under their threshold signature scheme. The output script of PAYi could share Vi’s
deposit between other honest voters.
Fig. 3. JOIN transaction
Fair Electronic Voting via Bitcoin Deposits 657
(d) Each voter Vi verifies that the above steps have been completed, and submit JOIN to
the Bitcoin system.
(e) if JOIN has not appeared on the blockchain, say by time t1, any voter Vi can
terminate the whole protocol by submitting a transaction to get back (1 + d)
Bitcoin.
4.4 Vote-Auditing
As shown in Fig. 4, after JOIN appears on the blockchain, each voter Vi can collect his
deposit d Bitcoin by submitting a CLAIMi transaction that provides the opening key bKi
to reveal his masked vote bOi (If one voter Vj does not reveal his masked vote after
timelock t2, other voters can submit PAYj transaction to redeem his deposit for com-
pensation). If all voters have submitted their transactions CLAIMis, f ðbO1; . . .; bOnÞ in
the output script can be computed. Divide the product of all bOi by the unique prime
number corresponds to each candidate until it could not be divisible, finally we can get
the power which is the number of votes he wins. The function f returns the public key
pkw of the winner, so the winning candidate is determined and can redeem n Bitcoin
from out-winner with his signature through a Winner transaction. If at least one voter
does not reveal his masked vote, the n Bitcoin originally specify the winner will be
directly redeemed by all voters through a Redeem transaction, as shown in Fig. 5.
4.5 Security Analysis
Privacy. For each i2{1, …, n}, Vi reveal his masked vote bOi  Ri � Oi, where Oi is
the real vote. Since Ri is a distributed random value generated during the voting
commitment process, and this random value is used only once, no one can easily guess
Oi. As a result, individual votes remain private.
Fig. 4. CLAIMi and PAYi transactions
658 X. Wu et al.
Irrevocability. If all voters have revealed their votes, the winner is determined. Only
the winner can spend the out-winner output inside JOIN transaction. Please note that
when the JOIN transaction is confirmed, all voters’ deposits and funds have been
redeemed. As long as the Bitcoin blockchain can prevent double spending, no voter can
withdraw his funds.
Verifiability. Each voter has only one chance to vote on the blockchain. In the vote
commitment protocol, there are n(n + 2) proofs of zk_SNARKS to ensure that each
voter’s behavior is correct. Specifically, the random number rij is generated correctly,
the random number Ri is multiplied correctly, and the masked vote bOi is formed
correctly.
4.6 Secure Channel
In the vote commitment protocol, we mentioned a secure channel between any two
voters. We can easily create a secure channel in the Bitcoin blockchain environment. It
is now assumed that the “Check Input” step of the votecasting is performed before the
vote commitment. And it is required that the exchanged transaction of Vi should be
signed by himself. Then Vi can generate a dynamic shared secret key with Vj through
the Diffie-Hellman protocol and the current block header hash. That is, Vi and Vj use the
public key in the transaction they exchange to establish a fixed secret value, and update
the secret by the current header hash value. As the block chain grows, the secrets are
updated. This secret can be used as a symmetrical key to establish a secure channel
between the two voters.
5 Conclusions
In this work, we describe how to use blockchain to implement an anonymous, secure
electronic voting system. We propose a voting scheme based on blockchain and prime
numbers. It can support voting situations for multiple candidates. And we modify the
protocols to make it more reasonable and fair.
Fig. 5. Winner and Redeem transactions
Fair Electronic Voting via Bitcoin Deposits 659
Acknowledgments. This work was supported by National Key R&D Program of China
(2017YFB0802500), National Natural Science Foundations of China (U1636118, 61472457 and
61309028), Natural Science Foundation of Guangdong Province (2016A030313298), Science
and Technology Planning Project of Guangdong Province (2014A010103017), the Fundamental
Research Funds for the Central Universities (17lgjc45) and the Opening fund of Qiongqing Key
Lab of Computer Network and Communication Technology (CY-CNCL -2017-04).
References
1. Neumann, P.G.: Security criteria for electronic voting. In: 16th National Computer Security
Conference, vol. 29 (1993)
2. Okamoto, T.: An electronic voting scheme. In: Terashima, N., Altman, E. (eds.)
Advanced IT Tools, pp. 21–30. Springer, Boston (1996). https://doi.org/10.1007/978-0-
387-34979-4_3
3. Fujioka, A., Okamoto, T., Ohta, K.: A practical secret voting scheme for large scale
elections. In: Seberry, J., Zheng, Y. (eds.) AUSCRYPT 1992. LNCS, vol. 718, pp. 244–251.
Springer, Heidelberg (1993). https://doi.org/10.1007/3-540-57220-1_66
4. Sako, K., Kilian, J.: Receipt-free mix-type voting scheme. In: Guillou, Louis C., Quisquater,
J.-J. (eds.) EUROCRYPT 1995. LNCS, vol. 921, pp. 393–403. Springer, Heidelberg (1995).
https://doi.org/10.1007/3-540-49264-X_32
5. Jakobsson, M., Juels, A., Rivest, R.L.: Making mix nets robust for electronic voting by
randomized partial checking. In: USENIX Security Symposium, pp. 339–353, San Francisco
(2002)
6. Neff, C.A.: A verifiable secret shuffle and its application to e-voting. In: The 8th ACM
Conference on Computer and Communications Security, pp. 116–125. ACM (2001)
7. Baudron, O., Fouque, P.-A., Pointcheval, D., Stern, J., Poupard, G.: Practical
multi-candidate election system. In: The Twentieth Annual ACM Symposium on Principles
of Distributed Computing, pp. 274–283. ACM (2001)
8. Cramer, R., Gennaro, R., Schoenmakers, B.: A secure and optimally efficient multi-authority
election scheme. Trans. Emerg. Telecommun. Technol. 8(5), 481–490 (1997)
9. Benaloh, J., Tuinstra, D.: Receipt-free secret-ballot elections. In: The Twenty-Sixth
Annual ACM Symposium on Theory of Computing, pp. 544–553. ACM (1994)
10. Aradhya, P.: Distributed Ledger Visible to All? Ready for Blockchain? Huffington Post
(2016)
11. Business Wire: Now you can vote online with a selfie. Business Wire (2016). http://www.
businesswire.com/news/home/20161017005354/en/Vote-Online-Selfie
12. Nakamoto, S.: Bitcoin: a peer-to-peer electronic cash system (2008). http://bitcoin.org/
bitcoin.pdf
13. Bentov, I., Kumaresan, R.: How to use bitcoin to design fair protocols. In: Garay, Juan A.,
Gennaro, R. (eds.) CRYPTO 2014. LNCS, vol. 8617, pp. 421–439. Springer, Heidelberg
(2014). https://doi.org/10.1007/978-3-662-44381-1_24
14. Andrychowicz, M., Dziembowski, S., Malinowski, D., Mazurek, L.: Secure multiparty
computations on bitcoin. In: 2014 IEEE Symposium on Security and Privacy, pp. 443–458.
IEEE (2014)
15. Kumaresan, R., Bentov, I.: How to use bitcoin to incentivize correct computations. In: 2014
ACM SIGSAC Conference on Computer and Communications Security, pp. 30–41. ACM
(2014)
660 X. Wu et al.
http://dx.doi.org/10.1007/978-0-387-34979-4_3
http://dx.doi.org/10.1007/978-0-387-34979-4_3
http://dx.doi.org/10.1007/3-540-57220-1_66
http://dx.doi.org/10.1007/3-540-49264-X_32
http://www.businesswire.com/news/home/20161017005354/en/Vote-Online-Selfie
http://www.businesswire.com/news/home/20161017005354/en/Vote-Online-Selfie
http://bitcoin.org/bitcoin.pdf
http://bitcoin.org/bitcoin.pdf
http://dx.doi.org/10.1007/978-3-662-44381-1_24
16. Andrychowicz, M., Dziembowski, S., Malinowski, D., Mazurek, Ł.: Fair two-party
computations via bitcoin deposits. In: Böhme, R., Brenner, M., Moore, T., Smith, M. (eds.)
FC 2014. LNCS, vol. 8438, pp. 105–121. Springer, Heidelberg (2014). https://doi.org/10.
1007/978-3-662-44774-1_8
17. Zhao, Z., Chan, T.-H.H.: How to vote privately using bitcoin. In: Qing, S., Okamoto, E.,
Kim, K., Liu, D. (eds.) ICICS 2015. LNCS, vol. 9543, pp. 82–96. Springer, Cham (2016).
https://doi.org/10.1007/978-3-319-29814-6_8
18. Tilborg, V.H., Jajodia, S.: Encyclopedia of Cryptography and Security, 2nd edn. Springer,
Cham (2011)
19. Ben-Sasson, E., Chiesa, A., Tromer, E., Virza, M.: Succinct non-interactive zero knowledge
for a von Neumann architecture. In: USENIX Security, pp. 781–796 (2014)
Fair Electronic Voting via Bitcoin Deposits 661
http://dx.doi.org/10.1007/978-3-662-44774-1_8
http://dx.doi.org/10.1007/978-3-662-44774-1_8
http://dx.doi.org/10.1007/978-3-319-29814-6_8
	Fair Electronic Voting via Bitcoin Deposits
	Abstract
	1 Introduction
	1.1 Related Works
	2 Preliminaries
	2.1 Bitcoin and Blockchain
	2.2 Threshold Signature Scheme
	2.3 Commitment Scheme
	2.4 Zero-Knowledge Proof
	3 Models for Electronic Voting Schemes Based on Bitcoin System
	4 The Proposed Voting Scheme
	4.1 Set-Up
	4.2 Vote-Commitment
	4.3 Vote-Casting
	4.4 Vote-Auditing
	4.5 Security Analysis
	4.6 Secure Channel
	5 Conclusions
	Acknowledgments
	References