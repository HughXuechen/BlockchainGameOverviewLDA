LNCS 8383 - A Black-Box Construction of a <TEX>{\sf CCA2}</TEX> Encryption Scheme from a Plaintext Aware (<TEX>{\sf sPA1}</TEX>) Encryption Scheme
A Black-Box Construction of a CCA2 Encryption
Scheme from a Plaintext Aware (sPA1)
Encryption Scheme
Dana Dachman-Soled
University of Maryland
danadach@ece.umd.edu
Abstract. We present a construction of a CCA2-secure encryption
scheme from a plaintext aware (sPA1), weakly simulatable public key
encryption scheme. The notion of plaintext aware, weakly simulatable
public key encryption has been considered previously by Myers, Sergi
and shelat (SCN, 2012) and natural encryption schemes such as the
Damg̊ard Elgamal Scheme (Damg̊ard, Crypto, 1991) and the Cramer-
Shoup Lite Scheme (Cramer and Shoup, SIAM J. Comput., 2003) were
shown to satisfy these properties.
Recently, Myers, Sergi and shelat (SCN, 2012) defined an extension of
non-malleable CCA1 security, called cNM-CCA1, and showed how to con-
struct a cNM-CCA1-secure encryption scheme from a plaintext aware and
weakly simulatable public key encryption scheme. Our work extends and
improves on this result by showing that a full CCA2-secure encryption
scheme can be constructed from the same assumptions.
Keywords: CCA2-secure encryption, plaintext aware encryption, weakly
simulatable public key encryption, black-box.
1 Introduction
The basic security requirement for public key encryption schemes is Chosen
Plaintext Attack (CPA) security [17] (also known as semantic security), which
ensures security against a passive, eavesdropping adversary. A stronger security
requirement for public key encryption schemes, which ensures that they remain
secure even in the face of an active adversary, is known as Adaptive Chosen
Ciphertext Attack (CCA2) security. More specifically, a CCA2-secure encryption
scheme is guaranteed to be secure even against an adversary who has access to
a decryption oracle and may use it to decrypt any ciphertext of its choice except
for the challenge ciphertext itself. This captures real-life scenarios where the
adversary has control over network traffic which allows the adversary, in effect,
to decrypt all ciphertexts of its choice.
There is a significant body of work on constructing CCA2-secure encryption
schemes from specific computational hardness assumptions (c.f. [10,19,8,20]), as
well as from various lower level primitives (c.f. [14,7,23,29,31,24,32]). Neverthe-
less, the central question in this area remains open: To determine the relationship
H. Krawczyk (Ed.): PKC 2014, LNCS 8383, pp. 37–55, 2014.
c© International Association for Cryptologic Research 2014
38 D. Dachman-Soled
between CCA2 and CPA-secure encryption—whether a CCA2-secure encryption
scheme can be constructed assuming only the existence of a CPA-secure encryp-
tion scheme, or whether CCA2-security requires stronger assumptions. Although
a partial answer was given in [16], the larger question remains open for both
black-box and non-black-box constructions. Moreover, several important vari-
ants of the question such as whether a CCA2 secure encryption scheme can be
constructed from a CCA1-secure encryption scheme1 remain open.
In this paper, we consider a strong type of CPA-secure public key encryp-
tion scheme which is also plaintext aware (sPA1), weakly simulatable, and en-
joys perfect correctness2 and show how to construct full CCA2-secure public key
encryption schemes from such a CPA-secure encryption scheme. Moreover, the
CCA2 construction presented is black-box in the underlying CPA-secure scheme,
although our security reduction is non black-box.
Although the required assumptions are strong—we discuss and provide more
details on the assumptions of plaintext awareness and weak simulatability below—
we view our new construction of CCA2 encryption from plaintext aware, weakly
simulatable PKE as meaningful progress since our underlying assumption is an
assumption which was not previously known to imply CCA2 security. Moreover,
to the best of our knowledge, this is the first construction of a CCA2 scheme from
encryption schemes with seemingly weaker or incomparable security to CCA2 and
requiring no additional assumptions. Finally, we present new proof techniques for
proving CCA2 security, which may be useful for constructing CCA2 secure encryp-
tion from other lower-level primitives.
1.1 Our Assumptions
Our work relies on a strong assumption on the underlying CPA-secure encryption
scheme called plaintext awareness. The notion of a plaintext aware encryption
scheme was first introduced in the seminal paper of Bellare and Rogaway [5]
and the notion was further studied by Bellare et al. [2]. Both of these works
dealt with the notion of plaintext awareness in the Random Oracle model. Sub-
sequently, Bellare and Palacio [4] considered extending the notion of plaintext
awareness to the plain model3. In this work, we are also interested in the notion
of plaintext awareness in the plain model without random oracles. Informally,
an encryption scheme is plaintext aware (called sPA1 in [4]) if for every efficient
ciphertext creator, C, there exists an efficient plaintext extractor, C∗, that out-
puts the same value as the decryption algorithm on ciphertexts outputted by C.
1 A CCA1-encryption scheme is one where the adversary has oracle access to the
decryption oracle up to the point that it receives the challenge ciphertext.
2 We can remove the requirement of perfect correctness by using the transformation
of [15] to transform a public key encryption scheme with decryption error to a public
key encryption scheme with perfect correctness. Note that each transformation in
the sequence of transformations given in the proof of Theorem 3 of [15] preserves
both simulatability and plaintext awareness of the underlying encryption scheme.
3 We note that prior to the work of [4], Herzog et al. [21] considered a notion of
plaintext awareness in the key registration model.
A Black-Box Construction 39
This type of assumption is known as a knowledge assumption (other examples of
knowledge assumptions include the knowledge of exponent assumption [18,3] and
extractable collision resistant hash functions [6]) and is thus a non-falsifiable as-
sumption. Despite the strength of the assumption, the notion of plaintext aware-
ness is meant to capture an intuitive property of certain encryption schemes that
an efficient adversary cannot create a valid ciphertext without ”knowing” the
corresponding plaintext.
It is not hard to see that any plaintext aware encryption scheme is itself also
CCA1-secure, since the plaintext extractor can be used to simulate the decryp-
tion oracle in the CCA1 experiment. However, plaintext aware encryption does
not directly imply CCA2-secure encryption since the plaintext extractor is not
guaranteed to work correctly when the ciphertext creator receives a valid en-
cryption as input. Thus, when the adversary queries the CCA2 decryption oracle
after receiving the challenge ciphertext CT ∗ in the CCA2 experiment, the ex-
tractor may not be able to simulate the decryption oracle. In fact, since we are
given no guarantees on the output of the plaintext extractor when the cipher-
text creator receives CT ∗ as input, it would seem that constructing CCA2-secure
encryption from plaintext aware encryption is just as hard as constructing CCA2-
secure encryption from CCA1-secure encryption; we have the extra guarantee of
a plaintext extractor, but the extractor seems useless for queries made after the
challenge ciphertext is received.
Recently, a fascinating result by Myers, Sergi and shelat [26], showed that by
adding an additional assumption that the plaintext aware public key encryption
scheme is also weakly simulatable, the above problem can be partially overcome.
Essentially, they present a new construction and show that the plaintext ex-
tractor can still be useful for simulating the decryption oracle for a constant
number of parallel queries made after the adversary receives the challenge ci-
phertext when the underlying plaintext aware public key encryption scheme is
also weakly simulatable.
The notion of simulatable public key encryption was first introduced by
Damg̊ard and Nielsen [12] in the context of non-committing encryption. Loosely
speaking, [12] define a simulatable public key encryption scheme to be an en-
cryption scheme with special algorithms for obliviously sampling public keys and
random ciphertexts without learning the corresponding secret keys and plain-
texts; in addition, both of these oblivious sampling algorithms should be effi-
ciently invertible. An incomparable notion of simulatable public key encryption
was introduced by [13] and was shown to imply CCA2-secure encryption. Here,
the public key encryption scheme has an invertible algorithm f for obliviously
sampling random ciphertexts (but not public keys) and in addition, f(r), where
r is a random string, and C, where C is an honestly generated ciphertext are
indistinguishable, even when given access to a decryption oracle. The weakly
simulatable encryption schemes used in this work are strictly weaker than both
of the above notions. They are weaker than the [12] notion since only the ci-
phertext and not the public key has an invertible oblivious sampling algorithm
40 D. Dachman-Soled
and they are weaker than the [13] notion since the attacker is not given access
to the decryption oracle.
In their work, [26] defined an extension of non-malleable CCA1 security,
called cNM-CCA1, where an adversary can make c adaptive parallel decryp-
tion queries after seeing the challenge ciphertext. Then, [26] showed how to
construct cNM-CCA1 encryption from plaintext aware and weakly simulatable
public key encryption for any constant c. Similar assumptions of plaintext aware
and weakly simulatable public key encryption were previously made by [13].
Moreover, as shown by Myers, Sergi and shelat [26] natural encryption schemes
such as the D̊amgard Elgamal encryption scheme (DEG) and the lite version of
Cramer-Shoup encryption scheme (CS-lite) satisfy both of these properties under
the DDH assumption and a suitable extension of the Diffie-Hellman Knowledge
(DHK) assumption (see [4] for discussion of the DHK assumption).
Following the work of [26], it is interesting to explore how far we can take the
assumption of the existence of a plaintext aware and weakly simulatable public
key encryption scheme and what the power of this assumption is relative to the
assumption of the existence of a CCA2-secure encryption scheme.
1.2 Our Results
Informally, we show the following:
Theorem 1 (Informal). There is a black-box construction of CCA2-secure en-
cryption from plaintext aware and weakly simulatable public key encryption with
perfect correctness.
Our result extends the work of [26] by showing that plaintext aware and
weakly simulatable public key encryption can, in fact, be used to achieve full
CCA2 security.
Finally, the assumption of a plaintext aware encryption scheme can be viewed
as an assumption that allows us to use strong non-black-box techniques on the
adversary in the security reduction. More specifically, we leverage the code of
the adversary by using it to extract crucial information that the adversary must
”know.” This raises the intriguing question of whether we can present a con-
struction of CCA2 from CPA where the security proof uses non-black-box access
to the adversary. Such reductions are known to be more powerful than black-box
reductions in the setting of multiparty computation as first shown in the seminal
work of Barak [1]. But it has not been clear how to leverage these techniques in
the non-interactive setting of public key encryption.
1.3 Technical Overview
We adapt and combine many of the techniques of [22], [26] and, in addition, we
introduce new techniques as discussed in detail below.
A Black-Box Construction 41
The construction. On security parameter k, the scheme will consist of a one-time
signature as well as both inner and outer ciphertexts, with corresponding public
keys. More specifically, two inner ciphertexts will be encrypted under public
keys pkin0
, pkin1
, and k outer ciphertexts will be encrypted using k public keys
chosen out of k pairs of public keys (pk0
1, pk
1
1), . . . , (pk
0
k, pk
1
k). The selection of
the k public keys pkb1
1 , . . . , pkbk
k will depend on bits of the verification key, vksig,
chosen for the one-time signature (as in [14,26]).
In particular, a ciphertext will consist of the following:
Verification key: A verification key, vksig, for the one-time signature scheme,
generated by GenSig.
Inner ciphertexts: Two ciphertexts CTin0 = Enc(pkin0
, s̃0), CTin1 =
Enc(pkin1
, s̃1) where s̃0, s̃1 are additive secret shares of m||r, m is the mes-
sage to be encrypted, r is the randomness used to encrypt the outer cipher-
texts (as described below), and || denotes concatenation.
Outer ciphertexts: k ciphertexts CT1, . . . , CTk computed the following way:
r1|| · · · ||rk ← prg(r), where prg is a pseudorandom generator. Each CTi =
Enc(pk
vksigi
i , CTin0 ||CTin1 ; ri).
Signature: A signature σ = Sign(sksig, CT1|| · · · ||CTk).
The security reduction. We consider a modified CCA2 experiment where the
decryption oracle is replaced with the plaintext extractor guaranteed by the
plaintext awareness property of the underlying encryption scheme. Note that
once the adversary receives the challenge ciphertext in the CCA2 experiment,
we have no guarantees on whether the plaintext extractor returns messages that
are consistent with the answers of the decryption oracle. Therefore, we define
a bad extraction event as the event that the plaintext extractor and decryption
oracle disagree on a query submitted by the adversary A to the decryption or-
acle. We consider a sequence of hybrids and show that (1) In the first hybrid,
the probability of bad extraction event ocurring is negligible (due to the security
guarantees of the plaintext aware, weakly simulatable encryption scheme) and
(2) In consecutive hybrids the probability of bad extraction event occurring dif-
fers by a negligible amount (since the occurrence of a bad extraction event can
be detected in each hybrid). Put together, these imply that the decryption oracle
and plaintext extractor agree (even for queries after the challenge ciphertext is
received) in the original experiment with all but negligible probability. Further-
more, this implies that the CCA2 experiment can be simulated without knowing
the secret key of the inner encryption scheme (by using the plaintext extractor
to decrypt oracle queries), which immediately implies the CCA2 security of the
scheme. To show (1), we use techniques similar to those of [26]. To show (2), we
build upon the sequence of hybrids used by [22].
The main new technical challenge in this work is showing that property (2)
holds for each pair of consecutive hybrids. More specifically, in the final two
hybrids, which we denote here by H̃0, H̃1, we run the CCA2 experiment with the
CCA2 adversary, but use the plaintext extractor to decrypt the inner ciphertexts
CTin0 , CTin1 . Additionally, in H̃0, the value s̃0 ⊕ s̃1 is set to a random string,
42 D. Dachman-Soled
while in H̃1, value s̃0⊕ s̃1 is set honestly to (r||mβ). Note that if a bad extraction
event does not occur, then the view of the adversary in H̃1 is identical to its
view in the original CCA2 experiment. By previous arguments, we have that
the probability of a bad extraction event is negligible in H̃0. To argue that the
probability of bad extraction event occurring differs by a negligible amount in
these final two hybrids, we must reduce to the semantic security of the inner
encryption scheme. However, a bad extraction event—in which the plaintext
extractor disagrees with the decryption oracle—cannot be detected unless the
adversary has the secret keys corresponding to the inner encryptions and if this
is the case, it seems that we cannot hope to reduce to semantic security.
Thus, we consider a modified experiment where at the beginning of the ex-
periment we fix a bit b←$ {0, 1} and a modified bad extraction event defined as
the event that the plaintext extractor and decryption oracle disagree specifically
on the decryption of CTinb
for a query submitted by the adversary A. Since
b←$ {0, 1} is chosen uniformly at random, independent of all other variables, we
show that the probability that the first bad extraction event occurs on CTinb
is exactly half the probability that the first bad extraction event occurs on ei-
ther CTin0 or CTin1 . Now, a semantic security adversary will choose b←$ {0, 1}
at the outset and will embed its challenge public key and ciphertext in place
of pkin1−b
and CT ∗
in1−b
, respectively. Moreover, the semantic security adversary
will embed an honestly generated public key and ciphertext in place of pkinb
and CT ∗
inb
, respectively. This means that the semantic security adversary can
decrypt ciphertexts encrypted under pkinb
and thus can successfully detect the
occurence of modified bad extraction event.
1.4 Related Work
In their seminal work, Dolev et al. [14] presented the first construction of CCA2-
encryption from the lower-level primitive of enhanced trapdoor permutations.
However, the [14] construction is not black-box and requires the use of generic
non-interactive zero knowledge proofs. Subsequently, Pass et al. [28] presented
a new definition of non-malleability and presented a construction from CPA to
non-malleable CPA requiring non-black box use of the underlying encryption
scheme. Choi et al. [9] gave a black-box version of this result thereafter. Myers
and shelat [27] showed how to construct many-bit CCA2-encryption from single-
bit cca2-encryption and Hohenberg et al. [22] extended their result and showed
how to build CCA2-encryption from any detectable chosen ciphertext (DCCA)
secure encryption scheme. As discussed previously, [26] show how to construct a
cNM-CCA1-secure encryption scheme from a plaintext aware, weakly simulatable
public key encryption scheme.
A different line of work introduced new low-level primitives and showed how
to construct CCA2 encryption from these low-level primtives. Examples are con-
structions of CCA2-secure encryption from the primitives of identity-based en-
cryption [7], tag-based encryption [23], lossy trapdoor functions [29], correlated
products [31], adaptive trapdoor functions [24], and extractable hash proofs [32].
A Black-Box Construction 43
Finally, several works [10,19,8,20] construct CCA2-encryption directly from
various number-theoretic assumptions.
2 Preliminaries
2.1 CCA2 Security
Definition 1 (CCA2 Security). Let E = (Gen,Enc,Dec) be an encryption
scheme and let the random variable CCA2-Expβ(E , A, k) where β ∈ {0, 1}, A =
(A1, A2) are ppt algorithms and k ∈ N, denote the result of the following proba-
bilistic experiment:
CCA2-Expβ(E , A, k)
– (pk, sk)←$Gen(1k)
– (m0,m1, stateA)←$A
Dec(sk,·)
1 (pk)
– y←$Enc(pk,mβ)
– D←$A
Dec(sk,·)
2 (y, stateA)
We require that the output of A1 satisfies |m0| = |m1| and that A2 does not
query y to its oracle.
(Gen,Enc,Dec) is CCA2-secure if for any ppt algorithms A = (A1, A2) the
following two ensembles are computationally indistinguishable:
{CCA2-Exp0(E , A, k)}k∈N
c≈ {CCA2-Exp1(E , A, k)}k∈N .
2.2 Plaintext Awareness for Multiple Key Setup
We follow [26] for the following definition.
sPA1�(E,C,C∗, k):
– Let R[C], R[C∗] be randomly chosen bit strings for C and C∗.
– ((pki, ski))i∈[�(k)] ←$Gen(1k)
– st ← (
(pki)i∈[�(k)], R[C]
)
– CC∗(st,·) ((pki)i∈[�(k)]
)
– Let Q = {(qi = (pkji , ci),mi)} be the set of queries C made to C∗ until it
halted and C∗’s responses to them. Return ∧|Q|
i=1(mi = Decskji
(ci)).
In the above experiment, C is a ciphertext creator, and C∗ is a stateful ppt
algorithm called the extractor that takes as input the state information st and a
ciphertext given by the ciphertext creator C, and will return the decryption of
that ciphertext and the updated state st. The state information is initially set
to the public key pk and the adversary C’s random coins. It gets updated by C∗
as C∗ answers each query that the adversary C submits. The above experiment
returns 1 if all the extractor’s answers to queries are the true decryption of those
queries under sk. Otherwise, the experiment returns 0.
44 D. Dachman-Soled
Definition 2 (sPA1�). Let � be a polynomial. Let E = (Gen,Enc,Dec) be an
asymmetric encryption scheme. Let the ciphertext-creator adversary C and the
extractor C∗ be ppt algorithms. For k ∈ N, the sPA1-advantage of C relative to
C∗ is defined as:
AdvsPA1�(E , C, C∗) = Pr[sPA1(E , C, C∗, k) = 0]
The extractor C∗ is a successful sPA1�-extractor for the ciphertext-creator ad-
versary C if for all k ∈ N, the function AdvsPA1�(E , C, C∗) is negligible. The
encryption scheme E is called sPA1� multi-key secure if for any ppt ciphertext
creator there exists a successful sPA1�-extractor.
As shown by [26], both the Damgard Elgamal encryption scheme (DEG) and
the lite version of Cramer-Shoup encryption scheme (CS-lite) are sPA1� secure
under a suitable generalization of the DHK1 assumption.
2.3 Weakly Simulatable Encryption Scheme
As in [26], we consider a notion of simulatability similar to the one of Dent [13],
but where the attacker is not given access to the decryption oracle. If an en-
cryption scheme satisfies this weaker notion of simulatability, we say it is weakly
simulatable.
Definition 3 (Weakly Simulatable Encryption Scheme). An asymmetric
encryption scheme (Gen, Enc, Dec) is weakly simulatable if there exist two poly-
time algorithms (f, f−1) where f is deterministic and f−1 is probabilistic, such
that for all k ∈ N there exists the polynomial function p(·) where l = p(k), we
have the following correctness properties:
– f on inputs of public key pk (in the range of Gen) and a random string r ∈
{0, 1}l, returns elements in C, where C is the set of all possible ”ciphertext”-
strings that can be submitted to the decryption oracle (notice that C ∈ C
might not be a valid ciphertext).
– f−1 on input of a public key pk (in the range of Gen) and an element C ∈ C
outputs elements of {0, 1}l.
– f(pk, f−1(pk, C)) = C for all C ∈ C.
And the following security properties. No polynomial time attacker A has prob-
ability better than 1/2 + μ(k) of winning the following experiment, where μ is
some negligible function.
– The challenger generates a random key pair (pk, sk)←$Gen(1k), and chooses
randomly b ∈ {0, 1}.
– The attacker A executes on the input 1k and the public key pk outputs m ∈
M. The challenger sends A the pair (f−1(pk, c = Enc(pk,m)), c) if b = 0, or
(r, f(pk, r)) for some randomly generated element r ∈ {0, 1}l if b = 1. The
attacker A terminates by outputting a guess b′ for b. A wins if b = b′ and its
advantage is defined in the usual way.
A Black-Box Construction 45
Lemma 1. If E is a weakly simulatable encryption scheme, then E is CPA-
secure.
[26] show that DEG and CS-lite schemes can both be weakly simulatable when
instantiated in proper groups.
2.4 PA1+–An Extension of Plaintext Awareness
[26] additionally consider an augmented notion of plaintext awareness in which
the ciphertext creator has access to an oracle that produces random bits, PA1+.
The extractor receives the answers to any queries generated by the creator, but
only at the time these queries are issued. This oracle is meant to model the fact
that the plaintext extractor might not receive all of the random coins used by the
ciphertext creator at the beginning of the experiment. By introducing this oracle,
we require the extractor to work even when it receives the random coins at the
same time as the ciphertext creator. This modification has implications when
the notion of plaintext awareness is computational. However, in our case, as in
[26], we require statistical plaintext awareness, and as argued by [26], allowing
access to such an oracle does not affect the sPA1� security.
Any encryption scheme that is sPA1� secure is also sPA1+� secure.
Definition 4. Define the sPA1+� experiment in a similar way to the sPA1� exper-
iment. The only difference between the two is that during the sPA1+� experiment,
the ciphertext creator has access to a random oracle O that takes no input, but
returns independent uniform random strings upon each access. Any time the cre-
ator accesses the oracle, the oracle’s response is forwarded to both the creator
and the extractor.
If an encryption scheme would be deemed sPA1� secure, when we replace the
sPA1� experiment in the definition with the modified sPA1+� experiment, then the
encryption scheme is said to be sPA1+� secure.
Lemma 2 (Appeared in [26].). If an encryption scheme E is sPA1� secure,
then it is sPA1+� secure.
2.5 Strong One-Time Signature Scheme
We follow here the definition of [9]. Informally, a strong one-time signature
scheme (GenSig, Sign,Ver) is an existentially unforgeable signature scheme, with
the restriction that the signer signs at most one message with any key. This
means that an efficient adversary, upon seeing a signature on a message m of his
choice, cannot generate a valid signature on a different message, or a different
valid signature on the same message m. Such schemes can be constructed in a
black-box way from one-way functions [25,30], and thus from any semantically-
secure encryption scheme (Gen,Enc,Dec).
46 D. Dachman-Soled
3 The Scheme
We present a CCA2-secure encryption scheme Ecca = (Gencca,Enccca,Deccca) from
any scheme Epa-cpa = (Genpa-cpa,Encpa-cpa,Decpa-cpa) which is a plaintext aware,
weakly simulatable public key encryption scheme with perfect correctness and
any scheme (GenSig, Sign,Ver), which is a strong one-time signature scheme and
any pseudorandom generator prg. See Figure 1.
Encryption Scheme Ecca = (Gencca,Enccca,Deccca)
Key Generation Gencca(1
k):
– [pkinb
, skinb
]b∈{0,1} ←$Genpa-cpa(1
k);
– [pkb
i , sk
b
i ]b∈{0,1},i∈[k] ←$Genpa-cpa(1
k);
– pk ← ([pkinb
]b∈{0,1}, [pk
b
i ]b∈{0,1},i∈[k]);
– sk ← ([skinb
]b∈{0,1}, [sk
b
i ]b∈{0,1},i∈[k])
– Return (pk, sk)
Encryption Enccca(pk,m):
– (vksig, sksig)←$GenSig(1k)
– r←$ {0, 1}k
– s̃0 ←$ {0, 1}�, where � = k + |m|; s̃1 ← (r||m) ⊕ s̃0
– CTin0 ←$Encpa-cpa(pkin0
, s̃0); CTin1 ←$Encpa-cpa(pkin1
, s̃1)
– r1|| · · · ||rk = prg(r)
– For 1 ≤ i ≤ k, CTi ← Encpa-cpa(pk
vksigi
i , CTin0 ||CTin1 ; ri)
– Return CT = (CT1|| · · · ||CTk, vksig, σ = Sign(sksig, CT1|| · · · ||CTk))
Decryption Deccca(sk, (CT = CT1|| · · · ||CTn, vksig, σ))
– If Ver(vksig, CT, σ) = ⊥, output ⊥.
– Otherwise, CTin0 ||CTin1 ← Decpa-cpa(sk
vksig1
1 , CT1)
– s̃0 ← Decpa-cpa(skin0 , CTin0)
– s̃1 ← Decpa-cpa(skin1 , CTin1)
– (r||m) ← s̃0 ⊕ s̃1
– (r1|| · · · ||rk) ← prg(r)
– If for all i, CTi = Encpa-cpa(pk
vksigi
i , CTin0 ||CTin1 ; ri) return m
– Else return ⊥.
Fig. 1. The CCA2-Secure Encryption Scheme Ecca
Theorem 2. Encryption scheme Ecca, presented in Figure 1, is CCA2-secure un-
der the assumptions that Epa-cpa = (Genpa-cpa,Encpa-cpa,Decpa-cpa) is a plaintext
aware, weakly simulatable public key encryption scheme with perfect correctness,
the scheme (GenSig, Sign,Ver) is a strong one-time signature scheme and prg is
a pseudorandom generator.
A Black-Box Construction 47
Note that the Damgard Elgamal encryption scheme (DEG) and the lite ver-
sion of Cramer-Shoup encryption scheme (CS-lite) are plaintext aware, weakly
simulatable and have perfect correctness.
Since strong one-time signature schemes and pseudorandom generators can
be constructed in a black-box manner from CPA-secure public key encryption
we have the following corollary:
Corollary 1. There is a black-box construction of a CCA2-secure public key en-
cryption scheme from any plaintext aware, weakly simulatable public key
encryption scheme with perfect correctness.
4 Security Analysis
We begin by defining an experiment which is different than the regular CCA2
experiment, but will be useful in our analsysis of Ecca:
Nested Indistinguishability Experiment for scheme Ecca:
We define the expriment N-Exp(β, z) for β, z ∈ {0, 1}.
For every adversary A = (A1, A2) participating in a CCA2 experiment, we
consider a corresponding ciphertext creator CA (described below) and cipher-
text extractor C∗ (as guaranteed by the security of the encryption scheme
Epa-cpa), interacting with an oracle O (described below). Let the random vari-
able N-Expβ,z(Ecca, A, k), where β, z ∈ {0, 1} and k ∈ N, denote the result of the
following probabilistic experiment:
N-Expβ,z(Ecca, A, k):
– CA receives public keys [pkinb
]b∈{0,1}, {pkb
i}b∈{0,1},i∈[k] from the sPA1+2k+2
experiment
– CA chooses (sksig∗, vksig∗)←$GenSig(1k; rsksig), where rsksig consists of the
first k bits of CA’s random tape.
– CA sets pk = [pkinb
]b∈{0,1}, {pkb
i}b∈{0,1},i∈[k].
– CA chooses a random tape for A and begins an emulation of A1 on input
pk.
– Whenever CA receives query CT = (CT1|| · · · ||CTk, vksig, σ) from A, CA
checks Ver(vksig, CT1|| · · · ||CTk, σ) = 1. If not, CA returns ⊥. If so, CA
submits CTi, where i is the first index s.t. vksig∗i 	= vksig, to the extractor
to obtain (CTin0 ||CTin1). If there is no such index, CA returns ⊥ and halts.
Otherwise, CA submits CTin0 and CTin1 to the extractor to obtain s̃0, s̃1.
CA computes r||m = s̃0 ⊕ s̃1 and checks that CT1, . . . , CTn were computed
correctly. If not, CA returns ⊥. If so, CA returns m. Eventually A1 returns
(m0,m1, st) and halts. CA outputs (m0,m1).
– CA queries its oracle O and O returns r1, . . . , rk where r1 =
f−1(pk
vksig∗1
1 , CT ∗
1 ), . . . , rk = f−1(pk
vksig∗k
1 , CT ∗
k ) and where CT ∗
1 , . . . , CT ∗
k
are computed in the following way:
48 D. Dachman-Soled
1. r←$ {0, 1}k, r1, . . . , rn ← prg(r).
2. s̃0 ←$ {0, 1}�
3. If z = 0 then s̃1 ←$ {0, 1}�.
4. Else if z = 1 then s̃1 ← (r||mβ)⊕ s̃0 .
5. CT ∗
in0
←$Encpa-cpa(pkin0
, s̃0); CT ∗
in1
←$Encpa-cpa(pkin1
, s̃1)
6. For 1 ≤ i ≤ k, CT ∗
i ← Encpa-cpa(pk
vksig∗i
i , CT ∗
in0
||CT ∗
in1
; ri)
– CA computes CT ∗
i = f(ri) for each i and the signature σ∗. CA returns
CT ∗ = (CT ∗
1 || · · · ||CT ∗
k , vksig
∗, σ∗) to A
– Whenever CA receives query CT = (CT1|| · · · ||CTk, vksig, σ) from A, CA
checks Ver(vksig, CT1|| · · · ||CTk, σ) = 1. If not, CA returns ⊥. If so, CA
submits CTi, where i is the first index s.t. vksigi 	= vksig∗i , to the extractor
to obtain (CTin0 ||CTin1). If there is no such index, CA returns ⊥ and halts.
Otherwise, CA submits CTin0 and CTin1 to the extractor to obtain s̃0, s̃1.
CA computes r||m = s̃0 ⊕ s̃1 and checks that CT1, . . . , CTn were computed
correctly. If not, CA returns ⊥. If so, CA returns m. Eventually A2 outputs
D and halts.
We require that the output of A1 satisfies |m0| = |m1| and that A2 does not
query CT ∗ to its oracle.
Definition 5 (Nested Indistinguishability). We say that Ecca =
(Gencca,Enccca,Deccca) is nested-indistinguishable if for any ppt algorithms A =
(A1, A2) and for β ∈ {0, 1} the following two ensembles are computationally
indistinguishable:
{
N-Expβ,0(Ecca, A, k)
}
k∈N
c≈ {
N-Expβ,1(Ecca, A, k)
}
k∈N
.
Consider the following event:
Definition 6 (The Bad Extraction Event). We say that a bad extrac-
tion event has occurred during an execution of the nested indistinguisha-
bility experiment if at some point A submits a decryption query CT =
(CT1|| · · · ||CTn, vksig, σ) such that one of the following occurs:
– C∗(st, CTi) 	= Decpa-cpa(sk
vksigi
i , CTi) where i is the first index such that
vksig∗i 	= vksigi.
– C∗(st, CTin0) 	= Decpa-cpa(skin0 , CTin0)
– C∗(st, CTin1) 	= Decpa-cpa(skin1 , CTin1)
Definition 7 (The Forging Signature Event). We say that a forging sig-
nature event has occurred during an execution of the nested indistinguisha-
bility experiment if at some point A submits a decryption query (CT =
(CT1|| · · · ||CTn, vksig, σ)) such that vksig = vksig∗ and Ver(vksig, CT, σ) = 1.
Our main theorem, Theorem 2, is immediately implied by the following two
lemmas:
A Black-Box Construction 49
Lemma 3. Assume that the scheme Epa-cpa = (Genpa-cpa,Encpa-cpa,Decpa-cpa) is
a plaintext aware, weakly simulatable public key encryption scheme with perfect
correctness. Then encryption scheme Ecca is nested-indistinguishable.
Lemma 4. Assume that the scheme Epa-cpa = (Genpa-cpa,Encpa-cpa,Decpa-cpa) is
a plaintext aware, weakly simulatable public key encryption scheme with perfect
correctness, the scheme (GenSig, Sign,Ver) is a strong one-time signature scheme
and prg is a pseudorandom generator. Then for β ∈ {0, 1} and for every ppt
adversary A:
{N-Expβ,1(Ecca, A, k)}k∈N
s≈ {CCA2-Expβ(Ecca, A, k)}k∈N
Lemma 3 follows by a straightforward reduction to semantic security of Epa-cpa.
Lemma 4 follows in a straightforward manner from the fact that Bad Extraction
Event and Forging Signature Event occur with at most negligible probability
when z = 1 along with the perfect correctness of Epa-cpa.
In what follows, we focus our attention on proving that Bad Extraction Event
occurs with at most negligible probability when z = 1. The proof that Forging
Signature Event occurs with negligible probability is straightforward and can be
found in the full version [11]. To show this we proceed in the following way:
– In Section 4.1 we prove that Bad Extraction Event occurs with negligible
probability in the Nested Indistinguishability Experiment when z = 0.
– In Section 4.2 we use the fact that Bad Extraction Event occurs with negli-
gible probability in the Nested Indistinguishability Experiment when z = 0
to prove that Bad Extraction Event also occurs with negligible probability
in the Nested Indistinguishability Experiment when z = 1.
4.1 Bad Extraction Event When z = 0
In this section we prove the following lemma:
Lemma 5. Bad Extraction Event occurs with negligible probability when z = 0.
We proceed by considering a sequence of hybrids:
Hybrid H0: Proceeds exactly as the nested indistinguishability game for z = 0.
Hybrid H1: Proceeds exactly like H0 except that fresh randomness ri is used to
encrypt each CT ∗
i = Encpa-cpa(pk
vksigi
i , CT ∗
in0
||CT ∗
in1
; ri), instead of the prg.
Claim. The probability of a Bad Extraction Event in H1 and H0 differs by a
negligible amount.
This follows in a straightforward manner from the security of the prg.
Hybrid H2: Proceeds exactly like H1 except the oracle O returns uniformly
random r1, . . . , rk .
Claim. The probability of Bad Extraction Event in H2 is negligible.
50 D. Dachman-Soled
The claim follows due to the fact that the view of CA in the nested indis-
tinguishability experiment in Hybrid H2 is identical to the view of CA in the
sPA1+2k+2 experiment (since in H2 the oracle O simply returns uniformly ran-
dom coins r1, . . . , rk, as does the oracle in the sPA1∗2k+2 experiment). Thus, by
the sPA1+2k+2-secuirty of Epa-cpa, C∗ is guaranteed to return the same value as
Decpa-cpa on all ciphertexts submitted by CA with all but negligible probability.
Claim. The probability of a Bad Extraction Event in H1 and H2 differs by a
negligible amount.
Proof. Assume towards contradiction that there exists a ppt adversary A such
that a Bad Extraction Event inH1 andH2 differs by a non-negligible amount p =
p(k) when interacting with A,CA, C
∗. We present a ppt adversary B breaking
the weak simulatability of Epa-cpa.
B participates in an external experiment where B plays the security game
of the weakly simulatable encryption scheme Epa-cpa while internally interacting
with the adversary A and the corresponding ciphertext creator CA and extractor
C∗ in the following way:
– B receives p̂k1, . . . , p̂kk from the external simulatability security experiment.
– B chooses a random tape rCA for the ciphertext creator CA.
– B computes (sksig∗, vksig∗)←$GenSig(1k; rsksig), where rsksig consists of the
first k bits of rCA .
– B generates public key, secret key pairs
[pkinb
, skinb
]b∈{0,1}, {pk1−vksig∗i
i , sk
1−vksig∗i
i }i∈[k] and for i ∈ [k] sets
pk
vksig∗i
i = p̂ki.
– B instantiates CA with random tape rCA on input
[pkinb
]b∈{0,1}, {pkb
i}b∈{0,1},i∈[k].
– Eventually CA outputs (m0,m1). At this point, B plays the part of the oracle
O and does the following:
1. Choose s̃0, s̃1 ←$ {0, 1}� and compute CT ∗
in0
←$ Encpa-cpa(pkin0
, s̃0);
CT ∗
in1
←$ Encpa-cpa(pkin1
, s̃1)
2. Submit CT ∗
in0
||CT ∗
in1
to its external challenger.
3. Receives (r1, CT ∗
1 ), . . . , (rk, CT ∗
k ) from its external challenger, where for
each i, ri = f−1(pki, c = Encpa-cpa(pki, CT ∗
in0
||CT ∗
in1
)) if b = 0 or
(ri, f(pki, ri)) for randomly generated ri if b = 1.
B forwards r1, . . . , rk to CA on behalf of oracle O and continues the emula-
tion of CA.
– If at any point during the emulation, Bad Extraction Event occurs (which B
can check by decrypting using [skinb
]b∈{0,1}, {sk1−vksig∗i
i }i∈[k]), B aborts and
outputs 1.
– Otherwise, B outputs 0.
Note that for β ∈ {0, 1}, B perfectly simulates CA’s view in Hybrid H1 when
b = 0 and perfectly simulates CA’s view in Hybrid H2. Thus, B outputs 1 in the
case that b = 0 in the external experiment with probability p1 and B outputs
A Black-Box Construction 51
1 in the case that b = 1 in the external experiment with probability p2 where
p1 − p2 > p. Since by hypothesis, p is non-negligible, we have that B breaks the
security of the weakly simulatable encryption scheme Epa-cpa.
Lemma 5 follows immediately from Claims 4.1, 4.1 and 4.1.
4.2 Bad Extraction Event When z = 1
In this section we prove the following lemma:
Lemma 6. Bad Extraction Event occurs with negligible probability when z = 1.
To aid in our analysis, we define a second experiment ”Modified Nested Indis-
tinguishability” and a second Bad Extraction Event, ”Modified Bad Extraction
Event”. The Modified Nested Indistinguishability experiment is identical to the
Nested Indistinguishability experiment except that an additional random vari-
able b←$ {0, 1} is chosen at the very beginning of the experiment. The Modified
Bad Extraction Event will then depend on the value of b chosen during the
experiment. Details follow.
Definition 8 (The Modified Bad Extraction Event). We say that a mod-
ified bad extraction event has occurred during an execution of the nested in-
distinguishability experiment if at some point A submits a decryption query
CT = (CT1|| · · · ||CTn, vksig, σ) such that one of the following occurs:
– C∗(st, CTi) 	= Decpa-cpa(sk
vksigi
i , CTi) where i is the first index such that
vksig∗i 	= vksigi.
– C∗(st, CTinb
) 	= Decpa-cpa(skinb
, CTinb
)
Claim. For every ppt adversary A = (A1, A2) and for β ∈ {0, 1}, Modified
Bad Extraction Event occurs in M-N-Expβ,z(Ecca, A, k) with negligible probabil-
ity when z = 0.
This follows immediately from the fact that for every ppt adversary A =
(A1, A2), Bad Extraction event occurs in N-Expβ,z(Ecca, A, k) with negligible
probability when z = 0.
Claim. If for some ppt adversary A = (A1, A2) we have that Bad Extrac-
tion Event occurs with probability p1 in N-Expβ,z(Ecca, A, k) when z = 1
then Modified Bad Extraction Event occurs with probability at least p1/2 in
M-N-Expβ,z(Ecca, A, k) when z = 1.
Proof. Let A be a ppt adversary such that Bad Extraction Event occurs with
probability p1 in the experiment N-Expβ,1(Ecca, A, k). Let event E be the event
that for some query, CT = (CT1|| · · · ||CTk, vksig, σ), one of the following occurs:
C∗(st, CTi) 	= Decpa-cpa(sk
vksigi
i , CTi) (1)
where i is the first index such that vksig∗i 	= vksigi.
52 D. Dachman-Soled
OR
C∗(st, CTin0) 	= Decpa-cpa(skin0 , CTin0) (2)
OR
C∗(st, CTin1) 	= Decpa-cpa(skin1 , CTin1) (3)
and this is the first such query made by A during the experiment. Note that the
probability that event E occurs in N-Expβ,1(Ecca, A, k) and the probability that
E occurs in M-N-Expβ,1(Ecca, A, k) is p1.
We consider an experiment,M-N-Exp′beta,z(Ecca, A, k), identical to the Modified
Nested Indistinguishability experiment except the value of b is chosen ”on the
fly” at the first point when event E occurs. It is straightforward to see that
the probability of event E in M-N-Exp′β,1(Ecca, A, k) is also p1 (the same as the
probability of E in the experiment M-N-Expβ,1(Ecca, A, k)).
Now, if event E was triggered by a query CT = (CT1|| · · · ||CTk, vksig, σ)
in M-N-Exp′beta,1(Ecca, A, k) such that (1) occurs, then modified bad extraction
event also occurs. Alternatively, if event E was triggered by a query CT =
(CT1|| · · · ||CTk, vksig, σ) in M-N-Exp′beta,1(Ecca, A, k) such that (2) or (3) occurs,
then modified bad extraction event occurs with probability exactly 1/2. Thus,
modified bad extraction event occurs in M-N-Exp′beta,1(Ecca, A, k) with probabil-
ity at least p1/2. Since the view of CA is identical inM-N-Exp′beta,1(Ecca, A, k) and
in M-N-Expbeta,1(Ecca, A, k) we have that modified bad extraction event occurs
in M-N-Expβ,1(Ecca, A, k) with probability at least p1/2.
Claim. The probability of a Modified Bad Extraction Event when z = 0 and
z = 1 differs by a negligible amount.
Proof. Assume towards contradiction that there is a ppt adversary A such that
the probability of a Modified Bad Extraction Event in M-N-Expbeta,0(Ecca, A, k)
is p0 = p0(k), the probability of a Modified Bad Extraction Event in
M-N-Expbeta,1(Ecca, A, k) is p1 = p1(k) and p(k) = p1(k)−p0(k) is non-negligible.
We present a ppt adversary B that uses A to break the semantic security of
Epa-cpa.
B participates in an external semantic security experiment for encryption
scheme Epa-cpa while internally emulating a run of M-N-Exp with CA, A and
playing the part of the oracle O. More specifically, B receives a public key
pkpa-cpa from the semantic security experiment for the encryption scheme Epa-cpa
and does the following:
– B chooses b←$ {0, 1}. and sets pkin1−b
= pkpa-cpa
– B chooses (pkinb
, skinb
)←$Genpa-cpa(1
k) and
[pkb
i , sk
b
i ]b∈{0,1},i∈[k] ←$Genpa-cpa(1
k).
– B chooses a random tape rCA for CA and begins an emulation of CA with
input ([pkinb
]b∈{0,1}, [pk
b
i ]b∈{0,1},i∈[k]).
– At some point CA outputs m0,m1. At this point, B, playing
the part of the oracle O, returns r1, . . . , rk where (r1, CT ∗
1 ) =
f−1(pk
vksig∗1
1 , CT ∗
1 ), . . . , (rk, CT ∗
k ) = f−1(pk
vksig∗k
1 , CT ∗
k ) and CT ∗
1 , . . . , CT ∗
k
are computed in the following way:
A Black-Box Construction 53
• r←$ {0, 1}k, r1, . . . , rn ← prg(r).
• (sksig, vksig)←$GenSig(1k)
• Choose s̃b ←$ {0, 1}�, s̃01−b ←$ {0, 1}� and set s̃11−b ← (r||mβ)⊕ s̃b .
• B returns M0 = s̃01−b,M1 = s̃11−b to its external challenger and receives
ciphertext CTpa-cpa in return.
• B sets CT ∗
inb
←$Encpa-cpa(pkin0
, s̃b) and sets CT ∗
in1−b
= CTpa-cpa.
• For 1 ≤ i ≤ k, CT ∗
i ← Encpa-cpa(pk
vksig
i , CT ∗
in0
||CT ∗
in1
; ri)
– B continues the emulation of CA, A.
– If the event Modified Bad Extraction Event occurs, B aborts and outputs 1.
– Otherwise, B outputs 0.
Note that for β ∈ {0, 1}, B perfectly simulates CA’s view in the experiment
M-N-Exp(β, 0). Thus, B outputs 1 in the case that it receives an encryption ofM1
with probability p1 and B outputs 1 in the case that it receives an encryption
of M0 with probability p2 where p1 − p2 > p. Since by hypothesis, p is non-
negligible, we have that B breaks the semantic security of Epa-cpa.
Together, Claims 4.2, 4.2 and 4.2 immediately imply Lemma 6.
References
1. Barak, B.: How to go beyond the black-box simulation barrier. In: FOCS,
pp. 106–115 (2001)
2. Bellare, M., Desai, A., Pointcheval, D., Rogaway, P.: Relations among notions of
security for public-key encryption schemes. In: Krawczyk, H. (ed.) CRYPTO 1998.
LNCS, vol. 1462, pp. 26–45. Springer, Heidelberg (1998)
3. Bellare, M., Palacio, A.: The knowledge-of-exponent assumptions and 3-round
zero-knowledge protocols. In: Franklin, M. (ed.) CRYPTO 2004. LNCS, vol. 3152,
pp. 273–289. Springer, Heidelberg (2004)
4. Bellare, M., Palacio, A.: Towards plaintext-aware public-key encryption without
random oracles. In: Lee, P.J. (ed.) ASIACRYPT 2004. LNCS, vol. 3329, pp. 48–62.
Springer, Heidelberg (2004)
5. Bellare, M., Rogaway, P.: Optimal asymmetric encryption. In: De Santis, A. (ed.)
EUROCRYPT 1994. LNCS, vol. 950, pp. 92–111. Springer, Heidelberg (1995)
6. Bitansky, N., Canetti, R., Chiesa, A., Tromer, E.: From extractable collision re-
sistance to succinct non-interactive arguments of knowledge, and back again. In:
ITCS, pp. 326–349 (2012)
7. Canetti, R., Halevi, S., Katz, J.: Chosen-ciphertext security from identity-based
encryption. In: Cachin, C., Camenisch, J.L. (eds.) EUROCRYPT 2004. LNCS,
vol. 3027, pp. 207–222. Springer, Heidelberg (2004)
8. Cash, D., Kiltz, E., Shoup, V.: The twin diffie-hellman problem and applications.
J. Cryptology 22(4), 470–504 (2009)
9. Choi, S.G., Dachman-Soled, D., Malkin, T., Wee, H.M.: Black-box construction of
a non-malleable encryption scheme from any semantically secure one. In: Canetti,
R. (ed.) TCC 2008. LNCS, vol. 4948, pp. 427–444. Springer, Heidelberg (2008)
10. Cramer, R., Shoup, V.: Universal hash proofs and a paradigm for adaptive chosen
ciphertext secure public-key encryption. In: Knudsen, L.R. (ed.) EUROCRYPT
2002. LNCS, vol. 2332, pp. 45–64. Springer, Heidelberg (2002)
54 D. Dachman-Soled
11. Dachman-Soled, D.: A black-box construction of a cca2 encryption scheme from
a plaintext aware encryption scheme. IACR Cryptology ePrint Archive 2013, 680
(2013)
12. Damg̊ard, I.B., Nielsen, J.B.: Improved non-committing encryption schemes based
on a general complexity assumption. In: Bellare, M. (ed.) CRYPTO 2000. LNCS,
vol. 1880, pp. 432–450. Springer, Heidelberg (2000)
13. Dent, A.W.: The cramer-shoup encryption scheme is plaintext aware in the
standard model. In: Vaudenay, S. (ed.) EUROCRYPT 2006. LNCS, vol. 4004,
pp. 289–307. Springer, Heidelberg (2006)
14. Dolev, D., Dwork, C., Naor, M.: Nonmalleable cryptography. SIAM J. Com-
put. 30(2), 391–437 (2000)
15. Dwork, C., Naor, M., Reingold, O.: Immunizing encryption schemes from decryp-
tion errors. In: Cachin, C., Camenisch, J.L. (eds.) EUROCRYPT 2004. LNCS,
vol. 3027, pp. 342–360. Springer, Heidelberg (2004)
16. Gertner, Y., Malkin, T., Myers, S.: Towards a separation of semantic and CCA se-
curity for public key encryption. In: Vadhan, S.P. (ed.) TCC 2007. LNCS, vol. 4392,
pp. 434–455. Springer, Heidelberg (2007)
17. Goldwasser, S., Micali, S.: Probabilistic encryption. J. Comput. Syst. Sci. 28(2),
270–299 (1984)
18. Hada, S., Tanaka, T.: On the existence of 3-round zero-knowledge protocols. In:
Krawczyk, H. (ed.) CRYPTO 1998. LNCS, vol. 1462, pp. 408–423. Springer, Hei-
delberg (1998)
19. Hanaoka, G., Kurosawa, K.: Efficient chosen ciphertext secure public key encryp-
tion under the computational diffie-hellman assumption. In: Pieprzyk, J. (ed.) ASI-
ACRYPT 2008. LNCS, vol. 5350, pp. 308–325. Springer, Heidelberg (2008)
20. Haralambiev, K., Jager, T., Kiltz, E., Shoup, V.: Simple and efficient public-key
encryption from computational diffie-hellman in the standard model. In: Nguyen,
P.Q., Pointcheval, D. (eds.) PKC 2010. LNCS, vol. 6056, pp. 1–18. Springer, Hei-
delberg (2010)
21. Herzog, J.C., Liskov, M., Micali, S.: Plaintext awareness via key registration. In:
Boneh, D. (ed.) CRYPTO 2003. LNCS, vol. 2729, pp. 548–564. Springer, Heidelberg
(2003)
22. Hohenberger, S., Lewko, A., Waters, B.: Detecting dangerous queries: A new ap-
proach for chosen ciphertext security. In: Pointcheval, D., Johansson, T. (eds.)
EUROCRYPT 2012. LNCS, vol. 7237, pp. 663–681. Springer, Heidelberg (2012)
23. Kiltz, E.: Chosen-ciphertext security from tag-based encryption. In: Halevi, S.,
Rabin, T. (eds.) TCC 2006. LNCS, vol. 3876, pp. 581–600. Springer, Heidelberg
(2006)
24. Kiltz, E., Mohassel, P., O’Neill, A.: Adaptive trapdoor functions and chosen-
ciphertext security. In: Gilbert, H. (ed.) EUROCRYPT 2010. LNCS, vol. 6110,
pp. 673–692. Springer, Heidelberg (2010)
25. Lamport, L.: Constructing digital signatures from a one-way function. Technical
Report SRI-CSL-98, SRI International Computer Science Laboratory (1979)
26. Myers, S., Sergi, M., Shelat, A.: Blackbox construction of a more than non-
malleable CCA1 encryption scheme from plaintext awareness. In: Visconti, I., De
Prisco, R. (eds.) SCN 2012. LNCS, vol. 7485, pp. 149–165. Springer, Heidelberg
(2012)
27. Myers, S., Shelat, A.: Bit encryption is complete. In: FOCS, pp. 607–616 (2009)
A Black-Box Construction 55
28. Pass, R., Shelat, A., Vaikuntanathan, V.: Construction of a non-malleable encryp-
tion scheme from any semantically secure one. In: Dwork, C. (ed.) CRYPTO 2006.
LNCS, vol. 4117, pp. 271–289. Springer, Heidelberg (2006)
29. Peikert, C., Waters, B.: Lossy trapdoor functions and their applications. SIAM J.
Comput. 40(6), 1803–1844 (2011)
30. Rompel, J.: One-way functions are necessary and sufficient for secure signatures.
In: STOC, pp. 387–394 (1990)
31. Rosen, A., Segev, G.: Chosen-ciphertext security via correlated products. SIAM J.
Comput. 39(7), 3058–3088 (2010)
32. Wee, H.: Efficient chosen-ciphertext security via extractable hash proofs. In: Rabin,
T. (ed.) CRYPTO 2010. LNCS, vol. 6223, pp. 314–332. Springer, Heidelberg (2010)
	A Black-Box Construction of a CCA2 EncryptionScheme from a Plaintext Aware (sPA1)Encryption Scheme
	1 Introduction
	1.1 Our Assumptions
	1.2 Our Results
	1.3 Technical Overview
	1.4 Related Work
	2 Preliminaries
	2.1 CCA2 Security
	2.2 Plaintext Awareness for Multiple Key Setup
	2.3 Weakly Simulatable Encryption Scheme
	2.4
	2.5 Strong One-Time Signature Scheme
	3 The Scheme
	4 Security Analysis
	4.1 Bad Extraction Event When
	4.2 Bad Extraction Event When
	References