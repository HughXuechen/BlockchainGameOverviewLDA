IIoT Data Sharing Based on Blockchain: A Multileader Multifollower Stackelberg Game Approach
4396 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
IIoT Data Sharing Based on Blockchain:
A Multileader Multifollower Stackelberg
Game Approach
Yuna Jiang , Graduate Student Member, IEEE, Yi Zhong , Member, IEEE,
and Xiaohu Ge , Senior Member, IEEE
Abstract—The evolution of the Industrial Internet of Things
(IIoTs) greatly increases the volume of data generated by the
connected IIoT devices. IIoT data are playing an increasingly
important role in various industrial sectors. IIoT data sharing
helps enterprises make better production decisions and respond
to market changes timely. However, the distrust among IIoT enti-
ties and IIoT entities’ distrust of data-sharing platforms may
hinder the realization of data sharing. In this article, a decen-
tralized IIoT data-sharing scheme based on blockchain and edge
computing is proposed. A Proof of Storage and Transmission
(PoST) consensus mechanism is proposed to meet data storage
and transmission requirements of data owners in IIoT data-
sharing networks. Based on the manufacture ties of data owners,
shared data request probabilities are derived. The IIoT data
sharing interactions between data owners and edge devices are
modeled as a multiple-leader and multiple-follower Stackelberg
game. The alternating direction method of multipliers (ADMMs)
algorithm is used to obtain the optimal IIoT data sharing solu-
tions in a distributed manner. Simulation results show that
compared with the cooperative scheme, the total profit of edge
devices is maximally increased by 59%, and the total utility of
data owners is maximally increased by 52%.
Index Terms—Alternating direction method of multipliers
(ADMM) algorithm, blockchain, data sharing, Industrial Internet
of Things (IIoTs), Stackelberg game.
I. INTRODUCTION
ADVANCES in the Industrial Internet of Things (IIoTs)
have contributed to the development of Industry 4.0.
5G IIoT focuses on the connectivity of intelligent devices
in different industrial sectors, including manufacturing, agri-
culture, healthcare systems, oil and gas industries, etc., [1].
IIoT systems collect various types of industrial data that
contain traffic records of freight transport systems, data gener-
ated during industrial processes, etc., [2]. The data generated
in the industrial networks play a crucial role in industrial
decision making [3]. In order to effectively use industrial
data to drive the development of intelligent manufacturing,
data sharing is proposed to enhance the potential value of
Manuscript received April 25, 2021; revised July 11, 2021; accepted
August 4, 2021. Date of publication August 10, 2021; date of current ver-
sion March 7, 2022. This work was supported by the National Natural
Science Foundation of China under Grant U2001210. (Corresponding author:
Xiaohu Ge.)
The authors are with the School of Electronic Information and
Communications, Huazhong University of Science and Technology,
Wuhan 430074, Hubei, China (e-mail: xhge@mail.hust.edu.cn).
Digital Object Identifier 10.1109/JIOT.2021.3103855
data [4]–[6]. In the existing IIoT networks, the data collected
by smart devices are usually transferred to a centralized cloud
platform for processing [7]. Most enterprises only utilize their
own data and have no access to data from other industrial enti-
ties. Although some centralized data sharing platforms, such
as Factual, InfoChimps, etc., allow different entities to share
data. Distrust between data owners and data-sharing platforms
hinders the data sharing. A decentralized data sharing scheme
is urgently needed to make the most of the potential value of
IIoT data.
Blockchain has attracted widespread attention in recent
years due to its decentralization, autonomy, immutability, and
traceability. Structural data stored on the blockchain need to
be maintained by the entire network, which promotes value
transfer between nodes without trust [8]. Blockchain is con-
sidered as a critical technology for the decentralization of
IIoT [9]. Bitcoin is the first application of blockchain that can
only be used for digital currency transactions. Vitalik Buterin
introduces smart contracts into the blockchain, which makes
the application of blockchain more diversified. Access con-
trol of data sharing in IIoT networks can be realized based on
blockchain and smart contracts, such as the access control of
healthcare data [10], access control management of Internet of
Things (IoTs) devices [11], and resource and data access con-
trol between IoT devices [12]. Although the blockchain solves
the IIoT data-sharing challenge for decentralization, there
are still many problems when directly applying blockchain
to IIoT data-sharing networks. In the blockchain consensus
mechanism, nodes participating in the consensus process are
responsible for transaction validation, block validation, and
consensus formation. The decentralized consensus and the dis-
tributed ledger storage of blockchain networks put forward
higher requirements for the capabilities of nodes in blockchain
networks. However, most low-power IIoT devices are unable
to participate in the consensus process. For the IIoT data shar-
ing in blockchain-enabled networks, the storage of shared data
needs to be considered. Each full node in blockchain networks
needs to store the full distributed ledger of the blockchain
locally. The shared data stored in the distributed ledger of
blockchain may cause a significant waste of storage resources,
and the large amount of data contained in transactions may
result in a negative effect on the performance of blockchain
networks. Besides, frequently transmitting the shared data may
increase the energy consumption of low-power IoT devices and
2327-4662 c© 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-0023-6569
https://orcid.org/0000-0001-5584-0988
https://orcid.org/0000-0002-3204-5241
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4397
TABLE I
ANALYSIS OF RELATED WORKS ABOUT BLOCKCHAIN-ENABLED DATA SHARING
cause serious interference due to the massive access [13]. Edge
computing is an auspicious solution to support the blockchain-
enabled IIoT networks [14]. The consortium blockchain is a
specific blockchain with multiple preselected nodes to estab-
lish the distributed ledger with moderate cost [15]. The
trustworthy edge devices can be preselected to reach the con-
sensus by using consortium blockchain. The integration of
consortium blockchain and edge computing can enable reli-
able control of networks as well as distributed storage and
computation at the edges [16]. How to incorporate the edge
computing and consortium blockchain into IIoT data-sharing
networks to realize the decentralized IIoT data sharing needs
to be further studied.
Another problem related to IIoT data sharing is the man-
ufacture ties embedded in the IIoT networks. Manufacture
tie networks are defined as groups of IIoT individuals with
some patterns of manufacture interactions, forming certain
manufacture relationships. For example, air conditioner man-
ufacturers and air conditioning accessories manufacturer may
form a manufacture tie network. Manufacture tie networks
can be considered as social IoT networks in the indus-
trial production. The objective of social IoT networks is to
build social collaborative networks for smart objects, which
improves service discovery and resource visibility in IoT
networks [17], [18]. Social IoT networks have been stud-
ied extensively in coastal monitoring [19], semantic virtual-
object-enabled real-time management [20], intrusion detec-
tion [21], large-scale smart environment development [18],
etc. Manufacture relationships between IIoT entities may
influence data sharing, as IIoT entities tend to share data
with manufacture related entities. However, the manufacture
ties between IIoT entities in the blockchain-enabled IIoT
data sharing networks have not been studied in the litera-
ture.
In this article, an IIoT data-sharing scheme is proposed
based on consortium blockchain and edge computing. The data
sharing interactions among data owners, data consumers, and
edge devices are investigated. The main contributions of this
article are summarized as follows.
1) Based on data storage and transmission demand
of data owners in IIoT data-sharing networks, a
Proof of Storage and Transmission (PoST) consensus
mechanism is proposed. During each consensus period,
the probability that consensus nodes obtains consensus
rewards depends on the amount of shared data stored and
transmitted.
2) The shared data request probability is derived based
on the manufacture ties of data owners, in which node
degree and local clustering coefficient are considered.
3) The interactions between data owners and edge devices
for IIoT data sharing are modeled as a multiple-
leader and multiple-follower Stackelberg game problem.
Considering the high-dimensional strategy space of
game players, the alternating direction method of
multipliers (ADMMs) algorithm is used to obtain the
optimized game solutions of IIoT data sharing.
4) Simulation results show that the proposed IIoT data-
sharing scheme converges to the optimal results quickly.
Both data owners and edge devices can achieve optimal
solutions. Besides, the proposed IIoT data-sharing
scheme is compared with the cooperative scheme. The
results show that the total profit of edge devices is max-
imally increased by 59%, and the total utility of data
owners is maximally increased by 52%.
The remainder of this article is organized as follows.
Related works are presented in Section II. The system model
of the proposed IIoT data-sharing scheme is presented in
Section III. Problem formulation is presented in Section IV.
Multileader multifollower Stackelberg game formulation is
shown in Section V. The ADMM algorithm is used to
solve the Stackelberg game in Section VI. Section VII
shows simulation results. Finally, Section VIII concludes this
article.
II. RELATED WORKS
The blockchain-enabled data sharing networks were inves-
tigated in [22]–[27]. The critical analysis about the related
works is summarized in Table I. In [22], a reliable collab-
oration model based on blockchain and smart contracts was
proposed to ensure the security of data sharing among mul-
ticloud platforms. Liu et al. [23] proposed an efficient data
collection and sharing scheme based on blockchain. A reli-
able and secure environment was created by combining the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
4398 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
Ethereum blockchain and deep reinforcement learning. In [24],
a data training scheme was proposed to protect data privacy
in the IoT networks. A safe and reliable data-sharing platform
among multiple data providers was built through blockchain.
In the data-sharing schemes proposed in [22]–[24], data own-
ers encrypt the data that needs to be shared, and store it on
the blockchain. The distributed ledger of the blockchain is
stored in each full node. If the shared data are stored on
the blockchain, it will cause a significant waste of storage
resources. Besides, the large size of transactions will add a
negative impact on the performance of the entire blockchain
network. Therefore, it is not a feasible scheme to store the
shared data on blockchain. In some other blockchain-based
data-sharing studies, an interplanetary file system (IPFS) was
used for the storage of shared data [25]–[27]. Wang et al. [25]
proposed a data storage and sharing architecture that com-
bines IPFS, Ethereum, and attribute-based encryption. In [26],
a new electronic medical data-sharing framework based on
blockchain and IPFS was proposed, and a reliable access con-
trol mechanism was designed by using smart contracts. In [27],
an attribute-based encryption scheme was proposed to achieve
safe storage and efficient sharing of electronic medical records.
IPFS was used to store the encrypted electronic medical data.
IPFS is a decentralized storage protocol, which allocates a
unique hash for each data packet. Only the hash values of
data packets need to be stored on the blockchain with IPFS.
However, the stable operation of IPFS networks requires users
to contribute storage space and network bandwidth. If there is
no appropriate incentive mechanism, it is difficult to maintain
the ongoing operation of a network with huge storage resource
overhead.
Some other studies focus on the consensus mechanisms
of blockchain networks [28]–[31]. The consensus mecha-
nism is critical for blockchain networks. Both Bitcoin and
Ethereum adopt the Proof-of-Work (PoW) algorithm that is
strongly dependent on computation [28]. It is hard for low-
power IoT devices to operate the PoW consensus mechanism.
Hyperledger Fabric adopts the traditional practical Byzantine
fault tolerance (PBFT) algorithm [29]. The PBFT algorithm
effectively solves the low-efficiency problem of the original
Byzantine fault-tolerant algorithm. The algorithm complex-
ity is reduced from exponential to polynomial, making the
Byzantine fault-tolerant algorithm feasible in practical appli-
cations. However, in IIoT networks with a large number of
nodes, the communication complexity of PBFT will increase
significantly. For the decentralized data storage, FileCoin
proposed the PoS consensus mechanism that includes the
proof of data possession (PDP) and Proof of Retrievability
(PoR) [30], [31]. Compared with the PoW consensus mecha-
nism, consensus nodes that participate in the PoS consensus
mechanism do not need to waste a large amount of computing
power on hash computation. Consensus nodes can increase
their probabilities of getting consensus rewards by provid-
ing more storage space for other devices. In the research
of blockchain-based IIoT data sharing, data sharing require-
ments and consensus mechanism design should be considered
jointly to achieve efficient data sharing among multiple IoT
entities.
Fig. 1. System framework.
III. SYSTEM MODEL
A. System Framework
In the consortium blockchain-enabled IIoT data-sharing
networks, the edge computing is introduced to support the
distributed consensus of blockchain networks due to the
incapabilities of IIoT devices. Fig. 1 shows the IIoT data-
sharing system framework. The physical domain contains
the block consensus layer and IIoT device layer. Individuals
in the manufacture domain correspond to IIoT devices in
the IIoT device layer. There are manufacture ties between
IIoT devices, and device pairs with manufacture ties are
interested in the same data type. The block consensus layer
and IIoT device layer in the physical domain are introduced as
follows.
1) Block Consensus Layer: In the block consensus
layer, edge devices with strong hardware capabili-
ties can be admitted to join the consensus process
of blockchain networks. As consensus nodes of the
blockchain networks, edge devices are responsible for
the block consensus, verification, and packaging of
data-sharing transactions, etc. The edge device set is
D = {D1, . . . , Dd, . . . , DND}, and ND = |D|. The con-
sensus mechanism among edge devices is PoST. During
each consensus period, the probabilities that the edge
devices receive the consensus reward depend on the
amount of shared data they stored or transmitted. Edge
devices participating in the consensus process form
a distributed storage network. IIoT data owners can
store the shared data in the distributed storage network.
Meanwhile, the address of data storage is recorded on
the blockchain distributed ledger.
2) IIoT Devices Layer: In the IIoT devices layer, IIoT
devices can be data owners or data consumers. Data own-
ers collect data from IIoT networks and share the collected
data by sending transactions to blockchain networks. The
data owner set is O = {O1, O2, . . . , Oi, . . . , ONO}, and
NO = |O|. The set of data packets shared by data own-
ers is F = {F1, F2, . . . , Fi, . . . , FNO}. Data consumers
request the interested data from blockchain networks.
The data consumer set is C = {C1, . . . , Cj, . . . , CNC },
and NC = |C|.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4399
Fig. 2. IIoT data-sharing process.
B. IIoT Data-Sharing Process
The process of data sharing between IIoT devices through
blockchain networks is shown in Fig. 2. In the IIoT
data-sharing interaction stage, when the data owner Oi wants
to share data Fi, Oi first requests data storage services by call-
ing functions written in the smart contract. The shared data of
Oi are stored in the distributed storage networks when the
edge devices provide the storage service for Oi. The address
of shared data stored by the data owner Oi is recorded on
the blockchain distributed ledger. When the data consumer Cj
requests data through the smart contract. If the data requested
by Cj exist in blockchain networks, such as the data stored
on the edge device Dd by Oi, Oi would send data transmis-
sion transactions to request data transmission service from
Dd. Then, Dd transmits the requested data to Cj. If the data
requested by Cj does not exist in blockchain networks, Cj
needs to wait for the data owners with the related requested
data to store the data in the distributed storage networks. After
the data consumer Cj gets the requested data from data own-
ers, such as Oi, Cj would share the quality information of the
shared data to other data consumers with manufacture ties.
If the data quality of Oi is high, then more data consumers
who have manufacture ties with Oi would request data from
Oi. The interaction processes among data owners, data con-
sumers, and edge devices are operated automatically through
smart contracts without relying on third-party platforms. In the
blockchain formation stage, edge devices that are consensus
nodes reach consensus based on the PoST mechanism. Then,
the selected block that includes the block header and trans-
action data is added into the blockchain distributed ledger to
form the traceability of shared data.
C. IIoT Data-Sharing Smart Contracts
Smart contracts are modular, reusable, and automatically
executed scripts that run on the blockchain. Smart contracts
are stored on the blockchain distributed ledger, so each node
can execute functions written in smart contracts, and check
the logs of interactions with smart contracts [32]. In the
blockchain-enabled IIoT data-sharing networks, the interaction
principles among data owners, data consumers, and edge
devices, including the shared data storage and transmission
principles among data owners and edge devices, and the data-
sharing principles among data owners and data consumers, are
recorded on the blockchain. Any IIoT entity can call func-
tions written in smart contracts by sending transactions to
blockchain networks, and then, the corresponding principles
can be realized automatically. The proposed IIoT data-sharing
scheme mainly contains the following smart contracts.
1) Data Storage and Transmission Service Smart Contract:
Shared data storage and transmission principles among
data owners and edge devices are written in the data
storage and transmission service smart contract. By call-
ing data storage functions in the smart contract, data
owners can request storage services from edge devices.
The storage time for one storage service request is set
as a constant in the smart contract. The shared data of
data owners are stored on the edge devices for the set
time when the edge devices provide the storage services
through blockchain. The stored data are deleted by the
edge devices when the storage time exceeds the set time.
Meanwhile, the addresses of data storage are recorded on
the blockchain distributed ledger. When data consumers
send data request transactions to blockchain networks,
data owners would call the data transmission function in
the smart contract. Then, the edge devices that stored the
requested data will transmit the data to data consumers.
After above transactions are verified and recorded on
blockchain, edge devices will receive data storage and
transmission service charges from data owners.
2) Data-Sharing Smart Contract: Data-sharing principles
among data owners and data consumers are written in
the data-sharing smart contract. Data consumers can
request data from data owners by calling functions in
the data-sharing smart contract. Data owners who own
the requested data would call the data transmission func-
tion in the data storage and transmission service smart
contract. Then, edge devices that stored the requested
data will transmit the data to data consumers. After data
consumers receive the requested data successfully, the
data owners who provide the shared data will receive
payoffs from data consumers.
D. Consensus Mechanism
In the consortium blockchain-enabled IIoT data-sharing
networks, it is hard for low-power IIoT devices to main-
tain stable blockchain networks, as the consensus process is
computing intensive or storage intensive. Edge devices with
strong hardware capabilities can support the IIoT blockchain
networks and join the block distributed consensus process. In
the proposed IIoT data sharing scheme, edge devices need
to provide storage service for IIoT data owners. Besides,
edge devices need to transmit the requested data to data con-
sumers who get data access permissions from data owners.
The amount of IIoT data that edge devices stored and trans-
mitted can both indicate the contributions of edge devices
to data-sharing networks. Therefore, a Proof-of storage and
transmission consensus mechanism is proposed in this arti-
cle. During each consensus period, whether edge devices can
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
4400 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
obtain the consensus reward depends on the amount of shared
data stored and transmitted. During the consensus period T ,
the amount of shared data storage in edge device Dd (Dd ∈ D)
is denoted as Data_Sd, and the amount of shared data trans-
mission in Dd is denoted as Data_Td. The probability that Dd
gets the consensus reward is
Pd = Data_Sd + Data_Td
∑ND
d=1 (Data_Sd + Data_Td)
. (1)
IV. PROBLEM FORMULATION
In the proposed IIoT data-sharing scheme, the positivity
of edge devices to join the consensus process of blockchain
networks and the enthusiasm of data owners to share data are
the main focus to ensure the stable operation of IIoT data-
sharing networks. Both edge devices and data owners might
be willing to participate in data-sharing networks if they can
obtain payoffs. In this section, the shared data request proba-
bility based on manufacture ties is analyzed. Then, the utility
function of data owners and the profit function of edge devices
are derived.
A. Data Request Probability Based on Manufacture Ties
When data owners share data with data consumers, data
owners need to request data storage and transmission service
from edge devices through blockchain networks. Based on the
shared data storage service, data owners can store the shared
data in edge devices. Based on the shared data transmission
service, data consumers can get the requested data from edge
devices with data owners’ permissions. The probability is that
the shared data requested by data consumers depend on the
manufacture ties of data owners.
IIoT devices with manufacture ties are interested in the same
data type, and share data or data quality information. The man-
ufacture ties between data owners and data consumers mean
that data consumers would request data from data owners.
The manufacture ties between data consumers mean that data
consumers would share the data quality information. The man-
ufacture ties between IIoT devices are represented by a graph
G = (V, E), and V = {v1, v2, . . . , vn} is the set of vertices and
E = {eab : (a, b) ⊂ [1, . . . , n]2} is the set of edges between
vertices, eab is the edge connecting vertex va and vb. The
existence of eab represents that va and vb have a manufacture
tie, namely, va and vb are interested in the same data type.
The node degree and clustering coefficient have been widely
studied as the critical indicators of social networks [33]. In
an undirected and unweighted network, the node degree is
the number of neighbor nodes. The neighbor nodes of va are
nodes who are connected with va. The neighbor node set of
va is �a = {vb : eab ∈ E}, and the number of elements in
�a is Ma. Thus, the node degree of va is Ma. The clustering
coefficient of va denotes the degree of interconnection among
neighbor nodes of va. A larger cluster coefficient of va indi-
cates that the neighbor nodes of va are connected with a greater
probability [34]. The local clustering coefficient of va is
CCa = 2|{eab : va, vb ∈ �a, eab ∈ E}|
Ma(Ma − 1)
. (2)
Fig. 3. Manufacture tie network of IoT devices.
In IIoT data-sharing networks, the node degree of data
owner Oi (Oi ∈ O) represents the number of IIoT devices
that have manufacture ties with Oi. The local clustering coef-
ficient of Oi represents the probability that IIoT devices who
are connected with Oi have manufacture ties with each other.
The node degree and local clustering coefficient of Oi can both
evaluate the manufacture ties of Oi. In order to better under-
stand the manufacture ties between IIoT entities, we set an
example. As shown in Fig. 3, data owner O1 has manufacture
ties with data consumer C1, C2, C3, C4, and C5. The node
degree of O1 is 5, and the local clustering coefficient of O1
is 0.7. Assume that O1 shares the high-quality data through
blockchain networks. When C1 gets the high quality data F1
from O1, C1 would share the data quality information of F1
with nodes who have manufacture ties with O1, such as data
consumer C2 and C5. Then, C2 and C5 would prefer to request
F1 from O1. After C5 gets the data F1, C5 would continue to
share data quality information of F1 to C3 and C4, which urges
C3 and C4 to request F1. In IIoT data-sharing networks, Oi
with more manufacture ties would receive more data requests
from data consumers.
The manufacture tie factor of the data owner Oi is derived
based on the node degree and local clustering coefficient. The
manufacture tie factor of Oi is
SIOi = εCCOi × MOi (3)
where CCOi is the local clustering coefficient of Oi and MOi is
the node degree of Oi. ε is the positive proportional coefficient.
The request probability of data shared by Oi is
fOi = SIOi
∑NO
m=1 SIOm
. (4)
When the data owner Oi shares data, Oi will request data
storage and transmission service from different edge devices.
The shared data storage service requesting by Oi from edge
devices D is denoted as xs
i = {xs
i1, . . . , xs
id, . . . , xs
iND
}. The
shared data transmission service requesting by Oi from edge
devices D is denoted as xt
i = {xt
i1, . . . , xt
id, . . . , xt
iND
}. Xs =
{xs
1, . . . , xs
i , . . . , xs
NO
} represents the storage service demand of
all data owners, and Xs−i represents the storage service demand
of data owners other than Oi. Xt = {xt
1, . . . , xt
i, . . . , xt
NO
} repre-
sents the transmission service demand of all data owners, and
Xt−i represents the transmission service demand of data own-
ers other than Oi. The total amount of data storage service
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4401
provided by edge device Dd is
xs,total
Dd
=
NO∑
i=1
widxs
id. (5)
The total amount of data transmission service provided by the
edge device Dd is
xt,total
Dd
=
NO∑
i=1
widxt
id (6)
where wid is the probability that the data owner Oi chooses
the edge device Dd.
The shared data transmission service demand of Oi depends
on the shared data storage service demand and the request
probability of the stored data Fi. Assume that the number of
data request at the edge device Dd follows the Poisson distri-
bution with parameter λ. During the consensus period T , the
total number of data requests at Dd is Tλ, and the number of
data requests for the data packet Fi is fOi Tλ. The amount of
data transmission service requested by Oi at Dd is
xt
id = xs
idfOiTλ. (7)
Assume that the number of data requests at each edge device
all follows the Poisson distribution with parameter λ. Then,
the total amount of data transmission service requested by Oi
during T is
xt,total
Oi
=
ND∑
d=1
xs
idfOi Tλ. (8)
B. Profit Function of Edge Devices
In the proposed IIoT data-sharing scheme, the consensus
mechanism executed by edge devices is PoST. During each
consensus period, the probability that edge devices get the
consensus reward depends on the amount of shared data stored
and transmitted. In order to get the consensus reward, edge
devices would try their best to provide shared data storage
and transmission service. The probability that the edge device
Dd gets the consensus reward is
Pd
(
xs
i , Xs−i
) = xs,total
Dd
+ xt,total
Dd
∑ND
d=1
(
xs,total
Dd
+ xt,total
Dd
)
=
∑NO
i=1 widxs
id + ∑NO
i=1 widxs
idfOi Tλ
∑ND
d=1
(∑NO
i=1 widxs
id + ∑NO
i=1 widxs
idfOi Tλ
) . (9)
In addition to the consensus reward, the edge device Dd
can also obtain service profits from data owners. Besides, Dd
needs to pay for the storage and transmission expenditures.
The service prices that Dd sets for data owners O is denoted
as pd = {p1,d, . . . , pi,d, . . . , pNo,d}. The profit function of edge
device Dd is expressed as follows:
UDd = RPd
(
xs
i , Xs−i
) +
No∑
i=1
wid
(
xs
id + δxt
id
)
pi,d
−
No∑
i=1
widxs
idcs −
No∑
i=1
widxt
idct (10)
where the first part is the consensus reward, the second part
is the profits of data storage and transmission services that Dd
charges from data owners, the third part is the storage expen-
diture of Dd, and the last part is the transmission expenditure
of Dd. cs is the storage expenditure coefficient of edge devices.
ct is the transmission expenditure coefficient of edge devices.
δi is the pricing factor of the data transmission services pro-
vided by edge devices, which is related to the data request
probability of data owners. δi is expressed as
δi = 1 − fOi
fO,max
. (11)
In (11), δi is inversely proportional to fOi , which means that
edge devices prefer to provide services for data owners whose
shared data have a higher request probability.
C. Utility Function of Data Owners
Based on edge devices’ pricing scheme, data owners will
decide the amount of data shared through edge devices to
maximize their utilities. The utility function of data owners is
constituted by three parts. The first part is the utility obtained
by storing the shared data in edge devices. The second part
is the utility obtained by sharing data with data consumers.
The last part is the service expenses paid to edge devices. The
total amount of data shared by the data owner Oi with the aid
of edge devices D is expressed as xt,total
Oi
= ∑ND
d=1 widxt
id. The
utilities that data owners receive by storing shared data in edge
devices and sharing data with data consumers are represented
by the logarithmic function, whose marginal utility is dimin-
ishing [35], [36]. The utility of data owner Oi increases by
increasing the amount of data stored xs,total
Oi
and the amount of
data shared xt,total
Oi
. But the increase of utility becomes lower
when xs,total
Oi
and xt,total
Oi
are larger. The utility function of the
data owner Oi is
UOi = �1
ND∑
d=1
wid log
(
1 + xs
id
)
+ �2
ND∑
d=1
wid log
(
1 + fOi Tλxs
id
)
− �3
ND∑
d=1
widxs
id
(
1 + δfOi Tλ
)
pi,d (12)
where �1 is the utility coefficient of data storage, �2 is
the utility coefficient of data sharing, and �3 is the expense
coefficient of data owners.
In this article, the incentive mechanism in [37] is adopted
to define the probability that the data owner Oi chooses the
edge device Dd to provide service, and wid is expressed as
wid = pmax − pi,d
∑ND
k=1
(
pmax − pi,k
) (13)
where the numerator represents the difference between the
maximum value of service price pmax and the service price
of edge device Dd. The value of wid becomes larger, when
pi,d is lower, which is an incentive for edge devices to lower
their prices.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
4402 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
V. MULTILEADER MULTIFOLLOWER STACKELBERG GAME
FORMULATION
Game theory is a powerful tool to study the distributed
decision making of strategic agents [38]. In this section,
the interactions between edge devices D and data owners O
are modeled as a multileader and multifollower Stackelberg
game. Stackelberg game is a two-stage complete information
dynamic game that describes sequential interactions between
strategy players. In stage I, the edge devices act as leaders to
set the prices of data services. In stage II, the data owners act
as followers of the game to decide the amount of data stored
and transmitted. In this article, the amount of data transmission
can be represented by the amount of data storage requested by
data owners O. The price of data transmission services can be
represented by the price of data storage services provided by
edge devices D. Therefore, we only need to study the amount
of data storage requested by data owners O and the price of
data storage services provided by edge devices D.
A. Data Owners’ Service Demand in Stage II
In stage II, the pricing scheme of edge devices
is given as P = {p1, . . . , pd, . . . , pNd }, and pd =
[pi,d](0 ≤ pi,d ≤ pmax, 1 ≤ i ≤ NO). The data storage strategy
of data owners except for data owner Oi is obtained as Xs−i.
The data owner Oi decides its data storage demand xs,total
Oi
by
optimizing the following objective function:
UOi
(
xs
i , Xs−i, P
) = �1
ND∑
d=1
wid log
(
1 + xs
id
)
+ �2
ND∑
d=1
wid log
(
1 + fOiTλxs
id
)
− �3
ND∑
d=1
widxs
id
(
1 + δfOi Tλ
)
pi,d. (14)
The subgame of the data owner Oi is formulated as follows:
max
xs
i
UOi
(
xs
i , Xs−i, P
)
s.t. xs
id ≥ 0
ND∑
d=1
xs
id ≤ Smax (15)
where Smax is the maximum amount of data stored by each
data owner. Considering the privacy problem, data owners will
not increase the amount of shared data indefinitely.
B. Edge Devices’ Pricing Strategy in Stage I
In stage I, based on data owners’ data storage demand Xs,
and the pricing scheme of other edge devices except for edge
device Dd that is P−d, each edge device determines the price
of its data storage services to maximize profit. The objective
function for the edge device Dd is
UDd
(
pd, P−d, Xs) = R
∑NO
i=1 widxs
id
(
1 + fOi Tλ
)
∑ND
d=1
∑NO
i=1 widxs
id
(
1 + fOi Tλ
)
+
No∑
i=1
widxs
id
(
1 + δfOiTλ
)
pi,d
−
No∑
i=1
widxs
id
(
cs + fOi Tλct
)
. (16)
The subgame of the edge device Dd is formulated as follows:
max
pd
UDd
(
pd, P−d, Xs)
s.t. 0 ≤ pi,d ≤ pmax. (17)
The difficulty in solving the multileader and multifol-
lower game problem proposed in this article lies in the
high-dimensional strategy space of each data owner. The tradi-
tional backward compatible method is no longer suitable. The
ADMM optimization algorithm is adopted to solve the optimal
solution of the Stackelberg game between edge devices and
data owners.
VI. OPTIMIZATION OF UTILITY AND PROFIT BASED ON
ADMM ALGORITHM
In the blockchain-enabled IIoT data-sharing networks, both
edge devices and data owners are rational agents who want
to maximize their payoffs. However, maximizing the profit
of the edge device Dd will affect the payoffs of other edge
devices and all data owners. Maximizing the utility of the data
owner Oi will affect the payoffs of other data owners and all
edge devices. The ADMM algorithm can decompose a com-
plex optimization problem into multiple subproblems to deal
with distributed multiparameter convex optimization problems
in the scenarios with large scale. Besides, the ADMM algo-
rithm has good convergence. The ADMM algorithm is feasible
to the distributed blockchain-enabled IIoT data-sharing system
constituted by multiple edge devices and multiple data own-
ers. In this article, the ADMM algorithm is adopted to solve
the multileader multifollower Stackelberg game problem in the
proposed IIoT data-sharing networks.
The multileader multifollower Stackelberg game problem
proposed in this article contains two-level iterations. In the
inner loop, based on the service pricing scheme P given by
edge devices, data owners employ the ADMM algorithm to
obtain the optimal amount of data storage Xs that maximize
their utilities. In the outer loop, edge devices act as leaders
to give the pricing scheme P that maximize edge devices’
profits. Data owners act as followers and update their shared
data storage strategy Xs based on the pricing scheme updated
by edge devices.
The iterative optimization problem between data owners and
edge devices is shown as follows.
A. Inner Loop
In the inner loop, the ADMM algorithm is used to solve the
optimal strategies of data owners in the qth outer loop, where q
is the number of outer loop iterations. The utility optimization
of data owners is shown in (15), which has inequality con-
straints. To use the ADMM algorithm to solve the problem, we
first need to transform the inequality-constrained optimization
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4403
problem into an equality-constrained optimization problem.
The transformed problem is
max
xs
i
UOi
(
xs
i , Xs−i, P
)
s.t. fid
(
xs
id
) = 0
gi
(
xs
i
) = 0 (18)
where fid(xs
id) = max {0,−xid}2, and gi(xs
i ) =
max {0,
∑ND
d=1 xs
id − Smax}2 [39], [40].
The number of the inner loop is denoted as t, and the process
of solving the optimal solution based on the ADMM algorithm
in the inner loop is shown as follows. For the utility function
of the data owner Oi shown in (14), its augmented Lagrangian
function is
L
(
xs
i , ηi, μi
)
= UOi + ηT
i
ND∑
d=1
fid
(
xs
id
) + ρ
2
∥
∥
∥
∥
∥
ND∑
d=1
fi
(
xs
id
)
∥
∥
∥
∥
∥
2
2
+ μT
i gi
(
xs
i
) + ρ
2
∥
∥gi
(
xs
i
)∥
∥2
2 (19)
where ηi and μi are dual variables. The variable xs
i is decom-
posed and updated based on the scale-form solution of the
ADMM algorithm. The strategy update steps are shown in
(
xs
id
)q
(t + 1)
= argmax
xs
id
(
UOi
) + ρ
2
∥
∥fid
(
xs
id
)q
(t + 1) + γ t
i
∥
∥2
2
+ ρ
2
∥
∥gid
(
xs
id
)q
(t + 1) + vt
i
∥
∥2
2 (20)
gid
(
xs
id
)q
(t + 1)
= max
⎧
⎪⎪⎪⎨
⎪⎪⎪⎩
0,
d−1∑
k=1
(
xs
ik
)q
(t + 1) + (
xs
id
)q
+
ND∑
k′=d+1
(
xs
ik′
)q
(t) − Smax
⎫
⎪⎪⎪⎬
⎪⎪⎪⎭
2
(21)
where γi and vi are scale-form dual variables, and are
expressed as
γi = ηi
ρ
(22)
vi = ui
ρ
. (23)
The update step of γi is shown as
γ t+1
i = γ t
i + max
{
0,−(xi)
q(t + 1)
}2
. (24)
The update step of vi is shown as
vt+1
i = vt
i + max
{
0,
ND∑
d=1
(xid)
q(t + 1) − Smax
}2
(25)
where ρ > 0 is a damping factor. Data owners’ strategy
xs
i (1 ≤ i ≤ NO) is updated based on the above iterative steps
until xs
i , γi, and vi no longer change significantly. In the
iterative update process of xs
id, the bisection method is used to
get the optimal value of xs
id that maximizes UOi .
Algorithm 1 IIoT Data-Sharing Strategy Game Optimization
Algorithm
Input: pi,d ∈ [
0, pmax
]
, where d = 1, 2, · · · , ND, i =
1, 2, · · · , NO, 
, q = 1;
Output: Optimal storage strategy of data owners
(
xs
id
)∗;
Optimal pricing strategy of edge devices
(
pi,d
)∗;
While
∥
∥
∥UDd
(
pi,d
)q − UDd
(
pi,d
)q−1
∥
∥
∥ ≤ 
1: Inner loop: Based on the pricing strategy given by edge
devices pi,d, data owners iteratively update the storage
strategy based on the ADMM algorithm to obtain the
optimal amount of data storage
(
xs
id
)q that maximizes UOi ;
2: Outer loop: Based on the storage strategy given by data
owners, the edge devices get the optimal value of
(
pi,d
)q
that maximizes UDd with the bisection method;
3: q = q + 1
4: Result:Optimal storage strategy of data owners
(
xs
id
)∗;
Optimal pricing strategy of edge devices
(
pi,d
)∗;
B. Outer Loop
In the outer loop, when edge devices get the strategies Xs =
{xs
1, . . . , xs
i , . . . , xs
NO
} of data owners in the qth outer loop, each
edge device adjusts its pricing strategy to maximize the profit.
The iterative steps for the edge device Dd to adjust its pricing
strategy are shown as follows:
(
pi,d
)q
(t + 1) = arg max
pi,d
(
UDd
(
pi,d
)q)
. (26)
Each edge device gradually updates its service pricing strategy
pd = {p1,d, . . . , pi,d, . . . , pNo,d} based on the above iterative
steps. After all edge devices update the pricing strategy, they
will notify the data owners of the updated pricing strategies.
Then, the q + 1th outer loop starts. The outer loop of the
algorithm is formed. The condition under which the outer loop
ends is shown as follows:
∥
∥
∥UDd
(
pi,d
)q − UDd
(
pi,d
)q−1
∥
∥
∥ ≤ 
 (27)
where 1 ≤ i ≤ NO, 1 ≤ d ≤ ND, 
 is the predefined threshold.
During the iteration of pricing strategies given by edge devices,
the optimal strategy (pi,d)
q that maximizes UDd (pi,d)
q needs to
be solved. Considering the complexity of the profit function of
edge devices, the bisection method is used to get the optimal
value of pi,d that maximizes UDd (pi,d)
q.
C. Convergence Analysis
The framework of the Stackelberg game-based optimization
algorithm is shown in Algorithm 1. From [41]–[43], it has
been shown that the ADMM converges to the stable optimal
solutions when the minimum objective function is separable
and convex. After checking the utility function of data owners
UOi(x
s
i , Xs−i, P), we have the following proposition.
Proposition 1: The utility function of each data owner
UOi(x
s
i , Xs−i, P) is strictly concave.
Proof: See Appendix A.
We will further give the convergence analysis of the ADMM
algorithm used in the inner loop. Based on the concave of data
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
4404 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
owners utility function, the convergence of the ADMM algo-
rithm in the inner loop is analyzed as follows. The Lagrangian
function of problem (18) is given as follows:
L0
(
xs
i , ηi, μi
) = UOi + ηT
i
ND∑
d=1
fid
(
xs
id
) + μT
i gi
(
xs
i
)
. (28)
Based on the dual theory, we can get that for all xs
i ∈
Xs, there is
L0
(
xs∗
i , η∗
i , μi
∗) ≥ L0
(
xs
i , η
∗
i , μi
∗) (29)
where xs∗
i , γ ∗
i , and μi
∗ are optimal primal and dual vari-
ables. The Lagrangian function is identical to the augmented
Lagrangian function with ρ = 0. Considering that the strong
duality holds, the optimal solution of problem (18) is the same
as the optimal solution of the Lagrangian dual. The optimal
function value is defined as U∗
Oi
, and the residuals of the equal-
ity constraints are defined as rt
gi
= gi(xs
i )
t and rt
fi
= fi(xs
i )
t,
respectively. Then, we have the following theorem.
Theorem 1: The ADMM algorithm used in the inner loop
satisfies the following convergence.
1) Convergence of the Residuals: When t → ∞, we get
rt
gi
→ 0, rt
fi
→ 0.
2) Convergence of the Optimal Function Value: When t →
∞, the function value will approach the optimal function
value, UOi → U∗
Oi
.
The proof of Theorem 1 can be found in [40]. The conver-
gence of the inner loop is proved. For the outer loop, we need
to prove the concave of the profit function UDd (pd, P−d, Xs).
We have the following proposition.
Proposition 2: The profit function of each edge device
UDd (pd, P−d, Xs) is strictly concave.
Proof: See Appendix B.
Based on the above analysis, we can get that the proposed
IIoT data-sharing strategy game optimization algorithm is
convergent.
D. Computation Complexity
In the proposed IIoT data-sharing strategy game
optimization algorithm, each data owner decides its storage
strategy based on the ADMM algorithm. The complexity of
the ADMM algorithm is O(1/
2), where 
 is the predefined
tolerance or convergence index of the ADMM algorithm [44].
Since there are NO data owners, the time required for the inner
loop is O(NO/
2). Then, the edge devices give the pricing
strategy for each data owner. The complexity of the outer
loop is O(NOND). Besides, the number of iterations required
for the convergence of the algorithm is O((NOND)/
).
Therefore, the total computation complexity of the proposed
scheme is O([NOND/
]([NO/
2] + NOND)).
E. Communication Overhead
The communication overhead can be described by the num-
ber of scalars exchanged by edge devices and data owners. At
the end of the inner loop, each data owner needs to send its
storage strategy to edge devices. The total number of scalars
sent to the edge devices is equal to NOND. Then, the edge
Fig. 4. Implementation of smart contracts.
devices announce the pricing strategy to each data owner. The
number of transmitted scalars is NOND. The total number of
iterations required for convergence is O(NOND/
), and when
the convergence is reached, the edge devices announce the
optimal pricing strategy to each data owner. Therefore, the
total number of scalars transmitted, that is, the communication
overhead, is 2O((NOND)/
)(NOND) + NOND.
VII. IMPLEMENTATION AND SIMULATION ANALYSIS
In this article, the designed smart contracts are implemented
and tested on the Ethereum blockchain platform. The imple-
mentation process is shown in Fig. 4. The Solidity language is
used to write the smart contracts. The blockchain node cluster
that includes the data owner, data consumer, and edge device
is built based on go-ethereum (geth). The configuration file for
the genesis block is defined, including the blockchain network
ID, gas limit, etc. Each geth node can open a Javascript
Console, where the built-in objects can execute certain opera-
tions. The designed smart contracts are compiled and deployed
on the blockchain node cluster based on the truffle frame-
work. Then, each blockchain node can interact with the smart
contracts. In the following, the shared data request proba-
bility based on manufacture tie networks is first analyzed.
Then, the convergence of the ADMM algorithm based on the
Stackelberg game is analyzed. The performance of the multi-
leader and multifollower data-sharing scheme proposed in this
article is compared with the cooperative scheme. Without spe-
cific explanation, the simulation parameters of this article are
set as follows T = 20, R = 5000, λ = 30, 
 = 0.01, �1 = 5,
�2 = 5, �3 = 0.1, pmax = 20, and Smax = 300.
A. Simulation Analysis of Data Request Probability
In this section, the data request probability of data owners
based on manufacture tie networks is analyzed. The manufac-
ture tie network between IIoT devices is formed based on the
NW model and Octopus model. The NW model is a small
world model proposed in [45]. The NW network model starts
with the vertex ring, and edges are randomly added between
pairs of selected vertices. The Octopus model is proposed
based on small-world and scale-free network model [46]. In
the Octopus model, nodes are allowed to have a random num-
ber of long-range contacts, and a threshold is set for nodes to
form short-range contacts. The manufacture ties between IIoT
devices include long-range contacts and short-range contacts,
representing far and close social connections, respectively. The
number of short-range contacts for each IIoT device is equal
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4405
(a) (b)
Fig. 5. Data request probability of data owners. (a) Data request probability
(M=2). (b) Data request probability (M=5).
to the initialized node degree. The long-range contacts are ran-
domly added between IIoT devices with a probability pro_add.
In the simulation environment, the initialized node degree of
IIoT devices is M, and the number of data owners is NO.
For each data owner, edges are randomly added between data
owners and other unconnected IoT devices with a probability
pro_add, which are long-range contacts of data owners. The
data request probability of data owners can be obtained based
on the formed manufacture tie network. In this section, the
number of data owners is 4, and the values of pro_add for
four data owners are 0.2, 0.4, 0.6, and 0.8, respectively.
Fig. 5 shows the data request probability of data owners
with different pro_add. As shown in Fig. 5, when the ini-
tialized node degree M is fixed, the data request probability
of data owners grows with the increase of pro_add. Besides,
with the increase of M, the difference in the data request prob-
ability among data owners decreases. As the increase of M
mitigates the impact of local clustering coefficient on the data
request probability.
B. Simulation Analysis of Stackelberg Game-Based IIoT
Data Sharing
In this section, the multileader multifollower Stackelberg
game-based IIoT data sharing is simulated and analyzed.
First, the convergence of the data-sharing strategy game
optimization algorithm is shown. Then, numerical results about
the performance of the proposed data-sharing scheme are
shown. Finally, the proposed IIoT data-sharing scheme is
compared with the cooperative scheme.
Fig. 6 shows the convergence of the data-sharing strategy
game optimization algorithm. We consider four data owners
and three edge devices, and the data request probabilities of
data owners can be obtained from above simulation results,
which are 0.1398, 0.2075, 0.2890, and 0.3637, respectively.
The value of cs is 1, 5, and 10 for each edge device. The value
of ct is 1, 5, and 10 for each edge device, and λ = 6. From
Fig. 6, we can get that the utilities of data owners and profits of
(a)
(b)
(c)
Fig. 6. Convergence among data owners and edge devices to get the optimum
results. (a) Utilities of data owners versus iteration number. (b) Profits of edge
devices versus iteration number. (c) Amount of data stored versus Iiteration
number.
edge devices all converge quickly. As shown in Fig. 6(a), the
utility of data owner 4 is maximum while the utility of data
owner 1 is minimum. We can get that with the increase of
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
4406 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
Fig. 7. Average utility of data owners as function of pmax (cs = ct = 1).
Fig. 8. Average profit of edge devices as function of pmax (cs = ct = 1).
data request probability, the utilities of data owners increase.
From Fig. 6(b), the profit of edge device 1 is maximum, as
the data storage and transmission overhead of edge device 1
are minimum. From Fig. 6(c), the amount of data stored by
data owner 4 is higher than other three data owners, as the
data owner 4 has the highest data request probability.
Fig. 7 shows the average utility of data owners as function
of pmax. The data request probability for each data owner is
equal. As shown in Fig. 7, the average utility of data owners
declines with the increase of pmax. When the number of data
owners is fixed, the growth in the number of edge devices
increases the average utility of data owners. The reason is that
a significant number of edge devices increase the competi-
tiveness among edge devices, which impels edge devices to
decrease the service price. When the number of edge devices
is fixed, the increase in the number of data owners reduces
the average utility of data owners. Because when the number
of data owners increases, the data request probability for each
data owner decreases, which makes the average utility of data
owners reduced.
Fig. 8 shows the average profit of edge devices as the func-
tion of pmax.The data request probability for each data owner
Fig. 9. Average amount of data stored as function of pmax (cs = ct = 1).
is equal. As shown in Fig. 8, the increase of pmax makes the
average profit of edge devices grow to a maximum value first
and then decrease. Due to the fact that the growth of pmax
will increase the average profit of edge devices at first. As
pmax continues to increase, the probability that the edge device
is selected by data owners for data storage and transmission
will decrease, so the income of the edge device will show a
decreasing trend. When the number of data owners is fixed,
the increase in the number of edge devices will decrease the
average profit of edge devices substantially. On the one hand,
the increase in the number of edge devices reduces the prob-
ability of edge devices obtaining the consensus reward, which
leads to the decrease in average profit. On the other hand, a
higher number of edge devices increase the competitiveness
among edge devices, which impels edge devices to decrease
the price. So the average profit of edge devices decreases.
When the number of edge devices is fixed, the increase in the
number of data owners increases the average profit of edge
devices slightly. The reason is that the increase in the num-
ber of data owners increases the total amount of shared data,
which increases the average profit of edge devices.
Fig. 9 shows the average amount of data stored by data own-
ers as the function of pmax. From Fig. 9, we can observe that
the average amount of data stored by data owners declines
with the increase of pmax. As the number of edge devices
increases, the average amount of data storage increases. The
growth in the number of data owners makes the average
amount of data stored reduce slightly.
Fig. 10 shows the total payoffs as the function of the con-
sensus reward R. As shown in Fig. 10, when λ is fixed, the
total utility of data owners and total profit of edge devices
grow linearly with the increase of R. When R is fixed, the
total utility of data owners and total profit of edge devices
increase with the increase of λ.
Next, the IIoT data-sharing scheme proposed in this article
is compared with the cooperative scheme. Under the coop-
erative scheme, edge devices cooperate with each other to
provide data storage and transmission services for data own-
ers. So there is no competitiveness among edge devices. The
service price is pmax for each edge device. For the cooperative
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4407
(a) (b)
Fig. 10. Total payoffs as function of consensus reward R. (a) Consensus
reward R. (b) Consensus reward R.
Fig. 11. Total profit of edge devices as function of pmax considering different
schemes (NO = 20, ND = 3).
scheme, the computation complexity is O([NO/
2]), and the
communication overhead is 2NOND + ND(ND − 1). Although
the computation complexity and communication overhead of
the cooperative scheme are lower than those of the proposed
scheme, we show that the payoffs of both data owners and
edge devices under the proposed scheme are higher than those
under the cooperative scheme.
Fig. 11 shows the total profit of edge devices as function of
pmax considering different schemes. When pmax is fixed, the
difference of edge devices total profit between the proposed
scheme and cooperative scheme becomes higher when the con-
sensus reward R decreases. Compared with the cooperative
scheme, the simulation results show that the total profit of
edge devices has been maximally increased by 59%. Fig. 12
shows the total utility of data owners as function of pmax
considering different schemes. We can observe from Fig. 12
that the data owners’ total utility decreases linearly as pmax
increases. The consensus reward R does not affect the data
owners’ total utility under the cooperative scheme. Compared
Fig. 12. Total utility of data owners as function of pmax considering different
schemes (NO = 20 and ND = 3).
with the cooperative scheme, the total utility of data own-
ers has been maximally increased by 52%. The reason is that
under the cooperative scheme, edge devices do not compete
with each other and the price is pmax , which discourages data
owners from sharing data. Then, both the total profit of edge
devices and total utility of data owners decrease compared
with the proposed scheme.
VIII. CONCLUSION
In this article, a decentralized data-sharing solution for
IIoT networks based on blockchain and edge computing was
proposed. With the aid of edge computing, the distributed con-
sensus of blockchain networks and the decentralized storage of
shared data are realized at the edge of IIoT networks. A PoST
consensus mechanism was proposed, in which edge devices
struggle for the consensus reward by contributing to the data
sharing in IIoT networks. Based on the manufacture ties of
data owners, the shared data request probability was derived.
Then, the interactions between data owners and edge devices,
including data storage and transmission service interactions,
were modeled as a multiple-leader and multiple-follower
Stackelberg game problem. Finally, the optimal solutions for
both data owners and edge devices were obtained based on
the ADMM algorithm. Simulation results show that with the
proposed IIoT data-sharing scheme, the total profit of edge
devices is maximally increased by 59%, and the total utility of
data owners is maximally increased by 52%. In future works,
the impact of wireless transmission on blockchain-based IIoT
data sharing will be further investigated.
APPENDIX A
PROOF OF PROPOSITION 1
First, we prove that the utility function of data own-
ers UOi(x
s
i , Xs−i, P) is concave. The first derivative of
UOi(x
s
i , Xs−i, P) is
∂UOi
∂xs
id
= �1wid
1 + xs
id
+ �2widfOiTλ
1 + xs
id
− �3wid
(
1 + δfOi Tλ
)
pi,d. (30)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
4408 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
The second derivative of UOi(x
s
i , Xs−i, P) is
∂2UOi
∂xs
id
2
= −�1wid − �2widfOi Tλ
(
1 + xs
id
)2
< 0. (31)
So UOi(x
s
i , Xs−i, P) is a convex function.
APPENDIX B
PROOF OF PROPOSITION 2
Then, we prove that the profit function of edge devices
UDd (pd, P−d, Xs) is concave. For UDd (pd, P−d, Xs) shown
in (16), wid in (16) is expressed as
wid = pmax − pi,d
∑ND
k=1
(
pmax − pi,k
)
= pmax − pi,d
∑ND
k �=d
(
pmax − pi,k
) + (
pmax − pi,d
) . (32)
The first derivative of wid is
∂wid
∂pi,d
=
−
[∑
k �=d
(
pmax − pi,k
)]
[∑
k �=d
(
pmax − pi,k
) + (
pmax − pi,d
)]2
< 0. (33)
∂2wid
∂p2
i,d
=
−2 ×
[∑
k �=d
(
pmax − pi,k
) + (
pmax − pi,d
)] ×
[∑
k �=d
(
pmax − pi,k
)]
[∑
k �=d
(
pmax − pi,k
) + (
pmax − pi,d
)]4
< 0 (34)
A1 =
∑NO
i=1 widxs
id
(
1 + fOiTλ
)
∑ND
d=1
∑NO
i=1 widxs
id
(
1 + fOi Tλ
)
= widxs
id
(
1 + fOi Tλ
)
+
∑NO
m�=i wmdxs
md
(
1 + fOmTλ
)
widxs
id
(
1 + fOi Tλ
) + ∑ND
k �=d
∑NO
m�=i wmkxs
mk
(
1 + fOmTλ
)
= widxs
id
(
1 + fOi Tλ
) + B1
widxs
id
(
1 + fOi Tλ
) + B2
(35)
A2 =
No∑
i=1
wid
[
xs
id
(
1 + δfOi Tλ
)
pi,d − xs
id
(
cs + fOi Tλct
)]
=
No∑
m�=i
wmd
[
xs
md
(
1 + δfOmTλ
)
pm.d − xs
md
(
cs + fOmTλct
)] + wid
[
xs
id
(
1 + δfOi Tλ
)
pi,d − xs
id
(
cs + fOiTλct
)]
(36)
∂A1
∂pi,d
=
∂wid
∂pi,d
xs
id
(
1 + fOiTλ
)
(B2 − B1)
[
B2 + widxs
id
(
1 + fOiTλ
)]2
(37)
∂2A1
∂p2
i,d
=
∂2wid
∂p2
i,d
xs
id
(
1 + fOiTλ
)
(B2 − B1)
[
B2 + widxs
id
(
1 + fOi Tλ
)]2
−2
(
∂wid
∂pi,d
xs
id
(
1 + fOiTλ
))2[
B2 + widxs
id
(
1 + fOiTλ
)]
(B2 − B1)
[
B2 + ∑NO
i=1 widxs
id
(
1 + fOi Tλ
)]4
(38)
∂A2
∂pi,d
= ∂wid
∂pi,d
× [
pi,dxs
id
(
1 + δfOi Tλ
) − xs
id
(
cs + fOi Tλct
)] + widxs
id
(
1 + δfOi Tλ
)
(39)
∂2A2
∂p2
i,d
= ∂2wid
∂p2
i,d
× [
pi,dxs
id
(
1 + δfOi Tλ
) − xs
id
(
cs + fOi Tλct
)] + 2
∂wid
∂pi,d
xs
id
(
1 + δfOiTλ
)
(40)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
JIANG et al.: IIoT DATA SHARING BASED ON BLOCKCHAIN: MULTILEADER MULTIFOLLOWER STACKELBERG GAME APPROACH 4409
The second derivative of wid is shown in (34), at the bot-
tom of the previous page. To simplize the analysis of UDd ,
we transform the expression of UDd as UDd (pd, P−d, Xs) =
RA1 + A2, and A1 is shown in (35), at the bottom of the
previous page. In (35), B1 = ∑NO
m�=i wmdxs
md(1 + fOmTλ) and
B2 = ∑ND
k �=d
∑NO
m�=i wmkxs
mk(1 + fOm Tλ). A2 is shown in (36),
at the bottom of the previous page.
Then, (∂A1/∂pi,d) and (∂2A1/∂p2
i,d) are derived.
(∂A1/∂pi,d) is expressed in (37), shown at the bottom
of the previous page. (∂2A1/∂p2
i,d) is expressed in (38),
shown at the bottom of the previous page. Because
(∂wid/∂pi,d) < 0, (∂2wid/∂p2
i,d) < 0, B2 − B1 > 0, so we can
get (∂2A1/∂p2
i,d) < 0. Finally, (∂A2/∂pi,d) and (∂2A2/∂p2
i,d)
are derived. (∂A2/∂pi,d) is expressed in (39), shown at the
bottom of the previous page. (∂2A2/∂p2
i,d) is expressed in
(40), shown at the bottom of the previous page. Because
(∂2A1/∂p2
i,d) < 0 and (∂2A2/∂p2
i,d) < 0, we can get that
(∂2UDd/∂p2
i,d) < 0, so function UDd (pd, P−d, Xs) is concave.
REFERENCES
[1] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trad-
ing in blockchain-based industrial Internet of Things,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[2] X. Zheng and Z. Cai, “Privacy-preserved data sharing towards multiple
parties in industrial IoTs,” IEEE J. Sel. Areas Commun., vol. 38, no. 5,
pp. 968–979, May 2020.
[3] G. Dartmann, H. Song, and A. Schmeink, Big Data Analytics for
Cyber-Physical Systems: Machine Learning for the Internet of Things.
Amsterdam, The Netherlands: Elsevier, 2019.
[4] F. Liang, W. Yu, D. An, Q. Yang, X. Fu, and W. Zhao, “A survey on
big data market: Pricing, trading and protection,” IEEE Access, vol. 6,
pp. 15132–15154, 2018.
[5] J. Kang, Z. Xiong, D. Niyato, D. Ye, D. I. Kim, and J. Zhao, “Toward
secure blockchain-enabled Internet of Vehicles: Optimizing Consensus
management using reputation and contract theory,” IEEE Trans. Veh.
Technol., vol. 68, no. 3, pp. 2906–2920, Mar. 2019.
[6] J. Kang, Z. Xiong, D. Niyato, S. Xie, and J. Zhang, “Incentive mech-
anism for reliable federated learning: A joint optimization approach
to combining reputation and contract theory,” IEEE Internet Things J.,
vol. 6, no. 6, pp. 10700–10714, Dec. 2019.
[7] R. Li, C. Shen, H. He, X. Gu, Z. Xu, and C.-Z. Xu, “A lightweight
secure data sharing scheme for mobile cloud computing,” IEEE Trans.
Cloud Comput., vol. 6, no. 2, pp. 344–357, Apr./Jun. 2018.
[8] H. Dai, Z. Zheng, and Y. Zhang, “Blockchain for Internet of Things:
A survey,” IEEE Internet Things J., vol. 6, no. 5, pp. 8076–8094,
Oct. 2019.
[9] M. S. Ali, M. Vecchio, M. Pincheira, K. Dolui, F. Antonelli, and M.
H. Rehmani, “Applications of blockchains in the Internet of Things: A
comprehensive survey,” IEEE Commun. Surveys Tuts., vol. 21, no. 2,
pp. 1676–1717, 2nd Quart., 2019.
[10] A. Saini, Q. Zhu, N. Singh, Y. Xiang, L. Gao, and Y. Zhang, “A
smart-contract-based access control framework for cloud smart health-
care system,” IEEE Internet Things J., vol. 8, no. 7, pp. 5914–5925,
Apr. 2021.
[11] O. Novo, “Scalable access management in IoT using blockchain:
A performance evaluation,” IEEE Internet Things J., vol. 6, no. 3,
pp. 4694–4701, Jun. 2019.
[12] Y. Zhang, S. Kasahara, Y. Shen, X. Jiang, and J. Wan, “Smart contract-
based access control for the Internet of Things,” IEEE Internet Things
J., vol. 6, no. 2, pp. 1594–1605, Apr. 2019.
[13] Y. Zhong, G. Mao, X. Ge, and F.-C. Zheng, “Spatio-temporal modeling
for massive and sporadic access,” IEEE J. Sel. Areas Commun., vol. 39,
no. 3, pp. 638–651, Mar. 2021
[14] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When mobile
blockchain meets edge computing,” IEEE Commun. Mag., vol. 56, no. 8,
pp. 33–39, Aug. 2018.
[15] J. Kang et al., “Blockchain for secure and efficient data sharing in vehic-
ular edge computing and networks,” IEEE Internet Things J., vol. 6,
no. 3, pp. 4660–4670, Jun. 2019.
[16] R. Yang, F. R. Yu, P. Si, Z. Yang, and Y. Zhang, “Integrated blockchain
and edge computing systems: A survey, some research issues and chal-
lenges,” IEEE Commun. Surveys Tuts., vol. 21, no. 2, pp. 1508–1532,
2nd Quart., 2019.
[17] C.-H. Wang, J.-J. Kuo, D.-N. Yang, and W.-T. Chen, “Collaborative
social Internet of Things in mobile edge networks,” IEEE Internet Things
J., vol. 7, no. 12, pp. 11473–11491, Dec. 2020.
[18] F. Cicirelli et al., “Edge computing and social Internet of Things for
large-scale smart environments development,” IEEE Internet Things J.,
vol. 5, no. 4, pp. 2557–2571, Aug. 2018.
[19] R. Girau et al., “Coastal monitoring system based on social Internet of
Things platform,” IEEE Internet Things J., vol. 7, no. 2, pp. 1260–1272,
Feb. 2020.
[20] Z. U. Shamszaman and M. I. Ali, “Toward a smart society through
semantic virtual-object enabled real-time management framework in
the social Internet of Things,” IEEE Internet Things J., vol. 5, no. 4,
pp. 2572–2579, Aug. 2018.
[21] L. Nie et al., “Intrusion detection for secure social Internet of
Things based on collaborative edge computing: A generative adversarial
network-based approach,” IEEE Trans. Comput. Soc. Syst., early access,
Mar. 22, 2021, doi: 10.1109/TCSS.2021.3063538.
[22] M. Shen, J. Duan, L. Zhu, J. Zhang, X. Du, and M. Guizani,
“Blockchain-based incentives for secure and collaborative data shar-
ing in multiple clouds,” IEEE J. Sel. Areas Commun., vol. 38, no. 6,
pp. 1229–1241, Jun. 2020.
[23] C. H. Liu, Q. Lin, and S. Wen, “Blockchain-enabled data collection
and sharing for industrial IoT with deep reinforcement learning,” IEEE
Trans. Ind. Informat., vol. 15, no. 6, pp. 3516–3526, Jun. 2019.
[24] M. Shen, X. Tang, L. Zhu, X. Du, and M. Guizani, “Privacy-
preserving support vector machine training over blockchain-based
encrypted IoT data in smart cities,” IEEE Internet Things J., vol. 6,
no. 5, pp. 7702–7712, Oct. 2019.
[25] S. Wang, Y. Zhang, and Y. Zhang, “A blockchain-based framework for
data sharing with fine-grained access control in decentralized storage
systems,” IEEE Access, vol. 6, pp. 38437–38450, 2018.
[26] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne,
“Blockchain for secure EHRs sharing of mobile cloud based E-Health
systems,” IEEE Access, vol. 7, pp. 66792–66806, 2019.
[27] J. Sun, X. Yao, S. Wang, and Y. Wu, “Blockchain-based secure storage
and access scheme for electronic medical records in IPFS,” IEEE Access,
vol. 8, pp. 59389–59401, 2020.
[28] S. Nakamoto. (May 2008). Bitcoin: A Peer-to-Peer Electronic Cash
System. [Online]. Available: https://bitcoin.org/bitcoin.pdf
[29] M. Castro and B. Liskov, “Practical Byzantine fault tolerance and
proactive recovery,” ACM Trans. Comput. Syst., vol. 20, pp. 398–461,
Nov. 2002.
[30] A. Juels and B. S. Kaliski, Jr., “PORs: Proofs of retrievability for large
files,” in Proc. 14th ACM Conf. Comput. Commun. Security, New York,
NY, USA, Oct. 2007, pp. 584–597.
[31] H. Shacham and B. Waters, “Compact proofs of retrievability,” in Proc.
Int. Conf. Theory Appl. Cryptol. Inf. Security. 2008, pp. 90–107.
[32] Y. Jiang, Y. Zhong, and X. Ge, “Smart contract-based data commod-
ity transactions for industrial Internet of Things,” IEEE Access, vol. 7,
pp. 180856–180866, 2019.
[33] C.-H. Zeng and K.-C. Chen, “Social network analysis facilitates cogni-
tion in large wireless networks: Clustering coefficient aided geographical
routing,” IEEE Trans. Cogn. Commun. Netw., vol. 4, no. 3, pp. 618–634,
Sep. 2018.
[34] Y. Jiang, X. Ge, Y. Zhong, G. Mao, and Y. Li, “A new small-world IoT
routing mechanism based on Cayley graphs,” IEEE Internet Things J.,
vol. 6, no. 6, pp. 10384–10395, Dec. 2019.
[35] T. D. Tran and L. B. Le, “Resource allocation for multi-tenant network
slicing: A multi-leader multi-follower Stackelberg game approach,”
IEEE Trans. Veh. Technol., vol. 69, no. 8, pp. 8886–8899, Aug. 2020.
[36] L. Duan, J. Huang, and B. Shou, “Duopoly competition in dynamic
spectrum leasing and pricing,” IEEE Trans. Mobile Comput., vol. 11,
no. 11, pp. 1706–1719, Nov. 2012.
[37] Z. Xiong, J. Kang, D. Niyato, P. Wang, and H. V. Poor, “Cloud/edge
computing service management in blockchain networks: Multi-leader
multi-follower game-based ADMM for pricing,” IEEE Trans. Services
Comput., vol. 13, no. 2, pp. 356–367, 1 Mar./Apr. 2020.
[38] J. Nie, J. Luo, Z. Xiong, D. Niyato, P. Wang, and H. V. Poor, “A multi-
leader multi-follower game-based analysis for incentive mechanisms in
socially-aware mobile crowdsensing,” IEEE Trans. Wireless Commun.,
vol. 20, no. 3, pp. 1457–1471, Mar. 2021.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TCSS.2021.3063538
4410 IEEE INTERNET OF THINGS JOURNAL, VOL. 9, NO. 6, MARCH 15, 2022
[39] J. Giesen and S. Laue, “Combining ADMM and the augmented
Lagrangian method for efficiently handling many constraints,” in Proc.
28th Int. Joint Conf. Artif. Intell. (IJCAI), 2019, pp. 4525–4531.
[40] J. Giesen and S. Laue, “Distributed convex optimization with many
convex constraints,” 2016. [Online]. Available: arXiv:1610.02967.
[41] N. Raveendran, H. Zhang, Z. Zheng, L. Song and Z. Han, “Large-scale
fog computing optimization using equilibrium problem with equilib-
rium constraints,” in Proc. IEEE Global Commun. Conf. (GLOBECOM),
Singapore, 2017, pp. 1–6.
[42] Z. Zheng, L. Song, Z. Han, G. Y. Li, and H. V. Poor, “A
Stackelberg game approach to proactive caching in large-scale mobile
edge networks,” IEEE Trans. Wireless Commun., vol. 17, no. 8,
pp. 5198–5211, Aug. 2018.
[43] Z. Xiong, J. Zhao, D. Niyato, R. Deng, and J. Zhang, “Reward
optimization for content providers with mobile data subsidization: A
hierarchical game approach,” IEEE Trans. Netw. Sci. Eng., vol. 7, no. 4,
pp. 2363–2377, Oct.–Dec. 2020.
[44] P. K. Bishoyi and S. Misra, “Enabling green mobile edge computing for
5G-based healthcare applications,” IEEE Trans. Green Commun. Netw.,
early access, Apr. 26, 2021, doi: 10.1109/TGCN.2021.3075903.
[45] M. E. J. Newman and D. J. Watts, “Renormalization group analysis of
the small-world network model,” Phys. Lett. A, vol. 263, pp. 341–346,
Dec. 1999.
[46] H. Inaltekin, M. Chiang, and H. V. Poor, “Average message delivery
time for small-world networks in the continuum limit,” IEEE Trans. Inf.
Theory, vol. 56, no. 9, pp. 4447–4470, Sep. 2010.
Yuna Jiang (Graduate Student Member, IEEE)
received the B.E. degree in communications engi-
neering from the China University of Mining and
Technology, Xuzhou, China, in 2017. She is cur-
rently pursuing the Ph.D. degree with the School
of Electronic Information and Communications,
Huazhong University of Science and Technology,
Wuhan, China.
Her research interests are Internet of Things and
blockchain.
Yi Zhong (Member, IEEE) received the B.S. and
Ph.D. degrees in electronic engineering from the
University of Science and Technology of China,
Hefei, China, in 2010 and 2015, respectively.
From August 2012 to December 2012, he was
a visiting student with the Prof. Martin Haenggi’s
Group, University of Notre Dame, Notre Dame, IN,
USA. From July to October 2013, he was a research
intern of Corporate Research and Development with
Qualcomm Incorporated, Beijing, China. From July
2015 to December 2016, he was a Postdoctoral
Research Fellow with the Wireless Networks and Decision Systems Group,
Singapore University of Technology and Design, Singapore, led by Prof.
Tony Q. S. Quek. He is currently an Assistant Professor with the School of
Electronic Information and Communications, Huazhong University of Science
and Technology, Wuhan, China. His main research interests include hetero-
geneous and femtocell-overlaid cellular networks, wireless ad hoc networks,
stochastic geometry, and point process theory.
Xiaohu Ge (Senior Member, IEEE) received the
Ph.D. degree in communication and information
engineering from the Huazhong University of
Science and Technology (HUST), Wuhan, China, in
2003.
He is currently a Full Professor with the School of
Electronic Information and Communications, HUST.
He is an Adjunct Professor with the Faculty of
Engineering and Information Technology, University
of Technology Sydney, Ultimo, NSW, Australia. He
has been worked with HUST, since November 2005.
Prior to that, he worked as a Researcher with Ajou University, Suwon, South
Korea, and the Politecnico Di Torino, Turin, Italy, from January 2004 to
October 2005. He has published more than 200 papers in refereed journals and
conference proceedings and has been granted about 50 patents in China. His
research interests are in the area of mobile communications, traffic modeling
in wireless networks, green communications, and interference modeling in
wireless communications.
Prof. Ge received the Best Paper Awards from IEEE Globecom 2010.
He serves as an Associate Editor for IEEE WIRELESS COMMUNICATIONS,
IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY and IEEE ACCESS.
He served as the General Chair for the 2015 IEEE International Conference
on Green Computing and Communications (IEEE GreenCom 2015). He
served as the China Representative for international federation for information
processing.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:43:04 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TGCN.2021.3075903
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice