Resolution of Blockchain Conflicts through Heuristics-based Game Theory and Multilayer Network Modeling
Resolution of Blockchain Conflicts through Heuristics-based
Game Theory and Multilayer Network Modeling
Alessandro Di Stefano†, Damiano Di Francesco Maesa†, Sajal K. Das ††, and Pietro Liò †
†Department of Computer Science and Technology, Computer Laboratory, University of Cambridge, UK
††Department of Computer Science, Missouri University of Science and Technology, Rolla, USA
distefano.alessandro@gmail.com,dd534@cam.ac.uk,sdas@mst.edu,pl219@cam.ac.uk
ABSTRACT
A blockchain is a fully distributed system in which the user behav-
ior, actions and decisions are crucial for its operation. This paper
discusses how to handle conflict situations affecting a blockchain
system. Specifically, we model two real-world conflict scenarios
– the Lazy Miner dilemma and the Impatient Seller dilemma – by
proposing a novel multi-layer framework coupled with a heuristics-
based game-theoretic modeling. The multi-layer approach provides
a way to include cross-modality integration (human quality factors,
such as reliability) and human actions on the blockchain. We design
a multi-agent game-theoretic methodology combined with some
statistical estimators derived from the heuristics. Our model also in-
cludes the concept of homophily, a human-related factor connected
to the similarity and frequency of interactions on the multi-layer
network. Based on the heuristics, a dynamically evolvingmeasure of
weights is further defined such that an agent increases or decreases
the link weights to its neighbours according to the experienced
payoffs. We show how data mining in blockchain data could be
incorporated into a heuristic model which provides parameters
for the game-theoretic payoff matrix. Thus, this work represents a
platform for simulating the evolutionary dynamics of the agents’
behaviors, including also heuristics and homophily on a multi-layer
blockchain network.
CCS CONCEPTS
• Theory of computation → Algorithmic game theory and
mechanism design; • Networks → Network dynamics; • Com-
puting methodologies → Distributed artificial intelligence; Dis-
tributed artificial intelligence; Network science; • Security and pri-
vacy; • Applied computing → Physical sciences and engineering;
KEYWORDS
Game theory, Blockchain, heuristics, multi-layer networks, multi-
agent systems
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ICDCN 2020, January 4–7, 2020, Kolkata, India
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7751-5/20/01. . . $15.00
https://doi.org/10.1145/3369740.3372914
ACM Reference Format:
Alessandro Di Stefano†, Damiano Di Francesco Maesa†, Sajal K. Das ††, and
Pietro Liò †. 2020. Resolution of Blockchain Conflicts through Heuristics-
based Game Theory and Multilayer Network Modeling. In 21st International
Conference on Distributed Computing and Networking (ICDCN 2020), January
4–7, 2020, Kolkata, India. ACM, New York, NY, USA, 10 pages. https://doi.
org/10.1145/3369740.3372914
1 INTRODUCTION
The blockchain has emerged as a very promising technology at-
tracting attention to both the academic and industry community
[2, 6, 34]. Indeed, research efforts on blockchain technology have
been on the rise due to its applications to a wide variety of domains,
such as finance and insurance [30], biomedical and healthcare [12],
information processing and Internet of Things (IoTs) [20], and ac-
cess control systems [24], to name a few. An important feature of
blockchain lies in its distributed nature, allowing the users to build
and manage a shared data repository without relying on any third
party or central authority.
Such decentralised nature relies on a chosen distributed con-
sensus algorithm so that the strategies and interactions between
the users become crucial to achieve an agreement on the current
state of the system among mutually untrusted entities. Through
these strategic interactions on the blockchain, a user/node is able to
learn and predict the behavior of other users during the consensus
step. To this end, game-theoretic models offer an appropriate tool
to formulate and explore the dynamics of user behaviors [22].
As many other real-world systems, composed of components
interacting with each other, the blockchain also possesses rich
multi-level structures and exhibit complex dynamics. The source
of complexity is due to the presence of interactions among various
components having autonomous decision-making capabilities.
Furthermore, the fully distributed nature of blockchain systems
where many interacting elements or agents participate in transac-
tions, lead to the emergence of collective properties that cannot be
simply associated with the individual constituting elements. There-
fore, the study of such systems requires new tools and modeling
approaches in a holistic manner, with a goal to capture the col-
lective emergence of behaviors. Hence, we propose to represent a
blockchain system as a complex network similar to social networks,
financial markets, and transportation networks. More precisely, we
model blockchain as a multi-layer network, characterised by hetero-
geneous and complex agents interconnected on different layers. In
this multi-layer network, the participants strategically interact with
each other at different scales (time and volume) and at different
https://doi.org/10.1145/3369740.3372914
https://doi.org/10.1145/3369740.3372914
https://doi.org/10.1145/3369740.3372914
http://crossmark.crossref.org/dialog/?doi=10.1145%2F3369740.3372914&domain=pdf&date_stamp=2020-02-19
ICDCN 2020, January 4–7, 2020, Kolkata, India A. Di Stefano, et al.
frequencies directly or indirectly. Moreover, the various agents and
components interact non-linearly in presence of perturbations.
Blockchains are also characterised by some conflict situations
arising from the complex interactions between the agents and el-
ements of the blockchain. The complexity exhibits the agent be-
haviors that often follow non-linear and nontrivial patterns, and
additionally the statistical properties change with time and space.
Thus, the multi-scale and evolving nature of blockchain justifies
our complex networks approach in dealing with such systems. To
the best of our knowledge, our work is the first to tackle two real-
world conflict scenarios – the Lazy Miner dilemma and the Impa-
tient Miner dilemma – that have strong impacts not only on the
blockchain system development, but also on the user payoffs (gains
or losses) and their future behavior.
To address the conflict scenarios, we propose a novel game-
theoretic framework based on multi-agent heuristics. The frame-
work models the blockchain network as a weighted multi-layer
network between agents, and defines some statistical measures
(based on heuristics) for each agent in the network. These mea-
sures dynamically change the link weights of the multi-layer net-
work. Using a game-theoretic model based on an Iterated Prisoner’s
Dilemma, we quantify the evolutionary dynamics of the agent be-
haviors with the help of homophily between nodes, which allows
us to measure the tendency to interact more with similar agents
and how it impacts on their behaviors.
From a mathematical perspective, the novelty of our proposed
methodology lies in combining game-theorywithmulti-agent heuris-
tics. In general, two systems are typically used for decision making,
which reflects the “dual process” of human thinking: one is rapid,
intuitive but error-prone; while the other one is slower, reflective
and statistical [3, 17]. Fast and frugal heuristics have been used
to explain the intuitive part of human reasoning based on simple,
efficient rules, learned or hard-coded by the evolutionary process.
These heuristics allow human beings to take decisions and solve
complex problems, in spite of incomplete information [3, 17]. Our
game-theoretic model is based on the strategic interactions and the
players’ rationality capable of making corrections to the heuristics.
The contributions of our work can be summarised as follows.
• We model two novel real-world conflict scenarios character-
ising a cryptocurrency enabling blockchain. The scenarios
are mapped into an analytical multi-agent framework based
on a game-theoretic model, which allows us to quantify the
evolutionary dynamics of agents’ behaviors. The framework
also includes human-related factors derived from the heuris-
tics and homophily between agents, measuring their role in
the emergent dynamics.
• We model a blockchain system as a weighted multi-layer
network, which provides a way to include cross-modality
integration (human quality factors, such as reliability) and
human actions on the blockchain.
• We define a dynamical weighted multi-layer network, where
link weights change over time based on the heuristics. We
further introduce a strategy update based on the Fermi dis-
tribution, which includes an utility function that combines
the link weight and the payoffs obtained at each round of
the Prisoner’s Dilemma game.
• Heuristics allow us to connect multi-layer and game theory
in the presented blockchain conflict scenarios. We integrate
trust and actions on blockchain with the payoffmatrix, allow-
ing us to interpret the decision-making processes. Human
heuristics model the human quality factors, showing a fluc-
tuating behavior as illustrated in results.
The rest of the paper is organized as follows. Section 2 summa-
rizes recent literature on blockchain relevant in our context and
game-theoretic models for blockchain networks. Section 3 defines
the two blockchain conflict scenarios we analyse. Section 4 deals
with multi-layer representation of the blockchain network, and fo-
cuses on the proposed model and how it handles conflict scenarios.
Section 5 presents preliminary simulation results while Section 6
concludes the paper with directions of future research.
2 BACKGROUND AND RELATEDWORKS
A Blockchain protocol is considered as a possible implementation
of the so called Distributed Ledger Technology (DLT), in which
trust is a key concept. The DLT allows mutually untrusted entities
to collaborate on a common goal, i.e., the management of a shared
information repository. The trust in a central entity (or third party)
in traditional systems is replaced by trust in the protocol itself. This
disruptive aspect of DLT helps create trust at a technology level, so
much so that it has been dubbed trust machine [31]. As an example,
we can think of Bitcoin, the first Blockchain protocol proposed.
The goal of Bitcoin is to provide any user the freedom to exchange
value with any other untrusted user without the need for any kind
of external supervision or guarantee.
Blockchains create trust among reciprocally untrusted Byzantine
users by employing a distributed consensus algorithm. Achieving
consensus is often the most expensive step (in terms of time and
resources) in a Blockchain protocol. Cheaper solutions are possible
if the concept of untrusted entities is relaxed and some level of trust
is introduced in some chosen users, which leads to the concept of
permissioned blockchains. In a permissioned blockchain, only a
potentially dynamic set of trusted entities is allowed to update the
ledger, while on permission-less blockchains (e.g., Bitcoin) any one
can update. The more trust assumptions are placed on the entities,
the more efficient would the system be, albeit more centralised.
Given trust is a key concept in any blockchain, with significant
impacts on various aspects of a given protocol, many of the expen-
sive security steps necessary in a public blockchain protocol are
based on the trustless assumption. Thus the protocol can be made
more efficient if some level of trust between users is introduced.
We have already shown the example of permissioned blockchains
obtained by relaxing the trustless assumption on the distributed
consensus step, but such example regards the entire blockchain pro-
tocol and the derived community as a whole. Instead, in this paper,
we show two examples where any user can individually choose to
relax the strict trustless assumption (i.e., every other user is treated
as an adversary) to achieve some personal gain. In such scenarios,
a user may choose to trust other users outside of the consensus
step, i.e., on operations not protected by it. Users choosing to do so
risk to incur in a loss in case they get cheated by those users they
choose to trust, but gain a direct benefit if the trusted user behaves
honestly. This clearly leads to a complex game theory problem, in
Resolution of Blockchain conflicts through game theory and multilayer network ICDCN 2020, January 4–7, 2020, Kolkata, India
which the users play rationally to decide if and whom to trust. In
the rest of this paper, we present two such scenarios common to any
cryptocurrency based blockchain (such as Bitcoin or Ethereum) that
we name the lazy miner dilemma and the impatient seller dilemma.
In traditional blockchain,miningmeans the set of operations that
the validator nodes (i.e., miners) perform during each distributed
consensus step. On the other hand, in traditional proof of work
(PoW ) protocols (e.g., Bitcoin), mining means performing a brute
force attack to attempt a cryptographic hash partial inversion. It is
an highly expensive process both in terms of initial investment (to
buy purpose built efficient ASIC hardware), and run time cost (to
pay for electricity to power the hardware). Since the best strategy to
invert a cryptographic hash is brute force and only the first solution
found is considered, the users take part in an arms race trying to
perform as many hashes per millisecond as possible.
Users are incentivised to take part in themining race by a variable
reward of newly minted coins for each solution they find. More
precisely, the miners have to partially invert the hash of the header
of a block encapsulating a set of transactions not yet validated. The
first miner that manages to solve such task, gets credited a reward
equal to the fees paid by all the transactions in their block, plus
a fixed reward (say, in Bitcoin halving every 210,000 blocks, i.e.,
about four years at the fixed expected generation rate of one block
each 10 minutes, a little more in practice since blocks are found
faster if the hash power grows).
As soon as a new block is mined (i.e., its hash puzzle is solved
by a miner), it is broadcasted by the miner to all other users so
that they can add it on top of their own chains. All other compliant
miners would then check the newly received block by checking if
it is well formed (i.e., contains only valid transactions and all hash
pointers are correct), then stop mining their own, and start mining
a new block on top of the newly received one. Whether or not a
miner should behave honestly and stop mining its own block is an
interesting game theoretic problem by itself; many attack models
have been proposed in the literature as discussed in the following.
2.1 Game-Theoretic Models for Blockchain
There exist many works on the application of game theory analysis
to blockchain technology. In fact, the antagonistic nature of the
mining process, coupled with its highly valuable rewards is the
perfect terrain for participants to be modelled as rational entities.
The high stakes of the mining race have been first studied in [21]
and subsequent works [15, 28]. (For a comprehensive survey on
the most relevant results, see [22].) Almost all of these studies are
focused around the study of optimal mining strategies and the
adequacy of offered mining rewards; testing whether the protocol
compliant mining strategy is the rational one to follow or not. Thus
the topic is strictly intertwined with the study of fraudulent mining
techniques, such as the notorious selfish mining strategy [16] or
more general block withholding attacks [7]. Those kind of attacks
can in turn be seen as application of a more general strategy of
Information Withholding Attacks, either trying to gain an unfair
advantage over other miners or attempting to be rewarded more
than one’s fair share from the mining pools [7]. The adequacy of
miner rewards are even considered in the face of Goldfinger Attack,
when an entity has a gain from taking part in the mining process
not derived from the value of the mining rewards alone [21].
Our proposed scenario is concerned with the mining process as
well, but does not consider directly the choice of a mining strategy
or evaluation of the incentives mechanism. Instead, we study a
possible non-compliant strategy that can speed up mining indepen-
dently from the adopted mining strategy (compliant or fraudulent).
To the best of our knowledge, we are the first to study from a game-
theoretic point of view, the miners approach to blocks checking
after new blocks notification.
In contrast, our second scenario does not concern mining at all,
and is about the behavior of regular users. Despite the problem
being well known (see [19]), to the best of our knowledge, no
study has attempted to model the user strategies with game theory
in such a scenario. Although a recent work aimed to solve this
problem [1], the proposed solution is not generally applicable in
our context because it requires a smart contract enabled blockchain
(e.g., excluding the Bitcoin) and it works only for digital assets (of
which an hash can be computed) whose exchange can be verified. As
such, our broader application scenario is very different in that, for
example, it includes regular vending machines accepting Bitcoins.
3 BLOCKCHAIN CONFLICT SCENARIOS
3.1 The Lazy Miner Dilemma
It is worth remarking how miners pay a high initial investment to
buy dedicated hardware and repay such investment by hoping to
mine as many blocks as possible. The mining power of each miner
increments only discretely and, during any fixed period, the only
strategy to increase the chances to mine a new block is to mine for
longer time. Any time spent not mining at all, or mining on a stale
(old) block while a new block has already been received but not yet
checked, should be minimized as much as possible.
Time (t)
Mining on 𝐵𝑙𝑜𝑐𝑘′ 𝑖
𝑴𝒊𝒏𝒆𝒓 𝒋 - AdvantageBlock
communication
latency
Block integrity
check
Mining on stale
𝐵𝑙𝑜𝑐𝑘 𝑖
Wasted Mining time
𝑀𝑖𝑛𝑒𝑟 𝑗
𝑀𝑖𝑛𝑒𝑟 𝑘
Mining on 𝐵𝑙𝑜𝑐𝑘′ 𝑖+1
Mining on 𝐵𝑙𝑜𝑐𝑘 𝑖 Mining on 𝐵𝑙𝑜𝑐𝑘 𝑖+1
Figure 1: Lazy Miner scenario describing the wasted mining
time by a miner (say Minerk ) when a new block is found by
a different miner (sayMiner j ).
In particular, when a new block is found by another miner, while
the current miner has not yet verified it or been notified of its
existence, the current miner keeps mining on a stale block with
little chances of being accepted and hence provides a reward (since
a new block has already been found and only one block can be
accepted at a time). In general, this is the time when natural forks
may occur (i.e., when two different miners find a new block at
almost the same time); even if no fork occurs, all mining work
is actually wasted during the time a newly found blocks is to be
known and accepted by all other miners. As such, miners have an
economic interest in trying to minimise such wasted mining time,
and most already try to do so by establishing direct connections to
ICDCN 2020, January 4–7, 2020, Kolkata, India A. Di Stefano, et al.
other miners in an attempt to lower the latency that a newly found
block is notified to all other miners. Still miners can not stop mining
their potentially stale, local block as soon as they are notified about
a new block. In fact, the new block might not be valid for two
reasons: either the block structure (e.g., its header) is malformed,
or the block content (i.e., its transactions) is not valid. In general,
checking the validity of a block structure means computing a set
of hashes, e.g., verifying that the hash puzzle was properly solved
or the root of the hash tree of the content of the block is correct.
On the other hand, checking the validity of a block content might
be more expensive since it requires checking the validity of each
transaction it contains.
Checking a transaction validity means verifying that the value
spent by the transaction existed and belonged to the user attempting
to spend it (often done by checking digital signatures) and executing
the transaction content. In a simple blockchain, such as Bitcoin,
this implies simply running a few script instructions contained in
the transaction and checking if they terminate correctly. Whereas,
in smart contract enabling blockchains, such as Ethereum, this
can lead to more complex and time consuming computations. In
general, all computations are bounded in order not to stall a miner
in endless computations. But often such computations can be more
complex, hence time consuming, as long as they pay a proportionate
fee. The problem is that only the miner finding a new block gets
such fees rewarded, while all other miners have to redo the same
computations to check if the first miner did them correctly but got
no reward whatsoever for the time spent in doing so. Moreover, all
the time spent for checking is not the time spent in mining a new
block and so a lowered chance of being the first one to mine the
next block. Fig. 1 schematically describes this blockchain scenario.
Now we are ready to present the so called lazy miner strategy,
in which a miner accepts new blocks from users that they deem
trustworthy without checking for their content validity first. A
lazy miner can then immediately start mining on the next block
after simply checking its header integrity. The advantage of such
strategy is that a lazy miner is cutting on checking downtime and
thus mining more often for a possibly valid solution (i.e., no mining
on possibly already stale blocks), maximising its expected gain.
The associated risk is that a newly received block could be invalid
and hence no further block mined on top of it would be valid and
rejected by other compliant miners, as well as the first one. So the
lazy miner is risking to waste all their mining time until the next
block is found by some other miner.
Note that the checking time is usually much shorter than the
average time between two subsequent blocks found. However, we
argue that if the received block was not valid, all other honest but
not lazy miners would not accept it. In other words, they would
keep on mining their old blocks until they find a valid solution.
Thus, the actual time a lazy miner would have to wait to find out
if they were cheated would be, on average, much shorter than the
normal time to wait for finding two consecutive valid blocks (e.g.
10 minutes in Bitcoin and between 10 and 19 seconds in Ethereum,
as indicated respectively by the two protocols).
We also note that invalid blocks are generally not further for-
warded to the neighbours when received by honest miners. This
means that invalid blocks have a lower chance to naturally diffuse
farther in the network than valid ones. Moreover, by checking the
structural validity of a block, a Lazy Miner still refuses blocks with
a wrong mining puzzle solution. For an adversary, mining invalid
blocks is usually expensive (and may not be worth) since the at-
tacker has to forfeit the rewards although performing the same
amount work to produce valid blocks.
3.2 The Impatient Seller Dilemma
The distributed consensus algorithms employed to maintain the
global state consistent in a distributed ledger technology (DLT)
often provide only guarantees of eventual consistency. This means
that, at any given time, there might be conflicting histories (called
fork in a blockchain scenario) that will be re-conciliated eventually.
In a Blockchain protocol, there is no guarantee that the state defined
by the last block added to the chain would become the official state.
The users wait until an unknown number of blocks is added on top
of a given block yet to be considered definitive. Due to the lack of a
strong consistency proof, the number of blocks to wait (called the
number of confirmations) cannot be known at run time. In theory, a
block at any depth could be invalidated by an even deeper fork.
Time (t)
𝐵𝑙𝑜𝑐𝑘 𝑖
Tx received
Waiting time
𝐵𝑙𝑜𝑐𝑘 𝑖+1 𝐵𝑙𝑜𝑐𝑘 𝑖+𝑗 𝐵𝑙𝑜𝑐𝑘 𝑖+𝑗+λ
𝑗 ≥1
λ = # of confirmations − 1
- - 𝑗 - - - - λ - - - - - -- - - -
Figure 2: Impatient Seller scenario. It describes the conflict
of an impatient seller, where j denotes the number of blocks
to wait for the transaction to be included in a block.
In practice, natural forks are rare and resolved fairly quickly,
while intentional forks (e.g., derived from history revision attempts)
are not common at all in the most established blockchain protocols.
An arbitrary number of confirmations (i.e., those blocks added on
top of the chosen one) is often chosen as a safe practical compromise
(e.g., six confirmations rule in Bitcoin).
A user waiting for a transaction to be validated has first to broad-
cast such transaction, waiting for the latency needed for the transac-
tion to reach and be validated by enough nodes. The user then needs
to wait for a miner to choose the transaction to be added to a block,
as well as the mining time needed for such block. When a new block
containing the transaction gets mined and added as new head of the
chain, the user is still advised to wait for the recommended number
of confirmations to avoid temporary inconsistencies. In general, the
users are advised to use a number of confirmations proportional
to the value exchanged, so the actual number of confirmations to
wait can be even longer.
The waiting timemay be acceptable in certain application scenar-
ios such as e-commerce, where the shipment is the dominant time,
but not in some other scenarios involving face to face exchange,
such as buying coffee from a vending machine. For small amounts
of value transacted, a user could choose to wait for a number of
confirmations smaller than the advised safe one, but it would still
have to wait for at least one (i.e., mining of the first block containing
their transaction). For Bitcoin, given the average block generation
Resolution of Blockchain conflicts through game theory and multilayer network ICDCN 2020, January 4–7, 2020, Kolkata, India
time of 10 minutes and six confirmations rule, a user should expect
to wait for at least one hour for full confirmation and more than 10
minutes for a fast one. This issue is further exacerbated in cases of
transactions congestion times, when the blockchain receives more
transactions than it can fit and hence the transactions have to wait
for a long time to be validated inside the blocks. In practice, this
makes some applications simply impossible like the aforementioned
vending machine problem.
Such potentially long waits occur due to the zero trust design of
public blockchains. If such assumption is relaxed and some level
of trust is credited to given users, then it is possible to adopt fast
payments. A fast payment is the one contained in a transaction
that has not yet been verified in any block. Instead of waiting
for the transaction to be mined, the recipient simply checks that
it is well formed (e.g., spending existing funds belonging to the
payer) and accepts the payment as if it was validated by the miners.
Such impatient seller could then act as if the payment was final,
for example, delivering the desired item or service. The risk of
an impatient seller is that they may become victim of a double
spending attack, i.e., the payer may attempt to spend the same funds
with at least another transaction at the same time. Among all such
conflicting transactions attempting to spend the same funds, only
one of them will be validated; if it is not the one directed to the
impatient seller, they would not be credited any value because of
their transaction becoming void.
It is possible to attempt to secure a fast payment by employing
the so called listening period, i.e., waiting for a fixed amount of
time to listen on the network for any other conflicting transaction
attempting a double spending. But such techniques can only be
effective by trusting a third party to perform the listening on behalf
of the user or deploy a complex listener’s network to protect the
user against network partitioning or sybill attacks [19]. In general,
however, it is hard to make fast payments work since the goal is
to avoid mining, despite mining being the process trough which
transactions are validated in a Blockchain distributed environment.
Fig. 2 schematically describes this blockchain scenario.
In our evaluation scenario we consider an impatient seller as an
user that finalizes a transaction (i.e. acts as if it had been validated
in a block), as soon as it receives and checks it, without actually
waiting for any mining. As such the user risks being victim of
a double spending attempt (i.e. delivering the goods or services
without receiving a valid payment for them), but avoids waiting
for the long and potentially costly mining times. Of course such
scenario is referred mainly to users involved in time sensitive and
low value economic transactions.
4 BLOCKCHAIN AS A MULTI-LAYER
NETWORK AND PROPOSED MODELS
Given relationships between individual users and agents are typ-
ically multi-dimensional in nature, social behaviors and their dy-
namics can be represented by taking into account more than a
single network of interactions. Recently many research works have
focused on multi-layer networks [5, 10] as the most suitable way
to describe a variety of complex networks, from social networks
to biological networks to transportation networks, to name a few.
Indeed, a complex system characterises an interdisciplinary field
that deals with systems composed of many interacting units, often
called “agents”. In a multi-layer network, multiple interactions be-
tween agents occur in different contexts (scenarios) and an agent’s
behavior can be different in each layer, although it is determined
from the simultaneous interactions on all the layers of the multiplex
structure [4, 5, 9, 10, 26].
In the context of blockchain, our modeling approach considers a
two-layer structure where we have an upper (logical) layer named
as Trust layer, and a lower (physical) layer called as Transaction
layer (see Fig. 3). We define a weighted multi-layer network for the
blockchain, since each edge at both layers is weighted. Specifically,
the edges (or links) on the Trust layer are defined according to the
proposed heuristics, while the weight of edges on the Transaction
Layer depend on the number of transactions that two agents share
(see model details in the following subsections).
A crucial aspect of our multi-layer modeling approach is that
other than intra-layer relationships in each single network (or
layer), we also need to encompass the interplay and the coupling
between the two defined layers (i.e., inter-layer relationships). The
multi-layer structure allows us to model and quantify the impact of
human-related factors, such as the agents’ heuristics and homophily
in the emergent behaviors on the two layers. Furthermore, it allows
us to understand the macro-, meso- and microscopic properties of
a blockchain network [5, 11, 25].
Our proposed modeling approach is illustrated in Fig. 3, the
components of which are described in the following.
4.1 Multi-agent Heuristics-based
Game-theoretic Model
Consider an example ofN agents (denoted as i = 1, ..,N ) andM = 2
layers, such as the Trust layer and Transaction layer denoted by α
and β respectively. At both layers, an agent interacts with other K
randomly chosen agents corresponding to its neighbors.
In our model, being neighbors implies not having a physical
or social interaction with other agents. Instead, the interaction is
indirect, namely the agents participate in the same transaction on
the Transaction layer, or they have a certain reliability value against
an agent on the Trust layer. Specifically, the edges between agents
on the Transaction Layer indicate transactions on the blockchain
involving both agents. Two agents may simultaneously participate
in multiple transactions with a given neighbor, such that the more
the number of transactions (Ntr ) where both agents are involved,
the higher is the link weight on the Transaction layer. Thus, at each
time step t , the weight on the Transaction layer (β), denoted by
w
β
i j (t), is defined as follows:
w
β
i j (t) = Ntr (t) + 1 (1)
where Ntr (t) is the number of transactions in which both agents
participate. The Trust layer represents a sort of ‘logical’ layer and
the link weight between two agents at time step t is defined by a
statistical estimator, called reliability, defined as follows:
Definition 4.1. Reliability between two agents i and j at time step
t , denoted as ri j (t), is a measure of trust between the agents (nodes),
and it represents a dynamical memory that decides at each time step
whether an agent is reliable or not. We assume that the reliability
values are in the range 0 and 1, i.e., 0 ≤ ri j ≤ 1. The greater the
value of ri j , the more is the number of reliable neighbors.
ICDCN 2020, January 4–7, 2020, Kolkata, India A. Di Stefano, et al.
Transaction Layer (β)
Trust Layer (α)
ωαβ
Blockchain Weighted 
Multilayer Network
𝑤𝑖𝑗
𝛼
ℎ𝑖𝑗
β
­ Reliability: 𝑟𝑖𝑗
­ Risk Perception: 𝑅𝑖
­ Oblivion mechanism: ξ𝑟 , ξ𝑅
Game­Theoretic modelingℎ𝑖𝑗
α ≡ homophily at layer α 
𝑤𝑖𝑗
𝛼 ≡ link weight at layer α
i
j
i
j
A multi­agent heuristics­based 
Game­Theoretic model
Evolutionary dynamicsHeuristics
ℎ𝑖𝑗
α
𝑤𝑖𝑗
β
ωαβ ≡ coupling between layers α and β
PDG ­ Payoff matrix
Utility function:  𝑈𝑖 = σ𝑗∈Ω𝑤𝑖𝑗
𝛼 ∙ 𝑃𝑖𝑗
Homophily
𝑊 𝑆𝑗 → 𝑆𝑖 = η𝑖
1
1 + exp[(𝑈𝑖− 𝑈𝑗)/𝛿𝑖𝑗 𝐾]
Fermi distribution:
1. Platform for modeling complex 
conflicts and simulating the 
evolutionary dynamics of agents’ 
behaviors on a blockchain network
2. Measuring the role of heuristics and 
homophily in the emergent dynamics
Platform for simulating 
Blockchain conflicts
Figure 3: The modeling framework - from the Blockchain Weighted multi-layer Network to the multi-agent heuristics-based
game-theoretic model which help explore the evolutionary dynamics of behaviors in the two dilemmas (conflict scenarios).
Even though the reliability may be asymmetric in reality, here
we assume that the reliability is a symmetric measure, i.e., ri j = r ji .
With the help of reliability, let us now define the weightwα
i j (t) of a
link between two agents i and j in the Trust layer α at each time
step t . The weight depends on the reliability ri j (t), defined as:
wα
i j (t) = ri j (t) + 1 (2)
However, the trust on an agent is not an absolute value, and
has to be compared with the risk perception (i.e., being in a risky
situation) in the blockchain. Let Ri (t) denote the risk perception of a
node/agent i at a certain time step t , which represents the perceived
probability of a risky situation of the agent i . In our case, the risk
perception of an agent represents either the risk of accepting invalid
blocks in the case of Lazy Miner dilemma, or being a victim of a
double spending attack in the case of Impatient Seller dilemma.
In order to combine risk perception with uncertainty, we assume
that each individual i decides about a node/agent j according with
its previous knowledge of ri j (t). Thus, ri j (t) < Ri (t) implies that
from the perspective of the agent i , the reliability of the agent j
is relatively low (and vice versa), and hence it will check against
the database (to get to know the truth). Thus, the higher the value
of Ri (t), the more the agent i will be suspicious and check against
the database. The opposite is true for small values of Ri (t); in other
words, ri j (t) ≥ Ri (t) implies the agent i will trust its neighbor j.
Only after checking against the database, the agent i will know
the truth about its neighbor j. This information is used to increase
or decrease both the reliability ri j (t) of its neighbor and the risk
perception measure Ri (t). In particular, if the check is positive,
ri j (t) will be increased by a given amount vr ; otherwise it will be
decreased by the same quantity. Similarly, the risk perception Ri (t)
is increased or decreased by qR based on the result of the check.
In the Lazy Miner dilemma, an agent receives a block from its
connecting agents, verifies it and then forwards the block to its
neighbors. Let us assume for simplicity that this occurs in a synchro-
nous way and at discrete time steps t . Nevertheless, as explained in
Section 3.1, the block received might be not valid. Thus, any farther
block mined on top of it would not be valid and rejected by other
compliant miners as well as the first one. Thus, if the miner decides
to start mining on the next block without checking its validity, it
would be mining on top of invalid blocks. Alternatively, an agent
may decide to verify the block against a central database, which
means checking the validity of blocks before mining the next block.
However, as explained in section 3.1, this operation is costly, at
least in terms of time.
Similarly, the Impatient Seller dilemma poses an analogous chal-
lenging issue for agents of the blockchain network. The agent, a
seller in this case, may decide to trust its neighboring agent, thus
behaving as an impatient seller and finalizing the transaction with-
out waiting for any mining. This allows the agent to avoid waiting
for the mining times, but the risk is that of becoming victim of a
double spending attack without getting any credit from that trans-
action. On the other hand, it may decide to wait for mining times,
i.e., checking against a database. As explained in section 3.2, this
case also implies paying a cost, at least in terms of time.
To deal with these two conflict situations or dilemmas, similar
to [3], we propose a multi-agent heuristic-based game theoretic
model aimed at balancing between the costs (time) and the risk of
accepting invalid blocks (Lazy Miner dilemma) or being victim of a
double spending attack (Impatient Seller dilemma).
In our model, other than considering weights of the indirect
interactions between agents/nodes at each layer, we define a mea-
sure of homophily hi j . Specifically, homophily is defined as an
interaction-based measure, depending on the frequency of interac-
tions between agents on the Transaction layer; while on the Trust
layer, it is defined as a similarity-based measure, which entails the
different dimensions of homophily, to derive an Euclidean distance
δi j between the agents. Overall, we define homophily as follows:
Definition 4.2. Homophily, denoted as hi j , is a measure of simi-
larity between two nodes/agents i and j such that:
hi j =
1
1 + δi j
(3)
where δi j is the homophily difference (distance) between i and j.
Resolution of Blockchain conflicts through game theory and multilayer network ICDCN 2020, January 4–7, 2020, Kolkata, India
4.2 Evolutionary Dynamics
To explore and quantify the evolutionary dynamics of behaviors
in the multi-layer network, we adopt the Prisoner’s Dilemma (PD),
a pairwise social dilemma where the nodes can select one of two
strategies - cooperation or defection. The symmetric game is defined
in function of its payoff matrix, described in Table 1. Players will
C D
C R S
D T P
Table 1: Prisoner’s dilemma - payoff matrix, where R, S , T
and P correspond to the Reward, Sucker, Temptation and
Punishment payoffs respectively.
receive both a rewardR formutual cooperation or a punishment P for
mutual defection. A defector will get the temptation payoff T when
playing against a cooperator, while the cooperator obtains the so-
called sucker payoff S . In the case of Prisoner’s dilemma, the payoffs
are ordered asT > R > P > S , meaning that the defection is the best
strategy regardless of the opponent’s decision [10, 11, 27]. Overall,
social dilemmas, such as Prisoner’s dilemma, describe all those
conflict situations where the strategy with the highest individual
fitness does not represent the most convenient strategy in terms
of social community [10, 11, 27]. Indeed, cooperation results in a
benefit to the opposing player, but incurs a cost to the cooperator.
On the other hand, defection provides a benefit to the individual
but incurs a cost to the community. In both cases, it is best to defect
for rational and selfish individuals in a single round of the game,
regardless of the opponent strategy. However, mutual cooperation
leads to a higher payoff for the community than mutual defection,
but cooperation is irrational if we consider only the individual
player’s point of view.
In the two considered dilemmas, cooperation means behaving
altruistically and doing a database (dB) check, so that an agent
decides to pay a cost in terms of time for the community represented
by the other agents in the blockchain. Specifically, in the LazyMiner
dilemma, checking against the dB means checking the validity of
blocks and avoiding the risk of accepting invalid blocks. Whereas,
in the Impatient Seller dilemma, checking against the dB means
waiting for the recommended number of confirmations in order to
avoid being a victim of a double spending attack.
On the other hand, defection corresponds to the selfish behavior.
In the case of Lazy Miner dilemma, it corresponds to start mining
on the next block without checking the validity of blocks. In the
case of Impatient Seller dilemma, defections mean to finalize the
transaction without waiting for any mining.
In both dilemmas, acting selfishly and behaving as a lazy miner
or an impatient seller is more convenient for single agents. Nev-
ertheless, reasoning in terms of community, the players (agents)
would benefit more from mutual cooperation, yielding a total bene-
fit (individual and community benefits) higher than that of mutual
defection. The social dilemma is therefore established. Although
cooperation should not naturally emerge under these conditions, in
nature and real-world networks we observe how the cooperation
does exist.
One of the main targets of this work is to explore the emergent
dynamics and better understand what underlying mechanisms in
terms of human-related factors, such as homophily, along with the
role of weights and heuristics may lead to a resolution of blockchain
conflicts. To explore and quantify the evolutionary dynamics of
behaviors on the blockchain weighted multi-layer network, we take
into account the iterated forms of the Prisoner’s Dilemma, where
at each round of the game, agents can change their strategies or
behaviors, based on the imitation dynamics of the fittest strategies
[10, 11, 27]. We quantify the evolutionary process in accordance
with the standard Monte Carlo simulation procedure, composed
of elementary steps [10, 11, 27], so that at each round a player i
changes its strategy Si and adopts the strategy Sj from player j
with a probability determined by the Fermi function, defined as
follows [10]:
W (Sj → Si ) = (ωα β ) ·
1
1 + exp[(Ui −Uj )/(δi j · K)]
(4)
Therefore, a player i on the blockchain weighted multi-layer
network adopts strategy Sj of another player j as a function of the
differenceUi −Uj between the utility functions of the two nodes (as
defined below), according to δi j and the coupling factorωα β charac-
terising the multi-layer network. Specifically, δi j is the homophily
difference between two agents i and j. If the value of homophily
is high, player i is more likely to imitate the strategy of j at each
round. Let K be the selection intensity quantifying the uncertainty
in the strategy adoption process. Defined as in [10], the homophily
can vary in the range [0, 1]. The selected value of K is a traditional
and frequently employed choice that does not qualitatively affect
the evolutionary outcomes, as shown in the preceding works and
reviews [29]. ωα β defines a measure of interdependence (i.e., inter-
play) between the two layers of the multi-layer network [10] and
it helps investigate the evolution of behaviors on the multi-layer
structure.
The strategy update of each player at each round of the game on
themulti-layer network strongly depends on the difference between
the utility functions of the two agents. The utility function of an
agent i at time step t is defined as:
Ui (t) =
∑
j ∈Θ
wi j (t)Pi j (t) (5)
where Θ is the set of neighbors j of the agent i . Also, wi j (t) is
the link weight, and Pi j (t) is the payoff of agent i after having
played with neighbor j at time step t . Therefore, by definition,
the accumulated utility function for each agent combines the link
weight and the aforementioned payoff. Let us observe how we have
introduced an utility function, since both payoffs and link weights
dynamically change over time in accordance with the interactions
on the multi-layer network. Thus, at the beginning (t = 0), we
assume that the the reliability ri j follows a power-law distribution
P(ri j ) ∗ r
−γ
i j , with the exponent γ assuming values in the range
2 ≤ γ ≤ 3. This corresponds to the realistic assumption that in the
blockchain network, the agents are more inclined to interact with
the few hubs in the network, i.e., those having higher reputation.
The reliability values are updated at each time step t of the evo-
lutionary dynamics after checking against the database, if the agent
ICDCN 2020, January 4–7, 2020, Kolkata, India A. Di Stefano, et al.
i decides to cooperate (C). In this case, the reliability is updated
following the strategy adopted in the previous round by agent j:
ri j (t + 1) =
{
ri j (t) +vr , i f Sj = C
ri j (t) −vr , i f Sj = D
(6)
Similarly, the risk perception values are updated as follows:
Ri (t + 1) =
{
Ri (t) + qr , i f Sj = C
Ri (t) − qr , i f Sj = D
(7)
Otherwise, if the agent i decides to defect (D) without any check
against dB, and it blindly trusts in its neighbor j, the reliability
values will be increased or decreased by a quantity v ′
r < vr , as a
function of the strategy adopted in the previous round by the agent
j. Thus, we have:
ri j (t + 1) =
{
ri j (t) +v
′
r , i f Sj = C
ri j (t) −v ′
r , i f Sj = D
(8)
Similarly, the risk perception values will be increased or de-
creased by a quantity q′r < qr according to the strategy adopted in
the previous round by the agent j, as follows:
Ri (t + 1) =
{
Ri (t) + q
′
r , i f Sj = C
Ri (t) − q′r , i f Sj = D
(9)
The reason behind the choice of values v ′
r < vr and q′(r ) <
q(r ) is that the agent has not actually checked against dB, thus
representing an unconditional trust towards the neighboring agent
but without any verification.
As explained before, at each time step t of the evolutionary
process, the link weights at the Trust layer change according to the
reliability (see Eq. 2), and thus the utility function impacting on the
evolutionary dynamics of agents’ behaviors (see Eq. 5).
4.3 Oblivion Control Mechanism
The heuristics based quantities, ri j and Ri , change smoothly over
the rounds of the evolutionary dynamics. As in [3], our model also
includes an oblivion mechanism, which means that the agents have
finite memory and they “forget” their history. This mechanism acts
on the heuristic estimators ri j and Ri , and it is implemented with
the parameters ξr and ξR , respectively. Thus, after a certain number
of time steps, the information stored τ time steps before the present
time has a weight (1 − ξ )τ and new information is stored with
weight o. Consequently, the reliability and risk perception will be
updated after τ , as follows:
ri j (τ ) = ri j (1 − ξr )
τ (10)
Ri (τ ) = Ri (1 − ξR )
τ (11)
The oblivion mechanism represents a perturbation to the system.
This helps the system move back to its original state, thus “reset-
ting” the evolutionary process, after which the agents re-start the
dynamic process they were previously engaged in. Based on the
values of ξr , the oblivion mechanism may dramatically change the
subsequent evolutionary dynamics, pushing the systems towards
a totally different equilibrium state. It would be interesting to see
how different values of ξr and ξR and τ impact on the size of the
considered temporal windows between these mechanisms.
5 PUTTING IT TOGETHER
This section aims to provide a real-world estimation of the payoff
matrix in the two conflict scenarios. Since quantifying the human
quality factors (benefits and costs) is challenging, through heuris-
tics we incorporate these factors, along with data mining from
blockchain, into the modeling approach. Thus, the modelis able to
provide statistical parameters for the game-theoretic payoff matrix
and the heuristics-based factors impacting on the strategy update
process in the evolutionary dynamics.
5.1 Lazy Miner Dilemma Payoffs
As mentioned, a Lazy Miner’s strategy is to save time by avoiding
the block content validity check, which has a variable complexity
block by block. Testing the validity of the block content means
executing all the transactions inside a block, against the state of the
previous block, maintained in a node’s local database. The complex-
ity of executing a single transaction varies between transactions and
different blockchain protocols. For example, in Bitcoin, executing a
transaction means running its own encapsulated script.
Most transactions adhere to a few standard script templates
that mainly require to compute and verify cryptographic hashes
or public key signatures (for details and ratios of script types on
the Bitcoin blockchain data, see [23]), which are relatively cheap.
Nevertheless, non-standard transactions present in blocks still need
to be accepted, as such the complexity can be much higher. More-
over the transaction execution cost can be higher in Smart contract
supporting blockchains (e.g. Ethereum), that often support Turing
complete languages.
To estimate the cost of block integrity check (see Fig. 1) for the
Lazy Miner, we consider the case of the Ethereum protocol. In
Ethereum transactions complexity is measured based on the con-
cept of gas, the unity of computational cost of the Ethereum Virtual
Machine operations [32]. First, we follow the official average bench-
mark by the Ethereum foundation that takes into account one gas as
taking 1 µ sec computation time to be completed on average. We can
then estimate the cost of each block content integrity check as the
average gas usage per block in the recent past (e.g. during October
2019 it has been approximately 6.9million gas [13]). Combining the
two values we obtain that verifying a block would approximately
cost 6.9 seconds. This value is unrealistically high, since a lot of the
gas costs are referred to storage operations and are meant for min-
ers to compensate for storage space and not time. From [33] we can
see how the official estimation is wildly inaccurate for the different
instructions executed, and can be overestimated as much as 90% on
average on commercial hardware. As such, we can consider a safe
rough average time estimation to check a block of 0.7 seconds.
A new block is found, on average, every 14.5 seconds and any
miner has a chance to find a new block proportional to the miner
relative hash power. A distribution of miners by hash rate during the
last blocks can be seen in [13, 14]. A clear power-law distribution
(log-scale) is evident (see Fig. 4), with few very big miners and many
smaller ones. Reasoning in game-theoretic terms, the Reward payoff
corresponds to the case where both agents earn a payoff which is
equal to the product of the average time to find a new block and the
relative hash power. Moreover, there is a community gain deriving
from an overall increase in the value of trust due to the creation of
valid blocks. Conversely, the Punishment payoff is different from
Resolution of Blockchain conflicts through game theory and multilayer network ICDCN 2020, January 4–7, 2020, Kolkata, India
0 20 40 60 80
0
2
4
6
8
10
Miner
H
as
h 
po
w
er
 (
%
)
(a) Hash power (%) of miners
0 200 400 600 800 1000
0.
2
0.
4
0.
6
0.
8
1.
0
Time
R
el
ia
bi
lit
y
(b) Reliability over time - low oblivion factor
0 2000 4000 6000 8000 10000
0.
2
0.
4
0.
6
0.
8
1.
0
Time
R
el
ia
bi
lit
y
(c) Reliability over time - medium oblivion factor
0 2000 4000 6000 8000 10000
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Time
R
el
ia
bi
lit
y
(d) Reliability over time - high oblivion factor
Figure 4: (a) Hash power of miners; (b)-(d) reliability values
over time (see Text).
the Reward payoff because of a lower community gain. In fact, if
both miners decide to defect, they will not experience any relative
advantage, but they might create an invalid block incurring in a
community loss. In the two mixed cases, Sucker and Temptation
payoffs, the defecting agents gain a 0.7 seconds advantage over the
cooperative ones.
In Fig. 4(a), during our observation period (October 2019), there
were N = 85 active miners, corresponding to agents in our model.
In order to avoid Distributed Denial of Service attacks (DDoS),
miners have to keep the information about connections secret.
It is therefore challenging to derive the number of neighboring
agents for each agent. However, since the miners are incentivized
to be connected to as many neighbors as possible, we consider as
a starting value the officially recommended maximum number of
connections for a node, i.e., K = 50 as estimated average value.
Then, we vary this connectivity value in a broad range to see how
it impacts on the dynamics of reliability.
We have simulated the Lazy miner dilemma changing the num-
ber of neighbors K and all the heuristics parameters introduced
in section 4 and we have quantified the distribution of reliabil-
ity values over the time. As showed in Fig. 4 (see (b)-(d)), we can
observe how the reliability shows different fluctuating behavior,
depending on statistical heuristic parameters given as an input in
the model. Specifically, plots highlight the sensitivity of the human
heuristics dynamics in function of the various statistical parameters
defined in the model: number of nodes, connectivity (i.e. number
of neighbours), quantities related to the update of reliability and
risk perception values (see section 4.1), and those related to obliv-
ion mechanism (see section 4.3). The latter acts on the reputation
of each agent. Indeed, a low oblivion factor (ξr ) (see (b) in Fig. 4)
will make the reputation more resilient, so the reliability increases
almost linearly over time (see plot (b)). Vice versa, higher values of
the oblivion factor (ξr ) (see (c)-(d) in Fig. 4) will make the dynamics
very fast and fluctuating, mainly due to the fact that the reliability
values change more quicker than their adaptation or updating over
the time. Overall, human heuristics allows us to model the human
quality factors, and the different observed behaviors demonstrate
how we can obtain asymptotic trends or oscillations.
5.2 Impatient Seller Dilemma Payoffs
In the Impatient Seller scenario, we can estimate the number of
neighbors considering the real Bitcoin economy as in [8]. Specifi-
cally, the distributions of in-degree and out-degrees correspond to
the number of received and emitted payments by an user. These
distributions follow a power-law behavior in function of time. The
number of users, that in our case correspond to nodes/agents in the
blockchain multi-layer network, can be estimated by considering
the ‘active’ nodes, defined as in [8], that are about 5.5 millions.
Also in this case, as seen in (a) of Fig. 4, we can observe a power-
law distribution in terms of connections, with a few highly con-
nected hubs, representing those nodes/users managing the vast
majority of transacted value. While the other users are mostly iso-
lated since they take part in very few payments. Similarly as for
the Lazy Miner (see (b)-(d) of Fig. 4), the values of the payoff matrix
can be estimated by exploiting the human heuristics and varying
its statistical parameters.
ICDCN 2020, January 4–7, 2020, Kolkata, India A. Di Stefano, et al.
6 CONCLUSIONS
In a blockchain, the agents’ behaviors play a crucial role in their
operational reliability. Thus, it is important to address conflict situ-
ations, which are complex and based on multi-agent behaviors. In
this work, we have modeled two conflict scenarios and proposed a
novel methodology based on game-theoretic modeling and multi-
layer networks. Furthermore, we have included human-related
factors, such as homophily, impacting on the agents’ decisions. We
have, also, defined link weights between agents based on human
heuristics, modeling how they change according to the experienced
payoffs. Some of the main advantages of using game theory and
multi-layer networks in a blockchain scenario include the better
capability to model complex conflict events under special boundary
conditions, and the huge potential to model and manage security
against attacks.
The proposed modeling approach belongs to the class of plug
and play models [18]. To the best of our knowledge, this is the sole
model of that class beyond epidemiological models.
Overall, the multi-layer approach provides a way to obtain a
cross-modality integration between human quality factors (such as
trust or reliability) and human actions (blockchain). It allows us to
integrate the commercial actions on blockchain and these human
quality factors. Through the heuristic-based approach, we have
incorporated these factors, along with data mining from blockchain,
into the modeling approach, which is then able to provide statistical
parameters for the game-theoretic modeling, such as payoff matrix
values and the quantification of the evolutionary dynamics.
Thus, heuristics allows us to connect multi-layer and game the-
ory in the addressed blockchain conflict scenarios, realising the
integration of trust and actions on blockchain within the payoff
matrix, which allows us to interpret the decision-making processes.
Results in terms of the dynamics of the reliability values shed light
on the sensitivity of the human heuristics dynamics.
We envisage that the game-theoretic approach combined with
heuristics will be extremely useful in validating the efficacy of
the presented modeling approach for the two blockchain conflict
scenarios, by considering real data sets. Moreover, it will allow us
to better understand from a methodological point of view which is
the impact of heuristics and homophily and weights’ dynamics on
the evolutionary outcomes of the two proposed scenarios.
Acknowledgments: The work of S. K. Das is supported by NSF
grants CNS-1818942, CCF-1725755, and DGE-1433659. He is also
an International Visiting Professor and SERB-sponsored VAJRA
faculty at IIT Kharagpur, India; and Satish Dhawan Visiting Chair
Professor at IISc Bangalore.
REFERENCES
[1] A. Asgaonkar and B. Krishnamachari. 2019. Solving the buyer and seller’s
dilemma: A dual-deposit escrow smart contract for provably cheat-proof de-
livery and payment for a digital good without a trusted mediator. In 2019 IEEE
International Conference on Blockchain and Cryptocurrency (ICBC). IEEE, 262–267.
[2] Tomaso Aste, Paolo Tasca, and Tiziana Di Matteo. 2017. Blockchain technologies:
The foreseeable impact on society and industry. Computer 50, 9 (2017), 18–28.
[3] F. Bagnoli, A. Guazzini, and P. Liò. 2007. Human heuristics for autonomous
agents. InWorkshop on Bio-Inspired Design of Networks. Springer, 340–351.
[4] F. Battiston, V. Nicosia, and V. Latora. 2017. The New Challenges of Multiplex
Networks: Measures and Models. The European Physical Journal Special Topics
226, 3 (2017), 401–416.
[5] S. Boccaletti, G. Bianconi, R. Criado, Del Genio C. I., J. Gómez-Gardeñes, M.
Romance, I. Sendiña-Nadal, Z. Wang, and M. Zanin. 2014. The structure and
dynamics of multilayer networks. Physics Reports 544, 1 (2014), 1–122.
[6] F. Casino, T. K. Dasaklis, and C. Patsakis. 2018. A systematic literature review
of blockchain-based applications: current status, classification and open issues.
Telematics and Informatics (2018).
[7] N. T. Courtois and L. Bahack. 2014. On subversive miner strategies and block
withholding attack in bitcoin digital currency. arXiv preprint arXiv:1402.1718
(2014).
[8] Damiano Di Francesco Maesa, Andrea Marino, and Laura Ricci. 2017. Data-driven
analysis of Bitcoin properties: exploiting the users graph. International Journal
of Data Science and Analytics (2017), 1–18.
[9] A. Di Stefano, M. Scatà, A. La Corte, S. K. Das, and P. Liò. 2019. Improving QoE
in Multi-layer Social Sensing: A Cognitive Architecture and Game Theoretic
Model. In Proceedings of the Fourth International Workshop on Social Sensing. ACM,
18–23.
[10] A. Di Stefano, M. Scatà, A. La Corte, P. Liò, E. Catania, E. Guardo, and S. Pagano.
2015. Quantifying the Role of Homophily in Human Cooperation using Multiplex
Evolutionary Game Theory. PloS one 10, 10 (2015).
[11] A. Di Stefano, M. Scatà, S. Vijayakumar, C. Angione, A. La Corte, and P. Liò. 2019.
Social dynamics modeling of chrono-nutrition. PLoS computational biology 15, 1
(2019), e1006714.
[12] G. Drosatos and E. Kaldoudi. 2019. Blockchain applications in the biomedical
domain: a scoping review. Computational and structural biotechnology journal 17
(2019), 229–240.
[13] Etherchain. 2019. https://www.etherchain.org/, Accessed 30 October 2019.
[14] Etherscan. 2019. https://etherscan.io/. Accessed 1 October 2019.
[15] I. Eyal. 2015. The miner’s dilemma. In 2015 IEEE Symposium on Security and
Privacy. IEEE, 89–103.
[16] I. Eyal and E. Sirer. 2014. Majority is not enough: Bitcoin mining is vulnerable.
In International conference on financial cryptography and data security. Springer,
436–454.
[17] Gerd Gigerenzer and Peter M Todd. 1999. Simple heuristics that make us smart.
Oxford University Press, USA.
[18] D. He, E. L. Ionides, and A. A. King. 2009. Plug-and-play inference for disease
dynamics: measles in large and small populations as a case study. Journal of the
Royal Society Interface 7, 43 (2009), 271–283.
[19] G. Karame, E. Androulaki, and S. Capkun. 2012. Two Bitcoins at the Price of
One? Double-Spending Attacks on Fast Payments in Bitcoin. IACR Cryptology
ePrint Archive 2012, 248 (2012), 1–17.
[20] Minhaj A. Khan and K. Salah. 2018. IoT security: Review, blockchain solutions,
and open challenges. Future Generation Computer Systems 82 (2018), 395–411.
[21] J. A. Kroll, I. C. Davey, and E. W. Felten. 2013. The economics of Bitcoin mining,
or Bitcoin in the presence of adversaries. In Proceedings of WEIS, Vol. 2013.
Georgetown University, 1–11.
[22] Z. Liu, N. C. Luo, W. Wang, D. Niyato, P. Wang, Y.-C. Liang, and D. I. Kim. 2019.
A survey on blockchain: a game theoretical perspective. IEEE Access 7 (2019),
47615–47643.
[23] D. D. F. Maesa, A. Marino, and L. Ricci. 2018. Data-driven analysis of Bitcoin
properties: exploiting the users graph. International Journal of Data Science and
Analytics 6, 1 (2018), 63–80.
[24] D. D. F. Maesa, P. Mori, and L. Ricci. 2019. A blockchain based approach for the
definition of auditable Access Control systems. Computers & Security 84 (2019),
93–119.
[25] V. Nicosia, S. P. Skardal, A. Arenas, and V. Latora. 2017. Collective phenom-
ena emerging from the interactions between dynamical processes in multiplex
networks. Physical Review Letters 118, 13 (2017), 138302.
[26] M. Scatà, A. Di Stefano, A. La Corte, and P. Liò. 2018. Quantifying the Propagation
of Distress and Mental Disorders in Social Networks. Scientific Reports 8, 1 (2018),
5005.
[27] M. Scatà, A. Di Stefano, A. La Corte, P. Liò, E. Catania, E. Guardo, and S. Pagano.
2016. Combining Evolutionary Game Theory and Network Theory to Analyze
Human Cooperation Patterns. Chaos, Solitons & Fractals 91 (2016), 17–24.
[28] O. Schrijvers, J. Bonneau, D. Boneh, and T. Roughgarden. 2016. Incentive com-
patibility of bitcoin mining pool reward functions. In International Conference on
Financial Cryptography and Data Security. Springer, 477–498.
[29] G. Szabó and G. Fath. 2007. Evolutionary games on graphs. Physics reports 446,
4-6 (2007), 97–216.
[30] A. Tapscott and D. Tapscott. 2017. How blockchain is changing finance. Harvard
Business Review 1, 9 (2017), 2–5.
[31] The Economist, The trust machine. 2019. https://www.economist.com/
news/leaders/21677198-technology-behind-bitcoin-could-transform-how-
economy-works-trust-machine. Accessed 30 October 2019.
[32] Gavin Wood. 2014. Ethereum: A secure decentralised generalised transaction
ledger. Ethereum Project Yellow Paper 151 (2014).
[33] R. Yang, T. Murray, P. Rimba, and U. Parampalli. 2019. Empirically Analyzing
Ethereum’s Gas Mechanism. arXiv preprint arXiv:1905.00553 (2019), 1–10.
[34] Z. Zheng, S. Xie, H.-N. Dai, X. Chen, and H. Wang. 2018. Blockchain challenges
and opportunities: A survey. International Journal of Web and Grid Services 14, 4
(2018), 352–375.
	Abstract
	1 Introduction
	2 Background and Related Works
	2.1 Game-Theoretic Models for Blockchain
	3 Blockchain Conflict Scenarios
	3.1 The Lazy Miner Dilemma
	3.2 The Impatient Seller Dilemma
	4 Blockchain as a Multi-layer network and Proposed Models
	4.1 Multi-agent Heuristics-based Game-theoretic Model
	4.2 Evolutionary Dynamics
	4.3 Oblivion Control Mechanism
	5 Putting it Together
	5.1 Lazy Miner Dilemma Payoffs
	5.2 Impatient Seller Dilemma Payoffs
	6 Conclusions
	References