Why Riding the Lightning? Equilibrium Analysis for Payment Hub Pricing
Why Riding the Lightning? Equilibrium Analysis
for Payment Hub Pricing
Xiaojian Wang, Huayue Gu, Zhouyu Li, Fangtong Zhou, Ruozhou Yu, Dejun Yang
Abstract—Payment Channel Network (PCN) is an auspicious
solution to the scalability issue of the blockchain, improving
transaction throughput without relying on on-chain transactions.
In a PCN, nodes can set prices for forwarding payments on behalf
of other nodes, which motivates participation and improves
network stability. Analyzing the price setting behaviors of PCN
nodes plays a key role in understanding the economic properties
of PCNs, but has been under-studied in the literature. In this
paper, we apply equilibrium analysis to the price-setting game
between two payment hubs in the PCN with limited channel
capacities and partial overlap demand. We analyze existence of
pure Nash Equilibriums (NEs) and bounds on the equilibrium
revenue under various cases, and propose an algorithm to find all
pure NEs. Using real data, we show bounds on the price of anar-
chy/stability and average transaction fee under realistic network
conditions, and draw conclusions on the economic advantage of
the PCN for making payment transfers by cryptocurrency users.
Index Terms—Payment channel network, game theory, price-
setting competition, Bertrand competition
I. INTRODUCTION
Blockchain-based cryptocurrencies such as the Bitcoin [1] can
execute transactions without a trust-based model, guaranteeing
security via decentralized consensus [2]. But compared to ex-
isting payment systems, blockchains have poor throughput and
high settlement latency [3]. The Payment Channel Network
(PCN) has emerged as a well-known solution to the blockchain
scalability issue. When two nodes open a payment channel, an
infinite number of transactions can be settled between the two
nodes without involving the blockchain, as long as the channel
capacity is not exceeded. A PCN is a network of nodes inter-
connected by payment channels, where Hash Time Locked
Contracts (HTLCs) [4] can be used to construct a payment
path between non-adjacent nodes. Each intermediate node on
the path (called a router) charges a small fee for forwarding the
payment, to compensate for its cost. Using off-chain channels
for payments can greatly improve throughput and settlement
speed. Moreover, current PCNs have much lower transaction
fees than the blockchain, incentivizing cryptocurrency users to
use PCNs for their payments. As an example of a PCN, the
Lightning Network (LN) of Bitcoin, first deployed in 2017,
already has 17,671 nodes and 79,557 open channels as of
2021, and has a total network capacity of 3,215 Bitcoins [5].
In a PCN, a user’s goal is to make payments with the lowest
cost, while each router sets fees to earn revenue from serving
user demand. Current PCNs such as the LN do not provide
fee-setting guidelines for routers to maximize revenue, and
Wang, Gu, Li, Zhou, Yu ({xwang244, hgu5, zli85, fzhou, ryu5}@ncsu.edu)
are with North Carolina State University, Raleigh, NC 27606, USA. Yang
(djyang@mines.edu) is with Colorado School of Mines, Golden, CO 80401,
USA. This research was supported in part by NSF grant 2008935.
most LN nodes set fees based on default values. Alternative
fee policies were proposed to keep channels balanced [6] or
maximize revenue [7]. Yet an open question remains: if routers
can set fees freely, will this lead to selfish fee setting that will
increase PCN fees to be comparable to on-chain transaction
fees, thus canceling the PCN’s economic advantage?
In this paper, we perform an equilibrium analysis to answer
the above question. As current PCNs are highly centralized [8]
with dedicated payment hubs [9], we focus on a two-hub
model, where two independent payment hubs (routers) both
provide payment services to common recipients. Senders can
choose any connected hub to send payments to a recipient.
Some senders are connected to only one hub, while others may
have channels with both hubs. This forms a competitive market
between the two hubs, with both locked-in and shared demand.
Based on senders’ demand and valuations, each hub sets its
prices (unit-demand transaction fees) to maximize revenue,
considering its opponent’s price setting. The resulting game is
a generalized Bertrand competition [10] with non-continuous
demand curves, locked-in demand, and capacity constraints.
We analyze existence of pure Nash Equilibriums (NEs) in
various cases of the game, and develop an algorithm to find all
pure NEs if any exists; when pure NEs do not exist, we derive
lower and upper bounds on the equilibrium revenue. Utilizing
these, we characterize the achieved revenue under competition
in realistic PCN scenarios, and compare it to the optimal
revenue achievable when the hubs are cooperative instead of
competitive. From the result, we conclude with a preliminary
answer to the above question, i.e., the competitive nature of
PCN will ultimately make its transaction fee much lower than
the blockchain, especially when the network capacity becomes
larger and larger. While our analysis is based on the two-hub
model, we believe our conclusion holds for the case with more
routers due to the even increased competition.
Our main contributions are summarized as follows:
• We formulate the price-setting game between two pay-
ment hubs in a PCN as a generalized Bertrand game.
• We analyze existence of pure NEs for special and general
cases, and characterize equilibrium revenue of a game.
• We design an efficient algorithm to find all pure NEs.
• Utilizing real-world datasets, we analyze price of anarchy
and price of stability under various capacities, and draw
conclusions on PCN prices compared to the blockchain.
Organization: §II presents our system model. §III formulates
the game. §IV analyzes special-case pure NEs and derives NE
revenue bounds. §V analyzes the general case and presents
our NE finding algorithm. §VI shows simulation results. §VII
reviews related work. §VIII concludes the paper.
5409
IC
C
 2
02
2 
- I
EE
E 
In
te
rn
at
io
na
l C
on
fe
re
nc
e 
on
 C
om
m
un
ic
at
io
ns
 | 
97
8-
1-
53
86
-8
34
7-
7/
22
/$
31
.0
0 
©
20
22
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
IC
C
45
85
5.
20
22
.9
83
91
71
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:25:53 UTC from IEEE Xplore.  Restrictions apply. 
II. SYSTEM MODEL
We consider a PCN consisting of two non-cooperative pay-
ment hubs acting as routers, and n users acting as senders
and/or recipients of payments. Each router i 2 {1, 2} has
payment channels with some users. A channel is divided into
two links, one from the user to the router (the uplink), and
one from the router to the user (the downlink). Each link has
a balance value. A channel has a total capacity, i.e., an upper
limit on the sum of balance values on both directions.
A payment from a sender to a recipient goes through exactly
two links: an uplink, and a downlink. A payment is executed
via a smart contract (e.g., an HTLC) across the two links, and
will occupy the balance value equal to its payment amount
(plus transaction fee) on each link during execution; if either
link has insufficient balance, the payment is rejected. When
the contract completes, the payment amount will be added to
the balances of the reverse directions on both channels, while
consuming the balance values on the forward directions.
Based on standard PCN protocols (e.g., the LN protocol),
the transaction fee of a link is set by its originating node.
Hence, each router can set the fee of its downlink towards
a recipient. We only consider fees proportional to payment
amounts, as base fees are commonly negligible and may be
removed in near future [11]. When both routers are con-
nected to the same recipient, each router can set the fee
for its own downlink to maximize its revenue over the next
period, which forms the basis of the non-cooperative game
between the routers. We assume routers have synchronized
fee-setting periods, and each period is sufficiently short such
that the downlink balances will not be recharged by completed
backward transactions. This makes the fee-setting game for
each recipient independent within each period. Hence we only
consider one recipient in game formulation here and hereafter.
Let ti be the starting balance of router i’s downlink to the
recipient at the start of the next period, and let pi be its
proportional fee (price). With slight abuse of terminology, we
call the starting downlink balance of router i its capacity. We
assume each router has a reserved price RE>0, below which
the router will not forward payments due to lack of revenue.
For simplicity, we assume both routers have the same RE.
Let ⌦ be the set of senders making payments to the recipient
in the next period. Below we use the words “sender” and
“user” interchangeably. We divide the senders into ⌦i, which
contains locked-in users that are only connected to router i
for i 2 {1, 2}; and ⌦⇤, which contains overlap users that
are connected to both routers simultaneously. Let n = |⌦|.
We assume each sender has enough uplink balance to make
payment to the recipient in the next period.
Each sender k has a payment demand �k in the next period
and a cost upper bound ck. ck is the maximum price that it can
accept for paying via the PCN; if there is no path with price
no larger than ck, the sender will instead use the blockchain.
W.l.o.g., we assume ck � RE for any user k. For user sets
⌦1,⌦2,⌦⇤, we define sets C1, C2, C⇤ as the sets of cost upper
bounds of the corresponding user sets respectively, and define
UplinkDownlink
Router 1 Router 2
Locked-in 
user set 
ё1
Locked-in 
user set
 ё2
Overlap user set ёȿ
RecipientUserRouter
Fig. 1. System model of the price-setting game. The senders are divided
into 3 sets based on the connection to the routers. The sender and recipient
connected to the router through uplink and downlink respectively.
C = C1[C2[C⇤[{RE}. We assume values in C,C1, C2, C⇤
are all sorted in ascending orders.
We assume all demands and cost upper bounds are known
to both routers. In practice, the routers can learn and estimate
the expected demand of senders based on each sender’s his-
torical demand towards each recipient, and we leave demand
estimation using machine learning to our future work. Fig. 1
shows the system model of this paper.
III. PRICE-SETTING GAME FORMULATION
A. Strategy Space and Demand Function
The strategy space of each router is the set of feasible prices,
Y = [RE, cmax], where cmax 2 C is the maximum cost upper
bound of senders; any price lower than RE is not acceptable to
a router, while any price higher than cmax leads to no revenue.
Based on sender demand and cost upper bounds, we can
define the demand function for each user set ⌦⌧ for ⌧ 2
{1, 2,⇤}. Define S⌧ (p) = {k 2 ⌦⌧ |ck � p} as the set of
senders in ⌦⌧ whose cost upper bounds exceed price p, the
demand function of set ⌦⌧ is defined as d⌧ (p) =
P
k2S⌧ (p)
�k.
By its definition, d⌧ (p) is a left-continuous and monotonically
non-increasing step function on range Y .
B. Game Setting
We assume routers and senders are rational and selfish. In
particular, sender k will choose the router i to conduct its
payment if pi < min{ck, p¬i} and the capacity of router
i is sufficient. For competition between the two routers,
we consider a pessimistic model [12], i.e., when pi < p¬i,
router i will choose to maximize its own revenue, while also
minimizing the revenue of router ¬i by serving users with
the highest cost upper bounds within the overlap user set ⌦⇤
before starting to serve low-value overlap users or its own
locked-in users. For the special case when the prices of the
two routers are equal, we assume the demand is allocated
proportionally based on the remaining capacity of each router,
as users are likely to randomly choose a router if both have
the same price and sufficient capacity.
C. Utility Function
Based on the demand function and game setting above, the
utility (revenue) function of router i is ⇧i(pi, p¬i) =8
><
>:
Li(pi)⌘pi ·min{ti, di(pi)+d⇤(pi)}, if pi<p¬i,
�i(p)⌘p·min{ti, di(p)+�id⇤(p)}, if pi=p¬i=p,
Mi(pi)⌘pi ·min{ti, di(pi)+ i}, if pi>p¬i,
(1)
where �i =
max{0,ti�di(p)}
max{0,ti�di(p)}+t¬i
,  i = max{0, d⇤(pi)� t¬i}.
This utility function includes three parts. Li(pi) is the revenue
5410Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:25:53 UTC from IEEE Xplore.  Restrictions apply. 
when router i’s price is less than router ¬i. The overlap
users will choose router i first, and the revenue of router i
is pi multiplied by the minimum of the capacity of router
i and the total demand of ⌦i and ⌦⇤ users. �i(p) is the
revenue when the prices of two routers are equal, the overlap
demand is distributed proportionally to the remaining capacity
as mentioned before. Mi(pi) is the revenue when router i’s
price is greater than router ¬i. The demand di(pi) of locked-
in users is still available, but only remaining of the overlap
demand after being served by router ¬i is available to router
i, which is max{0, d⇤(pi)�t¬i}. In any case, we call the actual
demand ⇧i(pi, p¬i)/pi served by router i its effective demand.
D. Nash Equilibrium Definitions
Here we outline definitions used in our equilibrium analysis.
Definition 1. Router i’s set of best responses BRi(p¬i) is the
set of strategies that maximize router i’s revenue in response
to the price p¬i set by router ¬i:
BRi(p¬i) = argmaxp2Y {⇧i(p, p¬i)}, 8i 2 {1, 2}. (2)
Definition 2. A pure Nash Equilibrium (NE) of the above
price-setting game is a strategy profile (p⇤1, p
⇤
2) 2 Y ⇥Y , such
that for 8i 2 {1, 2}, p
⇤
i is a best response: p
⇤
i 2 BRi(p⇤¬i). In
other words, no router i can unilaterally change its price to
an alternative pure strategy p
0
i 2 Y and get a higher payoff:
⇧i(p
⇤
i , p
⇤
¬i) � ⇧i(p
0
i, p
⇤
¬i), 8i 2 {1, 2}. (3)
Definition 3. A mixed strategy of router i is a probability
distribution over Y , �i : Y ! R⇤
, such that
P
p2Y �i(p) = 1.
Let ⇠ be the set of possible mixed strategies, a mixed-strategy
NE is a (mixed) strategy profile (�⇤
1 ,�
⇤
2) 2 ⇠ ⇥ ⇠ such that:
⇧i(�
⇤
i ,�
⇤
¬i) � ⇧i(�i,�
⇤
¬i), 8�i 2 ⇠, i 2 {1, 2}. (4)
In our analysis, we will mainly focus on the pure NEs in a
game. When pure NEs are non-existent, we will instead try to
bound the total equilibrium revenue under mixed-strategy NEs,
without deriving them directly. We leave detailed analysis of
mixed-strategy NEs to our future work.
IV. PRICE-SETTING GAME ANALYSIS
We start off with analysis of known pure NEs in special cases,
and then derive lower and upper bounds on the equilibrium
revenue of a general-case game where pure NE may not exist.
A. Monopoly Price and Monopoly Revenue
We first define the monopoly price given a set of senders.
Definition 4. Given a set of senders ⌦⇤ ✓ ⌦ for router i,
its monopoly price is defined as p̃i(⌦⇤) 2 argmaxp2Y {p ·
min{ti, d⇤(p)}}, where d⇤(p) is the demand curve of ⌦⇤. The
monopoly revenue is ⌥i(⌦⇤) = maxp2Y {p·min{ti, d⇤(p)}}.
Next we show that ⌥i(⌦⇤) only contains at prices in C.
Lemma 1. For 8i, ⌥i(⌦⇤)=maxp2C{p·min{ti, d⇤(p)}}.
Proof. Note that prices in C are sorted in ascending order.
The set S⇤(p) and hence d⇤(p) for ⌦⇤ does not change when
p 2 (ck�1, ck] where ck�1, ck 2 C. Since d⇤(p) > 0 and p >
RE > 0, ⌥i(⌦⇤) is monotonically non-decreasing when p 2
(ck�1, ck], at least one p maximizing p·min{ti, d⇤(p)} appears
at the right end point ck 2 C of a section (ck�1, ck].
Lemma 2. For router i, its monopoly revenue ⌥i(⌦⇤) for any
sender set ⌦⇤ can be computed in polynomial time.
Proof. Based on Lemma 1, router i can iterate over C to find
the maximum revenue ⌥i(⌦⇤) in polynomial time.
B. Special Case Analysis and Implication for General Case
Next we characterize existence of pure NEs in special cases.
1) With locked-in demand only (⌦⇤=;): When there is no
overlap demand, each router can set a monopoly price to obtain
maximum revenue from its locked-in users. Each pure NE in
this case consists of their monopoly prices: (p̃1(⌦1), p̃2(⌦2)).
2) With overlap demand only (⌦1=⌦2=;):
a) Sufficient capacity: If both routers have efficient ca-
pacity, the game turns into a Bertrand competition [10]. The
following theorem shows the existence of unique pure NE.
Theorem 1. (Bertrand duopoly equilibrium [10]) The only
NE in the Bertrand model occurs at (RE,RE).
Under the Bertrand model, the routers will not take different
prices since the higher-priced router will get 0 revenue and is
always incentivized to reduce its price. If the two routers take
the same price larger than RE, then either router can reduce
its price by an arbitrarily small amount, and win the demand
of all senders which almost doubles its revenue. Therefore, the
only NE exists when both routers take RE. This shows the
case with the strongest competition between the two routers.
b) Insufficient capacity: If at least one router does not
have enough capacity to serve all overlap users, a variant of
the Bertrand model in [12] applies (where the demand function
is assumed to be continuous and decreasing). Let t = t1 + t2.
Theorem 2. (NE in a capacitated duopoly market [12])
Assume t1<d⇤ or t2<d⇤. If function Mi(pi) uniquely reaches
its maximum when both participants set the price at P (t), then
(P (t), P (t)) is a pure NE. Otherwise no pure NE exists.
Here P (t) is the price when demand is exactly equal to
t. Since our demand function is left-continuous and non-
increasing, we redefine P (x) as the maximum price when the
demand is no less than x as shown below:
P (x) = max{p 2 Y : d⇤ � x}. (5)
Where d⇤ is the demand when the price equal to RE. The
above theorem applies with this modified P (·) function. We
omit the proof due to page limit.
3) The general case (⌦1 [ ⌦2 6= ;,⌦⇤ 6= ;): In the most
general case where both users may have both locked-in and
overlap users, pure NEs may or may not exist.
When both routers set a price reach their maximum revenue
at different cases in the utility function (1), then this price
pair forms a pure NE. For example, when router i and
router ¬i reach the maximum revenue at function Li and
M¬i respectively, the corresponding strategy profile satisfies
pi < p¬i, so the best response of both routers can be achieved.
When both routers achieve maximum at either Li (L¬i) or Mi
(M¬i) at the same time, they may compete to beat each other’s
price with oscillating behaviors, in which case a pure NE may
not exist. The situation becomes more complicated when two
router set a same price. A detailed characterization on whether
a pure NE exists or not is given in the next section.
5411Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:25:53 UTC from IEEE Xplore.  Restrictions apply. 
C. Upper and Lower Bounds on Equilibrium Revenue
In many cases, no pure NE exists. This could happen when
best responses of both routers fall onto the range of the same
function (Li or Mi), and/or when a best response does not
exist as in Eq. (6) which will be described in Sec. V. Below,
we try to characterize bounds on the equilibrium revenue when
mixed strategies are allowed.
Definition 5. Equilibrium revenue R
⇤
is the expected total rev-
enue of any pure NE (p⇤1, p
⇤
2) or mixed-strategy NE (�⇤
1 ,�
⇤
2).
We derive bounds on R
⇤ based on the Support Lemma [13]:
Lemma 3. ( [13, Lemma 33.2]) If (�⇤
1 ,�
⇤
2) is a mixed-strategy
NE, then every pure strategy pi in the support of �
⇤
i must be
a best response to �
⇤
¬i, for 8i 2 {1, 2}.
A lower bound (LB) of R⇤ is given as follows:
Lemma 4. R
⇤ �
P2
i=1 maxpi2Y {Mi(pi)} = R
⇤
LB.
Proof. Since max{Mi(pi)} is the monopoly revenue of router
i when serving only its locked-in demand and left-over of
the opponent, any strategy yielding a lower revenue than R
⇤
LB
cannot be a best response, cannot be in the support of �⇤
i .
An upper bound (UB) of R⇤ is given as follows:
Lemma 5. R
⇤  max
p1,p22Y
{
P2
i=1 ⇧i(pi, p¬i)} = R
⇤
UB.
Proof. R
⇤
UB is an upper bound on the total revenue when any
strategy profile is played, including any mixed strategy.
In next section, we will use R
⇤
UB and R
⇤
LB to evaluate the
impact of competition in cases where a pure NE does not exist.
Unlike NEs, these bounds always exist in any game.
V. GENERAL-CASE NE ANALYSIS AND SEARCHING
In this section, we analyze NE under general-case and propose
an algorithm to discover all the pure NEs if any exists.
A. NE Analysis for the General Case
Our first result shows that best responses and thus pure NEs
can only exist when both routers set prices in the set C.
Theorem 3. Given p¬i set by router ¬i, then every best
response pi 2 BRi(p¬i) satisfies that pi ✓ C.
Proof. Let us assume pi 2 Y \C, i.e., pi 2 (ck�1, ck) for
ck�1, ck 2 C. First, when pi 6= p¬i, router i uses either
function Li(pi) or Mi(pi) as its revenue function. Let ✏> 0
be an arbitrarily small amount, if the corresponding effective
demand is non-zero, then router i can always increase pi by
✏ to increase revenue. Further, router i cannot have a best
response with 0 effective demand, as it can always set its
price to RE and serve some demand with a positive revenue.
So pi 2 (ck�1, ck) cannot be a best response when pi 6= p¬i.
Second, when pi = p¬i 2 (ck�1, ck), then
1) If ti is not saturated, which means ti > di(pi)+�id⇤(pi),
we have two cases that need to be considered and pi cannot
be a best response in both cases:
a) �id⇤(pi)>0. There is overlap demand served by router
¬i, hence router i reducing ✏ leads to a higher revenue
(pi�✏)·min{ti, di(pi)+d⇤(pi)}>pi(di(pi)+�id⇤(pi)).
b) �id⇤(pi)=0. In this case, ti>di(pi). Increasing pi by
✏ does not change the demand, so the revenue increases.
2) If ti is saturated (and so is t¬i), which means tidi(pi)+
�id⇤(pi). First, decreasing pi cannot help router i increase
revenue since (pi� ✏)ti < piti when ti is still saturated at
price (pi�✏). Now, a necessary condition for pi to be a best
response is when increasing ✏ in price will not increase its
revenue. Assuming that pi2 (ck�1, ck) is a best response,
we need Mi(pi)<�i(pi). If Mi(pi)=�i(pi), pi cannot be
a best response since increasing by ✏ increases the revenue.
The following two conditions must be satisfied:
a) di(pi)+ i<ti, which indicates that di(pi) < ti.
b) di(pi)+ i = di(pi)+max{0, d⇤(pi)�t¬i}< di(pi)+
�id⇤(pi). We have di(pi) + d⇤(pi) � t¬i  di(pi) +
 i <di(pi)+�id⇤(pi). Then we have d⇤(pi) � t¬i <
�id⇤(pi), thus 1� t¬i
d⇤(pi)
<1� t¬i
ti�di(pi)+t¬i
. Eventu-
ally, we need d⇤(pi) < ti � di(pi) + t¬i.
As ti is saturated, there are two possible cases: First, if
di(pi) � ti, this contradicts Condition a) above. Second,
if di(pi) < ti, we have di(pi) + �id⇤(pi) = di(pi) +
ti�di(pi)
ti�di(pi)+t¬i
d⇤(pi)� ti, and hence ti�di(pi)
ti�di(pi)+t¬i
d⇤(pi)�
ti�di(pi). Eventually we have d⇤(pi)� ti � di(pi) + t¬i.
This contradicts Condition b) above. We then conclude that
ti being saturated and Mi(p)<�i(p) cannot be both true.
In summary, p2(ck�1, ck) cannot be a best response.
Following Theorem 3, we can reduce the strategy space of
each router to C, and iterate over all possible strategy profiles
(p1, p2)2C ⇥ C to locate all pure NEs. By the definition of
pure NE in Definition 2, the necessary and sufficient condition
for (p1, p2) to be a pure NE is when both routers’ prices
are within the best response sets. Hence, another necessary
condition is that the best response set must be non-empty for
either router given the other router’s price. Given this, the
following lemma is useful for eliminating non-NE price pairs:
Lemma 6. Given p¬i, the best response set BRi(p¬i) = ; iff
suppi2Y {⇧i(pi, p¬i)} = Li(p¬i) > �i(p¬i). (6)
Proof. Define function ⇧0
i(pi, p¬i)=Li(pi) when pip¬i, and
⇧0
i(pi, p¬i)=Mi(pi) when pi>p¬i. Notably, ⇧0
i(pi, p¬i) and
⇧i(pi, p¬i) differs on only one point when pi=p¬i, in which
case ⇧i(pi, p¬i)=�i(pi) and ⇧0
i(pi, p¬i)=Li(pi)��i(pi). By
definition, ⇧0
i is left-continuous and piece-wise non-decreasing
based on Li and Mi, and hence its maximum value always
exists, i.e., supp2Y {⇧0
i(p, p¬i)} = maxp2Y {⇧0
i(p, p¬i)}. If
⇧0
i has any maximizer at pi 6= p¬i, or if ⇧0
i has a unique
maximizer pi=p¬i but Li(pi)=�i(pi), the same maximizer
also maximizes ⇧i, in which case BRi(p¬i) 6= ;. If ⇧0
i has
a unique maximizer pi = p¬i and yet Li(pi) > �i(pi), then
there is no maximizer of ⇧i, because 1) for any p 6=p¬i, there
always exists p
0 6= pi where ⇧i(p0, p¬i)> ⇧i(p, p¬i), and 2)
for p = p¬i, there exists an arbitrarily small ✏ > 0 such that
⇧i(p� ✏, p¬i)=Li(p� ✏)>�i(p)=⇧i(p, p¬i).
B. Pure NE Searching Algorithm
Based on Theorem 3 and Lemma 6, we propose an algorithm
to find all pure NEs of this game, shown in Algorithm 1. The
main idea is to first find the candidate best response sets of
5412Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:25:53 UTC from IEEE Xplore.  Restrictions apply. 
two routers from the set C. Then, we add a strategy profile to
the pure NE set when 1) the best response sets of both routers
exist given each other’s price, and 2) prices of both routers
are in their best response sets respectively.
Algorithm 1: Pure NE Searching
Input: Price set C, demands d1, d2, d⇤, capacities t1, t2.
Output: Pure NE set P .
1 Initialize an empty pure NE set P ;
2 for 8pa in C do
3 for 8pb in C do
4 Compute ⇧1(pb, pa) and ⇧2(pb, pa) based on (1);
5 BR
0
1(pa) argmaxp2C {⇧1(p, pa)};
6 BR
0
2(pa) argmaxp2C {⇧2(p, pa)};
7 for 8p1 2 C do
8 for 8p2 2 C do
9 if p1 2 BR
0
1(p2) and p2 2 BR
0
2(p1) then
10 if p1 6= p2 then P  P [ {(p1, p2)};
11 if p1 = p2 and Eq. (6) does not hold then
12 P  P [ {(p1, p2)};
13 return P .
First, we initialize an empty pure NE set P . In Lines 2–6,
we first compute the revenues of the two routers given any
pair of prices in C, and then compute their candidate best
response sets BR
0
i(p¬i) respectively. In Lines 7–12, we then
scan through all price pairs again, and decide if any price pair
is a true NE. Specifically, if the two prices are not equal and
both are within their candidate best response sets, then they
are directly added to the pure NE set P . If the two prices
are equal, then they have to both be check against Eq. (6). If
Eq. (6) holds true for router i, then its best response set does
not exist, and pi cannot be a best response. If Eq. (6) does
not hold for both routers, then (p1, p2) is deemed as an NE
and added to P . Finally the algorithm returns the set of NEs
found, which could include zero, one, or more than one NE.
Theorem 4. Algorithm 1 outputs all pure NEs of this game,
and every price pair it outputs is a pure NE.
Proof. Combining Theorem 3 and Lemma 6, the only case
when BR
0
i(p¬i) 6= BRi(p¬i) is when BR
0
i(p¬i) contains a
price pi=p¬i but Eq. (6) holds true and hence BRi(p¬i)=;.
This case is eliminated by the condition at Line 11.
Given n users, the time complexity of Algorithm 1 is O(n2).
VI. PERFORMANCE EVALUATION
A. Experiment Settings
We use the Lighting Network (LN) topology from [3]. We
choose the two most connected nodes as routers 1 and 2
respectively, and all their neighbors as users. We have 390
overlap users, and 620 and 496 locked-in users for routers
1 and 2 respectively. As channel balances are hidden in the
LN, we use the most frequent channel capacity value as
the downlink capacity of both routers towards an artificial
destination, and hence each router has ti = 106 satoshi.
(a) PoA/PoS vs. capacity/demand (b) Revenue vs. capacity/demand
Fig. 2. Upper and Lower Bound of PoA and/or PoS and total revenue.
We simulate user demands by randomly sampling transac-
tions from a real-world credit card dataset [14] (translated to
satoshi), and picking smallest 40% as payments since PCNs
are mostly used for micropayments in reality. As paying via
the blockchain incurs a fixed fee regardless of the amount, we
define constant ⇢ as the product of each user’s demand and its
cost upper bound in the PCN, and let ⇢=22367 satoshi, the
average Bitcoin transaction fee as of Oct. 28, 2021 [15]. We
then generate each ck as ⇢ divided by demand of the user.
To show the impact of competition, we simulate three user
distributions: Ratio, which keeps the same user distribution
as in the original LN dataset; Overlap, which connects all
users to both routers; and Monopoly, where each user is
only connected to one router. In addition to NE searching, we
also implemented an Optimal algorithm, where both routers
cooperate to maximize their total revenue.
We use Price of Anarchy (PoA) and Price of Stability (PoS)
to measure the impact of competition. PoA (PoS) is defined
as the optimal total revenue of two routers divided by the
minimum (maximum) total NE revenue. We can get the PoA
UB (PoS LB) using the revenue LB (UB) in Lemmas 4–5.
B. Evaluation Results
1) PoA/PoS: Fig. 2 shows the competition between two
routers, with capacities of both routers increasing with the
same scale. The x-axis shows the total capacity of the two
routers divided by the total demand. Fig. 2(a) shows the
PoS LB and PoA UB under Ratio distribution, which are
calculated using total revenues shown in Fig. 2(b). Both
bounds have increasing trends as the capacity increases. This
is because the increased capacities of both routers induce more
competition, and hence both routers will lower their fees to
compete. When the capacity-to-demand ratio is over 0.4, both
the revenues and PoA/PoS bounds become constant. This is
because both routers run into full competition with enough
capacity. Oscillation under 0.2 is due to randomness in both
optimal and NE revenues when there is near no competition.
Fig. 3 shows the PoS LB and PoA UB under different user
distributions. For Overlap, its PoA/PoS bounds dominate the
other curves after the capacity/demand is greater than 0.4. This
is because under Overlap, the routers run into the strongest
competition where they have no revenue from locked-in users.
For Monopoly, based on the analysis in Sec. IV-B, an NE
always exists, and PoA/PoS is always 1. In this case, both
routers maximize the locked-in revenues without competition.
5413Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:25:53 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 3. PoS and/or PoA bounds under different user distributions.
Fig. 4. NE and optimal transaction fees normalized by blockchain fee.
2) Transaction fee: Fig. 4 shows the ratio of average NE or
optimal transaction fee over the average blockchain transaction
fee under the Ratio distribution. The NE or optimal transaction
fee is calculated w.r.t. all users served by the corresponding
router. Dashed lines show cases when NEs do not exist. NEs
exist only when capacity is low compared to the demand;
when the capacity-demand ratio exceeds 0.11, no NE exists
and hence we omit those points in the figure. The average
NE transaction fees of both routers decrease as the capacity
increases, and so do the optimal transaction fees. The NE
fees are generally lower than the optimal fees, and both fees
are significantly lower than the blockchain transaction fee. To
summarize, these results show that PCN has lower transaction
fees than the blockchain due to router competition. The larger
the network capacity, the lower the fee.
VII. RELATED WORK
PCN economics has only received recent attention. Engel-
mann et al. [16] studied the cheapest path routing for LN
users without considering router fee setting. Paolo et al. [17]
performed cost analysis of opening and maintaining channels
in the LN. Avarikioti et al. [18] and Ersoy et al. [7] studied
network creation games where nodes open channels strategi-
cally to maximize revenue. Jun Ren et al. [19] investigated the
optimal fee structure of LN nodes from a non-competitive lens,
and studied its impact on network topology. Di Stasi et al. [6]
focused on designing the LN fee policies of routers to balance
the network. None of the above addressed the price setting
game between routers, or revealed the economical principles
under the common belief of the low transaction fees in PCNs.
Pricing in network settings other than PCNs has been
studied in the Internet literature [20]. However, as PCN differs
from the Internet in that balances are not rechargeable instantly
after usage, most existing solutions do not apply.
Equilibrium analysis of duopoly/oligopoly markets has been
extensively studied in economics, but commonly with limiting
assumptions such as linear or continuous and decreasing
demand functions [12], [21] or unlimited capacities [22].
Our studied game generalizes these existing work, based on
the unique properties of the PCN including locked-in users,
discrete demands and limited capacities.
VIII. CONCLUSION
This paper focused on the economic analysis of transaction fee
setting behaviors of nodes in a PCN. Equilibrium analysis was
performed, including the existence of pure NEs, an algorithm
for finding all pure NEs, and bounds on equilibrium revenue.
With simulations using real-world datasets, we showed that
PCN transaction fees can be driven down significantly by the
competition between network nodes, compared to on-chain
transaction fees. These preliminary results have shed light on
the economical advantage of using PCNs over the blockchains,
and warrant future research on PCN economics.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,” 2008,
accessed 2021-11-12. [Online]. Available: https://bitcoin.org/bitcoin.pdf
[2] L. Xiao, Y. Ding, D. Jiang, J. Huang, D. Wang, J. Li, and H. Vin-
cent Poor, “A reinforcement learning and blockchain-based trust mech-
anism for edge networks,” IEEE Transactions on Communications,
vol. 68, no. 9, pp. 5460–5470, 2020.
[3] Y. Zhang and D. Yang, “RobustPay+: Robust Payment Routing With
Approximation Guarantee in Blockchain-Based Payment Channel Net-
works,” IEEE/ACM Transactions on Networking, 2021.
[4] P. Joseph and T. Dryja, “The Bitcoin Lightning Network: Scalable
Off-Chain Instant Payments,” 2016, accessed 2021-11-12. [Online].
Available: https://lightning.network/lightning-network-paper.pdf
[5] “Bitcoin: Lightning Network Capacity,” accessed 2021-11-12. [Online].
Available: https://studio.glassnode.com
[6] G. Di Stasi, S. Avallone, R. Canonico, and G. Ventre, “Routing Payments
on the Lightning Network,” in Proc. IEEE Blockchain, 2018, pp. 1161–
1170.
[7] O. Ersoy, S. Roos, and Z. Erkin, “How to Profit From Payments
Channels,” in Proc. FC, 2021.
[8] S. Martinazzi and A. Flori, “The Evolving Topology of the Lightning
Network: Centralization, Efficiency, Robustness, Synchronization, and
Anonymity,” PloS one, vol. 15, no. 1, p. e0225966, Jan. 2020.
[9] L. Andrea, D. D. F. Maesa, P. Mori, and L. Ricci, “Lightnings over
Rose Bouquets: An Analysis of the Topology of the Bitcoin Lightning
Network,” in Proc. IEEE COMPSAC, 2021, pp. 324–331.
[10] J. Bertrand, “Book review of theorie mathematique de la richesse sociale
and of recherches sur les principles mathematiques de la theorie des
richesses,” Journal de Savants, vol. 67, p. 499–508, 1883.
[11] “Zero Base Fee LN Discussion,” accessed 2021-11-12. [Online].
Available: https://bitcoinops.org/en/newsletters/2021/08/25/
[12] M. J. Osborne and C. Pitchik, “Price Competition in a Capacity-
Constrained Duopoly,” Journal of Economic Theory, vol. 38, no. 2, pp.
238–260, 1986.
[13] M. J. Osborne and A. Rubinstein, A Course in Game Theory. MIT
press, 1994.
[14] “Credit Card Fraud Detection,” accessed 2021-11-12. [Online].
Available: https://www.kaggle.com/mlg-ulb/creditcardfraud
[15] “Fees Per Transaction (USD),” accessed 2021-11-14. [Online].
Available: https://www.blockchain.com/charts/fees-usd-per-transaction
[16] F. Engelmann, H. Kopp, F. Kargl, F. Glaser, and C. Weinhardt, “Towards
An Economic Analysis of Routing in Payment Channel Networks,” in
Proc. ACM SERIAL, 2017, pp. 1–6.
[17] G. Paolo, G. Huberman, and C. Shikhelman, “Lightning Network
Economics: Channels,” SSRN 3840374, 2021.
[18] Z. Avarikioti, L. Heimbach, Y. Wang, and R. Wattenhofer, “Ride the
Lightning: The Game Theory of Payment Channels,” in Proc. FC, 2020,
pp. 264–283.
[19] A. H. Jun Ren, L. Feng, S. A. Cheong, and R. S. Mong Goh, “Optimal
Fee Structure for Efficient Lightning Networks,” in Proc. IEEE ICPADS,
Dec. 2018, pp. 980–985.
[20] T. Basar and R. Srikant, “Revenue-maximizing Pricing and Capacity
Expansion in A Many-users Regime,” in Proc. IEEE INFOCOM, 2002.
[21] R. Levitan and M. Shubik, “Price Duopoly and Capacity Constraints,”
International Economic Review, vol. 13, no. 1, pp. 111–122, 1972.
[22] C. L. Guzmán, “Price Competition on Network,” Banco de México,
2011, accessed 2021-11-14. [Online]. Available: https://core.ac.uk/
download/pdf/6289712.pdf
5414Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:25:53 UTC from IEEE Xplore.  Restrictions apply.