untitled
Auction Mechanisms in Cloud/Fog Computing
Resource Allocation for Public
Blockchain Networks
Yutao Jiao , Ping Wang , Senior Member, IEEE, Dusit Niyato , Fellow, IEEE,
and Kongrath Suankaewmanee
Abstract—As an emerging decentralized secure data management platform, blockchain has gained much popularity recently. To
maintain a canonical state of blockchain data record, proof-of-work based consensus protocols provide the nodes, referred to as
miners, in the network with incentives for confirming new block of transactions through a process of “block mining” by solving a
cryptographic puzzle. Under the circumstance of limited local computing resources, e.g., mobile devices, it is natural for rational
miners, i.e., consensus nodes, to offload computational tasks for proof of work to the cloud/fog computing servers. Therefore, we focus
on the trading between the cloud/fog computing service provider and miners, and propose an auction-based market model for efficient
computing resource allocation. In particular, we consider a proof-of-work based blockchain network, which is constrained by the
computing resource and deployed as an infrastructure for decentralized data management applications. Due to the competition among
miners in the blockchain network, the allocative externalities are particularly taken into account when designing the auction
mechanisms. Specifically, we consider two bidding schemes: the constant-demand scheme where each miner bids for a fixed quantity
of resources, and the multi-demand scheme where the miners can submit their preferable demands and bids. For the constant-demand
bidding scheme, we propose an auction mechanism that achieves optimal social welfare. In the multi-demand bidding scheme, the
social welfare maximization problem is NP-hard. Therefore, we design an approximate algorithm which guarantees the truthfulness,
individual rationality and computational efficiency. Through extensive simulations, we show that our proposed auction mechanisms with
the two bidding schemes can efficiently maximize the social welfare of the blockchain network and provide effective strategies for the
cloud/fog computing service provider.
Index Terms—Blockchain, auction, cloud/fog computing, social welfare, pricing, proof of work, game theory
Ç
1 INTRODUCTION
BY contrast to traditional currencies, cryptocurrencies are
traded among participants over a peer-to-peer (P2P)
network without relying on third parties such as banks or
financial regulatory authorities [1]. As the backbone tech-
nology of decentralized cryptocurrencies, blockchain has
also heralded many applications in various fields, such as
finance [2], Internet of Things (IoT) [3] and resource offload-
ing [4]. According to the market research firm Tractica’s
report, it is estimated that the annual revenue for enterprise
applications of blockchain will increase to $19.9 billion by
2025 [5]. Essentially, blockchain is a tamperproof, distrib-
uted database that records transactional data in a P2P net-
work. The database state is decentrally maintained, and any
member node in the overlay blockchain network is permit-
ted to participate in the state maintenance without identity
authentication. The transactions among member nodes are
recorded in cryptographic hash-linked data structures
known as blocks. A series of confirmed blocks are arranged
in chronological order to form a sequential chain, hence
named blockchain. All member nodes in the network are
required to follow the Nakamoto consensus protocol [1] (or
other protocols alike), to agree on the transactional data,
cryptographic hashes and digital signatures stored in the
block to guarantee the integrity of the blockchain.
The Nakamoto consensus protocol integrates a critical
computing-intensive process, called Proof-of-Work (PoW). In
order to have their local views of the blockchain accepted by
the network as the canonical state of the blockchain, consen-
sus nodes (i.e., block miners) have to solve a cryptographic
puzzle, i.e., find a nonce to be contained in the block such that
the hash value of the entire block is smaller than a preset tar-
get. This computational process is called mining, where the
consensus nodes which contribute their computing power to
mining are known as miners. Typically, the mining task for
PoW can be regarded as a tournament [6]. First, each miner
collects and verifies a certain number of unconfirmed transac-
tion records which are aggregated into a new block. Next, all
miners chase each other to be the first one to obtain the
� Y. Jiao, D. Niyato, and K. Suankaewmanee are with the School of
Computer Science and Engineering, Nanyang Technological University,
Singapore 639798.
E-mail: {yjiao001, dniyato}@ntu.edu.sg, kongrath.jojo@gmail.com.
� P. Wang is with the Lassonde School of Engineering, York University,
Toronto, ONM3J 1P3, Canada. E-mail: wangping@ntu.edu.sg.
Manuscript received 30 Apr. 2018; revised 9 Feb. 2019; accepted 11 Feb. 2019.
Date of publication 13 Mar. 2019; date of current version 7 Aug. 2019.
(Corresponding author: Ping Wang.)
Recommended for acceptance by O. Rana.
For information on obtaining reprints of this article, please send e-mail to:
reprints@ieee.org, and reference the Digital Object Identifier below.
Digital Object Identifier no. 10.1109/TPDS.2019.2900238
IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019 1975
1045-9219� 2019 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tp://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-8794-6330
https://orcid.org/0000-0001-8794-6330
https://orcid.org/0000-0001-8794-6330
https://orcid.org/0000-0001-8794-6330
https://orcid.org/0000-0001-8794-6330
https://orcid.org/0000-0002-1599-5480
https://orcid.org/0000-0002-1599-5480
https://orcid.org/0000-0002-1599-5480
https://orcid.org/0000-0002-1599-5480
https://orcid.org/0000-0002-1599-5480
https://orcid.org/0000-0002-7442-7416
https://orcid.org/0000-0002-7442-7416
https://orcid.org/0000-0002-7442-7416
https://orcid.org/0000-0002-7442-7416
https://orcid.org/0000-0002-7442-7416
mailto:
mailto:
mailto:
desired nonce value as the PoW solutions for the new block
which combines the collected transactional data1 and block
metadata. Once the PoW puzzle is solved, this new block will
be immediately broadcasted to the entire blockchain net-
work. Meanwhile, the other miners receive this message and
perform a chain validation-comparison process to decide
whether to approve and add newly generated block to the
blockchain. The miner which successfully has its proposed
block linked to the blockchain will be given a certain amount
of rewards, including a fixed bonus and a variable transaction
fee, as an incentive ofmining.
Since no prior authorization is required, the permission-
less blockchain is especially suitable for serving as a platform
for decentralized autonomous data management in many
applications. Some representative examples can be found in
data sharing [7], electricity trading in smart grid [8] and per-
sonal data access control [9]. Apart from the feature of public
access, permissionless blockchains have the advantage in
quickly establishing a self-organized data management plat-
form to support various decentralized applications (DApps).
This is a breakthrough in production relations in that people
can independently design smart contracts and freely build
decentralized applications themselveswithout the support or
permission from trusted intermediaries. By the PoW-based
Nakamoto consensus protocol, people are encouraged to
become consensus nodes, i.e., miners, with the mining
reward. Unfortunately, solving the PoWpuzzle needs contin-
uous, high computing power which mobile devices and IoT
devices cannot afford. As the number of mobile phone users
is forecasted to reach nearly 5 billion2 in 2019, it is expected
that DApps would usher in explosive growth if mobile devi-
ces can join in the mining and consensus process and self-
organize a blockchain network to support DApps [10]. To
alleviate the computational bottleneck, the consensus nodes
can access the cloud/fog computing service [11] to offload
their mining tasks, thus enabling blockchain-based DApps.
As the cloud/fog computing service can breed more consen-
sus nodes to be able to execute the mining task, it would sig-
nificantly improve the robustness of the blockchain network
and then raise the valuation of DApps, which further attracts
more DApp users to join, forming a virtuous circle.
In this paper, we mainly investigate the trading between
the cloud/fog computing service provider (CFP) and the
computationally lightweight devices, i.e., miners. From the
system perspective, we aim to maximize the social welfare
which is the total utility of the CFP and allminers in the block-
chain network. The social welfare can be interpreted as the
system efficiency [12]. For an efficient and sustainable busi-
ness ecosystem, there are some critical issues about cloud/
fog resources allocation and pricing for the service provider.
First, which miner can be offered the computing resources?
Too many miners will cause service congestion and incur
high operation cost to the service provider. By contrast, a
very small group of miners may erode the integrity of the
blockchain network. Second, how to set a reasonable service
price for miners such that they can be incentivized to
undertake the mining tasks? The efficient method is to set up
an auction where the miners can actively submit their bids to
the CFP for decisionmaking.We should also consider how to
make miners truthfully expose their private valuations. A
miner’s valuation on the computing service is directly related
to its privately collected transactional data which determines
its expected reward from the blockchain. To address the
above questions, we propose an auction-based cloud/fog
computing resource market model for blockchain networks.
Moreover, we design truthful auction mechanisms for
two different bidding schemes. One is the constant-demand
scheme where the CFP restricts that each miner can bid only
for the same quantity of computing resources. The other one
is the multi-demand scheme where miners can request their
demands and express the corresponding bids more freely.
The major contributions of this paper can be summarized
as follows:
� In the auction-based cloud/fog computing resources
market, we take the competition among miners [13]
and network effects of blockchain by nature [14] into
consideration. We study the auction mechanism with
allocative externalities3 tomaximize the social welfare.
� From the perspective of the CFP, we formulate social
welfare maximization problems for two bidding
schemes: constant-demand scheme andmulti-demand
scheme. For the constant-demand bidding scheme, we
develop an optimal algorithm that achieves optimal
social welfare. For the multi-demand bidding scheme,
we prove that the formulated problem is NP-hard
and equivalent to the problem of non-monotone sub-
modular maximization with knapsack constraints.
Therefore, we introduce an approximate algorithm
that generates sub-optimal social welfare. Both the
algorithms are designed to be truthful, individually
rational and computationally efficient.
� Based on the real-world mobile blockchain experi-
ment, we define and verify two characteristic func-
tions for system model formulation. One is the hash
power function that describes the relationship
between the probability of successfully mining a
block and the corresponding miner’s computing
power. The other one is the network effects function
that characterizes the relationship between security
of the blockchain network and total computing
resources invested into the network.
� Our simulation results show that the proposed auc-
tionmechanisms not only help the CFPmake practical
and efficient computing resource trading strategies,
but also offer insightful guidance to the blockchain
developer in designing the blockchain protocol.
To the best of our knowledge, this is the first work that
investigates resource management and pricing for block-
chain networks in the auction-based market. This paper is
an extended version of our conference paper [15]. In [15],
we considered only the miners with constant demand and
did not perform the real-world experiment to verify the net-
work effects function.
1. We refer to all transaction records stored in the block simply as
transactional data in the rest of the paper.
2. https://www.statista.com/statistics/274774/forecast-of-mobile-
phone-users-worldwide
3. The allocative externalities occur when the allocation result of the
auction affects the valuation of the miners.
1976 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
https://www.statista.com/statistics/274774/forecast-of-mobile-
The rest of this paper is organized as follows. Section 2
reviews related work. The system model of cloud/fog com-
puting resource market for blockchain networks is intro-
duced in Section 3. Section 4 discusses the constant-demand
bidding scheme and the optimal algorithm for social wel-
fare maximization. In Section 5, the approximate algorithm
for multi-demand bidding scheme is presented in detail.
Experimental results of mobile blockchain and the perfor-
mance analysis of the proposed auction mechanisms are
presented in Section 6. Finally, Section 7 concludes the
paper. Table 1 lists notations frequently used in the paper.
2 RELATED WORK
As the core part of the blockchain network, creating blocks
integrates the distributed database (i.e., ledger), the consen-
sus protocol and the executable scripts (i.e., smart con-
tract) [16]. From the perspective of data processing, a DApp
is essentially developed on the basis of smart contracts and
transactional data stored in the blockchain. DApps usually
use the distributed ledger to monitor the state/ownership
change of the tokenized assets. The execution of smart con-
tracts is driven by the transaction/data change to determine
the blockchain state transition autonomously, e.g., the asset
re-distribution among the DApp users [3], [16]. With the pub-
lic blockchain, DApps do not have to rely on a centralized
infrastructure and intermediary that supports ledger mainte-
nance and smart contracts execution with dedicated storage
and computing resources. Instead, DApp providers adopt
the token-based reward mechanisms which incentivize peo-
ple to undertake the tasks of resource provision and system
maintenance. In this way, the functionalities of DApps can be
freely activated and realized among transaction issuing/vali-
dation, information propagation/storage and consensus par-
ticipation [16], [17]. Therefore, the public blockchain network
is a suitable platform for incentive-driven Distributed
Autonomous Organization (DAO) systems. To date, a line of
literature study the DAO inwireless networking based on the
public blockchain. The authors in [4] established a trading
platform for Device-to-Device (D2D) computation offloading
based on a dedicated cryptocurrency network. They intro-
duced smart contract-based auctions between neighbor D2D
nodes to execute resource offloading and offload the block
mining tasks to the cloudlets. The authors in [18] adopted a
PoW-based public blockchain as the backbone of a P2P file
storage market, where the privacy of different parties in a
transaction is enhanced by the techniques such as ring signa-
tures and one-time payment addresses. When identity verifi-
cation is required for market access granting, e.g., in the
scenarios of autonomous network slice brokering [19] and
P2P electricity trading [8], the public blockchain can be
adapted into consortium blockchain by introducingmember-
ship authorizing servers with little modification to the con-
sensus protocols and the smart contract design.
Recently, there have already been some studies on the
blockchain network from the point of game theory. The
authors in [20] proposed a game-theoretic model where the
occurrence of working out the PoW puzzle was modeled as a
Poisson process. Since a miner’s expected reward largely
depends on the block size, each miner’s response is to choose
a reasonable block size beforemining for its optimal expected
reward. An analytical Nash equilibrium in a two-player case
was discussed. In [21], the authors presented a cooperative
game model to investigate the mining pool. In the pool, min-
ers form a coalition to accumulate their computing power for
steady rewards. Nevertheless, these works mainly focused
on the block mining strategies and paid little attention to the
deployment of the blockchain network for developing
DApps and corresponding resource allocation problems. As
a branch of the game theory, the auctionmechanism has been
widely used to deal with resource allocation issues in various
areas, such as mobile crowdsensing [22], [23], [24], cloud/
edge computing [25], [26], and spectrum trading [27]. In [24],
the authors proposed incentive mechanisms for efficient
mobile task crowdsourcing based on reverse combinatorial
auctions. They considered data quality constraints in a linear
social welfare maximization problem. The authors in [25]
designed optimal and approximate strategy-proof mecha-
nisms to solve the problem of physical machine resource
management in clouds. They formulated the problem as a lin-
ear integer program. In [26], the authors proposed an auction-
based profit maximization model for hierarchical mobile
edge computing. Unfortunately, it did not take any economic
properties, e.g., incentive compatibility, into account. While
guaranteeing the strategyproofness, the authors in [27] inves-
tigated the problem of redistributing wireless channels and
focused on the social welfare maximization. They not only
considered strategyproofness, but also took the channel spa-
tial reusability, channel heterogeneity and bid diversity into
account. However, in their combinatorial auction setting, the
bidder’s requested spectrum bundle is assumed to be always
truthful. In fact, none of these works can be directly applied
to allocating computing resources for the blockchain mainly
due to its unique architecture. In the blockchain network, the
allocative externalities [28], [29] should be particularly taken
into consideration. For example, besides its own received
computing resources, each miner also cares much about the
otherminers’ computing power.
TABLE 1
Frequently Used Notations
NOTATION DESCRIPTION
N ,N Set of miners and the total number of miners
M Set of winners, i.e., the selected miners by the
auction
d, di Miners’ service demand profile and miner i’s
demand for cloud/fog computing resource
b, bi Miners’ bid profile and miner i’s bid for its
demand di
x, xi Resource allocation profile and allocation
result for miner i
p, pi Price profile and cloud/fog computing service
price for miner i
gi Miner i’s hash power
T , r Fixed bonus from mining a new block and the
transaction fee rate
si Miner i’s block size
� Average block time
D Total supply of computing resources from CFP
wð�Þ Network effects function
q Quantity of computing resource required by
constant-demand miner
b Demand constraint ratio for multi-demand
miner
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1977
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
In our paper, the social welfare optimization in the multi-
demand bidding scheme is proved to be a problem of non-
monotone submodular maximization with knapsack con-
straints, which has not been well studied in auction mecha-
nism design to date. The most closely related papers are [23]
and [30] in mobile crowdsourcing. In [23], the authors pre-
sented a representative truthful auction mechanism for crow-
dsourcing tasks. They studied a non-monotone submodular
maximization problem without constraints. In [30], the
authors formulated a monotone sub-modular function maxi-
mization problem when designing a truthful auction mecha-
nism. The total payment to the mobile users is constrained by
a fixed budget. Technically, the algorithms in aforementioned
works cannot be applied in our models. In addition, the
authors in [31] useddeep learning to recover the classical opti-
mal auction for revenue maximization and applied it in the
edge computing resources allocation in mobile blockchain.
However, it only considers one unit of resource in the auction.
3 SYSTEM MODEL: BLOCKCHAIN MINING AND
AUCTION BASED MARKET MODEL
3.1 Cloud/Fog Computing Resource Trading
Our system model is built under the assumptions that 1) the
public blockchain network adopts the classical PoW consen-
sus protocol [1], 2) miners do not use their own devices, e.g.,
computationally lightweight or mobile devices, to execute the
mining tasks. We consider a scenario where there is one CFP
and a community ofminersN ¼f1; . . . ;Ng. Eachminer runs
a blockchain-based DApps to record and verify the transac-
tional data sent to the blockchain network. Due to insufficient
energy and computing capacity of their devices, the miners
offload the task of solving PoW to nearby cloud/fog comput-
ing service which is deployed and maintained by the CFP.
To perform the trading, the CFP launches an auction. The
CFP first announces auction rules and the available service
to miners. Then, the miners submit their resource demand
profile d ¼ ðd1; . . . ; dNÞ and corresponding bid profile b ¼
ðb1; . . . ; bNÞwhich represents the valuations of their requested
resources. After having received miners’ demands and bids,
the CFP selects the winning miners and notifies all miners
the allocation x ¼ ðx1; . . . ; xNÞ and the service price p ¼
ðp1; . . . ; pNÞ, i.e., the payment for each miner4. We assume
that miners are single minded [32], that is, each miner only
accepts its requested quantity of resources or none. The set-
ting xi ¼ 1 means that miner i is within the winner list and
allocated resources for which it submits the bid, while xi ¼ 0
means no resource allocated. The payment for a miner which
fails the auction is set to be zero, i.e., pi ¼ 0 if xi ¼ 0. At the
end of the auction, the selected miners or winners make the
payment according to the price assigned by the CFP and
access the cloud/fog computing service.
3.2 Blockchain Mining with Cloud/Fog Computing
Service
With the allocation xi and demand di, miner i’s hash power
gi can be calculated from
giðd; xÞ ¼
dixi
dN
; (1)
which is a linear fractional function. The function depends
on other miners’ allocated computing resources and satis-
fies
P
i2N gi ¼ 1. dN ¼
P
i2N dixi is the total quantity of allo-
cated resources. The hash power function giðd; xÞ is verified
by a real-world experiment as presented later in Section 6.
Before executing the miner selection by the auction, each
miner has collected unconfirmed transactional data into its
own block. We denote each miner’s block size, i.e., the total
size of transactional data and metadata, by s ¼ ðs1; . . . ; sNÞ.
In the mining tournament, the generation of new blocks fol-
lows a Poisson process with a constant mean rate 1
� through-
out the whole blockchain network [33]. � is also known as
the average block time. If the miner i finds a new block, the
time for propagation and verification of transactions in the
block is dominantly affected by si. The first miner which
successfully has its block reach consensus can receive a
token reward R. The token reward is composed of a fixed
bonus T � 0 for mining a new block and a variable transac-
tion fee ti ¼ rsi determined by miner i’s block size si and a
predefined transaction fee rate r [20]. Thus, miner i’s token
reward Ri can be expressed as follows:
Ri ¼ ðT þ rsiÞPiðgiðd; xÞ; siÞ; (2)
where Piðgiðd; xÞ; siÞ is the probability that miner i receives
the reward for contributing a block to the blockchain.
We note that obtaining the reward rests with successful
mining and instant propagation. Miner i’s probability of dis-
covering the nonce value Pm
i is equal to its hash power gi, i.e.,
Pm
i ¼ gi. However, a lucky miner may even lose the tourna-
ment if its broadcast block is not accepted by other miners at
once, i.e., failing to reach consensus. The newly mined block
that cannot be added onto the blockchain is called orphan
block [20]. A larger block needsmore propagation and verifica-
tion time, thus resulting in larger delay in reaching consensus.
As such, a larger block size means a higher chance that the
block suffers orphaned. According to the statistics displayed
in [34], miner i’s block propagation time ti is linear to the
block size, i.e., ti ¼ �si. � is a constant that reflects the impact
of si on ti. Since the arrival rate of newblocks follows the Pois-
son distribution,miner i’s orphaning probability is:
Po
i ¼ 1� e�
1
�
ti : (3)
Substituting ti, we can express Pi as follows:
Piðgiðd; xÞ; siÞ ¼ Pm
i ð1� Po
i Þ ¼ gie
�1
�
�si : (4)
3.3 Business Ecosystem for Blockchain Based
DApps
Here, we describe the business ecosystem for blockchain
based DApps in Fig. 1. In developing a blockchain based
DApps, there exists a blockchain developer which is respon-
sible for designing or adopting the blockchain operation
protocol. The developer specifies the fixed bonus T , the
transaction fee rate r and so on. Through adjusting the diffi-
culty of finding the new nonce, the blockchain developer
4. Throughout this paper, the terms price and payment are used
interchangeably.
1978 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
keeps the average block time � at a reasonable constant
value. To support the DApps, in the deployed blockchain
network, miners perform mining and token reward, i.e., R,
is used to incentivize them. The reward may come from the
token that DApps users pay to the blockchain network.
When bidding for computing resources, miners always
evaluate the value of the tokens. In fact, the intrinsic value of
tokens depends on the trustworthiness and robustness, i.e.,
the value of the blockchain network itself. From the perspec-
tive of trustworthiness, the PoW-based blockchain is only as
secure as the amount of computing powerdedicated tomining
tasks [14]. This results in positive network effects [14] in that as
more miners participate and more computing resources are
invested, the security of the blockchain network is improved,
and hence the value of a reward given to miners increases. A
straightforward example is that if the robustness of the block-
chain network is very low, i.e., vulnerable to manipulation (51
percent attack, double-spending attack, etc.), that means this
blockchain is insecure and cannot support any decentralized
application effectively. Naturally, this blockchain network
losses its value and its distributed tokens (including the
rewards to miners) would be worthless. On the contrary, if
there are many miners and computing resources invested, the
blockchainwould bemore reliable and secure [35]. Thus, users
would trust it more and like to use its supported decentralized
applications through purchasing the tokens and then miners
would also gain more valuation on their received tokens
(reward). To confirm this fact, we conduct a real-world experi-
ment (see Section 6.1) to evaluate the value of the tokens and
the reward by examining the impact of the total computing
power on preventing double-spending attacks. By curve fit-
ting of the experimental data, we define the network effects by
a non-negative utility function as follows:
wðpÞ ¼ a1p� a2pe
a3p; (5)
where p ¼ dN
D 2 ½0; 1� is the normalized total computing
power of the blockchain network. dN ¼
P
i2N dixi is the
total quantity of allocated computing resources, and D is
the maximum quantity that CFP can supply. a1; a2; a3 > 0
are curve fitting parameters and this network effects func-
tion in the feasible domain is monotonically increasing with
a diminishing return.
3.4 Miner’s Valuation on Cloud/Fog Computing
Resources
In the auction, a miner’s bid represents the valuation of
computing resources for which it demands. Since miner i
cannot know the number of winning miners and the total
quantity of allocated resources until the end of auction, we
assume that miner i can only give the bid bi according to its
expected reward Ri and demand di without considering
network effects and other miners’ demands, i.e., setting
wðdN Þ ¼ 1 and
P
j2Nnfig djxj ¼ 0. In other words, miner i
has an ex-ante valuation v0i which can be written as
(Pm
i ¼ gi ¼ 1)
v0i ¼ Ridi ¼ T þ rsið Þe�1
��sidi: (6)
Here, we assume that Ri represents the miner i’s valuation
for one unit computing resource and di is decided according
to miner i’s own available budget. Since our proposed auc-
tion mechanisms are truthful (to be proved later), bi is equal
to the true ex-ante valuation v0i, i.e., bi ¼ v0i.
After the auction is completed, miners receive the alloca-
tion result, i.e., x, and are able to evaluate the network effects.
Hereby,miner i has an ex-post valuation v00i as follows:
v00i ¼ v0iwðpÞgiðd; xÞ
¼ d2i xi
dN
a1p� a2pe
a3pð Þ T þ rsið Þe�1
��si
¼ d2i xi
D
a1 � a2e
a3
dN
D
� �
T þ rsið Þe�1
�
�si :
(7)
3.5 Social Welfare Maximization
The CFP selects winning miners, i.e., winners, and deter-
mines corresponding prices in order to maximize the social
welfare. Let c denote the unit cost of running the cloud/fog
computing service, so the total cost to the CFP can be
expressed by CðdN Þ ¼ cdN ¼
P
i2N cdixi. Thus, we define
the social welfare of the blockchain network S as the differ-
ence between the sum of all miners’ ex-post valuations and
the CFP’s total cost, i.e.,
SðxÞ ¼
X
i2N
v00i � CðdN Þ
¼
X
i2N
d2i xi
D
a1 � a2e
a3
dN
D
� �
T þ rsið Þe�1
�
�si
� cdN :
(8)
Therefore, the primary objective of designing the auction
mechanism is to solve the following integer programming:
max
x
SðxÞ ¼
X
i2N
d2i xi
D
a1 � a2e
a3
D
P
i2N dixi
� ��
T þ rsið Þe�1
�
�si
�
�
X
i2N
cdixi;
(9)
s:t:
X
i2N
dixi � D; (10)
xi 2 f0; 1g; 8i 2 N ; (11)
where (10) is the constraint on the quantity of computing
resources that the CFP can offer. In the next two sections,
we consider two types of bidding schemes in the auction
Fig. 1. Business ecosystem for blockchain based DApps.
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1979
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
design: constant-demand bidding scheme and multi-
demand bidding scheme. Accordingly, there are two types
of miners: constant-demand miners and multi-demand
miners. We aim to maximize the social welfare, while
guaranteeing the truthfulness, individual rationality, and
computational efficiency.
3.6 Example Application: Mobile Data
Crowdsourcing
As shown in Fig. 2, we take an example of mobile data
crowdsourcing to illustrate the use of our model and and
to demonstrate an effectiveness of the related concepts.
Initially, there are a group of mobile users. Each of the
mobile users can be either a worker that collects data from
the sensors in its mobile device or a requester that wants
to buy the sensing data from other users (workers). How-
ever, there is often no trusted or authorized crowdsourc-
ing platform to process the data trading and record the
transactions. Moreover, no mobile user has enough trust,
right, or capability to establish and operate such a central-
ized platform. In this case, a viable solution is to design
and deploy a blockchain based crowdsourcing DApp by a
blockchain developer. Based on the designed protocol, the
mobile users can utilize the available cloud/fog comput-
ing resources to self-organize a reliable blockchain net-
work. Thus, their data trading activities can be facilitated
by the established decentralized crowdsourcing platform
with smart contracts.
The blockchain developer adopts the PoW protocol and
sets the parameters, such as the fixed reward T , the trans-
action fee rate r and the average block time �. Due to lim-
ited energy and computational capability, mobile users
(miners) need to buy computing resources from the CFP
through an auction process and then join the miner net-
work. Before the auction begins, miner i may possess a cer-
tain amount of data to be stored in the blockchain and
knows its block size si. According to (6), the miner i will
evaluate its expected reward and the ex-ante value v0i of
the computing resources based on the protocol parameters,
its block size and demand. Next, the miner i submits the
bid bi and the demand di to the CFP. Using our proposed
auction algorithm, the CFP can select the winning miners,
i.e., the allocation xi, and determine the price pi to maxi-
mize the social welfare. Meanwhile, it can guarantee the
miner’s truthfulness and non-negative utility which is the
difference between the ex-post valuation v00i and its pay-
ment pi. Once the auction ends, the winning miners which
are allocated the computing resources form a miner net-
work. With the CFP service in solving the PoW puzzle and
calculating the hash values, the winning miners can start
the mining and consensus process to verify and contribute
new blocks containing the crowdsourced data and corre-
sponding transaction records to the blockchain. For more
details about the blockchain-based crowdsourcing, please
refer to [36].
4 AUCTION-BASED MECHANISM FOR CONSTANT-
DEMAND MINERS
In this section, we first consider a simple case where all min-
ers submit bids for the same quantity of computing resour-
ces. Here, each miner’s demand is q units, i.e., di ¼ q 2 ð0;
DÞ; 8i 2 N . Thus, the optimization problem for the CFP can
be expressed as follows:
max
x
SðxÞ ¼
X
i2N
q2xi
D
a1 � a2e
a3
D
P
i2N qxi
� ��
T þ rsið Þe�1
��si
�
�
X
i2N
cqxi;
(12)
s:t:
X
i2N
qxi � D; (13)
xi 2 f0; 1g; 8i 2 N : (14)
The first proposed truthful auction for Constant-Demand
miners in Blockchain networks (CDB auction), as presented
Fig. 2. An example mobile data crowdsourcing application illustrating the system model and the cloud/fog computing resource market for blockchain
networks.
1980 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
in Algorithm 1, is an optimal one and its rationale is based
on the well-known Myerson’s characterization [37] pro-
vided in Theorem 1.
Algorithm 1. CDB Auction
Input:Miners’ bid profile b and demand profile d.
Output: Resource allocation x and service price p.
1: begin
2: for each i 2 N do
3: xi  0, pi  0
4: end for
5: Sort bids b in descending order.
6: j argmaxj2N bj
7: M fjg, S  q
D a1 � a2e
a3q
D
� �
bj � cq
8: whileM 6¼ N and Mj j � D do
9: j argmaxj2NnMbj
10: Mt  M[ fjg
11: St  
P
i2Mt
q
D a1 � a2e
a3qMtj j� �
bi � cqMtj j
12: if St < S or St < 0 then
13: break
14: end if
15: M M[ fjg
16: end while
17: for eachi 2 M do
18: xi  1,N�i  N n fig,M�i  Mn fig
19: j argmaxj2N�i bj
20: M0  fjg, S0  q
D a1 � a2e
a3qM0j j
D
� �
bj � cq
21: whileM0 6¼ N and M0j j � D do
22: j argmaxi2N�inM0bj
23: M0
t  M0 [ fjg
24: S0t  
P
i2M0t
q
D a1 � a2e
a3q M0tj j
D
 !
bi � cqM0
t
�� ��
25: if S0t < S0 or S0t < 0 then
26: break
27: end if
28: M0  M0
t, S
0  S0t
29: end while
30: pi ¼ S0 �
P
i2M�i
q
D a1 � a2e
a3qM�ij j
D
� �
bi � cqM�ij j
31: end for
32: End
Theorem 1 ([32, Theorem 13.6]). An auction mechanism is
truthful if and only if it satisfies the following two properties:
1) Monotonicity: If miner i wins the auction with bid bi,
then it will also win with any higher bid b0i > bi.
2) Critical payment: The payment by a winner is the
smallest value needed in order to win the auction.
As illustrated in Algorithm 1, the CDB auction con-
sists of two consecutive processes: winner selection
(lines 5-16) and service price calculation (lines 17-31).
The winner selection process is implemented with a
greedy method. For the convenience of later discussion,
we define a set of winners asM. Adding a miner i inM
means setting xi ¼ 1. Thus, we transform the original
problem in (12), (13), and (14) to an equivalent set func-
tion form as follows:
max
M�N
SðMÞ ¼
X
i2M
a1 � a2e
a3qMj j
D
� � qbi
D
� cqMj j; (15)
s:t: qMj j � D; (16)
where Mj j represents the cardinality of setM which is the
number of winners in M and bi ¼ v0i ¼ T þ rsið Þe�1
��si q. In
the winner selection process (lines 5-11), miners are first
sorted in a descending order according to their bids. Then,
they are sequentially added to the set of winners M until
the social welfare SðMÞ begins to decrease. Finally, the set
of winners M and the allocation x are output by the
algorithm.
Proposition 1. The resource allocation x output by Algorithm 1
is globally optimal to the social welfare maximization problem
given in (12), (13), and (14).
Proof. With the proof by contradiction, this result follows
from Claim 1. tu
Claim 1. LetMA be the solution output by Algorithm 1 on
input b, and MO be the optimal solution. If MA 6¼ MO,
then we can construct another solutionM	
O whose social
welfare SðM	
OÞ is even larger than the optimal social wel-
fare SðMOÞ.
Proof. We assume b1 � � � � � bN and MA 6¼ MO. Next, we
consider two cases.
1) Case 1:MO 
MA. According to Algorithm 1, it is
obvious that we can construct a solutionM	
O with
higher social welfare by adding a member from
MA toMO.
2) Case 2: MO 6
 MA. Let m be the first element
(while-loop lines 7-14) that m =2 MO. Since m is
maximal (bm is minimal by assumption), we have
1; . . . ;m� 1 2MO and the corresponding set of
winning bids bMO
¼ fb1; . . . ; bm�1; b0m; b0mþ1; . . . ;
b0jMOjg, where the bids fb1; . . . ; b0jMOjg are listed in
the descending order. Meanwhile, Algorithm 1
chooses bWA
¼ fb1; . . . ; bm�1; bm; bmþ1; . . . ; bjMAjg
and there must be bm > b0j for all j � m. In partic-
ular, we have bm > b0m. Hence, we define
bM	
O
¼ bMO
[ fbmg n fb0mg , i.e., we obtain bM	
O
by
removing b0m and adding bm to bMO
. Thus, the
social welfare of bW	
O
is calculated as follows:
SðM	
OÞ ¼ SðMOÞ þ
q
D
a1 � a2e
a3qMj j
D
� �
ðbm � b0mÞ:
As bm � b0m > 0, ða1 � a2e
a3qMj j
D Þ qD > 0 and M	
O
�� �� ¼
MOj j, SðM	
OÞ is strictly larger than SðMOÞ. This is
in contradiction to thatMO is the optimal solution
and thus proves the claim. tu
We apply Vickrey–Clarke–Groves (VCG) mechanism [38]
in the service price calculation. In lines 16-30, for each itera-
tion, we exclude one selected miner from the set of winners
and re-execute the winner selection process to calculate the
social cost of the miner as its payment. The VCG-based pay-
ment function is defined as follows:
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1981
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
pi ¼ SðMNnfigÞ � SðMN n figÞ; (17)
where SðMNnfigÞ is the optimal social welfare obtained
when the selected miner i is excluded from the miner set N ,
and SðMN n figÞ is the social welfare of the set of winners
which is obtained by removing miner i from the optimal
winner set selected fromN .
Proposition 2. The CDB auction (Algorithm 1) is truthful.
Proof. Since the payment calculation in the algorithm relies
on the VCG mechanism, it directly satisfies the second
condition in Theorem 1 [32]. For the first condition about
monotonicity in Theorem 1, we need to show that if a
winning miner i raises its bid from bi to bþi where
bþi > bi, it still stays in the winner set. We denote the orig-
inal winner set byM and the new winner set byMþ after
miner i changes its bid to bþi . The original set of bids is
b ¼ fb1; . . . ; bi; . . . ; bNgði � Mj jÞ sorted in the descending
order. In addition, we define SðbKÞ ¼ SðKÞ; 8K � N
which means the social welfare of a set of bids is equal to
that of the set of corresponding miners. We discuss the
monotonicity in two cases.
1) Case 1: bi�1 � bþi � bi � biþ1. The new set of
ordered bids is bþ ¼ fb1; . . . ; bi�1; bþi ; biþ1; . . . ; bNg.
We have
Sðfb1; . . . ; bþi gÞ ¼
q
D
a1 � a2e
a3qi
D
� � Xi�1
j¼1
bj þ bþi
 !
� cqi
> Sðfb1; . . . ; bigÞ ¼
q
D
a1 � a2e
a3qi
D
� �Xi
j¼1
bj � cqi:
(18)
The social welfare of the new set of bids
fb1; . . . ; bþi g is larger than that of the original set of
bids fb1; . . . ; big, which guarantees bþi being in the
set of winning bids.
2) Case 2: bk�1 � bþi � bk � � � � � bi, 1 < k < i. The
new set of ordered bids is bþ ¼ fb1; . . . ;
bk�1; b
þ
i ; bk; . . . ; biþ1; . . . ; bNg. We have
Sðfb1; . . . ; bk�1; bþi gÞ ¼
q
D
a1 � a2e
a3qk
D
� � Xk�1
j¼1
bj þ bþi
 !
� cqk;
(19)
Sðfb1; . . . ; bk�1; bkgÞ ¼
q
D
a1 � a2e
a3qk
D
� �Xk
j¼1
bj � cqk;
(20)
Sðfb1; . . . ; bk�1gÞ
¼ q
D
a1 � a2e
a3qðk�1Þ
D
� �Xk�1
j¼1
bj � cqðk� 1Þ: (21)
As the coefficient q
D a1 � a2e
a3qMj j
D
� �
in SðMÞ is a mono-
tonically decreasing function of M, increasing bi may
change the set of winnersM and reduce the number of
winning miners. However, the first i bids fb1; . . . ;
bk�1; bk; . . . ; big in the original set of bids b have already
won the auction, so we have Sðfb1; . . . ; bk�1; bkgÞ >
Sðfb1; . . . ; bk�1gÞ. From the following inequation (22),
Sðfb1; . . . ; bk�1; bkgÞ ¼
q
D
a1 � a2e
a3qk
D
� � Xk�1
j¼1
bj þ bk
 !
<
q
D
a1 � a2e
a3qk
D
� � Xk�1
j¼1
bj þ bþi
 !
¼ S fb1; . . . ; bk�1; bþi g
� �
;
(22)
the proof can be finally concluded by
Sðfb1; . . . ; bk�1; bþi gÞ > Sðfb1; . . . ; bk�1gÞ; (23)
which implies that bþi still remains the bid of a winner in
the auction. tu
Proposition 3. The CDB auction (Algorithm 1) is computa-
tionally efficient and individually rational.
Proof. Sorting the bids has the complexity of OðNlogNÞ.
Since the number of winners is at most minðDq ;NÞ, the
time complexity of the winner selection process (while-
loop, lines 7-15) is Oðmin2ðDq ;NÞÞ. In each iteration of the
payment calculation process (lines 16-30), a similar win-
ner selection process is executed. Therefore, the whole
auction process can be performed in polynomial time
with the time complexity of Oðmin3ðDq ;NÞ þNlogNÞ.
According to Proposition 1 and the properties of the
VCG mechanism [38], the payment scheme in Algo-
rithm 1 guarantees the individual rationality. tu
5 AUCTION-BASED MECHANISMS FOR MULTI-
DEMAND MINERS
In this section, we investigate a more general scenario
where miners request multiple demands of cloud/fog com-
puting resources.
5.1 Social Welfare Maximization for the Blockchain
Network
We first investigate the winner selection problem defined
in (9), (10), and (11) from the perspective of an optimization
problem. Evidently, it is a nonlinear integer programming
problem with linear constraints, which is NP-hard to obtain
the optimal solution. Naturally, we can find an approximate
method with a lower bound guarantee. Similar to Section 4,
the original problem is rewritten as a subset function form
max
M�N
SðMÞ ¼
X
i2M
di
D
a1 � a2e
a3
P
i2M
di
D
 !
bi
� c
X
i2M
di;
(24)
s:t:
X
i2M
di � D; (25)
where SðMÞ is the social welfare function of the selected set
of winners M and bi ¼ v0i ¼ T þ rsið Þe�1
�
�sidi. This form
means that we can view it as a subset sum problem [39]. We
assume that there is at least one miner i such that
1982 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
SðfigÞ > 0. Additionally, although the miners can submit
demands that they want instead of the same constant quan-
tity of computing resources, it is reasonable to assume that
the CFP puts a restriction on the purchase quantity, i.e.,
b1D < di � b2D, where b1D, b2D are respectively the lower
and upper limit on each miner’s demand, and
0 < b1 < b2 < 1 are predetermined demand constraint
ratios. Clearly, Sð;Þ ¼ 0.
Definition 1 (Submodular Function [40]). Let X be a finite
set. A function f : 2X ! R is submodular if
fðA [ xf gÞ � fðAÞ � fðB [ xf gÞ � fðBÞ; (26)
for any A � B � X and x 2 X n B, where R is the set of reals.
A useful equivalent definition is that f is submodular if and
only if the derived set-function
fxðAÞ ¼ fðA [ xf gÞ � fðAÞ ðA � X n xf gÞ; (27)
is monotonically decreasing for all x 2 X .
Proposition 4. The social welfare function SðMÞ in (24) is
submodular.
Proof. By Definition 1, we need to show that SuðMÞ in (30)
is monotonically decreasing, for every M� N and
u 2 N nM.
SuðMÞ ¼ SðM [ uf gÞ � SðMÞ (28)
¼
X
i2M[ uf g
di
D
a1 � a2e
a3
P
i2M[ uf g
di
D
 !
bi
�
X
i2M
di
D
a1 � a2e
a3
P
i2M di
D
 !
bi � cdu
(29)
¼ a1 � a2e
a3
P
i2M[ uf g
di
D
 !
� a1 � a2e
a3
P
i2M di
D
 ! !X
i2M
dibi
D|fflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl{zfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl}
�1
þ a1 � a2e
a3
P
i2M[ uf g
di
D
 !
dubu
D
� cdu|fflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl{zfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl}
�2
(30)
Let gðzÞ ¼ a1 � a2e
a3
Dz, where z 2 Rþ. Then, the first deriv-
ative and second derivative of gðzÞ are expressed respec-
tively as follows:
dgðzÞ
dz
¼ � a2a3
D
e
a3
Dz;
d2gðzÞ
dz2
¼ � a2a
2
3
D2
e
a3
Dz: (31)
Because a2; a3; D > 0, we have � a2a3
D e
a3
Dz < 0 and
� a2a
2
3
D2 e
a3
Dz < 0, which indicates that gðzÞ is monotonically
decreasing and concave.
Next, we discuss the monotonicity of SuðMÞ in (30).
Note that expanding M means increasing the total
quantity of allocated resources dM ¼
P
i2M di. Substitut-
ing z ¼ dM and z ¼ dM[ uf g into gðzÞ, we observe that
gðdM[ uf gÞ � gðdMÞ ¼ gð
P
i2M[ uf g diÞ � gð
P
i2M diÞ ¼ ða1�
a2e
a3
D
P
i2M[ uf g diÞ � ða1 � a2e
a3
D
P
i2M diÞ < 0 is decreasing
and negative due to dM < dM[ uf g and the monotonicity
and concavity of gðzÞ. Additionally, it is clear that when
M expands,
P
i2M dibi > 0 is positive and increasing.
Therefore, �1 in (30) is proved to be monotonically
decreasing. Because gðzÞ is monotonically decreasing, it
is straightforward to see that �2 in (30) is also monotoni-
cally decreasing with the expansion of M. Finally, we
can conclude that SuðMÞ is monotonically decreasing,
thus proving the submodularity of SðMÞ. tu
It is worth noting that there is a constraint in (10), also
called a knapsack constraint. This constraint not only affects
the resulting social welfare and the number of the selected
miners in the auction, but also needs a careful auctionmecha-
nism design to guarantee the truthfulness. Essentially, the
optimization problem appears to be a non-monotone submodu-
lar maximization with knapsack constraints. It is known that
there is a 0:2� hð Þ-approximate algorithm which applies the
fractional relaxation and local search method [41, Figure 5].
h > 0 is a preset constant parameter that specifies the
approximation ratio ð0:2-hÞ. For the ease of expression, we
name this approximate algorithm as FRLS algorithm. In gen-
eral, the FRLS algorithm first solves a linear relaxation of the
original integer problem using local search, and then it
rounds the obtained fractional solution to an integer value.
However, the algorithm requires the objective function to be
non-negative. To address this issue, let HðMÞ ¼ SðMÞ þ
c
P
i2N di. Clearly,HðMÞ � 0 for anyM� N and it remains
submodular since c
P
i2N di is a constant. Additionally, maxi-
mizing SðMÞ is equivalent to maximizingHðMÞ. Hence, we
attempt to design the FRLS auction which selects the winner
based on the FRLS algorithm and let service price pi ¼ bi. As
to the specific input to the FRLS algorithm, it takes 1 as the
number of knapsack constraints, the normalized demand
profile d
D as its knapsack weights parameter, h as the approxi-
mate degree, and HðMÞ as the value oracle which allows
querying for function values of any given set. The FRLS auc-
tion is computationally efficient, as the running time of the
FRLS algorithm is polynomial [41]. Furthermore, miners just
need to pay their submitted bids to the CFP and cannot suffer
deficit, so the FRLS auction also satisfies the individual ratio-
nality requirement. However, we find that FRLS auction can-
not guarantee truthfulness. The corresponding proof is
omitted due to space constraints.
5.2 Multi-Demand Miners in Blockchain Networks
(MDB) Auction
Although the FRLS auction is capable solving the social wel-
fare maximization problem approximately, it is not realistic
to be directly applied in a real market since it cannot pre-
vent the manipulation of bids by bidders, i.e., lacking of
truthfulness. As mentioned before, we aim to design an auc-
tion mechanism that not only achieves a good social wel-
fare, but also possesses the desired properties, including
computational efficiency, individual rationality and truth-
fulness. Therefore, we present a novel auction mechanism
for Multi-Demand miners in Blockchain networks (MDB
auction). In this auction, the bidders are limited to be single-
minded in the combinatorial auctions. That is, we can
assume safely that the mechanism always allocates to the
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1983
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
winner i exactly the di items that it requested and never
allocates anything to a losing bidder. The design rationale
of the MDB auction relies on Theorem 2.
Theorem 2. ([42]) In the multi-unit and single minded setting,
an auction mechanism is truthful if it satisfies the following
two properties:
1) Monotonicity: If a bidder i wins with bid ðdi; biÞ,
then it will also win with any bid which offers at
least as much price for at most as many items. That
is, bidder i will still win if the other bidders do not
change their bids and bidder i changes its bid to
some ðd0i; b0iÞ with d0i � di and b0i � bi.
2) Critical payment: The payment of a winning bid
ðdi; biÞ by bidder i is the smallest value needed in order
to win di items, i.e., the infimum of b0i such that ðdi; b0iÞ
is still a winning bid, when the other bidders do not
change their bids.
5.2.1 Auction Design
Before presenting the MDB auction, we first introduce the
marginal social welfare density. It is the density of miner i’s
marginal social welfare contribution to the existing set of
winnersM, which is defined as follows:
S0iðMÞ ¼
SiðMÞ
di
¼ SðM [ figÞ � SðMÞ
di
¼
a2e
a3
P
j2M dj
D � a2e
a3
P
j2M[ if g
dj
D
 !P
j2M djbj
Ddi|fflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl{zfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl}
�1
þ a1 � a2e
a3
P
j2M[ if g
dj
D
 !
bi
D
� c|fflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl{zfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflfflffl}
�2
:
(32)
For the sake of brevity, we simply call it density.
As illustrated in Algorithm 2, the MDB auction allocates
computing resources to miners in a greedy way. According
to the density, all miners are sorted in a non-increasing
order:
S01ðM0Þ � S02ðM1Þ � � � � � S0iðMi�1Þ � � � � � S0NðMN�1Þ:
(33)
The ith miner has the maximum density S0iðMi�1Þ over
N nMi�1 whereMi�1 ¼ f1; 2; . . . ; i� 1g andM0 ¼ ;. From
the sorting, the MDB auction finds the set of winnersMLm
containing Lm winners, such that dMLm
� D, S0Lm
ðMLm�1Þ �
0 andS0Lmþ1ðMLmÞ < 0 (lines 6-13).
To determine the service price for each winner i 2 MLm
(lines 14-36), the MDB auction re-executes the winner se-
lection process and similarly sorts other winners in N�i ¼
N n fig as follows:
S0i1ðT 0Þ � S0i2ðT 1Þ � � � � � S0ikðT k�1Þ � � � � � S0iN�1ðT N�2Þ;
(34)
where T k�1 denotes the first k� 1 winners in the sorting
and T 0 ¼ ;. From the sorting, we select the first Lp winners
where the Lpth winner is the last one that satisfies
S0iLp
ðT Lp�1Þ � 0 and dT Lp�1 � D� di. Let ~S denote the
(Lp þ 1)th winner’s virtual density. If the (Lp þ 1)th winner
has a negative density on T Lp , i.e., S
0
iLpþ1
ðT LpÞ < 0, or its
demand is larger than that of winner i, i.e., dLpþ1 > di, we
set eS ¼ 0. Otherwise, eS ¼ S0iLpþ1
ðT LpÞ. Meanwhile, Algo-
rithm 2 forms a price list L ¼ fS0i1ðT 0Þ; . . . ; S0iLp
ðT Lp�1Þ; eSg
containing (Lp þ 1) density values. According to the list, we
find the winner i’s minimum bid b0i such that
S0iðT k�1Þ � S0ikðT k�1Þ; 9k 2 f0; 1; . . . ; Lpg or S0iðT LpÞ � eS.
Here, b0i is called miner i’s ex-ante price, which is the pay-
ment without considering the allocative externalities. Then,
we set pi ¼ a1 � a2e
a3
P
j2MLm
dj
D
 !
b0
i
D as the winner i’s final
payment.
Algorithm 2.MDB Auction
Input:Miners’ demand profile d and bid profile b.
Output: Resource allocation x and service price profile p.
1: begin
2: for each i 2 N do
3: xi  0; pi  0
4: end for
5: M ? , d 0
6: whileM 6¼ N do
7: j argmaxi2NnMS0iðMÞ
8: if dþ dj > D or S0jðMÞ < 0 then
9: break
10: end if
11: M M[ fjg
12: d dþ dj
13: end while
14: for each i 2M do
15: xi  1,N�i  N n fig
16: T 0  ? , d0  0, k 0, Lp  0
17: while T k 6¼ N�i do
18: ikþ1  argmaxl2N�inT k
S0lðT kÞ
19: b0ikþ1  argbi2Rþ S
0
iðT kÞ ¼ S0ikþ1ðT kÞ
20: if d0 þ dikþ1 > D or S0ikþ1ðT kÞ < 0 then
21: break
22: else if d0 þ dikþ1 � D� di then
23: Lp  Lp þ 1
24: end if
25: T kþ1  T k [ fikþ1g, d0  d0 þ dikþ1
26: k kþ 1
27: end while
28: if S0iLpþ1
ðT LpÞ < 0 or diLpþ1 > di then
29: eS  0
30: else
31: eS  S0iLpþ1
ðT LpÞ
32: end if
33: b0iLpþ1
 argbi2Rþ S
0
iðT LpÞ ¼ eS
34: b0i  mink2f0;1;...;Lpþ1gb
0
ik
35: pi  ða1 � a2e
a3
P
j2M
dj
D Þ b
0
i
D
36: end for
37: end
1984 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
5.2.2 Properties of MDB Auction
We show the computational efficiency (Proposition 5), the
individual rationality (Proposition 6), and the truthfulness
(Proposition 7) of the MDB auction in the following.
Proposition 5.MDB auction is computationally efficient.
Proof. In Algorithm 2, finding the winner with the maxi-
mum density has the time complexity of OðNÞ (line 7).
Since the number of winners is at most N , the winner
selection process (the while-loop lines 6-13) has the time
complexity of OðN2Þ. In the service price determination
process (lines 14-36), each for-loop executes similar steps
as the while-loop in lines 6-13. Hence, lines 14-36 have
the time complexity of OðN3Þ in general. Hence, the run-
ning time of Algorithm 2 is dominated by the for-loop,
which is bounded by polynomial time OðN3Þ. tu
Proposition 6.MDB auction is individually rational.
Proof. Let ii be the miner i’s replacement which appears in
the ith place in the sorting (34) over N�i. Since miner ii
would not be in the ith place if winner i is considered, we
have S0iiðT i�1Þ � S0iðT i�1Þ. Note that Algorithm 2 chooses
the minimum bid b0i for miner i, which means that given
the bid b0i, miner i’s new density S00i ðT i�1Þ at least satisfies
S00i ðT i�1Þ � S0iiðT i�1Þ � S0iðT i�1Þ. According to the defini-
tion of the density in (32), S0iðT i�1Þ is a monotonically
increasing function of bi. Hence, we have bi � b0i � 0 as
S0iðT i�1Þ � S00i ðT i�1Þ. Therefore, the final payment for
miner i is not more than its ex-post valuation, i.e., pi ¼
a1 � a2e
a3
P
j2MLm
dj
D
 !
b0
i
D � v00i ¼ a1 � a2e
a3
P
j2MLm
dj
D
 !
bi
D .
Thus, the individual rationality of MDB auction is
ensured. tu
Proposition 7.MDB auction is truthful.
Proof. Based on Theorem 2, it suffices to prove that the
selection rule of the MDB auction is monotone, and the
ex-ante payment b0i is the critical value for winner i to win
the auction.
We first discuss the monotonicity of the MDB auction
in terms of winner i’s bid and demand subsequently.
Recalling the density S0iðMÞ in Equation (32), it is clear
that S0iðMÞ is a monotonically increasing function of
miner i’s bid bi. As miner i takes the ith place in the sort-
ing (33), when winner i raises its bid from bi to bþi , it at
least has a new larger density S0
iþðT i�1Þ > S0iðT i�1Þ � 0.
Because of the submodularity of SðMÞ, miner i can only
have a larger density when it is ranked higher in the sort-
ing, i.e., S0
iþðMi�kÞ > S0
iþðMi�1Þ � 0; 8k 2 f2; 3; . . . ; ig.
Therefore, miner i with a higher bid can always win the
auction. Similarly, when it comes to miner i’s demand di,
we only need to show that S0iðMÞ is a monotonically
decreasing function of di. Let
hðzÞ ¼
a4 1� e
a3
Dz
� �
z
; (35)
where z 2 Rþ and all parameters are positive. The first
derivative of hðzÞ is
dhðzÞ
dz
¼ �
a4ða3D e
a3
Dzzþ 1� e
a3
DzÞ
z2
: (36)
Since the first derivative of ða3D e
a3
Dzzþ 1� e
a3
DzÞ is
a23
D2 e
a3
Dzz > 0, we can have dhðzÞ
dz < 0 with a3; a4; D; z > 0.
Thus, hðzÞ is monotonically decreasing with z. By substi-
tuting z ¼ di, we can easily observe that �1 in (32) is a
monotonically decreasing function with respect to di.
Finally, S0iðMÞ is proved to be monotonically decreasing
with di since�2 in (32) is clearly a monotonically decreas-
ing function of di as well.
Next, we prove that b0i is the critical ex-ante payment.
This means that bidding lower b�i < b0i can lead to miner
i’s failure in the auction. Given that di is fixed, we note
that b0i is the minimum bid such that miner i’s new den-
sity S00i ðT kÞ is no more than any value in the kth place in
the sorting (34), where k 2 f0; 1; . . . ; Lp � 1g. If miner i
submits a lower bid b�i , it must be ranked after the Lpth
winner in (34) due to submodularity of SðMÞ. Then, its
density has to be compared with ~S. Considering the
ðLp þ 1Þth winner in the sorting (34), if its density
S0iLpþ1
ðT LpÞ � 0 and diLpþ1 � di, ~S is set to be S0iLpþ1
ðT LpÞ.
In this case, miner i with bid b�i cannot take the
ðLp þ 1Þth place as its new density is S00i ðT LpÞ <
S0iðT LpÞ � ~S ¼ S0iLpþ1
ðT LpÞ. Also, it no longer can win the
auction by taking the place after the ðLp þ 1Þth because
the remaining supplyD� dT Lpþ1 cannot meet its demand
di, i.e., D� dT Lpþ1 < di. If S
0
iLpþ1
ðT LpÞ < 0 or diLpþ1 > di,
~S is just set to be 0. Apparently, b�i is not a winning bid
as S00i ðT LpÞ < b0i ¼ ~S ¼ 0. tu
6 EXPERIMENTAL RESULTS AND PERFORMANCE
EVALUATION
In this section, we first perform experiments to verify the
proposed hash power function and network effects func-
tion. Then, from simulation results, we examine the perfor-
mance of the proposed auction mechanisms in social
welfare maximization and provide useful decision making
strategies for the CFP and the blockchain developer.
6.1 Verification for Hash Power Function and
Network Effects Function
Similar to the experiments on mobile blockchain mining
in [10], [43], we design a mobile blockchain client applica-
tion in the Android platform and implement it on each of
three mobile devices (miners). The client application can
not only record the data generated by internal sensors or
the transactions of the mobile P2P data trading, but also
allows each mobile device to be connected to a computing
server through a network hub. The miners request the com-
puting service from the server. Then, the server allocates
the computing resources and starts mining the block for the
miners. At the server side, the each miner’s CPU utilization
rate is managed and measured by the Docker platform.5 In
5. https://www.docker.com/community-edition.
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1985
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
https://www.docker.com/community-edition
our experiment, all mining tasks (solving the PoW puzzle)
are under Go-Ethereum6 blockchain framework.
To verify the hash power function in (1), we vary the ser-
vice demand of one miner i in terms of CPU utilization, i.e.,
di, while fixing the other two miners’ service demand at 40
and 60. Here, the total amount of computing resources is
dN ¼ di þ 40þ 60. Besides, we initially broadcast 10 same
transaction records to the miners in the network so that all
mined blocks have the same size. Fig. 3a shows the change
of the hash power, i.e., the probability of successfully min-
ing a block with different amount of computing resources.
We note that the hash power function defined in (1) can
well fit the real experimental results.
To verify the network effects function in (5), we investi-
gate the capability of the blockchain to prevent the double-
spending attacks. We add a malicious miner with fixed
computing powers, i.e., an attacker performing double-
spending attacks, to the blockchain network. Then, we con-
duct several tests by varying the CPU resources of the other
miners, i.e., the sum of existing honest miners’ computing
resources dN , to measure the probability of the successful
attacks. Specifically we count the number of fake blocks
which successfully join the chain every 10,000 blocks gener-
ated in each test. Based on the above results, we finally cal-
culate the proportion of the genuine blocks every 10,000
blocks (i.e., each data point in the Fig. 3b) as the security
measure or the network effects of the blockchain network.
As illustrated in Fig. 3b, it is evident that the network effects
function in (5) also well fits the real experiment results.
Based on the experiments, we set a1 ¼ 1:97; a2 ¼ 0:35; a3 ¼
1:02 in the following simulations.
6.2 Numerical Results
To demonstrate the performance of the proposed auction
mechanisms and the impacts of various parameters on the
social welfare of the blockchain network, we consider a set of
N miners, e.g.,mobile users in a PoW-based blockchain appli-
cation supported by the CFP. Each miner’s block size is uni-
formly distributed over (0,1024]. Instead of being restricted to
submit a constant demand as in the CDB auction, each miner
in the MDB auction and FRLS auction can choose its desired
demand which follows the uniform distribution over
½b1D;b2D�. Except Fig. 6a, each measurement is averaged
over 600 instances and the associated 95 percent confidence
interval is given.We can find that the confidence intervals are
very narrowly centered around themean. The default param-
eter values are presented in Table 2. Note that setting q ¼ 10,
b1 ¼ 0 and b2 ¼ 0:02 means the expected demand of miners
in theMDB auction is equal to the constant demand ofminers
in the CDB auction. Hence, we can compare the performance
of both proposed auctionmechanisms.
6.2.1 Evaluation of MDB Auction versus FRLS Auction
in Terms of Social Welfare Maximization
Weevaluate the performance of theMDB auction inmaximiz-
ing the social welfare by comparing it with the FRLS auction.
Table 3 shows the social welfare obtained by theMDB auction
and the FRLS auction. The social welfare generated from the
MDB auction is lower than that from the FRLS auction when
dealing with a small number of miners. As the group of inter-
ested miners grows, the MDB auction can achieve slightly
larger social welfare although it has to preserve necessary eco-
nomic properties, including individual rationality and truth-
fulness. The main reason is that the FRLS auction is an
algorithm which only provides a theoretical lower bound
guarantee in the worst case for approximately maximizing
the social welfare, and may have more severe performance
deteriorationwhen interestedminers becomemore.
6.2.2 Impact of the Number of Miners N
Besides the social welfare, we introduce the satisfaction rate,
i.e., the percentage of winners selected from all interested
miners, as another metric. Here, we compare the social
Fig. 3. Estimation of (a) the hash power function gðdiÞ in (1) and (b) the
network effects function wðpÞ in (5).
TABLE 2
Default Parameter Values
Parameters Values Parameters Values
N 300 T 12.5
r 0.007 � 15
c 0.001 q 10
a1 1.97 b1, b2 0, 0.02
a2 0.35 � 0.001
a3 1.02 D 1000
TABLE 3
MDB Auction versus FRLS Auction in Social
Welfare Maximization
Number of miners 10 15 20 25
MDB auction 33.954 50.368 65.421 80.135
FRLS auction 34.656 49.935 65.060 79.853
6. https://ethereum.github.io/go-ethereum.
1986 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
welfare as well as the satisfaction rate of the CDB auction and
theMDB auctionwith various number ofminers, as shown in
Fig. 4. From Fig. 4, we observe that the social welfare S in
both auction mechanisms increases as the base of interested
miners becomes larger. We observe that the satisfaction rate
decreases and the rise of the social welfare also slows down
with the increase of N . The main reason is that the competi-
tion amongminers becomesmore obviouswhenmoreminers
take part in the auction, and, with more winners selected by
the auction, the subsequent winner’s density decreases due
to the network effects. When choosing between the CDB auc-
tion and the MDB auction, Fig. 4 clearly shows that there is a
tradeoff between the social welfare and the satisfaction rate.
The MDB auction can help the CFP achieve more social wel-
fare than theCDBauction because of its advantage in relaxing
restrictions on miners’ demand. However, the CDB is rela-
tively more fair because the MDB auction allows miners with
large demand to take up more computing resources and this
leads to a lower satisfaction rate.
6.2.3 Impact of the Unit Cost c, the Fixed Bonus T , the
Transaction Fee Rate r and the Block Time �
The CFP organizes the auction and cares about the unit cost
of the computing resource. It is obvious from Fig. 5a that as
the computing resources become expensive, the social
welfare in each auction mechanism decreases linearly. The
blockchain developer may be more interested in optimizing
the blockchain protocol parameters, including the fixed
reward, the transaction fee rate and the block time. In
Figs. 5b, 5c, and 5d, we study their impacts on the social
welfare of the blockchain network. Figs. 5b and 5c illustrate
that if the blockchain developer raises the fixed bonus T or
the transaction fee rate r, higher social welfare will be gener-
ated nearly in proportion. This is because miner’s valuation
increases with higher T and r, according to the definition
in (6). Moreover, by increasing T and r, we observe that the
difference of the social welfare between the CDB auction
and the MDB auction amplifies. The reason is that raising T
and r can significantly improve the valuation of miner i
which possesses large block size si and high demand di. As
shown in Fig. 5d, when the blockchain developer raises the
difficulty of mining a block, i.e., extending the block time �,
the social welfare goes up. This is because a long block time
� gives the miner which has solved the PoW puzzle a higher
probability to successfully propagate the new block and
reach consensus. However, different from adjusting T and
r, the marginal gains in social welfare gradually become
smaller if the blockchain developer continues to increase
the difficulty of the blockchain mining. This is mainly due
to that the increasing value of � has less impact on the min-
er’s valuation, as can be seen from the Equations (4) and (6).
6.2.4 Miner’s Utility and Individual Demand Constraints
in the MDB Auction
In the MDB auction, we randomly choose a miner (ID = 120)
to see its utility which is defined by the difference between its
ex-post valuation and its payment, i.e., v00120 � p120. The min-
er’s block size is respectively at a low level (s120 ¼ 300) and a
high level (s120 ¼ 1000). We investigate the impact of themin-
er’s true demand on its utility, which also reflects the impact
of its available budget. Fig. 6a shows that when miner 120’ s
true demand rises, its utility initially stays at 0 and then sud-
denly increases. This indicates that only when the miner’s
demand is above a threshold, it can be selected as the winner
by the MDB auction, i.e., xi changes immediately from 0 to 1,
obtains the computing resources and finally has a positive
utility. Otherwise, the miner would not be allocated the
resources, i.e., xi ¼ 0, and then both its ex-post valuation and
Fig. 5. Impact of unit cost c, fixed bonus T , transaction fee rate r and
block time �.
Fig. 6. Relationship between miner i’s (i ¼ 120) utility and its true
demand, and the impact of the degree of demand dispersion u.
Fig. 4. Impact of the number of minersN.
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1987
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
payment should be 0 according to the MDB auction algo-
rithm, which results in zero utility. Additionally, if the min-
er’s generated block is larger, it can obtain higher utility with
the same true demand. This implies that miners with large
block size and high demand are easier to be selected by the
MDB auction for social welfaremaximization.
In Fig. 6b, we investigate the impact of the demand con-
straints on the social welfare in the MDB auction. To fix the
miner’s expected demand at q, we set demand constraints
b1D ¼ q � uD and b2D ¼ q þ uDwhere u 2 ½0;minð qD ; 1� q
DÞ�
characterizes the degree of demand dispersion. It is clear that
social welfare increases as the degree of demand dispersion
rises and miners have more freedom to submit their desired
demands.
7 CONCLUSIONS
In this paper, we have investigated the cloud/fog computing
services that enable blockchain-based DApps. To efficiently
allocate computing resources, we have presented an auction-
based market model to study the social welfare optimization
and considered allocative externalities that particularly exist
in blockchain networks, including the competition among the
miners as well as the network effects of the total hash power.
For miners with constant demand, we have proposed an
auction mechanism (CDB auction) that achieves optimal
social welfare. For miners with multiple demands, we have
transformed the social welfare maximization problem to a
non-monotone submodular maximization with knapsack
constraints problem. Then, we have designed two efficient
mechanisms (FRLS auction and MDB auction) maximizing
social welfare approximately. We have proven that the pro-
posed CDB and MDB auction mechanisms are truthful, indi-
vidually rational and computationally efficient and are able
to solve the social welfaremaximization problem.
In this work, we consider the energy and computational
constraints for PoW-based public blockchain network while
assuming an ideal communication environment. For practi-
cal system implementation, the communication constraint is
actually an important factor in establishing the mobile
blockchain network. An example is that the limited band-
width for each miner’s mutual wireless communication will
not only affect each miner’s utility, but also have an adverse
impact on the block broadcasting process and the through-
put of the whole blockchain network. For the future work,
we will take the complicated communication environment
into account, and design new spectrum allocation algo-
rithms for more efficient and practical blockchain system.
ACKNOWLEDGMENTS
This work was supported in part by WASP/NTUM4082187
(4080), Singapore MOE Tier 1 under Grant 2017-T1-002-007
RG122/17, MOE Tier 2 under Grant MOE2014-T2-2-015
ARC4/15, Singapore NRF2015-NRF-ISF001-2277, and Sin-
gapore EMA Energy Resilience under Grant NRF2017EWT-
EP003-041.
REFERENCES
[1] S.Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[2] Y. Guo and C. Liang, “Blockchain application and outlook in the
banking industry,” Financial Innovation, vol. 2, no. 1, 2016, Art. no. 24.
[3] K. Christidis andM.Devetsikiotis, “Blockchains and smart contracts
for the Internet of Things,” IEEEAccess, vol. 4, pp. 2292–2303, 2016.
[4] D. Chatzopoulos, M. Ahmadi, S. Kosta, and P. Hui, “FlopCoin: A
cryptocurrency for computation offloading,” IEEE Trans. Mobile
Comput., vol. 17, no. 5, pp. 1062–1075, May 2018.
[5] “Blockchain for enterprise applications,” Tech. Rep., Tractica,
https://www.tractica.com/research/blockchain-for-enterprise-
applications/. The latest publication date is 3Q 2018.
[6] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone pro-
tocol: Analysis and applications,” in Proc. Annu. Int. Conf. Theory
Appl. Cryptographic Techn., 2015, pp. 281–310.
[7] H. Shafagh, L. Burkhalter, A. Hithnawi, and S. Duquennoy,
“Towards blockchain-based auditable storage and sharing of IoT
data,” in Proc. Cloud Comput. Secur. Workshop, 2017, pp. 45–50.
[8] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-
in hybrid electric vehicles using consortium blockchains,” IEEE
Trans. Ind. Informat., vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[9] G. Zyskind, O. Nathan, et al., “Decentralizing privacy: Using block-
chain to protect personal data,” in Proc. IEEE Secur. Privacy Work-
shops, 2015, pp. 180–184.
[10] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When
mobile blockchain meets edge computing,” IEEE Commun. Mag.,
vol. 56, no. 8, pp. 33–39, Aug. 2018.
[11] Q. Li, L. Zhao, J. Gao, H. Liang, L. Zhao, and X. Tang, “SMDP-based
coordinated virtual machine allocations in cloud-fog computing sys-
tems,” IEEE Internet Things J., vol. 5, no. 3, pp. 1977–1988, Jun. 2018.
[12] X. Zhang, Z. Huang, C.Wu, Z. Li, and F. C. Lau, “Online auctions in
IaaS clouds: Welfare and profit maximization with server costs,”
IEEE/ACMTrans. Netw., vol. 25, no. 2, pp. 1034–1047, Apr. 2017.
[13] A. Kiayias, E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis,
“Blockchain mining games,” in Proc. ACM Conf. Econ. Comput.,
2016, pp. 365–382.
[14] C. Catalini and J. S. Gans, “Some simple economics of the block-
chain,” Tech. Rep., National Bureau of Economic Research, 2016,
http://www.nber.org/papers/w22952.
[15] Y. Jiao, P. Wang, D. Niyato, and Z. Xiong, “Social welfare maximi-
zation auction in edge computing resource allocation for mobile
blockchain,” in Proc. IEEE Next Generation Netw. Internet Symp.,
May 2018, pp. 1–6.
[16] D. T. T. Anh, M. Zhang, B. C. Ooi, and G. Chen, “Untangling
blockchain: A data processing view of blockchain systems,” IEEE
Trans. Knowl. Data Eng., vol. 30, no. 7, pp. 1366–1385, Jul. 2018.
[17] F. Tschorsch and B. Scheuermann, “Bitcoin and beyond: A techni-
cal survey on decentralized digital currencies,” IEEE Commun.
Surv. Tut., vol. 18, no. 3, pp. 2084–2123, Jul.–Sep. 2016.
[18] H. Kopp, D. M€odinger, F. Hauck, F. Kargl, and C. B€osch, “Design
of a privacy-preserving decentralized file storage with financial
incentives,” in Proc. IEEE Eur. Symp. Secur. Privacy Workshops,
2017, pp. 14–22.
[19] J. Backman, S. Yrj€ol€a, K. Valtanen, andO.M€ammel€a, “Blockchain net-
work slice broker in 5G: Slice leasing in factory of the future use case,”
inProc. Internet Things Bus.Models Users Netw., Nov. 2017, pp. 1–8.
[20] N.Houy, “The bitcoinmining game,” Ledger, vol. 1, pp. 53–68, 2016.
[21] Y. Lewenberg, Y. Bachrach, Y. Sompolinsky, A. Zohar, and
J. S. Rosenschein, “Bitcoin mining pools: A cooperative game the-
oretic analysis,” in Proc. Int. Conf. Auton. Agents Multiagent Syst.,
2015, pp. 919–927.
[22] X. Zhang, Z. Yang, W. Sun, Y. Liu, S. Tang, K. Xing, and X. Mao,
“Incentives for mobile crowd sensing: A survey,” IEEE Commun.
Surv. Tut., vol. 18, no. 1, pp. 54–67, Jan.–Mar. 2016.
[23] D. Yang, G. Xue, X. Fang, and J. Tang, “Incentive mechanisms for
crowdsensing: Crowdsourcing with smartphones,” IEEE/ACM
Trans. Netw., vol. 24, no. 3, pp. 1732–1744, Jun. 2016.
[24] H. Jin, L. Su, D. Chen, K. Nahrstedt, and J. Xu, “Quality of infor-
mation aware incentive mechanisms for mobile crowd sensing
systems,” in Proc. 16th ACM Int. Symp. Mobile Ad Hoc Netw. Com-
put., 2015, pp. 167–176.
[25] L. Mashayekhy, M. M. Nejad, and D. Grosu, “Physical machine
resource management in clouds: A mechanism design approach,”
IEEE Trans. Cloud Comput., vol. 3, no. 3, pp. 247–260, Jul.–Sep. 2015.
[26] A. Kiani and N. Ansari, “Toward hierarchical mobile edge com-
puting: An auction-based profit maximization approach,” IEEE
Internet Things J., vol. 4, no. 6, pp. 2082–2091, Dec. 2017.
[27] Z. Zheng, F. Wu, and G. Chen, “A strategy-proof combinatorial
heterogeneous channel auction framework in noncooperative
wireless networks,” IEEE Trans. Mobile Comput., vol. 14, no. 6,
pp. 1123–1137, Jun. 2015.
1988 IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 30, NO. 9, SEPTEMBER 2019
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
https://www.tractica.com/research/blockchain-for-enterprise-applications/
https://www.tractica.com/research/blockchain-for-enterprise-applications/
http://www.nber.org/papers/w22952
[28] M. Salek and D. Kempe, “Auctions for share-averse bidders,” in
Proc. Int. Workshop Internet Netw. Econ., 2008, pp. 609–620.
[29] P. Jehiel and B. Moldovanu, “Efficient design with interdependent
valuations,” Econometrica, vol. 69, no. 5, pp. 1237–1259, 2001.
[30] D. Zhao, X.-Y. Li, and H. Ma, “How to crowdsource tasks truth-
fully without sacrificing utility: Online incentive mechanisms
with budget constraint,” in Proc. IEEE Conf. Comput. Commun.,
2014, pp. 1213–1221.
[31] N. C. Luong, D. Niyato, P. Wang, and Z. Xiong, “Optimal auction
for edge computing resource management in mobile blockchain
networks: A deep learning approach,” in Proc. IEEE Int. Conf.
Commun., May 2018, pp. 1–6.
[32] N. Nisan, T. Roughgarden, E. Tardos, and V. V. Vazirani, Algorith-
mic Game Theory, vol. 1. Cambridge, U.K.: Cambridge Univ. Press,
2007.
[33] D. Kraft, “Difficulty control for blockchain-based consensus sys-
tems,” Peer-to-Peer Netw. Appl., vol. 9, no. 2, pp. 397–413, 2016.
[34] A. Narayanan, J. Bonneau, E. Felten, A. Miller, and S. Goldfeder,
Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduc-
tion. Princeton, NJ, USA: Princeton Univ. Press, 2016.
[35] N. Z. Aitzhan and D. Svetinovic, “Security and privacy in decen-
tralized energy trading through multi-signatures, blockchain and
anonymous messaging streams,” IEEE Trans. Depend. Sec. Com-
put., vol. 15, no. 5, pp. 840–852, Sep./Oct. 2018.
[36] M. Li, J. Weng, A. Yang, W. Lu, Y. Zhang, L. Hou, L. Jia-Nan,
Y. Xiang, and R. Deng, “CrowdBC: A blockchain-based decentral-
ized framework for crowdsourcing,” IEEE Trans. Parallel Distrib.
Syst., 2018, doi: 10.1109/TPDS.2018.2881735.
[37] R. B. Myerson, “Optimal auction design,” Math. Operations Res.,
vol. 6, no. 1, pp. 58–73, 1981.
[38] V. Krishna, Auction Theory. Cambridge, MA, USA: Academic
Press, 2009.
[39] J. C. Lagarias and A. M. Odlyzko, “Solving low-density subset
sum problems,” J. ACM, vol. 32, no. 1, pp. 229–246, 1985.
[40] L. Lov�asz, “Submodular functions and convexity,” in Mathemati-
cal Programming The State of the Art, Berlin, Germany: Springer,
1983, pp. 235–257.
[41] J. Lee, V. S. Mirrokni, V. Nagarajan, and M. Sviridenko, “Non-
monotone submodular maximization under matroid and knap-
sack constraints,” in Proc. 41st Annu. ACM Symp. Theory Comput.,
2009, pp. 323–332.
[42] N. Nisan, “Chapter 9-Algorithmic mechanism design: Through
the lens of multiunit auctions,” Handbook of Game Theory with Eco-
nomic Applications, vol. 4, Amsterdam, Netherlands: Elsevier,
2015, pp. 477–515.
[43] K. Suankaewmanee, D. T. Hoang, D. Niyato, S. Sawadsitang,
P. Wang, and Z. Han, “Performance analysis and application of
mobile blockchain,” in Proc. Int. Conf. Comput. Netw. Commun.,
Mar. 2018, pp. 642–646.
Yutao Jiao is currently working toward the PhD
degree in the School of Computer Science and
Engineering, Nanyang Technological University
(NTU). His research interests include the Internet
of Things (IoT), artificail intelligence (AI), block-
chain and the economics in the area of big data.
Ping Wang (M’08-SM’15) received the bach-
elor’s and master’s degrees from the Huazhong
University of Science and Technology, in 1994
and 1997, respectively, and the PhD degree from
the University of Waterloo, Canada, in 2008, all in
electrical engineering. She is currently an associ-
ate professor at York University. Prior to that, she
was with Nanyang Technological University, Sin-
gapore, from 2008 to 2018. Her research inter-
ests are mainly in radio resource allocation,
network design, performance analysis and opti-
mization for heterogeneous wireless networks. She received the Best
Paper Awards from IEEE Wireless Communications and Networking
Conference (WCNC) 2012 and IEEE International Conference on Com-
munications (ICC) 2007. She is a senior member of the IEEE.
Dusit Niyato (M’09-SM’15-F’17) received the
BEng degree from the King Mongkut’s Institute of
Technology Ladkrabang (KMITL), Thailand, in
1999, and the PhD degree in electrical and com-
puter engineering from the University of Mani-
toba, Canada, in 2008. He is currently a
professor with the School of Computer Science
and Engineering, Nanyang Technological Univer-
sity, Singapore. His research interests are in the
areas of energy harvesting for wireless communi-
cation, the Internet of Things, and sensor net-
works. He is a fellow of the IEEE.
Kongrath Suankaewmanee received the bach-
elor’s degree in computer engineering from the
King Mongkut’s University of Technology Thon-
buri (KMUTT), Thailand, in 2011. He is currently
working at Computer Networks and Communica-
tions Lab, School of Computer Science and Engi-
neering, Nanyang Technological University
(NTU), Singapore. His research interests are in
the area of web technologies, blockchain technol-
ogies, and smart grid systems.
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/publications/dlib.
JIAO ETAL.: AUCTION MECHANISMS IN CLOUD/FOG COMPUTING RESOURCE ALLOCATION FOR PUBLIC BLOCKCHAIN NETWORKS 1989
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:25:32 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TPDS.2018.2881735
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice