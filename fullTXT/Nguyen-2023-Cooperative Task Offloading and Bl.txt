Cooperative Task Offloading and Block Mining in Blockchain-Based Edge Computing With Multi-Agent Deep Reinforcement Learning
Cooperative Task Offloading and Block Mining
in Blockchain-Based Edge Computing With
Multi-Agent Deep Reinforcement Learning
Dinh C. Nguyen ,Member, IEEE, Ming Ding , Senior Member, IEEE,
Pubudu N. Pathirana , Senior Member, IEEE, Aruna Seneviratne , Senior Member, IEEE,
Jun Li , Senior Member, IEEE, and H. Vincent Poor , Fellow, IEEE
Abstract—The convergence of mobile edge computing (MEC) and blockchain is transforming the current computing services in mobile
networks, by offering task offloading solutions with security enhancement empowered by blockchain mining. Nevertheless, these
important enabling technologies have been studied separately in most existing works. This article proposes a novel cooperative task
offloading and block mining (TOBM) scheme for a blockchain-based MEC system where each edge device not only handles data tasks
but also deals with block mining for improving the system utility. To address the latency issues caused by the blockchain operation in
MEC, we develop a new Proof-of-Reputation consensus mechanism based on a lightweight block verification strategy. A multi-objective
function is then formulated to maximize the system utility of the blockchain-based MEC system, by jointly optimizing offloading
decision, channel selection, transmit power allocation, and computational resource allocation. We propose a novel distributed deep
reinforcement learning-based approach by using a multi-agent deep deterministic policy gradient algorithm. We then develop a game-
theoretic solution to model the offloading and mining competition among edge devices as a potential game, and prove the existence of
a pure Nash equilibrium. Simulation results demonstrate the significant system utility improvements of our proposed scheme over
baseline approaches.
Index Terms—Blockchain, mobile edge computing, task offloading, block mining, deep reinforcement learning
Ç
1 INTRODUCTION
RECENT advances in Internet of Things (IoT) have in pro-
moted the proliferation of numerous mobile applications
that mostly rely on edge devices (EDs), e.g., laptops, tablets,
and smartphones, to collect data from IoT sensors to serve
end users. To meet the increasing computation demands of
such users, mobile edge computing (MEC) has been proposed
as a promising technique to improve the computation experi-
ence of EDs, by offloading computationally intensive tasks to
a nearby MEC server located at a base station (BS) [1]. Map-
ping each offloading process to a specific application,multiple
distributedEDsnaturally share computation and communica-
tion resources of the BS to handle data taskswithout depleting
the users’ batteries. Task offloadingwithMEC thus becomes a
viable solution to satisfy various EDs’ computation demands
and enhances the quality of experience (QoE) of end users.
However, the design of an efficient task offloading
scheme for MEC systems still faces non-trivial challenges.
Each ED always aims to maximize its individual utility by
occupying as many edge resources (e.g., channel spectrum,
CPU frequency) as possible, which is likely to cause network
traffic congestion and user interference. The heterogeneous
resource requirements of multiple IoT data tasks, e.g., differ-
ent resource allocations needed for handling different data
tasks, and the heterogeneous features of real-time IoT data
tasks, e.g., computation deadlines and data task sizes, pose
challenges for the design of offloading strategies for all EDs.
Moreover, the lack of prior information on system statistics
in practical multi-user MEC systems, e.g., channel state and
edge computational resource state, makes it challenging to
derive an optimal offloading solution for each ED. Therefore,
it is important to develop an intelligent and self-organized
offloading scheme to guide offloading actions of all EDs in
distributedMEC systems.
Furthermore, the dynamic communications among IoT
devices, EDs, and the MEC server and the migration of IoT
data tasks across the MEC network potentially cause secu-
rity vulnerabilities. Recent works [1], [2], [3] have mainly
� Dinh C. Nguyen and Pubudu N. Pathirana are with the School of Engi-
neering, Deakin University, Waurn Ponds, VIC 3216, Australia.
E-mail: {cdnguyen, pubudu.pathirana}@deakin.edu.au.
� Ming Ding is with the Data61, CSIRO, Eveleigh, NSW 2015, Australia.
E-mail: ming.ding@data61.csiro.au.
� Aruna Seneviratne is with the School of Electrical Engineering and Tele-
communications, University of New South Wales (UNSW), Sydney,
NSW 2052, Australia. E-mail: a.seneviratne@unsw.edu.au.
� Jun Li is with the School of Electrical and Optical Engineering, Nanjing
University of Science and Technology, Nanjing 210094, China.
E-mail: jun.li@njust.edu.cn.
� H. Vincent Poor is with the Department of Electrical and Computer Engi-
neering, Princeton University, Princeton, NJ 08544 USA.
E-mail: poor@princeton.edu.
Manuscript received 22Mar. 2021; revised 17 Sept. 2021; accepted 28 Sept. 2021.
Date of publication 14 Oct. 2021; date of current version 6 Mar. 2023.
This work was supported in part by CSIRO Data61, Australia, and in part by
the U.S. National Science Foundation under Grant CCF-1908308. The work
of Jun Li was supported by the National Natural Science Foundation of China
under Grant 61872184.
(Corresponding author: Dinh C. Nguyen.)
Digital Object Identifier no. 10.1109/TMC.2021.3120050
IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023 2021
1536-1233 © 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tps://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-8092-6756
https://orcid.org/0000-0002-8092-6756
https://orcid.org/0000-0002-8092-6756
https://orcid.org/0000-0002-8092-6756
https://orcid.org/0000-0002-8092-6756
https://orcid.org/0000-0002-3690-0321
https://orcid.org/0000-0002-3690-0321
https://orcid.org/0000-0002-3690-0321
https://orcid.org/0000-0002-3690-0321
https://orcid.org/0000-0002-3690-0321
https://orcid.org/0000-0001-8014-7798
https://orcid.org/0000-0001-8014-7798
https://orcid.org/0000-0001-8014-7798
https://orcid.org/0000-0001-8014-7798
https://orcid.org/0000-0001-8014-7798
https://orcid.org/0000-0001-6894-7987
https://orcid.org/0000-0001-6894-7987
https://orcid.org/0000-0001-6894-7987
https://orcid.org/0000-0001-6894-7987
https://orcid.org/0000-0001-6894-7987
https://orcid.org/0000-0002-6239-2922
https://orcid.org/0000-0002-6239-2922
https://orcid.org/0000-0002-6239-2922
https://orcid.org/0000-0002-6239-2922
https://orcid.org/0000-0002-6239-2922
https://orcid.org/0000-0002-2062-131X
https://orcid.org/0000-0002-2062-131X
https://orcid.org/0000-0002-2062-131X
https://orcid.org/0000-0002-2062-131X
https://orcid.org/0000-0002-2062-131X
mailto:cdnguyen@deakin.edu.au
mailto:pubudu.pathirana@deakin.edu.au
mailto:ming.ding@data61.csiro.au
mailto:a.seneviratne@unsw.edu.au
mailto:jun.li@njust.edu.cn
mailto:poor@princeton.edu
focused on computation offloading designs for task sched-
uling and resource allocation, with considering security
aspects in MEC networks. Fortunately, blockchain has been
envisioned as a strong candidate to enhance security of
MEC systems [4]. In fact, blockchain is able to provide high
degrees of security and trust for MEC by employing com-
munity verification among edge nodes via mining mecha-
nisms such as Delegated Proof of Stake (DPoS) [4] without
requiring any central authority.
In this context, the use of blockchain is highly desirable
to support edge computing systems [5], [6], [7]. Specifically,
blockchain decentralizes the MEC system such that edge
nodes can communicate with each other via a peer-to-peer
network over a decentralized data ledger. Different from
traditional MEC systems that often rely on a central server
to coordinate MEC operation, blockchain helps build decen-
tralized edge communications without the need for a single
authority, which eliminates the risks of single-point failure.
This feature is very useful in practical application scenarios,
e.g., decentralized edge data sharing and decentralized
edge data caching in MEC networks. Another motivation
behind the integration of blockchain in MEC is its immuta-
bility that makes edge data records, e.g., IoT data, unchan-
geable once they are stored on the ledger [8]. By deploying
immutable transaction ledgers, EDs can establish reliable
communications to perform heterogeneous networking and
computation, such as large-scale IoT collaborations or
mobile edge computing over trustless IoT environments.
Moreover, blockchain provides transparency for MEC net-
works, where blockchain allows the copy of data records to
replicate across edge nodes for public validation, which in
return enhances data integrity. This feature is particularly
suitable for MEC ecosystems where openness and fairness
are required. For example, blockchains can offer transparent
ledger solutions to support open and secure data delivery
and payment for EDs in a fashion such that EDs can trace
and monitor transactions.
Moreover, each ED joins the block mining process to
maintain the operation of blockchain in MEC. The key pur-
pose of mining is to verify the data transactions, aiming to
guarantee the security for the involved edge networks.
Accordingly, in the blockchain-based MEC system, EDs per-
form the mining, and data blocks are secured and chained
via an immutable ledger. With more devices mining the
blockchain, the security of the edge network increases
accordingly.
1.1 Related Works
Recently, many edge task offloading solutions have been
proposed [9], [10], [11], but these works mostly have consid-
ered offloading scenarios with a single agent using tradi-
tional convex optimization tools. Deep reinforcement
learning (DRL) techniques such as deep Q-learning (DQN)
have emerged as a promising alternative, by modelling the
offloading problem as a Markov decision process (MDP)
and using a deep neural network (DNN) for function
approximation [12], [13], [14]. However, these works use
only a single agent to handle the entire offloading process
which may not work well in large-scale distributed MEC
environments. An interesting alternative is to use multi-
agent-DRL (MA-DRL) [15] for supporting intelligent task
offloading in MEC networks [16]. The work in [17] proposed
a non-cooperative MA-DRL scheme where EDs could build
their offloading policies independently. Another study in
[18] also suggested an MA-DRL approach for joint data off-
loading and resource allocation in multiple independent
edge clouds. Furthermore, a multi-agent Q-learning algo-
rithm was developed in [19] for a joint computation offload-
ing and resource allocation scheme in edge computing.
In terms of reputation-based DPoS mining design, the
work in [4] focused primarily on addressing secure block
verification issues in the DPoS mechanism using contract
theory. The paper in [20] suggested a fair voting scheme for
the DPoS mechanism via vague set theory. Specifically, this
work leveraged a general model of transforming vague sets
into fuzzy sets to calculate the comprehensive evaluation
indices for agent node selection. The paper in [21] proposed
a contract theory-based optimization scheme for transaction
relaying and DPoS based block verification. The authors of
this work focused on formulating two mathematical models:
value of transaction relaying and value of block verification,
and developed an optimal contract to maximize utility of the
miners. Further, the work in [8] proposed a lightweight
blockchain-based information trading framework to model
interactions between traffic administration and vehicles in a
reputation-based DPoS mechanism via a budgeted auction
approach. This study considered the optimization of the
mining profit by using a truthful budgeted selection and
pricing algorithm. However, a design for low-latency block
verification in the reputation-based DPoS mechanism has
not been developed.
Moreover, research related to task offloading and block-
chain mining in MEC networks has been conducted
recently. A blockchain-empowered computation offloading
scheme was presented in [16] where blockchain was mainly
used for data integrity in the offloading. The authors in [22],
[23], [24] studied edge offloading schemes for blockchain
mining tasks with edge clouds, aiming to enhance the qual-
ity of service (QoS) for efficient block mining. Blockchain
was also utilized in [25] to support resource trading for the
edge task offloading, while the work in [26] considered a
cooperative blockchain-MEC system with an actor-critic
DRL algorithm. The study in [27] optimized edge computa-
tion offloading and resource allocation via a double-dueling
deep Q network. The authors in [28] considered a coopera-
tive computation offloading framework for blockchain-
based IoT networks. An MA-DRL algorithm was designed
which could allow IoT devices to collaboratively explore the
offloading environments in order to minimize long-term
offloading costs. Another work [29] considered a block-
chain-based energy trading scheme to manage the energy
trading process toward building a secure energy trading
system in Industry 4.0. In [30], the problem of resource trad-
ing for blockchain-based IoT was studied by using a two-
level Stackelberg game with a credit-based payment with
smart contracts. Game theory was also applied in [31] to
minimize the economic cost of industrial IoT devices. How-
ever, in most existing works [22], [23], [24], [25], [26], [27],
[29], [30], [31], the design and optimization of task offload-
ing and blockchain mining were implemented separately,
which will result in a sub-optimal performance.
2022 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
1.2 Motivations and Our Key Contributions
Despite the recent research efforts in blockchain-MEC
designs, there are several limitations in existing works, as
highlighted below:
� In distributed blockchain-based MEC systems, tradi-
tional single-agent DRL algorithms like DQN [13],
[14], [22], [26], [32] face critical challenges caused by
diversified and time-varying local environments. In
particular, during the training process of DQN, each
agent only observes its local information and cannot
know the updates from other agents due to non-col-
laboration. This makes it hard to ensure the stability
and convergence of the agents’ algorithm [33]. More-
over, this breaks the Markov properties required by
the Q-learning algorithm and thus, DQN may not be
capable of learning the cooperative offloading poli-
cies of EDs. Moreover, the non-cooperative multi-
agent DRL solutions [17], [18], [19] may not be able
to learn the cooperative policy; and thus resource
usage over the edge network is not efficient which
limits the overall offloading performance, e.g., off-
loading utility.
� In addition, in most existing blockchain-based MEC
schemes [22], [23], [24], [25], [26], the design and opti-
mization of task offloading and blockchainmining are
done separately, which can result in sub-optimal per-
formance. Moreover, the problem of high network
latency caused by blockchain mining in the edge off-
loading system has not been addressed so far [27],
[28], [30], [31]. To improve the overall performance, a
joint offloading and blockchain design is needed for
realizing efficient blockchain-basedMEC systems.
Motivated by the aforementioned limitations, we pro-
pose a novel cooperative task offloading and blockchain
mining (TOBM) scheme for blockchain-based MEC systems
enabled by a new MA-DRL solution. Different from existing
works [23], [24], [25], [26], [27], [29], [30], [31], we here focus
on maximizing the overall system utility as the sum of off-
loading utility and mining utility. More specifically, each
ED handles data tasks collected from its IoT sensors and
deals with block mining tasks simultaneously. To reduce
the network latency caused by the blockchain integration in
the MEC system, we design a new Proof-of-Reputation
(PoR) mining mechanism enabled by a lightweight block
verification solution. In particular, we develop a novel dis-
tributed DRL-based algorithm using a multi-agent deep
deterministic policy gradient (MA-DDPG) approach to opti-
mize the overall system utility. The proposed MA-DDPG
approach enables the efficient learning of the mutual policy
among cooperative EDs in dynamic environments and
high-dimensional system state spaces. Indeed, the proposed
MA-DDPG scheme allows EDs to learn mutually the coop-
erative offloading and mining policy which helps enhance
the computation efficiency and thus improves the system
utility. To enhance the convergence performance in model
training and solve the nonstationary issues caused by the
concurrent learning process of all EDs in the multi-agent
environment, a centralized learning and decentralized exe-
cution solution is adopted. As such, the proposed MA-DRL
algorithm is first trained at the centralized MEC server, and
the learned model is then executed at EDs in a distributed
manner. In fact, the benefits of the MA-DDPG algorithm in
edge computing have been proved in recent works for
MEC-based Industry 4.0 [34], smart ocean federated learn-
ing IoTs [35], and smart grid [36]. However, its potential in
blockchain-MEC systems has not been explored so far. The
comparison of our paper and the related works via some
key features is summarized in Table 1. In a nutshell,
the unique contributions of this work are highlighted as
follows:
1) We propose a novel cooperative TOBM scheme in a
blockchain-based MEC system to enable a joint
design of task offloading and blockchain mining for
improving the overall system utility.
2) The details of task offloading are presented, where
EDs cooperatively offload their IoT data tasks to the
MEC server.Moreover, we propose a newPoRmining
mechanism enabled by a lightweight block verifica-
tion strategy, in order to solve latency issues caused
by blockchain adoption in theMEC system.
3) In the TOBM scheme, each ED as an intelligent agent
to learn cooperatively policies, by jointly considering
the offloading decision, channel selection, transmit
power allocation, and computational resource alloca-
tion with respect to both offloading and mining
states for maximizing the system utility. Then, we
propose a novel distributed DRL-based approach
using an MA-DDPG algorithm to solve the proposed
problem based on a centralized learning and decen-
tralized execution strategy.
4) We further develop a game-theoretic solution to
model the competition among EDs in offloading and
mining as a potential game. We then analyze the
properties of the formulated game and prove the
existence of a pure Nash equilibrium (NE).
5) We conduct extensive numerical simulations and
compare with the existing schemes to verify the
effectiveness of the proposed scheme.
TABLE 1
The Comparison of the Existing Works and Our Scheme
Design features Schemes
[13] [16] [17] [18] [26] [27] [28] [31] Our scheme
Task offloading with blockchain ✓ ✓ ✓ ✓ ✓ ✓
Intelligent edge task offloading ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓
Cooperative edge task offloading ✓ ✓ ✓
Lightweight blockchain design ✓
Joint offloading and mining design ✓
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
1.3 Paper Organization
The remainder of this paper is organized as follows. Section 2
introduces the system model along with the analysis of net-
work model edge task offloading model. The PoR blockchain
consensus mechanism is proposed in Section 3. Based on the
offloading and mining design, a joint system utility problem
is formulated in Section 4which is thenmodelled by a cooper-
ative offloading game. A new MA-DRL algorithm is pro-
posed to solve the formulated offloading game by using an
MA-DDPG algorithm. The simulation results are provided in
Section 5 and the comparison with other related offloading
schemes is also discussed. Finally, Section 6 concludes this
article and highlights possible future directions.
2 SYSTEM MODEL
In this section, we introduce the network model of the
blockchain-based MEC system, and then present the task
offloading model.
2.1 Network Model
We consider a cooperative TOBM architecture in the block-
chain-based MEC system as illustrated in Fig. 1. The BS is
equipped with an MEC server to provide computation serv-
ices for EDs. We denote the set of EDs as N ¼ f1; 2; . . . ; Ng.
For the sake of simplicity, we assume that each ED n 2 N
has an IoT data task Yn to be executed [9], [10], which can be
defined by a tuple Yn ¼ ðCn;Dn; tnÞ; n 2 N . Herein, Cn
denotes the total computational resource (i.e., the number
of the CPU cycles) to accomplish the task Yn. Also, Dn
expresses the size of the input data, and tn specifies the
maximum permissible latency to accomplish task Yn. In
addition to the task offloading function, each ED also partic-
ipates in the block mining by using a PoR consensus mecha-
nism. The key network components of the blockchain-based
MEC system are described as follows:
� IoT Sensors: IoT sensors such as cameras, smart
meters, and wearables are responsible for sensing
physcial environments, e.g., entertainment, logistics,
transportation and healthcare monitoring, and gen-
erating data which need to be computed to serve
end users. IoT sensors can act as lightweight block-
chain nodes to securely communicate and transmit
data to their nearby ED via the blockchain network.
� Edge Devices: Each ED such as a laptop or a powerful
smartphone manages a group of IoT sensors under
its coverage. Based on the QoE requirements, EDs
can use their computational capability to process
data tasks locally or offload to a nearby MEC server
via wireless links. EDs also participate in block min-
ing, i.e., transaction verification and block genera-
tion, via a PoR consensus mechanism where IoT
sensor users vote to select representative EDs to run
the mining process. The details of our blockchain
mining design are explained in Section 3.
� MEC Server: In our considered blockchain-based
MEC system, there is a single MEC sever located at a
BS to handle computationally extensive data tasks
offloaded from EDs. By analyzing the task profile
such as task sizes, channel conditions, and available
resource, EDs can make offloading decisions so that
the MEC server can allocate its resources for compu-
tation under QoE requirements.
� Blockchain: A blockchain network is deployed over
the MEC system where each ED acts as a blockchain
miner. In this paper, we propose a PoR framework
and focus on analyzing the block verification latency
that is a significant factor in evaluating the efficiency
of a blockchain network. The use of our proposed
PoR scheme allows EDs to participate in the block
mining with an enhanced mining utility which con-
tributes to the system utility improvement in the
blockchain-based MEC system.
The blockchain framework for our MEC network is illus-
trated in Fig. 2, and its operational concept is explained via
the following steps:
� Step 1: The IoT sensor user first creates a transaction
with metadata (i.e., user ID), user signature and
timestamp from its wallet account and sends it to the
associated ED. The user then submits a transaction
to the ED for a certain request, such as IoT data task
offloading.
Fig. 1. The cooperative task offloading and block mining architecture in
the blockchain-based MEC system.
Fig. 2. Illustration of the blockchain operation in our MEC network: (1) An
IoT sensor user sends a transaction to its associated ED for triggering
the IoT data task offloading, (2) A new block is created to represent the
verified transaction, (3) A mined block is appended to the blockchain.
2024 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
� Step 2: The ED releases its available resources and pro-
cesses the request from the user. For example, an ED
can use a smart contract [37], a self-executing software
running on blockchain, to automatically perform trans-
action authentication, user verification, or resource
trading.Moreover, the ED collaborateswith othermin-
ing members to aggregate the transactions offloaded
from IoT users to build a block after a certain period of
time. Then, the EDs participate in the mining to verify
the block using a consensusmechanism, e.g., PoR.
� Step 3: After the mining, if all miners achieve an
agreement on the verified block, this block with its
signature is then appended to the chain of blocks in
chronological order. Finally, all network entities
receive this block and synchronize the copy of the
blockchain.
2.2 Edge Task Offloading Model
Here, we present the communication model and the com-
puting model for the edge task offloading.
2.2.1 Communication Model
We denote K ¼ f1; . . . ; Kg as the set of available sub-bands
at the BS. We define a task offloading policy, which also
incorporates the uplink sub-band scheduling, by a binary
variable xk
n, (n 2 N ; k 2 K). Here, xk
n ¼ 1 indicates that the
task Yn from ED n is offloaded to the MEC server via sub-
band k, and xk
n ¼ 0 otherwise. Each computation task can be
either executed locally at the ED or offloaded to the MEC
server under a feasible offloading policy
X
k2K
xkn � 1; n 2 N : (1)
In line of the above discussion, we define the task offloading
policy XX that contains all the task offloading variables xkn as
XX ¼ fxk
njxkn ¼ 1; n 2 N ; k 2 Kg. Besides, we denote N n ¼
fn 2 N jPk2K x
k
n ¼ 1g as the set of EDs offloading their
tasks to the MEC server.
Moreover, we consider that each ED and the BS have a
single antenna for uplink communications. We denote hk
n as
the uplink channel gain between the ED n and the BS on
sub-band k. Let PP ¼ fpknj0 < pkn � Pk
n ; n 2 N ng denote the
transmit power policy of EDs, where pkn is the transmit
power of ED n when offloading the task Yn to the BS via the
channel k, subject to a maximum budget Pk
n . We also
assume that the MEC system has a total operational fre-
quency band BMEC that is divided into K sub-bands of an
equal size W ¼ BMEC=K [Hz]. Then, the transmission data
rate of the ED n can be calculated as
Rn ¼Wlog2 1þ pknh
k
n
s2 þP
j2N n;j 6¼n xk
jp
k
jh
k
j
� �
0
@
1
A; (2)
where s2 is the background noise variance and the second
term at the denominator is the interference among mobile
users in the same channel. We also denote xn ¼P
k2K x
k
n; 8n 2 N . Thus, the required time that the ED n
upload its task inputDn via the uplink is specified as
Tup
n ¼
Dn
Rn
; 8n 2 N : (3)
Accordingly, the energy consumption of ED n for offloading
the task Yn is specified as
Eup
n ¼ pnT
up
n ¼ pn
Dn
Rn
; 8n 2 N ; (4)
where pn ¼
P
k2K p
k
n; 8n 2 N .
2.2.2 Computing Model
We consider two computing modes: local execution and
edge offloading.
- Local execution: Let fl
n denote the computational
resource of ED n (in CPU cycles/s) allocated to execute the
data task, which should not exceed its total computation
capacity Fn. Thus, we can define the policy of computa-
tional resource allocation of EDs as FF ¼ ffl
nj0 < fln �
Fn; n 2 Ng. The time consumed to execute the task input
Dn (with Cn in CPU cycles) at an ED n is expressed as
T l
n ¼
Cn
fln
: (5)
Moreover, the energy consumption of an ED nwhen execut-
ing its task locally is specified as
El
n ¼ kðfl
nÞ2Cn; (6)
where k is the energy coefficient depending on the chip
architecture [9] and Cn is the CPU workload of ED n.
- Edge offloading: For the offloading case, the MEC server
at the BS can provide computation services to multiple EDs
concurrently. Compared to the local device, the MEC server
has much more powerful computation capacity fe (in CPU
cycles/s) and more stable power supply. The execution
time of task Yn at the MEC server can be calculated as
Tex
n ¼
Cn
fe
; 8n 2 N : (7)
Similar to [9], [10], we do not model the downloading part
due to the small size of data results compared to the offload-
ing data.
In summary, the latency cost consumed by the ED n
when offloading its task Yn is given by
Toff
n ¼ Tup
n þ Tex
n ¼
Dn
Rn
þ Cn
fe
� �
; 8n 2 N : (8)
Moreover, the energy cost consumed by the ED n when
offloading its task Yn is only associated with the data trans-
mission, which is given by
Eoff
n ¼ Eup
n ¼ pn
Dn
Rn
; 8n 2 N : (9)
3 BLOCKCHAIN CONSENSUS DESIGN
In the blockchain-based MEC system, a crucial component
is blockchain consensus that aims to mine the blocks of
transactions (i.e., IoT data records) and add them to the
blockchain. To handle the transactions, the EDs work as
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2025
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
blockchain miners to perform mining. In the blockchain-
based edge offloading environment, latency is one of the
most important factors determining the efficiency of a
blockchain system. Given a consensus algorithm, when the
number of transactions to the blockchain increases, the con-
sensus workload to validate and append them into the
blockchain will increase significantly. In current consensus
schemes, e.g., DPoS [38], each miner node must implement
a repeated verification process across the miner network,
which results in unnecessary consensus latency and net-
work bandwidth waste. A possible solution is to reduce the
number of miner nodes to reduce the consensus latency, but
it potentially compromises the security of blockchain
because of the high probability of adding compromised
transactions from malicious nodes [39]. To solve these min-
ing issues, here we propose a new lightweight Proof of Rep-
utation (PoR) consensus mechanism for our blockchain
system. Compared to the DPoS scheme, we make an
improvement in the miner selection based on a reputation
score evaluation approach. Moreover, instead of using a
repeated verification among miner nodes, we implement a
lightweight block verification solution that allows each
miner only needs to verify once with another node during
the consensus process, which would significantly reduce
the verification latency and save network bandwidth. There
are two main parts of our PoR consensus, including miner
node selection and block verification, as illustrated in Fig. 3.
3.1 Miner Node Selection
In this phase, the IoT users first calculate the reputation
score of EDs and then select the miner nodes to implement
the mining process.
3.1.1 Reputation Calculation
In our MEC system, IoT sensors’ users participate in the del-
egate selection process to vote the mining candidates among
EDs for performing blockchain consensus. In this regard,
each IoT user votes its preferred ED with the most reputa-
tion. Here, the reputation of an ED is measured by its min-
ing utility with respect to mining latency. That is, an ED
exhibits a lower mining latency will have a better mining
utility which increases its reputation. To this end, we define
a mining utility function of each ED as
Jmine
n ¼ e1�
TPoR
n
tn � 1
� �þ
; (10)
where TPoR
n is the mining latency of the ED n (its detail will
be explained in the following sub-section), tn denotes the
task execution latency constraint. ½y�þ ¼ maxfy; 0g implies
that the reputation of an ED is set to 0 if the mining latency
TPoR
n is exceeded to its task execution constraint tn.
3.1.2 Miner Selection
Based on the calculated reputation score, each sensor userwill
vote for the ED candidates as the miners based on their repu-
tation ranking. The top EDs with highest reputation scores
are selected to become edgeminers (EMs) to performmining,
as indicated in Fig. 3. Also, similar to the traditional DPoS
framework [38], in our PoR mechanism, each of the active
EMs takes turn to act as a block manager during its time slot
to coordinate the consensus process. In other words, there is
one manager in each consensus process. In the next time slot,
another active EMwill undertake thismanager role.
3.2 Lightweight Block Verification
In this phase, the block manager first produces an unverified
block B that contains several offloading transactions col-
lected in a given amount of time. Then, the manager broad-
casts this created block to all EMs within the miner network
for verification. Different from the traditional DPoS scheme
[38] which relies on a repeated verification process among
miners, here we implement a lightweight verification solu-
tion that allows each miner to only verify once with another
node during the consensus process. Algorithm 1 presents
how our proposed block verification procedure is per-
formed. In lines 4 to 9, the blockmanager divides the blockB
consisting of transactions into N transaction parts Trn, n 2
N that will be assigned to each mining member EM within
the miner group. Each miner EM will also be assigned a
unique random number Rn. In lines 11 to 21, an EM selects
any miner s (s 2 Nnn) within the miner group to implement
the verification for its assigned transaction part Trn. If 51% of
the EMs respond positive verification, and the sum of ran-
dom numbers Sum calculated by all EMs is equal to the ini-
tial number set Rnd, the block manager accepts the verified
block B0 and adds it to the blockchain with a signature. For
instance, in Fig. 3, the EM 4 works as a manager to create the
block C and append it into the blockchain. Otherwise, the
manager discards it from the network (in lines 22 to 27).
3.3 Latency of Block Verification
In this sub-section, we calculate the verification latency
incurred by the mining. For simplicity, we assume that the
transaction part Trn (which also expresses the size) is the
same for all EMs. Each EM is willing to allocate a certain
CPU resource fn (in CPU cycles) for the verification of
transaction part n. Then, the CPU resource allocation policy
for block verification of EDs can be defined as GG ¼ ffnj0 <
fn � Fn; n 2 Ng, where Fn is the CPU resource budget of
the ED n. Further, the size of verified transaction result for
Fig. 3. The proposed PoR consensus in our blockchain-based MEC
system.
2026 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
the Trn is denoted by Trren . Hence, the transaction verifica-
tion task can be expressed as a tuple (Trn;fn; Tr
re
n ).
Algorithm 1. Procedure of the Proposed PoR Consensus
1: Input: the unverified block B, a set of EMs N
2: Output: the verified block B0
3: Initialization: Select an unverified block B, group the
selected EMs EM in the list Array½n�, n 2 N , initiate public
key Array½n�:PK and block manager BM
4: Divide the block B into N parts Trn, Sum 0
5: for n ¼ 1; . . . ; N do
6: Set a part of block Trn ! Array½n�:content
7: Assign a random number Rn  RandomðÞ
8: Calculate a signature as Sign  HashðArray½n�:content;
Array½n�:PK; timestampÞ
9: end for
10: Specify the total random number Rnd ¼ Nð1þ N�1
2 Þ
11: for n ¼ 1; . . . ; N do
12: Run a random function s ¼ Random:randrangeð1; N; 1Þ
13: if s 6¼ n then
14: Select a random different EM within the list
15: Send the Trn to EMs: EM ! EMs : ðTrn; Array½n�:PK;
Sign; timestampÞ
16: Verify the transaction Trn
17: if (Array½n�:PKEMs ¼¼ EMEM:PK
s Þ \ ðVerifyðSignÞ  
true) then
18: Sum SumþRn
19: end if
20: end if
21: end for
22: if Sum ¼¼ Rnd then
23: Accept the block B as a verified one (B0) and send it back
to the block manager BM
24: The manager BM appends the verified block B0 into the
blockchain network: BM ! � : ðBMPK;B
0; SignB;
timestampÞ
25: else
26: Discard the block B from the blockchain
27: end if
Conceptually, the block verification process in our pro-
posed PoR mechanism at an EM experiences four steps: (1)
unverified block transmission from the block manager to
the EMs, (2) local block verification at the EM, (3) broadcast-
ing of the verification result among two EMs, and (4) trans-
mission of verification result feedback from the EMs to the
manager. For a miner EM n, the time required to complete
these steps is expressed as
TPoR
n ¼ Trn
rdn
þ fn
Fn
þ �TrnjL2j þ Trren
run
; n 2 N ; (11)
where run and rdn are uplink and downlink transmission rates
between the miner n and the block manager. Here, the trans-
mission time of an unverified transaction part Trn from the
block manager to the miner is Trn
rdn
, while the local verification
time of this transaction is fn
Fn
. Moreover, similar to [4], the
time for transaction broadcasting among two miners is a
function of transaction size Trn and network scale TrnjL2j
(whichmeans twominers for transaction verification), which
is defined as �TrnjM2j. Here, � is a pre-defined parameter of
broadcasting verification result and comparison among two
miners, which can be acquired from the previous verification
records [4]. Besides,
Trren
run
is the verification feedback time
Meanwhile, in the traditional DPoS scheme [38], each
miner has to implement a repeated verification process
among all miners for the block B, instead of dividing into
separate transaction parts like our proposed PoR model.
Therefore, the verification latency of the DPoS consensus at
an EM n is expressed as [4]
TDPoS
n ¼ B
rdn
þ fB
n
cBn
þ �BjLN j þBre
run
; (12)
where fB
n is the CPU resource occupied to verify the block B
under the computation budget cBn . B
re denotes the size of
verified result of the block B. jLN j expresses the whole
miner network which means all miners n join the repeated
block verification in each consensus process, instead of two-
miner verification in our PoR scheme. By comparison of
Equations (11) and (12), it can be seen that the proposed
PoR scheme needs less time for block verification in com-
parison with the traditional DPoS scheme, for the same
block size and number of miners. Moreover, our mining
scheme can save much network bandwidth due to less mes-
sage exchange during the consensus process. The benefits
of our proposed PoR mechanism are verified in the follow-
ing sections.
4 SYSTEM UTILITY FORMULATION AND PROPOSED
MA-DRL ALGORITHM
In this section, we present the system utility formulation for
our proposed TOBM scheme based on the joint consider-
ation of offloading utility and mining utility as presented in
the previous sections. Then, we derive the system utility
optimization problem as a cooperative game and propose a
newMA-DRL algorithm to solve it.
4.1 System Utility Formulation
In this paper, we formulate the system utility for the TOBM
scheme by taking both offloading utility and mining utility
into account.
4.1.1 Offloading Utility
Here, we focus on formulating the QoE-aware offloading
utility function. In an MEC system, the offloading’s QoE is
mainly characterized by their task computation time, i.e., Tn
and energy consumption, i.e., En. Specifically, Tn and En
can be specified as
Tn ¼ Toff
n xn þ T l
nð1� xnÞ; 8n 2 N ; (13)
En ¼ Eoff
n xn þEl
nð1� xnÞ; 8n 2 N : (14)
Accordingly, we define a QoE-aware utility function to
measure the offloading utility that is specified as a trade-off
between the time and energy consumption of the task com-
pared with local execution
Joff
n ¼ �T
n
T l
n � Tn
T l
n
� �
þ �E
n
El
n � En
El
n
� �
; (15)
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2027
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
where �T
n ; �
E
n 2 ½0; 1� (with �T
n þ �E
n ¼ 1; 8n 2 N ) are set by
ED n to show the preference on time and energy cost when
computing the task Yn. If the task is emergency, the ED can
increase the weighting factor of time consumption. Mean-
while, if the ED is operating with low battery, the factor of
energy consumption should be preferred.
It is noting that here, the offloading utility function Joff
n
reflects the improvement in QoE over local execution, that
is measured by
Tl
n�Tn
Tl
n
� �
and
El
n�En
El
n
� �
, respectively. Specifi-
cally, when the ED n executes the task locally, the offloading
utility equals 0 (i.e., Joff
n ¼ 0). If the computation cost (i.e.,
latency and energy consumption) of the offloading mode is
lower than that of the local execution mode, the offloading
utility (Joff
n ) can be positive, which indicates the off-
loading’s QoE improvement. However, if offloading too
many tasks, the EDs can suffer from higher latency due to
the traffic congestion, which would reduce the QoE. As a
result, the offloading utility (Joff
n ) can be negative.
To this end, we formulate the QoE-aware offloading util-
ity for the MEC system. Given the offloading decision policy
XX, the transmission power policy PP , and the computational
resource allocation policy FF , we define the offloading utility
as the weighted sum of all MDs’ offloading utilities Joff
n ,
denoted as
Joff ¼
X
n2N
Joff
n ðXX;PP; FF Þ: (16)
4.1.2 Mining Utility
We adopt the mining utility built in Equation (10) to analyse
the efficiency of the mining in the blockchain-enabled task
offloading. Given the CPU resource allocation policy GG,
each MEC server yields an utility Jmine
n when performing
the mining process. Then, we can specify the total mining
utility of EDs in the MEC system as
Jmine ¼
X
n2N
Jmine
n ðGGÞ: (17)
Accordingly, the system utility of each MD Jn can be
expressed as
Jn ¼ Joff
n þ Jmine
n : (18)
4.1.3 System Utility Formulation
In this paper, our objective is maximize the total system util-
ity as the sum of the offloading utility and the mining utility
for the proposed TOBM scheme
maximize
XX;PP;FF;GG
Joff þ Jmine
(19a)
subject to xk
n 2 f0; 1g; 8n 2 N ; k 2 K; (19b)X
k2K
xk
n � 1; n 2 N ; (19c)
0 < pkn � Pk
n ; 8n 2 N n; k 2 K; (19d)
0 < fl
n � Fn; 8n 2 N ; (19e)
0 < fn � Fn; 8n 2 N n (19f)
Tn � tn; 8n 2 N : (19g)
Here, the constraints (19b) and (19c) imply that each task
can be either executed locally or offloaded to the MEC
server via a sub-channel. (19d) shows the transmission
power constraint of each ED. The constraint (19e) states that
each ED n must allocate a positive computational resource
to execute the computing task, but not exceed the total com-
putation budget Fn. Each ED n also must allocate a positive
CPU resource for the block verification under a maximum
CPU capability Fn, as indicated in (19f). Constraint (19g)
ensures that each data task needs to be completed under a
delay threshold.
The key intuition behind this integrated calculation is
that in the blockchain-based MEC system, each ED needs to
simultaneously perform task offloading and block mining.
In this context, the evaluation of the system quality, e.g.,
overall utility performance, must consider both offloading
utility and mining utility. Indeed, an ED needs to minimize
its offloading latency and energy consumption to maintain
the quality of task offloading service, while also minimizing
its mining latency to maintain the quality of block mining
service. Therefore, we come up with a final solution to sat-
isfy both services, aiming to optimize the overall system
utility performance.
The problem (19) is non-convex and centralized. As a
dynamic TOBM problem (due to varying channel conditions
and task sizes) and high-dimensional system state space (due
to the increase of EDs), the use of traditional optimization
approaches results in high computational complexity which
would hinder the applicability of the proposed model in
practical blockchain-based MEC scenarios. Moreover, most
of current solutions [13], [14], [32] rely on single-agent learn-
ingwhich suffers from some critical shortcomings:
� Dimensionality: The cardinalities of DNN input and
output are generally proportional to the number of
EDs, and thus the use of centralized learning to
obtain the optimal policy for all EDs is challenging.
Moreover, exploration in high-dimensional state
space is inefficient especially when the number of
EDs increases exponentially, which makes the learn-
ing in the blockchain-based MEC system impractical.
� Information transmission: Since the centralized learn-
ing always requires full information of all EDs (e.g.,
data task state, resource state, block size state) for
decision making, the information transmission
becomes challenging with the increase of EDs.
Due to the powerlessness of centralized learning algo-
rithms in the multi-agent environment like our considered
blockchain-based MEC system, we propose to use a distrib-
uted MA-DRL scheme to solve our cooperative TOBM prob-
lem, as presented in the following sub-sections.
4.2 Cooperative Learning Formulation
First, we convert the objective function (19a) from a system
utility maximization problem to a reward maximization
problem. To do this, we formulate the task offloading prob-
lem using a multi-agent version of MDP, also known as a
Markov game which is denoted by a tuple < N ;S;A;O > .
Here, each ED n is considered as an intelligent agent to
2028 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
learn its optimal policy by observing the TOBM environ-
ment and collaborating with other agents, aiming to achieve
the optimal system utility. Then, we have N ¼ f1; 2; . . . ; Ng
as the set of EDs (or agents). Moreover, S ¼ fs1; s2; . . . ; sNg
is defined as the set of states, A ¼ fa1; a2; . . . ; aNg is a set of
agent actions, and O ¼ fo1; o2; . . . ; oNg denotes a set of
observations for agents. We assume that the considered
cooperative TOBM scheme operates on discrete time hori-
zon with each time slot t equal and non-overlapping, and
the communication parameters keep unchanged during
each time slot. Now we define each item in the tuple at each
time slot t as follows.
4.2.1 State
The environment states in the cooperative TOBM network
include five components: task state StaskðtÞ, channel state
SchannelðtÞ, power state SpowerðtÞ, resource state SresðtÞ, and
transaction state StransðtÞ. Therefore, the system state is
defined as a matrix
SðtÞ ¼ fStaskðtÞ; SchannelðtÞ; SpowerðtÞ; SresðtÞ; StransðtÞg;
(20)
where each state vector is explained as follows. StaskðtÞ is
defined as StaskðtÞ ¼ ½DnðtÞ; CnðtÞ�; n 2 N where DnðtÞ rep-
resents the computation task size of the ED n and CnðtÞ is
the required input CPU cycles number to complete the task
dataDnðtÞ. SchannelðtÞ is defined as
SchannelðtÞ ¼ cknðtÞ ¼
c1;1 � � � c1;K
..
. . .
. ..
.
cN;1 � � � cN;K
2
64
3
75; (21)
where cknðtÞ indicates whether the sub-channel k is used by
ED n at time slot t. If yes, cknðtÞ ¼ 1, otherwise cknðtÞ ¼ 0.
Also, SpowerðtÞ is defined as
SpowerðtÞ ¼ pknðtÞ ¼
p1;1 � � � p1;K
..
. . .
. ..
.
pN;1 � � � pN;K
2
64
3
75; (22)
where pknðtÞ represents the ED n’s transmit power level in
the kth sub-channel, which is a continuous variable and sat-
isfies 0 < pknðtÞ � Pk
n . Moreover, the resource state SresðtÞ is
expressed as
SresðtÞ ¼ fv1ðtÞ; v2ðtÞ; . . . ; vNðtÞg; (23)
where vnðtÞ contains the states of current available computa-
tional resource flnðtÞ and CPU resource fnðtÞ of the ED n.
Lastly, the transaction state StransðtÞ is defined as
StransðtÞ ¼ fTr1ðtÞ; Tr2ðtÞ; . . . ; TrNðtÞg; (24)
where TrnðtÞ is the transaction state of ED n.
4.2.2 Action
By observing the system states, each ED needs to make
actions in each time step to deal with the task execution and
block mining, including offloading decision, channel selec-
tion, transmit power selection, computational resource
allocation, and CPU resource allocation. Accordingly, the
action space can be expressed as
AðtÞ ¼ fxk
nðtÞ; kðtÞ; pknðtÞ; fl
nðtÞ;fnðtÞg; (25)
where each action compopent is explained as follows:
� Offloading decision xk
nðtÞ: xknðtÞ 2 f0; 1g, (n 2 N ;
k 2 K). Each ED n makes decision to execute the task
locally xk
nðtÞ ¼ 0 or offload it to the MEC server
xknðtÞ ¼ 1 via the channel k, based on the current task
state StaskðtÞ.
� Channel selection kðtÞ: kðtÞ ¼ ½1; 2; . . . ; K�. Each ED n
selects one of the available channels to offload the
task to the MEC server, based on the current channel
state SchannelðtÞ.
� Transmit power selection pknðtÞ: pknðtÞ 2 ð0; P k
n �,
(n 2 N n; k 2 K). Each ED n chooses a transmit power
value to transmit the data task to the MEC server
with respect to the current task state StaskðtÞ and
channel state SchannelðtÞ.
� Computational resource allocation fl
nðtÞ: fl
nðtÞ ¼
½fl1ðtÞ; fl2ðtÞ; . . . ; flNðtÞ�. Each ED n allocates part of its
computational resource to execute the task with
respect to the current resource state SresðtÞ and task
state StaskðtÞ.
� CPU resource allocation fnðtÞ: fnðtÞ ¼ ½f1ðtÞ;f2ðtÞ;
. . . ;fNðtÞ�. Each ED n allocates part of its CPU
resource to verify the blockchain transaction, based
on the current resource state SresðtÞ and transaction
state StransðtÞ.
4.2.3 System Reward Function
The system reward at one time slot t is the sumof the rewards
of all EDs. Each ED nwill get a reward rðsnðtÞ; anðtÞÞ in a cer-
tain state snðtÞ after executing each possible action anðtÞ. In
our paper, the system reward function should be positively
correlated to the objective function in the optimization prob-
lem (19), aiming to maximize the system utility of all EDs.
Then, we can specify the system reward function of our off-
loading network at each time slot t as
rðsðtÞ; aðtÞÞ ¼
X
n2N
rðsnðtÞ; anðtÞÞ ¼ JðtÞ; (26)
where JðtÞ ¼ JoffðtÞ þ JmineðtÞ is the total system utility of
the blockchain-based MEC system.
4.3 Proposed MA-DRL Algorithm for
Cooperative TOBM
In the cooperative TOBM problem in our blockchain-based
MEC system, conventional single-agent [13], [14], [32] or
independent multi-agent [17], [18], [19] solutions are unable
to obtain the cooperative policies of EDs due to the nonsta-
tionary and partially observable environment. Indeed,
when policies of other agents change (i.e., due to computa-
tion mode preference), the ED (agent) n observation On can
be changed (nonstationary), which makes the obtained
reward rnðtÞ different from the accumulated reward from
its actual state-action pair. Moreover, in independent multi-
agent learning schemes, the agent n only has the local infor-
mation and cannot know the updates from other agents due
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2029
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
to non-collaboration. This would affect the agent n’s reward
rnðtÞ and make the learning algorithms hard to ensure stable
convergence [40]. Therefore, we adopt a centralized learn-
ing and decentralized execution solution to implement our
MA-DRL algorithm for the proposed TOBM scheme.
4.3.1 Preliminaries of Reinforcement Learning
In RL, an agent takes some actions to obtain rewards through
the trial and error procedure according to a predefinedMDP,
aiming to accumulate experience as much as possible to con-
struct an optimal policy. Specifically, the state-action function
can be updated using the agent n’s experience tuple
ðsnðtÞ; anðtÞ; rnðtÞ; snðtþ 1ÞÞ at each time step t as
QðsnðtÞ; anðtÞÞ  QðsnðtÞ; anðtÞÞ þ asðtÞ; (27)
which is called as the Q-learning algorithm [32], where sðtÞ
is a temporal difference (TD) error that would be zero for
the optimal Q-value, a is the learning rate, and g is the dis-
count factor between ð0; 1Þ.
4.3.2 Proposed MA-DDPG Algorithm
Here, we present an MA-DRL approach using an MA-
DDPG algorithm to solve the cooperative TOBM problem in
the blockchain-based MEC system, as illustrated in Fig. 4.
Different from RL, DRL uses a DNN as the non-linear
approximator to sample the loss function at each training
step in order to alleviate the computational complexity for
the large-scale offloading problem. Here, agents coopera-
tively offload their tasks to the MEC server and perform
mining to form a shared learning environment consisting of
all EDs and the MEC server. In the centralized training step,
the information of state-action of all EDs is aggregated by
the MEC server to train the DRL model where each agent
can obtain the global view of the learning environment to
learn collaboratively with other agents. This makes the
learning environment stationary and thus enhances the con-
vergence performance. After training at the MEC server, the
learned parameters are downloaded to each of EDs to exe-
cute the model for decision making based on its own locally
observed information.
We denote p ¼ fp1;p2; . . . ;pNg as the set of all agent pol-
icies and u ¼ fu1; u2; . . . ; uNg as the parameter set of corre-
sponding policies. Every agent updates its parameters un to
obtain the optimal policy p�un ¼ argmaxunJðunÞ, where JðunÞ
is the objective function (also the expected reward) of agent
n as defined in Equation (26). MA-DDPG is a deterministic
policy gradient-based off-policy actor-critic operating over
continuous action spaces in a multi-agent environment.
Here, the actor generates deterministic action a over time
slots with a behavior network and the critic evaluates the
behavior of the actor with a target network. In the training,
the actor updates the behavior network by computing the
gradient of the objective function JðunÞ as
5unJðpnÞ ¼ IEo;a�D 5unQ
p
nðo; a1; . . . ; aNÞ:5un pnðanjonÞ
� 	
;
(28)
with (o ¼ fo1; . . . ; oNg) as the observation set, Qp
nðo; a1;
. . . ; aNÞ is a centralized action-value function of the agent n
with a1; a2; . . . ; aN as the actions of all agents and is learned
separately for each n 2 N . Also, D is the memory buffer for
experience replay, containing multiple episode samples
(o; a; r;o0). Moreover, the critic updates the behavior Q-func-
tion Qp
nðÞ in a fashion that minimizes the loss function,
which is written as
LðunÞ ¼ IEo;a;r;o0 ðyn �Qp
nðo; a1; a2; . . . ; aNÞÞ2
h i
; (29)
where yn ¼ rn þ gQp
nðo0; a01; a02; . . . a0NÞja0n¼p0nðonÞ is the is TD
target and p0nðonÞ defines the target policies with delayed
parameters u0n. The training procedure is summarized in
Algorithm 2. Here, the procedure consists of two main
phases, the planning phase and the updating phase. In the
planning phase, we use an �-greedy policy to balance the
exploration and exploitation for updating the Q function
(line 7). At each time epoch, each ED executes an action and
estimates the system reward, i.e., system utility, and stores
training information in the replay memory (lines 8-10).
After each action, the ED moves to the next step, updates
the critic and actor networks as well as corresponding target
networks (lines 11-17). The training is iterated until achiev-
ing the desired system reward performance.
We can see that the update of un of the target network in
the policy gradient method 5un would guide how the agent
ED acts correctly to obtain the optimal policy. It is based on
the fact that that the value of DNN in the target actor net-
work is fixed for several iterations, and the weights un of the
DNN in the actor behavior network are updated. In other
words, all agent EDs in the blockchain-based MEC system
can maximize their expected function JðunÞ (i.e., user utility)
and obtain stable policies even via interactions between EDs
and the environment. This makes the learning environment
stationary even when the policies pn change, which would
enhance the quality of policy evaluation for improving the
overall system utility. After the training is completed, EDs
download the learned policy network parameters from the
MEC server and update the target network parameters for
the actor and critic as
u0j  zuj þ ð1� zÞu0j; (30)
where z 2 ð0; 1Þ is the update step.
4.3.3 Computational Complexity Analysis
In our MA-DRL algorithm, the training process is imple-
mented in the MEC server with sufficient computational
Fig. 4. The proposed MA-DDPG architecture.
2030 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
resource. Therefore, we mainly focus on the computational
complexity of the execution process at EDs. Here, a DRL
agent with a DNN is established for each ED and all DNNs
run in parallel across the MEC network. As a result, the
overall complexity of the multi-agent system can be deter-
mined by the complexity of a single DNN at an ED. We
assume that are K neurons at the input layer of the DNN
for each ED, and Z as the number of neurons at the output
layer. Also, the hidden layer is L, and the number of neu-
rons at hidden layers is H. Accordingly, the computation
cost at a DNN is ðKH þ ðL� 1ÞHH þHZÞ =OðHðKþ ðL�
1ÞH þ ZÞÞ. Also, the complexity of using activation function
is OðHLÞ. Hence, the total complexity is OðHðK þHL�
H þ Z þ LÞÞwhich can be simplified asOðHðKþHLþ ZÞÞ.
4.4 Cooperative Game-Theoretic Solution
We next develop a game-theoretic approach for the pro-
posed TOMB problem, where each ED can act as a game
player to react to other players’ decisions for maximizing its
utility [41], [42]. After a number of steps, all the EDs self-
organize into a mutual equilibrium state, i.e., the Nash equi-
librium, at which no ED can further increase its utility by
unilaterally altering its strategy.
Algorithm 2. The MA-DDPG Training Procedure in the
Blockchain-Based MEC System
1: Input: Replay memory D, time budget T , exploration prob-
ability �, discount factor g, update step z
2: Output: The optimal policy p�un and maximum reward
r�ðs; aÞ
3: Initialization: Initialize the deep Q network Qðs; aÞ with
random weight u and u0, initialize the exploration probabil-
ity � 2 ð0; 1Þ
4: for episode = 1,...,M do
5: Initialize the state s0  fStaskðtÞ; SchannelðtÞ; SpowerðtÞgjt¼0
6: for t ¼ 1; 2; . . . ; T do
7: For each agent ED j 2 N , select a random action ajðtÞ
with probability �, otherwise ajðtÞ ¼ pujðsjðtÞÞ
8: Execute actions aðtÞ ¼ ða1ðtÞ; a2ðtÞ; . . . ; aNðtÞÞ by per-
forming offloading decision xk
nðtÞ, channel selection
kðtÞ, transmit power selection pknðtÞ, computational
resource allocation fl
nðtÞ, and CPU resource allocation
fnðtÞ
9: Observe the system reward rðtÞ via (26) and the new
state s0
10: Store ðsðtÞ; aðtÞ; rðtÞ; s0ðtÞÞ into the memory D
11: for agent j ¼ 1 toN do
12: Sample random mini-batch of transitions (sj; aj;
rj; s
0
j) from D
13: Set yj ¼ rj þ gQp
j ðs0j; a01; a02; . . . a0NÞja0
j
¼p0
j
ðojÞ
14: Update behavior critic by minimizing the loss:
LðujÞ ¼ 1
S
P
j½yj �Qp
j ðsj; a1; a2; . . . ; aNÞ�2
15: Update actor by using the sampled policy gradient:
5ujJðpjÞ ¼ 1
S ½5ujQ
p
j ðs0j; a1; a2; . . . ; aNÞ:5uj pjðajjsjÞ�
16: end for
17: Update the target network parameters for each agent
via (30)
18: end for
19: end for
We first define the game as G ¼ fN ; fAngn2N ; fJngn2N g,
where N is the set of rational game players, An is the strat-
egy set for player n, and Jn is the utility function of ED n.
Let denote an as the offloading decision profile of the player
n over the wireless sub-bands K, from (18) we can rewrite as
JnðanÞ ¼ Joff
n Ifan¼1g þ Jmine
n ; (31)
where Iz is an indicator function. If z is true, Iz ¼ 1; other-
wise, Iz ¼ 0. Based on (18) and (31), the utility of a player n
in the cooperative game can be expressed as
Jðan; a�nÞ ¼
Jmine
n ; an ¼ 0
Joff
n þ Jmine
n ; an ¼ 1
(
; (32)
where a�n is the offloading decisions of all players exept n.
Accordingly, by considering the influence of other players
on the utility optimization of a player n in the cooperative
game, we can express the game-theoretic utility function as
Jðan; a�nÞ ¼
Jmine
n ; an ¼ 0P
m#n Joff
n ðanÞ þ Joff
m ðamÞ
 �
Ifam¼ang
þJmine
n ðanÞ; an ¼ 1
8><
>:
(33)
wherem 2 Nnfng.
Theorem 1: The collaborative game G ¼ fN ; fAngn2N ;
fJngn2N g has a pure Nash equilibrium (NE) and guarantees the
finite improvement property.
Proof: We first prove that the proposed game G is an
exact (cardinal) potential game with potential function
Cðan; a�nÞ ¼ 1
2
X
n2N
X
m#n
ðJoff
n þ Joff
m ÞIfam¼angIfan¼1g
þ
X
n2N
Jmine
n Ifan¼1g þ
X
n2N
Jmine
n Ifan¼0g;
(34)
such that
Cða0n; a�nÞ �Cðan; a�nÞ ¼ Jða0n; a�nÞ � Jðan; a�nÞ;
8an; a�n 2 An:
(35)
We now consider three cases as follows:
Case 1: an > 0; a0n > 0
Cða0n; a�nÞ �Cðan; a�nÞ
¼ 1
2
X
m#n
Joff
n ða0nÞ � Joff
n ðamÞ
 �
Ifam¼a0ng
þ 1
2
X
m#n
Joff
n ðamÞ � Joff
n ða0nÞ
 �
Ifa0n¼amg þ Jmine
n ða0nÞ
� 1
2
X
m#n
Joff
n ðanÞ � Joff
n ðamÞ
 �
Ifam¼ang
� 1
2
X
m#n
Joff
n ðamÞ � Joff
n ðanÞ
 �
Ifan¼amg þ Jmine
n ðanÞ � Jmine
n ðanÞ
¼
X
m#n
Joff
n ða0nÞ þ Joff
m ðamÞ
 �
Ifam¼a0ng þ Jmine
n ða0nÞ
�
X
m#n
Joff
n ðanÞ þ Joff
m ðamÞ
 �
Ifam¼ang � Jmine
n ðanÞ
¼ Jða0n; a�nÞ � Jðan; a�nÞ:
(36)
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2031
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
Case 2: an ¼ 0; a0n > 0
Cða0n; a�nÞ �Cðan; a�nÞ
¼ 1
2
X
m#n
Joff
n ða0nÞ � Joff
n ðamÞ
 �
Ifam¼a0ng
þ 1
2
X
m#n
Joff
n ðamÞ � Joff
n ða0nÞ
 �
Ifa0n¼amg þ Jmine
n ða0nÞ � Jmine
n
¼
X
m#n
Joff
n ða0nÞ þ Joff
m ðamÞ
 �
Ifam¼a0ng þ Jmine
n ða0nÞ � Jmine
n
¼ Jða0n; a�nÞ � Jðan; a�nÞ:
(37)
Case 3: an > 0; a0n ¼ 0
Similar to Case 2, it is also straightforward to prove that
Cða0n; a�nÞ �Cðan; a�nÞ ¼ Jða0n; a�nÞ � Jðan; a�nÞ.
Therefore, the gameG is an exact potential game with the
potential function given in (34). Finally, according to the
potential game theory [41], our proposed collaborative game
G has anNE and possesses the finite improvement property.
5 SIMULATIONS AND PERFORMANCE ANALYSIS
In this section, we perform extensive simulations to verify
the performance of the proposed TOBM scheme.
5.1 Simulation Setting
We here leverage the widely used mobile wireless dataset
provided by Shanghai Telecom1 for numerical simulations.
We select maximum 500 mobile phones as EDs and an MEC
server in a sub-area of Shanghai city with the geographical
distribution as illustrated in Fig. 5. Moreover, IoT sensor
data traces from location services [43] collected during 6
months in 2014 are selected as data tasks for task offloading
simulations. Inspired by [11], [13], [14], [32], our simulation
parameters are configured as in Table 2.
Moreover, the channel gains hk
n are generated using dis-
tance-dependent path-loss model L½dB� ¼ 140:7þ 36:7log
10d½km�. For the proposed multi-agent DRL algorithm, the
discount factor g equals 0.85 and the replay memory
capacity and training batch size are set to 105 and 128,
respectively. The update step z in the critic-actor training is
set to 0.8. The used DNN structure has three hidden layers
(64, 32 and 32 neurons) with ReLU as the activation function
and Adam as the optimizer. For blockchain mining, we set
up 10 transactions per block and vary the numbers of min-
ing nodes (i.e., EDs) from 2 to 100. The other mining param-
eters are included in Table 2. The results from simulation
are averaged from 50 runs of numerical simulations.
5.2 Evaluation of Training Performance
We first evaluate the training performance of our proposed
algorithm. To prove the advantage of the proposed coopera-
tive MA-DDPG algorithm, we compare its performance
with the state-of-the-art non-cooperative schemes, including
DDPG, actor-critic [26] and DQN [18]. Here, DDPG and
actor-critic are policy-based algorithms where each ED
agent only observes the local information and does not the
information of other EDs during the training. Meanwhile,
DQN is a value-based algorithm where each ED also has no
information of other EDs.
Fig. 6a shows the performance of average system reward
with different learning rates a. It can be seen that the learning
rate affects the learning rewards over the training episodes.
That is, when the learning rate decreases, the convergence
performance of the proposed algorithm decreases due to
slow learning speed. Based on our experimental results, the
learning value a ¼ 0:01 yields the best reward performance
and has good convergence rate and thus we use it in the fol-
lowing system simulations and evaluations.
Fig. 6b shows the learning curves of the average system
reward with the increase of episodes for an MEC system
with 50 EDs. It is clear that our MA-DDPG scheme is more
robust and yields the best performance in terms of average
system reward, compared to the baseline schemes. This is
because the proposed scheme allows EDs to learn mutually
the cooperative policy which helps reduce the channel
Fig. 5. Illustration of the MEC network with an MEC server and distrib-
uted mobile phones.
TABLE 2
Simulation Parameters
Parameter Value
Number of EDs N [5-500]
Number of sub-bands at the BSK 30
Size of taskDn [0.1-5] MB
Task CPU workload Cn [0.8-1.5] Gcyles
Maximum task execution latency tn 1000 ms
The transmit power pkn [0-24] dBm
The background noise variance s2 -100 dBm
The system bandwidthW 20 MHz
The ED’s and MEC server’s computing
capability fln, f
e
[0.1-1] GHz, 5 GHz
The ED’s energy coefficient k 5 � 10�27
The weights of time and energy costs
�T
n , �
E
n
0.6, 0.4
The CPU resource for block
verification fn
[103-106] CPU cycles
Input/output block data sizes B, Bre [50-500] KB, [10-50] KB
The uplink/downlink block
transmission rate run, r
d
n
[100-250] Kbps, [100-250]
Kbps
The defined block broadcasting
parameter �
0.5
1. http://www.sguangwang.com/dataset/telecom.zip
2032 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
http://www.sguangwang.com/dataset/telecom.zip
congestion and user interference, and enhance computa-
tional resource efficiency for improving the overall system
reward. Meanwhile, in the DQN and actor-critic schemes,
EDs greedily access the wireless channel spectrum to maxi-
mize their own utility as much as possible without collabo-
rating with each other, which increases the possibility of
channel collision and thus results in higher offloading
latency. Consequently, the average system reward becomes
worse. Although the DDPG scheme shows a better reward
performance than these two schemes, it still remains a non-
stationary learning issue and its average reward is lower
than that of the MA-DDPG scheme.
5.3 Evaluation of Task Offloading Utility
Next, Fig. 7a indicates the performance of average offload-
ing utility versus the different numbers of offloaded EDs. It
can be seen that when the number of EDs is small (<60), the
average offloading utility increases with the number of EDs
because in this case, the MEC system can support sufficient
spectrum and computing resources to handle all tasks off-
loaded from EDs. However, after exceeding some thresh-
olds (e.g., N ¼ 60 EDs), the system utility decreases because
the higher the number of offloaded EDs, the higher the com-
petition of resource usage (i.e., channel spectrum). Note that
the configured number of sub-bands K ¼ 30 is relatively
low with respect to the increase in the number of EDs, thus
the channel bandwidth allocated for each ED decreases
when there are more EDs in the system. In turn, this
increases the offloading latency and thus, degrades the
overall offloading utility. Nevertheless, our MA-DDPG
scheme still achieves the best utility performance due to its
cooperative offloading policies among EDs compared to the
other schemes with selfish learning. For instance, in the case
of 100 EDs, the average offloading utility of the MA-DDPG
scheme is 22.5%, 37.5%, and 43.6% higher than those of the
DDPG, actor-critic, and DQN schemes, respectively. These
results also imply that as the EDs number increases, the
cooperative policy learned by MA-DDPG becomes more
important in the cooperative edge task offloading.
Moreover, we evaluate the effect of different task sizes on
the average offloading utility as shown in Fig. 7b. We find
that a higher task size results in a higher offloading utility.
Specifically, when the task size is relatively high (>2MB),
the offloading utility increases significantly. The reason is
Fig. 6. Evaluation of training performance.
Fig. 7. Evaluation of task offloading performance.
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2033
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
that the edge computation mode becomes more efficient
than the local execution mode in terms of lower computing
cost in handling the larger-size tasks due to the high MEC
capability. This leads to the increase of the user utility Jn
which thus enhances the system-inter utility J . Particularly,
when the task size increases, the advantage of the proposed
MA-DDPG scheme over the baselines become more pro-
found, with the larger performance gaps and better utilities.
For example, as the task size is 3.5 MB, the proposed MA-
DDPG scheme achieves 30%, 24.5% and 21.7% higher off-
loading utilities compared with the DDPG, actor-critic, and
DQN schemes, respectively.
5.4 Evaluation of Blockchain Performance
Here, we evaluate the performance of our proposed PoR
consensus scheme via numerical simulations using Python
programming and compare it with the traditional DPoS
scheme [38] via the verification block latency and band-
width usage metrics.
We first show the block verification latency performance
versus different numbers of mining nodes with the block
size fixed at 50 KB and compare with the traditional DPoS
scheme [38]. As illustrated in Fig. 8a, our proposed PoR
scheme requires significantly less time for mining blocks,
compared to the DPoS scheme thanks to the optimized
block verification procedure. Although the time required
for block verification increases with the increasing number
of miners, our solution still achieves a much better perfor-
mance than that of the DPoS scheme. This result confirms
our lightweight consensus design that is thus well suitable
for large-scale blockchain-based MEC systems.
Next, Fig. 8b indicates the simulation result in terms of
network bandwidth cost spent by the mining process for
different data block sizes from 50 KB to 500 KB in the edge
blockchain network. Due to the optimized block exchange
procedure where each ES only needs to contact with one dif-
ferent miner for transaction verification, instead of using a
repeated process, our PoR scheme can save much network
bandwidth resources, compared to the DPoS scheme [38].
5.5 Evaluation of Overall System Utility
Performance
In this subsection, we evaluate the performance of the over-
all system utility of our TOBM scheme enabled by the joint
consideration of offloading utility and mining utility. The
performances of our cooperative scheme with our PoR min-
ing design and other non-cooperative schemes with PoR
and DPoS mining are illustrated in Fig. 9. Unsurprisingly,
our TOBM scheme with a PoR mining design achieves the
best overall system utility. The reasons for this observation
Fig. 8. Evaluation of blockchain performance.
Fig. 9. Comparison of system utility with non-cooperative schemes. Fig. 10. Comparison of system utility with cooperative schemes.
2034 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
are two-fold. First, our offloading scheme with a coopera-
tive MA-DDPG algorithm outperforms other non-coopera-
tive offloading schemes in terms of a better offloading
utility, as evidenced in Fig. 7. Second, our PoR design yields
a lower mining latency which consequently increases the
mining utility, as explained in Section 3.1.1. As a result, our
scheme with a cooperative offloading design and a light-
weight mining design achieves a much better overall system
utility than the other non-cooperative offloading schemes
with DPoS design. Moreover, due to its better mining util-
ity, our PoR design contributes to better overall system utili-
ties in each non-cooperative offloading scheme, compared
to the use of DPoS design.
Furthermore, we compare the system utility performance
of our cooperative TOBM scheme with other cooperative
schemes, including a cooperative scheme with DPoS design
[27] and a cooperative scheme without mining design [26].
As shown in Fig. 10, our TOBM scheme with PoR design
achieves a better system utility than the cooperative scheme
with DPoS design, thanks to the better mining utility of our
PoR framework. Meanwhile, the cooperative scheme in [26]
has lowest system utility due to the lack of consideration of
mining design.
5.6 Comparison of Learning and Game-Theoretic
Approaches
Next, we compare the utility performance between the MA-
DRL scheme and the game-theoretic scheme, where the
DQN scheme is used as the baseline, after averaging the
results from 5 simulations. As shown in Fig. 11a, the game-
theoretic approach can achieve the optimal system utility,
compared to the MA-DRL scheme, when increasing the
number of MDs. This is because in the game approach, each
MD can obtain the full knowledge of other MDs’ informa-
tion such as the information of offloading decisions and
mining status via the collaborative interactions. This allows
each MD to determine the optimal computation offloading
strategy to achieve the converged point of NE. Meanwhile,
the MA-DRL scheme can also achieve reasonably close
results, where the physical parameters of MDs are time-
varying, and each MD can compute the approximately opti-
mal computation offloading strategy without requiring any
prior information about other MDs. Similar performances
can also be seen in Fig. 11b, when increasing the size of task
inputs.
6 CONCLUSIONS AND FUTURE WORK
In this article, we have proposed a novel cooperative
TOBM scheme to enable a joint design of task offloading
and blockchain mining in blockchain-based MEC systems.
First, we have proposed a new cooperative offloading
framework that enables EDs to learn offloading policies in
a collaborative manner. Then, we have designed a new
PoR mining scheme enabled by a lightweight block verifi-
cation strategy. To this end, we have formulated a joint off-
loading and mining optimization problem which is solved
by an MA-DRL algorithm. We then have derived a game-
theoretic solution to model the competition among EDs in
offloading and mining as a potential game, and proved the
existence of a pure Nash equilibrium. Simulation results
have clearly shown the significant advantages of our pro-
posed scheme over the existing schemes in terms of higher
system rewards with better offloading utility and lower
blockchain costs which thus enhance the overall system
utility.
Our proposed approach has potential for future intelli-
gent mobile networks, where EDs are able to build distrib-
uted intelligent solutions via our cooperative DRL model
for enabling intelligent computation, communications and
network control [44]. In future work, it is of interest to con-
sider fair resource allocation strategies for simultaneously
supporting the edge computation and blockchain services.
The tradeoff between mining security and latency should
also be studied to strike a beneficial balance between these
two important design factors before integrating into MEC.
Moreover, resource trading solutions should be developed
to enable reliable energy purchase for resource-constrained
edge nodes in blockchain-based MEC systems.
REFERENCES
[1] H. Guo, J. Liu, J. Ren, and Y. Zhang, “Intelligent task offloading in
vehicular edge computing networks,” IEEE Wireless Commun.,
vol. 27, no. 4, pp. 126–132, Aug. 2020.
Fig. 11. Comparison of learning and game-theoretic approaches.
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2035
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
[2] H. Guo and J. Liu, “UAV-enhanced intelligent offloading for
Internet of Things at the edge,” IEEE Trans. Ind. Inform., vol. 16,
no. 4, pp. 2737–2746, Apr. 2020.
[3] P. A. Apostolopoulos, G. Fragkos, E. E. Tsiropoulou, and
S. Papavassiliou, “Data offloading in UAV-assisted multi-
access edge computing systems under resource uncertainty,”
IEEE Trans. Mobile Comput., early access, Mar. 31, 2021, doi:
10.1109/TMC.2021.3069911.
[4] J. Kang, Z. Xiong, D. Niyato, D. Ye, D. I. Kim, and J. Zhao, “Toward
secure blockchain-enabled Internet of Vehicles: Optimizing con-
sensus management using reputation and contract theory,” IEEE
Trans. Veh. Technol., vol. 68, no. 3, pp. 2906–2920,Mar. 2019.
[5] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When
mobile blockchain meets edge computing,” IEEE Commun. Mag.,
vol. 56, no. 8, pp. 33–39, Aug. 2018.
[6] S. Guo, X. Hu, S. Guo, X. Qiu, and F. Qi, “Blockchain meets edge
computing: A distributed and trusted authentication system,”
IEEE Trans. Ind. Inform., vol. 16, no. 3, pp. 1972–1983, Mar. 2020.
[7] J. Kang et al., “Blockchain for secure and efficient data sharing in
vehicular edge computing and networks,” IEEE Internet Things
J., vol. 6, no. 3, pp. 4660–4670, Jun. 2019.
[8] J. Guo, X. Ding, and W. Wu, “Reliable traffic monitoring mecha-
nisms based on blockchain in vehicular networks,” IEEE Trans.
Rel., early access, Jan. 13, 2021, doi: 10.1109/TR.2020.3046556.
[9] C. Wang, C. Liang, F. R. Yu, Q. Chen, and L. Tang, “Computation
offloading and resource allocation in wireless cellular networks
with mobile edge computing,” IEEE Trans. Wireless Commun.,
vol. 16, no. 8, pp. 4924–4938, Aug. 2017.
[10] Z. Kuang, L. Li, J. Gao, L. Zhao, and A. Liu, “Partial offloading
scheduling and power allocation for mobile edge computing
systems,” IEEE Internet Things J., vol. 6, no. 4, pp. 6774–6785,
Aug. 2019.
[11] J. Zhao, Q. Li, Y. Gong, and K. Zhang, “Computation offloading
and resource allocation for cloud assisted mobile edge computing
in vehicular networks,” IEEE Trans. Veh. Technol., vol. 68, no. 8,
pp. 7944–7956, Aug. 2019.
[12] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne,
“Deep reinforcement learning for collaborative offloading in het-
erogeneous edge networks,” in Proc. IEEE/ACM 21st Int. Symp.
Cluster, Cloud Internet Comput., May 2021, pp. 297–303.
[13] Y. Liu, H. Yu, S. Xie, and Y. Zhang, “Deep reinforcement learning
for offloading and resource allocation in vehicle edge computing
and networks,” IEEE Trans. Veh. Technol., vol. 68, no. 11, pp. 11
158–11 168, Nov. 2019.
[14] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne,
“Privacy-preserved task offloading in mobile blockchain with
deep reinforcement learning,” IEEE Trans. Netw. Serv. Manage.,
vol. 17, no. 4, pp. 2536–2549, Dec. 2020.
[15] Y. Yu, S. C. Liew, and T. Wang, “Multi-agent deep reinforcement
learning multiple access for heterogeneous wireless networks
with imperfect channels,” IEEE Trans. Mobile Comput., early acces,
Feb. 9, 2021, doi: 10.1109/TMC.2021.3057826.
[16] X. Xu, X. Zhang, H. Gao, Y. Xue, L. Qi, and W. Dou, “BeCome:
Blockchain-enabled computation offloading for IoT in mobile
edge computing,” IEEE Trans. Ind. Inform., vol. 16, no. 6, pp. 4187–
4195, Jun. 2020.
[17] J. Heydari, V. Ganapathy, and M. Shah, “Dynamic task offloading
in multi-agent mobile edge computing networks,” in Proc. IEEE
Glob. Commun. Conf., Dec. 2019, pp. 1–6.
[18] Y. Zhang, B. Di, Z. Zheng, J. Lin, and L. Song, “Joint data offload-
ing and resource allocation for multi-cloud heterogeneous mobile
edge computing using multi-agent reinforcement learning,” in
Proc. IEEE Glob. Commun. Conf., Dec. 2019, pp. 1–6.
[19] X. Liu, J. Yu, and Y. Gao, “Multi-agent reinforcement learning for
resource allocation in IoT networks with edge computing,” 2020,
arXiv:2004.02315.
[20] G. Xu, Y. Liu, and P. W. Khan, “Improvement of the DPoS consen-
sus mechanism in blockchain based on vague sets,” IEEE Trans.
Ind. Inform., vol. 16, no. 6, pp. 4252–4259, Jun. 2020.
[21] L. Jiang, S. Xie, S. Maharjan, and Y. Zhang, “Joint transaction
relaying and block verification optimization for blockchain
empowered D2D communication,” IEEE Trans. Veh. Technol., vol.
69, no. 1, pp. 828–841, Jan. 2020.
[22] X. Qiu, L. Liu, W. Chen, Z. Hong, and Z. Zheng, “Online deep
reinforcement learning for computation offloading in blockchain-
empowered mobile edge computing,” IEEE Trans. Veh. Technol.,
vol. 68, no. 8, pp. 8050–8062, Aug. 2019.
[23] S. Guo, Y. Dai, S. Guo, X. Qiu, and F. Qi, “Blockchain meets edge
computing: Stackelberg game and double auction based task off-
loading for mobile blockchain,” IEEE Trans. Veh. Technol., vol. 69,
no. 5, pp. 5549–5561, May 2020.
[24] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song,
“Computation offloading and content caching in wireless block-
chain networks with mobile edge computing,” IEEE Trans. Veh.
Technol., vol. 67, no. 11, pp. 11008–11021, Nov. 2018.
[25] Z. Zhang, Z. Hong, W. Chen, Z. Zheng, and X. Chen, “Joint com-
putation offloading and coin loaning for blockchain-empowered
mobile-edge computing,” IEEE Internet Things J., vol. 6, no. 6,
pp. 9934–9950, Dec. 2019.
[26] J. Feng, F. Richard Yu, Q. Pei, X. Chu, J. Du, and L. Zhu,
“Cooperative computation offloading and resource allocation for
blockchain-enabled mobile-edge computing: A deep reinforce-
ment learning approach,” IEEE Internet Things J., vol. 7, no. 7,
pp. 6214–6228, Jul. 2020.
[27] F. Guo, F. R. Yu, H. Zhang, H. Ji, M. Liu, and V. C. M. Leung,
“Adaptive resource allocation in future wireless networks with
blockchain and mobile edge computing,” IEEE Trans. Wireless
Commun., vol. 19, no. 3, pp. 1689–1703, Mar. 2020.
[28] Z. Li, M. Xu, J. Nie, J. Kang, W. Chen, and S. Xie, “NOMA-enabled
cooperative computation offloading for blockchain-empowered
Internet of Things: A learning approach,” IEEE Internet Things
J., vol. 8, no. 4, pp. 2364–2378, Feb. 2021.
[29] M. Li, D. Hu, C. Lal, M. Conti, and Z. Zhang, “Blockchain-enabled
secure energy trading with verifiable fairness in industrial Inter-
net of Things,” IEEE Trans. Ind. Inform., vol. 16, no. 10, pp. 6564–
6574, Oct. 2020.
[30] Z. Yang, K. Liu, Y. Chen, W. Chen, andM. Tang, “Two-level stack-
elberg game for IoT computational resource trading mechanism:
A smart contract approach,” IEEE Trans. Serv. Comput., early
access, Sep. 18, 2020, doi: 10.1109/TSC.2020.3024729.
[31] W. Chen et al., “Cooperative and distributed computation offload-
ing for blockchain-empowered industrial Internet of Things,”
IEEE Internet Things J., vol. 6, no. 5, pp. 8433–8446, Oct. 2019.
[32] J. Wang, J. Hu, G. Min, W. Zhan, Q. Ni, and N. Georgalas,
“Computation offloading in multi-access edge computing using a
deep sequential model based on reinforcement learning,” IEEE
Commun. Mag., vol. 57, no. 5, pp. 64–69, May 2019.
[33] L. Busoniu, R. Babuska, and B. De Schutter, “A comprehensive
survey of multiagent reinforcement learning,” IEEE Trans. Syst.,
Man, Cybern., vol. 38, no. 2, pp. 156–172, Mar. 2008.
[34] Z. Cao, P. Zhou, R. Li, S. Huang, and D. Wu, “Multiagent deep
reinforcement learning for joint multichannel access and task off-
loading of mobile-edge computing in industry 4.0,” IEEE Internet
Things J., vol. 7, no. 7, pp. 6201–6213, Jul. 2020.
[35] D. Kwon, J. Jeon, S. Park, J. Kim, and S. Cho, “Multi-agent DDPG-
based deep learning for smart ocean federated learning IoT
networks,” IEEE Internet Things J., vol. 7, no. 10, pp. 9895–9903,
Apr. 2020.
[36] S. Wang et al., “A data-driven multi-agent autonomous voltage
control framework using deep reinforcement learning,” IEEE
Trans. Power Syst., vol. 35, no. 6, pp. 4644–4654, Apr. 2020.
[37] D. Nguyen, P. Pathirana, M. Ding, and A. Seneviratne, “Secure
computation offloading in blockchain based IoT networks with
deep reinforcement learning,” IEEE Trans. Netw. Sci. Eng., early
access, Aug. 24, 2021, doi: 10.1109/TNSE.2021.3106956.
[38] W. Sun, J. Liu, Y. Yue, and P. Wang, “Joint resource allocation and
incentive design for blockchain-based mobile edge computing,”
IEEE Trans. Wireless Commun., vol. 19, no. 9, pp. 6050–6064, Sep.
2020.
[39] F. Yang, W. Zhou, Q. Wu, R. Long, N. N. Xiong, and M. Zhou,
“Delegated proof of stake with downgrade: A secure and efficient
blockchain consensus algorithm with downgrade mechanism,”
IEEE Access, vol. 7, pp. 118541–118555, 2019.
[40] R. Lowe, Y. WU, A. Tamar, J. Harb, O. Pieter Abbeel, and
I. Mordatch, “Multi-agent actor-critic for mixed cooperative-
competitive environments,” in Proc. Adv. Neural Inf. Process.
Syst., 2017, pp. 6379–6390.
[41] H. Guo and J. Liu, “Collaborative computation offloading for mul-
tiaccess edge computing over fiber–wireless networks,” IEEE
Trans. Veh. Technol., vol. 67, no. 5, pp. 4514–4526, May 2018.
[42] Z. Ning et al., “Partial computation offloading and adaptive task
scheduling for 5G-enabled vehicular networks,” IEEE Trans.
Mobile Comput., early access, Sep. 18, 2020, doi: 10.1109/
TMC.2020.3025116.
2036 IEEE TRANSACTIONS ON MOBILE COMPUTING, VOL. 22, NO. 4, APRIL 2023
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TMC.2021.3069911
http://dx.doi.org/10.1109/TR.2020.3046556
http://dx.doi.org/10.1109/TMC.2021.3057826
http://dx.doi.org/10.1109/TSC.2020.3024729
http://dx.doi.org/10.1109/TNSE.2021.3106956
http://dx.doi.org/10.1109/TMC.2020.3025116
http://dx.doi.org/10.1109/TMC.2020.3025116
[43] S. Yang, K. Xu, L. Cui, Z. Ming, Z. Chen, and Z. Ming, “EBI-PAI:
Towards an efficient edge-based IoT platform for artificial
intelligence,” IEEE Internet Things J., vol. 8, no. 12, pp. 9580–9593,
Jun. 2020.
[44] D. C. Nguyen et al., “6G Internet of Things: A comprehensive
survey,” IEEE Internet Things J., early access, Aug. 9, 2021,
doi: 10.1109/JIOT.2021.3103320.
Dinh C. Nguyen (Member, IEEE) is currently
working toward the PhD degree with the School of
Engineering, Deakin University, Melbourne, VIC,
Australia. He has published more than 20 papers
as the first author in top-tier IEEE journals and
conferences, such as the IEEE Transactions on
Mobile Computing, IEEE Wireless Communica-
tions Magazine, IEEE Communications Surveys
and Tutorials, IEEE Internet of Things Journal,
IEEEGLOBECOM, ICC, and theCCGrid conferen-
ces. His research interests include wireless com-
munications, federated learning, deep reinforcement learning, blockchain,
and edge computing. He was the recipient of prestigious Data61 PhD
scholarship, CSIRO, Australia. He was the TPCmember of top-tier confer-
ences including IEEEGLOBECOM2021.
Ming Ding (Senior Member, IEEE) received the
BS and MS degrees (with first-class Hons.) in
electronics engineering, and the Doctor of Philos-
ophy (PhD) degree in signal and information
processing from Shanghai Jiao Tong University,
Shanghai, China, in 2004, 2007, and 2011,
respectively. From April 2007 to September 2014,
he was a researcher or senior researcher or prin-
cipal researcher with Sharp Laboratories of
China, Shanghai, China. He is currently a senior
research scientist with Data61, CSIRO, Sydney,
NSW, Australia. He has authored more than 140 papers in IEEE journals
and conferences in recognized venues, and around 20 3GPP standardi-
zation contributions, and a Springer book Multi-point Cooperative Com-
munication Systems: Theory and Applications. He also holds 21 U.S.
patents and co-invented another more than 100 patents on 4G/5G tech-
nologies in CN, JP, KR, EU. His research interests include information
technology, data privacy and security, and machine learning and AI. He
is currently the editor of the IEEE Transactions on Wireless Communica-
tions and the IEEE Wireless Communications Letters. He was the guest
editor/co-chair/co-tutor/TPC member for many IEEE top-tier journals/
conferences. He was the recipient of several awards for his research
work and professional services.
Pubudu N. Pathirana (Senior Member, IEEE) was
born in 1970 in Matara, Sri Lanka, and was edu-
cated at Royal College Colombo. He received the
BE degree (first class Hons.) in electrical engineer-
ing and the BSc degree in mathematics, and the
PhD degree in electrical engineering from the Uni-
versity of Western Australia in 1996 and 2000,
respectively, all sponsored by the government of
Australia on EMSS and IPRS scholarships, respec-
tively. He was a postdoctoral research fellow with
Oxford University, Oxford, a research fellow with the
School of Electrical Engineering and Telecommunications, University of
NewSouthWales, Sydney, NSW, Australia, and a consultant to the Defence
Science and Technology Organization, Australia, in 2002. He was a visiting
professor with Yale University in 2009. He is currently a professor and the
head of the Discipline, Mechatronics, Electrical and Electronic Engineering
and the director of the Network Sensing and Biomedical Engineering
Research Group, the School of Engineering, Deakin University, Geelong,
Australia. His research interests include bio-medical assistive device design,
human motion capture, mobile/wireless and IoT networks, rehabilitation
robotics, and signal processing.
Aruna Seneviratne (Senior Member, IEEE) is
currently a foundation professor of telecommuni-
cations with the University of New South Wales,
Sydney, NSW, Australia, where he holds the
Mahanakorn chair of telecommunications. He was
with a number of other Universities in Australia,
U.K., and France, and industrial organizations,
including Muirhead, Standard Telecommunication
Labs, Avaya Labs, and Telecom Australia (Tel-
stra). He held visiting appointments with INRIA,
France. His research interests include physical
analytics: technologies that enable applications to interact intelligently
and securely with their environment in real time. Most recently, his team
has been working on using these technologies in behavioral biometrics,
optimizing the performance of wearables, and the IoTsystem verification.
He was the recipient of number of fellowships, including one at British Tel-
ecom and one at TelecomAustralia Research Labs.
Jun Li (Senior Member, IEEE) received PhD
degree in electronic engineering from Shanghai
Jiao Tong University, Shanghai, China, in 2009.
From January 2009 to June 2009, he was a
research scientist with theDepartment of Research
and Innovation, Alcatel Lucent Shanghai Bell. From
June 2009 to April 2012, he was a postdoctoral fel-
low with the School of Electrical Engineering and
Telecommunications, University of New South
Wales, Sydney, NSW, Australia. From April 2012 to
June 2015, he was a research fellow with the
School of Electrical Engineering, University of Sydney, Sydney, NSW, Aus-
tralia. Since 2015, he has been a professor with the School of Electronic
and Optical Engineering, Nanjing University of Science and Technology,
Nanjing, China. From 2018 to 2019, hewas a visiting professor with Prince-
ton University. He has coauthored more than 200 papers in IEEE journals
and conferences and holds one U.S. patents and more than ten Chinese
patents in his areas of research, which include network information theory,
game theory, distributed intelligence,multiple agent reinforcement learning,
and their applications in ultra-dense wireless networks, mobile edge com-
puting, network privacy and security, and industrial Internet of things. He
was the editor of the IEEE Communication Letters and a TPC member for
several flagship IEEE conferences. He was the recipient of the Exemplary
Reviewer of IEEE Transactions on Communications in 2018 and the Best
Paper Award from the IEEE International Conference on 5G for Future
Wireless Networks in 2017.
H. Vincent Poor (Fellow, IEEE) received the PhD
degree in electrical engineering and computer
sciences from Princeton University in 1977. From
1977 to 1990, he was on the faculty of the Univer-
sity of Illinois at Urbana-Champaign. Since 1990,
he has been on the faculty at Princeton, where he
is currently the Michael Henry Strater University
professor. From 2006 to 2016, he served as the
dean of the Princeton’s School of Engineering
and Applied Science. He has also held visiting
appointments with several other universities,
including most recently at Berkeley and Cambridge. His research inter-
ests include information theory, machine learning and network science,
and their applications in wireless networks, energy systems, and related
fields. Among his publications in these areas is the forthcoming book
Machine Learning and Wireless Communications (Cambridge University
Press). Dr. Poor is a member of the National Academy of Engineering
and the National Academy of Sciences and a foreign member of the Chi-
nese Academy of Sciences, the Royal Society, and other national and
international academies. He received the IEEE Alexander Graham Bell
Medal in 2017.
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/csdl.
NGUYEN ETAL.: COOPERATIVE TASKOFFLOADING AND BLOCK MINING IN BLOCKCHAIN-BASED EDGE COMPUTINGWITH MULTI-AGENT... 2037
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:11:11 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/JIOT.2021.3103320
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice