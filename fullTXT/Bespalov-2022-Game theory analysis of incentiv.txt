Game theory analysis of incentive distribution for prompt generation of the proof tree in zk-SNARK based sidechains
Game theory analysis of incentive distribution
for prompt generation of the proof tree
in zk-SNARK based sidechains
1st Yuri Bespalov
Bogolyubov Institute for Theoretical Physics
Kiev, Ukraine
yu.n.bespalov@gmail.com
2nd Lyudmila Kovalchuk
Input Output
Kyiv, Ukraine
lyudmila.kovalchuk@iohk.io
3rd Hanna Nelasa
Zaporizhzhia Polytechnic National University
Zaporizhzhia, Ukraine
annanelasa@gmail.com
4th Roman Oliynykov
Input Output
Kharkiv, Ukraine
roman.oliynykov@iohk.io
5th Alberto Garoffolo
Horizen
Milan, Italy
alberto@horizen.global
Abstract—In sidechains with Latus consensus, a block forger
generates a block using SNARK-proofs, created by decentralized
provers and organized in a perfect binary tree (proof tree). One
of the most important questions is to assign incentives for these
proofs. In this paper, the game theory instruments are used to
investigate incentive distribution in proof trees for SNARK-based
sidechains to provide stable and efficient block generation. Two
different models are considered: when only one sidechain exists,
and when there exist a lot of sidechains among which provers
may switch any time, trying to get a higher incentive. Utilization
of Stirling numbers with non-integer arguments turns out to be
very efficient for the second model.
Index Terms—Blockchain, sidechain, Nash equilibrium,
Merkle tree, Stirling numbers of the second kind with non-integer
arguments
I. INTRODUCTION
This paper works with a scalability solution in the
blockchain technology - sidechains [1], [2], [3], [4]. A
sidechain is a parallel blockchain bound to the main one, and
it provides an additional functionality that for some reasons
cannot be available in the original blockchain that is called
a mainchain. Here we investigate the Latus Protocol [5] that
is a PoS consensus based on the Ouroboros Praos [6] with
an additional feature of binding to a PoW mainchain. This
binding is needed to provide such necessary blockchain prop-
erty as persistence [7]. A sidechain sends some information to
the mainchain that contains a series of recurrent zk-SNARK-
proofs [8], [9]. Such information also allows to establish de-
centralized and verifiable cross-chain transfers. Latus utilizes
a recursive composition of SNARKs to construct a succinct
proof of the sidechain state progression for the period of a
withdrawal epoch. Then, a SNARK for a withdrawal certificate
is constructed so that it proves correct sidechain state transition
for the whole epoch, and validates backward transfers. That
allows the mainchain to verify the sidechain efficiently without
having to rely on an intermediary - such as certifiers [4] - and
still be oblivious to the sidechain construction and interactions
within it. Block generation in Latus is going on as follows.
An entity that creates a block, a block forger, shares a list of
transactions that he intends to include into the block. Then the
task of zk-SNARK proofs generation is randomly assigned to
interested parties called provers. They perform these tasks in
parallel, and then submit generated proofs for the sidechain,
getting some reward for each accepted proof. Provers construct
SNARK-proofs not only for these transactions, but also for
each node of the corresponding Merkle tree. We will call such
a tree ”a proof tree”. Each prover sets prices for his proofs,
according to the price policy of the current epoch that was
set at the end of the previous one. If there are several proofs
for a certain node, the block forger chooses the cheapest one.
The general purpose of sidechains investigation is to ensure
their stable operation (high throughput) via optimal incentive
system for all participants.
This paper is a natural continuation of our previous papers
[10], [11], where we obtained the following results:
• found estimates for the number of steps to build a
complete set of SNARK proofs in the proof tree for
blockchains, for two different types of proof construction
models: those in which all the proofs to be built are
independent (they can be considered as leaves on the
proof tree) and those in which the proofs are located at
all nodes of the proof tree, and hence form a partially
ordered set [10];
• obtained necessary and sufficient conditions for exis-
tence of the Nash equilibrium, for various models, price
policies, and parameters, both in pure and mixed game
theoretic strategies that allows simulation and sometimes
prediction of the provers’ behavior, proof prices and block
forgers’ rewards, and help in adequate setting of the price
policy, to provide stable operation of the sidechain [11].
20
22
 IE
EE
 In
te
rn
at
io
na
l C
ar
na
ha
n 
C
on
fe
re
nc
e 
on
 S
ec
ur
ity
 T
ec
hn
ol
og
y 
(I
C
C
ST
) |
 9
78
-1
-6
65
4-
93
63
-5
/2
2/
$3
1.
00
 ©
20
22
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
IC
C
ST
52
95
9.
20
22
.9
89
64
84
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply. 
In this paper, we first analyze the relation between incentive
distributions on the set of proofs and the corresponding Nash
equilibrium in the case where all provers are located on
the same sidechain and cannot switch to other ones. We
consider the game when we can set various possible prices for
different proofs, and investigate the question how distribution
of incentives for proofs influence their choice by provers.
We formulate the relevant definition of a one-step symmetric
strategic game and also obtain results on the Nash equilibrium
in this game. We show that the Nash equilibrium in mixed
strategies occurs when the probabilities in the corresponding
distribution are proportional to the incentives for the proofs
with which provers are working. It means that provers choose
different proofs with probabilities that are approximately pro-
portional to the corresponding incentives. Using this result, we
can set a desirable distribution on the set of proofs by setting
corresponding incentives to these proofs.
Then, we consider the case when provers can switch ar-
bitrarily among different sidechains choosing more profitable
conditions at every moment. Formulas (7), (8) for probabilities
to built a level of the tree and the whole tree use Stirling
numbers of the second kind whose arguments are usually
integer [12]. It makes us to use rounding, which, in turn, gives
a ”ragged” function. Stirling numbers of complex arguments
were proposed in [13]. Our use of this generalization turns out
to be a very natural interpolation, a suitable approximation for
this model and also convenient for calculation. The results
obtained in this case are half-empirical. Through a lot of
experiments we show that there is no sense to change proof
prices for different levels of the proof tree, and the best
solution with respect to the incentive distribution is to set them
approximately equal despite of the level number.
II. PRELIMINARIES
Let us recall some basic definitions from the game theory.
More details can be found in one of the textbooks, in partic-
ular [14].
Definition 1. A strategic form game consists of
• the set of players P = {1, 2, . . . ,m};
and for each player i, of
• a non-empty set of pure strategies Si;
• a utility (payment) function ui :
∏
i∈P Si → R.
A strategy profile is a combination of strategies of each player,
i.e. an element of the Cartesian product
∏
i∈P Si.
Definition 2. A game is called symmetric, if all strategy sets
Si are the same, and for each permutation π of strategies
uπ(i)(s1, . . . , sm) = ui(sπ(1), . . . , sπ(m)).
In this case, ui is a symmetric function of all its arguments
except for the ith.
Note that the replacement of the left action of symmetric
group by the right action leads to a stronger concept of a fully
symmetric game [15].
Definition 3. If the sets of strategies are equipped by a
topology, one can consider the corresponding Borel σ-algebra.
A mixed (randomized) strategy µi is a Borel probability
measure on the set of strategies Si.
The utility for mixed strategy µj on jth place is the
expectation calculated via a Lebesgue integral:
ui(. . . , µj , . . .) =
∫
Sj
ui(. . . , sj , . . .)dµ(sj).
Definition 4. A pure strategy Nash equilibrium is a strategy
profile (si)i∈P ∈
∏
i∈P Si, where for each i ∈ P ,
ui(s1 . . . , si−1, si, si+1, . . . , sm)
≥ ui(s1 . . . , si−1, s
′
i, si+1, . . . , sm) for all s′i ∈ Si.
A mixed strategy Nash equilibrium is a mixed strategy profile
(µi)i∈P , where for each i ∈ P ,
ui(µ1 . . . , µi−1, µi, µi+1, . . . , µm)
≥ ui(µ1 . . . , µi−1, µ
′
i, µi+1, . . . , µm)
for all mixed strategies µ′
i on Si.
In this section we consider a symmetric game, and look for
a symmetric Nash equilibrium given by the same probability
measure µ∗ repeated m times. In this case, we can formulate
an equivalent criterion of a Nash equilibrium, making com-
parisons only with pure strategies.
Lemma 1. For any symmetric game, a symmetric Nash
equilibrium is given by a probability measure µ∗, iff the utility
u1(s1, µ
∗ . . . , µ∗) =
∫
Sm−1
u1(s1, . . . , sm)
m∏
j=2
dµ∗(sj) (1)
satisfies the condition
suppµ∗ ⊆ argmax
s1∈S
u1(s1, µ
∗ . . . , µ∗), (2)
where suppµ∗ is the support of the game µ∗.
In this case, the game price is
u∗ = max
s1∈S
u1(s1, µ
∗ . . . , µ∗).
III. INCENTIVE GAME
In this section, we consider the game when we can set
different possible prices for different proofs, and investigate
the question how the distribution of incentives for proofs influ-
ences their choice. We formulate the corresponding definition
of a one-step symmetric strategic game, and also obtain results
on the Nash equilibrium in this game. We show that the Nash
equilibrium occurs in the case when provers choose different
proofs with probabilities that are approximately proportional to
the corresponding incentives. It means that we can set a desir-
able distribution on the set of proofs by setting corresponding
incentives to these proofs.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply. 
A. Fixed incentives
Here we describe a symmetric Nash equilibrium for a
simple model, when each proof has its own unique fixed
price (incentive). Such model may be useful when we need
to enforce provers to create some proofs before others.
Definition 5. Symmetric strategic game.
• The set of players (≡ provers) is {1, 2, . . . ,m}.
• The set of pure strategies for each player is the set of
proofs {1, 2, . . . , n}. The incentive qj is assigned for each
proof j. The utility of the game is
ui(s1, . . . , sm) =
qsi
#{i′|si′ = si}
Lemma 2. The utility (1) for the above game is
u1(s1, µ
∗, . . . , µ∗) =
qs1
mµ∗(s1)
(1− (1− µ∗(s1))
m) . (3)
Proof. Using (1),
u1(s1, µ
∗, . . . , µ∗)
=
∑
s2,s3,...,sm∈{1,...,n}
qs1
#{i|si = s1}
m∏
j=2
µ∗(sj)
=
m−1∑
k=0
qs1
k + 1
(
m− 1
k
)
µ∗(s1)
k(1− µ∗(s1))
m−k−1
=
qs1
mµ∗(s1)
m−1∑
k=0
(
m
k + 1
)
µ∗(s1)
k+1(1− µ∗(s1))
m−k−1
=
qs1
mµ∗(s1)
(1− (1− µ∗(s1))
m) .
The following proposition sets connections between distri-
bution of incentives on proofs and distribution of probabilities
to choose the corresponding proof.
Proposition 1. To obtain a symmetric Nash equilibrium given
by a mixed strategy µ∗ with µ∗(i) = pi, one should select
incentives according to the proportion
qi ∼
pi
1− (1− pi)m
=
1
1 + (1− pi) + . . .+ (1− pi)m−1
.
Proof. According to (2), the utility (3) should be independent
of s1.
Example 1. To obtain the Nash equilibrium on a uniform
distribution, one should select equal values for all qi.
Example 2. If m ≫ 1, i.e. such that (1 − pi)
m ≪ 1 for
all i, to obtain a Nash equilibrium one should select all qi
proportional to pi.
Example 3. If m = 2, then to obtain a Nash equilibrium one
should select qi ∼ 1/(2− pi).
B. Incentives from intervals
Here we generalize our model from the previous subsection.
In this subsection, we assume that some incentive interval is
assigned to each proof. Each prover may choose the proof,
and then set the price from the corresponding interval, so this
strategy consists of two elements - a proof number and its
price.
Definition 6. Symmetric strategic game.
• The set of players (≡ provers) is {1, 2, . . . ,m}.
• There are given the set of proofs {1, 2, . . . , n} and an
interval of incentives [qj,min, qj,max] is assigned to each
proof j.
Let a pure strategy for each player be an ele-
ment s of the disjoint union of all these intervals∐
1≤j≤n[qj,min, qj,max], i.e. a pair (s†, s‡) with 1 ≤ s† ≤
n and s‡ ∈ [qs′,min, qs′,max].
The utility is
ui(s1, . . . , sm)
=

s‡i
# argmin
i′∈{i′′|s†
i′′
=s
†
i
}
(s‡
i′ )
, if i ∈ argmin
i′∈{i′′|s†
i′′=s†i}
(s‡i′)
0, otherwise.
A mixed strategy is a probability measure on∐
1≤j≤n[qj,min, qj,max], or equivalently a discrete probability
distribution (pj)1≤j≤n on proofs together with the probability
measure µj on [qj,min, qj,max] absolutely continuous with
respect to the Lebesgue measure for 1 ≤ j ≤ n.
Lemma 3. For a mixed strategy µ∗ = (pj , µj)1≤j≤n
u1(s1, µ
∗, . . . , µ∗)
=
s‡1
(
(1− ps†1
+ ps†1
µ1([s
‡
1, qs†1,max]))
m − (1− ps†1
)m
)
mps†1
µ1([s
‡
1, qs†1,max])
=
s‡1
m
m−1∑
k=0
(1−ps†1
+ps†1
µ1([s
‡
1, qs†1,max]))
k(1−ps†1
)m−k−1.
Proof. Using (1),
u1(s1, µ
∗, . . . , µ∗)
=
∑
s†2,s
†
3,...,s
†
m∈{1,...,n}
ps†2
· · · ps†m
×
∫
u1(s1, . . . , sm) dµ2(s
‡
2) · · · dµm(s‡m).
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply. 
u1(s1, µ
∗, . . . , µ∗)
=
m−1∑
k=0
(
m− 1
k
)
s‡1
k+1
pk
s†1
(1−ps†1
)m−k−1µ1([s
‡
1, qs†1,max])
k
=
s‡1
mps†1
µ1([s
‡
1, qs†1,max])
×
m−1∑
k=0
(
m
k+1
)
pk+1
s†1
(1−ps†1
)m−k−1µ1([s
‡
1, qs†1,max])
k+1
=
s‡1
mps†1
µ1([s
‡
1, qs†1,max])
×
(
(1− ps†1
+ ps†1
µ1([s
‡
1, qs†1,max]))
m − (1− ps†1
)m
)
.
Proposition 2. To obtain a symmetric Nash equilibrium given
by a mixed strategy µ∗ = ((pj)1≤j≤n, (µj)1≤j≤n) one should
select incentives according to the proportion
qi,max ∼ (1− pi)
1−m. (4)
Proof. According to (2), the utility (3) should be independent
of s1.
s‡1
m
m−1∑
k=0
(1− ps†1
+ ps†1
µ1([s
‡
1, qs†1,max]))
k(1− ps†1
)m−k−1
= q,max(1− p)m−1.
The results obtained in this section for two different models
may be interpreted as follows:
• according to Proposition 1, in the case of fixed values of
incentives and of a sufficiently large number of provers,
we should assign incentives proportional to a desired
probability distribution, to guarantee stable functioning
of the sidechain;
• according to Proposition 2, in the case when provers
may choose incentives from some intervals themselves, to
achieve stability in the sidechain we should assign right
ends of the intervals, as in the proportion (4).
IV. INCENTIVES FOR TREE LEVELS
Suppose that some mainchain has many different sidechains,
and the provers at each step can choose which sidechain to
work on. Indeed, it is the most advantageous to build proofs
at the lowest level of the tree, since in this case the probability
that the created proof will be accepted is the largest. Therefore,
one possible strategy for provers could be to switch to the
sidechain where the bottom levels of the tree is currently being
built. Based on this, the question arises: how to distribute
incentives for each level of the tree in order to attract the
optimal number of provers to work with this level? In the
previous section, for the case of one sidechain, a result was
obtained showing that incentives must be larger to attract
more provers, and vice versa. Following this logic, incentives
would need to decrease as the level number increases in order
ϵ
0
00
000 001
01
010 011
1
10
100 101
11
110 111
Fig. 1. The perfect binary tree M4 with nodes labeled by binary strings
to attract fewer provers for fewer proofs. In what follows,
we formulate a theoretical background and then test this
assumption experimentally.
A. Probabilities for proof-tree construction
Let us introduce the following notations. We denote by vp
the average incentive received by the prover for the completed
proof (taking into account also those proofs that were rejected
due to duplicated generation by several provers). Next, let the
blockforger want to include the 2ℓ−1 transaction for some
nonnegative integer ℓ. Therefore, in order to successfully
create a block, provers must build a proof tree consisting of ℓ
levels.
Let us denote by Mℓ the corresponding proof tree.
Definition 7. A rooted binary tree is called perfect, if all its
interior nodes have two children and all leaves have the same
depth (i.e. distance to the root).
The perfect binary tree Mℓ with ℓ levels has n = 2ℓ−1
leaves and, more generally,
ni = 2ℓ−i
nodes on i-th level (1 ≤ i ≤ ℓ) starting from the bottom. These
nodes may be subsequently indexed by 0 ≤ j < 2ℓ−i, and the
binary string representation has length ℓ− i. See Figure 1.
We suppose that the blockforger’s fee for a block is pro-
portional to the number of transactions. So, we can subtract
this sum and consider the part of the transaction fee vt used
to pay to provers. Let us denote ν = vt/vp.
We also assume that on i-th level we will pay vi for a proof,
and mi provers work at this level. The equilibrium condition
that each prover expects to obtain vp for a proof takes the
form
mivp ≈ nivi.
Let us denote νi = vi/vp and set exactly
mi = [2ℓ−iνi], (5)
where x 7→ [x] is the usual rounding function.
Note that vi (resp. νi) for all i satisfy the conservation law∑
1≤i≤ℓ
nivi = nvt or
∑
1≤i≤ℓ
21−iνi = ν. (6)
According to [10, Sec 3], the probability that the i-th
level will be proved in one step equals to the share of
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply. 
surjections {1, 2, . . . , ni} ↠ {1, 2, . . . ,mi} among all maps
{1, 2, . . . , ni} → {1, 2, . . . ,mi}
pi =
ni!S(mi, ni)
nmi
i
. (7)
Here S(mi, ni) are Stirling numbers of the second kind [12].
Note that nℓ = 1, so for mℓ ≥ 1 we have pℓ = S(mℓ, 1) = 1.
The probability that the whole tree will be built in ℓ steps
is
p =
ℓ−1∏
i=1
pi =
ℓ−1∏
i=1
ni!S(mi, ni)
nmi
i
. (8)
Now we are ready to formulate computational problems:
Problem 1. Let ℓ and ν = vt/vp be fixed. Find the maximum
of the probability (8) as a function of νi satisfying relation
(6).
The above problem may take a significant time to check all
suitable values of νi. But our numerical calculations show that
it is sufficient to consider only cases when these values form
a geometric progression with a common ratio z. From relation
(6) we get
νi = ν
1− z/2
1− (z/2)ℓ
zi−1, 1 ≤ i ≤ ℓ. (9)
To have νℓ ≥ 1, it is natural to consider ν ≥ 1/(1− z/2).
Alternatively, if we suppose that νℓ = 1 (the minimal
possible number of provers to built a root-proof in one step)
and other νi form a geometric progression, we get
νi = (ν − 21−ℓ)
1− z/2
1− (z/2)ℓ−1
zi−1, 1 ≤ i < ℓ. (10)
Problem 2. Let ℓ and ν = vt/vp be fixed. Find the maximum
of the probability
p =
ℓ−1∏
i=1
2ℓ−i! · S([2ℓ−iνi], 2
ℓ−i)
2(ℓ−i)[2ℓ−iνi]
. (11)
as a function of z, where νi are given by (9) or (10).
Interpolation using Stirling numbers for non-integer argu-
ments: Flajolet and Prodinger in [13], applying the Cauchy’s
coefficient formula to the generating function, obtained gen-
eralizations of the Stirling numbers of the second kind for the
complex arguments. In the case where only the first argument
x is not an integer (with ℜx > 0), the usual binomial formula
remains valid:
S(x, k) =
1
k!
k∑
j=1
(
k
j
)
(−1)k−jjx. (12)
We can apply this formula to avoid rounding in (5). The
modified formula for probability will be
p = 2−
∑ℓ−1
i=1 (ℓ−i)2ℓ−iνi ·
ℓ−1∏
i=1
2ℓ−i∑
j=1
(
2ℓ−i
j
)
(−1)jj2
ℓ−iνi .
In the case when νi are given by a geometric progression (9),
p = 2
−2ℓ−1ν
(ℓ−1)−ℓ(z/2)+(z/2)ℓ
(1−z/2)(1−(z/2)ℓ) ·
ℓ−1∏
i=1
2ℓ−i∑
j=1
(
2ℓ−i
j
)
(−1)jj2
ℓ−iνi .
(13)
B. Explicit calculations
Here we present results of calculations related to Problem 2
using Wolfram Mathematica.
Formulas (11), (9) are implemented in the listing
PrTr [ l , nu , z ] := Module [{ n , m} ,
n = Tab le [ B i t S h i f t L e f t [ 1 , l − i ] ,{ i , l − 1} ] ;
m = Tab le [ Round [ n [ [ i ] ] * nu *
z ˆ ( i −1)*(1 − z / 2 ) / ( 1 − ( z / 2 ) ˆ l ) ] , { i , l − 1} ] ;
P r o d u c t [ F a c t o r i a l [ n [ [ i ] ] ] *
S t i r l i n g S 2 [m[ [ i ] ] , n [ [ i ] ] ] /
B i t S h i f t L e f t [ 1 , ( l − i ) * m[ [ i ] ] ] ,
{ i , l − 1 } ] ] ;
Application of the rounding function switches further calcula-
tions to infinite-precision arithmetics.
Formula (13) is implemented in the listing
PrTrC [ l , nu , z ] := Module [{ n } ,
n = Tab le [ B i t S h i f t L e f t [ 1 , l − i ] ,{ i , l − 1} ] ;
P r o d u c t [Sum[ Binomia l [ n [ [ i ] ] , j ] *
( − 1 ) ˆ j * j ˆ
( n [ [ i ] ] * nu * z ˆ ( i −1) *
(1 − z / 2 ) / (1 − ( z / 2 ) ˆ l ) ) ,
{ j , n [ [ i ] ] } ] , { i , l −1} ] /
2 ˆ ( 2 ˆ ( l −1) * nu *
( ( l −1) − l * z / 2 + ( z / 2 ) ˆ l ) /
( ( 1 − z / 2 ) ( 1 − ( z / 2 ) ˆ l ) ) ) ] ;
It assumes arbitrary–precision arithmetics.
Please note that using the formula (10) instead of (9) results
in a very similar picture.
Our preferences for application is constructing of a proof
tree with ℓ = 9 levels. We consider another value ℓ = 4 to
compare results.
Note that for fixed ℓ and ν, the first realization of the func-
tion p(z) is a piecewise continuous locally constant (because
of the rounding function inside). The second realization of
p(z) looks like a suitable smooth approximation of it. So, in
what follows we prefer to use this realization. The function
p(z) reaches the global maximum in the interval inside [0, 1]
(closer to 1). See Figure 2 and Figure 3 as examples.
Dependencies of pz=1.25, pz=1, pz=.85, pz=.65 and maxz p
on ν for ℓ = 4 levels are shown in Figure 4. Dependencies of
pz=1.2, pz=1, pz=.95, pz=.9 and maxz p on ν for ℓ = 9 levels
are shown in Figure 5. All functions are monotone increasing.
It is convenient to consider the relative forms, i.e. differ-
ences with the incentive-free case:
∆p|z1 := p|z=z1 − p|z=1, ∆max
z
p := max
z
p− p|z=1.
Dependencies of the differences ∆p|.692, ∆p|.72, ∆p|.99 and
∆maxz p on ν for ℓ = 4 are shown in Figure 6. Dependencies
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply. 
eq.(11),(9)
eq.(13),(9)
0.7 0.8 0.9 1.0 1.1
0.982
0.984
0.986
0.988
0.990
0.992
Fig. 2. Dependencies of p on z for ℓ = 4 and ν = 12
eq.(11),(9)
eq.(13),(9)
0.96 0.98 1.00 1.02
0.280
0.285
0.290
0.295
0.300
Fig. 3. Dependencies of p on z for ℓ = 9 and ν = 12
of the differences ∆p|.9784, ∆p|.9794, ∆p|.99 and ∆maxz p on
ν for ℓ = 9 are shown in Figure 7. These functions come in
three forms: positive, negative, and both. It can be seen in both
figures that the maximum points fall on the same curve with
good accuracy.
One can see that ∆maxz p < .029 for ℓ = 4 and
∆maxz p < .0014 for ℓ = 9. Moreover, for ℓ = 9 to reach
a probability p > .9, we have to assume ν ⪆ 17, and in this
case ∆maxz p < .0005 whence we can conclude that at least
in the second case changes in incentives for different levels
within the range of reaching the maximum practically do not
affect the probability of building a tree.
Dependencies of argmaxz p on ν for ℓ = 4, 5, 6, 9 are
shown in Figure 8. This function is monotone increasing in
both arguments ν and ℓ. For large values of ℓ, it is nearly a
constant in ν, e.g. for ℓ = 9, argmaxz p ≈ .99.
V. CONCLUSION
The results of this paper give us a tool to, in a sense, control
the behavior of provers to provide stable block generation with
sufficiently high throughput in sidechains. We showed that the
optimal incentive policy depends on the model we consider -
+
+
+
+
+
+
+
+ + + + + + +
z=1.25
z=1
z=0.85
z=0.65
+ ma xz
2 4 6 8 10 12 14
0.0
0.2
0.4
0.6
0.8
1.0
Fig. 4. Dependencies of p for different values of z and maxz p on ν
for ℓ = 4
+
+
+
+
+
+
+
+
+
+ + + + + + + + +
z=1.2
z=1
z=0.95
z=0.9
+ ma xz
10 15 20 25
0.0
0.2
0.4
0.6
0.8
1.0
Fig. 5. Dependencies of p for different values of z and maxz p on ν
for ℓ = 9
only one sidechain or a lot of ones with provers’ ability to
switch between them.
For the model from Section III, we give some tools how to
assign incentives for proofs in two cases: when this incentives
may take only fixed values, and in the case when provers may
choose them from some intervals.
For the model from Section IV, we show that here for our
conditions there is no sense to change incentive prices for
different levels of a proof tree.
The next question is how to simulate provers in more
complex, and at the same time, the most practically significant
case of optimal incentivizing for generating multiple numbers
of proof trees.
ACKNOWLEDGMENT
This work was funded by Input Output (iohk.io), Horizen
(horizen.io) and was supported in part by the National Re-
search Foundation of Ukraine under Grant 2020.01/0351.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply. 
+
+
+
+
+
+
+
+
+ + + + + + + + + +
pz⩵0.69 -pz⩵1
pz⩵0.72 -pz⩵1
pz⩵0.88 -pz⩵1
+ ma xz -pz⩵1
5 10 15 20
-0.03
-0.02
-0.01
0.00
0.01
0.02
0.03
Fig. 6. Dependencies of ∆p|.692, ∆p|.72, ∆p|.99 and ∆maxz p on ν
for ℓ = 4
+ +
+
+
+
+
+
+
+
+
+
+
+
+ + + + +
pz⩵0.9784 -pz⩵1
pz⩵0.9794 -pz⩵1
pz⩵0.99 -pz⩵1
+ ma xz -pz⩵1
10 15 20 25
0.0000
0.0005
0.0010
Fig. 7. Dependencies of ∆p|.9784, ∆p|.9794, ∆p|.99, ∆maxz p on ν
for ℓ = 9
+ + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + +
+ + + + + + + + + + + + + + + + + + + + + + +
+
+ + + + + + + + + + + + + + + + + + + + + +
+
+
+
+
+ + + + + + + + + + + + + + + + + + +
+ l=9
+ l=8
+ l=7
+ l=6
+ l=5
+ l=4
5 10 15 20 25
0.85
0.90
0.95
1.00
Fig. 8. Dependencies of argmaxz p on ν for ℓ = 4, 5, 6, 7, 8, 9
REFERENCES
[1] “Rootstock: smart contracts on bitcoin network,” 2018, https://www.rsk.
co.
[2] A. Back, M. Corallo, L. Dashjr, M. Friedenbach, G. Maxwell, A. Miller,
A. Poelstra, J. Timón, and P. Wuille, “Enabling blockchain innovations
with pegged sidechains,” 2014, https://blockstream.com/sidechains.pdf.
[3] A. Garoffolo and R. Viglione, “Sidechains: Decoupled consensus be-
tween chains,” 2018, arXiv:1812.05441.
[4] A. Kiayias and D. Zindros, “Proof-of-work sidechains,” 2018, https:
//ia.cr/2018/1048.
[5] A. Garoffolo, D. Kaidalov, and R. Oliynykov, “Zendoo: a zk-SNARK
verifiable cross-chain transfer protocol enabling decoupled and decen-
tralized sidechains,” 2020, arXiv:2002.01847.
[6] B. David, P. Gaži, A. Kiayias, and A. Russell, “Ouroboros Praos:
An adaptively-secure, semi-synchronous proof-of-stake blockchain,” in
Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 66–98.
[7] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Advances in Cryptology - EUROCRYPT
2015, Part II, ser. - Lecture Notes in Computer Science, vol. 9057.
Springer, Berlin, Heidelberg, 2015, pp. 281–310, https://doi.org/10.1007/
978-3-662-46803-6 10.
[8] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Succinct non-
interactive zero knowledge for a von Neumann architecture,” 2013, https:
//ia.cr/2013/879.
[9] S. Bowe and A. Gabizon, “Making Groth’s zk-SNARK simulation
extractable in the random oracle model,” 2018, https://ia.cr/2018/187.
[10] Y. Bespalov, A. Garoffolo, L. Kovalchuk, H. Nelasa, and
R. Oliynykov, “Probability models of distributed proof generation
for zk-SNARK-based blockchains,” Mathematica, vol. 9, no. 23,
p. 3016, 2021, https://www.mdpi.com/2227-7390/9/23/3016
https://doi.org/10.3390/math9233016.
[11] ——, “Game-theoretic view on decentralized proof generation in zk-
SNARK based sidechains,” in Cybersecurity Providing in Information
and Telecommunication Systems (CPITS 2021), ser. - CEUR Workshop
Proceedings, 2021, vol. 2923, pp. 47–59, http://ceur-ws.org/Vol-2923/.
[12] K. N. Boyadzhiev, “Close encounters with the Stirling numbers of the
second kind,” The Mathematics Magazine, 85, No. 4, (October 2012),
252-266, 2018, arXiv:1806.09468.
[13] P. Flajolet and H. Prodinger, “On stirling numbers for complex argu-
ments and hankel contours,” SIAM J. Discrete Math., vol. 12, no. 2, pp.
155–159, 1999.
[14] R. B. Myerson, Game Theory: Analysis of Conflict. Harvard University
Press, 1997.
[15] N. Ham, “Notions of symmetry for finite strategic-form games,” 2013,
arXiv:1311.4766.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:24:03 UTC from IEEE Xplore.  Restrictions apply.