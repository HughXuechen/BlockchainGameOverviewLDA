Cloud/Edge Computing Resource Allocation and Pricing for Mobile Blockchain: An Iterative Greedy and Search Approach
IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021 451
Cloud/Edge Computing Resource Allocation and
Pricing for Mobile Blockchain: An Iterative
Greedy and Search Approach
Yuqi Fan , Lunfei Wang , Weili Wu , Senior Member, IEEE, and Dingzhu Du
Abstract— Blockchain can provide a dependable environment
for the Internet of Things (IoT), while the high computing power
and energy required by blockchain hinder its applications in
IoT. Offloading the computation at the resource-limited IoT
devices to a cloud/edge computing service provider (CESP) is
a feasible solution to the execution of computation-intensive
blockchain tasks. The CESP provides computing resources to
IoT users with a cloud and multiple edge servers that work
collaboratively such that the users are able to perform mobile
blockchain services. Resource allocation and pricing of computing
resources at the cloud/edges have a significant impact on the
revenues of CESP and users. Most of the existing works on
the cooperative edge–cloud for computation offloading assumes
that a user is mapped to a prespecified edge server or the
cloud. However, the CESP may choose a server from either the
edge servers or the cloud to run the offloaded tasks by jointly
considering the cost and income of the service provisioning.
In this article, we formulate a Stackelberg game with CESP as
the leader and users as the followers for cloud/edge computing
resource management. We prove the existence of Stackelberg
equilibrium and analyze the equilibrium. We then model the
resource allocation and pricing at the CESP as a mixed-integer
programming problem (MIP) with the objective to optimize the
CESP’s revenue and propose an efficient iterative greedy-and-
search-based resource allocation and pricing algorithm (IGS).
The algorithm solves two subproblems comprising the CESP’s
revenue optimization problem: resource allocation under a given
resource price and resource pricing based on a specified resource
allocation scheme. The first subproblem evaluates where to
execute the computing tasks via a greedy-and-search-based
approach, whereas the second subproblem estimates the resource
price through golden section search. We conduct experiments
through simulations. Simulation results show that the proposed
algorithm can effectively improve the revenue of both the CESP
and the IoT terminals.
Index Terms— Cloud computing, edge computing, mobile
blockchain, resource allocation, resource pricing.
I. INTRODUCTION
IN 2008, Nakamoto [1] proposed an electronic transac-
tion system that does not rely on trust between system
Manuscript received March 25, 2020; revised September 9, 2020 and
November 1, 2020; accepted December 20, 2020. Date of publication
January 21, 2021; date of current version April 1, 2021. This work was
supported in part by the National Natural Science Foundation of China under
Grant 61701162 and in part by the National Science Foundation of USA under
Grant 1747818 and Grant 1907472. (Corresponding author: Yuqi Fan.)
Yuqi Fan and Lunfei Wang are with the School of Computer and Information
Engineering, Hefei University of Technology, Hefei 230601, China (e-mail:
yuqi.fan@hfut.edu.cn; cxwlf@mail.hfut.edu.cn).
Weili Wu and Dingzhu Du are with the Department of Computer Science,
The University of Texas at Dallas, Richardson, TX 75082 USA (e-mail:
weiliwu@utdallas.edu; dzdu@utdallas.edu).
Digital Object Identifier 10.1109/TCSS.2021.3049152
participants and for the first time explained the principles
of bitcoin and blockchain technology. Blockchain has the
characteristics of immutability, decentralization, distributed
ledgers, consensus, and so on, which enables blockchain
to overcome the problem of distrust among users in the
decentralized network and ensure the reliability and security
of transactions [2], [3]. Blockchain has a wide range of
applications from cryptocurrencies, financial services, and
the Internet of Things (IoT) to public social services [4].
As of December 2019, the cryptocurrency market capital-
ization statistics website coinmarketcap.com shows that there
were 4914 cryptocurrencies in the world with a total market
value of more than $200 billion, of which bitcoin market
value accounts for about 66.9% [5]. The annual revenue of
blockchain enterprises is expected to increase to approxi-
mately $20 billion in 2025 [6].
Consensus is the core of blockchain, which guarantees the
consistency and correctness of each transaction on all nodes
and enables the blockchain for efficient collaborative work on
a large scale without relying on a centralized organization.
Some consensus algorithms, such as proof of work (PoW),
require a large amount of computation. Users (miners) win
rewards through mining, where the users need to solve a
computationally challenging problem. The first miner who
successfully solves the computation problem and reaches an
agreement with other miners is considered as the winner of
the competition, and the winner will receive a reward for suc-
cessful mining. Since the energy consumption and computing
power required by the computation-intensive consensus are
prohibitively high, blockchain cannot be directly applied to
the resource-limited IoT devices, which hinders the practical
use of blockchain in mobile environments.
Offloading the computing tasks of the IoT devices to a
cloud/edge computing service provider (CESP) is a feasible
solution to computation resource-demanding blockchain in
mobile environments [7]. IoT devices can participate in the
mining by applying solo mining or pooled mining protocols
through mining task offloading [8], [9]. By providing more
computing resources with the CESP, computation offloading
can speed up the calculation process, improve the performance
of applications, and enable blockchain deployment on devices
with limited power supporting hashing and encryption algo-
rithms [10].
The CESP provides computing resources to the users with
cloud and multiple edge servers that work collaboratively such
that the users are able to perform mobile blockchain services,
2329-924X © 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-0270-6261
https://orcid.org/0000-0002-2218-8994
https://orcid.org/0000-0001-8747-6340
452 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021
such as mining and encrypting. The resource allocation and
pricing scheme of computing resources at the cloud/edges has
a significant impact on the revenues of CESP and users.
Most of the existing works on the cooperative edge-cloud
for computation offloading assume that a user is mapped to
a prespecified edge server or the cloud. However, the CESP
may choose a server from either the edge servers or the
cloud to run the offloaded tasks by jointly considering the
cost and income of the service provisioning. In this article,
we study the cloud/edge computing resource allocation and
pricing problem for mobile blockchain under the computing
offloading framework in which a CESP provides both cloud
and multiple edge servers to run users’ offloaded tasks. The
contributions of this article are as follows.
1) We construct a computation offloading framework that
includes the cloud, multiple edge servers, and multiple
users (miners), and the cloud/edge servers are provided
by a CESP. We formulate a Stackelberg game with
CESP as the leader and users as the followers for
cloud/edge computing resource management. We prove
the existence of the Stackelberg equilibrium and analyze
the equilibrium.
2) We model the resource allocation and pricing at the
CESP as a mixed-integer programming problem (MIP)
with the objective to optimize the CESP’s revenue
and propose an efficient iterative greedy-and-search-
based resource allocation and pricing algorithm (IGS).
Algorithm IGS solves two subproblems comprising the
CESP’s revenue optimization problem: resource alloca-
tion under a given resource price and resource pricing
with a specified resource allocation scheme.
3) We conduct experiments through simulations. Simu-
lation results show that the proposed algorithm can
effectively improve the revenues of both the CESP and
the IoT users.
The rest of this article is organized as follows. Section II
introduces the related work. The system model is formulated
and analyzed in Section III. Section IV presents the proposed
resource allocation and pricing algorithm. The simulations are
given in Section V, and Section VI concludes this article.
II. RELATED WORK
Blockchain has the characteristics of security, reliability,
immutability, decentralization, and so on, and blockchain can
provide a reliable environment for IoT devices. For example,
Casado-Vara et al. [11] proposed an architecture based on
blockchain and edge computing to improve the quality of IoT
data and false data detection. Chamarajnagar and Ashok [12]
designed a decentralized architecture using the blockchain
technology, in order to promote distributed collabora-
tion among mobile IoT devices to share their services
and redundant computing resources. In vehicle edge net-
works, Kang et al. [13] proposed a reputation-based data
sharing scheme, which introduces consortium blockchain
and smart contract technology to implement data storage
securely and prevent data sharing without authorization.
Kim and Moon [14] proposed an edge computing architecture
based on the blockchain technology to ensure the availability,
scalability, and integrity of edge computing; blockchain struc-
ture and protocols were modified to support the execution of
complex programs.
IoT devices can offload computation-intensive tasks to edge
servers. For example, Xiong et al. [7] proposed a mobile
blockchain framework that migrates computation-intensive
tasks, e.g., PoW that requires a lot of computing resources,
from IoT devices to the edge nodes with sufficient computing
resources.
Resource allocation and pricing are of vital importance for
the benefits of service providers and users. Some research
applied game theory to the allocation and pricing of the
cloud/edge computing resources. Xiong et al. [15] modeled the
interaction between rational blockchain miners and cloud/fog
providers as a two-stage Stackelberg game and studied the
uniform pricing scheme and discriminatory pricing scheme
of cloud/fog providers. Zhang et al. [16] proposed a joint
optimization framework of fog nodes (FNs), data service
operators (DSOs), and data service subscribers (DSSs), which
implements the resource allocation scheme in a distributed
manner. In this framework, the Stackelberg game is used
to analyze the pricing problem of DSO and the resource
allocation problem of DSS; many-to-many matching is used
to study the matching problem between DSOs and FNs.
Dhamal et al. [17] studied a stochastic game in which players
(miners or computing power providers) can join and leave
during the mining of a block. Chiu and Koeppl, [18] formal-
ized the PoW protocol into a Cournot game, in which users
compete to update the blockchain for rewards and are restricted
from “double spending.”
Some research adopted auction for resource allocation and
pricing of cloud/edge resources. Jiao et al. [19] constructed
an auction-based market model to achieve the allocation of
computing resources; two bidding schemes, a fixed demand
scheme (each miner bids for a fixed amount of resources) and
a multiple demand scheme (miners can submit their preferred
demand and bid), were considered; aiming at the fixed demand
scheme, an optimal social welfare auction mechanism was
proposed. For the multiple demand scheme, an approximate
algorithm was designed with authenticity, individual rational-
ity, and computational efficiency. Jin et al. [20] designed an
incentive-compatible auction mechanism (ICAM) to stimu-
late cloudlets to provide services to nearby mobile devices,
which reduces mobile device access delays and balances the
workload of the cloud by using the resources of cloudlets.
Luong et al. [21] proposed an optimal auction based on deep
learning for the edge resource allocation, which uses miners’
valuations as the training data to adjust the parameters of the
neural networks to minimize the negated revenue of the edge
computing service provider.
Some researchers managed the cloud/edge computing
resources for blockchain via optimization, credit-based
approach, and so on. Liu et al. [22] proposed a blockchain-
based mobile edge computing (MEC) framework with the
adaptive block size for video streaming; the tasks are offloaded
to nearby MEC nodes or device-to-device (D2D) users.
The problem of resource allocation, offload scheduling, and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
FAN et al.: CLOUD/EDGE COMPUTING RESOURCE ALLOCATION AND PRICING FOR MOBILE BLOCKCHAIN 453
adaptive block size was formulated as an optimization prob-
lem, and an alternating direction multiplier algorithm was used
to solve the problem. Liu et al. [8] proposed a framework
combining MEC and blockchain; a joint optimization prob-
lem of mining task offloading and block cryptographic hash
cache was modeled, and an alternating direction multiplier
method was adopted to solve the problem. Wu et al. [23]
tackled the problem of mobile terminals acquiring computing
power from the edge server and proposed an optimization
problem to maximize the total net return of the mobile
terminals while maintaining the fairness between the mobile
terminals. Two algorithms were designed, with one for the
single edge server case and the other for the multiple edge
servers case, to determine the amount of computing power
the mobile terminals could obtain from different edge servers.
Abdellatif and Abdelmouttalib [6] studied the relationship
between the resources provided by edge service providers
and the needs of miners in the blockchain network and
proposed a resource allocation model based on bipartite graph
matching. Pan et al. [24] designed an edge IoT framework
based on blockchain and smart contracts named “EdgeChain”;
the framework connects edge cloud resource pool with the
IoT device accounts and resources usage behavior through an
internal currency system and then uses a credit-based resource
management system to control the amount of resources a
device can obtain from an edge server according to predefined
priorities, application types, and previous behaviors.
Most of the existing works on the cooperative edge-cloud
for computation offloading assume that a user is mapped to
a prespecified edge server or the cloud. However, the CESP
may choose a server from either the edge servers or the
cloud to run the offloaded tasks by jointly considering the
cost and income of the service provisioning. In this article,
we study the cloud/edge computing resource allocation and
pricing problem for mobile blockchain under the computing
offloading framework consisting of a cloud, multiple edge
servers, and multiple users, where the cloud/edge servers are
provided by a CESP.
III. SYSTEM MODEL
Fig. 1 shows the system model. Each mobile terminal user
performs mobile blockchain services, e.g., mining, for rewards.
Due to the limited computing and energy resources, perform-
ing the blockchain services on the mobile terminals is chal-
lenging. A CESP provides computing resources to the users
through the cloud and the edge servers such that the users can
offload computation-intensive mining tasks to the cloud/edge
servers. In general, the cloud is far away from the users,
whereas the edge servers are close to the users. Assume that
the cloud has enough computing capacities to process all the
users’ tasks and each edge server has a limited computing
capacity.
The CESP gains revenue by providing paid resources to the
users. Each unit computing resource provided by the CESP
is denoted as a computing resource block (CRB). The CESP
sets the price p of each CRB, and the users determine the
amount of resources to purchase from the CESP based on the
Fig. 1. System model.
CRB’s price p. With more computing resources, the user is
more likely to perform successful mining and hence potentially
obtains more revenue [8], [25]. When the CRB’s price is
low, the users may be willing to purchase a large amount
of computing resources due to the potential high revenue of
successful mining. The users may be reluctant to buy the
computing resources, if the CRB’s price is high because of
the high purchase cost of computing resources. Therefore,
the CRB’s price has a significant impact on the revenues of
both CESP and users. Resource provisioning to the users also
imposes a cost on the CESP, where the cost includes the energy
consumption of the servers and the data transmission between
the user and the allocated server.
After evaluating the number of CRBs to purchase, the user
sends a resource purchase request to the CESP, who decides
which edge server or the cloud to serve the request under
the constraint of server’s computing capacity. The computing
tasks of a user will be offloaded to a server at either the cloud
or the edge side. After purchasing the required resources, the
user offloads the tasks to the allocated server.
During the interaction between the CESP and the users,
the CESP determines the price based on the users requests
and the users respond to the price by deciding the amount
of computing resources to be purchased. The two events are
sequential. Therefore, the interaction between the CESP and
the users can be formalized as a Stackelberg game with a
single leader and multiple followers, where the leader is the
CESP and the followers are the users.
The symbols and notations used in this article are shown in
Table I.
A. Computing Offloading Game Between CESP and Users
1) Stackelberg Game Between CESP and Users: The Stack-
elberg game between CESP and users consists of two sub-
games: 1) user subgame in which each user decides the amount
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
454 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021
TABLE I
TABLE OF SYMBOLS AND NOTATIONS
of CRBs to purchase from the CESP to maximize the user’s
revenue and 2) CESP subgame in which the CESP decides the
price of computing resources and chooses a server from either
the edge servers or the cloud to run the users’ offloaded tasks.
a) User subgame: If the user purchases a large amount
of computing resources from the CESP, the blockchain task
execution time is reduced, and hence, the user will potentially
obtain a high reward by finishing the blockchain services in a
short time. However, the revenue increase will slow down with
the increase of computing power when the user has obtained
a certain amount of computing resources. At the same time,
the computing resource purchase causes a cost to the user.
The more computing resources purchased, the higher the cost
to the user. We estimate the user revenue by the following
equation:
uuser
i = αi ln(1+ μri )− pri . (1)
The resource requirements of blockchain applications per-
formed by various users are different. Therefore, we assign
different revenue parameters to different users [24].
In user subgame, each user bi needs to maximize his revenue
by determining the amount of CRBs to purchase from the
CESP, that is, user bi is to
max
ri
uuser
i = αi ln(1+ μri )− pri
s.t. ri ≥ 0. (2)
b) CESP subgame: The CESP makes profit by selling
computing resources to the users, and the profit is affected
by the CRB’s price and the number of CRBs sold. Note
that the resource allocation to the user will impose a cost
on the CESP since the CESP needs to run the servers and
transmit data between the user and the allocated server. The
energy consumption used to run a task at a server is affected
by the unit energy consumption of computing resources at
the server and the amount of resources required by the task.
The communication cost is decided by the user-to-server
distance [26]. The computing tasks offloaded by user bi may
be deployed at the cloud or an edge server, and the cost of
accommodating the computing task offloading request from
user bi , costi , is defined as
costi = xi, j (a jri+λ1di, j )+xi,cloud(acloudri+λ2di,cloud) (3)
where xi, j (xi, j ∈ {0, 1}) and xi,cloud (xi,cloud ∈ {0, 1}) represent
whether the tasks of user bi will be offloaded to edge server
e j and the cloud, respectively (=0, yes; =1, no). We say that
user bi is mapped/assigned to edge server e j /cloud, if the tasks
of user bi are run by edge server e j /cloud, and the computing
tasks of user bi are offloaded to one and only one server.
We define the CESP’s revenue as
ucesp =
M∑
i=1
(pri − costi). (4)
The CESP maximizes the revenue by controlling the CRB’s
price, that is, the CESP is to
max
p
ucesp =
M∑
i=1
(pri − costi )
s.t. C1 : p > 0. (5)
2) Analysis of Stackelberg Game Between CESP and Users:
We first show that the Nash equilibrium exists in user subgame
and the optimal amount of CRBs to be purchased by a user
can be calculated at a given computing resource price. We then
prove the existence of equilibrium of the Stackelberg game
between the CESP and the users.
Lemma 1: Nash equilibrium exists in user subgame.
Proof: The user’s revenue function defined in (1) is
continuous, and the second derivative of the user’s revenue
function can be calculated as
∂2uuser
i
∂(ri)
2 = −
μ2αi
(1+ μri )
2 . (6)
Since μ > 0, αi > 0, and ri ≥ 0, we can get
− μ2αi
(1+ μri )
2 < 0. (7)
Therefore, the user’s revenue function defined in (1) is
quasi-concave about request ri . According to the Nash exis-
tence theorem, the Nash equilibrium exists in the user sub-
game. �
Lemma 2: Given the CRB’s price p, the optimal amount of
CRBs to be purchased by user bi is calculated by the following
equation:
r∗i = max
(
αi
p
− 1
μ
, 0
)
. (8)
Proof: It can be seen from (6) and (7) that the second
derivative of the user’s revenue function with respect to ri is
less than 0, that is, the user’s revenue function with respect
to ri is a concave function. The first derivative of the user’s
revenue function is calculated as
∂uuser
i
∂ri
= μαi
1+ μri
− p. (9)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
FAN et al.: CLOUD/EDGE COMPUTING RESOURCE ALLOCATION AND PRICING FOR MOBILE BLOCKCHAIN 455
The extreme point of the user’s revenue function is calcu-
lated via the following equation by making (9) equal to 0, i.e.,
∂uuser
i /∂ri = 0:
r ′i =
αi
p
− 1
μ
. (10)
According to the property of the concave function, the
extreme point of the function is the maximum point of the
function. In (10), r ′i may be less than 0. However, r∗i should
satisfy r∗i ≥ 0. When r ′i ≥ 0, r∗i = r ′i ; when r ′i < 0, r∗i = 0,
since the user’s revenue function decreases while ri > r ′i and
ri ≥ 0. Therefore, r∗i = max(r ′i , 0). The lemma is proved. �
Theorem 1: The Stackelberg equilibrium exists in the
Stackelberg game between the CESP and the users.
Proof: According to Lemma 1, the users can always reach
a Nash equilibrium after the CRB’s price p is set by the CESP.
Next, we analyze the CESP’s revenue function of (4), which
can be rewritten as (11), shown at the bottom of the page,
based on Lemma 2.
The second derivative of CESP’s revenue function can be
calculated as (12), shown at the bottom of the page.
Since xi, j ≥ 0, xi,cloud ≥ 0, a j > 0, acloud > 0, μ > 0,
di, j > 0, di,cloud > 0, λ1 ≥ 0, λ2 ≥ 0, αi > 0, and p > 0,
we can get
∂2ucesp
∂ p2
< 0. (13)
Therefore, there is an optimal price p∗ that maximizes
the CESP’s revenue, and the Stackelberg equilibrium exists.
We denote the Stackelberg equilibrium as (p∗, r∗1 , r∗2 , . . . , r∗m).
�
B. Resource Allocation and Pricing of CESP
The analysis of Stackelberg game between CESP and users
shows that the users can always reach a Nash equilibrium after
the CRB’s price is set by the CESP and the optimal amount of
CRBs to be purchased by a user can be calculated at a given
computing resource price. Therefore, it is important to decide
the resource allocation and pricing of the CESP.
The CESP maximizes the revenue by setting CRB’s price
p and deciding where to run the tasks offloaded by the users.
The CRB’s price affects the amount of computing resources
to be purchased by the users, which in turn has an impact on
the CESP’s revenue. Given CRB’s price p (p > 0) and the
amount of computing resources purchased by the users, the
CESP allocates each resource request to a server either at the
edge server side or at the cloud side, so as to minimize the
resource allocation cost and maximize the CESP’s revenue,
that is, the objective of CESP is to
max
p,xi, j ,xi,cloud
ucesp (14)
where ucesp is defined in the following equation:
s.t. C1
C2 :
M∑
i=1
xi, j max
(
αi
p
− 1
μ
, 0
)
≤ c j ∀e j ∈ E
C3 :
K∑
j=1
(xi, j + xi,cloud) = 1 ∀bi ∈ B
C4 : xi, j ∈ {0, 1}, xi,cloud ∈ {0, 1}.
Constraint C2 signifies that the edge servers cannot be
overloaded when running the tasks offloaded from the users.
Constraint C3 determines that the computing tasks of user
bi are offloaded to one and only one server. Constraint C4
dictates that the mapping relationship between the users and
the cloud/edge servers is represented by binary variables.
IV. RESOURCE ALLOCATION AND PRICING ALGORITHM
The Stackelberg game between CESP and users consists of
two subgames: user subgame and CESP subgame, as shown
in Fig 2. In the user sub-game, the users maximize revenue by
calculating the optimal amount of CRBs to purchase according
to Lemma 2. In the CESP sub-game, the CESP maximizes
revenue by deciding the price of computing resources and
choosing the servers to run the users offloaded tasks. The
problem of maximizing the CESP’s revenue is an MIP since
p > 0, xi, j ∈ {0, 1}, and xi,cloud ∈ {0, 1}.
In this section, we propose an efficient iterative greedy-and-
search-based resource allocation and pricing algorithm (IGS)
to solve the CESP’s revenue optimization problem that consists
of two subproblems: resource allocation under a given resource
ucesp =
M∑
i=1
⎧⎨
⎩
K∑
j=1
xi, j
(
pri − a jri − λ1di, j
)+ xi,cloud
(
pri − acloudri − λ2di,cloud
)
⎫⎬
⎭
=
M∑
i=1
⎧⎨
⎩
K∑
j=1
xi, j
(
max
(
αi
p
− 1
μ
, 0
)(
p − a j
)− λ1di, j
)
+ xi,cloud
(
max
(
αi
p
− 1
μ
, 0
)
(p − acloud)− λ2di,cloud
)⎫⎬
⎭ (11)
∂2ucesp
∂ p2
=
M∑
i=1
⎧⎪⎪⎪⎨
⎪⎪⎪⎩
0,
αi
p
− 1
μ
�0
− αi
p3
⎛
⎝ K∑
j=1
λ1xi, j a j + λ2xi,cloudacloud
⎞
⎠,
αi
p
− 1
μ
> 0
⎫⎪⎪⎪⎬
⎪⎪⎪⎭
(12)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
456 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021
Fig. 2. Diagram of Stackelberg game between CESP and users.
price and resource pricing with a specified resource allocation
scheme. Algorithm IGS initializes the resource price with a
high value. Algorithm IGS then solves the first subproblem
of resource allocation by evaluating where to execute the
computing tasks based on a specific resource price via a
greedy-and-search based approach while tackling the second
subproblem of resource pricing by estimating the resource
price based on a specified resource allocation scheme via
golden section search.
A. Resource Allocation
Resource allocation chooses a server from either the edge
servers or the cloud to run the computing tasks based on a
resource price. Given CRB’s price p (p > 0), the CESP’s rev-
enue maximization problem turns into an integer programming
problem. We propose a resource allocation algorithm based
on a greedy-and-search approach, as shown in Algorithm 1.
The algorithm is divided into two stages. The first stage
(lines 1–12) greedily finds the server for each task offloading
request, and the second stage (lines 13–32) conducts resource
reallocation to search for better resource allocation solutions.
1) Greedy Resource Allocation: We create a computing
resource request list lreq =
{
r∗1 , r∗2 , . . . , r∗i , . . . , r∗M
}
, where
each r∗i (1 ≤ i ≤ M), calculated via (8), is the optimal
amount of CRBs purchased by user bi under a given CRB’s
price. We then construct a value matrix Gv with M rows (M
users) and N = K+1 columns (K edge servers and a cloud)
as shown in (15). Each element vi j ∈ Gv , calculated by (16),
represents the revenue of serving user bi at the cloud if j = N ;
otherwise, vi j indicates the revenue of edge server e j running
the tasks of user bi . Algorithm 1 is to choose an element from
each row of matrix Gv to maximize the sum of the elements
under constraint C3
Gv =
⎛
⎜⎝
v11 . . . v1K v1N
...
. . .
...
...
vM1 · · · vM K vM N
⎞
⎟⎠ (15)
vi j = pr∗i − costi . (16)
We construct another auxiliary matrix Gw based on matrix
Gv , as shown in (17), where element wi j = vi j/r∗i , indicating
Algorithm 1 Greedy-and-Search Based Resource Allocation
Input: User set B , Edge server set E ,
Set C = {c1, c2, · · · , c j , · · · , cK }, CRB’s price p.
Output: Resource allocation scheme x,
CESP’s revenue of ucesp.
1: Create computing resource request list lreq , where each
request in the list is calculated via Eq. (8);
2: Construct two auxiliary matrices of Gv and Gw as Eqs. (15)
and (17);
3: B ′ ← B, C ′ ← C + {
c′cloud
}
, ucesp ← 0;
4: while B ′ 	= ∅ do
5: Select user b′i and server e j with wi j being the largest
element wi j in matrix Gw;
6: if c j ≥ r∗i then
7: xi j ← 1, c j ← c j − r∗i , B ′ ← B ′ − {b′i};
8: ucesp ← ucesp + vi j , and wi j ′ = T (∀1≤ j ′ ≤ N);
9: else
10: set wi j ← T ;
11: end if
12: end while
13: B ← B;
14: while B ′ 	= ∅ do
15: Select the first user b′i from B ′, f lag← 0;
16: for each b′i ′ ∈ B do
17: if π1
(
i, τi , i ′, τi ′
)
> 0 and c′τi
+ r∗i ≥ r∗i ′ and c′τi′ + r∗i ′ ≥
r∗i then
18: xiτi ← xiτi′ ← 1, xi ′τi′ ← xi ′τi ← 1,
19: c′τi
← c′τi
+ r∗i − r∗i ′ , c′τi′ ← c′τi′ + r∗i ′ − r∗i ;
20: ucesp ← ucesp + π1(i, τi , j, τi ′), f lag← 1;
21: end if
22: end for
23: for each eq ∈ E do
24: if π2(i, τi , q) > 0 and c′q ≥ r∗i then
25: xiτi ← xiq ← 1, c′τi
← c′τi
+ r∗i ;
26: c′q ← c′q−r∗i , ucesp ← ucesp+π2(i, τi , q), f lag← 1;
27: end if
28: end for
29: if f lag = 0 then
30: B ′ ← B ′ − {b′i};
31: end if
32: end while
33: return x, ucesp.
the cost-effectiveness of serving user bi at edge server e j /cloud
Gw =
⎛
⎜⎝
w11 . . . v1K w1N
...
. . .
...
...
wM1 · · · vM K wM N
⎞
⎟⎠. (17)
We define the unserved user set B ′ = {
b′1, b′2, . . . , b′i , · · ·
}
(|B ′| ≤ K ), in which each element is the user to be allocated
the computing resources. We also define server’s computing
capacity set C ′ =
{
c′1, c′2, . . . , c′j , . . . , c′K , c′cloud
}
(|C ′| =
N), with each element c′j indicating the available computing
capacity of edge server e j (1 ≤ j ≤ K ) or cloud ( j = N).
Since the computing resources of the cloud are sufficient,
we set c′cloud as a large value.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
FAN et al.: CLOUD/EDGE COMPUTING RESOURCE ALLOCATION AND PRICING FOR MOBILE BLOCKCHAIN 457
Algorithm 1 proceeds iteratively. In each iteration, the
algorithm selects the largest element wi j from matrix Gw
with greedy strategy, that is, the algorithm selects the most
cost-effective user-server mapping. If the available computing
capacity of server e j can satisfy the resource request from user
bi , the tasks of bi are executed by server e j and all elements
in the i th row in matrix Gw are set as a small value T , where
T < wmin and wmin is the smallest element in matrix Gw;
otherwise, element wi j is set as T . The process continues until
all the users are mapped to the servers.
2) Resource Reallocation: Once each user is mapped to
a server, the CESP’s revenue may be increased by exchang-
ing the mapping relationship of two user-server assignments.
Assume that users bi and bi ′ (i 	= i ′) are currently mapped
to servers eτi and eτi′ (τi 	= τi ′), respectively. The exchange
reassigns bi and bi ′ to servers eτi′ and eτi , respectively.
We define π1
(
i, τi , i ′, τi ′
)
, the benefit of exchange, as (18),
where π1
(
i, τi , i ′, τi ′
)
> 0 indicates that the CESP’s revenue
can be increased through the exchange
π1
(
i, τi , i ′, τi ′
) = (
viτi′ + vi ′τi
)− (
viτi + vi ′τi′
)
. (18)
Assigning the user to another server may also increase
the CESP’s revenue. We evaluate π2(i, τi , q), the benefit of
reassignment, via (19). We can improve the CESP’s revenue
by performing the reassignment, if π2(i, τi , q) > 0
π2(i, τi , q) = viq − viτi . (19)
Algorithm 1 conducts resource reallocation by exchange and
reassignment. The algorithm proceeds iteratively. Specifically,
for each user, the algorithm finds another user such that the
CESP’s revenue can be increased by exchanging the mapping
relationship of the two users (lines 16–22). For each user, the
algorithm also searches for another server to evaluate whether
reassigning the user to the server can increase the CESP’s
revenue (lines 23–28). The process continues until exchange
and reassignment are executed for all the users.
B. Resource Pricing
Resource pricing decides the resource price based on a
specified resource allocation scheme. After obtaining the com-
puting resource allocation scheme x by Algorithm 1 under a
given CRB’s price, we search for another CRB’s price p to
optimize the CESP’s revenue with resource allocation scheme
x. Since p > 0, we make p ≥ ε during the resource pricing,
where ε is a small value close to 0.
The CESP’s revenue is related to the CRB’s price and the
amount of computing resources sold. A high price will make
the users reluctant to purchase the computing resources, and no
user will purchase any computing resources if CRB’s price p is
higher than a value pmax, that is, the total amount of computing
resources purchased by all users will be 0 if p ≥ pmax.
Theorem 2: When CRB’s price p ≥ max{μαi |∀bi ∈ B},
the total amount of computing resources purchased by all the
users is 0, that is, pmax = max{μαi |∀bi ∈ B}.
Proof: According to Lemma 2, when αi/p−1/μ � 0, i.e.,
p ≥ μαi , the amount of computing resources purchased by
user bi is 0. If max(αi/p − 1/μ) � 0 for each user bi ∈ B , i.e.,
p ≥ max{μαi |∀bi ∈ B}), no user will purchase the computing
resources. Therefore, pmax = max{μαi |∀bi ∈ B}. �
Since xi, j (∀bi ∈ B , 1 ≤ j ≤ K ) and xi,cloud (∀bi ∈ B)
are known in a given resource allocation scheme x, the
optimization problem in Section III-B can be simplified with
(20) as the objective function under constraint C2′
max
p
ucesp =
M∑
i=1
(
αi
p
− 1
μ
)(
p − aτi − λ′μdi,τi
)
s.t. C2′ : ε ≤ p ≤ pmax (20)
where τi denotes the server providing computing services
to user bi . λ′ = λ1 if τi is an edge server; λ′ = λ2 if
τi is the cloud. The revenue function in (20) is a continu-
ous concave function about price p under a given resource
allocation scheme x. We apply golden section search [27]
to find the optimal price p. The resource pricing process is
illustrated in Algorithm 2. The algorithm searches for the
optimal price by iteratively narrowing the search range of
values. Initially, the search range [left, right] is set as [ε, pmax].
In each iteration, the algorithm updates the search range with
the golden ratio. Specifically, the algorithm calculates two
points in the range [left, right] as left+ 0.382 ∗ (right− left)
and left+0.618∗ (right− left). The algorithm decides whether
the optimal price falls into [left, left+0.618∗ (right− left)] or
[left+ 0.382 ∗ (right− left), right] by comparing the revenues
at the two prices of left and right via Algorithm 1. The search
range narrowing process continues until the interval of the
search range is smaller than a predefined threshold δ. The
algorithm outputs the middle value of the final search range
as the price.
Algorithm 2 Golden Section Search-Based Resource Pricing
Input: Resource allocation scheme x.
Output: CRB’s price p.
1: le f t ← ε, right ← pmax, le f t ′ ← ε, right ′ ← pmax ;
2: while right − le f t � δ do
3: p← le f t ′, (val1, x)← Algori thm 1(p);
4: p← right ′, (val2, x)← Algori thm 1(p);
5: if val1 > val2 then
6: right ← right ′;
7: else
8: le f t ← le f t ′;
9: end if
10: le f t ′ ← le f t + 0.382 ∗ (right − le f t);
11: right ′ ← le f t + 0.618 ∗ (right − le f t);
12: end while
13: p← (right + le f t)/2;
14: return p.
C. Iterative Greedy-and-Search-Based Resource Allocation
and Pricing
The proposed iterative greedy-and-search-based resource
allocation and pricing algorithm is shown in Algorithm 3 by
iteratively solving the subproblems of resource allocation and
resource pricing. The algorithm initializes the resource price as
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
458 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021
Algorithm 3 IGS
Input: The user set B , Edge server set E ,
Maximum number of iterations 	,
Edge servers’ computing capacity set C .
Output: New feasible solution x,
Price p,
The revenue of CESP ucesp.
1: ucesp ← 0, p← pmax , valmax ← 0, i teration← 1;
2: while i teration � 	 do
3:
(
val, x′
)← Algori thm 1(p);
4: if val > ucesp then
5: ucesp ← val, x ← x ′;
6: end if
7: p′ ← Algori thm 2
(
x′
)
;
8: if |p − p′| � 
 then
9: break;
10: end if
11: p← p′;
12: end while
13: return x, p, value.
pmax and the CESP’s revenue as 0. After the initialization, the
algorithm starts an iterative resource allocation and resource
pricing process. During each iteration, the algorithm decides
the resource allocation scheme x ′ and the corresponding
CESP’s revenue val through Algorithm 1. If the CESP’s
revenue is increased with resource allocation scheme x ′, the
algorithm updates x ′ and val as the current best resource
allocation scheme and the current highest CESP’s revenue,
respectively. The algorithm then evaluates the optimal resource
price with the obtained allocation scheme x ′ via Algorithm 2.
The iterative process continues until the change of resource
price is within a predetermined threshold 
 or the predefined
maximum number of iterations is reached. After the Stackel-
berg game between users and CESP reaches the equilibrium,
the users obtain the optimal amount of CRBs to purchase via
(8) according to Lemma 2.
V. PERFORMANCE EVALUATION
In this section, we investigate the impact of important
parameters on the proposed algorithm IGS. We also evaluate
the performance of algorithm IGS against the benchmarks.
A. Simulation Setup
The mobile terminal users and the edges servers are ran-
domly distributed in the region with 1.2 km radius. The
revenue parameter αi of all the mobile terminal users is the
same. The minimum resource price ε is 0.001. Parameters of δ
and 
 are set as 0.001 and 0.01, respectively. Other simulation
parameters are shown in Table. II.
B. Impact of Different Parameters on the Proposed Algorithm
We investigate the impact of important parameters on the
proposed algorithm.
TABLE II
TABLE OF SIMULATION PARAMETERS
Fig. 3. Revenues of CESP and users versus different parameters α.
1) Impact of Different Parameters on the Revenue of CESP
and Users: Fig. 3 shows that the revenues of both the
CESP and the users increase with the increase of revenue
parameter α when the computing power of each CRB is
1 (μ = 1) and the number of users is 160 (M = 160). The
unit computing resource leads to more revenue with a higher
revenue parameter α than that with a lower one. Therefore,
with the increase in revenue parameter α, the users are willing
to purchase more computing resources to perform mobile
blockchain services to make more revenues. At the same time,
the CESP increases the revenue by providing more computer
resources and appropriately increasing computing resource
price p.
Fig. 4 shows that the revenues of both the CESP and
the users increase as parameter μ increases when α = 15
and M = 160. μ represents the computing power of each
CRB. As parameter μ increases, the users can obtain more
computing power with the same amount of CRBs purchased
such that the users get more returns. The CESP increases the
revenue performance by adapting CRB’s price p to the amount
of CRBs required by the users.
2) Impact of Different Parameters on the Total Number of
CRBs Purchased by the Users: Fig. 5 shows the impact of
revenue parameter α on the total number of CRBs purchased
by all the users with a different number of users, assuming
μ = 1. The total number of CRBs purchased by the users
increases with the increase of α. The higher parameter α, the
more revenues the users can obtain by executing each unit
computing resource for mobile blockchain services. Therefore,
the users are inclined to purchase more CRBs with a higher
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
FAN et al.: CLOUD/EDGE COMPUTING RESOURCE ALLOCATION AND PRICING FOR MOBILE BLOCKCHAIN 459
Fig. 4. Revenues of CESP and users with different parameters μ.
Fig. 5. Total number of CRBs sold versus different parameters α.
α than with a lower α. The amount of computing resources
increases with more users since more users will buy more
computing resources to run the blockchain tasks.
Fig. 6 shows the impact of parameter μ on the total number
of CRBs purchased by all the users with different α values,
assuming that the number of users is 160. The total number
of CRBs purchased by the users increases with the increasing
μ when μ is small and then decreases with the increasing
μ when μ is big. A higher μ indicates that each CRB is
more powerful and can reward the users more than a lower μ.
Therefore, users are willing to buy a large number of CRBs
when μ is low. After obtaining sufficient computing power
to serve the users’ offloading requests, the users will not buy
more CRBs. Therefore, with higher μ, the users only need to
buy a smaller number of CRBs.
3) Impact of Different Parameters on the Resource Utiliza-
tion of Edge Servers: Fig. 7 shows the edge server resource
utilization performance versus different total number of CRBs
available at the edge servers, assuming M = 160, α = 15, and
μ = 1. The edge servers’ resource utilization ratio is always
above 95% when the total capacity of all the edge servers is
within 225 CRBs. In this case, the transmission cost between
the users and the edge servers is low since the edge servers are
close to the users. The CESP will potentially prefer to provide
the computing resources of the edge servers. All the computing
resource demands can be satisfied by the edge servers when the
total capacity of all the edge servers is larger than 225 CRBs,
Fig. 6. Total number of CRBs sold with different parameters μ.
Fig. 7. Resource utilization of edge servers versus different total numbers
of CRBs available at the edge servers.
that is, the total number of CRBs served by the edge servers
keeps stable. Therefore, the edge servers’ resource utilization
ratio decreases as the total number of CRBs available at the
edge servers increases when the total capacity of all the edge
servers is larger than 225.
Fig. 8 shows the performance of the total number of CRBs
served by the edge servers by varying the unit energy con-
sumption of computing resources at the edge servers, assuming
that M = 160, α = 15, μ = 1, and the total number of CRBs
available at the edge servers is 75. When the unit energy
consumption of computing resources at the edge servers is
lower than 4.5, the edge servers have high resource utilization.
A high unit energy consumption of computing resources at
the edge servers makes the cost of serving users by the edge
servers exceed the cost of using the cloud to serve the users.
Fig. 8 shows the number of CRBs served by the edge servers
decreases rapidly to 0 when the unit energy consumption of
computing resources at the edge servers is higher than 4.5.
4) Impact of Different Parameters on the Income and Cost
of CESP: Fig. 9 shows the income and cost of CESP versus
different parameters α when μ = 1. With the increase of
parameter α, the CESP’s cost increases. With a high α, the
users will buy a large amount of computing resources such
that the CESP needs to spend more cost on the resource
provisioning. At the same time, the CESP obtains more income
with the increase in the number of CRBs sold.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
460 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021
Fig. 8. Total number of CRBs served by the edge servers with various unit
energy consumption of computing resources at the edge servers.
Fig. 9. Income and cost of CESP versus different parameters α.
Fig. 10 shows that the income and cost of CESP with
various unit energy consumption of computing resources at
the edge servers. As the unit energy consumption of com-
puting resources at the edge servers increases, the cost of
providing services grows. When the unit energy consumption
of computing resources at the edge servers is large, some of
the users will be served by the cloud. In this case, the CESP
can lower the resource price p to increase the amount of
CRBs purchased by the other users who will be served by
the edge servers to increase the utilization of the edge servers.
Therefore, the CESP’s income increases although the service
provisioning cost also increases. The income and the cost will
tend to stabilize as the unit energy consumption of computing
resources at the edge servers increases to a certain value since
it is so large that all the users will be served by the cloud.
C. Iterative Procedure of Algorithm IGS
We discuss the iterative procedure of algorithm IGS and
how the algorithm reaches the Nash equilibrium.
Fig. 11 shows the iterative process of algorithm IGS,
assuming that M = 160, α = 15, and μ = 1. The algorithm
first starts from a high resource price p, which makes all
users unwilling to purchase the computing resources. The
algorithm then dynamically adjusts the computing resource
price p. Users dynamically adjust the amount of computing
resources to purchase according to the resource price p. When
Fig. 10. Income and cost of CESP with different unit energy consumption
of computing resources at the edge servers.
Fig. 11. Iterative procedure of algorithm IGS.
the number of iterations is above 6, the resource price p keeps
stable at about 6.6, and the total number of CRBs purchased
by users stabilizes at about 200, that is, the Stackelberg game
between users and CESP reaches the equilibrium, and the
game between users reaches the Nash equilibrium.
D. Performance of the Proposed Algorithm Against
Benchmarks
We evaluate the performance of the proposed algorithm IGS
against benchmarks in two scenarios: a small-scale problem
and a big-scale problem. In the first scenario, the benchmarks
are the optimal solution OPT and the resource allocation
algorithm proposed in [16] which is the most similar state
of the art and denoted as Baseline in this article. The optimal
solution OPT to the resource allocation and pricing problem
defined in Section III-B is obtained via CPLEX 12.8.0 [28].
Baseline applies many-to-many matching to solve the resource
allocation problem. Baseline obtains the resource price via the
equilibrium analysis of a modeled game that is not applicable
in this article. Therefore, we use the proposed resource pricing
method in this article to decide the resource price for Baseline.
In the second scenario, we only compare algorithm IGS with
Baseline since we cannot obtain the optimal solution when the
problem has a big scale. We use the physical distance between
the user and the allocated server as an approximation of the
latency [26], [29].
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
FAN et al.: CLOUD/EDGE COMPUTING RESOURCE ALLOCATION AND PRICING FOR MOBILE BLOCKCHAIN 461
Fig. 12. Revenue of CESP with a small-scale problem. (a) Different parameters α. (b) Different average unit energy consumption of computing resources
at the edge servers. (c) Different parameters μ.
Fig. 13. Average delay between users and servers with a large-scale problem.
(a) Different number of users. (b) Different number of edge servers.
1) Small-Scale Problem: Fig. 12 shows the CESP’s revenue
performance of algorithms IGS, Baseline, and OPT versus
different parameters with a small-scale problem, assuming that
M = 20 and μ = 1. In general, IGS performs better than
Baseline and close to OPT. Fig. 12(a) shows that the CESP’s
revenues of all the three algorithms increase with the increase
of revenue parameter α. Algorithm IGS outperforms algorithm
Baseline by up to 15.3%. Fig. 12(b) shows that the CESP’s
revenues of the three algorithms decrease with the increase of
Fig. 14. Revenue of CESP with a large-scale problem. (a) Different number
of users. (b) Different number of edge servers.
average unit energy consumption of computing resources at the
edge servers. Algorithm IGS achieves very close performance
to OPT and increasingly better performance than Baseline.
In particular, algorithm IGS is better than algorithm Baseline
up to 83.9%. Fig. 12(c) shows that the CESP’s revenues of the
three algorithms increase with the increase of parameter μ.
Algorithm IGS outperforms Baseline from 0.4% to 8.4%.
2) Big-Scale Problem: Fig. 13(a) shows the average com-
munication delay between users and servers obtained by
algorithms IGS and Baseline by varying the number of users,
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
462 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 8, NO. 2, APRIL 2021
assuming that α = 15 and μ = 1. The average communication
delay obtained by algorithm IGS is significantly lower than
that obtained by Baseline. Fig. 13(b) shows the average
communication delay between users and servers obtained by
algorithms IGS and Baseline with a different number of edge
servers, assuming that M = 160, α = 15, and μ = 1. The
average communication delay obtained by the two algorithms
decreases with the increasing number of edge servers. With
more edge servers, the users’ tasks are more likely be deployed
on edge servers. The average communication latency obtained
by algorithm IGS is better than that obtained by Baseline by
29.3%–46.7%.
Fig. 14(a) shows the CESP’s revenue performance of algo-
rithms IGS and Baseline by varying the number of users with
a large-scale problem, assuming that α = 15 and μ = 1.
The CESP’s revenues of the two algorithms increase with
the increase of the number of users since more users will
generate more computing resource requests and the CESP can
have more income. The improvement of algorithm IGS over
Baseline is up to 77.1%. Fig. 14(b) shows the CESP’s revenue
of algorithms IGS and Baseline with a different number of
edge servers, assuming that M = 160, α = 15, and μ = 1.
The CESP’s revenues of the two algorithms increase with the
increasing number of edge servers. With more edge servers,
both of the two algorithms have more options to deploy
the users’ tasks. The results of algorithm IGS are always
better than those of Baseline. In particular, algorithm IGS
outperforms Baseline by 4.0%–14.7%.
VI. CONCLUSION AND FUTURE WORK
The introduction of cloud/edge computing paradigm makes
mobile blockchain possible, where the cloud/edge servers
execute the services offloaded by the IoT users. The CESP
provides computing resources to IoT users with a cloud and
multiple edge servers that work collaboratively. It is critical
for the CESP to decide the resource price and which server
to run the offloaded tasks to maximize the revenue. In this
article, we formulated a Stackelberg game with CESP as
the leader and users as followers for cloud/edge computing
resource management. We proved the existence of Stackelberg
equilibrium and analyzed the equilibrium. We then modeled
the resource allocation and pricing at the CESP as an MIP
with the objective to optimize the CESP’s revenue and pro-
posed an efficient iterative greedy-and-search-based resource
allocation and pricing algorithm (IGS). The algorithm solves
two subproblems comprising the CESP’s revenue optimization
problem: resource allocation under a given resource price to
decide where to run the offloaded tasks and resource pricing
based on a specified resource allocation scheme. Algorithm
IGS uses a greedy-and-search-based approach to solve the
first subproblem and adopts golden section search to tackle
the second subproblem. Simulation results showed that the
proposed algorithm could effectively increase the revenues of
both the CESP and the users, the revenues of both the CESP
and the users increase with the increase of revenue parameter
αi of users and the computing power of the servers, and the
proposed algorithm could also effectively reduce the delay.
In this article, we studied the problem of resource manage-
ment for mobile blockchain when the computation is offloaded
to a server from either the edge servers or the cloud. Note that
an edge server can also offload the computation to the other
edge servers or the cloud or both when the edge server is
overloaded. We will study the resource management problem
under the new computation offloading model in the future.
REFERENCES
[1] S. Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System.
Accessed: Jan. 9, 2021. [Online]. Available: http://bitcoin.org/bitcoin.pdf
[2] M. Swan, Blockchain: Blueprint For a New Economy. Newton, MA,
USA: O’Reilly Media, 2015.
[3] W. Wang et al., “A survey on consensus mechanisms and mining man-
agement in blockchain networks,” 2018, pp. 1–33, arXiv:1805.02707.
[Online]. Available: https://arxiv.org/pdf/1805.02707
[4] R. Arenas and P. Fernandez, “CredenceLedger: A permissioned
blockchain for verifiable academic credentials,” in Proc. IEEE Int. Conf.
Eng., Technol. Innov. (ICE/ITMC), Jun. 2018, pp. 1–6.
[5] Coinmarketcap. Accessed: Dec. 30, 2019. [Online]. Available:
https://coinmarketcap.com
[6] K. Abdellatif and C. Abdelmouttalib, “Graph-based computing resource
allocation for mobile blockchain,” in Proc. 6th Int. Conf. Wireless Netw.
Mobile Commun. (WINCOM), Oct. 2018, pp. 1–4.
[7] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When mobile
blockchain meets edge computing,” IEEE Commun. Mag., vol. 56, no. 8,
pp. 33–39, Aug. 2018.
[8] M. Liu, F. R. Yu, and Y. E. A. Teng, “Computation offloading and
content caching in wireless blockchain networks with mobile edge com-
puting,” IEEE Trans. Veh. Technol., vol. 67, no. 11, pp. 11008–11021,
Nov. 2018.
[9] R. Recabarren and B. Carbunar, “Hardening stratum, the bitcoin pool
mining protocol,” Proc. Privacy Enhancing Technol., vol. 2017, no. 3,
pp. 57–74, Jul. 2017.
[10] R. Yang, F. R. Yu, P. Si, Z. Yang, and Y. Zhang, “Integrated blockchain
and edge computing systems: A survey, some research issues and chal-
lenges,” IEEE Commun. Surveys Tuts., vol. 21, no. 2, pp. 1508–1532,
2nd Quart., 2019.
[11] R. Casado-Vara, F. de la Prieta, J. Prieto, and J. M. Corchado,
“Blockchain framework for IoT data quality via edge computing,” in
Proc. 1st Workshop Blockchain-Enabled Netw. Sensor Syst., Nov. 2018,
pp. 19–24.
[12] R. Chamarajnagar and A. Ashok, “Opportunistic mobile IoT with
blockchain based collaboration,” in Proc. IEEE Global Commun. Conf.
(GLOBECOM), Dec. 2018, pp. 1–6.
[13] J. Kang et al., “Blockchain for secure and efficient data sharing in
vehicular edge computing and networks,” IEEE Internet Things J., vol. 6,
no. 3, pp. 4660–4670, Jun. 2019.
[14] J.-Y. Kim and S.-M. Moon, “Blockchain-based edge computing for deep
neural network applications,” in Proc. Workshop Intell. Embedded Syst.
Architectures Appl., Oct. 2018, pp. 53–55.
[15] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/Fog computing resource management and pricing for blockchain
networks,” IEEE Internet Things J., vol. 6, no. 3, pp. 4585–4600,
Jun. 2019.
[16] H. Zhang, Y. Xiao, S. Bu, D. Niyato, F. R. Yu, and Z. Han, “Computing
resource allocation in three-tier IoT fog networks: A joint optimization
approach combining stackelberg game and matching,” IEEE Internet
Things J., vol. 4, no. 5, pp. 1204–1215, Oct. 2017.
[17] S. Dhamal, W. Ben-Ameur, T. Chahed, E. Altman, A. Sunny, and
S. Poojary, “A stochastic game framework for analyzing com-
putational investment strategies in distributed computing,” 2018,
arXiv:1809.03143. [Online]. Available: http://arxiv.org/abs/1809.03143
[18] J. Chiu and T. Koeppl, “Incentive compatibility on the blockchain,” in
Social Design. Cham, Switzerland: Springer, 2019, pp. 323–335.
[19] Y. Jiao, P. Wang, D. Niyato, and K. Suankaewmanee, “Auction
mechanisms in Cloud/Fog computing resource allocation for public
blockchain networks,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 9,
pp. 1975–1989, Sep. 2019.
[20] A.-L. Jin, W. Song, and W. Zhuang, “Auction-based resource allocation
for sharing cloudlets in mobile cloud computing,” IEEE Trans. Emerg.
Topics Comput., vol. 6, no. 1, pp. 45–57, Jan. 2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
FAN et al.: CLOUD/EDGE COMPUTING RESOURCE ALLOCATION AND PRICING FOR MOBILE BLOCKCHAIN 463
[21] N. C. Luong, Z. Xiong, P. Wang, and D. Niyato, “Optimal auction for
edge computing resource management in mobile blockchain networks:
A deep learning approach,” in Proc. IEEE Int. Conf. Commun. (ICC),
May 2018, pp. 1–6.
[22] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Distributed
resource allocation in blockchain-based video streaming systems with
mobile edge computing,” IEEE Trans. Wireless Commun., vol. 18, no. 1,
pp. 695–708, Jan. 2019.
[23] Y. Wu et al., “Optimal computational power allocation in multi-access
mobile edge computing for blockchain,” Sensors, vol. 18, no. 10,
p. 3472, Oct. 2018.
[24] J. Pan, J. Wang, A. Hester, I. Alqerm, Y. Liu, and Y. Zhao, “EdgeChain:
An edge-IoT framework and prototype based on blockchain and smart
contracts,” IEEE Internet Things J., vol. 6, no. 3, pp. 4719–4732,
Jun. 2019.
[25] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trading
in blockchain-based industrial Internet of Things,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[26] H. Zhang, Y. Xiao, S. Bu, D. Niyato, R. Yu, and Z. Han, “Fog computing
in multi-tier data center networks: A hierarchical game approach,” in
Proc. IEEE Int. Conf. Commun. (ICC), May 2016, pp. 1–6.
[27] L. Kiefer, “Sequential minimax search for a maximum,” Proc. Amer.
Math. Soc., vol. 4, no. 3, pp. 502–506, Jun. 1953.
[28] CPLEX Optimizer. Accessed: Feb. 28, 2020. [Online]. Available:
http://https://www.ibm.com/analytics/cplex-optimizer
[29] B. Heller, R. Sherwood, and N. McKeown, “The controller place-
ment problem,” in Proc. 1st Workshop Hot Topics Softw. Defined
Netw. (HotSDN), Helsinki, Finland, 2012, pp. 7–12.
Yuqi Fan received the B.S. and M.S. degrees in
computer science and engineering from the Hefei
University of Technology, Hefei, China, in 1999
and 2003, respectively, and the Ph.D. degree in
computer science and engineering from Wright State
University, Dayton, OH, USA, in 2009.
He is currently an Associate Professor with the
School of Computer and Information Engineering,
Hefei University of Technology, Hefei, China. His
research interests include blockchain, cloud comput-
ing, social networks, computer networks, software-
defined networks (SDNs), and the Internet of Things (IoT).
Lunfei Wang received the B.S. degree in infor-
mation security from Qingdao University, Qingdao,
China, in 2018. He is currently pursuing the master’s
degree in computer science with the School of Com-
puter and Information Engineering, Hefei University
of Technology, Hefei, China.
His research interests include blockchain, cloud
computing, and software-defined networks.
Weili Wu (Senior Member, IEEE) received the M.S.
and Ph.D. degrees in computer science and engineer-
ing from the University of Minnesota, Minneapolis,
MN, USA, in 1992 and 2002, respectively.
She is currently a Professor with the Department
of Computer Science, The University of Texas at
Dallas, Richardson, TX, USA. Her research interests
include blockchain, social networks, cloud comput-
ing, data science, and machine learning.
Dingzhu Du received the M.S. degree in operations
research from the Chinese Academy of Sciences,
Beijing, China, in 1982, and the Ph.D. degree in
mathematics from the University of California at
Santa Barbara, Santa Barbara, CA, USA, in 1985.
He is currently a Professor with the Department
of Computer Science, The University of Texas at
Dallas, Richardson, TX, USA. His research interests
include blockchain, social networks, cloud comput-
ing, data science, and machine learning.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:17:55 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Black & White)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Tags
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 524288
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo true
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments true
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /AdobeArabic-Bold
    /AdobeArabic-BoldItalic
    /AdobeArabic-Italic
    /AdobeArabic-Regular
    /AdobeHebrew-Bold
    /AdobeHebrew-BoldItalic
    /AdobeHebrew-Italic
    /AdobeHebrew-Regular
    /AdobeHeitiStd-Regular
    /AdobeMingStd-Light
    /AdobeMyungjoStd-Medium
    /AdobePiStd
    /AdobeSansMM
    /AdobeSerifMM
    /AdobeSongStd-Light
    /AdobeThai-Bold
    /AdobeThai-BoldItalic
    /AdobeThai-Italic
    /AdobeThai-Regular
    /ArborText
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /BellGothicStd-Black
    /BellGothicStd-Bold
    /BellGothicStd-Light
    /ComicSansMS
    /ComicSansMS-Bold
    /Courier
    /Courier-Bold
    /Courier-BoldOblique
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /Courier-Oblique
    /CourierStd
    /CourierStd-Bold
    /CourierStd-BoldOblique
    /CourierStd-Oblique
    /EstrangeloEdessa
    /EuroSig
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Helvetica
    /Helvetica-Bold
    /Helvetica-BoldOblique
    /Helvetica-Oblique
    /Impact
    /KozGoPr6N-Medium
    /KozGoProVI-Medium
    /KozMinPr6N-Regular
    /KozMinProVI-Regular
    /Latha
    /LetterGothicStd
    /LetterGothicStd-Bold
    /LetterGothicStd-BoldSlanted
    /LetterGothicStd-Slanted
    /LucidaConsole
    /LucidaSans-Typewriter
    /LucidaSans-TypewriterBold
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MinionPro-Bold
    /MinionPro-BoldIt
    /MinionPro-It
    /MinionPro-Regular
    /MinionPro-Semibold
    /MinionPro-SemiboldIt
    /MVBoli
    /MyriadPro-Black
    /MyriadPro-BlackIt
    /MyriadPro-Bold
    /MyriadPro-BoldIt
    /MyriadPro-It
    /MyriadPro-Light
    /MyriadPro-LightIt
    /MyriadPro-Regular
    /MyriadPro-Semibold
    /MyriadPro-SemiboldIt
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /Symbol
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Webdings
    /Wingdings-Regular
    /ZapfDingbats
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 600
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 600
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 300
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 900
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.33333
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /Unknown
  /CreateJDFFile false
  /Description <<
    /ENU ()
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice