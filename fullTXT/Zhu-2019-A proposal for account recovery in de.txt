A Proposal for Account Recovery in Decentralized Applications
A Proposal For Account Recovery in
Decentralized Applications
Yanlin Zhu, Lirong Xia and Oshani Seneviratne
Rensselaer Polytechnic Institute, Troy NY 12180, USA
{zhuy11,xial,senevo}@rpi.edu
�
Abstract—Decentralized applications achieve stronger security and
fault tolerance by placing trust in the majority of users instead of a single
third party. However, it also means that there will be no administrator
to handle unexpected situations. Because there is no trusted central
management service, a decentralized application can do little when a
user loses their private key that unlocks the tokens and other assets
the user possesses, and users are responsible for keeping exclusive
control of their private keys. Therefore, as decentralized applications
are becoming mainstream, and more and more non-tech savvy users
began to use these decentralized apps, account recovery will be a
much-needed feature. In this paper, we propose a method to recover an
account by an arbitration process that utilizes the information asymmetry
between the regular users and trade partners an individual may have
had over the life of their blockchain account for which they lost access.
Our method involves a spam filter to separate legitimate requests from
malicious or spam requests, a robust voting mechanism backed by
game-theoretic insights, and an extensive set of controls to avert any
attacks.
Index Terms—Account Recovery, Computational Social Choice, Private
Key Management, Managing Spam Requests, Decentralized Applica-
tions
1 INTRODUCTION
Distributed ledger technologies make it possible to engage in se-
cure transactions without a trusted third party. Compared to a tra-
ditional application, which relies on an administrator or a central
server, a decentralized application is governed by the consensus
of users, who collectively verify transactions. With no centralized
agency, a decentralized system faces less danger in terms of loss of
service due to system crashes, attacks, and regulatory intervention.
However, this lack of authority renders user complaints nearly
impossible to be processed. If an unexpected situation like a
lost private key happens in a decentralized application, it is not
possible for the user to recover their account. With the rise of the
popularity of cryptocurrencies, the threat of losing a private key is
equivalent to that of losing an online banking password. However,
unlike in banks where the customers are legally protected from any
liability of banking credential loss or reversing the transactions
when the credentials are stolen, blockchain based solutions do not
yet offer such functionality.
In this paper, we propose a method to use voting to handle
account recovery requests. The role of the voters in the account
recovery process is analogous to an administrator who processes
the bank account recovery or a property recovery request. Banks
typically use the mobile phone as the primary recovery method.
Unclaimed property organizations, like the National Association
of Unclaimed Property Administrators (NAUPA), use one’s ad-
dress, the driver’s license, and social security card to prove their
identity1. However, the available resources to perform identity
verification in a decentralized application are limited. Using ev-
idence like email or the social security number/national identity
card number in a decentralized application is hardly acceptable. It
will be a severe violation of privacy if this personal information is
made public on the distributed ledger.
Instead, our solution to this is based on the information
asymmetry between a random user and previous trade partners.
Our user will convey past transaction details that they still remem-
ber to the corresponding trade partners. The trade partners can
then vote if the information is correct. The intuition behind this
work is that, although everybody can view the information about
transaction amount and partners straight from the public ledger,
only the parties involved in a given transaction know the rest of
the transaction details.
2 BACKGROUND
2.1 Usability of the Public/Private Key Infrastructure
Beginning with ‘Why Johnny Can’t Encrypt’ [1], the usability
of public key technology has been well-studied from a usability
perspective. Easkandari et al. [2] analyzed the usability challenges
in bitcoin and identified that many users hold more than one
private key in their bitcoin clients, and utilize password-based
authentication mechanisms to use such clients since no recovery
mechanism exists for self-managed cryptographic keys. Koens et
al. [3] explain that blockchain solutions may not take off in some
of the application domains that are widely touted to be successful
adopters of blockchain due to such account management and
recovery issues.
2.2 Failures of Existing Key Management Techniques
Many password managing services are available that store the
key on the user’s behalf. Some services utilize bitcoin’s multi-
signature transaction2 to enhance security further. However, these
services are still vulnerable to security breaches. For example, in
1. https://www.unclaimed.org
2. https://en.bitcoin.it/wiki/Multisignature
148
2019 IEEE International Conference on Blockchain (Blockchain)
978-1-7281-4693-5/19/$31.00 ©2019 IEEE
DOI 10.1109/Blockchain.2019.00028
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
2016, an attack on BitFinex3, a cryptocurrency exchange service
using multi-signature, reported a loss of 120,000 bitcoins [4].
BitFinex holds customer funds in a multi-signature wallet requir-
ing 2-of-3 keys which includes a key held by the customer, a
key held by BitGo4 and an offline recovery key held by Bitfinex.
Although the cause of this incident was not yet provided, it was
suggested the two keys stored in the system could be breached
at once, which leads to the single-point-of-failure that makes the
multi-signature scheme pointless in this case. Therefore, to prevent
massive security breaches such as those in private key managing
systems, we avoid using any third party action in the account
recovery process.
2.3 Importance of Protecting Keys
In a decentralized application, the private key is the only way to
differentiate the owner of an account from the rest of the users.
If an attacker manages to get the user’s private key, the attacker
can fake the user’s signature and spend the money on their behalf.
However, despite its importance in decentralized applications, the
private key is difficult to maintain. Many minor mistakes can
cause the loss of private keys, making a large amount of money
unrecoverable. Such minor mistakes include a malfunction in a
hard disk [5]; throwing away a hard disk containing bitcoins into
a landfill [6]; the unreliability of human memory on passwords [7];
the death of the custodian of the user accounts (such as in the case
of the death of the QuadrigaCX CEO [8]).
In the bitcoin system, for example, it is estimated that 20% of
existing bitcoins (today worth $14+ Billion) are “lost” because of
such issues [9]. Therefore, a method to recover a lost account will
be a necessary feature if the usage of decentralized apps becomes
mainstream and affects a much broader user-base.
3 RELATED WORK
Consensys5 has an identity management solution named
‘uPort’ [10] that uses the Ethereum blockchain for account recov-
ery. In this account recovery process, the user reclaims ownership
of a unique number, called a Persistent Identifier (PI), which
then allows participants to easily (re-)obtain attributes, by proving
ownership of this PI. From the user’s perspective, all writers to
the contract holding the PI are known, since these are the parties
trusted by the user (e.g., friends or government). The uPort app
allows a device, such as a smartphone, to connect to the specific
smart contract on Ethereum. This contract contains a unique
number represented by the PI, which is linked to the participant’s
public key. When, for example, the device holding the attributes
and the private key is lost, a participant may prove to be the owner
of the PI by requesting multiple trusted parties to state that, indeed,
the participant is linked to the unique number, after which the user
can link a new public key to the PI. However, we do not see the
technical rationale to use blockchain technology in this scenario
as all approvers are trusted in the system.
Lee et al. [11] discuss another identity recovery scheme for
the Ethereum blockchain platform, where the user is required to
set up an emergency contact. If the digital identity is lost, first
the user will register a new personal ID, and request the identity
recovery. The service then notifies the friends stored in the user’s
3. https://www.bitfinex.com
4. https://www.bitgo.com/info
5. https://consensys.net
emergency contact. The user who requested the recovery will then
send the new ID to the friends in other ways such as phone or
email to request their signs. If the majority of friends send valid
signatures, the recovery will be legitimate. Our proposal is similar
in scope, because we too address the problem of account recovery
by requiring the user to set up a new account for the recovery
process. However, their work focuses on using predefined contacts
consisting of friends to validate the identity recovery request,
while our work focuses on using selected voting groups consisting
of previous transaction partners to validate the account recovery
request, requiring no additional steps to take before the account
was lost, making it more amenable for generic account recovery
tasks.
Furthermore, there are many other identity-based efforts on
blockchain systems that are under the auspices of the Decentral-
ized Identity Foundation6. To name a few: Hyperldger Indy [12] is
a blockchain that is purpose-built for self-sovereign decentralized
identity eco-system. The blockchain company Civic7 has created
the ‘Secure Identity Platform’ that provide users and institutions
with an independent way to authenticate identities [13]. Several
of the software industry giants, Microsoft and Accenture, have
unveiled an identity system that is powered by a private version of
the Ethereum blockchain and runs on Microsoft’s Azure cloud
computing platform [14]. DigitalBazaar8, a company that has
been working on decentralized identity on the Web, too has
launched an experimental testnet version of a blockchain-based
identity solution called ‘Veres One’ [15]. However, none of these
systems are utilizing the methodology introduced in this paper,
i.e., soliciting the feedback of transaction partners in verifying an
individual’s identity.
Zhao et al. [16] have used a decentralized healthcare system
to demonstrate the method of using a body sensor network to
design a lightweight backup and recovery scheme for keys of a
health blockchain. They offer an excellent insight into combining
physical hardware and blockchain to protect and recover the key in
a specialized blockchain system. We too envision the possibility of
using hardware-based methods to validate the recovery initiator’s
explanation. However, their work is only applicable to domains
that can interface with physical sensors, whereas our solution can
be applied in any decentralized application spanning a variety of
domains.
4 CONSIDERATIONS FOR ACCOUNT RECOVERY
Our solution makes use of the information asymmetry between a
user of a decentralized application and that user’s trade partners.
This information, as illustrated in Fig. 1, is as follows:
• What everybody knows: transaction amount, partners
(from public ledger).
• What the trade partner knows: transaction amount, part-
ners, type of good, method of delivery, etc.
• Each trade partner knows a piece of the owner’s infor-
mation. However, only the owner is supposed to know
everything.
In order to recover a lost account, the user would create a new
account and prove their ownership of the account that was lost
by providing evidence of the previous transactions. The previous
6. https://identity.foundation
7. https://www.civic.com
8. https://digitalbazaar.com
149
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: Information Asymmetry Between Individuals in a Blockchain based Trade Application
transaction partners, who are likely to know the information
provided to them by a user who is trying to reclaim the account,
will vote to verify the evidence. In order to protect the privacy
of the individuals, the evidence is tailored to each voter and
encrypted with their public key until the voter decrypts it locally
using the voter’s private key. This way, the private information is
only visible to the owner and the voter. If the votes are in favor
of the request and the owner of the lost account did not cancel
this recovery, we can recover the lost account for the user who
submitted the request.
5 ACCOUNT RECOVERY INITIATION
In our account recovery process, as can be seen in Fig 2, be-
gins when a user submits a recovery proposal that includes the
encrypted proofs relevant for each of the voters, as well
as the statement of situation(sos). The sos in the
requests will first pass through the spam filter for a quick check,
then the system sends voting requests to each of the voters and
will await the votes to be completed.
Fig. 2: Flowchart of the Recovery Process
User-submitted transactions drive the account recovery process
on this platform. Users need to submit different transactions to
push the recovery process forward.
A series of rules will make sure the ordering of these actions is
correct. The EndRecovery transaction will check if the deadline
of the vote has passed. If not, it will return with an error. Also, a
series of permission settings will determine which user can submit
which transaction, and which user can modify which asset. We
have the vote written in an asset called VoteToken, so only the
VoteToken owner can modify the content of this vote. Fig. 3
illustrates the participants in the system, the interactions, and the
transactions generated.
Fig. 3: Sequence Diagram of Recovery Process
During the recovery process, the user who lost the account
will submit both transactions to start and end a recovery at
appropriate stages. The voters will have a month to submit the
vote transactions by default. If the account recovery attempt is
an attack, the original account owner can always submit the
VetoRecovery transaction during this voting stage and before
the recovery ends. A user can submit the recovery proposal using
the Recovery transaction. The transaction will create an asset
(Proposal), which contains the proof of ownership and the sos.
Fig. 4: ‘Statement of Situation’(sos) to Start a Recovery Proposal
The Statement of Situation(sos) is a description
of the situation in unencrypted text. The voters will review this for
reference, and our spam filter uses this description to filter out any
150
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
disingenuous requests. An example can be seen in Fig. 4, which
is available for voters to view anytime. The detail includes the
encrypted proof for each voter. In the voting stage, each voter
will decrypt their version of proof offline and review its validity.
Note that the previous transaction partners information are already
available on the public ledger, so this transaction will not cause a
privacy leak.
6 VOTING MECHANISM
The voters in our proposed system are analogous to an admin-
istrator in a centralized system. However, unlike in a centralized
system, the account recovery voters are not susceptible to denial
of service attacks, and they are free to leave and join the system
any time they wish, even though they will collectively decide if the
recovery is valid. In particular, we designed the voting mechanism
under the following constraints:
1) The voting process must not expose private information
to outsiders.
2) The voters need to be motivated to vote, which means a
non-negative expected reward for voting.
3) The votes should be authentic, which implies that voting
authentically should be the best strategy for all voters. So
regardless of whether other voters have voted randomly
or authentically, a single voter will be better rewarded if
they vote authentically.
6.1 Encrypting the Proposals Sent to Voters
In order to address the privacy issues when voting, the proof
uploaded for each of the voters is encrypted using the RSA
algorithm9 by the user who wrote the proof. The user who submits
the recovery proposal is responsible for encrypting the proof with
each voter’s public key. The encrypted proofs will stay on the
public ledger available for all the voters to view. The voters can
download the encrypted proof from the asset and decrypt them
using their private keys. This way, only the voter can see the
proof related to them that contains the private information, while
maintaining transparency of the submitted voter proposal.
Although the system currently does not have a way to check
if the user has encrypted the proof or not when the request is
submitted, we argue that it is acceptable since the system allows
a privacy-preserving voting process. If the user wants to submit
something that violates privacy, we do not have a way to stop
them. Also, the future development of client-side software like a
mobile app for decentralized applications can solve this problem
by integrating the offline encryption and transaction submission
into a single step.
6.2 Binary Vote System
We used a binary vote system to determine if the account recovery
request is authentic. The voter can cast two types of votes: vote
for ‘spam’ or vote for ‘ham’ (non-spam). The voters, who need
9. RSA is a public-key cryptography algorithm based on number theory [17].
It allows everyone to encrypt with a person’s public key, but only this person
can decrypt with their private key. Each user will be associated with a public
and private key pair. We will have the public key as (N, e), where N is the
product of two random primes p and q and e is an exponent relative prime to
the (p − 1)(q − 1). The private key is e−1 mod (p − 1)(q − 1). One can
encrypt a message x by calculating the answer = xe mod N . One can also
decrypt an encrypted message y by calculating yd mod N .
to be knowledgeable about the owner of the lost account, are
all of the participants in previous transactions related to the old
account. The idea here is to check through the blockchain data
for the transactions of this user. In our solution, these users are
found out using the Hyperledger’s Historian registry. In other
decentralized application platforms, there are several ways to read
the transaction logs. In bitcoin, for example, the data can be
retrieved from the .bitcoin folder populated by the client. These
transaction partners of the old account will now be the voters who
will review the proof and vote on whether the person is the account
owner or not.
6.3 Incentive Engineering
The motivation behind the voting action is the payment provided
by the recovery initiator. We assume that a voter wants to choose
their voting result in a way that maximizes the expected voting
reward. We designed a reward system that makes sure the cor-
rectness of the vote. Voters will receive the payment regardless of
whether the proposal is validated or not. Therefore, the motivation
to get the reward does not tamper the result of the vote. This
rule, however, does not guarantee the correctness of the vote.
Therefore, to ensure the voters will take their time to come up
with an accurate response, the reward mechanism encourages the
voters who submit the vote correctly using the following additional
rewards:
1) Correct vote reward C is given when the voter’s answer
aligns with the correct/final answer.
2) Incorrect vote reward W is given when the voter voted
differently from the correct/final answer.
We also set the cost of time to be t, which is a negative reward that
represents the time that a voter needs to spend if they need to make
the right decision. To enhance the correctness of the voting result,
we used the three-fifths vote, a type of super-majority vote. If a
consensus is not reached, the request is viewed as a spam request.
Under this rule, the voters will be discouraged to vote randomly
if the request is not legitimate, but the voters will bias towards
voting randomly if the request is non-spam (ham). We found that
three-fifths vote is better than majority vote and a two-thirds vote
in that it makes the voters encouraged to vote authentically rather
than randomly in both cases.
6.4 Determining Optimum Number of Voters
We used game theory to estimate the minimum number of voters
required to achieve a reliable result. We modeled the voting
process as a symmetric game, because the outcome only depends
on the strategies that other voters used, but not on the identity of
the voter. The ideal state is when voting authentically becomes the
dominant strategy for all voters. So for any voter, they get a better
expected reward no matter what action other voters have chosen.
The base case of one voter does not work, because whatever
choice the voter takes, they will always be correct. A single voter
will choose to vote in a random manner, which gives a reward of
C rather than to vote in an authentic manner, which gives a reward
of C−t. In other words, a single voter would not want to spend the
extra time, which costs t to decrypt the proof and validate it. With
two voters, we can draw a table with all of the voters’ strategies
as can be seen in Table 1 for a spam request. We see that if the
voter chose randomly, the voter would have two outcomes. Our
assumption here was that random voting would result in correct
151
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
or incorrect votes are equally likely. The next step is to merge the
two random outcomes into one choice, as can be seen in Table 2.
��������VoterA
VoterB
Random (ham) Random (spam) Authentic (spam)
Random (ham) (C,C) (C,W ) (C,W − t)
Random (spam) (W,C) (C,C) (C,C − t)
Authentic (spam) (W − t, C) (C − t, C) (C − t, C − t)
Table 1: Voting Outcomes for Two Voters (Two Random Choices
for ‘ham’ and ‘spam’)
��������VoterA
VoterB
Random Authentic
Random ( 1
4
W + 3
4
C, 1
4
W + 3
4
C) (C, 1
2
W + 1
2
C − t)
Authentic ( 1
2
W + 1
2
C − t, C) (C − t, C − t)
Table 2: Voting Outcomes for Two Voters (No Random Choices
for ‘ham’ and ‘spam’)
For more than two voters, it is more complicated to list the
voting outcomes. Instead, we would select a few samples to
calculate the expected reward for a single voter. If we look at a vote
with five voters, we need the correct answer to have ≥ 3 votes.
Apart from the voter we are considering, the other four voters can
choose between voting randomly (R) or voting authentically (A).
Given that we do not know the probability of whether any voter
will vote randomly or vote authentically, we must consider every
case.
First, we will calculate the expected reward for the first voter
if they vote authentically. In the case of five voters, we need at
least two additional correct answers from the other four voters for
the final result to be correct. If the other four voters’ strategy is
RRRR, which means that all of them choose to vote randomly,
then the expected reward for the first voter if other voters choose
RRRR is
(42)+(
4
3)+(
4
4)
16 ∗ C +
(40)+(
4
1)
16 ∗W − t, where C is the
correct vote reward; W is the incorrect vote reward; t is the cost
of time.
Instead, if the other four voters’ strategy is RRRA, which
means that one of the voters choose to vote authentically, then one
vote is guaranteed to be a correct answer. We need at least one
additional correct answer from the rest of the three voters for the
result to be correct. So, the expected reward for the first voter, if
other voters choose RRRA, is
(31)+(
3
2)+(
3
3)
8 ∗ C +
(30)
8 ∗W − t.
We get an general expression for the expected reward if the
voter is voting authentically as RewardAuthentic =
∑vr
n=vc (
vr
n )
2vr ∗
C +
∑vc−1
n=0 (vrn )
2vr ∗W − t. Where vr is the number of voters who
will vote randomly; va is the number of voters who chose to vote
authentically; vr + va + 1 is the total number of voters; vc is
the number of correct answers we need from the random voters,
vc = v ∗ k − va, k is the threshold 0.6 from three-fifths vote.
Similarly, we can get an expression for the expected reward if
the voter is voting randomly. RewardRandom = 1
2 (
∑vr
n=vc (
vr
n )
2vr ∗
C+
∑vc−1
n=0 (vrn )
2vr ∗W )+ 1
2 (
∑vc
n=0 (
vr
n )
2vr ∗C+
∑vr
n=vc+1 (
vr
n )
2vr ∗W ).
If RewardAuthentic > RewardRandom regardless of vr or va.
Then voting authentically is the dominant strategy for all voters.
6.5 Voting Simulation
We developed a voting simulator that generates all possible out-
comes and calculates the voting result and the expected reward.
Then it merges the two random choices as a single choice. Finally,
it finds out if there exists a dominant choice for each of the voters.
Fig. 5: The Simulation Results for Two Voters Case, “R” denotes
random vote, “T” denotes Authentic vote, “S” denotes Spam, “H”
denotes Ham (non-spam)
As we can see from Fig. 5, the simulation will list all voting
outcomes and calculates each voter’s strategy. With the correct-
vote-reward C = 100, Incorrect-vote-reward W = 0 and t = 1,
there is no equilibrium.
The goal would be to let voting authentically be the dominant
strategy for all voters. In other words, no matter what other
voters do, authentic votes should always be the best option for
an individual as a voter. Using enumeration method and repeated
testing, we found that the smallest number of voters of five
under three-fifths vote can achieve closest to this goal for the
16 combinations of strategies taken by the other four voters. The
voter is better rewarded to vote authentically except when all other
voters are voting randomly.
As the number of voters increases from five, the overall trend is
that as the number of voters increased, it is much better for a single
voter to vote authentically regardless of what actions other voters
take. Therefore, we set the minimum required number of voters in
our system to five. If the number of previous trade partners is less
than five, the smart contract will deny the recovery request with
no payment paid by the recovery initiator.
7 PREVENTING ATTACKS
7.1 Handling Spam Requests
With a recovery process like this, anyone could submit a recovery
request to claim the ownership of another account. So there is
motivation for an attacker to steal an account using the recovery
mechanism outlined in this paper. Although the voting system
may eventually judge this request as fake and close it, the frequent
attacks will still be troublesome to the voters. To overcome the
overwhelming number of spam requests that will emerge on the
system, we designed a spam filter to eliminate non-authentic re-
covery requests. This spam filter is a classifier on the statement
of situation (sos) text, and not on the encrypted proofs
since the spam filter can not process them.
We draw inspiration from the paper titled ‘Learning to Identify
Review Spam’ [18], in which the authors explore a few different
machine learning algorithms and compare their performance in
detecting review spam. In their analysis, they mainly focus on
the Naive Bayes algorithm and experiment with different sets of
review related features. In addition to the study of supervised
spam detection methods, they have also used co-training to convert
unlabeled review data to labeled data. One of the novel ideas is
spam detection based on two views, where one view is about the
review, and the other is about the reviewer. In our design for the
spam filter, we followed a similar methodology and used Naive
152
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
Bayes10 as our classifier for its superior performance in classifying
text.
Spam Detection Smart Contract
The spam detection smart contract is deployed on the
blockchain with a trained machine learning classifier. When users
submit their proposals, the classifier filters out most spam re-
quests by analyzing the non-encrypted sos part of the account
recovery proposal. If the request passed the spam filter, the
proposal would enter the next stage of the account recovery
process, i.e., voting. The outcome of this vote will be the fi-
nal decision and be subsequently used as training data to im-
prove the performance of the classifier. We also implemented a
function to reduce the size of the classifier by removing less
helpful and rare features when new training data is added and
when the classifier size exceeds the limit. The smart contract
will call nbclassifier.categorize( recovery.sos,
threshold) to identify if the proposal is spam. In the
categorize function, the first argument recovery.sos,
which is the unencrypted statement, and the second argument
is the target threshold in exponential form, which adjusts the
strictness of the spam filter. In the calculation of the most likely
category, the probability of the spam category will be divided by
the threshold. This threshold setting is for adjusting the difficulty
in the spam detection. Ideally, we want our spam detection to be
biased towards identifying the request as non-spam, which means
our threshold will be more significant. The idea behind this is we
would like to avoid classifying innocent request as spam. We run a
simulation using the training data and testing data from the study
of Deceptive Opinion Spam [19], [20]. We ran our spam detection
algorithm under different threshold settings and found that the best
F1 score is achieved with a threshold of e3 as can be seen in Fig. 6.
Fig. 6: Performance of the Naive Bayes Classifier Under Different
Thresholds
From the results in Fig. 6, we can see the positive correlation
between threshold and precision, where a higher threshold setting
corresponds to a lower false positive rate. We also observe a
negative relation between threshold and recall, where a lower
threshold setting corresponds to a low false negative rate implying
less spam slipping through the filter. So a lower threshold will
increase the likelihood for a request to be identified as spam.
In future work, we plan to design an algorithm to predict the
probability that an account is lost. For example, a user account
with very recent activities is not very likely to be lost, and a
wealthy account is likely to be the target of an attack. So the
system can give recovery requests associated with these accounts
10. The Naive Bayes classifier is based on the probabilistic formula
P (c|F1, F2, ..., Fn) = P (c)
(P (F1,F2,...,Fn|c)
P (F1,F2,...,Fn)
. It takes in the proposal as
a “bag of words” and returns the predicted category.
a lower threshold to increase the difficulty for the user’s proposals
to pass the spam filter.
7.2 Veto Recovery
As a defense against account hacking attacks, another request will
be sent to the original owner of the account. If this is indeed a
hacking attempt, the original owner will have the power to veto
this recovery request and end the account recovery process.
If no response comes from the original account during this
period, the smart contract then transfers all of the money in the
old account to the new one. However, if the old account canceled
this transaction, the transfer of funds from the old account to the
new one will not happen. The same would be true if the account
recovery were a successful spam that passed the voting stage or
the owner of the account has found their original key and wanted
to recall this recovery. Nevertheless, the voters will still get the
reward because this result does not necessarily mean the voting
result is inaccurate.
Fig. 7: Permission Setting for VetoRecovery
As can be seen in Fig. 7, to enable the exclusive access to
the VetoRecovery transaction for the original owner, in the
premission.acl settings file, we allow everyone CREATE
access to a proposal, but only the owner can delete it. When a new
user starts a recovery, the smart contract will create a proposal
owned by the original user instead of the user who submitted this
transaction. In other words, the recovery initiator can only create
a proposal owned by the owner of the original account.
Any user can cancel the recovery on their account. When
the owner of the original account submit a VetoRecovery
transaction, the proposal will be deleted from the asset. After that,
the recovery cannot proceed without the proposal.
8 SYSTEM IMPLEMENTATION
The blockchain application platform we chose for the imple-
mentation is Hyperledger Composer11. In a deployed trading
network with the account recovery feature, the account recovery,
voting, and Naive Bayes spam filter programs are all stored as
Chaincode12.
The spam filter is stored in JSON format into an asset on the
Hyperledger Composer, which contains all of its prior data for the
spam/ham prediction. Whenever the program calls the classifier,
the program parses the classifier data from the asset and predicts
whether the new request is spam based on these prior data.
11. https://hyperledger.github.io/composer
12. https://hyperledger-fabric.readthedocs.io/en/release-1.4/chaincode.html
153
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
Another asset that is vital to the recovery process is the
Proposal, which is created when the recovery starts and will
remain on the system for the voters to review. The voters can
download the encrypted proof from the proposal asset and decrypt
them locally to verify the identity of the user who submitted this
request. When the recovery ends, the smart contract queries the
related poll using the detailpoll. The smart contract then
reads the vote results from the related VoteTokens to determine
if the account should be transferred. In cases where the account
recovery is an attack, the original owner of the account can submit
VetoRecovery, which immediately deletes the proposal and
cancels the recovery. Table 3 and Table 4 list the assets and
transactions associated with the account recovery smart contract
respectively.
Asset Data Usage
VoteToken String votetokenID
String response
→ Poll poll
→ User creator
→ User owner
A VoteToken is created for each
voter when the recovery request is
submitted. The voter can cast their
vote by writing in VoteToken
through a Vote transaction. When
the voters vote, they transfer the
ownership of the VoteTokens
back to the recovery initiator.
Proposal String proposalID
String statementOS
String detail
String newAccount
String oldAccount
String detailpoll
→ User owner
The proposal contains the un-
encrypted statement and the en-
crypted proofs. The recovery pro-
cess is centered around this asset,
and if it is deleted, then the recov-
ery cannot proceed.
Poll String pollID
String detail
String deadline
String result
RSAKey rsakey
→ User host
A Poll is created with an auto-
generated deadline when the re-
covery request is submitted. The
voters can only vote before the
deadline, and the recovery initiator
can only end the recovery after the
deadline.
Classifier String nbclassi-
fierID
String jsondata
The naive Bayes classifier is stored
as an asset. When a recovery trans-
action is submitted, the smart con-
tract will predict the category by
taking the unencrypted statement.
If the request failed at this stage,
the Proposal and VoteTokens
would not be created.
Table 3: Assets Related to Account Recovery
9 DISCUSSION
Traditional online identity has become a disaster in recent years
where many of the biggest gatekeepers of consumer data have
been hacked, and consumer data irrevocably exposed [21]–[23].
Blockchain, by contrast, has been touted as a way of giving
consumers control of their information, to not only decrease fraud
but also to cut off large enterprises from using consumer data for
their gain. In a decentralized application, there is no authority to be
in charge of unexpected situations like a lost account. As a result,
lost coins in most cryptocurrencies are unrecoverable, leading to
their deflation over time, and portions of the cryptocurrency being
out of circulation, ultimately limiting the viability of such a system
as a global digital currency [24].
In this paper, we propose a method that utilizes game theory
and computational social choice to enable users of decentralized
applications to regain control of their accounts if they lose their
account credentials. When designing the voting system, we used
Transaction Data Usage
Recovery String
proposalID
String sos
String detail
String initiator
String
oldAccount
In order to initiate the account recov-
ery, the user will call this transaction
and provide the proof and the id of
the account they are going to recover.
This transaction will also run a spam
filter on its inputs. If the request
fails the spam filter, this transaction
will end with an error. Otherwise, a
proposal, poll, and VoteTokens are
created in the asset and the recovery
proceeds to the voting stage.
Vote String response
→ VoteToken
vt
The voters will perform this transac-
tion to cast their votes. The voters
can only vote before the deadline of
the poll this particular VoteToken
is associated.
EndRecovery String propos-
alID
The user who submitted the recovery
request will perform this transaction.
Performing this transaction will end
the recovery and transfer money from
the old account to the new one. This
transaction will fail if the proposal
does not exist. This transaction can
only be performed after the deadline
of the poll.
VetoRecovery → User owner A user can always cancel the recov-
ery on their account. Performing this
transaction will delete the recovery
proposal associated with this user.
Then the EndRecovery will fail
even if the votes were passed.
Table 4: Transactions Related to Account Recovery
computer simulations to help list the cases with a higher number
of voters. We found that with our reward setting, as the number
of voters increase, the voting will achieve near equilibrium state
that every voter would be better off if they voted authentically.
However, we are also aware that future work on formal proof on
the number of voters is a necessary component of our analysis. In
the calculation, we also simplified the problem by assuming the
voter can get the correct answer if they voted authentically. One
direction is to use a probabilistic model to predict the likelihood
that the voters being able to verify the result.
With the current verification method, a malicious attacker may
be able to construct the full history of one’s trades using social
engineering. The attacker may obtain private information about a
user from cyberstalking or phishing scams. With enough data, the
attacker may be able to convince the voters that they are the real
owner of the account. However, the only defense we have against
such attacks is the VetoRecovery transaction.
Due to the high reward of an account hack and the relatively
low base voting reward, an attacker will likely manipulate the
voting result by vote buying and for a voter to vote in favor of the
attacker. Therefore, in the future design of the voting mechanisms,
we will take into account vote buying prevention. In their work,
the Niemi et al. [25] construct a protocol resistant to vote buying
by preventing the voters from proving their voting strategy to
anybody. We also note that our system is also susceptible to the
classic 51% attack [26].
It is possible for a malicious attacker to steal a user’s account
by intentionally engaging in many transactions with the user using
different accounts, to a point when the attacker controls more than
60% of the trade partners under three-fifths vote. In another case,
it is common for a person to have multiple accounts. If these
accounts have traded with the lost account, they could have more
154
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply. 
weight in the voting system. In order to solve this vulnerability, we
can predict the relation between individual users on the network
to find if they indeed belong to the same person.
In the search for a method to alleviate this limitation, we
draw inspiration from BitIodine [27], which has proven to be
able to identify addresses likely to belong to the same user on
bitcoin. Their method is to first parse the blockchain data into a
dynamic database that can be accessed and updated with better
performance. Then the “clusterizer” will cluster address profiles
based on related information including transaction data. Then
the “scrapers” will crawl the internet, mainly forums and trading
services related to bitcoin, to associate more information with the
addresses and detect unusual flows of coins. In a similar vein,
for future work, we will add a service to periodically cluster the
accounts in our network to identify the accounts likely to belong
to the same person. When a recovery request is submitted, as
the information about account owner’s trade partners is recovered
from the historian registry, the smart contract can then filter out
the voters that are likely to be a duplicate account of another voter
in the current voting group and only retain one of them as a voter.
Furthermore, even though our work has primarily been on the
Hyperledger eco-system, we plan to align with the equivalent
Ethereum based efforts, namely ERC 725 (Identity)13, which
facilitates the emergence of a web of trust, by relying on the claims
(from biometric data to email account ownership) of trusted third
parties about a given identity.
10 CONCLUSION
The problem we address is enabling account recovery in cryp-
tocurrencies or general purpose decentralized trading systems.
In this paper, we showed a voting process that functions as an
administrator that can decide the validity of an account recovery
request and a spam filter to reduce the load on the voting
system. Our solution draws direct inspiration from the voting-
based consensus mechanism, in that the majority of relevant
users will decide the outcome of a recovery request via voting.
The challenge in implementing an identity verification process
in the decentralized application is how to achieve the balance
between privacy and authority. If a user needs to prove their
identity, the user would need to show the verifiers/voters (who
were the transaction partners this user has had in the past), some
information that other people do not know. To prevent privacy
leaks in the verification step, we have designed a mechanism to
use detailed trade information as proofs and the trade partners
as the voters. We also demonstrate how the account recovery
process is performed by a series of user-initiated transactions on
Hyperledger Composer. Compared to existing work, the recovery
process we discussed does not require the user to take any action
before the recovery, which is significant as some users might not
be forward-thinking to prepare for losing an account in the future.
Our solution is also unique in a way that it is decentralized in
its decision-making process as we avoid any process involving a
third party. Our project website14 includes more information on
this work, including all the source code.
REFERENCES
[1] A. Whitten and J. D. Tygar, “Why Johnny Can’t Encrypt: A Usability
Evaluation of PGP 5.0.” in USENIX Security Symposium, vol. 348, 1999.
13. https://erc725alliance.org
14. https://rpi-scales.github.io/account-recovery/
[2] S. Eskandari, J. Clark, D. Barrera, and E. Stobert, “A first look at the
usability of bitcoin key management,” arXiv preprint arXiv:1802.04351,
2018.
[3] T. Koens and E. Poll, “The Drivers Behind Blockchain Adoption: The
Rationality of Irrational Choices,” in European Conference on Parallel
Processing. Springer, 2018, pp. 535–546.
[4] C. Paya. (2016) Multi-signature and correlated risks: the case of
Bitfinex. [Online]. Available: https://randomoracle.wordpress.com/2016/
08/31/multi-signature-and-correlated-risks-the-case-of-bitfinex
[5] M. Nuncic. (2018) What to do in Case of Bitcoin Loss Caused by Hard-
ware Failure. [Online]. Available: https://www.ontrack.com/blog/2018/
02/01/what-to-do-in-case-of-a-bitcoin-loss-caused-by-hardware-failure
[6] S. M. Carter. (2017) Man accidentally threw away $127
million in bitcoin and officials wont allow a search.
[Online]. Available: https://www.cnbc.com/2017/12/20/man-lost-127-
million-worth-of-bitcoins-and-city-wont-let-him-look.html
[7] D. R. Pilar, A. Jaeger, C. F. Gomes, and L. M. Stein, “Passwords usage
and human memory limitations: A survey across age and educational
background,” PloS one, vol. 7, no. 12, p. e51067, 2012.
[8] N. De. (2019) QuadrigaCX Crypto Exchange Users Still Cant Get Their
Money Out. [Online]. Available: https://www.coindesk.com/quadrigacx-
crypto-exchange-users-say-they-still-cant-get-their-money-out
[9] J. J. Roberts and N. Rapp, “Exclusive: Nearly 4 Million Bitcoins Lost
Forever, New Study Says,” Fortune. November, vol. 25, p. 2017, 2017.
[10] R. Heck. (2018) Open Identity System for the Decentralized Web.
[Online]. Available: https://www.uport.me/#about
[11] Lee, Wookun and Jin, Jae-Hwan and Lee, Myung-Joon, “A Robust
Identity Recovery Scheme for the Ethereum Blockchain Platform,”
International Information Institute (Tokyo). Information, vol. 20, no. 11,
pp. 8133–8141, 2017.
[12] IBM. (2017) Hyperledger Indy. [Online]. Available: https:
//www.hyperledger.org/projects/hyperledger-indy
[13] A. Milano. (2018) Social Network Adopts Civic’s Blockchain ID
System. [Online]. Available: https://www.coindesk.com/social-network-
adopts-civics-blockchain-id-system
[14] M. del Castillo. (2017) Power to the User: Accenture &
Microsoft Are Changing Identity with Ethereum. [Online].
Available: https://www.coindesk.com/power-to-the-user-accenture-and-
microsoft-are-changing-identity-with-ethereum
[15] DigitalBazzaar. (2017) The Veres One Project. [Online]. Available:
https://veres.one/summary/
[16] H. Zhao, P. Bai, Y. Peng, and R. Xu, “Efficient key management scheme
for health blockchain,” CAAI Transactions on Intelligence Technology,
vol. 3, no. 2, pp. 114–118, 2018.
[17] R. L. Rivest, A. Shamir, and L. Adleman, “A method for obtaining digital
signatures and public-key cryptosystems,” Communications of the ACM,
vol. 21, no. 2, pp. 120–126, 1978.
[18] Li, Fangtao Huang and Huang, Minlie and Yang, Yi and Zhu, Xiaoyan,
“Learning to identify review spam,” in Twenty-Second International Joint
Conference on Artificial Intelligence, 2011.
[19] C. C. M. Ott, Y. Choi and J. Hancock, “Finding Deceptive Opinion
Spam by Any Stretch of the Imagination,” Association for Computational
Linguistics, 2011.
[20] C. C. M. Ott and J. Hancock, “Negative Deceptive Opinion Spam. In
Proceedings of the 2013 Conference of the North American Chapter
of the Association for Computational Linguistics: Human Language
Technologies,” Association for Computational Linguistics, 2013.
[21] S. Gressin, “The equifax data breach: What to do,” Federal Trade
Commission, vol. 8, 2017.
[22] E. Steel and G. Fowler, “Facebook in privacy breach,” The Wall Street
Journal, vol. 18, no. 1, 2010.
[23] V. Liu, M. A. Musen, and T. Chou, “Data breaches of protected health
information in the united states,” Jama, vol. 313, no. 14, pp. 1471–1473,
2015.
[24] B. Rodri. (2018) The impact of Bitcoins deflationary token economics
on its viability as a global digital currency. [Online]. Avail-
able: https://hackernoon.com/the-impact-of-bitcoins-deflationary-token-
economics-on-its-viability-as-a-global-digital-currency-878f3042fb08
[25] “How to prevent buying of votes in computer elections, author=Niemi,
Valtteri and Renvall, Ari,” in International Conference on the Theory and
Application of Cryptology. Springer, 1994, pp. 164–170.
[26] X. Li, P. Jiang, T. Chen, X. Luo, and Q. Wen, “A survey on the security
of blockchain systems,” Future Generation Computer Systems, 2017.
[27] S. Z. Michele Spagnuolo, Federico Maggi, “BitIodine: Extracting Intel-
ligence from the Bitcoin Network,” Financial Cryptography and Data
Security, 2014.
155
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:42 UTC from IEEE Xplore.  Restrictions apply.