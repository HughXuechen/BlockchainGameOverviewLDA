Securing SDN-Controlled IoT Networks Through Edge Blockchain
2102 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
Securing SDN-Controlled IoT Networks
Through Edge Blockchain
Jiejun Hu , Martin Reed , Member, IEEE, Nikolaos Thomos , Senior Member, IEEE,
Mays F. AI-Naday , Member, IEEE, and Kun Yang , Senior Member, IEEE
Abstract—The Internet of Things (IoT) connected by software-
defined networking (SDN) promises to bring great benefits to
cyber–physical systems. However, the increased attack surface
offered by the growing number of connected vulnerable devices
and separation of SDN control and data planes could overturn
the huge benefits of such a system. This article addresses the
vulnerability of the trust relationship between the control and
data planes. To meet this aim, we propose an edge computing-
based Blockchain as a Service (BaaS), enabled by an external
BaaS provider. The proposed solution provides verification of
inserted flows through an efficient, edge-distributed, blockchain
solution. We study two scenarios for the blockchain reward pur-
pose: 1) information symmetry, in which the SDN operator has
direct knowledge of the real effort spent by the BaaS provider
and 2) information asymmetry, in which the BaaS provider con-
trols the exposure of information regarding spent effort. The
latter yields the so-called “moral hazard,” where the BaaS may
claim higher than actual effort. We develop a novel mathematical
model of the edge BaaS solution and propose an innovative algo-
rithm of a fair reward scheme based on game theory that takes
into account moral hazard. We evaluate the viability of our solu-
tion through analytical simulations. The results demonstrate the
ability of the proposed algorithm to maximize the joint profits of
the BaaS and SDN operator, i.e., maximizing the social welfare.
Index Terms—Blockchain, flow verification and validation,
reward scheme, software-defined networking (SDN).
I. INTRODUCTION
THE Internet of Things (IoT) finds many applications in
both industrial and domestic spheres and promises to
bring great benefits through increased connectivity to cyber–
physical systems. However, as IoT systems generally lack
computational power, the computation tasks are moved to
edge computing systems such as multiaccess edge comput-
ing (MEC). A key component of modern flexible compute
systems, such as MEC, is software-defined networking (SDN),
which has generally been proposed for IoT architectures
to deal with highly time-varying communication demands,
prolong the lifetime of energy constraint devices, provide
scalability, and improve flexibility.
Manuscript received April 1, 2020; revised July 20, 2020; accepted August
4, 2020. Date of publication August 18, 2020; date of current version
February 4, 2021. This work was supported by the Project SerIoT, which
has received funding from the European Union’s Horizon 2020 Research and
Innovation Programme under Grant 780139. (Corresponding author: Jiejun
Hu.)
The authors are with the School of Computer Science and Electronic
Engineering, University of Essex, Colchester CO4 3SQ, U.K. (e-mail:
jiejun.hu@essex.ac.uk).
Digital Object Identifier 10.1109/JIOT.2020.3017354
While SDN is an essential component of many edge
systems, supporting IoT through flexible networking [1], [2],
it also offers benefits in improving the security of networked
systems. This has been demonstrated by the SerIoT project [3],
which has proposed a fully integrated system that combines
edge computing and SDN to address the security of IoT.
However, although SDN can benefit security [4], it has also
been noted that the SDN subsystem itself can be a target of
attacks [5], [6]. The security issues in SDN are complex [5] to
go into great detail here. However, in brief, the issues arrive
from: a centralized SDN controller that implements highly
complex software actions from the contents of network flows,
leading to software actions too complex to test every outcome;
implicit trust between the centralized controller and the edge
switches; the switches are essentially dumb and simply imple-
ment the flow rules sent to them; and a controller who often
acts in a reactive mode and sends flow rules for any new
network flows that arise without necessarily holding histori-
cal immutable state of the rules. Thus, this article provides
a solution to facilitate SDN security, i.e., ensuring flow rules
are verified, at the edge, against network policies before being
inserted into SDN switches; and, maintaining an independent,
immutable, history of SDN flow insertion (which may be used
by anomaly detection systems). This is an important addition
to systems such as that proposed by SerIoT to ensure SDN
security. In particular, our solution maximizes the joint satis-
faction of the different blockchain stakeholders (i.e., the SDN
operator and the blockchain provider). Evaluating the security
performance is out of the scope of this article as security is
directly related to the choice of the implemented policies and
is left for future work.
To provide the security solution above, this article proposes
a novel solution that carries out a separate flow verifica-
tion/validation using blockchain technology. As it is vital that
the flow verification occurs close to the edge switches, to
reduce the opportunity of attacks [7], it is required that the
blockchain technology is also implemented at the edge through
a mechanism, such as MEC, to form an edge blockchain.
Blockchain technology, a subconcept of distributed ledger
technology, is essentially an append-only data structure main-
tained by a group of not-fully trusted nodes, which never-
theless provide a trusted data structure through a suitable
consensus algorithm [8]. Furthermore, blockchain technology
is decentralized, immutable, transparent, and reliable, which
allows it to stand independently from the SDN network and
the IoT network to establish a distributed trust mechanism.
This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/
https://orcid.org/0000-0002-5274-1869
https://orcid.org/0000-0002-6708-4478
https://orcid.org/0000-0001-7266-2642
https://orcid.org/0000-0002-2439-5620
https://orcid.org/0000-0002-6782-6689
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2103
The distributed nature of edge blockchain is ideally suited to
support the security of the edge SDN systems [9] as it allows
the flow verification to take place directly next to the edge
switches while ensuring there is distributed consensus over
the whole network.
To provide a straightforward deployment of blockchain,
we utilize Blockchain as a Service (BaaS) [10]. We intro-
duce blockchain agents (BCAs) that are collocated with SDN
switches at the edge, and also in the core. The BCAs are
responsible for flow verification/validation by running smart
contracts. Flow verification requires a group of edge BCAs
(e.g., in MEC) to act as a verifier initiator (VeIn) and verifiers.
The verifiers inspect the new flow information, e.g., addresses,
ports, and any other required fields against the policy. After
flow verification, the verification result is sent back to the
VeIn. Then, the flow validation process will be conducted.
Flow validation requires BCAs to act as peers to validate
the new flow in the block and update the flow ledger. Flow
verification/validation in an SDN application needs computa-
tion capability to execute the encryption algorithm, consensus
mechanism, and other smart contracts. As mentioned earlier,
it is essential that the verification process takes place as close
as possible to the edge SDN switches to minimize opportuni-
ties for malicious interference. Thus, the proposed architecture
adopts compute in the edge (e.g., MEC) that is co-located
with the SDN switches to host the BCAs. With lightweight
IoT hubs, the use of this edge compute may be vital as edge
blockchain is likely to be beyond the computational capabil-
ities of many IoT devices and hubs. Thus, the edge-assisted
BCA can provide advantages, such as promoting the scalabil-
ity of the IoT networks with the number of IoT devices and
reducing the communication overhead compared with cloud
computing.
In the proposed architecture, BCAs run the SDN flow ver-
ification application as an external service. Meanwhile, there
could be other applications from other parties running on the
BCAs. This necessitates an incentive mechanism to stimu-
late the BCAs to perform the SDN flow verification. When a
BCA initializes the flow verification procedure (i.e., it acts as
a VeIn), it hires a group of BCAs as verifiers and offers them
a reward. The verifiers know their computational ability, chan-
nel condition, workload, and the size of the task. Hence, the
verifiers can decide how much reward they want. In this sce-
nario, we realize that there is an information barrier between
the verification initiator and verifiers. Specifically, a verifica-
tion initiator can only decide the reward by the information
provided by verifiers, however, the verifiers may not always
be honest. In this article, we propose two reward schemes
for: 1) an information-symmetric scenario (ISS), where the
verifiers report their effort honestly and 2) an information-
asymmetric scenario (IAS), where the verifiers hide their effort
but reveal part of their information. In IAS, the verifier may
behave greedily and demand a higher price for a simple task by
revealing a high performance or else they will not implement
the task. This phenomenon is known as the “moral hazard” of
the verifiers [11]. The underlying reason for the moral haz-
ard is the asymmetric relationship about system information:
a verifier has access to more information to make a decision
than a VeIn. In this work, game theory and contract theory
are used to solve this problem. To the best of our knowledge,
our work is the first to propose the workflow of flow rule
verification/validation in blockchain-aided SDN (BC-SDN), to
do so using edge computation and also to use contract the-
ory to study the quantified performance of blockchain in the
considered use case.
The main contributions of this article are summarized as
follows.
1) We propose the architecture of edge blockchain-assisted
SDN (BC-SDN) for flow conformance in an IoT system.
Edge-blockchain helps maintain a distributed, immutable
flow ledger for SDN.
2) We design the workflow of flow verification and sub-
sequent validation for the SDN IoT system with the
assistance of edge blockchain.
3) We devise fair reward schemes based on information-
symmetric and information-asymmetric scenarios to
stimulate the performance of BCAs on edge servers.
Moreover, we compare the information symmetric and
asymmetric cases in the proposed reward scheme using
numerical simulations.
Although there is a clear need for security mechanisms in
SDN, as we propose, in this article, we concentrate on the
edge-blockchain mechanism itself, as this is the fundamental
mechanism that is required before its benefits can be deployed.
Thus, now we briefly elucidate the benefits of our architecture
and its intended uses. The major benefit of the mechanism
described is that it provides a security framework that is com-
pletely separate from the complex SDN controller process and
thus provides prevention of malicious behavior that may occur
in the SDN subsystem and verifiable security auditing of SDN.
By using a smart contract for flow verification, it allows ver-
ifiable, independent, code to be developed so that the safety
of the flow insertion can be ensured. A smart contract also
provides a development environment that allows a deployer
of the technology to select a wide range of flow verification
policies, for example, a simple case of checking addresses of
connected devices through to complex verification of end-to-
end paths for specific flows. By using the immutable ledger
facility of the blockchain inserted flows, it can be audited in
the knowledge they cannot be changed or tested for anomalies
using machine-learning approaches.
The remainder of this article is organized as follows. We first
review related literature in Section II. Then, in Section III, we
introduce the proposed architecture and workflow of BC-SDN.
Next, we provide the considered system model in Section IV.
We then formulate the problem and present our solution for
both the ISS and IAS in Section V. Our solution is evalu-
ated extensively in Section VI to get an understanding of the
influence of the various system parameters. We also compare
the performance of our solutions against other state-of-the-
art methods, and the results show the advantages of using the
proposed method. Finally, we draw conclusions in Section VII.
II. RELATED WORKS
Blockchain is a disruptive technology that has been used in
many scenarios in real life, i.e., governance [12], healthcare
[13], smart grid [14], and so on. In this article, we review
2104 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
the related works on blockchain-based SDN, edge computing-
assisted blockchain, and the pricing scheme of blockchain.
A. SDN Using Blockchain Technology
Blockchain technology uses a group of not-fully trusted
nodes, which nevertheless provide a trusted data structure
through a suitable consensus algorithm. Thus, it is com-
monly used as a solution for security challenges in IoT and
SDN. In [15], an SDN-based decentralized security architec-
ture using blockchain technology for the IoT ecosystem is
presented. This work aims to mitigate the recent challenges
and detect attacks more efficiently. It adopts the blockchain
technology to dynamically update the attack detection model
and reward the fog nodes according to the “Proof of Work.”
Boukria et al. [16] proposed a blockchain-based controller
against false flow rule injection, focusing mainly on the SDN
controller authentication. Yazdinejad et al. [17] introduced
a novel authentication handover based on blockchain in the
SDN-based 5G network with the aim to remove unnecessary
reauthentication in repeated handover among heterogeneous
cells in 5G. Qiu et al. [18] studied the scenario of indus-
trial IoT with multiple SDN controllers. A blockchain-based
consensus protocol is presented to collect and synchronize
network-wide views among different SDN controllers. This
work employs the Q-learning method to jointly optimize the
view change, access selection, and computational resources.
B. Blockchain and Edge Computing
Blockchain technology is computationally intensive dur-
ing the consensus mechanism and ledger updating procedure.
Therefore, typically there is a need to offload these, relatively,
computationally heavy tasks to edge devices [19], [20]. Task
offloading is not new and has been researched since more
than a decade ago [21]. Wang et al. [22] presented MEC
in the form of mobile cloud and combined it with cloud
radio access networks (C-RANs) with a particular focus on
joint resource allocation across computation and communica-
tion domains. Hu et al. [23] further introduced wireless power
transfer into MEC to battle the energy supply issue of battery-
powered IoT devices. A blockchain-based distributed cloud
architecture has been proposed in [24]–[26], with fog nodes
at the edge providing the functionality of the SDN controller.
This work introduces a hierarchy with a central blockchain-
based cloud moving toward a blockchain-based edge, with
the latter taking responsibility for updating the flow rules.
Although these studies show how cloud/fog computing would
support blockchain, the presented solution neglects the issue
of flow conformance testing that we address in this article.
The work in [27] proposes a Trust List that represents the dis-
tribution of trust among IoT related stakeholders and provides
autonomous enforcement of IoT traffic management at the
edge networks by integrating blockchains and SDN. Ethereum
is used to store the information of the controller on the edge
computing servers, which lead to severe delays. In [28], an
optimal pricing-based edge computing resource management
is presented. This solution can support blockchain applica-
tions, where the mining process can be offloaded to an edge
computing server provider (ESP). The authors adopted a two-
stage Stackelberg game to maximize the utility of ESPs and
miners.
Edge computing not only relieves the computational demand
of blockchain technology but can also resolve security issues
with the edge systems. First, using blockchain, it is possible
to build a distributed control mechanism over all the edge
systems [29]. Second, blockchain maintains data consistency
in every edge node through its consensus mechanism; for
example, Yang et al. [30] proposed a smart edge computing
oriented data exchange prototype using Hyperledger to solve
the issue of data automatically maintaining. Last but not least,
blockchain enables dynamic resource allocation among edge
nodes [31].
C. BaaS Reward Scheme
Due to the fact that blockchain technology is a resource-
consuming application, studies concentrate on optimization
problems that consider various aspects, such as: the latency,
throughput of transactions, finality, security, and decentral-
ization [32]. A survey covering the use of contract theory
in wireless networks is presented by Zhang et al. [33].
This article reviews works that focus on the design of
incentive mechanisms in wireless networks to ensure par-
ticipants from the third party, such as access point, small
cells, and users execute tasks with a proper reward. In [34],
blockchain-based block verification is used in an Internet-
of-Vehicles (IoV) setting. This article considered verification
latency, verifiers’ reputation, and network scale to construct
the contract between the block manager and the verifiers.
Differently, multidimensional contract theory in mobile crowd-
sourcing is studied in [35]. This article designed an incentive
mechanism for mobile crowdsourcing by considering partic-
ipants’ effort, performance, and reward. The work in [36]
proposed a directed acyclic graph (DAG)-based vehicle-to-
vehicle communication network to solve the limited scalability
and improve blockchain’s efficiency. This article also proposed
a game-theoretic solution to optimize bandwidth allocation
and information transmission. However, it did not provide any
incentive to conduct the DAG service.
However, these solutions fail to exploit blockchain tech-
nology in a manner that is compatible with existing SDN
architectures. Specifically, they do not consider how to verify a
new flow using blockchain in a fine-grained manner; nor, how
to enable blockchain technology without changing the founda-
tion of SDN. Additionally, they do not take into account how
to secure the communication between the SDN controller(s)
and switches; nor do they consider how to use blockchain as
a service that needs a pricing scheme for the business model
used in practice. This article aims at solving these problems
by introducing our novel solution of BC-SDN. We achieve
this by designing a flow verification/validation workflow that
uses smart contracts. We design two reward schemes for ISS
and IAS scenarios, analyze these schemes mathematically, and
evaluate them through simulations.
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2105
Fig. 1. System model of blockchain-based SDN.
III. ARCHITECTURE AND WORKFLOW OF BC-SDN
A. Architecture of BC-SDN
We consider an architecture in which blockchain capabil-
ities can be offered as a service, termed BaaS to multiple
customers. The architecture consists of a traditional SDN
network, complemented by edge computing [37] to facili-
tate communication and provide applications in a generic
IoT scenario. In this scenario, IoT devices are attached to
edge computing systems and communicate with each other
through an SDN-based network [3]. The edge computing
provides virtual resources to a set of applications; one of
which is a blockchain overlay, which provides blockchain
services to customers both inside and outside the network.
We assume the SDN operator to be one such customer, which
purchases the service of the blockchain overlay to perform
flow verification/validation between the control and forwarding
counterparts. Fig. 1 shows an architectural view of the entities
in our BC-SDN proposition, which includes the following.
1) IoT devices that interact with end-user environment and
exchange data to influence said environment.
2) IoT hubs that connect the IoT devices to edge nodes
through SDN switches.
3) SDN switches that detect new flows and execute a
forwarding plan calculated by the SDN controller(s).
4) Blockchain agents are software components (i.e.,
servers) provided by a blockchain service provider uti-
lizing edge computing. BCAs are in charge of flow veri-
fication and validation via smart contracts. Furthermore,
BCAs also execute basic blockchain functions, such as
the consensus process, sending transactions, and main-
taining the flow ledger. We consider that one or more
BCAs are located in the edge servers for each SDN
switch to provide computation ability. For simplicity and
without loss of generality, hereafter, we assume there is
only one BCA associated with each SDN switch.
5) Edge nodes are a selection of edge computing nodes
connected through the SDN infrastructure. They provide
computation and storage capabilities to the blockchain
service, among others. Similar to IoT hubs, edge nodes
are connected by the SDN infrastructure. Notably, in a
generic scenario, the distribution of edge nodes could
be different from that of the SDN switches; however,
to simplify our work, we assume that one edge node is
collocated with each SDN switch. To remove the effect
of network-related latency, we assume that a BCA run-
ning on an edge node serves the switch collocated with
that node.
6) SDN controller has the global view of the network and is
able to calculate optimized paths in the network accord-
ing to predefined objectives and policies. In practice,
multiple SDN controllers are likely to be used for relia-
bility and scalability. This does not change the solution
or architecture in any way as the BCA is colocated with
a switch and, in the same manner as a switch, a BCA
would be configured to operate with a load-balanced
controller group that sees multiple controllers as a single,
virtual, controller.
We note that as with the existing SDN controller and switch
interconnections [5], we assume that the controller-to-BCA
and BCA-to-switch connections are protected using transport
layer security (TLS). This provides basic support against mali-
cious interventions in the control plane channels and is an
important security step. However, it should be pointed out
that TLS in the control plane does not provide the inde-
pendent policy conformance testing that is provided by the
solution presented in this article, which protects against much
wider malicious activity against the SDN system. For example,
malicious behavior through the manipulation of the controller
or wider attempts at the injection of data plane traffic that
goes against wider site policy necessitates a solution such as
that presented here. Additionally, the immutable storage of the
flow rules (and their changes) in the blockchain ledger allows
security analysis of the behavior of SDN. This ledger can be
accessed through a role-based approach so that, for example,
users of the network can confirm that their relevant rules have
been accepted, but without having wider access to sensitive
information, while a network operator may have a full view
of the rules for wider security analysis.
In this article, we adopt a permission-based consortium
blockchain, such as Hyperledger [38], which means that
only authorized BCAs can conduct blockchain functions.
Furthermore, we adopt a BaaS infrastructure with a BCA
collocated with an SDN switch. There are three main advan-
tages of using the proposed mechanism for flow verifica-
tion/validation. First, as BCAs are collocated with the SDN
switches, providing a blockchain service to the SDN, the
BCAs can assist with the secure communication between
the controller and the corresponding switch. Second, BCAs
are components provided by an external entity, which con-
ducts flow verification/validation outside the SDN network to
guarantee connection privacy. Finally, BaaS enables a straight-
forward deployment of blockchain in SDN without the SDN
operator needing to create their own blockchain system.
B. Smart Contracts and Workflow of BC-SDN
In BC-SDN, the workflow includes flow verification and
flow validation. We show these two parts in Figs. 2 and 3,
respectively. Flow verification mainly focuses on new flow
verification initiation, flow conformance policy checking, and
result feedback to the VeIn. The flow validation is in charge of
2106 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
Fig. 2. Workflow of flow verification.
Fig. 3. Workflow of flow validation.
flow ledger updating. In Hyperledger, verification is performed
by a leading verifier and the following verifiers. Validation
is performed by a leading peer, namely, the orderer and the
following peers. In BC-SDN, VeIn acts as the leading verifier
and orderer. There is a group of BCAs that act as verifiers and
peers in verification and validation, respectively. In this work,
we adopt Hyperledger as edge blockchain and the Byzantine
consensus mechanism [39]. First, we assume the following.
1) This blockchain application is using a unique
Hyperledger channel. To allow multiple applica-
tions to use Hyperledger at the same time, each
application is allocated a unique channel with an
individual channel ID. In BC-SDN, it only has one
SDN flow verification/validation application.
2) The IoT devices/IoT hubs that require new flow rules
have been registered and enrolled with the organiza-
tion’s Certificate Authority and received back necessary
cryptographic material, which is used to authenticate the
device.
3) The BCAs have been fed with previous topology and
connectivity information from the controller. Moreover,
all the BCAs apply the same flow conformance policy
to check the new flow rules. The conformance policy is
defined as the simple policy, i.e., it verifies the source
and destination IP addresses and the port numbers.
4) The controller is responsible for path calculations, which
will result in a set of flow rules according to the path.
1) Smart Contracts in Edge Blockchain: We define a
group of smart contracts to conduct flow verification/validation
on edge blockchain. First, we have verification initiation
contract and validation initiation contract to start the prepa-
ration of new flow verification/validation by obtaining the
key information of the flow, essential encrypted materiel, and
so on. Then, edge blockchain deploys verification contract
to inspect the signature of the verifiers, conduct flow con-
formance policy, and construct response messages to peer
verifiers. Last but not least, we have the Byzantine consensus
mechanism deployed as consensus contract when the response
is checked among all the peers in the verification/validation
phase.
2) Flow Verification: In the traditional SDN architecture,
when IoT devices initiate a new communication request,
the corresponding access switch sends the new packet with
source/destination IP, source/destination port ID, and proto-
col to the controller. It requires the controller with the global
view of the network to calculate the path. In BC-SDN, the
flow verification process initiates after the SDN controller
sends the flow rule back with verification initiation contract.
Instead of sending the flow rule back to the switch, the SDN
controller sends it to the corresponding BCA of the switch.
Then, the BCA VeIn will start flow verification by running a
verification initiation contract. This contract requires prepar-
ing the proposal and sending it to the other BCAs, namely,
verifiers. Here, the VeIn adopts a preset endorsement policy
to employ the verifier. The endorsement policy [38] requires
that the VeIn must obtain the inspection feedback of the new
flow rule from a certain number of verifiers, otherwise, the
endorsement is considered as failed. The endorsement policy
is crucial to justify if the Byzantine consensus mechanism is
reached. The actions of establishing and verifying/validating
a new flow rule are embedded in consensus contract within
the blockchain. Below, we explain these actions in more
depth.
1) An IoT device causes an SDN switch to initiate a
new flow establishment request when it sends a packet
with source IP/port information, destination IP/port
information, and flow conformance policy. The message
is formed as packet = <souIP, desIP, souPort, desPort,
Policy> without an existing flow rule, and this is sent
to the controller over a secure communication channel.
The controller calculates the path according to the packet
and generates new flow rules that it then forward them
to the corresponding BCA (VeIn). The ID of flow is fid
= hash(packet). This reply from the controller targets
BCA1.
a) The VeIn constructs a new flow proposal
<PROPOSAL, tx, Consig> and makes sure the new
flow proposal is properly formed; tx includes: the
ID of controller, ID of the flow, packet, ID of smart
contract, endorsement policy, and timestamp.
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2107
b) The VeIn’s credentials are used to produce a
signature ConSig = hash(tx) for this proposal.
2) The VeIn starts the verification of the new flow by
verification contract. The contract requires the VeIn
to employ verifier peers. Then, verifiers inspect the
signature ConSig and execute the new flow verification.
a) The verifiers check whether: the proposal is well
formed; it has not been submitted already in the
past (i.e., it is not some form of replay); the signa-
ture is valid; and the VeIn is properly authorized
to perform the proposed operation.
b) The verifiers use the new flow proposal as input to
invoke the verification contract.
c) The verification contract checks the new flow
against the flow conformance policy and asserts as
TRUE or FALSE accordingly. The response values
along with the verifiers’ signature first are passed
among the verifiers till the consensus is reached by
running the Byzantine consensus contract, and then
the responses of verifiers are passed back to the
VeIn as a “proposal response.” Byzantine consen-
sus requires the VeIn to receive enough verifiers’
“TRUE” response of the flow, i.e., the number
of verifiers satisfying the endorsement policy. All
the response values will be stored in blockchain’s
status database readset and writeset.
d) The response values along with the verifiers’ sig-
nature is passed back to the VeIn as a “pro-
posal response” ProRes = <TransactionEndorsed,
fid, TranProposal, epSig>, where TranProposal =
(epID, fid, chaincodeID, tx, readset, writeset).
e) If this new flow is invalid, then send message
<TransactionEndorsed, fid, REJECT, epSig> to the
VeIn.
Till here, the consensus contract completes and the VeIn
receives the consensus result from the verifiers. Note that
no changes are made to the flow ledger up to this point.
3) The proposal responses are then checked as follows.
a) The VeIn inspects the verifiers’ signature and con-
firms that the number of identical ProRes responses
reaches the number expected by the endorsement
policy.
b) If the VeIn only enquires of flow rules from the
flow ledger, then there is no need to update the
blockchain database, namely, the ordering service.
c) The VeIn checks if the endorsement policy has
been reached before the new flow is stored in the
ledger.
3) Flow Validation: In the flow validation phase, each BCA
appends the block with the new fid. After flow validation, all
the flow rules, no matter if they are legitimate or not, will be
stored in the flow ledger immutably, which provides evidence
to anomaly detection algorithms and applications.
1) To start validation initiation, the VeIn executes the
validation initiation contract to broadcast the pro-
posal <PROPOSAL> with <ProRes> in one mes-
sage broadcast = (PROPOSAL, ProRes) to all of the
BCAs.
2) When all the BCAs receive the proposal, the leader
selection procedure is triggered. We assume that VeIn
is the leader of the flow ledger updating. VeIn sends a
message deliver(seqno, prevhash, endorsement), where
seqno is the sequence number and prevhash is the hash
of the most recently delivered endorsement. VeIn orders
all the flow rules chronologically and creates blocks of
flow rules.
3) The blocks of flow rules are delivered to all BCAs. The
consensus contract is executed by all the BCAs as it is
in the verification consensus mechanism.
a) The BCAs verify the ID of consensus contract,
endorsement policy, and consistency of the status
database to avoid violations. They wait until all the
peer BCAs’ feedback to reach consensus.
b) If the checks pass, the flow rule is deemed valid or
committed. In this case, the BCAs set the bitmask
of the flow Ledger.
c) If the checks fail, the new flow establishment is
considered invalid and the BCA unsets the bitmask
of the flow Ledger. This invalid flow rule is still
stored until it is deleted by a periodic blockchain
function.
Up to this point, flow verification/validation is completed.
IV. SYSTEM MODEL
We use BaaS in BC-SDN, as described in Section III, the
BaaS is running over virtual resources rented from the edge
computing provider, independently from the SDN network.
The BaaS provides services to multiple organizations, one of
which is the SDN network. This means that the VeIn may
lack knowledge of the edge servers’ performance (and other
abilities). Thus, there is an information barrier between VeIn
and BaaS. In this article, we assume two scenarios, namely,
an ISS and an IAS. IAS leads to what is known as a moral
hazard [40]. The moral hazard is commonly solved by contract
theory in the field of economics. Motivated by the above, in
this article, we design two reward schemes for BaaS, which
can relieve the difficulty of the information barrier between
VeIn and the third-party BCAs.
In BC-SDN, flow verification/validation is provided by
BCAs and a contract is designed based on the outcome of
the verifiers. We consider N verifiers. Each verifier offers n
different execution latencies according to the reward, work-
load, CPU capability, and so on. The set of possible latency
values for flow verification and validation is denoted as
L = {l1, . . . , ln}, li ∈ L and the set of blocksizes as S =
{s1, . . . , sn}, si ∈ S with elements in S and L having one to
one correspondence. When a flow verification process is ini-
tiated, the VeIn presents a contract for the verifiers offering
a reward. Then, the verifiers have the option to either accept
the reward or reject it. According to the reward, the verifiers
exert the flow verification/validation latency. During this pro-
cedure, the verifier has to report its latency of execution to the
VeIn. We represent the honesty factor of a verifier by hi ∈ H,
where H = {h1, . . . , hn} is the set of honesty factors. The hon-
esty factor indicates the level of honesty of a verifier when it
2108 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
TABLE I
NOTATION AND DESCRIPTIONS
reports its performance to the VeIn. In this work, we propose
two reward mechanisms for the two scenarios studied here,
ISS and IAS. Let t be the reward mechanism indicator, where
t ∈ {t1, t2}. When t = t1, we consider ISS, and vice versa.
In ISS, VeIn can observe the effort, namely, the blocksize si,
to make a decision regarding the reward. Thus, we consider
the reward mechanism as contract Ct1(ri, si), where ri is the
reward of the ith verifier. In IAS, BCAs hide their true effort
blocksize si, so VeIn can only make a decision of the reward
by the latency li of BCAs. Thus, the contract is defined as
Ct2(ri, si), with t = t2 indicating IAS contract.
In this section, we first introduce the system model by ana-
lyzing the cost and income of the VeIn and verifiers. Then,
we define the employed utility functions of both the VeIn and
verifiers. Finally, we propose our solution based on contract
theory. Note we list the notations and descriptions in Table I.
A. Execution Cost of the Verifier
Consider verifiers who participate in BC-SDN and make
a choice of flow verification/validation latency. However, the
latency may not just be the consequence of the block it actu-
ally processes but may also be influenced by other tasks that
the verifiers choose to carry out. However, generally, we can
say that the execution cost of the verifier is related to the
blocksize. Similar to [19], the execution cost of a verifier is
defined in a quadratic form, which is thus convex and provides
a straightforward evaluation of the derivative. When verifiers
create a blocksize si, the execution cost of the verifier is
φ(si) = 1
2
αs2
i (1)
where α > 0 is the cost factor for the verifiers. The cost
function shows that there exists an optimal blocksize, which
could lead to the optimal cost.
B. Reward Plan for Verifier
We consider the set of rewards R = {r1, . . . , rn}, ri ∈ R.
We assume that verifiers with the same honesty factor have
the same reward. Thus, we define the reward to verifiers with
honesty factor hi as
wi =
{
riχi(hi, si), when t = t1
riχi(hi, li), when t = t2
(2)
where χi(·) is a function of verifiers with honesty factor hi’s
performance. The reward plan for verifiers in both scenarios
should respect the following: the bigger the honesty factor
is, the bigger the reward is. Moreover, for ISS, the bigger
the blocksize is, the bigger the reward is. On the contrary,
for IAS, the bigger the latency is, the smaller the reward is.
Therefore, the following conditions should hold when design-
ing the reward function: (∂χi/∂hi) > 0, (∂χi/∂li) < 0, and
(∂χi/∂si) > 0.
C. Income of VeIn
The income of VeIn depends on the contribution of the ver-
ifiers, i.e., the blocksize si and the honesty factor hi for ISS
and the latency li of flow verification/validation and the hon-
esty factor hi of the verifier for IAS. The income function of
VeIn Ii in terms of verifiers with honesty factor hi, blocksize
si, and latency li is given by
I t
i =
{
τ1f (hi)si, when t = t1
τ1f (hi) − τ2g(li, lmax), when t = t2
where τ1 > 0 and τ2 > 0 are the weighting of honesty and
the weighting of latency, respectively. The parameter lmax is
the maximum latency.
We should have (∂f (hi)/∂hi) > 0, (∂g(li, lmax)/∂li) > 0,
(∂Ii/∂hi) > 0, and (∂Ii/∂li) < 0. This means that the big-
ger is the honesty factor, the higher is the income. It also
means that larger latency leads to lower income. To simplify
the problem, we define the income function as
I t
i =
{
τ1hisi, when t = t1
τ1hi − τ2
li
lmax
, when t = t2.
(3)
V. PROBLEM FORMULATION
In this section, we analyze the ISS and IAS scenarios in
detail. In ISS, the VeIn is informed by the verifiers about
their efforts of executing a verification/validation task with
respect to their honesty factor. Therefore, in ISS, the VeIn can
optimize the reward according to the efforts of verifiers.
We also investigate IAS, which suffers a moral hazard. Since
in IAS, the VeIn does not have full knowledge of the verifiers,
it can only be informed from their performance, i.e., the execu-
tion latency of the verifiers. Thus, the IAS scenario leads to a
more complex problem to solve than the ISS scenario. The rest
of this section studies ISS and IAS scenarios in Sections V-A
and V-B, respectively.
A. Information Symmetric Scenario
In ISS, we assume that verifier i will report the actual effort,
i.e., the blocksize si considering a honesty factor hi. The hon-
esty of the verifier affects the income of the VeIn. We define
the utility function of the verifier as the income of the verifier
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2109
i minus the execution cost (1). Hence, it is
Ut1
i = risi − 1
2
αs2
i (4)
where the income of the verifier i is proportional to the
blocksize si. We also formulate the utility function of VeIn as
Ut1
v = βτ1hisi − risi (5)
where β > 0 is the VeIn’s income factor. We can then propose
a two stage optimization method. In the first stage, the verifier
considers the reward ri from VeIn as known and computes
the optimal blocksize si. In the second stage, the verification
initiator uses the optimal blocksize si
∗ and solves a second
optimization problem to compute the optimal reward ri
∗. This
formulation falls to the category of Stackelberg games, which
also means that Stackelberg game is information symmetric
between the VeIn and the verifiers.
Definition 1 (Stackelberg Equilibrium): The system
reaches the Stackelberg equilibrium, if and only if the
verifiers and the verification initiator reach the relationship
described by the following equations:
Ut1
i
(
ri, si
∗) > Ut1
i (ri, si) (6)
Ut1
v
(
ri
∗, si
∗) > Ut1
i
(
ri, si
∗). (7)
Following the Stackelberg equilibrium, we use the backward
induction algorithm [41] to determine the equilibria of the
subgames (6) first. The maximization problem for verifier i is
defined as
max
si
Ut1
i = risi − 1
2
αs2
i (8a)
s.t si< smax (8b)
where smax stands for the maximum blocksize. To calcu-
late the optimal blocksize, we set the first derivative of the
maximization problem in (8a) to zero. Hence, we obtain
∂Ut1
i
∂si
= ri − αsi = 0.
By solving this equation, we can determine the optimal block-
size si
∗ = (ri/α). We then substitute si
∗ in the utility function
of the VeIn and solve the second stage of the optimization
problem so that it respects (7)
max
ri,s∗i
Ut1
v = βτ1hi
ri
α
− ri
2
α
. (9a)
Following the same method with the first stage, we can obtain
the optimal reward by finding the derivative of the objective
function with respect to the reward and setting it equal to zero
∂Ut1
v
∂ri
= 1
α
βτ1hi − 2
ri
α
= 0.
Therefore, we can calculate the optimal reward and the
blocksize by the following equations:
r∗
i = 1
2
βτ1hi (10)
s∗
i = 1
2α
βτ1hi. (11)
We can observe from (10) and (11) that the honesty factor hi
is proportional to both the reward and the blocksize.
B. Information Asymmetric Scenario
In this scenario, the VeIn considers the honesty and latency
of the verifiers provide. Therefore, according to the income
of VeIn in (3), we define the utility function of VeIn as
the gross income minus the reward plan w to the verifier.
Due to the uncertainty of the verifiers’ behavior, we define
that verifiers with honesty factor hi choose latency li with
probability pi. We denote the discrete set of probabilities
P = {p1, . . . , pn}, with
∑n
i=1 pi = 1, where pi ∈ P is the
probability the verifier to choose a blocksize si ∈ S that results
to a latency li. Similar to the ISS case, the utility of the ver-
ifier is defined as the reward plan minus the execution cost.
Meanwhile, we assume that verifiers who choose the same
latency li have the same honesty factor. Thus, the verifier’s
utility is defined as
Ut2
i = riχi(hi, li) − 1
2
αs2
i . (12)
Let us assume that the total number of verifiers is N. The
VeIn’s utility function is given by
Ut2
v =
n∑
i=1
Npi[βIi(hi, li) − riχi(hi, li)] (13)
recall β is the income factor of the VeIn. For IAS, the
optimization problem is defined as
max
ri,li
n∑
i=1
Npi[βIi(hi, li) − riχi(hi, li)] (14a)
s.t riχi(hi, li) − 1
2
αs2
i ≥ rjχi(hi, li) − 1
2
αs2
j (14b)
riχi(hi, li) − 1
2
αs2
i ≥ σ (14c)
i �= j (14d)
where σ is reservation utility, which is the minimum profit
that must be guaranteed by the contract to make it acceptable
to the verifiers. Note that without loss of generality, we set
σ = 0 to simplify the problem. Equation (14b) is the individual
compatibility (IC) for verifiers, which means that by exert-
ing the optimal blocksize, it can obtain the optimal reward.
Equation (14c) is the individual rational (IR) that requires the
utility of the verifier is positive. For the sake of simplicity of
representation, we omit the arguments of χ(·) function when
they do not affect the calculations.
Lemma 1 (Monotonicity): If we have for the income
function χi ≥ χj, ∀i, j ∈ {1, . . . , n}, the reward satisfies
ri ≥ rj.
Proof: This lemma is a direct application of (14b). Thus,
for i, j ∈ {1, . . . , n}, we get
riχi − 1
2
αs2
i ≥ rjχi − 1
2
αs2
j (15)
rjχj − 1
2
αs2
j ≥ riχj − 1
2
αs2
i . (16)
By adding inequalities (15) and (16), we find that(
ri − rj
)(
χi − χj
) ≥ 0. (17)
2110 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
Lemma 2: If the utility function of the verifier with χ1
satisfies the IR constraint, then this holds for ∀i ∈ {1, . . . , n}.
Proof: Let us assume that χ1 < · · · < χi < · · · < χn,
then according to Lemma 1, we derive
riχi − 1
2
αs2
i ≥ r1χi − 1
2
αs2
1 (18)
r1χi − 1
2
αs2
1 ≥ r1χ1 − 1
2
αs2
1. (19)
By adding (18) and (19), we get
riχi − 1
2
αs2
i ≥ r1χ1 − 1
2
αs2
1. (20)
From (20), we can derive that if r1χ1 − (1/2)αs2
1 > 0, then
IR in (14c) holds.
If we consider i ∈ {1, . . . , n} and i − 1 < i < i + 1, then
there are n(n−1) constraints [these replace (14b)] of the form
riχi − 1
2
αs2
i ≥ ri−1χi − 1
2
αs2
i−1 (21)
riχi − 1
2
αs2
i ≥ ri+1χi − 1
2
αs2
i+1. (22)
Definition 2 (Local Upward and Downward Constraints):
If verifiers with χi prefer contract (ri, li) to (ri+1, li+1), then
the local upward constraint for χi is satisfied, as shown
in (22). Similarly, if verifiers with χi prefer contract (ri, li)
to (ri−1, li−1), then the local downward constraint for χi is
satisfied, as shown in (21).
Lemma 3: Local downward compatibility is reached as
follows:
riχi − 1
2
αs2
i ≥ ri−1χi−1 − 1
2
αs2
i−1. (23)
Proof: We assume that χi−1 < χi < χi+1, then according
to the IC constraint, we have
ri+1χi+1 − 1
2
αs2
i+1 ≥ riχi+1 − 1
2
αs2
i (24)
riχi − 1
2
αs2
i ≥ ri−1χi − 1
2
αs2
i−1. (25)
According to Lemma 1, we have
(χi+1 − χi)(ri − ri−1) ≥ 0
=⇒ χi+1(ri − ri−1) ≥ χi(ri − ri−1).
(26)
By combining (25) and (26), we get
riχi+1 − 1
2
αs2
i ≥ ri−1χi+1 − 1
2
αs2
i−1. (27)
Then, by combining (24) and (27), we find that
ri+1χi+1 − 1
2
αs2
i+1 ≥ ri−1χi+1 − 1
2
αs2
i−1. (28)
Finally, by expanding (28), we get
ri+1χi+1 − 1
2
αs2
i+1 ≥ ri−1χi+1 − 1
2
αs2
i−1
· · · ≥ r1χ1 − 1
2
αs2
1 (29)
which completes the proof.
Lemma 4: Upward local incentive is satisfied in the
proposed problem as follows:
riχi − 1
2
αs2
i ≥ ri+1χi − 1
2
αs2
i+1. (30)
Proof: We can prove Lemma 4 in the same way as
Lemma 3.
In the optimization problem (14), constraint (14b) includes
n(n − 1)/2 upward local incentive and n(n − 1)/2 downward
local incentive conditions. Additionally, constraint (14c) con-
sists n IR constraints. By applying the lemmas we proved
previously, we can reduce the constraints as follows.
We know that in order to maximize the utility of VeIn,
we need to provide the minimum reward to verifiers, which
leads to the minimum utility of the verifier in (14c) as r1χ1 −
(1/2)αs2
1 = 0. Therefore, (14c) can be reduced. Moreover,
for (14b), if rewards ri and ri−1 lower the utility value by the
same amount and the downward local incentive still holds, then
eventually it can reach riχi − (1/2)αs2
i = ri−1χi − (1/2)αs2
i−1
because we have
riχi − 1
2
αs2
i = ri−1χi − 1
2
αs2
i−1. (31)
Since monotonicity holds, when χi ≥ χi−1, it is also ri ≥ ri−1,
so we have
χi(ri − ri−1) ≥ χi−1(ri − ri−1). (32)
By adding (31) and (32), we derive
1
2
αs2
i − 1
2
αs2
i−1 ≥ χi−1(ri − ri−1)
riχi−1 − 1
2
αs2
i ≤ ri−1χi−1 − 1
2
αs2
i−1. (33)
By observing (33), we note that it is the same as Lemma 4.
Thus, constraint in (14b) can be reduced as (31). Therefore,
we can propose the new optimization problem as follows:
max
ri,li
n∑
i=1
Npi[βIi(hi, li) − riχi(hi, li)] (34a)
s.t riχi(hi, li) − 1
2
αs2
i = ri−1χi(hi, li) − 1
2
αs2
i−1 (34b)
r1χ1(h1, l1) − 1
2
αs2
1= 0. (34c)
By solving (34c), we can obtain
r1 = αs1
2
χ1
.
Then, by solving recursively (34b), we can find
ri = αs1
2
χ1
+
i∑
q=2
(
αsq
2
χq
− αsq−1
2
χq
)
.
As blocksize and latency have a linear relation, we can
substitute blocksize with latency without losing optimality
ri = αl12
χ1
+ α
i−1∑
q=1
(
lq+1
2 − lq2
χq+1
)
. (35)
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2111
Let us define
gq =
i−2∑
q=1
lq+1
2 − lq2
χq+1
. (36)
Then, we can substitute ri in (34a) and the objective function
becomes
Ut2
v =
n∑
i=1
NpiβIi − Nα
n∑
i=1
pi
×
[(
l12
χ1
+ gq
)(
τ1hi − τ2
li
lmax
)
+ li
2 − li−1
2
]
. (37)
We can calculate the derivatives of the utility function
in (37) with respect to li as follows:
∂Ut2
v
∂li
= −Npiβ
τ2
lmax
− Nαpi
[
− τ2
lmax
(
l12
χ1
+ gq
)
+ 2li
]
∂Ut2
v
2
∂li2
= −Nαpi2 < 0. (38)
From (38), we can see that (∂Ut2
v
2
/∂li2) < 0, thus the objective
function/ utility function of VeIn is concave. Furthermore, as
the constraints are all affine, the optimal value of latency li
and reward ri can be computed using an optimization solver
such as CVX [42]. We would like to note that by using the
proposed scheme, the verifiers can be stimulated by the reward
and conduct the flow verification/validation.
VI. EXPERIMENTAL EVALUATION
In this section, we numerically evaluate the performance of
the proposed reward schemes in BC-SDN. We consider that
BCAs work as both verifiers and validators in the proposed
architecture. In the following, we first introduce the benchmark
solutions. Then, we evaluate the performance of the proposed
reward schemes with respect to the cost factor of verifiers α,
the income factor of VeIn β, the number of verifiers N, and
the probability p of blocklength selection which is proportional
to latency. In the simulation set up, we consider a group of
verifiers and different numbers of χ values, in which χi stands
for the combination of latency li and honesty factor hi. The
key parameters used in the evaluation are listed in Table II.
In the simulations, we consider these values unless otherwise
stated.
To evaluate the performance of the proposed reward scheme,
we introduce the concept of “social welfare” ω of the BaaS
service and defined as the profit of the verifiers and VeIn.
Thus, the social welfare is
ω =
n∑
i=1
Ui + Uv. (39)
Social welfare is a rational way to analyze if the contract
can maximize the total utilities, where the utility indicates
the preference of VeIn and the verifiers choosing and con-
suming the contracts and resources, respectively, which leaves
utility without unit. Social welfare also indicates the BCAs’
resource utilization of the edge. For the sake of compari-
son, we compare the proposed reward scheme with a solution
TABLE II
SIMULATION SETTINGS
Fig. 4. Utility of VeIn with respect to honesty factor hi.
based on the Stackelberg game. We examine the ISS scenario
described in Section V-A, where VeIn knows the true effort
si of the verifiers. We also investigate the IAS scenario, as
discussed in Section V-B, where the VeIn is only aware of the
performance, namely, latency li, of the verifier. Our evalua-
tions attempt to capture the impact of honesty on the derived
solutions. Specifically, the ISS scenario can be seen as a spe-
cial subcase of the IAS scenario, whereas in ISS, VeIn and
the verifiers share the same information while deciding the
optimal blocksize, for example. Finally, we also compare our
scheme against the fixed reward scheme proposed in [43].
1) Utility of VeIn With Respect to the Honesty Factor: We
evaluate the utility of VeIn with respect to the honesty factor
hi. We assume ten verifiers (i.e., N = 10) with four values of
honesty factors, i.e., h1, h3, h4, h6 ∈ H as defined in Table II.
From Fig. 4, we can note that the utility of VeIn reaches its
maximum when the corresponding contract is obtained, i.e.,
when h4 with contract Ct2(r4, l4) can allow the utility to be
the maximum. Note that, in practice, we actually consider χi,
which is a combination of both latency li and honesty hi, for
convenience here we have considered the case where h1 <
h3 < h4 < h6. This result verifies IC in (14b), i.e., for verifiers
with χi, there is one, and only one, optimum contract item.
2) IAS’s Social Welfare With Respect to β: We examine the
social welfare of IAS with respect to the VeIn’s income factor
2112 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
Fig. 5. Social welfare with respect to income factor β.
β. In Fig. 5, we consider different numbers of latency and
honesty factors’ combinations. From this evaluation, we can
observe that with increasing income factor β, social welfare
also increases. Second, we note that when the number n of
combinations increases, the social welfare decreases. This is
due to the fact that increasing the number of combinations, n,
adds uncertainty to the system, which leads to a higher cost
of VeIn, and causes social welfare degradation.
3) Impact of α to the Social Welfare: In Fig. 6, we compare
the social welfare of the proposed IAS, ISS, and fixed salary
scheme with respect to the cost factor α. We simulate IAS
with two kinds of combination χ and four kinds of combi-
nation χ . Note that parameter n means that the verifiers have
n different probabilities to choose from these combinations.
From the simulation results, we can see that as α increases,
the social welfare decreases. The reason for this behavior is
that the larger the cost factor is, the larger the cost of the ver-
ifier is, which means that it is going to cost more to maintain
the same blocksize. However, the IAS achieves higher social
welfare when α is about 1.3. This is due to the fact that in IAS,
the verifiers can choose a smaller blocksize to compensate the
execution cost in order to maintain social welfare.
4) Impact of the Number of Verifiers to the Social Welfare:
We also analyze the social welfare of ISS, and IAS with
respect to the number of verifiers N. The results are illus-
trated in Fig. 7. We consider verifiers have honesty factor h6
and latency l6, and have different numbers of verifiers for ISS
and IAS. We apply the setting of three different combinations
of χ , i.e., χ5, χ6, and χ7. As we can observe from the fig-
ure, the social welfare increases when the number of verifiers
increases. Note that the least social welfare is observed for
IAS. This is attributed to the fact that VeIn has no knowledge
of the verifiers’ real effort in executing the application. From
this, we can conclude that the IAS costs more than the ISS to
the VeIn.
5) Impact of the Probability Distributions of Latency to
the Utility of VeIn: In Fig. 8, we investigate the impact
Fig. 6. Social welfare with respect to cost factor α.
Fig. 7. Social welfare with respect to the number of verifiers N.
of different probability distributions of latency on the util-
ity of the VeIn under IAS. We consider five combinations
of χ and ten verifiers in this simulation. For the com-
parisons, we assume a uniform distribution with P =
{0.2, 0.2, 0.2, 0.2, 0.2}, an affine distribution with P =
{0.35, 0.3, 0.2, 0.1, 0.05}, and also a discrete Gaussian dis-
tribution with P = {0.1, 0.15, 0.5, 0.15, 0.1}. As is shown
in Fig. 8, the Gaussian distribution achieves the maximum
utility for χ5 setting. In addition, we evaluate (Fig. 9) the
utility of VeIn with respect to the number of verifiers for
the considered probability distributions. We consider a range
of verifiers [10, 14], corresponding to the deployment in a
regional edge network. As we can observe from Fig. 9, the
utility of VeIn increases for all distributions when the num-
ber of verifiers increases. This comparison also shows that the
proposed reward scheme can cope with different scenarios in a
real-world situation. In this setting, the discrete Gaussian dis-
tribution achieves the highest utility among three distributions,
followed by the uniform distribution and the affine distribu-
tion. The reason for this is that the utility of VeIn increases
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2113
Fig. 8. Utility of VeIn with respect to different probability distribution of
χ ’s combinations.
Fig. 9. Utility of VeIn with respect to the number of verifiers under different
probability distribution of χ ’s combinations.
when the combination χ ’s index i increases, which is also the
case of monotonicity in Lemma 1.
6) Edge-Blockchain Performance in Terms of Blocksize:
We analyze the edge-blockchain performance by considering
the blocksize in the ISS and IAS scenarios in Fig. 10 with a
fixed reward budget. Blocksize can represent the flow confor-
mance task volume on the edge servers. For ISS, from (11),
we know that in ISS, the optimal blocksize only relates to the
reward. When more verifiers join the verification, the reward to
each individual decreases, which leads to a decrease of block-
size. For IAS, we assume five combinations of χ with a limited
reward budget. We observe that when the number of verifiers
increases, the average blocksize in both scenarios decreases
due to fixed reward. Limited reward budget leads to verifiers
choosing different contracts. We also add a range indicator to
the IAS case to show the biggest and largest blocksizes (the
blocksize does not change in the ISS case). The smallest IAS
blocksize is always the same as there are only five contracts
Fig. 10. Blocksize for the ISS and IAS scenarios with respect to the number
of verifiers. Note that there is variance in the IAS case due to varying solutions
with maximum and minimum shown on the graph.
Fig. 11. Evolution of reward scheme with respect to number of χ ’s
combinations.
to choose from. When there are 14 verifiers, they can only
choose between two contracts due to the limited reward bud-
get. We also observe that the ISS often has larger blocksizes
than the IAS, particularly as the number of verifiers increases
(with a constrained budget).
7) Impact of the Number of Combinations χ in Terms
of Latency: Finally, we investigate the complexity of the
proposed IAS with respect to the number of the combina-
tions of latency li and honesty hi factor values, i.e., χi. We
should emphasize that here we are interested in the relation-
ship of the computational complexity to the size of the problem
rather than the absolute runtimes. We leave the design of a
fast heuristic to future work. To investigate this relationship,
we use CVX [42] to solve the proposed optimization problem
shown in (14b). The results are depicted in Fig. 11. From
this comparison, we can see that the proposed reward scheme
is bounded by the number of χi’s combinations and that the
2114 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 4, FEBRUARY 15, 2021
execution latency grows only linearly with the number of χ
combinations. Furthermore, this comparison makes clear that
the computational complexity of the solution will not be high.
VII. CONCLUSION
In this article, we have investigated a novel security solution
for SDN supported by edge blockchain, which interconnects
IoT networks. We proposed an architecture for blockchain-
based software-defined networks. Then, we suggested the
workflow of the flow verification and validation according
to the architecture of BC-SDN. To support blockchain tech-
nology, we deployed BCAs with edge computing servers to
reduce the computational burden on the IoT systems. Owing
to the fact that we use BaaS, we have designed two reward
schemes for ISS and IAS to tackle the potential moral haz-
ard caused by BCAs hosted by a third-party edge computing
provider. By using the proposed reward scheme based on
contract theory, we can determine the optimal blocksize and
latency of the blockchain and the corresponding reward value.
Finally, we evaluated our system to demonstrate the impact
of different parameters using two different incentive mecha-
nisms. The results showed that the proposed reward scheme
can achieve good social welfare. For our future work, we
will consider how different flow conformance policies can be
implemented within a smart contract.
REFERENCES
[1] S. Bera, S. Misra, and A. V. Vasilakos, “Software-defined networking
for Internet of Things: A survey,” IEEE Internet Things J., vol. 4, no. 6,
pp. 1994–2008, Dec. 2017.
[2] J. L. Hernández-Ramos, G. Baldini, R. Neisse, M. Al-Naday, and
M. J. Reed, “A policy-based framework in Fog enabled Internet of
Things for cooperative ITS,” in Proc. Global IoT Summit (GIoTS),
Jun. 2019, pp. 1–7.
[3] E. Gelenbe, J. Domanska, T. Czàchorski, A. Drosou, and D. Tzovaras,
“Security for Internet of Things: The Seriot project,” in Proc. IEEE Int.
Symp. Netw. Comput. Commun. (ISNCC), 2018, pp. 1–5.
[4] P. Amangele, M. J. Reed, M. Al-Naday, N. Thomos, and M. Nowak,
“Hierarchical machine learning for IoT anomaly detection in SDN,” in
Proc. IEEE Int. Conf. Inf. Technol. (InfoTech), 2019, pp. 1–4.
[5] A. Abdou, P. C. van Oorschot, and T. Wan, “Comparative analysis
of control plane security of SDN and conventional networks,” IEEE
Commun. Surveys Tuts., vol. 20, no. 4, pp. 3542–3559, 4th Quart., 2018.
[6] X. Wang, X. Li, S. Pack, Z. Han, and V. C. Leung, “STCS:
Spatial–temporal collaborative sampling in flow-aware software defined
networks,” IEEE J. Sel. Areas Commun., vol. 38, no. 6, pp. 999–1013,
Apr. 2020.
[7] J. Hu, M. Reed, M. Al-Naday, and N. Thomos, “Blockchain-aided flow
insertion and verification in software defined networks,” in Proc. IEEE
Global Internet Things Summit (GIoTS), 2020, pp. 1–6.
[8] T. T. A. Dinh, J. Wang, G. Chen, R. Liu, B. C. Ooi, and K.-L. Tan,
“BlockBench: A framework for analyzing private blockchains,” in Proc.
ACM Int. Conf. Manag Data, 2017, pp. 1085–1100.
[9] C. Qiu, X. Wang, H. Yao, J. Du, F. R. Yu, and S. Guo, “Networking
integrated cloud-edge-end in IoT: A blockchain-assisted collective Q-
learning approach,” IEEE Internet Things J., early access, Jul. 7, 2020,
doi: 10.1109/JIOT.2020.3007650.
[10] M. Samaniego and R. Deters, “Blockchain as a service for IoT,” in
Proc. IEEE Int. Conf. Internet Things (iThings) IEEE Green Comput.
Commun. (GreenCom) IEEE Cyber Phys. Soc. Comput. (CPSCom) IEEE
Smart Data (SmartData), 2016, pp. 433–436.
[11] P. Bolton et al., Contract Theory. Cambridge, MA, USA: MIT Press,
2005.
[12] M. P. Singh and A. K. Chopra, “Computational governance and vio-
lable contracts for blockchain applications,” Computer, vol. 53, no. 1,
pp. 53–62, 2020.
[13] T.-T. Kuo, H.-E. Kim, and L. Ohno-Machado, “Blockchain distributed
ledger technologies for biomedical and health care applications,” J.
Amer. Med. Inf. Assoc., vol. 24, no. 6, pp. 1211–1220, 2017.
[14] V. Hassija, V. Chamola, S. Garg, N. G. K. Dara, G. Kaddoum, and
D. N. K. Jayakody, “A blockchain-based framework for lightweight data
sharing and energy trading in V2G network,” IEEE Trans. Veh. Technol.,
vol. 69, no. 6, pp. 5799–5812, Jun. 2020.
[15] S. Rathore, B. W. Kwon, and J. H. Park, “BlockSecIoTNet: Blockchain-
based decentralized security architecture for IoT network,” J. Netw.
Comput. Appl., vol. 143, pp. 167–177, Oct. 2019.
[16] S. Boukria, M. Guerroumi, and I. Romdhani, “BCFR: Blockchain-based
controller against false flow rule injection in SDN,” in Proc. IEEE Symp.
Comput. Commun. (ISCC), 2019, pp. 1034–1039.
[17] A. Yazdinejad, R. M. Parizi, A. Dehghantanha, and K.-K. R. Choo,
“Blockchain-enabled authentication handover with efficient privacy pro-
tection in SDN-based 5G networks,” IEEE Trans. Netw. Sci. Eng., early
access, Aug. 28, 2019, doi: 10.1109/TNSE.2019.2937481.
[18] C. Qiu, F. R. Yu, H. Yao, C. Jiang, F. Xu, and C. Zhao,
“Blockchain-based software-defined industrial Internet of Things: A
dueling deep Q-learning approach,” IEEE Internet Things J., vol. 6,
no. 3, pp. 4627–4639, Sep. 2018.
[19] J. Hu, K. Yang, L. Hu, and K. Wang, “Reward-aided sensing task exe-
cution in mobile crowdsensing enabled by energy harvesting,” IEEE
Access, vol. 6, pp. 37604–37614, 2018.
[20] S. Shen, Y. Han, X. Wang, and Y. Wang, “Computation offloading with
multiple agents in edge-computing–supported IoT,” ACM Trans. Sensor
Netw., vol. 16, no. 1, pp. 1–27, 2019.
[21] K. Yang, S. Ou, and H.-H. Chen, “On effective offloading services
for resource-constrained mobile devices running heavier mobile Internet
applications,” IEEE Commun. Mag., vol. 46, no. 1, pp. 56–63, Jan. 2008.
[22] K. Wang, K. Yang, and C. S. Magurawalage, “Joint energy minimization
and resource allocation in C-RAN with mobile cloud,” IEEE Trans.
Cloud Comput., vol. 6, no. 3, pp. 760–770, Jan. 2016.
[23] X. Hu, K.-K. Wong, and K. Yang, “Wireless powered cooperation-
assisted mobile edge computing,” IEEE Trans. Wireless Commun.,
vol. 17, no. 4, pp. 2375–2388, Jul. 2018.
[24] P. K. Sharma, M.-Y. Chen, and J. H. Park, “A software defined fog node
based distributed blockchain cloud architecture for IoT,” IEEE Access,
vol. 6, pp. 115–124, 2017.
[25] P. K. Sharma, S. Singh, Y.-S. Jeong, and J. H. Park, “DistBlockNet:
A distributed blockchains-based secure SDN architecture for IoT
networks,” IEEE Commun. Mag., vol. 55, no. 9, pp. 78–85, Sep. 2017.
[26] P. K. Sharma, S. Rathore, Y.-S. Jeong, and J. H. Park, “SoftEdgeNet:
SDN based energy-efficient distributed network architecture for edge
computing,” IEEE Commun. Mag., vol. 56, no. 12, pp. 104–111,
Sep. 2018.
[27] K. Kataoka, S. Gangwar, and P. Podili, “Trust list: Internet-wide and
distributed IoT traffic management using blockchain and SDN,” in Proc.
IEEE 4th World Forum Internet Things (WF-IoT), 2018, pp. 296–301.
[28] Z. Xiong, S. Feng, D. Niyato, P. Wang, and Z. Han, “Optimal pricing-
based edge computing resource management in mobile blockchain,” in
Proc. IEEE Int. Conf. Commun. (ICC), 2018, pp. 1–6.
[29] A. Stanciu, “Blockchain based distributed control system for edge com-
puting,” in Proc. IEEE 21st Int. Conf. Control Syst. Comput. Sci. (CSCS),
2017, pp. 667–671.
[30] J. Yang, Z. Lu, and J. Wu, “Smart-toy-edge-computing-oriented data
exchange based on blockchain,” J. Syst. Architect., vol. 87, pp. 36–48,
Mar. 2018.
[31] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Distributed
resource allocation in blockchain-based video streaming systems with
mobile edge computing,” IEEE Trans. Wireless Commun., vol. 18, no. 1,
pp. 695–708, Dec. 2018.
[32] M. Liu, R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Performance
optimization for blockchain-enabled industrial Internet of Things (IIoT)
systems: A deep reinforcement learning approach,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3559–3570, Jun. 2019.
[33] Y. Zhang, M. Pan, L. Song, Z. Dawy, and Z. Han, “A survey of contract
theory-based incentive mechanism design in wireless networks,” IEEE
Wireless Commun., vol. 24, no. 3, pp. 80–85, Feb. 2017.
[34] J. Kang, Z. Xiong, D. Niyato, D. Ye, D. I. Kim, and J. Zhao, “Toward
secure blockchain-enabled Internet of Vehicles: Optimizing consensus
management using reputation and contract theory,” IEEE Trans. Veh.
Technol., vol. 68, no. 3, pp. 2906–2920, Jan. 2019.
[35] Y. Zhang, Y. Gu, M. Pan, N. H. Tran, Z. Dawy, and Z. Han, “Multi-
dimensional incentive mechanism in mobile crowdsourcing with moral
hazard,” IEEE Trans. Mobile Comput., vol. 17, no. 3, pp. 604–616,
Mar. 2018.
http://dx.doi.org/10.1109/JIOT.2020.3007650
http://dx.doi.org/10.1109/TNSE.2019.2937481
HU et al.: SECURING SDN-CONTROLLED IOT NETWORKS THROUGH EDGE BLOCKCHAIN 2115
[36] V. Hassija, V. Chamola, G. Han, J. J. Rodrigues, and M. Guizani,
“DAGIoV: A framework for vehicle to vehicle communication using
directed acyclic graph and game theory,” IEEE Trans. Veh. Technol.,
vol. 69, no. 4, pp. 4182–4191, Jan. 2020.
[37] T. Taleb, K. Samdanis, B. Mada, H. Flinck, S. Dutta, and D. Sabella,
“On multi-access edge computing: A survey of the emerging 5G network
edge cloud architecture and orchestration,” IEEE Commun. Surveys
Tuts., vol. 19, no. 3, pp. 1657–1681, 3rd Quart., 2017.
[38] C. Cachin et al., “Architecture of the hyperledger blockchain fabric,” in
Proc. Workshop Distrib. Cryptocurrencies Consensus Ledgers, vol. 310,
2016, p. 4.
[39] V. Gramoli, “From blockchain consensus back to byzantine consensus,”
Future Gener. Comput. Syst., vol. 107, pp. 760–769, Sep. 2020.
[40] B. Hölmstrom, “Moral hazard and observability,” Bell J. Econ., vol. 10,
no. 1, pp. 74–91, 1979.
[41] M. J. Osborne et al., An Introduction to Game Theory, vol. 3. New York,
NY, USA: Oxford Univ. Press, 2004.
[42] M. Grant and S. Boyd, “CVX: MATLAB software for disciplined convex
programming, version 2.1,” 2014.
[43] J. Hu, K. Yang, K. Wang, and K. Zhang, “A blockchain-based reward
mechanism for mobile crowdsensing,” IEEE Trans. Comput. Soc. Syst.,
vol. 7, no. 1, pp. 178–191, Feb. 2020.
Jiejun Hu received the M.Sc. and Ph.D. degrees
from the School of Computer Science and
Technology, Jilin University, Changchun, China, in
2015 and 2019, respectively.
She is currently a Senior Research Officer with
the University of Essex, Colchester, U.K. Her
research interests include mobile crowdsensing,
communication networks, future network technol-
ogy, blockchain, and network security.
Martin Reed (Member, IEEE) received the Ph.D.
degree from the University of Essex, Colchester,
U.K., in 1998.
He is currently an Associate Professor with
the University of Essex. His research interests
include network control planes, information cen-
tric networking, network security, and multimedia
networking. He has been involved in a number of
EPSRC, EU, and industrial projects in these areas,
which have made contributions to IETF and 3GPP
5G standards. He has held a Research Fellowship
at BT in the area of access networks. He has led a number of international
research testbeds that demonstrate and evaluate novel networking protocols
and architectures.
Nikolaos Thomos (Senior Member, IEEE) received
the Diploma and Ph.D. degrees from the Aristotle
University of Thessaloniki, Thessaloniki, Greece, in
2000 and 2005, respectively.
He was a Senior Researcher with the École
Polytechnique Fédérale de Lausanne, Lausanne,
Switzerland, and the University of Bern, Bern,
Switzerland. He is currently an Associate Professor
with the University of Essex, Colchester, U.K.,
and the Group Leader of the Communications and
Networks Group. His research interests include
machine learning for communications, multimedia communications, network
coding, information-centric networking, source and channel coding, device-
to-device communication, and signal processing.
Dr. Thomos received the highly esteemed Ambizione Career Award from
the Swiss National Science Foundation. He is an Elected Member of the IEEE
MMSP Technical Committee from 2019 to 2022.
Mays F. Al-Naday (Member, IEEE) received
the Ph.D. degree from the University of Essex,
Colchester, U.K., in 2015.
She worked as a Senior Research Officer
with the Network Convergence Laboratory (NCL),
University of Essex, where she is currently a
Lecturer with the School of Computer Science and
Electronic Engineering. Her research focuses on
future network architectures, including microservice
architectures, IoT communications, fog computing,
next-generation content delivery networks and secu-
rity, and quality of service in 5G and beyond. She has been the organizer of
prestigious workshops in Sigcomm 17-18 and IFIP 17. She has actively con-
tributed to a number of EU research projects in the area of future networking
architectures.
Kun Yang (Senior Member, IEEE) received the
Ph.D. degree from the Department of Electronic and
Electrical Engineering, University College London
(UCL), London, U.K., in 2000.
He worked at UCL on several European Union
(EU) research projects for several years. He is
currently a Chair Professor with the School of
Computer Science and Electronic Engineering,
University of Essex, Colchester, U.K., where he
leading the Network Convergence Laboratory. His
main research interests include wireless networks
and communications, IoT networking, data and energy integrated networks,
and mobile-edge computing. He manages research projects funded by various
sources, such as U.K. EPSRC, EU FP7/H2020, and industries. He has pub-
lished over 150 journal papers and filed ten patents.
Dr. Yang serves on the editorial boards of both IEEE and non-IEEE journals.
He has been a Fellow of IET since 2009.
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice