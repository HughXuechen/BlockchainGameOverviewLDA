Optimal Computation Resource Allocation in Vehicular Edge Computing
Optimal Computation Resource
Allocation in Vehicular Edge Computing
Shiyu Du1, Qibo Sun1(B), Jujuan Gu2, and Yujiong Liu1
1 Beijing University of Posts and Telecommunications, Beijing 100876, China
{dsy,qbsun,yjliu}@bupt.edu.cn
2 The 54th Research Institute of CETC, Shijiazhuang 050000, China
gujujuan@163.com
Abstract. Vehicular edge computing is proposed as a new promising
paradigm that provides cloud computation capabilities in close proxim-
ity to vehicles, which can augment the capabilities of vehicles. In this
paper, we study the problem of computation resource allocation of edge
servers for a vehicular edge computing system. We consider the con-
straint of limited computation resource of edge servers and vehicles can
decide that vehicular applications are locally executed or offloaded to
edge servers for execution to minimize the completion time of appli-
cations. We model the problem as a Stackelberg game and then prove
the existence of Nash equilibrium of the game. Furthermore, we propose
an algorithm to compute the Nash equilibrium effectively. Numerical
simulation results demonstrate that our proposed algorithm can greatly
reduce the average completion time for all applications and outperform
the benchmark approaches.
Keywords: Local and Edge Equilibrium Computing · Computation
resource allocation · Vehicular edge computing · Game theory · Nash
equilibrium
1 Introduction
With the development of Internet of Things and wireless communication technol-
ogy, vehicles can offer a variety of computation-intensive and delay-sensitive appli-
cations, which require massive computation resources. However, the resource-
constrained vehicles are difficult to meet the computation resources requirements
of applications. Vehicular edge computing (VEC) is proposed as a promising
paradigm that provides cloud computation capabilities in close proximity to vehi-
cles [1]. In VEC system, edge cloud resources are deployed on Road Side Units
(RSUs). Each vehicle can offload its application to RSUs for execution [2,3].
There has been some research work on VEC. The authors in [4] proposed a
contract-based computation resource allocation scheme to enhance the utilities of
the mobile edge computing service providers. In [5], the authors proposed a dis-
tributed reputation management system, which can impact the resource alloca-
tion policy. In [6], the authors developed an energy-efficient computation offload-
ing scheme, which jointly optimized computation offloading decisions. Existing
c© Springer Nature Singapore Pte Ltd. 2020
Z. Zheng et al. (Eds.): BlockSys 2019, CCIS 1156, pp. 422–427, 2020.
https://doi.org/10.1007/978-981-15-2777-7_34
http://crossmark.crossref.org/dialog/?doi=10.1007/978-981-15-2777-7_34&domain=pdf
https://doi.org/10.1007/978-981-15-2777-7_34
Optimal Computation Resource Allocation in Vehicular Edge Computing 423
research generally consider that mobile edge computing servers on one RSU have
infinite computation resources. However, the edge servers on one RSU always
have limited computation resources, which is unable to meet the computation
resource requirements of extensive vehicles.
To overcome the above problem, in this paper, we consider the constraints of
limited computation resource of edge servers and the interaction between edge
cloud resource providers and vehicles. Vehicles can decide that vehicular applica-
tions are locally executed or offloaded to edge servers on one RSU for execution
to minimize the completion time of applications. We model the problem as a
Stackelberg game which vehicles are leaders and the RSU is the follower. Under
the vehicle-specific parameter of the optimal computation resource allocation
strategy, the original game between vehicles can be transformed into a weighted
congestion game. Next, we prove the existence of Nash equilibrium (NE) of the
Stackelberg game, propose an algorithm to compute a NE. Finally, we show
the numerical simulation results to prove that average completion time of all
vehicular applications is greatly reduced using our proposed algorithm.
The rest of the paper is organized as follows. We describe system model and
formulate the problem in Sect. 2. We prove the existence of NE of the Stackelberg
game and propose an algorithm in Sect. 3. We present the numerical simulation
results in Sect. 4. Finally, we conclude the paper in Sect. 5.
2 System Model and Problem Formulation
2.1 System Model
We consider that there are N RSUs located along a unidirectional road, the
set of RSUs is denoted as N = {1, 2, · · · , N}. Each RSU is equipped with an
edge server. The set of computation capabilities of RSUs can be denoted as{
F 1, F 2, · · · , FN
}
. Based on the limited coverage range of each RSU, the road
can be divided into N segments with length {L1, L2, · · · , LN}, respectively. The
vehicles running within the nth segment can only access to RSU n.
There are M vehicles arriving at the start point of the road with a constant
speed v. The set of vehicles is denoted as M = {1, 2, · · · ,M}. Each vehicle m,
m ∈ M, has a computation-intensive and delay-sensitive application, which can
be described as Tm = {xm, bm}, xm is the size of input data of application Tm
and bm is the computation resources required to complete application Tm.
For the execution decision, we denote dm, dm ∈ {0, 1}, as the decision vari-
able, i.e., dm = 1 if vehicle m selects to offload its application Tm to RSU n for
execution, and dm = 0 if Tm is locally executed. Denote d = (dm)m∈M as a com-
puting offloading strategy profile of vehicles and denote On(d) � {m|dm = 1}
as the set of vehicles that offload their applications to RSU n.
We consider two computation approaches. For the local computing approach,
one vehicle locally executes its application. The time cost of local computing is
tlocalm . For the edge computing approach, the time cost of Tm by edge computing
involves four parts: vehicle travel time, data transmission time, application com-
putation time and result transmission time. Since the size of the computation
424 S. Du et al.
result is often small, therefore, it can be neglected. Vehicle travel time of Tm is
ttravelm . Data transmission time of Tm is tsendm . The computation time of Tm is
tcomp
m . Thus, the time cost of edge computing is tedgem = ttravelm + tsendm + tcomp
m .
2.2 Problem Formulation
The objective is to identify the decision that minimizes the completion time
of each application by executing locally or offloading to RSUs for execution.
The time cost that application Tm is executed can be given as Cm(d,p) =
I0,dm
tlocalm + I1,dm
tedgem , where p is the computation resource allocation of RSU
and Ir,dm
= 1 if dm = r, and dm �= r otherwise. Finally, the time cost C of the
system can be given as follows
C(d,p) =
∑
m∈M
Cm(d,p) (1)
We can model the above optimization problem as a multiple-leader common-
follower Stackelberg game problem and given as the Vehicular Edge Computation
Offloading Game (VECOG). Vehicles are leaders and one RSU is the follower.
Given a strategy profile d, the objective of one RSU is to minimize the time cost
of the system and denoted as min
p≥0
C(d,p). The objective of each vehicle can be
given as min
dm
Cm(dm, d−m,Pn(dm, d−m)), where P is the announced computation
resource allocation policy of one RSU and d−m is the strategies of all other
vehicles except vehicle m. Furthermore, P∗ is an optimal policy. In this paper, we
address where there is a combination for the dynamic game that neither vehicles
nor the RSU have an incentive to deviate, i.e., a subgame perfect equilibrium.
3 LEEC Algorithm
We observe that the optimal computation resource allocation policy P∗ that
RSU n allocates to d is a vehicle-specific parameter. Thus, vehicles has dif-
ferent weights of computation resource allocation, the interaction of vehicles
can be modeled as a vehicular-specific weighted congestion game, which can be
expressed as a tuple Γ (P) =< M, (dm)m∈M, (Cm)m∈M >.
Theorem 1. Under the optimal computation resource allocation policy P∗ of
RSU n, the strategic interaction of the vehicles can be modeled as a resource-
dependent congestion game, which the resource-dependent weights are wn
m. Thus,
the time cost that application Tm is executed can be given as C̃m(d) = I0,dm
tlocalm +
I1,dm
(wn
mw(d) + ttravelm + tsendm ), where w(d) =
∑
i∈On(d)
wn
i .
Proof. Depend on the optimal computation resource allocation policy, the com-
putation time by edge computing is C̃edge
m (d) =
√
bm
Fn
∑
i∈On(d)
√
bi
Fn . We define
Optimal Computation Resource Allocation in Vehicular Edge Computing 425
weight wn
m �
√
bm
Fn for each tuple, and the time cost by edge computing in strat-
egy profile d depends on the total weight w(d). Thus, the strategic interaction
of the vehicles can be modeled as a resource-dependent congestion game.
The objective of each vehicle is to minimize its time cost. We define the result
strategic game Γ (P∗) =< M, (dm)m∈M, (C̃m)m∈M > as the Optimal Resource
Allocation Computation Offloading Game (ORACOG). And if the ORACOG
has a pure strategy NE, then the V ECOG has an SPE. Furthermore, If there
exists an exact potential function for the game, then the game has a pure NE.
Theorem 2. The optimal resource allocation computation offloading game has
an exact potential function defined as φ(d) =
∑
m∈M(φlocal
m (d)+φedge
m (d)), where
φedge
m (d) = I1,dm
(wn
mw≤m(d) + ttravelm + tsendm ), φlocal
m (d) = I0,dm
tlocalm .
Proof. First, we define two shorthand notations w≤m(d) =
∑
j∈On(d),j≤m wn
j
and w>m(d) =
∑
j∈On(d),j>m wn
j . Furthermore, we define φm = φlocal
m (d) +
φedge
m (d). Next, we consider strategy profiles d = (di, d−i) and d† = (d†
i , d−i),
vehicle i changes its strategy between local computing and edge computing, i.e.,
vehicle i offloads Ti to one RSU in d and Ti is locally executed in d†. Then, the
difference of time cost between d and d† is C̃i(d) − C̃i(d†) = wn
i w(d) + ttravelm +
tsendm − tlocali , which is equal to the difference of potential function. Similarity, if
vehicle i locally executes Ti in d and offloads Ti to one RSU in d†, we can also
show that φ(d) − φ(d†) = C̃i(d) − C̃i(d†).
Thus, there exists an exact potential function for the game, and the
ORACOG has a pure NE. Then the V ECOG has an SPE. Next, we com-
pute the NE of the ORACOG. We denote the proposed algorithms as Local
and Edge Equilibrium Computing (LEEC) algorithm. We start the algorithm
from the strategy profile that all vehicles decide to locally execute their appli-
cations. There are two phases to execute alternatingly in the algorithm. In the
first phase, vehicle can offload to one RSU to decrease the completion time of
application. In the second phase, vehicles can update their execution decision
to find the best replies. Using the algorithm, we can compute the NE of the
ORACOG effectively.
4 Performance Evaluations
4.1 Simulation Setup
In this section, based on existing research works [4,7,8], we set various parame-
ters for the numerical simulations. We consider that there is a 100-m road with
one RSU, and computation capability of the RSU is assigned from 5 GHz to
10 GHz with a step value of 1 GHz. The number of vehicles is denoted from 5 to
30 with a step value of 5, and they run at the constant speed 120 km/hr. The
computation capability of vehicle is assigned from the interval [0.2, 0.4] GHz.
The computation resource that each vehicle required is assigned from the inter-
val [1, 5] GHz. The size of input data of the vehicular application is assigned from
the interval [100, 300] KB.
426 S. Du et al.
To verify the performance of our proposed algorithm, we introduce three
benchmark approaches. For Local computing (LOCAL) algorithm, all vehi-
cles choose to execute their vehicular applications locally. For Edge computing
(EDGE) algorithm, all vehicles choose to offload their applications to one RSU
for execution. For Random computing (RANDOM) algorithm, vehicles ran-
domly choose to locally execute their applications or offload the applications to
one RSU for execution.
4.2 Comparison of Average Completion Time
(1) Impact of Number of Applications: Figure 1(a) shows the impact of the num-
ber of vehicular applications. We can observe that the average completion time of
all applications is reduced by 60%, 43% and 25% comparing to LOCAL, EDGE
and RANDOM. This is because our proposed algorithm considers the local and
edge equilibrium computing. Furthermore, as the number of applications grows,
the competition for computation resource of the RSU for the vehicles becomes
greater. Thus, each vehicle can be allocated less computation resource when the
vehicles offload their applications to the same RSU for execution, as a result,
the average completion time of the applications is greatly increased.
(2) Impact of Computation Capability of One RSU: Figure 1(b) shows the
impact of computation capability of one RSU on the average completion time
of all applications. It can be observed that the average completion time of all
applications significantly decreases when computation capability of the RSU
increases using our proposed algorithm, this is because that there are more
computation capability for the vehicles to compute their applications.
From Fig. 1(a) and (b), we can clearly observe that the average completion
time of all applications using our proposed algorithm is less than benchmark
approaches. Furthermore, the trend of numerical simulation result is much more
stable using our proposed algorithm.
(a) Impact of number of applications (b) Impact of computation capability
Fig. 1. Impact of the parameters.
Optimal Computation Resource Allocation in Vehicular Edge Computing 427
5 Conclusion
In this paper, we study a computation resource allocation problem in a VEC
system, which is under the constraint of limited computation resources of edge
servers on one RSU. We formulate the computation resource allocation prob-
lem as an optimization problem and model the problem as a Stackelberg game
which vehicles are leaders and the RSU is the follower. To solve the optimiza-
tion problem, we propose an effective LEEC algorithm. Numerical simulation
results demonstrate that compared with benchmark approaches, our proposed
algorithm can greatly reduce the average completion time of all applications.
Acknowledgements. This research is supported by the National Natural Science
Foundation of China under Grant 61571066.
References
1. Wang, S., Zhang, X., Zhang, Y., Wang, L., Yang, J., Wang, W.: A survey on
mobile edge networks: convergence of computing, caching and communications.
IEEE Access 5, 6757–6779 (2017)
2. Dai, Y., Xu, D., Maharjan, S., Zhang, Y.: Joint load balancing and offloading in
vehicular edge computing and networks. IEEE Internet Things J. 6(3), 4377–4387
(2019)
3. Xiao, L., Zhuang, W., Zhou, S., Chen, C.: Learning while offloading: task offloading
in vehicular edge computing network. Learning-based VANET Communication and
Security Techniques. WN, pp. 49–77. Springer, Cham (2019). https://doi.org/10.
1007/978-3-030-01731-6 3
4. Zhang, K., Mao, Y., Leng, S., Vinel, A., Zhang, Y.: Delay constrained offloading for
mobile edge computing in cloud-enabled vehicular networks. In: 2016 8th Interna-
tional Workshop on Resilient Networks Design and Modeling (RNDM), Halmstad,
pp. 288–294 (2016)
5. Huang, X., Yu, R., Kang, J., Zhang, Y.: Distributed reputation management for
secure and efficient vehicular edge computing and networks. IEEE Access 5, 25408–
25420 (2017)
6. Guo, F., Zhang, H., Ji, H., Li, X., Leung, V.C.M.: An efficient computation offload-
ing management scheme in the densely deployed small cell networks with mobile
edge computing. IEEE/ACM Trans. Netw. 26(6), 2651–2664 (2018)
7. Jošilo, S., Dán, G.: Wireless and computing resource allocation for selfish compu-
tation offloading in edge computing. In: IEEE INFOCOM 2019 - IEEE Conference
on Computer Communications, Paris, France, pp. 2467–2475 (2019)
8. Zhang, K., Mao, Y., Leng, S., Maharjan, S., Zhang, Y.: Optimal delay constrained
offloading for vehicular edge computing networks. In: 2017 IEEE International Con-
ference on Communications (ICC), Paris, pp. 1–6 (2017)
https://doi.org/10.1007/978-3-030-01731-6_3
https://doi.org/10.1007/978-3-030-01731-6_3
	Optimal Computation Resource Allocation in Vehicular Edge Computing
	1 Introduction
	2 System Model and Problem Formulation
	2.1 System Model
	2.2 Problem Formulation
	3 LEEC Algorithm
	4 Performance Evaluations
	4.1 Simulation Setup
	4.2 Comparison of Average Completion Time
	5 Conclusion
	References