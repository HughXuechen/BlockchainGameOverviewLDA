Behavior-Aware Account De-Anonymization on Ethereum Interaction Graph
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022 3433
Behavior-Aware Account De-Anonymization on
Ethereum Interaction Graph
Jiajun Zhou , Chenkai Hu, Jianlei Chi , Jiajing Wu , Senior Member, IEEE,
Meng Shen , Member, IEEE, and Qi Xuan , Senior Member, IEEE
Abstract— Blockchain technology has the characteristics of1
decentralization, traceability and tamper-proof, which creates a2
reliable decentralized trust mechanism, further accelerating the3
development of blockchain finance. However, the anonymization4
of blockchain hinders market regulation, resulting in increas-5
ing illegal activities such as money laundering, gambling and6
phishing fraud on blockchain financial platforms. Thus, financial7
security has become a top priority in the blockchain ecosystem,8
calling for effective market regulation. In this paper, we con-9
sider identifying Ethereum accounts from a graph classification10
perspective, and propose an end-to-end graph neural network11
framework named Ethident, to characterize the behavior pat-12
terns of accounts and further achieve account de-anonymization.13
Specifically, we first construct an Account Interaction Graph14
(AIG) using raw Ethereum data. Then we design a hierarchical15
graph attention encoder named HGATE as the backbone of16
our framework, which can effectively characterize the node-17
level account features and subgraph-level behavior patterns.18
For alleviating account label scarcity, we further introduce con-19
trastive self-supervision mechanism as regularization to jointly20
train our framework. Comprehensive experiments on Ethereum21
datasets demonstrate that our framework achieves superior22
performance in account identification, yielding 1.13% ∼ 4.93%23
relative improvement over previous state-of-the-art. Further-24
more, detailed analyses illustrate the effectiveness of Ethident25
Manuscript received 24 March 2022; revised 30 June 2022 and 16 August
2022; accepted 9 September 2022. Date of publication 21 September 2022;
date of current version 4 October 2022. This work was supported in part
by the Key Research and Development Program of Zhejiang under Grant
2022C01018; in part by the National Key Research and Development Program
of China under Grant 2020YFB1006104; in part by the National Natural
Science Foundation of China under Grant 61973273; in part by the Zhejiang
Provincial Natural Science Foundation of China under Grant LR19F030001;
and in part by the Major Key Project of Peng Cheng Laboratory (PCL)
under Grant PCL2022A03, Grant PCL2021A02, and Grant PCL2021A09. The
associate editor coordinating the review of this manuscript and approving it for
publication was Dr. Hossein Pishro-Nik. (Corresponding author: Qi Xuan.)
Jiajun Zhou and Chenkai Hu are with the College of Informa-
tion Engineering, Institute of Cyberspace Security, Zhejiang University
of Technology, Hangzhou 310023, China (e-mail: jjzhou@zjut.edu.cn;
ckhu0122@gmail.com).
Jianlei Chi is with the Hangzhou Research Institute, Xidian University,
Hangzhou 311231, China (e-mail: chijianlei@gmail.com).
Jiajing Wu is with the School of Computer Science and Engi-
neering, Sun Yat-sen University, Guangzhou 510006, China (e-mail:
wujiajing@mail.sysu.edu.cn).
Meng Shen is with the School of Cyberspace Science and Technol-
ogy, Beijing Institute of Technology, Beijing 100081, China, and also
with the Peng Cheng Laboratory (PCL), Shenzhen 518066, China (e-mail:
shenmeng@bit.edu.cn).
Qi Xuan is with the Institute of Cyberspace Security, College of Information
Engineering, Zhejiang University of Technology, Hangzhou 310023, China,
also with the PCL Research Center of Networks and Communications, Peng
Cheng Laboratory, Shenzhen 518066, China, and also with Utron Technology
Company Ltd., Hangzhou 310056, China (e-mail: xuanqi@zjut.edu.cn).
Digital Object Identifier 10.1109/TIFS.2022.3208471
in identifying and understanding the behavior of known partici- 26
pants in Ethereum (e.g. exchanges, miners, etc.), as well as that 27
of the lawbreakers (e.g. phishing scammers, hackers, etc.), which 28
may aid in risk assessment and market regulation. 29
Index Terms— Blockchain, de-anonymization, behavior pat- 30
tern, graph neural network, hierarchical graph attention, con- 31
trastive learning. 32
I. INTRODUCTION 33
THE past few years have witnessed the application of 34
blockchain technology in new technological and indus- 35
trial revolutions, such as cryptocurrency [1], financial ser- 36
vices [2], supply chain management [3], healthcare [4], etc. 37
As a distributed data storage technology, blockchain is decen- 38
tralized, traceable and tamper-proof, which guarantees the 39
fidelity and security of data recording and generates trust 40
without a third-party notarization. Benefiting from these char- 41
acteristics, blockchain has attracted considerable attention and 42
is best known for its crucial role in the field of digital 43
cryptocurrencies, such as Bitcoin and Ethereum. According to 44
statistics from market analysis sites such as CoinMarketCap,1 45
as of August 2021, about 11,000 types of cryptocurrencies 46
existed, with a total market value of up to 1.9 trillion dollars. 47
However, blockchain has become a tempting target for 48
hackers and other cybercriminals due to its huge economic 49
value and anonymization. Each individual has a virtual identity 50
on blockchain unrelated to the real one, called pseudonym. 51
For instance, in the Ethereum system, the last 20 bytes of 52
the public key hash are used as the account address (i.e., 53
pseudonym). However, while pseudonymous accounts protect 54
users’ privacy, it also provides shelter for illegal transac- 55
tions, making it difficult for regulators to identify the culprit. 56
At present, the weak regulation of blockchain platforms has 57
led to endless financial crimes such as money laundering, 58
gambling and phishing scams. In 2018, a statistical report 59
published by Kaspersky Lab showed that Ether is the most 60
popular digital asset for criminals, and the loss caused by 61
illegal activities on decentralized applications (DApps) has 62
reached 900 million dollars. Therefore, financial security has 63
become a top priority in the blockchain ecosystem, and it is 64
of great significance to study security strategies for public 65
blockchain in application scenarios such as risk assessment 66
and market regulation. 67
1https://coinmarketcap.com/
1556-6021 © 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-5062-4183
https://orcid.org/0000-0002-7298-0955
https://orcid.org/0000-0001-5155-8547
https://orcid.org/0000-0002-1867-0972
https://orcid.org/0000-0002-1042-470X
3434 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
Fig. 1. Illustration of the difference between account identification and
address clustering.
A. Account Identification vs. Address Clustering68
Fortunately, the openness and transparency of blockchain69
make access to block information without barriers. Recently,70
existing related work has focused on using the public transac-71
tion information to analyze the behavior patterns of accounts72
and mine the identity information behind them, such as73
exchanges, phishing scammers, miners and Ponzi schemes,74
deriving several typical de-anonymization tasks, especially for75
address clustering and account identification. Fig. 1 shows76
an illustrative example to explain the difference between77
address clustering and account identification. From the def-78
inition perspective, address clustering aims to partition the79
address set observed in Bitcoin transactions into maximal80
address subsets likely controlled by the same entity, i.e., re-81
identifying multiple addresses belonging to the same entity.82
Account identification aims to determine the identity type of83
the account by mining the attributes and behavioral character-84
istics, i.e., attributing the accounts to specific types. From the85
task paradigm, the former can be regarded as an unsupervised86
clustering task, while the latter is generally the supervised87
classification task. From the application perspective, a large88
number of existing address clustering methods are usually89
designed according to the characteristics of the Bitcoin system,90
and are usually applied to Bitcoin rather than Ethereum due91
to their technical differences [5]. While account identification92
methods only rely on general information such as transaction93
records on the blockchain, as well as external technologies94
such as machine learning and network science, thus showing95
better universality.96
B. Challenges97
In this paper, we focus on de-anonymizing Ethereum98
accounts through account identification. Existing account iden-99
tification methods mainly concentrate on manual feature engi-100
neering [6], [7], [8], [9] and graph analytics [10], [11], [12],101
[13], which are effective but suffer from several shortcomings102
and challenges. First, manual feature engineering relies on103
the prior knowledge of feature designers and is incapable104
of capturing the underlying information in blockchain data, 105
such as transaction patterns, resulting in low feature utilization 106
and unsound expressiveness. In addition, manual features have 107
weak reusability across different blockchain platforms due to 108
technical differences. For example, Ethereum data has features 109
associated with smart contracts that Bitcoin does not, which 110
greatly limits the reusability of manual features. Second, graph 111
analytics relies on large-scale transaction graphs constructed 112
from mass blockchain data, resulting in high computational 113
consumption and time cost when applying graph random walks 114
or graph neural networks (GNNs). Meanwhile, the growing 115
number of transactions on the blockchain drives frequent 116
updates in the transaction graphs in terms of nodes and 117
edges, which is not conducive to full-graph learning. Lastly, 118
the annotated information of account identities published in 119
the third-party sites is relatively scarce, resulting in a poor 120
generalization of supervised models. 121
C. Our Contributions 122
To tackle these challenges, we design a behavior-aware 123
Ethereum account identification framework (Ethident) — an 124
end-to-end graph neural network model, to characterize the 125
behavior patterns of accounts and further achieve account 126
de-anonymization on Ethereum. Specifically, we first collect 127
and collate large amounts of data involving transaction, smart 128
contract and public annotation of account identity from the 129
Ethereum-related platforms, and then construct an Account 130
Interaction Graph (AIG) and its lightweight version. Since 131
the large-scale account interaction graph is not feasible for 132
full-batch training of GNNs, we consider account identi- 133
fication as a subgraph-level classification task, and extract 134
neighborhood subgraphs of target accounts from the complete 135
interaction graph, yielding micro interaction subgraphs, which 136
allows for mini-batch training of GNNs. To better capture the 137
account behavior patterns, we design a Hierarchical Graph 138
ATtention Encoder named HGATE as the backbone of our 139
framework, which can effectively characterize the node-level 140
account features and subgraph-level behavior patterns. Further- 141
more, we introduce data augmentation and contrastive self- 142
supervision mechanism for account identification to alleviate 143
the label scarcity that may lead to poor model generaliza- 144
tion during supervised learning. In this way, our framework 145
jointly trains the subgraph contrast and classification tasks, 146
achieving state-of-the-art performance in account identifica- 147
tion. The main contributions of this work are summarized as 148
follows: 149
• Data collection: We construct the Account Interaction 150
Graph (AIG) using collected Ethereum data, and further 151
publish the subgraph datasets for account identification 152
research on Ethereum. 153
• Scalability: We consider identifying Ethereum accounts 154
from a graph classification perspective, and design sub- 155
graph sampling strategies to achieve scalable account 156
identification. 157
• Powerful feature characterization: We propose a hier- 158
archical graph attention encoder named HGATE to 159
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3435
TABLE I
MAIN SYMBOLS USED IN THIS PAPER
effectively characterize the node-level account features160
and subgraph-level behavior patterns.161
• Generalization: We establish a behavior-aware Ethereum162
account identification framework named Ethident2 which163
integrates graph augmentation and self-supervision mech-164
anisms, to alleviate the label scarcity and learn highly-165
expressive behavior pattern representations.166
• State-of-the-art performance: Extensive experiments on167
Ethereum datasets demonstrate that our framework can168
achieve state-of-the-art performance in account identifica-169
tion. We further analyze the behavior patterns of different170
accounts and illustrate the superiority of our framework171
in terms of performance, scalability and generalization.172
II. RELATED WORK173
De-anonymization in blockchain has received considerable174
attention for market analysis, abnormal behavior detection, and175
law enforcement, deriving several mainstream techniques, such176
as address clustering and account identification.177
A. Address Clustering178
Early studies [14], [15], [16], [17], [18], [19], [20]179
mainly focus on address clustering, also known as user180
re-identification or entity recognition. Reid et al. [16] pro-181
posed the first heuristic for re-identification, named multi-182
input heuristic, which assumes that the input addresses of a183
particular transaction are possessed by the same entity. This184
heuristic is based on the fact that all private keys associated185
with addresses must be used conjointly to sign a transaction.186
Androulaki et al. [17] proposed the change address heuristic,187
which assumes that a new “change” address created by a188
transaction is likely controlled by the same entity that created189
2Data and code are available at https://github.com/jjzhou012/Ethident
the transaction, and has also been applied in [14] and [15]. 190
This heuristic stems from the change characteristics of Bit- 191
coin that serves as a mechanism for enhancing user privacy. 192
Martin et al. [18] explored the reasons behind the effective- 193
ness of using the multi-input heuristic for address clustering. 194
Cazabet et al. [19] proposed to construct an identity hint 195
network and applied the Louvain algorithm [21] to detect 196
communities representing the sets of addresses belonging to 197
the same entities. 198
The aforementioned address clustering methods are widely 199
used in Bitcoin. Robin [5] analyzed the feasibility of two 200
Bitcoin de-anonymization methods of IP linking and address 201
clustering on Ethereum, and concluded that these two methods 202
meet difficulties when applied to Ethereum due to technical 203
differences. Friedhelm [22] proposed three heuristics that 204
exploit patterns related to deposit addresses, multiple partic- 205
ipation in airdrops and token authorization mechanisms, and 206
quantified the feasibility of each heuristic over the first four 207
years of the Ethereum. Shlomi et al. [23] assumed that the 208
smart contract code written by the same author has a unique 209
style, and further linked contract addresses with similar code 210
styles together, thinking that these addresses are generated by 211
the same author. 212
B. Account Identification 213
Thanks to the openness of blockchain transactions, as well 214
as the development of machine learning and network science, 215
a new class of de-anonymization strategies — account iden- 216
tification, has been proposed and comprehensively developed. 217
Existing account identification methods mainly concentrate on 218
manual feature engineering and graph analytics. 219
1) Manual Feature Engineering: Manual feature engineer- 220
ing extremely relies on the prior knowledge of feature design- 221
ers. Normally, the more expert experience involved, the more 222
reliable the manual features are. Toyoda et al. [6] extracted 223
seven statistical features such as the rate of bitcoin coinbase 224
transactions to infer account identities. Lin et al. [7] designed 225
various features associated with transaction timestamps and 226
analyzed the importance of each one. Bartoletti et al. [8] 227
designed the Gini coefficient and the characteristics of possible 228
abnormal behavior patterns to infer the Ponzi accounts in the 229
transaction network. Marc et al. [24] designed a large number 230
of manual features associated with addresses, entities and 231
graph motifs in Bitcoin transaction networks, and classified 232
different Bitcoin entities via LightGBM [25]. In addition, 233
some emerging public blockchains contain smart contracts, 234
providing new features. Huang et al. [9] considered the calling 235
information of smart contracts to expand the feature space, and 236
realized the identification of bot accounts in EOSIO. 237
2) Graph Analytics: Massive transaction data can be mod- 238
eled as graphs, and a considerable part of existing methods 239
regards account identification as a classification task from a 240
graph perspective. Li et al. [10] considered the topological 241
features of accounts and found the difference in topolog- 242
ical structure between the Ponzi accounts and the normal 243
ones. Yuan et al. [11] applied graph random walks such as 244
DeepWalk [26] and Node2vec [27] to learn account features 245
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3436 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
TABLE II
INFORMATION OF RAW ETHEREUM BLOCK DATA
in the transaction graph. Wu et al. [28] performed graph ran-246
dom walks by considering both the transaction amount and247
timestamp information, proposing a novel embedding method248
named Trans2Vec to extract the address feature for phishing249
detection. Yuan et al. [29] extracted the subgraphs for each250
target account and embedded their transaction topology via251
Graph2Vec [30]. Moreover, they introduced the SGN mecha-252
nism [31] to further enhance the transaction structure embed-253
ding. Chen et al. [13] also extracted transaction subgraphs and254
got the embeddings by a graph convolution layer combin-255
ing graph auto-encoder in an unsupervised manner, finally256
achieving phishing detection by LightGBM. Shen et al. [12]257
constructed the account interaction graphs using Ethereum and258
EOSIO data, and proposed an end-to-end graph convolution259
network model to identify different categories of accounts or260
bots.261
Besides the aforementioned methods, there are other frame-262
works to achieve identity identification. Phetsouvanh et al.263
[32] proposed a graph mining technology to detect suspicious264
bitcoin flows and accounts by analyzing the path length and265
confluence account of the directed subgraph. Zhang et al. [33]266
introduced the concept of meta-path from the heterogeneous267
network. This method deals with the bitcoin network from268
both static and dynamic perspectives and can effectively detect269
abnormal accounts and transactions.270
III. ACCOUNT INTERACTION GRAPH MODEL271
A. Problem Description272
In this paper, we mainly focus on identifying accounts in273
Ethereum via deep graph analytics, especially from a graph274
classification perspective. A transaction graph constructed275
from blockchain transaction data is typically represented by276
a graph G = (V , E,X,E,Y ), where V = {v1, v2, · · · , vn} is277
the set of account nodes, E ⊆ {(vi, vj) | vi, vj ∈ V } is the set278
of interaction edges, X ∈ R
n×F1 is the node feature matrix, and279
E ∈ R
m×F2 is the edge feature matrix (we assume, |E | = m).280
We use Y = {(vi, yi) | vi ∈ V } to represent the label set of281
partial account nodes. The subgraph of an account node v can282
be represented as gv ⊂ G. For the given transaction graph283
G, subgraph-level account identification is to learn a function284
f (gv) �→ y mapping the pattern of account subgraph gv to285
the identity label y.286
B. Ethereum and Block Data287
Ethereum is the second-largest blockchain platform after288
Bitcoin, and it allows users to conduct complex transactions289
Fig. 2. Constructing account interaction graph and its lightweight version.
based on smart contracts, which are applications that run on 290
Ethereum virtual machines. An account in Ethereum is an 291
entity that owns Ether and can be divided into two categories: 292
Externally Owned Account (EOA) and Contract Account 293
(CA). EOA is controlled by a user who owns the private key 294
of the account, and can initiate transactions. CA is controlled 295
by smart contract code, which cannot initiate transactions 296
actively and can only be executed according to the pre- 297
written smart contract code after being triggered. Between 298
Ethereum accounts, there are usually two types of interactions: 299
transaction and contract call. The transaction must be initiated 300
by EOA, and can be received by EOA or CA. The contract 301
call refers to the process of triggering the smart contract 302
code in CA to perform different operations. The Ethereum 303
blockchain is a succession of blocks, and each block contains 304
a set of transactions and contract calls. The raw block data of 305
Ethereum is structural and provides a wealth of information, 306
as listed in Table II. 307
C. Account Interaction Graph 308
The raw block data is informative and provides the 309
details of transactions and contract calls, by which we can 310
construct an Account Interaction Graph (AIG), as defined 311
below. 312
Definition 1: (Account Interaction Graph, AIG): a 313
directed, weighted and heterogeneous multigraph G = 314
(Veoa, Vca, Et, Ec,Y ), where Veoa and Vca are the set of EOA 315
and CA respectively, Et = {(vi, vj, d, w) | vi, vj ∈ Veoa} is the 316
directed edge set constructed from transaction information, 317
and Ec = {(vi, vj, d, f ) | vi ∈ Veoa ∪ Vca, vj ∈ Vca} is the 318
directed edge set constructed from contract call information. 319
The three edge attributes d , w, f represent timestamp, value 320
and callingFunction respectively in Table II. The AIG is 321
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3437
Fig. 3. The architecture of Ethident. The complete workflow proceeds as follows: (1) sampling subgraphs centered on target accounts from lw-AIG; (2)
applying two augmentation operators on each subgraph to generate two correlated views; (3) encoding subgraphs and corresponding augmented views; (4)
optimizing the GNN encoder by jointly training subgraph contrast and classification tasks.
partially labeled, i.e., a few EOA have identity labels y and322
can compose the labeled node set Y = {(vi, yi) | vi ∈ Veoa}.323
The original AIG is a heterogeneous multigraph that has324
dense connections as well as different types of information325
attached to nodes and edges, as shown in Fig. 2(a). The326
heterogeneity and multiple edges significantly increase the327
complexity of information mining. So we further simplify328
the AIG into a homogeneous and more sparse graph by329
interaction merging and feature construction.330
Definition 2: (Lightweight Account Interaction Graph, lw-331
AIG): a directed, weighted and homogeneous graph G =332
(Veoa, Ẽt,X,E,Y ), where Ẽt = {(vi, vj, t, w̃) | vi, vj ∈ Veoa},333
X is the node feature matrix constructed from contract call334
information and E is the edge feature matrix. The edge335
attribute t denotes the number of directed interactions from336
vi to vj, and the edge attribute w̃ denotes total transaction337
amount from vi to vj.338
1) Interaction Merging and Edge Feature Construction:339
During interaction merging, as shown in Fig. 2(b), multiple340
directed interactions (transactions or contract calls) from the341
source account vi to the target account vj will be merged into342
a single edge with a newly added edge attribute t representing343
the number of merged interactions. For transactions, another344
new edge attribute w̃ represents the total transaction amount of345
merged interactions. In addition, a feature pruning operation346
will take effect, removing the two raw edge attributes of347
timestamp d and callingFunction f . Finally, we represent the348
edge feature vector for arbitrary transaction edge (vi, vj) ∈ Et349
as eij = [t, w̃].350
2) Node Feature Construction: The behavior characteristics351
of an account are not only related to its transaction objects,352
amount and frequency, but also to the smart contracts it353
calls. Accounts with different behavior patterns have different354
calling preferences for smart contracts. Therefore, we can355
construct account features using the information on contract356
call, as shown in Fig. 2(c). Specifically, let n and F be357
the number of EOA and CA respectively in AIG, we can358
construct an account feature matrix X ∈ R
n×F to represent359
the preference for contract call, as formulated below:360
X = [x1; · · · ; xi ; · · · ; xn]�,361
xi = [t1, · · · , tj , . . . , tF],362
where tj =
{
t If there are t calls to vca
j ;
0 If there is no call to vca
j ; (1) 363
Note that xi is the feature of veoa
i . During feature construction, 364
we convert the AIG to a homogeneous lw-AIG. 365
In summary, the node features of the lw-AIG reflect the 366
contract call information, and the edge features reflect the 367
transaction information. 368
IV. METHODOLOGY 369
In this section, we provide the details of the proposed frame- 370
work Ethident, as schematically depicted in Fig. 3. For a target 371
account vi, the input of Ethident is the account interaction sub- 372
graph gi sampled from lw-AIG, and the output is the predictive 373
identity label ŷi. Our framework is mainly composed of the 374
following components: (1) a subgraph extractor that captures 375
the micro interaction subgraphs centered on target accounts 376
from the lw-AIG topology; (2) a subgraph augmentation 377
module that generates a series of variant graph views using 378
various transformations on subgraphs; (3) a GNN encoder 379
that encodes the subgraphs as expressive representations via 380
hierarchical graph attention mechanism; (4) a training module 381
that jointly trains the subgraph contrast and classification tasks. 382
Next, we describe the details of each component. 383
A. Subgraph Sampling 384
The raw data contains tens of millions of blocks, making 385
AIG a large-scale graph and not feasible for full-batch training 386
of GNNs. Even though the lightweight process greatly simpli- 387
fies AIG, it still maintains a large number of EOA nodes. 388
On the other hand, existing account identification methods 389
based on graph embedding or GNNs generally rely on full- 390
batch training, which restricts their scalability on large-scale 391
graphs for account representation learning. Thus, we consider 392
account identification as a subgraph-level classification task 393
based on the following facts: (1) different types of accounts 394
have different behavior patterns, implicit in their local struc- 395
ture; (2) subgraph consisting of the target account and its local 396
neighborhood information (neighbors and their interactions) 397
is informative and plays a critical role in providing behavior 398
patterns for account identification; (3) subgraph is the receptive 399
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3438 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
Fig. 4. Subgraph sampling according to different edge information.
field of the center target node, which is much smaller than the400
whole graph and allows for mini-batch training.401
In this work, we consider subgraph sampling that allows for402
mini-batch training of GNNs on large-scale graphs. We per-403
form TopK sampling to obtain the h-hop interaction sub-404
graphs according to different edge information: Amount (w̃),405
Times (t) or average Amount (avgAmount, w̃/t). Specifi-406
cally, for a target account node vi, we sample top-K most407
important neighbors based on one of the edge attributes,408
and again sample top-K most important neighbors for each409
account sampled at the previous hop, and recursive ones in the410
downstream hops. The recursive sampling can be formulated411
as follows:412
Vk =
⋃
v∈Vk−1
topK (Nv, K ,E [v,Nv, i ]) , i ∈ {0, 1, 2}, (2)413
where Vk is the set of nodes sampled at hop k and V0 = {vi},414
Nv is the 1-hop neighbor set of node v, K is the number of415
sampled neighbors per hop, E [v,Nv, i ] is the edge attributes416
of candidate interactions that guides the neighbor sampling, i417
is an indicator of which edge attribute to use, and topK is the418
function that returns the top-K most important nodes. After419
h iterations, we obtain the account set Vi = ∪h
k=0Vk sampled420
from lw-AIG, and the subgraph gi of target account vi can be421
induced by Vi from the lw-AIG. Fig. 4 illustrates the process422
of subgraph sampling according to different edge information.423
For the labeled target account set Y , their corresponding424
subgraphs form a dataset: D = {(gi, yi) | ∀ (vi, yi) ∈ Y }. Note425
that we assign the label of the target account to the subgraph,426
and aim to learn a function mapping the subgraph patterns to427
account identity labels.428
B. Encoder Architecture429
The backbone of Ethident is the designed GNN encoder430
named HGATE, which is capable of learning expressive repre-431
sentations for accounts and their behavior patterns, as schemat-432
ically depicted in Fig. 5. This encoder learns account and433
pattern embeddings via a hierarchical attention mechanism,434
and can also implement account identification independently 435
by following a prediction head, as shown in Fig. 5(a). Next, 436
we describe the details of our encoder fθ . 437
1) Neighbor Feature Alignment: For lw-AIG, its nodes 438
and edges are encoded according to contract call and trans- 439
action information. Since our encoder is account-centric, 440
each account vi has its neighbor features that concatenate 441
both neighboring account features (xj) and the connecting 442
interaction features (eij), represented as [xj ‖ eij]. Here we 443
need to perform a column normalization on neighbor features 444
to eliminate the dimensional differences between different 445
attributes. Note that the target account feature xi ∈ R
F and 446
its neighbor features [xj ‖ eij] ∈ R
F+2 do not have the same 447
dimension, so a linear transformation and a nonlinear activa- 448
tion are performed to align the feature dimension, as shown in 449
Fig. 5(b). This procedure can be achieved via a fully connected 450
layer parameterized by �x as follows, and generates aligned 451
embeddings for neighbors of the target account. 452
x̃j = LeakyRelu
(
�x · [xj ‖ eij]
)
. (3) 453
2) Node-Level Attention for Account Embedding: This mod- 454
ule aims to preserve the relevance of interactive accounts 455
in the input subgraph, and learns account representation by 456
focusing on the most relevant parts of the neighborhood. 457
When identifying a target account in the interaction subgraph, 458
different neighboring accounts generally contribute differently 459
to it. For example, both accounts va and vb have transactions 460
with account vi, if va has many high-volume transactions 461
with vi while vb has only one low-volume transaction with 462
vi, or if va has a more similar preference of contract call 463
with vi than vb, then va often plays a more important role in 464
identifying vi since it preserves more information associated 465
with the identity of vi. Based on the above understanding 466
and inspired by previous work [34], we utilize the node-level 467
attention mechanism, as illustrated in Fig. 5(c), to learn the 468
hidden representation of each account in the input subgraph 469
by composing its neighbor features with different contributions 470
(attentions). 471
Specifically, for arbitrary account vi in the input subgraph 472
g, the node-level attention mechanism learns the contribution 473
attention scores for its neighbors vj, as follows: 474
al
ij = LeakyRelu
(
�l
n · [hl
i ‖ hl
j]
)
, (4) 475
where a linear transformation parameterized by �l
n and a non- 476
linear LeakyRelu activation are performed together to compute 477
the importance of account vj’s hidden features to account vi 478
in l-th layer. Subsequently, to make attention scores easily 479
comparable across different accounts, the attention scores a 480
are further normalized using the softmax function over the 481
neighbor accounts: 482
αl
ij = Softmax
(
al
ij
)
=
exp
(
al
ij
)
∑
x∈N (i)∪{i} exp
(
al
ix
) , (5) 483
where N (i) is the 1-hop neighbor set of account vi. Once 484
obtained, the normalized attention scores are used to update 485
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3439
Fig. 5. Schematic depiction of the hierarchical graph attention encoder (HGATE): (a) the pipeline of HGATE on account identification; (b) the process of
neighbor feature alignment; (c) the illustration of graph attention mechanism; (d) the model architecture of HGATE.
the features of target account via neighborhood context486
aggregation:487
hl+1
i = Elu
⎛
⎝αl
ii ·�l
α · hl
i +
∑
j∈N (i)
αl
ij ·�l
α · hl
j
⎞
⎠ , (6)488
where a linear transformation parameterized by �l
α and a489
nonlinear Elu activation are used to compute the final output490
features.491
The node-level attention mechanism serves for account492
embedding. Specifically, we use a stack of k graph atten-493
tion layers to capture the account features, as illustrated in494
Fig. 5(d). The input of this stack is the initial account embed-495
ding h0 generated by a fully connected layer that accepts the496
account and interaction features (Eq. (3)). Notably, for a target497
account vi, its initial embedding is h0
i = xi, and that of its498
neighboring accounts vj is h0
j = x̃j. To better characterize499
accounts, the stack performs an iterative process of transfer-500
ring, transforming, aggregating and updating the representation501
from interactive neighbors. And after k iterations, the final502
output account embeddings hk contain the interaction influence503
within k-hops.504
3) Subgraph-Level Attentive Pooling for Pattern Embed-505
ding: This module aims to characterize the behavior patterns506
of target accounts in the input subgraphs by extracting expres-507
sive subgraph-level features. Actually, the behavior patterns508
of accounts are associated with their identities, i.e., accounts509
of different identities usually behave differently and have510
different subgraph patterns. For “Exchange” subgraphs, the511
center node generally has an extremely high centrality and512
frequently interacts with surrounding neighbors, indicating513
high-volume transaction orders. For “Ponzi” or “Gambling”514
subgraphs, there exist two explicit characteristics indicating515
high investment and low return: (1) bi-directional edges 516
(mutual transactions) between the center node and surrounding 517
neighbors are rare, and the center node has high in-degree and 518
low out-degree; (2) the incoming edges (investment) of the 519
center node contain larger feature values associated with the 520
digital currency than the outgoing edges (return). Therefore, 521
different accounts contribute differently to characterize the 522
subgraph pattern reflecting the behavior of the target account. 523
Meanwhile, traditional practice usually captures the graph- 524
level features using sum, mean or max pooling, resulting 525
in feature smoothing and poor expressiveness. Based on the 526
above understanding, we design a novel subgraph-level atten- 527
tive pooling module, as illustrated in Fig. 5(a), to learn the 528
expressive representation of account subgraphs. 529
Specifically, for a subgraph g, we first obtain the initial 530
subgraph-level embedding s by using global max pooling over 531
all account embeddings in the subgraph: 532
s = MaxPooling
(
hk
)
. (7) 533
Note that the input of the MaxPooling layer is the final account 534
embeddings hk generated in Sec. IV-B.2. To better characterize 535
the subgraph pattern, we update s by aggregating features of 536
all accounts with different contributions (attentions). In other 537
words, for the initial subgraph embedding s, we use an 538
attention mechanism to learn the contribution attention score 539
for arbitrary account vj in the subgraph as follows: 540
aj = LeakyRelu
(
�s · [s ‖ hk
j ]
)
, (8) 541
where a linear transformation parameterized by �s and a 542
nonlinear LeakyRelu activation are performed to compute 543
the importance of account vj’s hidden features to the initial 544
subgraph embedding s. Same as the node-level attention, 545
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3440 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
a softmax function is applied to compute the normalized546
attention scores:547
βj = Softmax
(
aj
) = exp(aj)∑
x∈Vg∪{s} exp(ax)
, (9)548
where Vg is the node set of subgraph g, and as is the self-549
attention score of s. Finally, the attentive pooling performs the550
update process as follows:551
g = Elu
⎛
⎝βs ·�β · s +
∑
j∈Vg
βj ·�β · hk
j
⎞
⎠ , (10)552
where a linear transformation parameterized by �β and a553
nonlinear Elu activation are used to compute the final subgraph554
embedding g which characterizes the behavior pattern of the555
target account.556
C. Subgraph Contrastive Learning557
To alleviate the account label scarcity as well as learn558
highly-expressive pattern embeddings, our Ethident introduce559
the contrastive self-supervision learning as a regularization to560
jointly train the GNN encoder.561
1) Graph Augmentation: Contrastive learning relies heav-562
ily on well-designed data augmentation strategies for view563
generation. So far, widely used techniques concentrate on564
structure-level and attribute-level augmentation [35], [36],565
[37]. In this paper, we use three categories of graph aug-566
mentation methods to generate the augmented views of567
subgraphs.568
• Structure-level Augmentation569
◦ Node Dropping: Each node has a certain probability P570
to be dropped from subgraph.571
◦ Edge Removing: Each edge has a certain probability P572
to be removed from subgraph.573
• Attribute-level Augmentation574
◦ Node Attribute Masking: Each dimension of node fea-575
tures has a certain probability P to be set as zero.576
◦ Edge Attribute Masking: Each dimension of edge fea-577
tures has a certain probability P to be set as zero.578
• Sampling-based Augmentation579
Since each subgraph is sampled from lw-AIG via one580
of the three sampling strategies mentioned in Sec. IV-A,581
we can use the other two sampling methods to generate582
the sampling-based augmented views for this subgraph.583
During graph augmentation, we generate two augmented584
views ĝ1
i , ĝ2
i for each target account subgraph gi, and assign585
the identity label of target account to them as a pseudo label:586
Daug1 =
{
(ĝ1
i , yi) | ĝ1
i = T1(gi); (vi, yi) ∈ Y
}
,587
Daug2 =
{
(ĝ2
i , yi) | ĝ2
i = T2(gi); (vi, yi) ∈ Y
}
. (11)588
In this way, we can scale up the training data and alleviate589
label scarcity. The raw and augmented datasets will be used590
together to train the encoder.591
TABLE III
STATISTICS OF SUBGRAPH DATASETS SAMPLED FROM ACCOUNT INTER-
ACTION GRAPH OF ETHEREUM. |G| IS THE NUMBER OF SUBGRAPHS,
Avg. |V | AND Avg. |E| ARE THE AVERAGE NUMBER OF NODES AND
EDGES IN SUBGRAPHS RESPECTIVELY, |x| AND |e| ARE THE
NUMBER OF NODE AND EDGE FEATURES IN SUBGRAPHS
2) Subgraph Contrast: In our contrastive learning setting, 592
for each account subgraph gi, its two correlated views ĝ1
i and 593
ĝ2
i are generated by undergoing two augmentation operators 594
T1 and T2, where ĝ1
i = T1(gi) and ĝ2
i = T2(gi). The 595
correlated augmented views are fed into the encoder fθ , 596
producing the whole subgraph representations g1
i and g2
i . Then 597
they are mapped into an embedding space for contrast via 598
a projection head fφ , yielding z1
i and z2
i . Note that θ and 599
φ are the parameters of graph encoder and projection head 600
respectively. Finally, the goal of subgraph-level contrast is to 601
maximize the consistency between two correlated augmented 602
views of subgraphs in the contrastive space via minimizing 603
the contrastive loss: 604
Lself = 1
N
N∑
i=1
Li, (12) 605
where N is the number of subgraphs in a batch (i.e., batch 606
size). The loss for each subgraph can be computed as: 607
Li = − log
ecos(z1
i ,z
2
i )/τ∑N
j=1, j �=i ecos(z1
i ,z
2
j )/τ
, (13) 608
where cos(·, ·) is the cosine similarity function with 609
cos(z1
i , z2
j ) = z1
i
�
z2
j /‖z1
i ‖‖z2
j ‖, and τ is the temperature 610
parameter. The two correlated views z1
i and z2
i of account 611
subgraph gi are treated as a positive pair while the rest view 612
pairs in the batch are treated as negative pairs. The objective 613
aims to maximize the consistency of positive pairs as opposed 614
to negative ones, i.e., contrastive learning allows accounts 615
of the same type to have more consistent representations, 616
and makes accounts of different types have more obvious 617
differences. 618
D. Model Training 619
We achieve account identification by a prediction head fψ , 620
which maps the subgraph representations to labels reflecting 621
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3441
account identity, yielding a classification loss:622
Lpred = − 1
N
N∑
i=1
yi · log
(
fψ (gi)
)
, (14)623
where Lpred is the cross entropy loss.624
The self-supervised subgraph contrast is a pretext task that625
serves as a regularization of the subgraph classification task.626
The encoder HGATE is jointly trained with the pretext and627
subgraph classification tasks. The loss function consists of628
both the self-supervision and classification task loss functions,629
as formularized below:630
L = Lpred + λ · Lself, (15)631
where λ is a trade-off hyper-parameter controls the contribu-632
tion of the self-supervision term.633
V. EXPERIMENTS634
A. Data Preparation635
We intercept the first 10 million block data (the time interval636
is between “2015-07-03” to “2020-05-04”) from the Xblock637
website3 [38]. Within this time interval, we can extract in638
total 309,010,831 transactions and 175,351,541 contract calls,639
involving 90,193,755 EOA and 16,221,914 CA. Account iden-640
tity labels are obtained from Label Word Cloud in Ethereum641
blockchain browser,4 including 73 ICO-wallet, 65 Mining, 193642
Exchange and 2,535 Phish/Hack.643
These four types of accounts are prevalent on blockchain644
platforms, and have received widespread attention. It is of645
sufficient practical significance to identify whether an account646
belongs to these types, especially for phish and hack accounts.647
For each type of identity label (ICO-wallet, Mining, Exchange648
and Phish/Hack), we sample all target account subgraphs with649
this label as the positive sample, as well as the same number650
of randomly sampled account subgraphs with other labels651
as the negative sample. We perform subgraph sampling for652
each labeled account according to different edge information653
(Amount, Times or avgAmount), yielding three types of654
datasets whose names are suffixed with “-A”, “-T”, “-aA”,655
respectively. Table III shows the specifications of subgraph656
datasets sampled from lw-AIG with h = 2 and K = 20.657
B. Comparison Methods658
To illustrate the effectiveness of our Ethident on account659
identification, we compare with three broad categories of660
methods: manual feature engineering, graph embedding meth-661
ods and GNN-based methods.662
For manual feature engineering that is the most common663
and simplest method for account identification, we design664
16 manual features for Ethereum accounts according to the665
prior knowledge and the characteristics of raw Ethereum666
data, as detailedly described in Appendix A, yielding account667
embeddings with dimension size of 16. For graph embed-668
ding methods, we consider DeepWalk [26], Node2Vec [27],669
3http://xblock.pro/
4https://etherscan.io/labelcloud
Struc2Vec [39], Trans2Vec [28] and Graph2Vec [30] for 670
account embedding. For the above two categories of methods, 671
we achieve account identification by feeding the generated 672
account embeddings into three kinds of machine learning 673
classifiers: Logistic Regression (LR), Random Forest (RF) and 674
LightGBM (LGBM). 675
For GNN-based methods, we first compare with three 676
commonly used GNNs: GCN [40], GAT [34], and GIN [41], 677
which are adjusted for subgraph classification by following 678
with a pooling layer and a prediction head. We also com- 679
pare with previous related work for account identification: 680
I2BGNN, which achieves account identification based on 681
different edge information, yielding two variants: I2BGNN-A 682
and I2BGNN-T. 683
C. Experimental Settings 684
For subgraph sampling in Ethident, we set the subgraph 685
hop h to 2 and sample K = 20 neighbors per hop. For 686
graph augmentation, we set the probability P to 10%. For 687
the encoder HGATE, we stack k = 2 graph attention layers 688
with the hidden dimension of 128 for account embedding, 689
and use global max pooling for initial subgraph embedding. 690
In addition, the projection head fφ is a two-layer perceptron 691
with Relu activation and linear skip connection, and the 692
prediction head fψ is a two-layer perceptron with Relu and 693
Softmax activation. We set the temperature parameter τ and 694
trade-off coefficient λ to 0.2 and 0.01, respectively. 695
For GCN, GAT, GIN and I2BGNN, the number of the corre- 696
sponding message passing layers are 2, 2, 5 and 2 respectively. 697
The global max pooling is used for final subgraph embedding. 698
For all GNN-based methods, we set the embedding dimension, 699
batch size N , learning rate, dropout to 128, 32, 0.001, 0.2, 700
respectively. During model training, we use early stopping 701
with patience of 20. 702
For DeepWalk, Node2Vec, Struc2Vec and Trans2Vec, we set 703
the length of walks to 20, the number of walks to 40, and the 704
context size to 3. For Node2Vec, we set the return parameter 705
p and in-out parameter q to 0.25 and 0.4, respectively. For the 706
above four random walk-based methods which are extremely 707
inefficient on large-scale graphs, we generate a training graph 708
by sampling the connected subgraph containing all target 709
accounts and their partial 2-hop neighbors from lw-AIG. For 710
Graph2Vec, we set the number of Weisfeiler-Lehman iterations 711
to 2, the downsampling frequency to 0.0001, the minimal 712
count of graph feature occurrences to 5, the epoch to 500 and 713
the learning rate to 0.025. For the above graph embedding 714
methods, we set the dimension of output account embedding 715
to 128. 716
For each subgraph dataset sampled from lw-AIG, we split 717
it into training, validation and testing sets with a proportion 718
of 1:1:1, repeat 3-fold cross validation 10 times and report the 719
average micro-F1 score as well as standard deviation. 720
D. Evaluation on Account Identification 721
We evaluate our Ethident on account identification and the 722
results are presented in Table IV, from which we can observe 723
that our Ethident achieves state-of-the-art results with respect 724
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3442 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
TABLE IV
SUMMARY OF PERFORMANCE ON ACCOUNT IDENTIFICATION IN TERMS OF F1-SCORE IN PERCENTAGE WITH STANDARD DEVIATION. THE HIGHEST
PERFORMANCE IS MARKED WITH BOLDFACE; THE HIGHEST PERFORMANCE OF DIFFERENT CATEGORIES OF BASELINES IS UNDERLINED. THE
OPS. VALUE STANDS FOR THE OPTIMAL PERFORMANCE STATISTICS OF ALL GRAPH EMBEDDING AND GNN-BASED METHODS UNDER
DIFFERENT SUBGRAPH DATASETS
to comparison methods. Specifically, our Ethident significantly725
outperforms manual feature engineering and graph embedding726
methods across all datasets, and yields 2.09% ∼ 18.27%727
relative improvement over best baselines in terms of F1-score,728
indicating that the learned subgraph features are better at729
capturing the behavior patterns of accounts than manual or730
shallow topology features. When compared to GNN-based731
methods, our Ethident surpasses strong baselines: we observe732
1.13% ∼ 4.93% relative improvement over best baselines.733
These observations meet our intuition. As we can see,734
the performance of manual features and graph embedding735
methods varies largely across different datasets with compara-736
tively lower performance rankings. This is consistent with our737
assertion that they have limited expressiveness for different738
kinds of account subgraphs. Because manual features and739
graph embedding methods cannot learn task-related features740
in an end-to-end manner, they rely heavily on the choice of741
classifiers to achieve relatively high performance. Meanwhile,742
classic GNN baselines normally surpass the manual features743
and graph embedding methods since they learn simultaneously744
from both graph topology and latent features. Nevertheless,745
these baselines like GCN and GAT disregard the important746
edge information and generate subgraph-level features via747
naive pooling operations. The two variants of I2BGNN only748
consider one single interaction information and disregard749
others. Combining with the above analysis, we know that750
our Ethident learns from both node and edge information751
associated with behavior patterns and identities of accounts,752
and uses a hierarchical attention mechanism to effectively 753
characterize node-level account features and subgraph-level 754
behavior patterns, reasonably achieving superior performance 755
on account identification. 756
E. Pattern Analysis in Micro Interaction Subgraphs 757
After evaluating the overall performance of our method, 758
we investigate the behavior patterns of different accounts 759
using experimental results on micro interaction subgraphs. 760
Furthermore, we list the following Observations as well as 761
explainable analysis. 762
1) Obs. 1. Larger Subgraphs Generally Contain More 763
Critical Identity-Related Pattern Information: We analyze 764
the impact of subgraph scale by evaluating our encoder on 765
subgraph datasets with different scale settings. Specifically, 766
we vary h in {1, 2} and K in {2, 4, · · · , 20}. We observe 767
that it is generally better to infer from 2-hop subgraphs than 768
1-hop ones, especially for ICO-wallet and Phish/Hack, judging 769
from Fig. 6. Meanwhile, as the size of subgraphs increases, 770
the performance becomes better first and then remains stable 771
or fluctuates slightly in most cases. The above phenomenon 772
suggests that subgraphs with larger scale benefit account 773
identification more, meeting our intuition that larger subgraphs 774
generally contain more critical pattern information associated 775
with account identities. 776
2) Obs. 2. Different Subgraph Information Highlights the 777
Behavior Patterns of Accounts With Different Contributions: 778
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3443
Fig. 6. Impact of sampling scale on performance and consumption (memory and time).
Fig. 7. Different categories of accounts generally have different behavior patterns, as embodied in their micro interaction subgraphs. Here we present some
interesting accounts to help explanation.
For each category of accounts, the performance of all methods779
except manual features varies largely across the datasets with780
different sampling strategies. And we count the number of781
optimal performances obtained by all methods under different782
sampling strategies, yielding the OPS. values. Judging from783
the bottom row in Table IV, we have reasonable explanations784
for such phenomenon that different sampling strategies benefit785
differently for account identification.786
As we know, different categories of accounts have different787
behavior patterns that are embodied in their micro interaction788
subgraphs. Here we present some interaction subgraphs of789
real accounts to help explain, as shown in Fig. 7. Note790
that only the cumulative transaction amount of Ether is dis-791
played between any two connected nodes in the interaction792
subgraphs.793
• ICO-wallet: Initial Coin Offering (ICO) is a financing794
method that raises funds for blockchain projects by795
issuing tokens. ICO projects usually pre-sell tokens in796
exchange for a large amount of Ether, and after a period,797
the projects will give supporters a certain return on their798
investment. The key behavior pattern is represented as a799
large number of outgoing edges with a certain Amount800
of investment rewards from the center ICO account801
to the surrounding supporters. Since investment actions802
generally involve a higher transaction amount, sampling803
interaction subgraphs according to Amount information804
can maximally preserve the behavior pattern of ICO 805
accounts. 806
• Mining: Mining pooling is a cooperative mining team that 807
shares computational power to find blocks. The mining 808
pool will receive a large amount of mining rewards 809
issued by the system, and distribute them to subordinate 810
miners according to the proof-of-work (PoW) consensus 811
protocol. The key behavior pattern is represented as a 812
large number of outgoing edges with a certain amount 813
of cumulative rewards from the center mining pool to 814
the surrounding miner nodes. Since the block reward 815
of Ethereum is fixed for a period, miners in the same 816
mining pool generally have a relatively stable average 817
mining income, which inspires us to use the average 818
amount (avgAmount) information to guide the sampling 819
of interactive subgraphs. 820
• Exchange: The exchange is a platform that provides users 821
with asset transaction matching and clearing services. 822
Exchange accounts usually interact frequently with their 823
clients to process a large number of transaction orders, 824
and behave as hub nodes with extremely high centrality 825
(i.e., large in-degree and out-degree) in the interaction 826
graphs. So sampling interaction subgraphs according to 827
Times information benefits more. 828
• Phish/Hack: Both Phishers and Hackers engage in illegal 829
fraud activities, in which they usually spread a large 830
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3444 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
Fig. 8. Account Identification F1-score gain (%) when contrasting different augmentation pairs, compared to Ethident (w/o GC) which stands for a
no-augmentation version of our framework, under all datasets. “Identity” represents the original view.
number of websites, emails or links containing viruses,831
Trojans, unwanted software, etc., and trick the recipient832
into doing remittances directly or providing the sensitive833
information of system privileges. As shown in Fig. 7(d),834
the center phish/hack account receives large amounts of835
Ether through various scams and disperses them to other836
phish/hack accounts for concealment. The key behav-837
ior pattern has one explicit characteristic: bi-directional838
edges (mutual transactions) between the center node839
and surrounding ones are rare, and the center node has840
high in-degree and low out-degree. Since illegal frauds841
such as fake token exchange or ransomware often set842
a specific threshold amount or fixed ransom which can843
be reflected in the average amount information, using844
subgraphs sampled according to avgAmount information845
may benefit more for identifying Phish/Hack accounts.846
F. Effect of Subgraph Contrastive Learning847
We further investigate the effectiveness of subgraph contrast848
in our Ethident, and list several Observations as well as849
explainable analysis.850
1) Obs. 3. Graph Augmentation is Crucial, and Structure-851
Level Augmentation Seems to Benefit More: We first apply852
various pairs of augmentation views to all datasets, as illus-853
trated in Fig. 8, and obtain the performance gain of Ethi-854
dent compared with Ethident (w/o GC) which stands for a855
no-augmentation version of our framework (i.e., identifying 856
accounts by using our encoder and a followed prediction 857
head). Overall, it seems more likely to yield positive gain 858
by using either “NodeDrop” or “EdgeRemove” as one of the 859
augmented views, when compared to other augmentation pairs. 860
In addition, for exchange accounts that frequently call various 861
contracts, there will be more non-zero values in their node 862
features, making attribute masking an effective augmentation 863
strategy as well. Finally, we note that the combination of 864
various augmentation views is sensitive to subgraph datasets 865
with different sampling strategies, i.e., the performance gain 866
of our Ethident with the same augmentation pairs varies 867
largely across datasets with different sampling strategies, 868
which encourages adaptive selections of sampling strategies 869
and augmentation combinations in future work. 870
2) Obs. 4. Contrastive Self-Supervision Improves the Gen- 871
eralization of Model in Account Feature Learning: We utilize 872
the UMAP [42] to visualize the subgraph embeddings learnt by 873
Ethident and Ethident (w/o GC) in Fig. 9, where different col- 874
ors mean different labels. Compared with Ethident (w/o GC) 875
which only uses prediction loss Lpred, more obvious inter- 876
class separability and intra-class compactness are achieved 877
after applying the contrastive constraint Lself, which illustrates 878
its effectiveness on learning the behavior pattern differences. 879
Moreover, Ethident separates different patterns with relatively 880
clearer boundaries, suggesting that contrastive self-supervision 881
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3445
Fig. 9. The UMAP visualization of the subgraph embeddings learned by
Ethident with and without subgraph contract.
TABLE V
COMPARISON OF ENCODER PERFORMANCE WITH AND WITHOUT
SUBGRAPH-LEVEL ATTENTIVE POOLING
TABLE VI
RESULTS OF ACCOUNT IDENTIFICATION ON EOSIO
can effectively improve the generalization of models when882
training with scarce labels.883
G. More Analysis884
1) Impact of Subgraph-Level Attentive Pooling: To illus-885
trate the effectiveness of subgraph-level attentive pooling,886
we compare the performance of our encoder with and without887
this module, as reported in Table V. We observe that the888
encoder with AttPooling achieves better performance on 3 out889
of 4 categories of accounts, validating the effectiveness of890
our proposal. For the exception that AttPooling brings a891
negative gain on Mining subgraphs, we speculate that a mining892
pool organization usually behaves very differently from an893
individual miner whose transaction behavior has no significant894
relationship with the mining pool, so aggregating information895
from neighbors may interfere with the characterization of896
mining pools’ behavior patterns.897
2) Impact of Perturbation Probability: We continue to898
analyze the impact of perturbation probability P in data899
augmentation. We use a view for data augmentation (in the900
TABLE VII
RESULTS ON THE ORIGINAL AND MALFUNCTIONING
EXCHANGE & PHISHING DATASETS
form of “Identity & DA”) and vary P in {0.1, 0.2, · · · , 0.5}, 901
the results are shown in Fig. 10. Combined with the statis- 902
tics in Table III, we have drawn the following conclusions: 903
(1) Datasets with larger amounts of samples are more robust 904
to variation in perturbation probability; (2) Datasets with larger 905
average sample scales (in terms of Avg. |N | and Avg. |V |) are 906
less sensitive to variation in perturbation probability; (3) An 907
effective and reasonable selection interval for the perturbation 908
probability could be [0.1, 0.3]. Finally, we observe that our 909
method still performs well when the perturbation is large, 910
which is likely to benefit from the attentive graph pooling. 911
3) Impact of Loss Tradeoff: Here we analyze the impact of 912
the trade-off coefficient λ which controls the contribution of 913
subgraph contrast. As we can see from Fig. 11, our Ethident 914
achieves relatively better performance when λ is less than 1, 915
which meets our intuition. We treat subgraph contrast as a 916
pretext task or a regularization to subgraph classification. 917
When the coefficient of regularization is greater than 1, the 918
classification task cannot be fully optimized, failing to learn 919
the task-related features. 920
4) Tradeoffs Between Performance and Consumption: Since 921
the subgraph extraction allows for mini-batch training of our 922
framework, greatly reducing computational consumption and 923
time cost. Here we further investigate the tradeoffs between 924
performance and consumption under different sampling scales, 925
as shown in Fig. 6. Since the performance of 2-hop subgraphs 926
significantly outperforms that of 1-hop subgraphs, we just 927
draw the consumption curves of 2-hop subgraph. We can 928
first observe that the memory and time consumption increase 929
almost linearly with the sample scale, while the performance 930
converges when the sample scale increases to a certain extent. 931
We then use the “ performance
consumption” metric to roughly analyze the 932
tradeoff between them. Note that a larger “ performance
consumption” metric 933
generally indicates better performance with less consumption. 934
After observation and calculation, we finally conclude that 935
an appropriate parameter setting of sample scale could be 936
h = 2 and K ∈ [8, 10]. 937
5) Generalization Application to Other Cryptocurrency: 938
To verify the generalization of our framework on other 939
cryptocurrencies, we collect transaction data of another on- 940
chain cryptocurrency EOSIO and deploy related experiments. 941
We first construct an account interaction graph including 942
944,865 nodes and 10,435,037 edges, in which the node 943
features (X ∈ R
n×1216) are constructed by the contract calling 944
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3446 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
Fig. 10. Impact of perturbation probability in data augmentation (P).
Fig. 11. Impact of tradeoff coefficient (λ).
information and account name restriction mechanism, and945
the edge features are constructed in the same way as in946
Sec. III-C.1. We then collect 2000 target accounts, half of947
which are normal accounts and half are bot accounts, and948
our goal is to determine the identity of these accounts, that949
is, normal accounts or bot accounts. We apply our Ethi-950
dent framework to achieve the account identification on the951
EOSIO dataset, and the experimental settings are similar to952
that in Sec. V-C. Table VI report the account identification953
results on EOSIO dataset. As we can see, our Ethident954
still achieves the state-of-the-art identification performance on955
the EOSIO dataset, showing a good generalization to other956
cryptocurrencies.957
6) Generalization Evaluation on Malfunctioning Exchange958
Accounts: Accounts in the same broad category share com-959
mon transaction patterns, but also have their own partic-960
ularities, so that they can generally still be classified at961
a more fine-grained level. For example, the malfunctioning962
exchange accounts which have different transaction patterns963
from normal ones are common in real Ethereum, and still964
belong to ‘Exchange’ accounts. However, these malfunction- 965
ing exchange accounts which only receive amount from trader 966
accounts but do not send amount back to traders may be more 967
likely to be misclassified as a ‘Phishing’ account rather than 968
an ‘Exchange’ account, as it has a more similar transaction 969
pattern to the former. Here, we conduct experiments to validate 970
whether our Ethident model can successfully identify the 971
malfunctioning exchange account as an ‘Exchange’ account 972
instead of a ‘Phishing’ account. 973
• Randomly select the same number of ‘Exchange’ 974
accounts and ‘Phishing’ accounts, and extract their trans- 975
action subgraphs, yielding a new dataset of 386 account 976
subgraphs. Split the new dataset into training Dtrain, 977
validation Dval and testing Dori
test sets with a proportion 978
of 1 : 1 : 1. 979
• Generate the malfunctioning exchange account by remov- 980
ing the target exchange account’s outgoing edges from 981
account subgraph. In this way, we yield the malfunc- 982
tioning testing set Dmal
test containing phishing accounts and 983
malfunctioning exchange accounts. 984
• Train Ethident model to determine whether an account 985
is an ‘Exchange’ account or a ‘Phishing’ account using 986
Dtrain and Dval. 987
• Evaluate the performance of the model in determining 988
whether an account is an ‘Exchange’ account or a ‘Phish- 989
ing’ account using Dori
test and Dmal
test respectively. 990
As we can see from Table VII, our Ethident models still 991
achieve powerful performance in identifying indistinguishable 992
‘Phishing’ accounts and ‘Malfunctioning Exchange’ accounts. 993
Compared with the original results in Dori
test, our Ethident show 994
-0.63% ∼ 0.83% performance fluctuations in malfunctioning 995
testing set Dmal
test , which is a rational and normal performance 996
jitter. This phenomenon suggests that our model has almost no 997
performance loss in distinguishing between phishing accounts 998
and malfunctioning exchange accounts, showing strong robust- 999
ness and generalization. 1000
VI. CONCLUSION 1001
Financial security has become a top priority in the 1002
blockchain ecosystem. This paper provides a new perspective 1003
on account de-anonymization, and proposes a behavior-aware 1004
Ethereum account identification framework that integrates 1005
hierarchical graph attention and self-supervision mechanism, 1006
to effectively characterize the behavior patterns of differ- 1007
ent accounts. Extensive experiments on Ethereum datasets 1008
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
ZHOU et al.: BEHAVIOR-AWARE ACCOUNT DE-ANONYMIZATION ON ETHEREUM INTERACTION GRAPH 3447
TABLE VIII
STATISTICS OF THE AVERAGE OF MANUAL FEATURE FOR VARIOUS ACCOUNTS IN ETHEREUM
demonstrate the superiority of our framework in terms of state-1009
of-the-art performance and powerful generalization. Further-1010
more, our framework also has a good transferability to other1011
blockchain platforms like Bitcoin and EOSIO, which will be1012
discussed in future work.1013
APPENDIX A1014
MANUAL FEATURE DETAILS1015
Manual feature engineering is the most common and sim-1016
plest way for account identification. According to the char-1017
acteristics of raw Ethereum data and prior knowledge, we1018
design 16 manual features for Ethereum accounts, as shown1019
in Table VIII.1020
REFERENCES1021
[1] M. H. Miraz and M. Ali, “Applications of blockchain technology beyond1022
cryptocurrency,” Ann. Emerg. Technol. Comput., vol. 2, no. 1, pp. 1–6,1023
Jan. 2018.1024
[2] K. Fanning and D. P. Centers, “Blockchain and its coming impact on1025
financial services,” J. Corporate Accounting Finance, vol. 27, no. 5,1026
pp. 53–57, 2016.1027
[3] G. Blossey, J. Eisenhardt, and G. Hahn, “Blockchain technology in1028
supply chain management: An application perspective,” in Proc. Annu.1029
Hawaii Int. Conf. Syst. Sci., 2019, pp. 1–9.1030
[4] T. McGhin, K.-K. R. Choo, C. Z. Liu, and D. He, “Blockchain in1031
healthcare applications: Research challenges and opportunities,” J. Netw.1032
Comput. Appl., vol. 135, pp. 62–75, Jun. 2019.1033
[5] R. Klusman and T. Dijkhuizen, “Deanonymisation in Ethereum using1034
existing methods for Bitcoin,” Syst. Netw. Lab. (SNE-Lab), Univ.1035
Amsterdam, Amsterdam, The Netherlands, Tech. Rep. 61, 2018.1036
[6] K. Toyoda, T. Ohtsuki, and P. T. Mathiopoulos, “Multi-class1037
Bitcoin-enabled service identification based on transaction history1038
summarization,” in Proc. IEEE Int. Conf. Internet Things (iThings)1039
IEEE Green Comput. Commun. (GreenCom) IEEE Cyber, Phys.1040
Social Comput. (CPSCom) IEEE Smart Data (SmartData), Jul. 2018,1041
pp. 1153–1160.1042
[7] Y.-J. Lin, P.-W. Wu, C.-H. Hsu, I.-P. Tu, and S.-W. Liao, “An evaluation1043
of Bitcoin address classification based on transaction history summa-1044
rization,” in Proc. IEEE Int. Conf. Blockchain Cryptocurrency (ICBC),1045
May 2019, pp. 302–310.1046
[8] M. Bartoletti, B. Pes, and S. Serusi, “Data mining for detecting Bitcoin1047
Ponzi schemes,” in Proc. Crypto Valley Conf. Blockchain Technol.1048
(CVCBT), Jun. 2018, pp. 75–84.1049
[9] Y. Huang et al., “Understanding (Mis) behavior on the EOSIO1050
blockchain,” Proc. ACM Meas. Anal. Comput. Syst., vol. 4, no. 2,1051
pp. 1–28, 2020.1052
[10] Y. Li, Y. Cai, H. Tian, G. Xue, and Z. Zheng, “Identifying illicit1053
addresses in Bitcoin network,” in Proc. Int. Conf. Blockchain Trust-1054
worthy Syst. Singapore: Springer, 2020, pp. 99–111.1055
[11] Q. Yuan, B. Huang, J. Zhang, J. Wu, H. Zhang, and X. Zhang, “Detecting 1056
phishing scams on Ethereum based on transaction records,” in Proc. 1057
IEEE Int. Symp. Circuits Syst. (ISCAS), Oct. 2020, pp. 1–5. 1058
[12] J. Shen, J. Zhou, Y. Xie, S. Yu, and Q. Xuan, “Identity inference on 1059
blockchain using graph neural network,” in Proc. Int. Conf. Blockchain 1060
Trustworthy Syst. Singapore: Springer, 2021, pp. 3–17. 1061
[13] L. Chen, J. Peng, Y. Liu, J. Li, F. Xie, and Z. Zheng, “Phishing 1062
scams detection in Ethereum transaction network,” ACM Trans. Internet 1063
Technol., vol. 21, no. 1, pp. 1–16, Feb. 2021. 1064
[14] S. Meiklejohn et al., “A fistful of Bitcoins: Characterizing payments 1065
among men with no names,” in Proc. Conf. Internet Meas. Conf., 1066
Oct. 2013, pp. 127–140. 1067
[15] M. Spagnuolo, F. Maggi, and S. Zanero, “Bitiodine: Extracting intelli- 1068
gence from the Bitcoin network,” in Proc. Int. Conf. Financial Cryptogr. 1069
Data Secur. Berlin, Germany: Springer, 2014, pp. 457–468. 1070
[16] F. Reid and M. Harrigan, “An analysis of anonymity in the Bitcoin 1071
system,” in Security and Privacy in Social Networks. New York, NY, 1072
USA: Springer, 2013, pp. 197–223. 1073
[17] E. Androulaki, G. O. Karame, M. Roeschlin, T. Scherer, and S. Capkun, 1074
“Evaluating user privacy in Bitcoin,” in Proc. Int. Conf. Financial 1075
Cryptogr. Data Secur. Berlin, Germany: Springer, 2013, pp. 34–51. 1076
[18] M. Harrigan and C. Fretter, “The unreasonable effectiveness 1077
of address clustering,” in Proc. Intl IEEE Conf. Ubiquitous 1078
Intell. Comput., Adv. Trusted Comput., Scalable Comput. 1079
Commun., Cloud Big Data Comput., Internet People, Smart World 1080
Congr. (UIC/ATC/ScalCom/CBDCom/IoP/SmartWorld), Jul. 2016, 1081
pp. 368–373. 1082
[19] C. Remy, B. Rym, and L. Matthieu, “Tracking Bitcoin users activity 1083
using community detection on a network of weak signals,” in Proc. Int. 1084
Conf. Complex Netw. Their Appl. Cham, Switzerland: Springer, 2017, 1085
pp. 166–177. 1086
[20] M. Lischke and B. Fabian, “Analyzing the Bitcoin network: The first 1087
four years,” Future Internet, vol. 8, no. 4, p. 7, Mar. 2016. 1088
[21] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast 1089
unfolding of communities in large networks,” J. Stat. Mech., Theory 1090
Exp., vol. 2008, no. 10, Oct. 2008, Art. no. P10008. 1091
[22] F. Victor, “Address clustering heuristics for Ethereum,” in Proc. Int. 1092
Conf. Financial Cryptogr. Data Secur. Cham, Switzerland: Springer, 1093
2020, pp. 617–633. 1094
[23] S. Linoy, N. Stakhanova, and S. Ray, “De-anonymizing Ethereum 1095
blockchain smart contracts through code attribution,” Int. J. Netw. 1096
Manage., vol. 31, no. 1, p. e2130, Jan. 2021. 1097
[24] M. Jourdan, S. Blandin, L. Wynter, and P. Deshpande, “Characterizing 1098
entities in the Bitcoin blockchain,” in Proc. IEEE Int. Conf. Data Mining 1099
Workshops (ICDMW), Nov. 2018, pp. 55–62. 1100
[25] G. Ke et al., “LightGBM: A highly efficient gradient boosting deci- 1101
sion tree,” in Proc. Adv. Neural Inf. Process. Syst., vol. 30, 2017, 1102
pp. 3146–3154. 1103
[26] B. Perozzi, R. Al-Rfou, and S. Skiena, “DeepWalk: Online learning of 1104
social representations,” in Proc. 20th ACM SIGKDD Int. Conf. Knowl. 1105
Discovery Data Mining, Aug. 2014, pp. 701–710. 1106
[27] A. Grover and J. Leskovec, “node2vec: Scalable feature learning for 1107
networks,” in Proc. 22nd ACM SIGKDD Int. Conf. Knowl. Discovery 1108
Data Mining, Aug. 2016, pp. 855–864. 1109
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
3448 IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 17, 2022
[28] J. Wu et al., “Who are the phishers? Phishing scam detection on1110
Ethereum via network embedding,” IEEE Trans. Syst., Man, Cybern.1111
Syst., vol. 52, no. 2, pp. 1156–1166, Feb. 2020.1112
[29] Z. Yuan, Q. Yuan, and J. Wu, “Phishing detection on Ethereum via1113
learning representation of transaction subgraphs,” in Proc. Int. Conf.1114
Blockchain Trustworthy Syst. Singapore: Springer, 2020, pp. 178–191.1115
[30] N. Annamalai, C. Mahinthan, V. Rajasekar, C. Lihui, L. Yang,1116
and J. Shantanu, “graph2vec: Learning distributed representations of1117
graphs,” in Proc. 13th Int. Workshop Mining Learn. Graphs (MLG),1118
2017, pp. 1–8.1119
[31] Q. Xuan et al., “Subgraph networks with application to structural feature1120
space expansion,” IEEE Trans. Knowl. Data Eng., vol. 33, no. 6,1121
pp. 2776–2789, Jun. 2019.1122
[32] S. Phetsouvanh, F. Oggier, and A. Datta, “EGRET: Extortion graph1123
exploration techniques in the Bitcoin network,” in Proc. IEEE Int. Conf.1124
Data Mining Workshops (ICDMW), Nov. 2018, pp. 244–251.1125
[33] R. Zhang, G. Zhang, L. Liu, C. Wang, and S. Wan, “Anomaly detection1126
in Bitcoin information networks with multi-constrained meta path,”1127
J. Syst. Archit., vol. 110, Nov. 2020, Art. no. 101829.1128
[34] P. Veličković, G. Cucurull, A. Casanova, A. Romero, P. Liò, and1129
Y. Bengio, “Graph attention networks,” in Proc. 6th Int. Conf. Learn.1130
Represent., 2018, pp. 1–12.1131
[35] Y. You, T. Chen, Y. Sui, T. Chen, Z. Wang, and Y. Shen, “Graph1132
contrastive learning with augmentations,” in Proc. 34nd Int. Conf. Neural1133
Inf. Process. Syst., vol. 33, 2020, pp. 5812–5823.1134
[36] Y. Wang, W. Wang, Y. Liang, Y. Cai, J. Liu, and B. Hooi, “NodeAug:1135
Semi-supervised node classification with data augmentation,” in Proc.1136
26th ACM SIGKDD Int. Conf. Knowl. Discovery Data Mining,1137
Aug. 2020, pp. 207–217.1138
[37] J. Zhou, J. Shen, and Q. Xuan, “Data augmentation for graph classifi-1139
cation,” in Proc. 29th ACM Int. Conf. Inf. Knowl. Manage., Oct. 2020,1140
pp. 2341–2344.1141
[38] P. Zheng, Z. Zheng, J. Wu, and H.-N. Dai, “XBlock-ETH: Extracting1142
and exploring blockchain data from Ethereum,” IEEE Open J. Comput.1143
Soc., vol. 1, pp. 95–106, 2020.1144
[39] L. F. R. Ribeiro, P. H. P. Saverese, and D. R. Figueiredo, “struc2vec:1145
Learning node representations from structural identity,” in Proc. 23rd1146
ACM SIGKDD Int. Conf. Knowl. Discovery Data Mining, Aug. 2017,1147
pp. 385–394.1148
[40] T. N. Kipf and M. Welling, “Semi-supervised classification with graph1149
convolutional networks,” in Proc. 5th Int. Conf. Learn. Represent., 2017,1150
pp. 1–14.1151
[41] K. Xu, W. Hu, J. Leskovec, and S. Jegelka, “How powerful are graph1152
neural networks?” in Proc. 6th Int. Conf. Learn. Represent., 2018,1153
pp. 1–17.1154
[42] L. McInnes, J. Healy, N. Saul, and L. Großberger, “UMAP: Uniform1155
manifold approximation and projection,” J. Open Source Softw., vol. 3,1156
no. 29, p. 861, Sep. 2018.1157
Jiajun Zhou received the B.S. degree in automa-1158
tion from the Zhejiang University of Technology,1159
Hangzhou, China, in 2018, where he is currently1160
pursuing the Ph.D. degree in control theory and1161
engineering with the College of Information and1162
Engineering. His current research interests include1163
graph data mining and deep learning, especially for1164
graph self-supervised learning and blockchain data1165
analytics.1166
Chenkai Hu is currently pursuing the bachelor’s 1167
degree in automation with the Zhejiang University of 1168
Technology, Hangzhou, China. His current research 1169
interests include data mining in blockchain. 1170
Jianlei Chi received the B.S. degree in computer 1171
science and technology from Harbin Engineering 1172
University, China, in 2014, and the Ph.D. degree 1173
in computer science and technology from Xi’an 1174
Jiaotong University, China, in 2022. He is currently 1175
an Assistant Professor with the Hangzhou Research 1176
Institute, Xidian University. His research interests 1177
include trustworthy software, software engineering, 1178
program analysis, and machine learning. 1179
Jiajing Wu (Senior Member, IEEE) received the 1180
Ph.D. degree from The Hong Kong Polytechnic 1181
University, Hong Kong, in 2014. In 2015, she joined 1182
Sun Yat-sen University, Guangzhou, China, where 1183
she is currently an Associate Professor. Her research 1184
interests include blockchain, graph mining, and net- 1185
work science. She was awarded the Hong Kong 1186
Ph.D. Fellowship Scheme during her Ph.D. degree 1187
in Hong Kong from 2010 to 2014. She also serves as 1188
an Associate Editor for IEEE TRANSACTIONS ON 1189
CIRCUITS AND SYSTEMS—II: EXPRESS BRIEFS. 1190
Meng Shen (Member, IEEE) received the B.Eng. 1191
degree in computer science from Shandong Univer- 1192
sity, Jinan, China, in 2009, and the Ph.D. degree in 1193
computer science from Tsinghua University, Beijing, 1194
China, in 2014. He is currently an Associate Profes- 1195
sor with the Beijing Institute of Technology, Beijing. 1196
He has authored over 50 papers in top-level journals 1197
and conferences, such as ACM SIGCOMM, IEEE 1198
JOURNAL ON SELECTED AREAS IN COMMUNI- 1199
CATIONS (JSAC), and IEEE TRANSACTIONS ON 1200
INFORMATION FORENSICS AND SECURITY (TIFS). 1201
His research interests include data privacy and security, blockchain applica- 1202
tions, and encrypted traffic classification. He received the Best Paper Award 1203
from IEEE/ACM IWQoS 2021. He was selected by the Beijing Nova Program 1204
2020 and the Winner of the ACM SIGCOMM China Rising Star Award in 1205
2019. He has guest edited Special Issues on Emerging Technologies for Data 1206
Security and Privacy in IEEE Network and IEEE INTERNET OF THINGS 1207
JOURNAL. 1208
Qi Xuan (Senior Member, IEEE) received the B.S. 1209
and Ph.D. degrees in control theory and engineer- 1210
ing from Zhejiang University, Hangzhou, China, in 1211
2003 and 2008, respectively. He was a Post-Doctoral 1212
Researcher with the Department of Information Sci- 1213
ence and Electronic Engineering, Zhejiang Univer- 1214
sity, from 2008 to 2010, and a Research Assistant 1215
with the Department of Electronic Engineering, City 1216
University of Hong Kong, Hong Kong, in 2010 and 1217
2017. From 2012 to 2014, he was a Post-Doctoral 1218
Fellow of the Department of Computer Science, 1219
University of California at Davis, CA, USA. He is currently a Professor 1220
with the Institute of Cyberspace Security, College of Information Engineering, 1221
Zhejiang University of Technology, Hangzhou. His current research interests 1222
include network science, graph data mining, cyberspace security, machine 1223
learning, and computer vision. 1224
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:22:52 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Black & White)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Tags
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 524288
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo true
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments true
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /AdobeArabic-Bold
    /AdobeArabic-BoldItalic
    /AdobeArabic-Italic
    /AdobeArabic-Regular
    /AdobeHebrew-Bold
    /AdobeHebrew-BoldItalic
    /AdobeHebrew-Italic
    /AdobeHebrew-Regular
    /AdobeHeitiStd-Regular
    /AdobeMingStd-Light
    /AdobeMyungjoStd-Medium
    /AdobePiStd
    /AdobeSansMM
    /AdobeSerifMM
    /AdobeSongStd-Light
    /AdobeThai-Bold
    /AdobeThai-BoldItalic
    /AdobeThai-Italic
    /AdobeThai-Regular
    /ArborText
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /BellGothicStd-Black
    /BellGothicStd-Bold
    /BellGothicStd-Light
    /ComicSansMS
    /ComicSansMS-Bold
    /Courier
    /Courier-Bold
    /Courier-BoldOblique
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /Courier-Oblique
    /CourierStd
    /CourierStd-Bold
    /CourierStd-BoldOblique
    /CourierStd-Oblique
    /EstrangeloEdessa
    /EuroSig
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Helvetica
    /Helvetica-Bold
    /Helvetica-BoldOblique
    /Helvetica-Oblique
    /Impact
    /KozGoPr6N-Medium
    /KozGoProVI-Medium
    /KozMinPr6N-Regular
    /KozMinProVI-Regular
    /Latha
    /LetterGothicStd
    /LetterGothicStd-Bold
    /LetterGothicStd-BoldSlanted
    /LetterGothicStd-Slanted
    /LucidaConsole
    /LucidaSans-Typewriter
    /LucidaSans-TypewriterBold
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MinionPro-Bold
    /MinionPro-BoldIt
    /MinionPro-It
    /MinionPro-Regular
    /MinionPro-Semibold
    /MinionPro-SemiboldIt
    /MVBoli
    /MyriadPro-Black
    /MyriadPro-BlackIt
    /MyriadPro-Bold
    /MyriadPro-BoldIt
    /MyriadPro-It
    /MyriadPro-Light
    /MyriadPro-LightIt
    /MyriadPro-Regular
    /MyriadPro-Semibold
    /MyriadPro-SemiboldIt
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /Symbol
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Webdings
    /Wingdings-Regular
    /ZapfDingbats
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 600
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 600
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.15
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 300
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 900
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.33333
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /Unknown
  /CreateJDFFile false
  /Description <<
    /ENU ()
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice