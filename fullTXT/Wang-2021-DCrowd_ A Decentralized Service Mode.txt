DCrowd: A Decentralized Service Model for Credible Crowdsourcing Based on Game Theory and Smart Contracts
DCrowd: A Decentralized Service Model for
Credible Crowdsourcing Based on Game Theory
and Smart Contracts
Huajian Wang†∗, Huan Zhou†∗, Guogui Yang†(�), Tao Xiao†
† National University of Defense Technology, Changsha 410073, China
{wanghuajian,huanzhou,ggy,xt}@nudt.edu.cn
Abstract—Crowdsourcing provides a new way of group in-
telligence interaction in recent years. Traditional crowdsourcing
service models rely on centralized third-party platforms, which
are bottlenecks in credibility. Blockchain is a potential solution.
We therefore propose DCrowd, a Decentralized and Credible
crowdsourcing model based on game theory and smart contracts.
The workers in DCrowd are organized in a decentralized manner.
However, information on the blockchain is open, which may cause
data leakage and privacy issues. To tackle the data transparency
issue, a commitment scheme is leveraged for data submission
among workers. Then, an unbiased random selection algorithm
is further designed to select independent workers from the
dispersed worker pool to avoid possible collusion. Through the
Nash equilibrium principle, it is proved that workers in DCrowd
have to perform honestly to maximize their rewards. Finally,
the feasibility of our model design is demonstrated through
experiments on Ethereum.
Index Terms—blockchain, game theory, task assignment,
crowdsourcing, smart contract
I. INTRODUCTION
With the development of Internet technology, outsourcing
has gradually evolved into a new form in which the task
sponsor publishes the problems that cannot be solved by
himself to the network platform, and then transfers them to
the non-specific public. Such tasks usually involve multiple
individuals, and this one-to-many form of outsourcing is
defined as crowdsourcing [1].
Crowdsourcing is a distributed problem-solving mechanism
as well as an emerging business model. Enterprises can
effectively reduce the cost of innovation and develop the
wisdom of the public. At present, a number of large-scale and
highly standardized crowdsourcing platforms have emerged,
such as UPWork1, FreeLancer2 and Amazon Mechanical
Turk3. Each of these platforms has its own characteristics,
but they all follow the same delivery process : (1) the task
publisher describes specific requirements on the website; (2)
the requester chooses the cooperation mode; (3) the requester
entrusts the bounty to the platform; (4) the task publisher
waits for the task undertaker to complete the task and obtain
the solution or result; (5) the requester accepts the result
* The first two authors contribute equally to this paper
� The corresponding author
1https://www.upwork.com/
2https://www.freelancer.com/
3https://www.mturk.com/
and selects the qualified part for adoption; (6) the requester
confirms the payment after adopting the result. In this kind
of crowdsourcing activity, there are many credibility issues
in the actual operation as it often involves the delivery of
compensation, including:
• Lack of effective guarantee for result quality: The
crowdsourcing participants may be professionals in the
field, or non-professionals, or even plagiarists and mali-
cious users. As a result, the quality of the final solution
received by the requester is often mixed, and sometimes
no satisfactory results can be obtained.
• Lack of trustworthy platform for crowdsourcing en-
forcement: At present, the signing of crowdsourcing
agreements completely relies on a third-party platform,
and the authenticity of the information source of the
required task completely depends on the credibility of
the third party, which lead to the problem in many cases
no substantial guarantee is obtained.
• Lack of automation support for entire process: During
the operation of the existing crowdsourcing platform,
most of the key steps such as worker selection, result
evaluation, and salary payment are completed manually,
or require the contracting party/worker to participate in
decision-making.
In general, the core contradiction of multi-party interest
protection in crowdsourcing activities lies in how to ensure
that the result data provided by task undertakers are authentic
and meet the quality standards for task publishers in an open
internet environment. For the workers, how to ensure that they
will be paid in accordance with the contribution of the result
data they have submitted.
Given the rights protection problems existing in the prior
art, blockchain [2] and smart contract [3] technologies bring
new solutions to the rights and interests protection of crowd-
sourcing activities. Taking full account of the particularity
of crowdsourcing activities in terms of privacy protection,
copyright definition, and result quality evaluation, we use
the advantages of blockchain technology and consensus algo-
rithms [4] in terms of confirming rights, depositing evidence,
and traceability to solve the problem of establishing a trust
mechanism between various participants. The purpose of this
article is to provide a safe, fair, and reliable method and system
23
2021 IEEE International Conference on Services Computing (SCC)
978-1-6654-1683-2/21/$31.00 ©2021 IEEE
DOI 10.1109/SCC53864.2021.00014
20
21
 IE
EE
 In
te
rn
at
io
na
l C
on
fe
re
nc
e 
on
 S
er
vi
ce
s C
om
pu
tin
g 
(S
C
C
) |
 9
78
-1
-6
65
4-
16
83
-2
/2
1/
$3
1.
00
 ©
20
21
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
SC
C
53
86
4.
20
21
.0
00
14
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
for monitoring the entire process of crowdsourcing activities
based on smart contracts. In short, our specific contributions
are as follows:
• Two-phase data submission mechanism: This paper
combines smart contracts and commitment mechanisms
[5] to design a two-phase submission mechanism for
crowdsourcing systems to guarantee data privacy, which
improves the quality of the result data and eliminates ran-
dom fraud and plagiarism. Also, we have further designed
an unbiased random selection algorithm, which means
the worker’s committee is generated by the unbiased
selection of smart contracts, thereby achieving fairness,
openness, transparency, and credibility of crowdsourcing
activities.
• Incentive mechanism based on game theory: As anony-
mous participants in the system, workers hope to obtain
benefits by submitting correct crowdsourcing results. In
DCrowd, the reward function for different behaviors of
workers is carefully designed so that workers must always
act honestly to get the most benefits. Specifically, the
worker’s trust problem in our model is proved by the
principle of Nash equilibrium.
• Prototype implementation: We have implemented the
system4 based on the Ethereum public test network, Rop-
sten,5 to verify the feasibility. The experimental results
show the usability and scalability of DCrowd. Besides,
we illustrate the future improvements to the program.
The rest of the paper is organized as follows. Section 2
discusses the related work on crowdsourcing and blockchain.
Section 3 presents the two-phase submission model design
with smart contract. Section 4 details key technologies includ-
ing two-phase submission scheme based on smart contract, un-
biased random sortition algorithm and payoff function design,
the trustworthiness of which is proved by the Nash equilibrium
principle. Section 5 introduces the prototype implementation
and experiments. Finally, we summarize the paper with con-
clusion and future work in Section 6.
II. RELATED WORK
Existing related security technologies based on blockchain
and smart contracts are still in the embryonic development
stage, and a complete application supervision system has not
yet formed. Especially in crowdsourcing scenarios, there is
no mature and practical applications yet. For some related
scenarios, such as crowdsourced collection and construction,
data privacy in crowdsourcing systems, task assignment, salary
payment issues, etc., there are some solutions.
Some researchers solve the stability problem of task match-
ing in the centralized crowdsourcing system [6]–[10]. BPTM
[11] combines smart contracts with searchable encryption,
effectively achieving identity anonymity and reliable matching.
TSWCrowd [12] proposed a task allocation strategy TSW
and divided the reward into two parts: basic compensation
4https://github.com/linyifei-6/DCrowd
5https://ropsten.etherscan.io/
and quality compensation. It fully considers the interests of
the workers, but it is easy to cause losses to the interests
of the requester. When assigning tasks, it is necessary not
only to protect the data privacy of the participants in the
crowdsourcing activities but also to consider many malicious
participants that may exist in the system. Therefore, the
randomness and fairness of the task assignment scheme cannot
be avoided. Under this strategy of selection, however, it is
easier for malicious organizations or pre-collaborated workers
to “free ride”.
For the problem of malicious participants in the centralized
system, Some researchers adopt a reputation mechanism to
solve them [13]–[17]. Some work applies game theory to
blockchain systems to build credible decentralized systems. A
spatial crowdsourcing incentive mechanism based on Bayesian
games is used to improve data quality [18]. RTRC [19] is a
crowdsourcing model, which adopts a reputation mechanism
based on evolutionary game theory to encourage requesters
to contribute real results of tasks and workers to give real
feedbacks on crowdsourcing results. But this model is still
designed for a centralized crowdsourcing platform.
TABLE I
Comparison Table of Crowdsourcing Platforms
Platform Decentra-
lization
Optimal
Match
Rando-
mness
Malicious
Users
Incentive
Mechanism
RFBC [14] × × × � ×
ABC [26] × � × × ×
RTRC [19] × × × � �
Fluid [21] � × × × ×
PFC [22] � � × × ×
CBC [23] � � × × ×
BPTM [11] � � × × ×
Fed [24] � � × × ×
TSW [12] � � × � ×
Z-Lancer [25] � � × � ×
CPchain [23] � � Auction1 × ×
1 CPchain selects workers by auction, which does not involve randomness
issues.
In recent years, researchers have also proposed some de-
centralized crowdsourcing systems. CrowdBC [20] and Fluid
[21] realized the further combination of crowdsourcing and
blockchain but did not optimize each key step of the crowd-
sourcing process. PFCrowd [22] is a framework for privacy
protection and federated crowdsourcing. It uses blockchain
technology to enable brokers to recommend and staffs perform
tasks across multiple crowdsourcing platforms. It also designs
an encrypted task matching scheme without involving any
third-party authority to support the staff to match the published
task index on the chain. CPchain [23] uses an auction mecha-
nism to allocate tasks. The problem is that the winning workers
will affect the result evaluation criteria. For example, when a
majority vote is used for evaluation, malicious organizations
or workers can raise prices to obtain qualifications for tasks,
and then collude to manipulate crowdsourcing results to obtain
task rewards. This is unfair to other honest workers, and the
requester will also pay for untrue results. FedCrowd [24] is a
24
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
joint crowdsourcing platform that provides highly customized
privacy protection schemes for task distribution and task
matching. Its problem is still that it ignores the randomness
of the selection. ZebraLancer [25] is a private and anonymous
decentralized crowdsourcing system that stipulates the results
submitted by workers are encrypted according to the public
key of the requester, so that workers in the system may plagia-
rize each other. Another problem with ZebraLancer is that the
quality of workers’ tasks is determined by the requester, which
is especially unfair to workers. Detailed comparison of above
systems is shown in Table I. Comprehensive analysis shows
that these systems are not completely credible. The reason is
that these existing methods only focus on crowdsourcing task
construction or salary hosting, or data management which is
only one step in the entire process of crowdsourcing activities.
III. THE OVERALL MODEL DESIGN OF DCROWD
This section describes the four entity roles involved in
the model: ordinary user, requester, worker, and workers
committee. The overall system architecture for crowdsourcing
enforcement of our DCrowd is illustrated afterward, followed
by a detailed description of the crowdsourcing task cycle.
A. The Roles In Model
Ordinary Users: Ordinary blockchain users register as users
of this system, and only need to provide the user’s wallet
address when registering, such as the Ethereum wallet and the
registration fee set to prevent “Sybil Attack”.
Requester: It is the publisher of the crowdsourcing task,
denoted as R. When publishing the crowdsourcing task, R
needs to give his/her crowdsourcing contract address and give
a brief description of the requirements of the crowdsourcing
task, including its expected data format, salary description,
number of workers recruited, registration time, etc. After the
contractor committee submits the execution result, R needs to
check the task submission status of the workers.
Worker: It is denoted as W. W signs up for the crowdsourc-
ing task that he/she expects to participate in according to the
task description given by the R. Then, if W is selected by the
crowdsourcing task, he/she submits the formatted data results
after the task execution, and withdraws the relevant rewards
according to its results.
Workers Committee: It is composed of all workers par-
ticipating in the same crowdsourcing task, denoted as WC.
Besides, CW represents the workers who have joined the com-
mittee. The number of committee members is determined by
specific crowdsourcing tasks, and its members are selected by
the unbiased random algorithm provided in the system. Only
those who sign up for a crowdsourcing task can be selected.
Once a W accepts a crowdsourcing task, he/she automatically
joins the WC of the specific crowdsourcing contract, and all
hisr actions will be recorded on the blockchain.
In this paper, we make a basic assumption about the role
of W, i.e., they are always selfish and aim to maximize their
income.
B. Overall System Architecture
DCrowd is implemented by four smart contracts based on
blockchain: user management contract (UM), crowdsourcing
contract (CS), crowdsourcing management contract (CSM),
and two-phase submission contract (TPS). Among them, users
only need to operate in the UM and CS. The TPS and
CSM have provided related interfaces for the crowdsourcing
participants to invoke through UM and CS. Participants of the
system can participate in activities only if they remain online.
The more workers participate in the system, the more reliable
and trustful the system will be. Figure 1 illustrates the overall
architecture designd for DCrowd.
Fig. 1. The Overview of the DCrowd
To facilitate the understanding of DCrowd, we divide the
whole crowdsourcing activity into two parts: task creation and
task execution. The former refers to a series of operations in
the system to form WC before the crowdsourcing task starts,
including task setting, worker enrollment, unbiased random
selection, worker feedback and task assignment, namely 1-3
in Figure 1.
In the task creation phase, R first uses UM to generate CS
for him/her. Before publishing the task, R should carefully
consider the detailed terms of the crowdsourcing task. Among
them, one of the most important clauses is to specify N, the
number of members of WC. The more workers, the more
trustworthy the crowdsourcing results are, but on the other
hand, R need pay more. After posting the task, the online W
can read the task introduction of the contract, and then decide
whether to sign up for the crowdsourcing task according to
his/her situation. After enrollment time is over or the number
of applicants reaches a certain number, the unbiased random
sortition algorithm detailed in Section IV-B can be used to
select N independent workers to form a WC. The selection
process is jointly implemented by UM and TPS.
25
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2. Two-Phase Submission Mechanism Based On Commitment Scheme
Once selected, W can choose to accept or reject within a
time window. When accepting the task, W must pay a certain
commitment fee that can be retrieved at the end of the activity.
Rejection over time or no response must be punished because
this disrupts the entire activity to a certain extent.
If the number of committee members meets the predeter-
mined requirements, the WC is successfully formed and the
system enters the task execution stage. This stage includes
related operations after the start of the crowdsourcing task,
including result submission, quality evaluation, and reward
based on quality, namely 4-6 in Figure 1.
When R calls the interface to start the task, he/she needs to
publish the details of the task and pay the possible maximum
reward. After the task starts, CW completes the task indepen-
dently off-chain and generates the result, and then according to
the two-phase submission mechanism described in IV-A, the
result is committed and submitted to TPS without tampering.
After the task submission time is over, R calls related interfaces
in CS for quality evaluation which includes two operations:
detection of CW submission status and quality assessment. In
this link, workers who fail to submit commitment and results
on time will be punished. If no worker successfully submits
the result, the task fails and WC will be disbanded. TPS will
evaluate the correct results based on all CW submitted data,
and allocate reward to CW based on their data quality. R
and CW who have completed the task can withdraw reward
and commitment fee. Note that R can withdraw the remaining
deposit only after all CW has withdrawn.
This is the end of a successful crowdsourcing cycle. At this
point, W can choose to leave the committee and participate
in other crowdsourcing tasks as soon as possible, or R can
dissolve the committee and end the task.
IV. KEY TECHNIQUES
Some key techniques are carefully designed and leveraged
in DCrowd to ensure credibility. Hence, DCrowd model can
not only ensure the data privacy of the requester and the
information independence between the workers, but also au-
tomatically perform quality inspection on the crowdsourcing
task. Among them, a two-phase submission mechanism is
proposed to ensure the privacy of user information and sub-
mitted results. An unbiased random selection algorithm is put
forward to ensure that the selection of the worker committee
is random and independent. On this basis, we provide the
payoff function of DCrowd and use the Nash equilibrium
principle to prove that each worker in the CW has to behave
honestly to maximize his/her income. Moreover, we analyze
some possible frauds by malicious R and CW. For this reason,
we take certain measures to avoid such frauds and prove that
malicious R and CW can be audited through their historical
behavior.
A. A Two-Phase Submission Mechanism
In DCrowd, the two-phase submission scheme based on
commitment is a crucial technology to ensure that workers are
independent and not colluding with each other. In traditional
crowdsourcing systems, workers are often only required to
complete submissions within a time window, which does not
consider that the data on the blockchain is public. Some
malicious workers can use other submitted crowdsourcing
results on the blockchain as a reference, or even gain without
any effort by directly stealing the work of others. Our two-
phase submission mechanism ensures that any CW does not
know the real information of other workers by encrypting the
information in the first stage, and then makes the information
public in the second stage to ensure that the information
26
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
submitted by each worker is honest and cannot be tampered
with. Figure 2 shows a two-phase submission mechanism
based on commitment scheme.
The first stage is the pre-commit phase, that is, the commit-
ment storage phase. Each worker submits its own commitment
C, whose content is the hash value of the result data plus
random data, namely Ck = Hash(sk,mk). The secret random
value, sk, is generated by the wk himself. During this period,
the value of sk is kept confidential to prevent other workers
from inferring the task result value based on the value of sk.
Besides, if two different workers submit the same commit-
ment, TPS will also classify the situation as plagiarism. The
commitment submitted later will be rejected and the random
value sk must be reselected to generate a different commitment
for submission. Due to the randomness and privacy of sk,
after committing to the contract, other workers cannot deduct
the corresponding mk even if they get Ck, thus ensuring the
security of the result data. In our design,workers cannot know
the detailed results of the task except their own, with only
the commitment data in this stage. However, by pledging
certificates, committee members can assure that everyone else
has done their job and the published results are untampered
with.
After commitment time, the activity will automatically be
converted to the formal submission stage, that is, the arbitra-
tion stage. At this time, each worker can call the interface in
the CS to upload the original result and the random number
value to the TPS. In this stage, TPS will determine whether
the original result data Mk and the random value Sk submitted
by wk meet the commitment information submitted in the first
stage, that is, whether the three values of Mk, Sk, and Ck
satisfy Hash(Mk, Sk) = Ck, only the result data meeting
this requirement will be accepted by the contract. In this way,
it is ensured that the worker cannot modify the value of the
result data submitted during the commitment stage, otherwise
the verification will fail, thereby eliminating the possibility of
cheating.
B. Unbiased Random Sortition
It is essential to unbiasedly and randomly select workers
for the committee. Unbiasedness emphasizes that no party
will have an advantage in the committee when selecting, and
randomness means that the selected workers cannot collude.
As mentioned before, the possibility of sybil attack can be
avoided to some extent by setting a registration fee. Based
on the two-phase submission scheme described in IV-A,We
redesign the previously proposed selection algorithm [27] and
propose an algorithm that all parties submit random numbers
through two-phase registration and then select randomly. As
shown in Algorithm 1, the algorithm is completed by UM and
TPS in cooperation.
Supported by the two-phase commission mechanism, the
worker submit commitment Hash(W k
Rand) which is a ran-
dom number hash in the pre-enrollment stage. Unlike the
submission of crowdsourcing results described in the previous
section, Hash(W k
Rand) submitted here can be the same as
Algorithm 1 Unbiased Random Sortition
Input:
The address of requester, R.address
Enrolled workers set, EW , a list of address
The size of list, len(EW )
Random key submitted by requester and workers during
the second phase of enrollment, Ri
Required number, N, of members in a workers committee
Output:
Selected workers set , SW ,to form a committee
1: require( len(EW ) > 10 ∗ N);
2: seed ← 0
3: sum ← 0
4: for i = 0 ; i < len(EW ) ; i++ do
5: sum + = Ri
6: end for
7: seed ← Hash(sum)
8: SW ← ∅
9: j ← 0
10: while j < N do
11: index ← seed%len(EW )
12: if EW [index].state == Online
&& EW [index].reputation > 0
&& EW [index].address �= R.address then
13: EW [index].state ← Candidate
14: Add EW [index] ⇒ SW
15: j ++
16: end if
17: seed ← hash(seed)
18: end while
19: return SW
the commitment made by other workers, that is, everyone
only needs to submit their data and does not need to care
whether they are the same as others. The original random
number will be announced during the formal registration stage.
TPS will save W k
Rand as a component of the seed in the
selection algorithm after determining that the W k
Rand meets
the commitment. Workers will be admitted to EW only after
they have registered successfully. Similarly, workers who have
not submitted their commitments cannot directly register for
the second stage. Here are a few more points.
• R participates in enrollment because he/she also provides
a random number RRand as a component of the seed.
• No duplicate enrollment: Each applicant can only provide
one random number, but the number can be submitted
multiple times in the first stage, and TPS only saves the
latest commitment.
• Workers are required to pay a registration fee when
signing up for the second phase to prevent malicious R
or organization from launching Sybil attacks.
• Symmetrical encryption means that all the participants in
the system know the encryption rules, which may lead
to multiple workers collaborating to steal the requester’s
information, so we use an asymmetric encryption mecha-
27
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
nism to allocate tasks. Specifically, when workers register
in the second stage, they must not only submit real
random numbers but also provide their public keys. After
workers are selected, the requester uses their public
keys to encrypt their subtasks and publish them on the
blockchain. After the workers of the committee receive
their subtasks, they decrypt them with the private key
to obtain their real subtasks. This prevents workers from
knowing each other’s work, which ensures the indepen-
dence of each worker’s task. Through this design, for one
thing, plagiarism among workers is effectively prevented,
because workers do not know whether they are doing
partial tasks or all tasks. For another, it also protects the
data privacy of the requester.
R can call the sortition window after the enrollment time
is over, or close the enrollment window in advance to select
candidates as soon as possible when the number of applicants
is much larger than committee members. In algorithm 1, R
and each successfully enrolled W provide a random number
to select N workers, and the random numbers are denoted
as RRand and W k
Rand. Then the hash value of the sum of
‖EW‖+1 numbers, Hash(sum), is used as the original value
of seed. Under the guarantee of the two-stage submission
mechanism, any party cannot know the random number of
others before the selection, since this random number is
generated based on each participant in the system, that is, it is
impossible to predict the election result. Therefore, they can
be sure that the classification results are not controlled by any
other third parties, as they all provide partial randomness.
Through the two-phase submission mechanism, algorithm 1
solves the problem of the given order of random numbers, be-
cause the random number submitted at the time of commitment
is encrypted, and it cannot be changed in the verification phase,
which is equivalent to displaying the random value at the same
time. Considering the applicants should be much larger than
the number of committee members, namely ‖EW‖ � N,
Algorithm 1 can always return the result of SW .
It is worth mentioning that to successfully set up the
committee with as little cost as possible, we set the minimum
number of members, M, for the committee, considering that
workers might refuse this task after being selected. When
‖WC‖ ≥ M, the committee is successfully assembled and
R can start publishing tasks to workers.
C. Evaluation Function and Nash Equilibrium
Game theory refers to the theory of studying the strategies
of multiple individuals or teams using related parties in a game
restricted by certain conditions, and implementing correspond-
ing strategies [28]. The strategy or matrix form of n− player
games is the most common form of strategic interaction in
game theory. The theory consists of a set of participants, a set
of strategy profiles, and a payment function that implements
the design.
Take the image data labeling task as an example. W
need to classify and label l pictures T = {t1, t2, t3, · · · , tl},
and labeling each picture is regarded as a worker’s deci-
sion. The optional set of required p types of label data is
{σ1, σ2, σ3, · · ·σp}, so the final result data format is an l-
dimensional vector D = (D1, D2, D3, ..., Dl), where Di ∈
{σ1, σ2, σ3, · · ·σp}. First, the task pictures for each worker
are often different, generally a subset of T . It is required that
each picture should be labeled by at least one worker, And
the length of all workers’ result data should be consistent.
Secondly, it is necessary to specify the rewards for the worker
who completes the task faithfully. In this example, the reward
is given in the result data format and the corresponding reward
value R = (r1, r2, r3, · · · , rl) is given for each picture that
needs to be marked. Rewards are given in the form of tokens of
the blockchain platform on which they are based, such as Ether
in the Ethereum blockchain. In addition, the R can also specify
the data tolerance ε , that is, all data results with a difference
less than ε are considered equal. In this embodiment, ε = 0.
Based on the above analysis and game theory, we define the
labeling game for each picture as follows. The crowdsourcing
task of labeling m pictures at a time is equivalent to playing
m labeling games. We take the labeling of one picture as an
example to introduce the labeling game:
Definition 1. P-Labeling Game: It is a n − player game
represented as a tripe (WC,Σ, P,Π), where
• WC = {w1, w2, w3, · · · , wn} is a set of n players.
Each player wk is a worker who accepts the task and
successfully joins the committee.
• Σ = Σ1 × Σ2 × · · · × Σn is a set of strategy profiles
, where Σk is a series of annotation results of a certain
picture for worker wk. In other words, wk can choose
any result table σk ∈ Σk. Actually, a strategy profiles is
a vector, σ∗ = (σ∗
1 , σ
∗
2 , · · · , σ∗
n), where σ∗
k is a specific
result value of Σk(k = 1, 2, · · · , n).
• P = {−1, 0, 1, · · · , p−1} is a set of labels for this picture
in our game, where“-1” means that the worker needs not
or did’t mark this picture and others numbers indicate the
worker’s label on this picture.
• Π = {π1, π2, π3, · · · , πn} is a set of payoff functions,
where πk : Σ → R is the payoff function determining
the revenue for worker wk under a certain strategy,
(k = 1, 2, · · · , n). π∗ = (π∗
1 , π
∗
2 , · · · , π∗
n) is a vector
representing the rewards of WC under strategy profiles
σ∗.
In addition, σ−k = {σ1, σ2, · · · , σk−1, σk+1, · · · , σn} is
defined as any strategy profile σ without player wk’s label. The
full strategy can be written as σ = {σk, σ−k}. In this labeling
game, we define a set of workers marking the correct label
for this picture as Wtrue, where ∀wk ∈ Wtrue, the σ∗
k = σ
(t)
k .
Respectively, other labels for this picture is Wfalse, where
∀wk ∈ Wfalse, the σ∗
k = σ
(f)
k . What’s more, we mark the
assembly of workers who did not submit on time as Wno,
where ∀wk ∈ Wno, the σ∗
k = σ
(n)
k . These result data determine
the final label of this picture. We then define the right label
of this picture as Definition 2.
Definition 2. Right Label Determination: Based on results
28
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
of a strategy profile in a labeling game, the right label is
confirmed, only when ‖Wtrue‖ ≥ M , where 1 < N/2� <
M < N,M,N ∈ N. Otherwise, it is treated as there is no
right label for this picture.
It is worth mentioning that we define 1 < N/2� < M , to
obtain answer label reliably and fairly. This means that only
when more than half of the labels given are consistent can we
get the correct answer. When there are workers who failed to
upload tags, N represents the number of workers who have
successfully submitted, and the following N is all the same.
Particularly, if only one person submits the result, then we
think the result obtained by him/her is correct.
According to our model, the worker is designed to accept
the task along with an endorsement fee to the CSM. As a
result, workers who fail to submit results as required will not
be able to get their deposits back as a penalty. If the result
given by the worker is inconsistent with the correct label,
he/she will not be rewarded for this subtask. The detailed
design of profit function is shown in Definition 3 according
to the above definitions and analysis. Thereinto, the value of
each function is only leveraged to quantitatively represent the
relative relationship among the fees. Hence, 1 represents one
share of profit, and -10 means loss of 10 profits which indicates
that the deposit will be deducted.
Definition 3. Payoff Functions: The values of payoff func-
tions are designed according to the final right label.
• When σ(t) = −1:
∀wk ∈ Wno , πk(σ
(n)
k , σ−k) = −10;
∀wk ∈ Wfalse, πk(σ
(f)
k , σ−k) = 0;
• When σ(t) = σk, σk �= −1:
∀wk ∈ Wno , πk(σ
(n)
k , σ−k) = −10;
∀wk ∈ Wtrue, πk(σ
(t)
k , σ−k) = 1;
∀wk ∈ Wfalse, πk(σ
(f)
k , σ−k) = 0;
In an n-player game, if a player knows the others’ actions,
it would choose a strategy to maximize its payoff. This is
referred to as its best response. Therefore, the best response
of the witness wk can be defined as follows.
Definition 4. Worker wk’s best response: In order to maxi-
mize its payment, wk’s best response to a strategy profile σ∗
−k
is a strategy σ∗
k ∈ Σk,such that πk(σ
∗
k, σ
∗
−k) ≥ πk(σk, σ
∗
−k)
for ∀σk ∈ Σk(k = 1, 2, · · · , n).
The Nash equilibrium point [29] is considered to be reached
when all players in a game reach their optimal response. In
this state, no player has an incentive to change current strategy,
otherwise it would not be its own best response.
Definition 5. Nash equilibrium point: It’s a specific strategy
profile σ∗ = (σ∗
k, σ
∗
−k), if for every worker wk,σ∗
k is a best
response to σ∗
−k, i.e., ∀wk ∈ WC and ∀σk ∈ Σk(k =
1, 2, · · · , n), πk(σ
∗
k, σ
∗
−k) ≥ πk(σk, σ
∗
−k).
Based on the Nash equilibrium point definition and payoff
functions, we can derive the theorem below.
Theorem 1. In a p-labeling game, there are p Nash equi-
librium points are following strategy profiles:
• σ∗ = (σ∗
1 , σ
∗
2 , · · · , σ∗
n), of which ∀wk ∈ WC,σ∗
k = 0;
• σ∗ = (σ∗
1 , σ
∗
2 , · · · , σ∗
n), of which ∀wk ∈ WC,σ∗
k = 1;
· · ·
• σ∗ = (σ∗
1 , σ
∗
2 , · · · , σ∗
n), of which ∀wk ∈ WC,σ∗
k = p−1.
Considering that the correct label can be uniformly represented
by σ(t), there is only one type of Nash equilibrium point:
• σ∗ = (σ∗
1 , σ
∗
2 , · · · , σ∗
n), of which ∀wk ∈ WC,σ∗
k = σ
(t)
k .
Proof. According to Definition 1 and 2, in a p − labeling
game,N ≥ 1, 0 < N/2� < M ≤ N − 1, where N,M ∈ N.
For the strategy profile of ∀wk ∈ WC,σ∗
k = σ
(t)
k ,
which means ‖Wtrue‖ = N > M . According to payoff
function designed in Definition 3, for ∀wk, its revenue is
pik(σ
(t)
k , σ−k) = 1. If any wk chooses other label, σ
(f)
k
instead of σ
(t)
k , the final correct label will not be modified,
due to ‖Wtrue = N − 1 ≥ M‖. However, wk’s revenue will
be πk(σ
(f)
k , σ−k) = 0 < 1 = πk(σ
(t)
k , σ−k). According to
Definition 5, this strategy profile is not a Nash equilibrium
point.
For other strategy profiles, they are all a mix of different
labels, σ(t) and σ(f). It means Wtrue �= ∅ and Wfalse �= ∅.
When ‖Wtrue‖ > M , there always ∃ wk ∈ Wfalse, it can
change his/her result form σ
(f)
k to σ
(t)
k which would increase
his/her revenue from πk(σ
(f)
k , σ−k) = 0 to πk(σ
(t)
k , σ−k) =
1. Analogously, When ‖Wtrue‖ ≤ M , there always ∃
(M − ‖Wtrue‖) workers {wk0, wk1, · · · , wkk} ∈ Wfalse,
it can change their results form {σ(f)
k0 , σ
(f)
k1 , · · · , σ(f)
kk }to
{σ(t)
k0 , σ
(t)
k1 , · · · , σ(t)
kk} which would make ‖Wtrue‖ > M
and increase their rewards from πk(σ
(f)
k , σ−k) = 0 to
πk(σ
(t)
k , σ−k) = 1. These counterexamples demonstrate all
these strategy profiles are not Nash equilibrium points.
Therefore, in a p − labeling game, there is only one type
of Nash equilibrium point: σ∗ = (σ
(t)
1 , σ
(t)
2 , · · · , σ(t)
n ).
TABLE II
Payoff Functions for a Two-labeling Game of Three Workers
w1 w2
w3 : 0 w3 : 1
σ∗|σ(t) π∗ σ∗|σ(t) π∗
w1 : 0
w2 : 0 (0, 0, 0)|0 (1, 1, 1) (0, 0, 1)|0 (1, 1, 0)
w2 : 1 (0, 1, 0)|0 (1, 0, 1) (0, 1, 1)|1 (0,1,1)
w1 : 1
w2 : 0 (1, 0, 0)|0 (0, 1, 1) (1, 0, 1)|1 (1, 0, 1)
w2 : 1 (1, 1, 0)|1 (1, 1, 0) (1, 1, 1)|1 (1, 1, 1)
We take as an example a basic dichotomy problem com-
pleted by three workers, where N = 3, P = {−1, 0, 1}.
Therefore, M can only equal 2 based on Definition 2. The
value element (σ∗
1 , σ
∗
2 , σ
∗
3)|σ(t) in Table I is the vector of all
the strategy files with the correct labels under the strategy file
and the corresponding reward function value of the strategy
which is represented as (π1, π2, π3). According to Theorem 1,
Nash equilibrium points in this game are (0, 0, 0) and (1, 1, 1)
respectively.
Based on the above analysis, for a rational and selfish
worker, wk who wants to maximize its revenue through
offering label of this image, would have to behave as follows in
this game. Since there must be a correct answer to the labeled
picture, Wk knows that everyone else will submit the correct
29
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
label in their mind, and only if he/she submits the correct
label can he/she get benefits. Therefore, wk will also tell the
truth driven by profit. From a holistic perspective, everyone
wants to get the annotation reward for this picture, which
will prompt the system to reach the Nash equilibrium point:
(σ
(t)
1 , σ
(t)
2 , · · · , σ(t)
n ).
A crowdsourcing task involving L images labeling is L
simultaneous p − Labeling game. According to the above
incentive function design, all workers provide the same data as
the Nash equilibrium point of the game behavior. In the case
that the workers participating in the game are independent
of each other, only by completing the task truthfully can all
workers achieve the Nash equilibrium, that is, obtaining the
maximum benefit.
D. Participant Audit
Algorithm 1 ensures that the selected workers are largely
independent, and the payoff function design motivates workers
to finish the task honestly. However, there is still a need for
an audit mechanism to ensure that malicious or unreasonable
participants can be detected and kicked out of the system.
Since all transactions with smart contracts are public and
permanently stored on the blockchain, participants can be
audited by their behavior history. We analyze the possible
malicious behaviors of R and wk in the crowdsourcing process
and regulate the participants through the reputation and deposit
mechanism.
Malicious Behaviors of R
• Sybil attack: Requesters or malicious organizations can
use multiple addresses to sign up in the system to launch
a Sybil attack to manipulate the crowdsourcing results.
We ask workers to pay a certain amount of entry fee
when signing up in the second stage, which is very small
for normal participants, but for malicious parties, a large
number of malicious accounts will cause larger expenses.
• Lazy Requester: Smart contracts on the blockchain cannot
run on their own. The state transitions of smart contracts
must be triggered by certain interfaces, and the execution
will bring some costs. If the behavior of R is not
detected, there may be cases of inaction requesters or
even malicious requesters defrauding workers’ informa-
tion. For example, R does not perform quality testing
after the worker’s submission is completed, which results
in the worker cannot get the corresponding payment.
Therefore, we design the interface of the role who is the
biggest beneficiary in some cases to modify the state.
The obligation of the R is to promote the crowdsourcing
activity, so R is required to perform specified operations
within a limited time, which is informed to the receiver
prior to the start of the crowdsourcing task.
Malicious Behaviors of Wk
• Steal data: The published tasks often involve the intellec-
tual property of R whose data is sensitive and valuable to
the R who is paying for crowdsourced results, so R does
not want his/her data stolen by competitors or workers.
Therefore, when wk accepts the task, it will submit a
commitment fee that will be returned after the task is
completed.
• Untimely response: Workers who do not operate on time
will cause damage to R and other workers. For example,
wk was selected by Algorithm 1 but did not respond or
rejects the task, which may cause that R reissue the task
and other people who have joined the committee need to
wait longer for the successful formation of the committee
before starting the task. Failure to submit result data on
time can also compromise the reliability of crowdsourced
results.
Cross Detection
To make crowdsourcing proceed orderly, we design R and
WC to cross-check each other’s behavior. When R calls the
relevant interface, CSM will automatically detect the status of
the workers, and punish wk who violates the rules. Similarly, if
workers find that R has not performed related operations, they
can call related interfaces in CS to punish R. In our model, the
reputation value is reduced according to the damage to others
and the system, and the deducted deposit is compensated to
the other party. R will no longer be able to publish tasks
if its reputation is reduced to 0, and wk will be rejected by
algorithm 1. As a result, these malicious participants will be
blocked soon by the system.
V. PROTOTYPE IMPLEMENTATION AND
EXPERIMENTS
According to the two-phase submission mechanism and
payment function, we have implemented a prototype system,
DCrowd, based on smart contracts using Solidity program-
ming. In general, our DCrowd system contains two entity
roles: R and W(CW) and four smart contracts: UM, CS, CSM,
and TPS.
A. User Management Contract Implementation
Fig. 3. State Transition Diagram of a Worker
TPS is mainly responsible for storing crowdsourcing data
and implementing functions such as two-phase submission
and quality inspection. CSM stipulates various operations
after the crowdsourcing activity starts, and is responsible for
implementing the crowdsourcing process and managing the
30
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
state of the crowdsourcing contract. These two smart con-
tracts have been deployed on the blockchain for participants
to review before the crowdsourcing activity starts. UM is
mainly responsible for managing various information of users,
including their status, reputation, signed contracts, etc. Every
ordinary user needs to register as a member of the system
in UM. At this time, its reputation of R and reputation of
wk are initialized to 100. If the user wants to publish a
task, he/she just needs to call the interface “GenCSContract”
to produce his/her crowdsourcing contract CS. CS actually
provides various interfaces in CSM for users to call. UM and
CS are contracts that directly interact with users.
In this section, we first explain the status changes of wk and
CS. We describe the detailed functions of the interfaces in the
contract and show how to use these interfaces to supervise the
state. Interfaces designed in both UM and CS are named as
the text on the arrow in Figure 3 and 4. The format of the text
is ‘Urole → [Ctype ::]Ninterface’. It means that only the role
Urole can invoke the interface Ninterface which is defined in
the smart contract of Ctype. Urole here can also be a contract,
that is, Ctype → [Ctype ::]Ninterface, which represents the
interaction between contracts.
The default status of an ordinary user after registration
is “Offline”, which can only be changed to “Online” status
by himself. Online workers can then sign up for willing
crowdsourcing contract with their status maintained. W can
sign up for multiple tasks before being selected, but will
only be selected by one. Once W is selected, his/her status
will change to “Candidate”. Within the confirmation time
window, candidate W can choose to accept or reject the
task. If W accepts the task, his/her status becomes “Ready”,
otherwise it will be returned to “Offline” by CSM. Only
when the committee composition conditions are met, that is
‖WReady‖ ≥ Min, can R call the interface in CS to start
the task, and the state of CW is converted to “Busy”. If
‖WReady‖ ≤ Min, R needs to repost the task and recruit
the absent workers again. At the same time, CSM will call
“reverse” to punish workers who have not responded. After the
mission starts, CW ’s status will also be taken “Offline” if there
is a violation. When the task has been successfully completed,
W can choose to leave the committee by “resign” or dissolve
the committee by “resetCS”. Both of these operations will
make W ’s state transition to “Online”. In addition, if CW
finds that R is in violation after accepting the task, it can
check the status of R through the interface “checkStagnant”
and return its status directly to “Online”. If R has paid the
deposit, then CW will get additional compensation.
B. CrowdSourcing Management Contract Implementation
Figure 4 shows the state transition when a specific crowd-
sourcing contract is implemented. There are seven states:
“Fresh”, “Init”, “Ready”, “Submitted”, “Completed”, “Failed”,
and “Stagnant”, as shown by the circle in Figure 4. The dashed
arrow indicates the state transition path when a violation
occurs. At the end of CS, CW and R can withdraw the in-
come separately. Other interfaces except for the “generateCS”
interface used to generate this contract are called in the CS,
so we neglected to define the scope “Ctype ::”.
Fig. 4. State Transition Diagram of a CS Contract
The initial state of CS is “Fresh”, and R can set its basic
information in this state, such as various time parameters, cost
parameters, and the number of workers recruited. When R
calls “Sort” to select people from the registration pool, the
contract status becomes “Init”. When the number of workers
accepting the contract task reaches the requirement of forming
the committee, the status will be converted to “Ready”, waiting
for R to call “startCS” to change the status to “Submitted”, and
the workers perform two-stage submission in this state. There
are two failure states: “Stagnant” and “Failed”. The former
means that R does not operate within the specified time and
the contract is stagnant and only W can perform withdrawal
operations in this state, while the latter means that no worker
successfully submits the result data and only R can withdraw
the money. “Completed” means that the task is successfully
completed. In this state, CW who successfully submits the
result can withdraw their money, and R can also withdraw the
remaining advance payment.
C. Experimental Study
In order to verify all the functions in DCrowd, we de-
ployed the implemented smart contract on the test net of
the Ethereum blockchain, “Rospten”, which is a network for
global blockchain developers to debug smart contracts, and
whose cryptocurrency “Ether” does not have real value. There-
fore, we created multiple accounts on Rospten to simulate
requesters and workers. We tested all possible scenarios to
develop and verify the functionality of different interfaces.
The credibility of the system is proved by game theory
and guaranteed by a two-phase submission mechanism and
an unbiased random algorithm. Therefore, we mainly ana-
lyze some performance information from experiments. Per-
formance refers to the complexity of the interface, which
determines the transaction fee “gas” that users need to pay
to Ethereum miners. The more complex the interface, the
31
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 5. The Average Gas Consumpuption of Each Interface in UM and CS Contract
more computing power the miners will consume to execute
the transaction, and the more gas the user pays. Regardless
of whether it is on the main network or the test network, the
gas consumed is almost the same. Therefore, we record the
gas consumed by each interface during the experiment. The
experimental case is a labeling task of 50 pictures participated
by 5 employees, each of which marked 40 pictures.
By testing every possible situation in the crowdsourcing
process, we recorded the gas used by each interface, and took
the average of 10 sets of tests and plotted it as shown in Figure
5. It can be concluded that the interface that R consumes
the most Gas is “genetateCS”, because this interface requires
more storage space to generate and deploy a new CS contract.
Besides, the “evaluate” interface is the most complicated,
because it involves a complex quality evaluation process, and
the gas consumed varies depending on the task. Among all the
interfaces of W, the “acceptCS” interface consumes the most
gas, because when W accepts a task, TPS needs to initialize
data for it, which involves a relatively large amount of storage
operations, while storage on Ethereum consumes more gas.
In general, the interface called by R costs more gas than W,
which is in line with the model design and reality, because in
most cases, the crowdsourced data obtained by the requester
will bring greater benefits to it. The light weight gas consumed
by W is insignificant compared to the benefits of honest
answers, which is enough to persuade potential users to
register in the system and participate in the crowdingsourcing.
VI. CONCLUSION
In this paper, a two-phase submission mechanism is pro-
posed for crowdsourcing system, and the payoff function is
specially designed for each worker. We utilize game theory
to prove that workers participating in crowdsourcing can
maximize their profits when submitting task results truth-
fully. Finally, we implemented our prototype system on the
Ethereum through smart contracts. The experimental study
proved the feasibility of our system. In this way, the question
of trust is transformed into an economic question: it is not the
sense of duty, but economic principles that drive workers to
fulfill the task honestly.
For future work, we have two main goals: perfect the system
and improve its performance. On one hand, we will expand
more functions to make our system suitable for more crowd-
sourcing scenarios, and design more user-friendly interfaces to
facilitate users. On the other hand, we will further optimize the
implementation of the interfaces such as “acceptCS” to reduce
gas consumption and reduce user costs. A feasible idea is to
introduce standards that can reflect the professional skills of
workers, and leverage them as a reference for the selection
algorithm and reputation system. This standard not only en-
riches the functions of the existing system but also makes it
easier for workers to use their strengths and requesters to find
more professional related workers, which greatly improves the
efficiency of crowdsourcing.
ACKNOWLEDGMENT
The work is supported by the National Key Research
and Development Program of China under grant No.
2018YFB0204301, the National Natural Science Foundation
(NSF) under grant No. 62072306, the Natural Science Foun-
dation of Hunan Province under grant No. 2020JJ3042, Open
Fund of Science and Technology on Parallel and Distributed
Processing Laboratory under grant No. 6142110200407.
REFERENCES
[1] J. Howe. The Rise of Crowdsourcing. Wired, Jun 2006 [On-line].
Available: http://www.wired.com/wired/archive/14.06/crowds.html
[2] S. Nakamoto,“Bitcoin: A peer-to-peer electronic cash system,” 2008.
[3] V . Buterin et al., “A next-generation smart contract and decentralized
application platform,” white paper, 2014.
32
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply. 
[4] Xiang Fu, Huaimin Wang, Peichang Shi:A survey of Blockchain con-
sensus algorithms: mechanism, design and applications. Sci. China Inf.
Sci. 64(2) (2021)
[5] Torben P. Pedersen:Non-Interactive and Information-Theoretic Secure
Verifiable Secret Sharing. CRYPTO 1991: 129-140
[6] B. Zhu, S. Zhu, X. Liu, Y. Zhong and H. Wu, ”A novel lo-
cation privacy preserving scheme for spatial crowdsourcing,” 2016
6th International Conference on Electronics Information and Emer-
gency Communication (ICEIEC), Beijing, 2016, pp. 34-37, doi:
10.1109/ICEIEC.2016.7589681.
[7] Jianhong Zhang, Qijia Zhang, Shenglong Ji:A Fog-Assisted Privacy-
Preserving Task Allocation in Crowdsourcing. IEEE Internet Things J.
7(9): 8331-8342 (2020)
[8] Xiang Yu, Guoliang Li, Yudian Zheng, Yan Huang, Songfan Zhang, Fei
Chen:CrowdOTA: An Online Task Assignment System in Crowdsourc-
ing. ICDE 2018: 1629-1632
[9] Xiao Chen:A Stable Task Assignment Scheme in Crowdsourcing.
CSE/EUC 2019: 489-494
[10] Xiaoyan Yin, Yanjiao Chen, Cheng Xu, Sijia Yu, Baochun
Li:Matchmaker: Stable Task Assignment With Bounded Constraints for
Crowdsourcing Platforms. IEEE Internet Things J. 8(3): 1599-1610
(2021)
[11] Yiming Wu, Shaohua Tang, Bowen Zhao, Zhiniang Peng:BPTM:
Blockchain-Based Privacy-Preserving Task Matching in Crowdsourcing.
IEEE Access 7: 45605-45617 (2019)
[12] Liping Gao, Tian Cheng, Li Gao: TSWCrowd: A Decentralized Task-
Select-Worker Framework on Blockchain for Spatial Crowdsourcing.
IEEE Access 8: 220682-220691 (2020)
[13] Chunchun Wu, Tie Luo, Fan Wu, Guihai Chen: An endorsement-
based reputation system for trustworthy crowdsourcing. INFOCOM
Workshops 2015: 89-90
[14] Yao Yu, Shumei Liu, Lei Guo, Phee Lep Yeoh, Branka Vucetic,
Yonghui Li: CrowdR-FBC: A Distributed Fog-Blockchains for Mobile
Crowdsourcing Reputation Management. IEEE Internet Things J. 7(9):
8722-8735 (2020)
[15] Hong Xie, John C. S. Lui, Don Towsley: Incentive and reputation
mechanisms for online crowdsourcing systems. IWQoS 2015: 207-212
[16] Hong Xie, John C. S. Lui, Don Towsley: Design and Analysis of In-
centive and Reputation Mechanisms for Online Crowdsourcing Systems.
ACM Trans. Model. Perform. Evaluation Comput. Syst. 1(3): 13:1-13:27
(2016)
[17] M. R. Siddiki, M. A. Talha, F. Chowdhury and M. S. Ferdous,
”CrowdsouRS: A crowdsourced reputation system for identifying de-
ceptive online contents,” 2017 20th International Conference of Com-
puter and Information Technology (ICCIT), Dhaka, 2017, pp. 1-6, doi:
10.1109/ICCITECHN.2017.8281829.
[18] Lushen Pang, Guoqing Li, Xiaochuang Yao, Yong Lai: An Incentive
Mechanism Based on a Bayesian Game for Spatial Crowdsourcing. IEEE
Access 7: 14340-14352 (2019)
[19] Xindi Ma, Jianfeng Ma, Hui Li, Qi Jiang, Sheng Gao: RTRC: a
reputation-based incentive game model for trustworthy crowdsourcing
service[J]. China Communications, 2017.
[20] Ming Li, Jian Weng, Anjia Yang, Wei Lu, Yue Zhang, Lin Hou, Jia-
Nan Liu, Yang Xiang, Robert H. Deng: CrowdBC: A Blockchain-Based
Decentralized Framework for Crowdsourcing. IEEE Trans. Parallel
Distributed Syst. 30(6): 1251-1266 (2019)
[21] Siyuan Han, Zihuan Xu, Yuxiang Zeng, Lei
Chen:Fluid: A Blockchain based Framework for Crowdsourcing. SIG-
MOD Conference 2019: 1921-1924
[22] Chen Zhang, Yu Guo, Hongwei Du, Xiaohua Jia:PFcrowd: Privacy-
Preserving and Federated Crowdsourcing Framework by Using
Blockchain. IWQoS 2020: 1-10
[23] Dingjie Sheng, Mingjun Xiao, An Liu, Xiang Zou, Baoyi An, Sheng
Zhang: CPchain: A Copyright-Preserving Crowdsourcing Data Trading
Framework Based on Blockchain. ICCCN 2020: 1-9
[24] Y. Guo, H. Xie, Y. Miao, C. Wang and X. Jia, ”FedCrowd:
A Federated and Privacy-Preserving Crowdsourcing Platform on
Blockchain,” in IEEE Transactions on Services Computing, doi:
10.1109/TSC.2020.3031061.
[25] Yuan Lu, Qiang Tang, Guiling Wang: ZebraLancer: Private and
Anonymous Crowdsourcing System atop Open Blockchain. CoRR
abs/1803.01256 (2018)
[26] Kadadha M, Mizouni R, Singh S, et al. ABCrowd: An Auction Mecha-
nism on Blockchain for Spatial Crowdsourcing[J]. IEEE Access, 2020,
8(99):12745-12757.
[27] Huan Zhou, Xue Ouyang, Zhijie Ren, Jinshu Su, Cees de Laat, Zhiming
Zhao:A Blockchain based Witness Model for Trustworthy Cloud Service
Level Agreement Enforcement. INFOCOM 2019: 1567-1575
[28] K. Binmore, Game theory: a very short introduction. Oxford University
Press, 2007, vol. 173
[29] J. F. Nash et al., “Equilibrium points in n-person games,” Proceedings
of the national academy of sciences, vol. 36, no. 1, pp. 48–49, 1950.
33
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:58:39 UTC from IEEE Xplore.  Restrictions apply.