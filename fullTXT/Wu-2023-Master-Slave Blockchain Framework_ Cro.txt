Master-Slave Blockchain Framework: Cross-domain Trust Management Mechanism using Trust Ticket
1 
 
 
 
 
Master-Slave Blockchain Framework: Cross-domain 
Trust Management Mechanism using Trust Ticket 
 
Xu Wu, Shuang Wei, Zhen Zhang, Pin Lv 
Abstract—Industrial Internet of Things (IIoT) can facilitate 
smart manufacturing and increase productivity through 
revolutionary techniques. As production processes are getting 
more sophisticated, an entire production process is usually 
completed collaboratively by multiple administrative domains 
(e.g., factories). Trust management is an effective solution to 
establish trust relationship between the devices from different 
administrative domains. Recently, many researchers integrate 
blockchain into trust management mechanisms. However, the 
existing methods have the shortcoming of low throughput, high 
delay and storage overhead, so cannot meet scalability 
requirements of large-scale IIoT multi-domains scenarios. 
Therefore, this paper proposes a master-slave chain framework to 
realize a scalable cross-domain trust management mechanism 
(MSB-CTrust), where trust tickets are used to resolve the 
heterogeneity issue of trust evaluation methods in different 
domains. Besides, MSB-CTrust provides embedded salary 
distribution rules, which are used to encourage all devices to 
behave honestly based on a revenue strategy game. Performance 
evaluations in the experiments show the feasibility and 
effectiveness of MSB-CTrust.  
 
Index Terms—Master-slave chain, Trust management, Industrial 
Internet of Things 
I. INTRODUCTION 
ith the proposal of a series of international strategies 
such as German Industry 4.0 [1], China 
Manufacturing 2025 [2], the industrial internet of 
things came into being, becoming one of the key technologies 
to put these strategies into practice. IIoT integrates IIoT devices 
(sensor or controller, actuators, etc.), mobile communication, 
intelligent analysis and other technologies into the process of 
industrial production by collecting data in real time, 
intelligently analyzing and other tasks to reduce management 
costs and improve the quality of manufactured products.  
As production processes are getting more sophisticated, it is 
hard to have a complete product manufactured in a factory. It is 
a trend that the entire manufacturing process is completed 
through collaboration of multiple administrative domains (e.g., 
factories). We define domains as autonomous and independent 
organizations. In such scenario, devices from different domains 
need to interact with each other to share and exchange data for 
the production process. Therefore, it is very important to 
 
 This work was supported by National Natural Science Foundation of China 
(62062006, 71501156, 62062008, 62067001), Natural Science Basis Research 
Plan in Guangxi Province of China (2018JJA170028).  
establish trust relationship between the devices from the 
different administrative domains. 
Many trust management methods are proposed to address the 
problem in IIoT. Din et al. [3] designed a lightweight trust 
management mechanism where a centralized trust agent is set 
up to store trust values, generate and manage trust certificates. 
But the model is prone to a single point of failure, that is, the 
entire network crashes when the trust agent is attacked to the 
point of non-functionality. In [4], the authors proposed a 
distributed trust management model to filter out malicious 
nodes in IIoT network, where each node takes 
recommendations from its context-similar nodes to calculate 
the trust of serving nodes. However, the view of trust data for 
each node is inconsistent and recommendations may be 
unreliable. 
Recently, the authors have started to adopt blockchain to 
address the trust management challenges of IIoT because of its 
features of decentralization, immutability and traceability [5]. 
Qi et al. [6], Wu et al. [7] and Wei et al. [23] introduced the 
blockchain technology to store and share trust data. In their 
methods, any trust updates can be tracked and cannot take effect 
unless they are approved by the majority. However, IIoT 
devices have limited computing and storage capabilities. When 
they are directly integrated with blockchain, there are many 
performance issues. For example, blockchain requires that each 
participant must store the blockchain ledger to guarantee 
consistency. With the increasing capacity of the ledger, the 
storage overhead will also increase. The works [8-9, 17-18] 
used edge computing technology to enhance the computation 
and storage capability of blockchain nodes. However, the above 
methods are both the single-chain architecture. They have the 
following limits: firstly, a single-chain processes transactions in 
order and the block size is restricted to a certain size [10]. 
Second, due to the different trust characteristics of devices in 
different domains, a single-chain architecture can lead to trust 
data of multiple domains mixing. 
To tackle the aforementioned challenges, this paper proposes 
a master-slave chain framework to realize a scalable cross-
domain trust management mechanism (MSB-CTrust). Every 
domain deploys a slave chain that only stores transactions of 
local domain, which reduces storage overhead for IIoT to keep 
blockchain ledgers. Multiple chains can process transactions in 
parallel and independently, which improves the transaction 
The authors are with School of Computer, Electronics and Information, 
Guangxi University. Xu Wu and Pin Lv are also with Guangxi Key Laboratory 
of Multimedia Communications and Network Technology. Xu Wu is the 
corresponding author: xrdz2006@163.com 
W
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
2
throughput and reduce delay. The master chain is maintained 
by edge devices of all domains and shares trust tickets of all 
devices. The main contributions of the paper are: 
(1) A master-slave chain trust management architecture is 
proposed. Multiple chains can process transactions of local 
domain in parallel and independently, which improves 
throughput and reduces transaction delay. Further, a trust-
enhanced consensus protocol (TPBFT) is designed to improve 
consensus efficiency. 
(2) A novel trust ticket making method is designed, which 
evaluates credibility level and makes trust tickets for every 
device by invoking smart contracts. The IIoT devices from 
different domains establish trust relationships through trust 
tickets, which resolves the heterogeneity issue of trust 
evaluation methods in different domains. 
(3) An incentive mechanism consisting of embedded salary 
distribution rules and a revenue strategy game is proposed, 
which encourages all devices to behave honestly in MSB-
CTrust. 
The remainder of the paper is organized as follows. Section 
Ⅱ reviews the related work. Section Ⅲ describes MSB-CTrust 
architecture. The MSB-CTrust implementation is discussed in 
section Ⅳ. Section Ⅴ describes the incentive mechanism. 
Section Ⅵ conducts the security discussion. Implementation 
and performance evaluation are presented in Section Ⅶ. 
Section Ⅷ concludes the paper. 
II. RELATED WORK 
This section reviews some trust management models closely 
related to our work, which can be categorized into non-
blockchain-based and blockchain-based types. A comparative 
summary of some related works is presented in TABLE I.  
A. Non-blockchain based Trust Management 
Khan et al. [11] proposed a trust model based on 
neutrosophic weighted product method in IIoT. The trust of a 
device is evaluated by the application based on spatial 
knowledge, temporal experience, and behavioral patterns. 
Experimental results show that this method can accurately 
detect the misbehavior of IIoT devices. Similarly, Yun et al. [12] 
proposed a centralized trust-based secure routing (CSR) scheme 
to enhance reliable data transmission over networks under 
advanced attacks. Awan et al. [13] proposed a holistic cross-
domain trust management model (HoliTrust). The authors 
divide domains into communities and develop multiple central 
authorities i.e., community, domain, and trust servers to assess 
and manage multiple trust data. HoliTrust effectively provides 
sufficient security for cross-domain communication by utilizing 
community trust and domain trust along with trust parameters. 
These models are centralized, which may result in a single point 
of failure, vulnerability point and performance bottleneck. 
Liu et al. [14] proposed a lightweight and distributed cross-
domain trust model (LCT), which can quickly establish trust 
relationships between devices in different domains. In LCT, the 
trust information can be carried across domains by trust 
certificates that are collected and provided by the trustees. The 
total trust value is calculated by fuzzy simple additive 
weighting of trust ratings in the trust certificates. However, 
malicious devices can selectively provide trust certifications 
that benefit them to improve trust. Awan et al. [15] proposed a 
cross-domain robust trust management model (RobustTrust), 
which helps nodes become robust against malicious nodes. In 
RobustTrust, trust is divided into three components that contain 
trust parameters to evaluate trust of other nodes. A node 
quantifies the trust information collected from direct 
observations and recommendations based on the predefined 
trust parameters. However, the view of trust data for each node 
is inconsistent, and the reliability of the recommendations is a 
problem to be solved.  
B. Blockchain-Based Trust Management 
Blockchain has gained much attention as a promising 
decentralized technology to increase reliability, security and 
privacy in IIoT. Qi et al. [6] proposed a blockchain-based 
adaptive trust evaluation mechanism for IIoT. The tamper-
resistance of blockchain guarantees the correctness of the trust 
value evaluated under the mechanism. Fortino et al. [16] 
designed an algorithm that can form groups of agents based on 
their reputation capital. To safely spread the reputation of 
agents, the authors adopted blockchain technology to certify the 
reputation capital. The model effectively detected misleading 
agents and prevented malicious devices from moving across 
domains. Wei et al. [23] proposed a decentralized trust 
management architecture for crossover service. Blockchain is 
introduced to enhance the security of the crossover service. 
However, the above solutions are only simple applications of 
blockchain, ignoring the performance issues of the blockchain 
itself, such as storage, consensus and communication, etc. 
Shen et al. [10] and Wang et al. [24] both proposed 
blockchain-based cross-domain authentication mechanisms, 
which introduce a blockchain maintained by different domain 
servers to construct trust among different domains. The former 
also designed off-blockchain storage to reduce the data to be 
written on the blockchain. However, the two mechanisms are 
not fully decentralized, because intra-domain authentication 
relies on servers. 
Wu et al. [17] mentioned that the convergence of blockchain 
and edge computing can enable secure and scalable critical 
infrastructures in IIoT. Gai et al. [18] proposed a blockchain-
based internet-of-edge (BIoE) model, which sufficiently 
exploits the benefits of edge computing and blockchain to 
establish privacy preservation for IoT. However, the work 
ignores the reliability of edge nodes. Kouicem et al. [8] 
proposed a scalable trust management protocol, which is based 
on blockchain technology and fog computing paradigm. Fog 
nodes optimize computing and storage resources of IoT devices. 
The consensus algorithm of the paper is a combination of PBFT 
(Practical Byzantine Fault Tolerance) and PoS (Proof of stack), 
which adopts the trust value of each node as a stack. The nodes 
with high trust values are more likely to be selected as 
validators. However, the authors do not incentive nodes to 
actively participate in consensus and consider the reliability of 
fog nodes. Javaid et al. [25] proposed a blockchain-based trust 
management protocol in Internet of Vehicles. In order to 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
3
improve the scalability of the protocol, the authors designed a 
dynamic Proof-of-Work (dPoW) consensus algorithm, which 
can change the mining difficulty according to the incoming 
traffic rate generated by the vehicles. However, these proposed 
blockchain architectures have the shortcoming that a single-
chain becomes cumbersome when it is used to manage a large-
scale IIoT multi-domain. This is because the single-chain 
architecture leads to low throughput and large storage overhead 
in the face of large-scale IIoT scenarios. Therefore, a few 
scholars have studied the optimization of blockchain 
architecture.  
Cash et al. [19] introduced a two-tier blockchain for secure 
data sharing, in which a permission-less blockchain shares all 
public data and some permission-ed blockchains share part of 
private data. The permission-less and permission-ed blockchain 
use Proof-of-Work (POW) and Proof-of-Authority (POA) 
consensus protocols respectively. The nodes can only access 
data in other permission-ed blockchains through cross-chain 
communication. However, the cross-chain communication is 
not explained in detail. In addition, if all nodes participate in the 
permission-less blockchain to share public data, it will increase 
the storage pressure on the permission-less blockchain. Ma et 
al. [20] proposed a master–slave blockchain paradigm and 
applied it to implement digital rights management. The proof of 
equivalent work (PeW) and proof of contribution (PoC) 
consensus protocols are defined, which develop the heavy-
weight blockchain into a light-weight layered computing mode. 
General PCs and mobile devices can all be participants in the 
work of mining. The authors evaluated the master–slave 
blockchain architecture based on the Bitcoin system, and large 
amounts of experimental results manifest the proposed master–
slave blockchain is extendible. However, the performance and 
throughput need to be improved. Xue et al. [26] designed two 
cooperative blockchains (BCs) to realize a cross-domain 
authentication scheme for medical consortiums. Any legal users’ 
registration and authentication information is recorded on an 
intra-domain BC, and users’ cross-domain authentication 
information is written to an inter-domain BC. However, cross-
chain interactions rely on a central trusted entity (general 
hospitals). 
In summary, there is a lack of an efficient cross-domain trust 
management mechanism in IIoT with high scalability and full 
decentralization that considers heterogeneity of trust evaluation 
methods in different domains. This paper proposes a master-
slave chain framework to realize a scalable cross-domain trust 
management mechanism (MSB-CTrust) for IIoT multi-domain 
scenarios. To improve the efficiency of consensus, the master-
slave chain adopts a trust-enhanced consensus protocol. In IIoT 
multi-domain scenarios, considering the heterogeneity of trust 
evaluation methods for different domains, MSB-CTrust makes 
trust tickets for devices and uses them to establish trust between 
devices in different domains. To make MSB-CTrust more 
reliable, an incentive mechanism is designed to encourage all 
devices to behave honestly. 
TABLE I 
THE SUMMARY OF THE EXISTING WORK 
Reference Environment Architecture Cross domain Consensus Scalability 
Khan et al. [11]  IIoT Centralized No No No 
Yun et al. [12] Wireless Networks Centralized No No No 
Awan et al.[13] IoT Centralized Yes No Yes 
Altaf et al. [4] IIoT Decentralized No No Yes 
Liu et al. [14] Mobile distributed networks Decentralized Yes No No 
Awan et al. [15] IoT Decentralized Yes No Yes 
Qi et al. [6] IIoT Blockchain Unknown Unspecified No 
Fortino et al. [16] IoT Blockchain Yes Unspecified No 
Wei et al. [23] Crossover service Blockchain Yes PBFT No 
Shen et al. [10]  IIoT Blockchain Yes Unspecified Yes 
Wang et al. [24] Autonomous Network Blockchain Yes Unspecified Yes 
Gai et al. [18] IIoT Blockchain+Edge Unknown Unspecified Yes 
Kouicem et al.[8]  IoT Blockchain+Fog Yes PBFT+POS Yes 
Javaid et al. [25] Internet of Vehicles Blockchain Unknown dPoW Yes 
Cash et al. [19] Unspecified Two-tier blockchain Unknown POW+POA Yes 
Ma et al. [20] Pervasive computing Master–slave blockchain Unknown PeW+ PoC Yes 
Xue et al. [26] Medical Consortiums Two cooperative blockchains Yes PBFT Yes 
This paper IIoT Master–slave blockchain+Edge Yes TPBFT Yes 
III. MSB-CTRUST ARCHITECTURE 
Most of the current blockchain applications are a single-
chain architecture, where each node keeps the complete 
blockchain ledger and performs duplicated calculation tasks to 
reach consensus. The consensus process results in low 
throughput and high transaction delay, when the architecture 
processes a large number of transactions. In a large-scale IIoT 
multi-domain environment, frequent cross-domain interactions 
generate a large number of transactions. In addition, trust 
management policy of every domain is different. It is difficult 
for a single-chain architecture to support different trust 
management requirements. Hence, this paper proposes a cross-
domain trust management mechanism based on master-slave 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
4
chain. As shown in Fig.1, the master-slave chain architecture is 
divided into two layers, with the upper layer being a master 
chain and the lower layers being slave chains. The slave chains 
are independent of each other to isolate trust data from different 
domains, but can share specific information through the master 
chain. The components are as follows. 
 
Fig. 1. Model architecture 
 IIoT domains: Each domain contains multiple IIoT 
devices, a slave chain and multiple edge devices. The set of 
domains by 1 2{ , , ..., }pDo Do Do Do . Such as, the domain
1Do , 2Do  and 3Do  in Fig.1.  
 IIoT nodes: An IIoT node refers to an IIoT device. IIoT 
nodes in an IIoT domain can communicate with other nodes 
in this IIoT domain. Each IIoT node can be the requester or 
provider of a service. The set of IIoT nodes is denoted by
1 2{ , ,..., }
n
d d d d . 
 Edge nodes: Edge nodes are the devices with relatively 
strong computation and storage ability (e.g. gateway, base 
stations etc.[17]), which are deployed to every domain. 
Edge devices in different domains can communicate with 
each other and be responsible for maintaining the master 
chain. The set of edge devices is denoted by
1 2{ , ,..., }mEg Eg Eg Eg . Edge devices need to maintain 
two types of ledgers: the ledger of slave chain in their local 
domain and the ledger of master chain. 
 Slave chains: Each domain has a slave chain shown in 
Fig.1. These slave chains work in parallel to improve 
transaction throughput. Furthermore, smart contract TTM
(Trust Ticket Making) is deployed into the slave chains of 
all domains, which is used to make trust tickets for IIoT 
devices. 
 Master chain: The master chain is maintained by the edge 
devices and stores the trust tickets of all IIoT devices. 
Devices from different domain can obtain the trust tickets 
of other devices through the master chain.  
IV. MSB-CTRUST IMPLEMENTATION 
In IIoT multi-domain scenarios, IIoT devices from different 
domains need to interact with each other for collaboration. In 
our paper, MSB-CTrust uses trust tickets to guarantee the 
security of cross-domain interactions. The process of MSB-
CTrust consists of the following phases: Trust tickets making, 
Trust ticket storing and updating, Trust ticket querying. A 
summary of the main notations is presented in TABLE Ⅱ. 
TABLE Ⅱ 
THE SUMMARY OF THE NOTATIONS 
Notation Description 
xd  The IIoT node 
iPK  The public key of node i  
iSK  The private key of node i  
mEg  The edge node 
( )iR t  Reputation value of node i  at time t  
iC  Consensus contribution value of node i  
iCL  The credibility level of node i  
iTTick  The trust ticket of node i  
 
 
Fig. 2. Credibility level evaluation based on fuzzy logic 
A. Trust ticket making 
The edge node is responsible for making trust tickets. To 
reduce the impact of low credibility edge nodes on trust ticket 
making, an incentive mechanism is designed to motivate the 
honest behaviors of edge nodes. The details about incentive 
mechanism are described in part V. The edge nodes can invoke 
TTM  smart contract to make trust tickets for an IIoT node i . As 
illustrated in the algorithm 1, smart contract TTM  consists of 
two functions: ( )GtCl   and ( )TTickGt  .  
1) Credibility level evaluating- GtCl ( )  
Function ( )GtCl   is used to evaluate the credibility level of 
node i . To establish a unified credibility presentation between 
different domains, credibility levels are categorized as three 
types: {High, Medium, Low} by using Fuzzy logic. As shown 
in Fig.2, the main process includes four steps. 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
5
Step 1: Calculation of reputation and consensus contribution.  
 Calculation of i ’s reputation 
Reputation is a real number in the range [0, 1]. MSB-CTrust 
is compatible with different reputation evaluation methods, 
which means different reputation evaluation methods can be 
used to calculate reputation for IIoT nodes in practical 
applications. To illustrate how our credibility level evaluation 
mechanism works, this paper uniformly uses the Beta 
reputation calculation method [27] to calculate the reputations 
of IIoT nodes. The reputation calculation details are as follows: 
 It is assumed that a node i  can provide services to other 
nodes represented by 1 2{ , ,..., }nsr sr sr sr . After the service is 
finished, the node 
jsr in sr  will give the service feedback 
jsr ifb 
(
jsr ifb 
= good or
jsr ifb 
 = bad) to i  according to the 
actual service quality, such as response time. The service 
feedback
jsr ifb 
 is signed by the private keys of 
jsr  and stored 
in the local slave chain as a transaction after it is confirmed by 
consensus nodes. Based on all service feedback from the nodes 
in sr. The reputation ( )iR t of node i  at time t is 
 ( ) j
j
j j
sr i
sr i
sr i sr i
R t

 


 


 (1) 
 
1
1
( ) ( )
j
n
i sr i
j
R t R t
n


   (2) 
where ( )
jsr iR t
 is the reputation of node
jsr  to node i ,
jsr i 
 
and 
jsr i 
 are the cumulative number of 
jsr ifb good  and 
jsr ifb bad  ,  respectively. n  is the number of nodes in sr. 
For a new IIoT node, its reputation value is initialized to 0.5. 
 Calculation of i ’s consensus contribution 
To motivate devices to actively participate in the consensus 
process of the blockchain, consensus contribution is also 
considered as a factor in the credibility level evaluation. The 
consensus contribution value of i  is  
 ( )(1i init inii tC CCR tC     ）  (3) 
 ( ) ( ) (1 )( (1 ) )
L V
i i
i i
SS SS
CR t CR t T
Sum Sum
   
 
        (4) 
Here, 0.5
init
C  is the initial value.  ,  and  are the 
optimization factors.   is a decay factor. L
iSS   and V
iSS   are 
the numbers that node i  participates in consensus as a primary 
node or a verifier, respectively. Sum  is the total numbers of 
consensus in T . Range of consensus contribution is [0, 1]. 
Step 2: Fuzzification. We define the two fuzzy sets: 
{ , , }
H M L
R R R R , { , , }More Medium LessC C C C . A trapezoidal 
membership [21] function is used to map crisp input values to 
fuzzy sets. Fig. 3 shows the membership functions of reputation 
and consensus contribution.  
Step 3: Fuzzy inference. We set the output linguistic variable 
as comprehensive reputation value CRV . The fuzzy inference 
rules are described in TABLE Ⅲ.  
Step 4: Defuzzification. The Middle of Maximum (MoM) 
method is used in the step [22]. Fig.4 is the surface viewer that 
reflects the comprehensive reputation value CRV  relative to 
R and C . According to the calculated CRV . The devices can 
be classified as {High, Medium, Low} according to the formula 
(5). 
 
, 0.75 1
,0.45 0.75
,0 0.45
C
High CRV
Medium CRV
Low CRV
L


 

 

 
  (5) 
 
Fig. 3. Membership function 
TABLE Ⅲ 
FUZZY INFERENCE RULE 
Rule If R  and C  then C RV  
1 H
R  MoreC  High-Trust 
2 H
R  Medium
C  High-Trust 
3 H
R  Less
C  Medium-Trust 
4 M
R  More
C  High-Trust 
5 M
R  Medium
C  Medium-Trust 
6 M
R  Less
C  Low-Trust 
7 L
R  More
C  Low-Trust 
8 L
R  Medium
C  Low-Trust 
9 L
R  Less
C  Low-Trust 
 
 
Fig. 4. Response surface of input output relations 
2) Ticket making- cG TTit k ( )  
Function ( )TTickGt   is executed to make the trust ticket of 
node i . As shown in Fig.5, the trust ticket i
TTick  of node i  
includes Ticket number iN , Identity ID i , Public key i
PK , 
Credibility level iCL  and Expiration time it . In our mechanism, 
trust tickets are used to build trust relationships between the 
IIoT devices. The higher credibility level iCL , the more credible 
node. i
t Tsp T  , where Tsp is the timestamp of the ticket 
making. i
t  indicates the expiration date of the trust ticket 
i
TTick . If i
t  is less than the current time, the trust ticket has 
expired. In our MSB-CTrust, the trust ticket of an IIoT node is 
remade every T  time units. Therefore, T is called as 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
6
validity time. T is set according to the requirements of 
practical application. If the value of T  is set too big, the trust 
ticket of an IIoT node cannot update in time. This will cause the 
IIoT node’s credible level in trust ticket to be inconsistent with 
the actual level. If the value of T  is set too small, the trust 
ticket of an IIoT node will be updated frequently. This will 
greatly increase the cost of trust tickets making. Thus, T  is 
usually set between 10 and 30 minutes. 
 
Fig.5. An example of Trust ticket  
 
B. Trust ticket storing and updating 
Trust ticket storing: Trust tickets of all members in an IIoT 
domain are verified and stored in the ledger of slave chain 
through consensus process. The details about consensus process 
are described in part D. In addition, trust tickets of devices in 
all IIoT domains are also shared through master chain. 
An edge node m
Eg can send the message containing trust 
tickets of IIoT nodes in its home domain to the master chain. 
The main content of the message is , , ( )
mp EgDo TTs Sig TTS  , 
where 
pDo  indicates the edge node’s home domain, TTs is the 
set of trust tickets of IIoT nodes. ( )
mEgSig TTS is the signature 
of edge node m
Eg . To prevent the forged trust tickets from 
being stored into the master main, all validation nodes in the 
master chain must reach a consensus for the messages. Every 
validation node will verify whether the signature is correct. In 
addition, only after it receives consistent TTs  from two-thirds 
of edge nodes in 
pDo domain within the specified time, TTs is 
stored into the master main.  The details of consensus processes 
are described in part D. Furthermore, an incentive mechanism 
is designed to encourage the honest behavior of edge nodes. 
More details are described in section V. The aim of the 
incentive mechanism is to minimize the malicious behaviors of 
all edge nodes by maximizing their benefits.  
Trust ticket updating: In our mechanism, a time-driven 
updating method is utilized to update trust tickets of IIoT 
devices. Smart contract TTM  is called by edge nodes to update 
the credibility levels and trust tickets for devices in the domains 
every T  time units ( T  is a system parameter). T is an 
adjustable variable which can be adjusted according to the 
actual situation.  
C. Trust ticket querying 
In order to explain the process of trust ticket querying, take 
device xd  in domain 1Do  requesting the trust ticket of yd  in 
domain 2Do  as example. The main steps are:  
(1) x
d sends a querying request to all edge devices in 1Do . 
(2) Once the request is received by edge devices, they will 
send the trust ticket ydT T ick  to x
d . 
(3) If 
x
d  receives the same 
ydT T ick  sent by at least 2/3of 
edge nodes in 1Do  within the specified time, the querying 
process is over. Otherwise, x
d  repeat (1)-(3) to query again. 
D. Trust-enhanced consensus protocol 
Both the master chain and the slave chain use a trust-
enhanced consensus protocol named TPBFT. In traditional 
PBFT, reaching consensus requires to send large of consensus 
confirmation messages, so the improved TPBFT selecting 
nodes to participate the consensus process according to their 
credibility level. This way greatly reduces the number of 
consensus nodes. TPBFT protocol includes two main steps: 
consensus node selection and consensus process. 
TABLE Ⅳ 
THREE TYPES OF CHAIN NODES 
Credibility level Primary Verification Ordinary 
High √ √ √ 
Medium × √ √ 
Low × × √ 
1) Consensus node selection  
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
7
TABLE Ⅳ shows that based on the credibility level of nodes, 
the chain nodes are divided into three types: primary nodes, 
verification nodes and ordinary nodes. 
It is assumed that there are n nodes in the blockchain. PBFT 
selects n nodes to participate in the consensus, which will lead 
to a large communication overhead, especially when the 
number of nodes is huge. Therefore, in order to reduce the 
communication overhead, our TPBFT selects n 
   nodes to 
participate in the consensus. The detail of selecting consensus 
nodes is as follows: 
 TPBFT selects a primary node from High credibility level 
nodes and 1n     verification nodes from the set of nodes 
having High and Medium credibility level. In a new round of 
consensus, the probability that node i  is selected as a primary 
node is: 
 , 1
0, 1
i
i
i
i
c
u
P l
u


 
 
 (6) 
In a new round of consensus, the probability that node i  is 
selected as a verification node is: 
 
, 3
0, 3
i
i
i
i
x
r
V l
r


 
 
 (7) 
where 
ic  and i
u  are the successful and unsuccessful total 
times of i  as a primary node during the previous l rounds of 
consensus, respectively. ix and ir  are the successful and 
unsuccessful total times of i  as a verification node during the 
previous l rounds, respectively. l is a parameter, which is related 
to the historical behavior of nodes. The bigger the value of l is, 
the more previous historical behaviors of nodes are considered. 
l is tunable and is set according to the needs of practical 
application. In our experiment, l is set to 20.  
If there are not enough nodes with High or Medium 
credibility Level, n 
   consensus nodes are selected 
randomly from all blockchain nodes. 
2) Consensus process 
The consensus process of TPBFT is shown in Fig. 6, where 
A, B and C are verification nodes. The primary node is 
responsible for constructing the block. The verification node is 
in charge of the work that checks the block information. 
a) The primary node sends a proposal , , , ( )iv h b Sig b 
to other verification nodes and other blockchain nodes, 
where v  is the view number, h is the block height, b  is 
the block summary, i represents the primary node, 
( )iSig b is the signature of the primary node. The 
proposal is verified by other verification nodes. The 
content of the verification is 
 Whether the view number is consistent with v . 
 Whether the signature is correct. 
 Whether the sender is the primary node under view
v. 
 Verifying the transactions in the block. 
b) If the verification successes, the proposal is accepted. 
The verification node will send the consensus 
confirmation message to the primary node and other 
blockchain nodes. If a verification node receives at least 
(2 / 3) * n 
   consensus confirmation messages, it will 
send the commit message to the primary node.  
c) If the primary node receives at least (2 / 3) * n 
   
commit messages, it adds the block into chain. The 
block is accepted.  
In above process, if no more than (2 / 3) * n 
   messages 
are received, the consensus process fails. The blockchain will 
select the next primary node. 
 
Fig. 6. TPBFT consensus process 
V.  INCENTIVE MECHANISM. 
In MSB-CTrust, edge devices have the following main 
behaviors: (1) Making trust tickets for all devices; (2) Sharing 
trust tickets in master chain. (3) Participating in the consensus 
processes. (4) Querying the trust tickets of IIoT devices. IIoT 
devices have the following main behaviors: (1) Sharing 
reputation information in slave chain; (2) Participating in the 
consensus processes in slave chain. Here, an incentive 
mechanism is designed based on revenue strategy game in order 
to motivate edge devices and IIoT devices to make honest 
behaviors. Assume no more than 2/3 of devices collude to 
break the security of MSB-CTrust. 
After the transactions from all the devices are authenticated 
and recorded in the distributed ledger, the incentives need to be 
allocated to the devices for rewards. MSB-CTrust provides 
embedded salary distribution rules, namely, the utility function 
[27], which is described in Definition 1 and Definition 4. The 
design of the utility function follows the rule that rewards 
devices for honest behavior and punishes devices for malicious 
behavior. 
A. The Game  
To illustrate the incentive function conveniently, we take the 
example of incentivizing the edge devices to make true trust 
tickets for IIoT devices. If the edge devices fail, their reputation 
values should be reduced, otherwise their reputation values 
should be increased. The revenue problem of edge devices can 
be modeled as a revenue strategy game G , which consist of 
players, strategies, and utility functions. The game G is defined 
in Definition 1. 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
8
Definition 1(game G ): The game G is represented as a 
triple ( , , )Eg S U . 
 1 2{ , ,..., }mEg Eg Eg Eg is a set of m-players. Each player 
is an edge device in Eg . 
 1 2{ , ,..., }mS S S S is the strategy set of m-edge devices, 
where kS S  is the set of strategies for kEg . kEg  can 
choose any actions 
k ks S . Therefore, a strategy profile is 
a vector, S , 1 2{ , ,..., }ms s s s , where
ks  represents a 
specific action of
kS . 
 1 2{ , , ..., }mU u u u  is the set of utility functions. Under a 
wide range of circumstances the preference relation k≿  of 
edge device kEg in the game can be represented by a utility 
function :ku S SU , in the sense that 1 2( ) ( )k ku s u s  
whenever 1 2ks s≿  [27]. The utility function specifies the 
device’s preference relation in a game. Here, 
:ku S SU   is the utility function that determines the 
revenue of 
kEg   in E g  under a certain strategy, 
{1,2,..., }k m . SU  is the revenue. 
Definition 2 (actions). There are two types of actions for 
each edge device in the example: kEg  makes the true trust 
tickets, which is denoted as T
ks ; otherwise, 
kEg  makes the 
untrue trust tickets, which is denoted as F
ks . For the above results, 
the set of edge devices who provide the true results is defined 
as
honEg , where 
k honEg Eg , T
k ks s . Respectively, 
malEg  is 
the set of edge devices who provide the untrue results Fs , where
k malEg Eg , F
k ks s . 
Definition 3 (Decisions). For the actions from m-edge 
devices, 1 2{ , ,..., }ms s s s . Only when the trust tickets are 
recorded in the blockchain by consensus, we consider the trust 
tickets are authenticated,
statusTicket Authenticated , otherwise, 
statusTicket Unauthenticated .  
Once the results are published or not received within the 
specified time, MSB-CTrust rewards or punishes the edge 
devices according to utility functions defined in Definition 4. 
Definition 4 (Utility). SU in 
ku  is the revenue, which 
usually includes economic and non-economic types. We use the 
non-economic type, which is reputation. The reward and 
penalty rules can be defined as follows: 
When 
statusTicket Unauthenticated  
- , ( )F
k k kEg Eg u s c     
When 
statusTicket Authenticated  
- , ( )T
k k kEg Eg u s r    
Here, 0.05r c  . That is to say, the reputation value of an 
edge device is increased by 0.05 if
status
Ticket Authenticated . 
Otherwise, the reputation value of an edge device is decreased 
by 0.05 if 
status
Ticket Unauthenticated . 
Definition 5 (Revenue point).  For kEg in the Eg , we can 
get the best strategy profile 
k ks S that achieve the best reward 
for every edge device ( ) ( ), ,k k k k k ku s u s s S   (1, 2,..., )k m . 
Thus, the strategy profile s  is the revenue point. 
In the game G , there is a dynamic stability, that is, when an 
edge device makes the true trust tickets. According to 
Definition 4 and Definition 5, we can prove that the edge device 
has the maximum benefit. The strategy that is not in the state 
has not reached the state of revenue point.  
Theorem 1. In the m-players of MSB-CTrust, there is a 
revenue point: 
 
T
k ks s , of which
kEg Eg  . 
Proof 1.  According to Definitions 1-3, for the strategy 
profile of
kEg Eg  , T
k ks s  means that the edge device 
makes the true trust tickets. Based on the utility function in 
Definition 4, for
kEg , the revenue is r . If the edge device 
chooses the other action F
ks  instead of T
ks , the revenue is c . 
According to the above Proof 1, it can be known that the edge 
device should make the true trust ticket to reach revenue point 
for maximizing its revenue. 
Similarly, for other behaviors of the IIoT devices and edge 
devices, the revenue problem of their behaviors can also be 
modeled as a revenue strategy game. Only when they behave 
honestly, the state of revenue point is reached. Therefore, the 
established incentive mechanism encourages the devices to 
behave honestly for maximizing their revenues. 
Ⅵ. SECURITY DISCUSSION 
In this section, we describe security objectives and attack 
models of MSB-CTrust and conduct security analysis.  
A. Security objective 
The security objectives of MSB-CTrust are as follows: 
 The trust tickets of IIoT devices can be securely shared 
across different domains. IIoT devices can gain real 
credibility levels of IIoT devices from other domains. 
 To enhance the security, MSB-CTrust can resist common 
attacks, such as tampering attacks, forgery attacks, 
Distributed Denial of Service (DDoS) attacks, self-
promotion attacks. 
According to our proposed scheme, the following 
assumptions are made: 
 A1: The blockchain could not be compromised under 
attacks like eclipse attacks, hijacking attacks and other P2P 
attacks [8]. 
 A2: An attacker cannot control most IIoT devices or edge 
devices in a domain. 
 A3: The private key of any device cannot be obtained by 
other devices. 
B. Attack model 
The security attacks are defined as follows: 
Attack 1. Tampering attacks and forgery attacks: This 
refers to the tampering of trust tickets and reputation 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
9
information. This attack can occur in one of the following three 
ways. 
1) Malicious IIoT devices tamper with feedback, reputation 
information or trust tickets stored in the blockchain to improve 
their credibility levels. 
2) In the phase of trust ticket storing, a malicious IIoT device 
d
A
can control or collude with local edge devices Eg
ℚ
to send 
the tampered or forged trust ticket (such as improving the 
credibility level) to the master chain network. 
3) Take device xd  in domain 1Do  querying the trust ticket 
of a malicious IIoT device d
A
 in domain 2Do  as example. In 
the phase of trust ticket querying, d
A
can control or collude 
with edge devices Eg
ℚ
 in domain 1Do  to send the tampered 
or forged trust ticket to xd . 
Attack 2. DDoS attacks: Multiple attackers consume the 
resources of the target device to disrupt its normal functioning 
[24]. In MSB-CTrust, some attackers cruelly consume the 
resources of some edge nodes by brutal means (such as sending 
lots of unnecessary messages), resulting in the edge nodes not 
operating properly. 
Attack 3. Self-promotion attacks：The attacks occur when 
a malicious IIoT device consistently sends good 
recommendations about itself in order to boost its reputation [8]. 
In MSB-CTrust, a malicious IIoT device d
A
can broadcast 
some false service feedback to improve its credibility level. 
C. Security analysis 
For the above attacks, the following security analysis is 
provided. It is proved that MSB-CTrust can resist these attacks 
well. 
Analysis 1. Resistance to Attack 1: We analyze each of the 
three ways in which tampering attacks or forgery attacks occur. 
1) Blockchain is a tamper-proof distributed ledger [5]. Once 
trust tickets and reputation information are stored in blockchain, 
no node can tamper with them. Malicious IIoT devices only 
improve the credibility level by tampering with service 
feedback before it is stored in the blockchain ledger. According 
to section Ⅳ, the service feedback is signed by the private key 
of the node who gives the feedback. As stated by assumption 
A3, malicious IIoT devices cannot obtain the private keys of 
other devices. Therefore, service feedback cannot be tampered 
with. 
2) According to section Ⅳ part B and part D, trust tickets 
need to be verified by consensus before they are stored in the 
master chain, which means trust tickets are agreed by the 
majority of edge nodes in a domain. As stated by assumption 
A2, d
A
cannot control most edge nodes. Therefore, when d
A
controls or colludes with some local edge devices to send 
tampered or forged trust tickets to master chain. The other edge 
nodes of master chain cannot accept the tampered or forged 
trust tickets. In addition, the incentive mechanism described in 
section V encourages the honest behavior of edge nodes. 
3) According to section Ⅳ part C, only when no less than 
2 / 3  edge nodes Eg
ℚ
 send a consistent trust ticket in 1Do  
within the specified time, the querying process is over. If the 
malicious device d
A
 only controls or colludes with some edge 
devices to send tampered or forged trust tickets to xd , xd
cannot accept the tampered or forged trust tickets. As stated by 
assumption A2, d
A
cannot control 2 / 3  edge nodes. In 
addition, the incentive mechanism described in section V 
encourages the honest behavior of edge nodes.  
In summary, MSB-CTrust resists tampering attacks and 
forgery attacks. 
Analysis 2. Resistance to Attack 2: MSB-CTrust is based 
on a master-slave blockchain framework with fully distributed 
characteristics. There are m  edge devices in each domain. 
Even if some edge devices cannot work due to DDOS attacks, 
other edge devices can still work normally and be responsible 
for maintaining the master chain, making and querying trust 
tickets. Therefore, MSB-CTrust mechanism with fully 
distributed characteristics resists DDOS attacks. 
Analysis 3. Resistance to Attack 3: According to section 
Ⅳ, service feedback takes effect only when it is stored on the 
blockchain by consensus. And the feedback needs to be signed 
by the private key of the node giving the feedback. Therefore, 
it's easy to find out that the forged feedback of d
A
 is false 
during consensus processes. Self-promotion attacks will not 
succeed. 
 
Fig.7. The key code of TTM smart contract 
Ⅶ. IMPLEMENTATION AND PERFORMANCE EVALUATION 
In the section, the performance of MSB-CTrust is evaluated 
in terms of the accuracy of credibility level evaluation, 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
 
 
 
10 
transaction throughput, time delay, communication overhead, 
and effectiveness of the incentive mechanism and the effect of 
parameter l on selection of consensus nodes.  
TABLE Ⅴ  
CONFIGURATIONS OF THE FOUR LAPTOPS 
IP Configuration OS 
172.18.18.193 Intel(R) Core (TM) i5-10500 windows 10 
172.18.18.206 Intel(R) Core (TM) i5-9400 windows 10 
172.18.18.141 AMD Ryzen 7 4800H windows 10 
172.18.18.144 Intel(R) Core(TM) i7-8565U windows 10 
TABLE Ⅵ  
PARAMETER SETTINGS 
Parameters Default value 
  in Equation (3) 0.8 
  in Equation (3) 1 
  in Equation (4) 0.4 
  in Equation (4) 0.6 
T  10 minutes 
Number of domains 4 
Number of IIoT nodes in all domain 40*4 
Number of Edge nodes in all domain 5*4 
MSB-CTrust is implemented on the Hyperledger fabric 
platform. The simulation experiments are performed on four 
laptops whose configurations are shown in TABLE Ⅴ. Each 
laptop is deployed with a virtual machine with ubuntu 18.04, 
where the blockchain system is configured. Fig. 7 shows the 
key code of TTM smart contract. Table Ⅵ summarizes the main 
parameter settings in our experiments. 
A. Accuracy of credibility level evaluation 
In order to test the availability of cross-domain trust 
calculation method in MSB-CTrust, the experiments analyze 
the accuracy of credibility level evaluation. Here, the results of 
credibility level evaluation are presented for an honest node and 
two malicious nodes. In the experiments, the ground truth of the 
honest node is always High. The first malicious node always 
provides bad services and its ground truth is always Low. The 
second malicious performs opportunistic service attacks. The 
node opportunistically provides a good service to enhance its 
credibility level. However, it may provide a bad service when 
it has a high credibility level. Its ground truth varies from High 
to Low in the process of simulation. 
Fig.8 (a) shows the evaluation results of the honest node. One 
can see that its credibility level reaches the ground truth as time 
increases. 
Fig.8 (b) shows the evaluation results of the first malicious 
node. One can see that its credibility level varies from Medium 
to Low, which reaches the ground truth as time increases. 
Fig.8 (c) shows the evaluation results of the second malicious 
node who performs opportunistic service attacks. One can see 
that the evaluation result varies from High to Low and 
converges towards the ground truth. 
The above experimental results prove that the cross-domain 
trust calculation method in MSB-CTrust can accurately 
evaluate the node’s credibility level. 
 
 
Fig. 8. The results of credibility level evaluation for Honest or malicious nodes
TABLE Ⅶ 
TWO COMPARISON GROUPS 
 The compared papers 
The first group 
Fortino’s scheme [16] 
Gai’s scheme [18] 
Kouicem’s scheme [8] 
The second group 
Cash’s scheme [19] 
Ma’s scheme [20] 
Xue’s scheme [26]  
B. Throughput 
Throughput measures the ability of a system to process 
requests or transactions per unit of time. Throughput is 
represented by TPS  (Transaction per second) calculated by 
formula (8).  
 /TPS Sumtransactions t   (8) 
where Sumtransactions  is the number of transactions that are 
stored in the blockchain ledger in time period t . In order to 
observe the changes of TPS , the experiments are designed as 
follows:  
The number of domains is set to 4. Two comparison groups 
are set, as shown in TABLE Ⅶ. In the first comparison group, 
all schemes are both single-chain architectures. In the second 
comparison group, all schemes are both master-slave chain 
architectures. Due to the influence of uncontrollable factors 
(such as network packet loss, device failure, etc) in the 
experimental process, we conducted eight experiments under 
the same experimental configurations, which can reduce the 
experimental error caused by uncontrollable factors and obtain 
more stable and reliable results. The default Batch timeout 
(block interval) in Hyperledger fabric is 2 seconds [29]，which 
is too short and will result in insufficient transactions for the 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
11 
 
 
 
packed blocks. Xiao et al. [30] set Batch timeout to 20 seconds，
which is too long and will result in high consensus latency. 
Therefore, we set the block interval to 10 seconds in our 
experiment, which is the same as Xu et al. [31]. 
First, we compare the MSB-CTrust with all schemes in the 
first comparison group. The MSB-CTrust uses TPBFT protocol 
proposed by us. The Fortino’s scheme [16] and Gai’s scheme 
[18] uses PBFT protocol. The Kouicem’s scheme [8] uses an 
enhanced PBFT protocol proposed by them. Fig. 9 shows the 
changes ofTPS . The average throughputs of Fortino’s scheme 
[16], Gai’s scheme [18], Kouicem’s scheme [8] and MSB-
CTrust are about 70, 71, 84, and 161 respectively. The TPS  of 
MSB-CTrust is approximately 2.3 times that of Fortino’s 
scheme [16] and Gai’s scheme [18], and 1.9 times that of 
Kouicem’s scheme [8]. MSB-CTrust achieves such good 
results mainly thanks to our master-slave chain architecture, 
which divides transactions of all domains to different chains. 
Transactions from the same domain only are recorded in the 
local slave chain, and multiple chains perform TPBFT 
consensus protocol in parallel to process transactions, which 
greatly improves throughput. However, single-chain 
architectures used by Fortino’s scheme [16], Gai’s scheme [18], 
Kouicem’s scheme [8] only serially perform the consensus 
process to process all transactions and generate the blocks. 
 
Fig. 9. Throughput of MSB-CTrust vs. single-chain schemes 
Then, we compare the MSB-CTrust with all schemes in the 
second comparison group. Among them, the master-slave chain 
architectures of Xue’s scheme [26] and Cash’s scheme [19] are 
similar to MSB-CTrust. But the master chain and slave chains 
of Xue’s scheme [26] both use PBFT consensus protocol, and 
Cash’s scheme [19] uses POW (Proof-of-Work) for the master 
chain and POA (Proof-of-Authority) for slave chains. The 
architecture of Ma’s scheme [20] is different from other 
schemes, which includes partially computing model (PCM) and 
non-computing of model (NCM). PCM and NCM use PeW 
(proof of equivalent work) and PoC (proof of contribution) 
consensus protocols respectively. Fig. 10 indicates that the 
average throughputs of Cash’s scheme [19], Ma’s scheme [20], 
Xue’s scheme [26] are about 125, 110, 136 respectively. The 
TPS  of MSB-CTrust is the highest, which is 1.2, 1.3 and 1.5 
times that of Xue’s scheme [26], Cash’s scheme [19], and Ma’s 
scheme [20], respectively. MSB-CTrust has higher throughput 
than other schemes mainly thanks to high-efficient TPBFT 
consensus protocol. TPBFT selects fewer and more credible 
blockchain nodes to participate in the consensus process, which 
reduces the time delay of consensus and the probability of 
failure of consensus caused by malicious blockchain nodes. 
However, PBFT used by Xue’s scheme [26] and POA used by 
Cash’s scheme [19] both select all blockchain nodes to validate 
the block in the consensus process. In addition, another reason 
for the low throughput of Cash’s scheme [19] is that mining 
process in POW is low-efficient and high-energy-consumption. 
Similarly, PeW used by Ma’s scheme [20] also needs to 
calculate nonce that satisfies the mining condition, which leads 
to low throughput. 
Through the above experimental results, it is obvious that the 
throughput of master-slave chain architecture is higher than the 
single-chain architecture, and the TPS  of our TPBFT is higher 
than that of the consensus protocols proposed by the schemes 
in the second comparison group. Thus, MSB-CTrust using 
master-slave chain architecture and TPBFT is more scalable. 
 
Fig. 10. Throughput of MSB-CTrust vs. other master-slave 
chain schemes 
C. Time Delay 
System performance is closely related to time delay, which 
is calculated by formula (9) 
 
e sDelay t t   (9) 
where 
st  is the time of transaction generation. 
et  is the time 
of transaction confirmation (stored in the ledger). Delay can be 
counted by reading the log of the blockchain run. We compare 
the delays of MSB-CTrust with all schemes of TABLE Ⅶ. The 
schemes in the first comparison group are both single-chain 
architectures, and the schemes in the second comparison group 
are both master-slave chain architectures. 
Fig. 11 is a comparison of the delays of MSB-CTrust with all 
schemes in the first comparison group of TABLE Ⅶ. One can 
see that the delay of all schemes increases as the number of 
transactions increases. The delay of MSB-CTrust is the lowest 
compared with other three schemes under the same number of 
transactions. The reason is that MSB-CTrust processes the 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
12 
 
 
 
transactions of different domains in parallel based on the 
master-slave chain architecture. Suppose the four domains are 
denoted as 1Do , 2Do , 3Do and 4Do , and the corresponding 
slave chains denoted as 1Sl , 2Sl , 3Sl and 4Sl . These slave chains 
work in parallel and only process transactions in their own 
domain. For example, 1Sl  only records transactions from 1Do . 
However, in the single-chain architectures used by Fortino’s 
scheme [16], Gai’s scheme [18] and Kouicem’s scheme [8], all 
transactions from four domains are done serially instead. 
Compared with serial working way in the single-chain 
architectures [8, 18, 16], the speed of transactions processing in 
MSB-CTrust is improved by using the parallel processing way 
with a few slave chains in the blockchain system. Therefore, 
MSB-CTrust has the lowest delay. 
 
Fig. 11. Time delay of MSB-CTrust vs. single-chain schemes 
 
Fig. 12. Time delay of MSB-CTrust vs. other master-slave 
chain schemes 
Fig. 12 is a comparison of the delays of MSB-CTrust with all 
schemes in the second comparison group of TABLE Ⅶ. One 
can see that the delay of MSB-CTrust is always lower than that 
of other master-slave chain schemes under the same number of 
transactions. When the number of transactions is 2000, the 
delays of Xue’s scheme [26], Cash’s scheme [19] and Ma’s 
scheme [20] are about 18%, 30% and 35% higher than MSB-
CTrust. The reason is that only some credible blockchain nodes 
are selected to participate in the consensus in the proposed 
TPBFT consensus protocol. But, in the PBFT used by Xue’s 
scheme [26] and POA used by Cash’s scheme [19], all 
blockchain nodes both need to participate in the consensus and 
validate the blocks. Therefore, our TPBFT improves the 
efficiency of consensus by selecting fewer and more reliable 
nodes to participate in consensus. In addition, TPBFT optimizes 
the three-stage consensus process of PBFT algorithm. In the 
commit stage of PBFT, the commit messages are sent to all 
verification nodes. But, the commit messages are only sent to 
the primary node in the commit stage of TPBFT, which reduces 
the communication overhead. For the PCM model of Ma’s 
scheme [20], Slave agents take the longer time to compute 
nonce that satisfies mining difficulty, which results in high 
delay.  
In a word, it is obvious that MSB-CTrust performs better than 
other schemes in terms of time delay as shown in the above 
experimental results of two groups. 
D. Communication overhead 
The communication complexity of PBFT protocol is 2( )O n , 
where n is the number of blockchain nodes. The 
communication complexity of TPBFT protocol is ( * )O n n 
  , 
where n 
   is the number of nodes selected as consensus 
nodes. As described in Section IV, Part D, TPBFT only selects 
n 
   nodes to participate in consensus.  
To better measure the communication overhead of the 
master-slave chain, we analyze the number of messages 
required for the master chain and all slave chains to reach a 
consensus. It is assumed that there are p  domains, n  IIoT 
nodes and m  edge nodes in each domain. According to the 
TPBFT algorithm execution flow, the number of single 
consensus messages of master-slave chain architecture using 
TPBFT in each phase is simplified to get the Eq. (10) as follows: 
 *msb m sCf Cf p Cf   (10) 
 ( * )( * 1) 2
m
Cf m p m p      (11) 
 ( )( 1) 2
s
Cf n m n m        (12) 
where 
mCf is the number of single consensus messages in the 
master chain, 
sCf is the number of single consensus messages 
in each slave chain. Similarly, the number of single consensus 
messages of single-chain architecture using TPBFT is 
simplified to get the Eq. (13) as follows: 
 (( )* )( (( )* ) 1) 2sbCf m n p m n p        (13) 
In the experiments, we compare the number of consensus 
messages between the two architectures with a different number 
of IIoT nodes, edge nodes and domains, as shown in Fig. 13. 
One can see that the number of consensus messages in the 
single-chain architecture and master-slave chain architecture 
master increases as the number of IIoT devices and domains 
increases, but the single-chain architecture increases faster 
when 150, 15, 10n m p   , 25178msbCf   and 
69298sbCf  , respectively. This means that the number of 
consensus messages in master-slave chain architecture is 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
13 
 
 
 
reduced by 63.7%  compared to single-chain architecture. It is 
obvious that MSB-CTrust framework can effectively reduce the 
communication overhead of the consensus process.
 
Fig. 13. Communication overhead comparison in the consensus phase
E. Effectiveness of incentive mechanism 
To measure the effectiveness of the incentive mechanism, the 
successful rate of making trust tickets is introduced, which is 
calculated by formula (14) 
 _ / _rS Sm nodes Sum nodes  (14) 
where 
rS  is the successful rate of making trust tickets. 
_Sm nodes is the number of edge nodes making trust tickets 
successfully. _Sum nodes is the number of all edge nodes 
making trust tickets. The larger the value of 
rS is, the greater 
the proportion of honest edge nodes is. When 100%
r
S  , this 
indicates that all edge nodes behave honestly and make trust 
tickets successfully. The total number of edge nodes is set to 
100. In order to analyze the effect of the number of malicious 
edge nodes on the performance of incentive mechanism, we 
design four sets of experiments where the percentage of 
malicious edge nodes ( pmn ) is 10%, 30%, 50% and 70%, 
respectively. These malicious edge nodes may add un-correct 
credibility levels to the trust tickets which cannot be confirmed 
by consensus nodes. Therefore, the malicious edge nodes will 
make the trust tickets unsuccessfully. In the experiments, there 
are no collusive attacks. Fig. 14 and Fig. 15 show the successful 
rate of making trust tickets of MSB-CTrust without incentive 
mechanism and with incentive mechanism respectively.  
As shown in Fig. 14, when the percentage of malicious edge 
nodes is 10%, 30%, 50%, 70%, the 
rS  of MSB-CTrust without 
incentive mechanism is around 90%, 70%, 50%, 30% 
respectively. It means
rS of MSB-CTrust without incentive 
mechanism decreases with increasing the percentage of 
malicious nodes from 10% to 70%. The higher pmn  is, the 
lower 
rS  of MSB-CTrust without incentive mechanism is. The 
reason is that malicious edge nodes will likely continue to make 
un-correct trust tickets which eventually leads to the consensus 
failure.  
However, in Fig. 15, when the percentage of malicious edge 
nodes is 10%, 30%, 50%, 70%, the 
rS  of MSB-Ctrust with 
incentive mechanism raises quickly over time, and eventually 
converges to 95%. It is very obvious that 
rS  of MSB-CTrust 
with incentive mechanism is always higher than rS  of MSB-
CTrust without incentive mechanism under the same 
percentage of malicious edge nodes. MSB-CTrust still keeps a 
good successful rate of making trust tickets even though 70% 
of malicious nodes exist. This is thanks to our incentive 
mechanism that motivates all malicious edge nodes to make 
trust tickets honestly for reaching their maximum revenues.  
 
Fig. 14. rS of MSB-CTrust without incentive mechanism in 
different number of malicious edge nodes.  
 
Fig. 15. 
rS of MSB-CTrust with incentive mechanism in 
different number of malicious edge nodes.  
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
14 
 
 
 
F. Effect of parameter l on selection of consensus nodes 
In the section, we analyze the effect of parameter l on 
selection of consensus nodes. The fault node rate is introduced 
to measure the accuracy of consensus node selection, which is 
calculated by formula (15) 
 /fnr fcn scn  (15) 
where fcn is the number of fault consensus nodes, scn  is the 
number of all consensus nodes. In the experiments, the total 
number of blockchain nodes is set to 100. The percentage of 
malicious nodes is set to 10%, 30% and 50% respectively. The 
malicious nodes can opportunistically perform malicious 
behaviors.  
As shown in Fig. 16, the fault node rate of MSB-CTrust is 
always below 10% even with the presence of 50% of malicious 
nodes. This is because MSB-CTrust selects consensus nodes 
from the set of nodes having High and Medium credibility level, 
and the probability of a node being selected as consensus nodes 
considers the historical behavior of the node during the previous 
l rounds of consensus process. Besides, when the percentage of 
malicious nodes is 30% and 50%, the fnr  for 20l  is slightly 
lower than that for 20l  . However, when 20l  , the parameter 
l does not affect the fault node rate. The reason is that our 
credibility level evaluation method can identify more malicious 
node, so the percentage of malicious nodes in the set of nodes 
having High and Medium credibility level is very small. This 
observation implies that, the value of parameter l is 
recommended as 20. 
 
Fig. 16. The fault node rate in different percentage of 
malicious nodes.  
Ⅷ. CONCLUSION 
MSB-CTrust introduces a master-slave chain framework to 
realize a scalable trust management mechanism for a large-
scale IIoT multi-domain scenario. Slave chains from different 
domains process intra-domain transactions and make trust 
tickets for the local devices. The master chain shares trust 
tickets of all devices from different domains. Devices from 
different domains can build trust relationships through trust 
tickets that contain credibility level and identity information. 
Meanwhile, the master and slave chains adopt a new TPBFT 
consensus protocol to improve the efficiency of consensus. 
Consider that edge devices or IIoT devices may damage the 
trust management process of MSB-CTrust, MSB-CTrust 
provides embedded salary distribution rules and designs a 
revenue strategy game. Experiments show that MSB-CTrust 
model can accurately evaluate the credibility level of IIoT 
devices. The master-slave chain architecture with TPBFT 
consensus protocol improves transaction throughput, reduces 
time delay and communication overhead. The incentive 
mechanism can force malicious nodes to behave honestly for 
maximizing their revenue. 
ACKNOWLEDGMENT 
The work in this paper has been supported by National 
Natural Science Foundation of China (62062006, 71501156, 
62062008, 62067001), Natural Science Basis Research Plan in 
Guangxi Province of China (2018JJA170028). 
REFERENCES 
[1] X. Li, D. Li, J. Wan, A. V. Vasilakos, C. F. Lai, and S. Wang, “A review 
of industrial wireless networks in the context of Industry 4.0,” Wirel. 
Networks, vol. 23, no. 1, pp. 23–41, 2017, doi: 10.1007/s11276-015-
1133-7.  
[2] B. Li and K. Wu, “The Price of Environmental Sustainability: Empirical 
Evidence from Stock Market Performance in China,” Sustain., vol. 9, no. 
8, pp. 1–16, 2017, doi: 10.3390/su9081452.  
[3] I. U. Din, A. Bano, K. A. Awan, A. Almogren, A. Altameem, and M. 
Guizani, “LightTrust: Lightweight Trust Management for Edge Devices 
in Industrial Internet of Things,” IEEE Internet Things J., vol. 4662, no. 
c, pp. 1–8, 2021, doi: 10.1109/JIOT.2021.3081422.  
[4] A. Altaf, H. Abbas, F. Iqbal, F. A. Khan, S. Rubab, and A. Derhab, 
“Context-oriented trust computation model for industrial Internet of 
Things,” Comput. Electr. Eng., vol. 92, no. April, p. 107123, 2021, doi: 
10.1016/j.compeleceng.2021.107123.  
[5] S. Yeasmin and A. Baig, “Permissioned Blockchain-based Security for 
IIoT,” IEMTRONICS 2020 - Int. IOT, Electron. Mechatronics Conf. 
Proc., 2020, doi: 10.1109/IEMTRONICS51293.2020.9216343.  
[6] J. Qi, Z. Wang, B. Xu, M. Wu, Z. Gao, and Y. Sun, “QoS-Driven 
Adaptive Trust Service Coordination in the Industrial Internet of Things,” 
Sensors, vol. 18, no. 8, 2018, doi: 10.3390/s18082449.  
[7] D. Wu and N. Ansari, “A Trust Evaluation Enhanced Blockchain-
Secured Industrial IoT System,” IEEE Internet Things J., vol. 8, no. 7, 
pp. 5510–5517, 2021, doi: 10.1109/JIOT.2020.3030689. 
[8] D. E. Kouicem, Y. Imine, A. Bouabdallah, and H. Lakhlef, 
“Decentralized Blockchain-Based Trust Management Protocol for the 
Internet of Things,” IEEE Trans. Dependable Secur. Comput., vol. 5971, 
no. c, pp. 1–14, 2020, doi: 10.1109/TDSC.2020.3003232. 
[9] S. Guo, X. Hu, S. Guo, X. Qiu, and F. Qi, “Blockchain Meets Edge 
Computing: A Distributed and Trusted Authentication System,” IEEE 
Trans. Ind. Informatics, vol. 16, no. 3, pp. 1972–1983, 2020, doi: 
10.1109/TII.2019.2938001. 
[10] M. Shen et al., “Blockchain-Assisted Secure Device Authentication for 
Cross-Domain Industrial IoT,” IEEE J. Sel. Areas Commun., vol. 38, no. 
5, pp. 942–954, 2020, doi: 10.1109/JSAC.2020.2980916.  
[11] M. A. Khan and N. S. Alghamdi, “A neutrosophic WPM-based machine 
learning model for device trust in industrial internet of things,” J. 
Ambient Intell. Humaniz. Comput., no. 0123456789, 2021, doi: 
10.1007/s12652-021-03431-2.  
[12] J. Yun, S. Seo, and J. M. Chung, “Centralized Trust-Based Secure 
Routing in Wireless Networks,” IEEE Wirel. Commun. Lett., vol. 7, no. 
6, pp. 1066–1069, 2018, doi: 10.1109/LWC.2018.2858231. 
[13] K. A. Awan, I. U. Din, M. Zareei, M. Talha, M. Guizani, and S. U. 
Jadoon, “HoliTrust-A Holistic Cross-Domain Trust Management 
Mechanism for Service-Centric Internet of Things,” IEEE Access, vol. 7, 
no. i, pp. 52191–52201, 2019, doi: 10.1109/ACCESS.2019.2912469. 
[14] Z. Liu, J. Ma, Z. Jiang, and Y. Miao, “LCT: A Lightweight Cross-
Domain Trust Model for the Mobile Distributed Environment,” KSII 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply. 
15 
 
 
 
Trans. Internet Inf. Syst., vol. 10, no. 2, pp. 914–934, Feb. 2016, doi: 
10.3837/tiis.2016.02.026. 
[15] K. A. Awan, I. Ud Din, A. Almogren, M. Guizani, A. Altameem, and S. 
U. Jadoon, “RobustTrust - A Pro-Privacy Robust Distributed Trust 
Management Mechanism for Internet of Things,” IEEE Access, vol. 7, 
pp. 62095–62106, 2019, doi: 10.1109/ACCESS.2019.2916340. 
[16] G. Fortino, F. Messina, D. Rosaci, and G. M. L. Sarné, “Using 
Blockchain in a Reputation-Based Model for Grouping Agents in the 
Internet of Things,” IEEE Trans. Eng. Manag., vol. 67, no. 4, pp. 1231–
1243, 2020, doi: 10.1109/TEM.2019.2918162. 
[17] Y. Wu, H. N. Dai, and H. Wang, “Convergence of Blockchain and Edge 
Computing for Secure and Scalable IIoT Critical Infrastructures in 
Industry 4.0,” IEEE Internet Things J., vol. 8, no. 4, pp. 2300–2317, 2021, 
doi: 10.1109/JIOT.2020.3025916. 
[18] K. Gai, Y. Wu, L. Zhu, Z. Zhang, and M. Qiu, “Differential Privacy-
Based Blockchain for Industrial Internet-of-Things,” IEEE Trans. Ind. 
Informatics, vol. 16, no. 6, pp. 4156–4165, 2020, doi: 
10.1109/TII.2019.2948094. 
[19] M. Cash and M. Bassiouni, “Two-Tier Permission-ed and Permission-
less Blockchain for Secure Data Sharing,” Proc. - 3rd IEEE Int. Conf. 
Smart Cloud, SmartCloud 2018, pp. 138–144, 2018, doi: 
10.1109/SmartCloud.2018.00031. 
[20] Z. Ma, W. Huang, W. Bi, H. Gao, and Z. Wang, “A Master-Slave 
Blockchain Paradigm and Application in Digital Rights Management,” 
China Commun., vol. 15, no. 8, pp. 174–188, 2018, doi: 
10.1109/CC.2018.8438282. 
[21] A. K. Das, S. Kalam, N. Sahar, and D. Sinha, “UCFL: User 
Categorization using Fuzzy Logic towards PUF based Two-Phase 
Authentication of Fog assisted IoT devices,” Comput. Secur., vol. 97, p. 
101938, 2020, doi: 10.1016/j.cose.2020.101938. 
[22] X. Liu, “Parameterized defuzzification with maximum entropy 
weighting function-Another view of the weighting function expectation 
method,” Math. Comput. Model., vol. 45, no. 1–2, pp. 177–188, 2007, 
doi: 10.1016/j.mcm.2006.04.014. 
[23] L. Wei, J. Wu, and C. Long, “A Hierarchical Trust Management 
Architecture Based on Blockchain for Crossover Service,” ACM Int. 
Conf. Proceeding Ser., pp. 155–159, 2020, doi: 
10.1145/3390566.3391663. 
[24] M. Wang, L. Rui, Y. Yang, Z. Gao, and X. Chen, “A Blockchain-based 
Multi-CA Cross-Domain Authentication Scheme In Decentralized 
Autonomous Network,” IEEE Trans. Netw. Serv. Manag., no. Dl, pp. 1–
14, 2022, doi: 10.1109/TNSM.2022.3180357. 
[25] U. Javaid, M. N. Aman, and B. Sikdar, “A Scalable Protocol for Driving 
Trust Management in Internet of Vehicles with Blockchain,” IEEE 
Internet Things J., vol. 7, no. 12, pp. 11815–11829, 2020, doi: 
10.1109/JIOT.2020.3002711. 
[26] L. Xue, H. Huang, F. Xiao, and W. Wang, “A Cross-domain 
Authentication Scheme Based on Cooperative Blockchains Functioning 
with Revocation for Medical Consortiums,” IEEE Trans. Netw. Serv. 
Manag., vol. 18, no. 9, 2022, doi: 10.1109/TNSM.2022.3146929. 
[27] A. Josang and R. Ismail, ‘‘The Beta Reputation System,’’ in Proc. 15th 
Bled Electron. Commerce Conf., Slovenia, vol. 5, 2002, pp. 2502–2511. 
[28] M. J. Osborne and A. Rubinstein, “Nash Equilibrium” in A Course in 
Game Theory, U.S. Massachusetts, Cambridge, MIT Press, 1994, ch. 2, 
sec. 2.1, pp. 13-14. 
[29] H. Kang, T. Dai, N. Jean-Louis, S. Tao, and X. Gu, “FabZK: Supporting 
Privacy-Preserving, Auditable Smart Contracts in Hyperledger Fabric,” 
Proc. - 49th Annu. IEEE/IFIP Int. Conf. Dependable Syst. Networks, 
DSN 2019, pp. 543–555, 2019, doi: 10.1109/DSN.2019.00061. 
[30] Y. Xiao, B. Xu, W. Jiang, and Y. Wu, “The HealthChain Blockchain for 
Electronic Health Records: Development Study,” J. Med. Internet Res., 
vol. 23, no. 1, pp. 1–13, 2021, doi: 10.2196/13556. 
[31] X. Xu, G. Sun, and H. Yu, “An Efficient Blockchain PBFT Consensus 
Protocol in Energy Constrained IoT Applications,” 2021 6th Int. Conf. 
UK-China Emerg. Technol. UCET 2021, pp. 152–157, 2021, doi: 
10.1109/UCET54125.2021.9674967. 
Xu Wu received her Ph.D. degree in Computer 
Science, from the Beijing University of 
Technology, in 2010. She was out of post-
doctoral stations of the MOEKLINNS Lab, 
Department of Computer Science and 
Technology of Xian Jiaotong University in 
2016. From July 2016 to July 2017, she 
worked as a visiting scholar in School of 
Engineering and Technology, Indiana University–Purdue 
University Indianapolis, Indianapolis, USA. Currently, she is an 
associate professor of School of Computer, Electronics and 
Information, Guangxi University. Her research interests include 
trusted computing, pervasive computing, mobile computing, 
and software engineering.  
 
Shuang Wei received the bachelor’s 
degree in Computer Science and 
Technology from Hunan University of 
Technology and Business, Hunan, in 2020. 
She is currently working toward the 
master’s degree in College of Computer and 
Electronic Information, Guangxi University. 
Her main research interests include 
Blockchain, Internet of things and Trust Management.   
 
 Zhen Zhang received the bachelor’s 
degrees in Computer Science and 
Technology from Xi'an University of 
Architecture and Technology, Xi'an, in 
2019. He is currently working toward the 
master’s degrees in College of Computer 
and Electronic Information, Guangxi 
University. His main research interests 
include blockchain, Internet of things and access control. 
 
Pin Lv received the B.S. degree from 
Northeastern University, China, in 2006, and 
the Ph.D. degree in computer science from 
NUDT, China, in 2012. He is currently an 
Associate Professor with the School of 
Computer, Electronics and Information, 
Guangxi University, China. He is also with 
the Guangxi Key Laboratory of Multimedia 
Communications and Network Technology. His research 
interests include wireless networks, mobile computing, and 
artificial intelligence. 
 
This article has been accepted for publication in IEEE Transactions on Network and Service Management. This is the author's version which has not been fully edited and 
content may change prior to final publication. Citation information: DOI 10.1109/TNSM.2023.3236673
© 2023 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:18:08 UTC from IEEE Xplore.  Restrictions apply.