Blockchain-based vehicular collaborative computing
Blockchain-Based Vehicular Collaborative Computing 
Qibin Zheng1, Rongqing Zhang1,2,*, Shengjie Zhao1,* 
{zhengqb_2018@tongji.edu.cn, rongqingz@tongji.edu.cn, shengjiezhao@tongji.edu.cn} 
 
School of Software Engineering, Tongji University, Shanghai 201804, China1 
Shandong Provincial Key Laboratory of Wireless Communication Technologies, Shandong 
University, China2 
Abstract. Collaborative computing among vehicles on the road has been regarded as 
a promising application for connected and intelligent vehicles as new computing and 
communication technologies emerge. Instead of using cloud computing services, a vehicle 
can complete computing-intensive tasks by making use of neighboring vehicles' idle 
computing resources and meanwhile, pay for this service to the assisting vehicles to 
increase their incentive to participate in such collaborative computing tasks. In 
collaborative computing among vehicles, how to balance the profits of both sides need to 
be investigated. What's more, the reliability of transactions is also a concerning problem. 
In this paper, we first introduce a collaborative computing scenario and propose a two-
layer blockchain architecture to enhance the reliability of transactions. Then, we propose 
a coalition formation game-based collaborative computing algorithm to efficiently achieve 
effective computing coalition formation in a distributed manner. Simulation results show 
that the proposed algorithm can significantly improve the vehicles' utilities as well as the 
task performance. 
Keywords: Internet of vehicles, Blockchain, collaborative computing. 
1   Introduction 
With the rapid development of computing and communication technologies, vehicles 
become more intelligent and are expected to support a rich and varied onboard applications, 
such as real-time navigation and vehicular entertainment. On the one hand, vehicles can get a 
precise and broad perception of their driving environment by the growing links with neighboring 
vehicles (vehicle-to-vehicle (V2V) links) or roadside units (vehicle-to-infrastructure (V2I) 
links). On the other hand, vehicles equipped with a more powerful on board computing unit 
(OBU) can perform independent computation better than before. In addition, a recent report 
shows that the global number of connected vehicles is increasing rapidly, and more than 286 
million connected vehicles will be added globally during the 2019-2025 period [1]. These trends 
reflect the growing intelligence and complexity of vehicles. 
Although the vehicles become more capable of computing, some emerging vehicular 
applications, such as augmented reality (AR) and virtual reality (VR), require completing a large 
amount of computations in a relatively short time, which cannot be supported by current 
computing ability of a single vehicle. One promising solution to this problem is to deliver the 
computation-intensive task from the vehicle (called task requesting vehicle) to other objects 
 
* Corresponding authors: Rongqing Zhang and Shengjie Zhao. 
EAI MOBIMEDIA 2020, August 27-28, Harbin, People's Republic of China
Copyright © 2020 EAI
DOI 10.4108/eai.27-8-2020.2294371
 
 
 
 
with higher computing ability through the network to achieve higher performance. The target 
objects can be a cloud center [2], [3]. The cloud center has strong computing ability and can 
effectively reduce the computing overhead of requesting vehicles, but the long distance to a far-
away center will also cause an extra delay. Another kind of target object is the roadside unit 
(RSU) or base station along with edge server which can complete the computation near to 
requesting vehicles [4], [5]. 
Different from the above two cases, a new solution tries to make use of idle resources of 
other vehicles to complete the task. That is, the vehicles around the requesting vehicle accept 
the task together and perform the computation in a collaborative computing way [6]-[10]. In [7], 
a learning-based task offloading framework was proposed using the multi-armed bandit (MAB) 
theory, which enables vehicles to learn the potential task offloading performance of its 
neighboring vehicles with excessive computing resources and minimizes the average offloading 
delay. In [8], a vehicular cloud network architecture was proposed to offload the computational 
burden of a centralized cloud by assigning more tasks to vehicular clouds formed near traffic 
lights. While [7], [8] both only considered the task performance (eg. latency, cost) on behalf of 
the requesting vehicle, [9], [10] further considered the utilization of neighboring vehicles. An 
optimal computation resource allocation scheme was proposed in [9] to maximize the total long-
term expected reward of the overall vehicles. In [10], a novel computation offloading 
marketplace was established in vehicular networks, where a Vickrey–Clarke–Groves based 
reverse auction mechanism was exploited, and a unilateral-matching-based algorithm was 
proposed to implement polynomial computational complexity. 
However, these literature work only consider one side’s interest, lacking in making a 
tradeoff between task performance and utility of neighboring vehicles. What’s more, the 
increasing connectivity and decentralization of vehicular networks pose new challenges to the 
reliability of transactions when vehicles make deals with each other for tasks. It can be possible 
risky to make deal with strange vehicles. Blockchain is a promising technology to guarantee 
transaction reliability among multiple agents in a decentralized manner. To overcome the above 
challenges, we adopt the blockchain technology to create a reliable transaction mechanism for 
collaborative computing process. 
The main contribution of this paper is to propose a two-layer vehicular blockchain 
architecture, which enables the neighboring vehicles to store their transaction records in both 
temporary and permanent manners to enhance the transaction reliability. What’s more, to 
balance both sides’ interests, we further employ the coalition formation game to model such 
a collaborative computing process and propose a distributed computing coalition formation 
algorithm of the vehicles that have the incentive to participate in collaborative computing. 
Simulations results verify the efficiency of our proposed scheme compared with other baselines 
in terms of utility and computing performance. 
The rest of this paper is organized as follows: Section 2 presents the system model. In 
Section 3, we introduce the coalition formation game concepts and then provide the proposed 
algorithm. Section 4 presents the simulation results. Finally, the conclusion is drawn in Section 
5. 
2   System model 
2.1   System architecture  
 
 
 
 
 
As shown in Figure 1, the system architecture consists of the vehicular layer and the edge 
layer. The vehicular layer contains vehicles along the road. These vehicles equipped with OBU 
can perform specific computations and communicate with their neighboring vehicles through 
V2V communication links. The edge layer contains two types of nodes that are placed at the 
edge of the network compared to the cloud center: roadside units (RSUs) and base stations. The 
edge nodes have the stronger computing power and more storage resources than the vehicles. 
They communicate with the vehicles in the vehicular layer through V2I links, which can transfer 
and store the data generated during vehicle driving and interaction. 
 
 
Fig.1. System architecture. 
 
Since the vehicles also have computing capability, it is a feasible and efficient mechanism 
to complete a large computing task through collaborative computing among multiple vehicles. 
Therefore, the vehicles in the vehicular layer are further divided into two types in terms of 
different roles: requesting vehicles and assisting vehicles. The requesting vehicles issue 
computing tasks, whereas the assisting vehicles form coalitions to complete computing tasks in 
a cooperative manner. To ensure the reliability of transactions, a small scale blockchain network 
will be established by the formed vehicle coalition to record transaction data of the collaborative 
computing process. The data recorded on the blockchain include the payment of the requested 
 
 
 
 
task, the vehicle execution records of computing results, and the transactions of payment 
allocation. 
After collaborative computing is completed, the vehicle group is dissolved, and the 
generated blockchain data is uploaded to the edge layer. Nodes at the edge layer also establish 
a blockchain network to permanently store the transactions. 
Another class of data recorded in the permanent blockchain is the trust value of vehicles. 
Trust value reflects the credit conditions of vehicles during a certain period and changes based 
on vehicles’ activities over time. To enhance the reliability, requesting vehicles can set a trust 
value threshold for their tasks, which makes assisting vehicles ignore the ones with low trust 
value during computing coalition formation. 
 
2.2   Computing model  
 
In this paper, we consider a collaborative computing scenario in vehicular networks, where 
there is a requesting vehicle (denoted as 𝑣0) on the road, and 𝑁 nearby vehicles around 𝑣0 in its 
communication range, denoted as the set 𝒩 = {𝑣1, 𝑣2, . . . , 𝑣𝑁} . All these vehicles can 
communicate through V2V links. When 𝑣0  needs to complete a computing task 𝑇𝑎𝑠𝑘𝑣0
, 𝑣0 
sends the request message to the vehicles in the set 𝒩. The content of the request message is 
represented as {𝐴𝑣0
, 𝑇𝑣0
, 𝑅𝑣0
} , where 𝐴𝑣0
 is the computing amount of 𝑇𝑎𝑠𝑘𝑣0
, 𝑇𝑣0
 is the 
completion time limit of 𝑇𝑎𝑠𝑘𝑣0
, and 𝑅𝑣0
 is the reward payment for the completion of the task. 
It is assumed that due to the limitations of 𝐴𝑣0
 and 𝑇𝑣0
, a single vehicle in 𝒩 usually cannot 
complete the whole task alone. To complete the task in time, the minimum computing power 
(denoted as 𝑥0) is: 
 
 𝑥0 =
𝐴𝑣0
𝑇𝑣0
 . (1) 
 
After receiving the message, each vehicle in 𝒩 starts to find nearby vehicles to form the 
coalition for completing the task 𝑇𝑎𝑠𝑘𝑣0
 in a collaborative manner. Let 𝑆 ⊂ 𝒩 be a coalition 
consisting of |𝑆| vehicles. Assume the vehicle 𝑣𝑖 ∈ 𝒩 has the computing power 𝑥𝑖, and the total 
computing power of vehicles in 𝑆 is given by 𝑥𝑆: 
 
 𝑥𝑆 = ∑ 𝑥𝑖𝑣𝑖∈𝑆  . (2) 
 
In order to complete the task in a shorter time, the task payment 𝑅𝑣0
 is designed as a 
function of 𝑥𝑆: 
 
 𝑅𝑣0
=  {
     𝑏 ∙  𝑅0    𝑥𝑆 > 𝑏 ∙  𝑥0
     
𝑥𝑆
𝑥0
∙  𝑅0    𝑥𝑆 ≤ 𝑏 ∙  𝑥0
 .  (3) 
 
where 𝑅0 is the given payment when 𝑆 spends 𝑇𝑣0
 to complete the task (that is, 𝑥𝑆 = 𝑥0). When 
𝑥𝑆 > 𝑥0, the payment keeps increasing until reaching the maximum payment 𝑏 ⋅ 𝑅0. To earn a 
considerable profit, the vehicles in 𝒩 will select suitable partners to form the coalition. The 
profit measurement and the method of selecting will be discussed further in section III. 
Denoted 𝑃 = {𝑆1, 𝑆2, . . . , 𝑆𝑘} is the set consisting of several disjoint coalitions formed by 
the vehicles in 𝒩. 𝑣0 will select the appropriate coalition (or coalitions) from 𝑃 and delegate 
 
 
 
 
the task to it. The selected coalition starts the collaborative computing and records related data 
in the temporary blockchain. When the computing task is completed, the selected coalition will 
allocate the payment 𝑅𝑣0
 to the member vehicles through the blockchain network. The selected 
coalition uploads the data on the temporary blockchain to the permanent blockchain network at 
the edge layer for preservation periodically or before dissolution. 
3   Computing coalition formation algorithm 
To realize efficient coalition formation in a distributed manner, we employ the coalition 
formation game[11] to obtain an effective solution to the above problems, which can not only 
meet the computing requirements of 𝑣0 , but also encourage the vehicles to participate in 
collaborative computing and gain a considerable profit. 
 
3.1   Coalition game concept 
 
Definition 1: Transferable utility v(S). 
𝑢(𝑆): 𝑢(𝑆) is the revenue of the coalition 𝑆 in the game. It represents the reward the whole 
coalition will get by forming this coalition. 
𝑐(𝑆): 𝑐(𝑆) is the cost of the coalition 𝑆 in the game. Coalition formation game theory considers 
the presence of cost in the game. In such an assumption, the coalition will cause some kind of 
cost during the forming operation, e.g., the cost of exchanging information between members. 
𝑣(𝑆): 𝑣(𝑆) is the difference between the revenue and the cost of a coalition which is: 𝑣(𝑆) =
𝑢(𝑆) − 𝑐(𝑆). 𝑣(𝑆) is a real value that can be divided in any manner between the coalition 
members. We will define v(S) for the collaborative computing scenario in section III-B. 
Definition 2: Coalition formation game for the vehicular collaborative computing problem. A 
coalition formation game for the vehicular collaborative computing problem is defined by the 
pair (𝒩, 𝑣) which involves a set of assisting vehicles, denoted by 𝒩 = {1, . . . , 𝑁} who seek to 
form cooperative computing coalitions to compute the tasks. And 𝑣 or 𝑣(𝑆) is the profit of the 
coalition 𝑆. 
Definition 3: A coalition formation game (𝒩, 𝑣) with transferable utility is superadditive if for 
any two disjoint coalitions 𝑆1, 𝑆2 ⊂ 𝒩, 𝑣(𝑆1 ∪ 𝑆2) ≥ 𝑣(𝑆1) + 𝑣(𝑆2). 
Theorem 1: The coalition formation game for the collaborative computing scenario is not 
superadditive. 
Proof: According to the definition of 𝑣(𝑆) in section III-B, if the game is superadditive, then 
the coalition 𝒩  containing all the vehicles will obtain the maximum transferable utility. 
However, due to the second cost item 𝑐2(𝑆) defined in section III-B are growing at second-order 
of coalition size which is faster than the revenue 𝑢(𝑆), so the transferable utility will decrease 
when coalition size surpasses a certain value (the value won’t be big and are reachable in our 
simulation). 
Definition 4: Coalition partition. A partition is defined as the set 𝑃 : = {𝑆1, . . . , 𝑆𝑘}, where 𝑆𝑘 ⊆
𝒩 are mutually disjoint coalitions and ⋃ 𝑆𝑖
𝑘
𝑖=1 = 𝒩. 
Definition 5: Preference order. For any vehicle 𝑣𝑖 ∈ 𝒩, we define preference order ⊳𝑖 as a 
kind of comparison relation, where 𝐵 ⊳𝑖 𝐴 means that 𝑣𝑖 prefers to join coalition 𝐵 instead of 
coalition 𝐴. We use the preference order as follow: 
 
 
 
 
 
 𝐵 ⊳
𝑖
𝐴 ⇔ 𝑥𝐵′ > 𝑥𝐴  and 𝑣(𝐵′) ≥ 𝑣(𝐵) . (4) 
 
where 𝐵′ = 𝐵 ∪ {𝑣𝑖}. This definition means vehicle 𝑣𝑖  prefers to join coalition 𝐵 by leaving 
coalition 𝐴 when the new computing power of 𝐵 will be larger than the origin computing power 
of 𝐴, meanwhile the utility of 𝐵 is not decreasing. 
 
Definition 6: Switch rule. We introduce the simple switch rule as the basic operation of our 
algorithm as follow [12]: 
Switch: 
 
𝐴, 𝐵 → 𝐴 ∖ {𝑣𝑖}, 𝐵 ∪ {𝑣𝑖},
 𝑤ℎ𝑒𝑟𝑒 𝐴 ⊆ 𝒩, 𝐵 ⊆ 𝒩 ∪ ∅, 𝐵 ≠ 𝐴, 𝑣𝑖 ∈ 𝐴,  𝐵 ⊳
𝑖
𝐴 . (5) 
 
Definition 7: Payoff scheme. The coalition 𝑆 needs to divide the utility 𝑣(𝑆) for its members, 
and every vehicle 𝑣𝑖 get its payoff 𝜙𝑖. We use the following division scheme: 
 
 𝜙𝑖 =
𝑥𝑖
𝑥𝑆
⋅ 𝑣(𝑆) . (6) 
 
Definition 8: Partition convergence. A partition 𝑃 is considered convergence if for any 𝐴 ∈
𝑃, 𝐵 ∈ 𝑃 ∪ ∅ and 𝐵 ≠ 𝐴, no 𝑣𝑖 ∈ 𝐴 satisfying 𝐵 ⊳𝑖 𝐴 exists. 
 
3.2   Transferable utility of the computing coalition 
 
In this section, we design the transferable utility mentioned in section III-A for coalition 
formation game of collaborative computing. 
The revenue for forming coalition 𝑆 is defined as 𝑅𝑣0
, that is: 
 
 𝑢(𝑆) = 𝑅𝑣0
 . (7) 
 
In addition to getting paid, 𝑆 also generates some overhead, including computing cost and 
communication cost. The computing cost is defined as: 
 
 𝑐1(𝑆) = ∑ 𝑥𝑖𝑣𝑖∈𝑆 ∗ 𝑇𝑆 ∗ 𝑝𝑖   (8) 
 
where 𝑇𝑆 is the real computing time of 𝑆 which is defined as: 
 
 𝑇𝑆 =  {     
𝐴𝑣0
𝑥𝑆
     𝑖𝑓 𝑥𝑆 > 𝑥0
𝑇𝑣0
      𝑜𝑡ℎ𝑒𝑟𝑤𝑖𝑠𝑒
   (9) 
 
and 𝑝𝑖  is the unit computing cost of vehicle 𝑣𝑖 (such as the power consumption per unit time of 
CPU). 
In the process of forming a coalition, vehicles need to transfer messages directly or by using 
blockchain, which brings communication overhead. The amount of the communication 
overhead is related to the size of the coalition and the distance among the vehicles. It is 
represented by 𝑐2(𝑆) and 𝑐3(𝑆), respectively: 
 
 
 
 
 
 𝑐2(𝑆) = 𝛼 ⋅ |𝑆|2  (10) 
 
where 𝛼 is a weight factor and |𝑆| is the size of the coalition 𝑆. 
 
 𝑐3(𝑆) = 𝛽 ⋅ 𝑚𝑎𝑥
𝑣𝑖,𝑣𝑗∈𝑆
𝑑(𝑣𝑖 , 𝑣𝑗)  (11) 
 
where 𝛽 is a weight factor, and 𝑑(𝑣𝑖 , 𝑣𝑗) is the distance between 𝑣𝑖 and 𝑣𝑗 in coalition 𝑆. 
From the above formulas (7) - (11), the utility of the coalition is obtained: 
 
 𝑣(𝑆) = 𝑢(𝑆) − 𝑐1(𝑆) − 𝑐2(𝑆) − 𝑐3(𝑆) . (12) 
 
Due to 𝑐2(𝑆) and 𝑐3(𝑆) increasing when the coalition expands, forming a grand coalition 
may not be the solution with maximum 𝑣(𝑆), and the vehicles in 𝒩 will form several disjoint 
coalitions instead. 
 
3.3   Coalition formation algorithm 
 
Instead of using an optimal centric algorithm, we adopt a distributed algorithm that consists 
of two phases as shown in Table 1. During the first phase, the vehicles perform switch 
operations in a random way and form coalitions until no more switch operation can happen, and 
then the partition 𝑃  reaches a convergence. In the second phase, 𝑣0  selects the appropriate 
coalition (or coalitions) from 𝑃. In most cases, the coalition with maximum computing power 
will be chosen to execute the task to minimize the latency. However, sometimes no coalition in 
𝑃 can provide computing power more than 𝑥0, then 𝑣0 will choose more coalitions to guarantee 
the sum of computing power to be greater than the required threshold 𝑥0. In such a case, 𝑣0 
needs to divide the whole task into several subtasks and deliver them to different coalitions. 
Compared with the no-task-division case, 𝑣0 has to coordinate and mix together the work of 
more coalitions which may bring extra cost and increase the risk for damaging the performance 
of the task. In the task-division case, the reward for each coalition is calculated with a punishing 
factor: 
 
 𝑅𝑣0,𝑆𝑖
′ =
𝑥𝑆𝑖
∑ 𝑥𝑆𝑘𝑆𝑘∈𝐹
⋅ 𝑅𝑣0,𝑆𝑖  . (13) 
      
where 𝑅𝑣0,𝑆𝑖
 is the origin reward of coalition 𝑆𝑖 according to (3). The punishing factor considers 
the contribution of 𝑆𝑖 to the set 𝐹. After completing the task, the coalition divides its utility to 
the vehicles within as described in Definition 7. 
4   Simulation results 
In our conducted simulations, vehicle 𝑣0 is placed at the center of a 100 m × 10 m road, 
and the other vehicles are placed randomly on the road. The number of assisting vehicles 𝑁 
varies from 5 to 15 in the experiment. For each value of 𝑁, we run the simulation for 150 times 
and take the average of the results (utility or computing power described below) as the final 
value. The other simulation parameters are listed in Table 2. 
 
 
 
 
Table 1.  Coalition formation algorithm. 
Initialize the vehicles are non-cooperative. The partition of the network is 𝑃 =
{𝑣1, 𝑣2, . . . , 𝑣𝑁}. 
 
Phase I - coalition formation: 
1 repeat 
2 randomly select coalition 𝐴, 𝐵 and 𝑣𝑖, where 𝐴 ∈ 𝑃, 𝐵 ∈ 𝑃 ∪ ∅, 
3 𝐵 ≠ 𝐴, 𝑣𝑖 ∈ 𝐴. 
4 if 𝐵 ⊳𝑖 𝐴 then 
5 𝑃 = 𝑃 ∖ {𝐴, 𝐵} ∪ {𝐴 ∖ {𝑖}, 𝐵 ∪ {𝑖}}. 
6 until 𝑃 reach convergence. 
7 suppose now 𝑃 = {𝐴1, 𝐴2, . . . , 𝐴𝐾}. 
 
Phase II - coalition selection: 
8 ∅ → 𝐹. 
9 sort 𝑃 and get 𝑃 = {𝐵1, 𝐵2, . . . , 𝐵𝐾}, where 𝑥𝐵𝑖
> 𝑥𝐵𝑗
 if 𝑖 < 𝑗. 
10 if 𝑥𝐵1
> 𝑥0 then 
11 {𝐵1} → 𝐹. 
12 else 
13 find k where ∑ 𝑥𝑆𝑖
𝑘
𝑖=1 >= 𝑥0 and ∑ 𝑥𝑆𝑖
𝑘−1
𝑖=1 < 𝑥0. 
14 {𝐵1, . . . , 𝐵𝑘} → 𝐹. 
15 𝑣0 delegate 𝑇𝑎𝑠𝑘𝑣0
 to 𝐹. 
16 𝐹 completes the task and divide the utility. 
 
 
Table 2.  Simulation parameters. 
Parameters Values 
Task Computing Amount 𝐴𝑣0
 100 unit 
Basic Reward 𝑅𝑣0
 200 unit 
Maximum Reward Ratio 𝑏 1.65 
Minimum Task Computing Power 𝑥0 192 unit 
Cost Weight for Coalition Size 𝛼 3 
Cost Weight for Vehicles' Distance 𝛽 6 
Computing Power of Assisting Vehicle 𝑥𝑖 generated randomly 
between 48-80 unit 
Unit Computing Cost 𝑝𝑖 generated randomly 
between 0.1-0.15 unit 
 
We will compare our coalition formation game-based algorithm (denoted as CF) with two 
baseline schemes as follows: 
1) Maximum utility scheme (MU). This scheme searches the coalition with maximum utility 
by using the exhaustive method. However when the number of vehicles is relatively small (𝑁 =
5 or 6), the coalition with maximum utility can’t provide computing power more than 𝑣0 which 
is similar to our proposed scheme. At this time, 𝑣0 also selects more coalitions beside the one 
before to fulfill the requirement. 
 
 
 
 
2) Nearest selection scheme (NS). This scheme sorts the vehicles by the distance to 𝑣0 and 
selects the nearest ones whose total computing power is more than 𝑥0. To improve the utility, it 
will keep adding new vehicles in the selection until the utility of the coalition begins to decrease. 
 
 
Fig.2. A snapshot example of coalition formation. 
 
Figure 2 shows a snapshot of a network with 10 assisting vehicles. By using the coalition 
formation game-based algorithm, the vehicles form three coalitions in this example. The utility 
and computing power are shown in Table 3. 𝑣0  will select coalition 3 because it has the 
maximum computing power and satisfies the requirement of 𝑥0. 
 
Table 3.  Coalition parameter result. 
 Coalition 1 Coalition 2 Coalition 3 
Utility 103.80 109.68 101.37 
Computing Power 216.14 173.39 218.25 
 
Figure 3 compares the utilities of the selected coalition(s) generated by three different 
schemes. From Figure 3, we can find that the utility obtained by CF is very close to the one by 
MU, which indicates that CF can guarantee the assisting vehicles getting well paid from the task. 
Moreover, we can also see that NS performs much worse than CF and MU. This is because NS 
forms the coalition in a greedy manner to get enough computing power which includes “join 
operation” only and does not include “leave operation”. 
 
In Figure 4, the computing power of the three schemes are compared. We can find that the 
computing power of CF and MU are close when 𝑁 varies from 5 to 10, and then CF begins to 
perform better than MU. This is because when 𝑁 is relatively small, CF often finds the optimal 
coalition with the maximum utility which is the same as MU, and sometimes MU even gets 
better results by exhaust search (both the utility and computing power are higher) which reduces 
the difference between CF and MU. But As 𝑁 keeps growing, CF can perform better by seeking 
greater computing power at an acceptable cost of utility. It indicates that CF can reach better or 
at least the same task performance compared with MU. And we also have that NS performs 
better than CF and MU when 𝑁 is 5 or 6. This is because NS tries to gather enough computing 
 
 
 
 
power without considering utility at first, and may form the larger coalition which is hard for 
CF and MU when 𝑁 is relatively small. 
 
 
Fig.3. The utility of selected coalition(s). 
 
Fig.4. The computing power of selected coalition(s). 
 
 
 
 
 
5   Conclusions 
In this paper, we constructed a two-layer blockchain architecture suitable for reliable 
collaborative computing among vehicles. We proposed a coalition formation game-based 
algorithm to seek the appropriate vehicles for collaborative computing, so as to make a tradeoff 
between task performance and system utility of vehicles. Simulation results show that our 
algorithm reaches a good performance close to the exhaustive search method. 
 
Acknowledgments. This work is supported in part by the National Key Research and 
Development Project under Grant 2017YFE0119300, 2019YFB2102300 and 
2019YFB2102301, in part by the National Natural Science Foundation of China under Grant 
61936014 and 61901302, in part by the Scientific Research Project of Shanghai Science and 
Technology Committee under Grant 19511103302, in part by the open research fund from 
Shandong Provincial Key Laboratory of Wireless Communication Technologies (No. 
SDKLWCT-2019-02), and in part by the Fundamental Research Funds for the Central 
Universities (China).  
 
References 
[1] Madhok, A.: Global connected car revenues to grow five-fold by 2025. 
https://www.counterpointresearch.com/connected-car-revenues-grow-five-fold-2025 (2019) 
[2] Ashok, A.; Steenkiste, P.; Bai, F.: Adaptive cloud offloading for vehicular applications. Vehicular 
Networking Conference IEEE. pp. 1-8 (2016) 
[3] Matzakos, P.; H ärri, J.; Villeforceix, B.; et al.: An ipv6 architecture for cloud-to-vehicle smart 
mobility services over heterogeneous vehicular networks. International Conference on Connected 
Vehicles and Expo (ICCVE), pp. 767–772 (2014) 
[4] Wang, J.; Feng, D.; Zhang, S.; et al.: Computation offloading for mobile edge computing enabled 
vehicular networks. IEEE Access. vol. 7, pp. 62624-62632 (2019) 
[5] Zhao, J.; Li, Q.; Gong, Y.; et al.: Computation offloading and resource allocation for cloud assisted 
mobile edge computing in vehicular networks. IEEE Transactions on Vehicular Technology. vol. 68, 
no. 8, pp. 7944-7956 (2019) 
[6] Whaiduzzaman, M.; Sookhak, M.; Gani, A.; et al.: A survey on vehicular cloud computing. Journal 
of Network and Computer applications. vol. 40, pp. 325-344 (2014) 
[7] Sun, Y.; Guo, X.; Zhou, S.; et al.: Learning-based task offloading for vehicular cloud computing 
systems. IEEE International Conference on Communications (ICC). pp. 1–7 (2018) 
[8] Alahmadi, A. A.; Lawey, A. Q.; El-Gorashi, T. E. H.; et al.: Distributed processing in vehicular 
cloud networks. International Conference on the Network of the Future (NOF). pp. 22–26 (2017) 
[9] Zheng, K.; Meng, H.; Chatzimisios, P.; et al.: An SMDP-Based Resource Allocation in Vehicular 
Cloud Computing Systems. IEEE Transactions on Industrial Electronics. vol. 62, no. 12, pp. 7920-
7928 (2015) 
[10] Liwang, M.; Dai, S.; Gao, Z.; et al.: A truthful reverse-auction mechanism for computation 
offloading in cloud-enabled vehicular network. IEEE Internet of Things Journal. vol. 6, no. 3, pp. 4214-
4227 (2019) 
[11] Saad, W.; Han, Z.; Debbah, M.; et al.: Coalitional game theory for communication networks. 
IEEE Signal Processing Magazine. vol. 26, no. 5, pp. 77-97 (2009) 
[12] Zhao, N.; Wu, H.; Chen, Y.: Coalition game-based computation resource allocation for wireless 
blockchain networks. IEEE Internet of Things Journal. vol. 6, no. 5, pp. 8507-8518 (2019) 
	Word 书签
	introduction
	OLE_LINK19
	OLE_LINK20
	公式3
	us
	cs
	vs
	公式7
	公式11
	Computing_Power_of_Selected_Coalition(s)
	Utility_of_Selected_Coalition(s)
	ref-8251215
	refs
	ref-7835966
	ref-8489932
	ref-connected-car-revenues-grow
	ref-7297654
	ref-5230848
	OLE_LINK11
	ref-8422661
	ref-8712145
	ref-whaiduzzaman2014survey
	ref-8745530
	ref-7277060