Fee-Free Pooled Mining for Countering Pool-Hopping Attack in Blockchain
Fee-Free Pooled Mining for Countering
Pool-Hopping Attack in Blockchain
Hongwei Shi , Shengling Wang , Senior Member, IEEE, Qin Hu, Xiuzhen Cheng , Fellow, IEEE,
Junshan Zhang , Fellow, IEEE, and Jiguo Yu , Senior Member, IEEE
Abstract—The pool-hopping attack casts down the expected profits of both themining pool and honest miners in Blockchain. The
mainstream countermeasures, namely PPS (pay-per-share) and PPLNS (pay-per-last-N-share), can hedge pool hopping but need to
chargeminers some fees when they join in a pool. Obviously, the higher fee charged, the higher cost of joining the pool, the lessmotivation
of aminer tomine in the pool. In this article, we apply the zero-determinant (ZD) theory to design a novel pooledmining which offers an
incentivemechanism for motivatingminers not to switch in pools strategically by economicmeanswithout fee charged. In short, the
proposed pooledmining has three unique features: 1) fee-free. No fee is charged if theminer does not hop, 2)wide applicability. It can be
employed in both prepaid and postpaidmechanisms, and 3) fairness. Even can dominate the gamewith anyminer, a pool has to cooperate
when aminer does not hop among pools, implying that the pool cannot squeeze the honestminers financially. The fairness of our scheme
makes it have long-term sustainability. Both theoretical analyses and numerical simulations demonstrate the effectiveness of our scheme.
Index Terms—Pooled mining, pool-hopping attack, zero-determinant theory, incentive mechanism
Ç
1 INTRODUCTION
BLOCKCHAIN is the underlying fabric of mainstream crypto-
currency systems such as Bitcoin [1] and Ethereum [2].
These cryptocurrencies have obtained a phenomenal success
[3], [4], [5], recognized as thewave of future [6] with a totalmar-
ket capitalization around 179.6B dollars at present. To realize
a distributed and trustable consensus, Blockchain is intro-
duced as a public ledger, including a sequence of chained
blocks with each recording a set of digital transactions. Since
anyone can participate in creating and verifying blocks, Block-
chain system is open, leading to its vulnerability.
To deter attacks incurred by the openness of Blockchain
system which essentially originates from its decentralized
nature, a Proof-of-Work (PoW) [1] mechanism is employed.
PoW undoubtedly increases the cost of malicious behavior,
makingmany security attacks such as Sybil attack financially
unaffordable. This is because 1) mining is actually a race
where only the winner who solves the PoW task first can ver-
ify digital transactions, which needs a sufficient amount
of computational power; 2) solving cryptographic puzzles
is a probabilistic process, implying that no one would win
the race with certainty even though it is computationally
powerful.
In return for mining blocks successfully, miners are
rewarded in proportion to the computational powers they
invested. However, due to significant computational resour-
ces needed and probabilistic factors involved in the mining
process, a solo miner has low expected revenue as well as
high volatility in the reward. For example, Bitcoin system
now sets the difficulty of mining such that one block is gen-
erated every 10 minutes. Hence, a solo miner often has to
wait 687 days in expectation to mine a block [7].
To tackle the above issue, solo miners join coalitions in the
form of mining pools, gathering their computational powers
to seek the solution of PoW puzzles and sharing the rewards
proportionally to their contributions. This undoubtedly
increases the chance of solving cryptographic puzzles suc-
cessfully and makes the mining process more predictable.
Hence, pooled mining can benefit miners from high payoffs
and low variance in rewards. At present, nearly 80 percent of
the computing power in Bitcoin and 60 percent of that in
Ethereum belong to less than 8 and 3 mining pools,
respectively.
The dominant position of pooled mining leads it to
become a valuable target to be attacked. Many pools have
an open trait, allowing any miner to join them through pub-
lic Internet interfaces [8], which makes matters worse. Such
a nature of openness makes pooled mining susceptible to
attacks. There are mainly three kinds of security attacks in
pooled mining: the selfish mining attack [9], [10], [11], the
block withholding attack [8], [12], [13] and the pool-hopping
� Hongwei Shi and Shengling Wang are with the School of Artificial Intelli-
gence, Beijing Normal University, Beijing 100875, China.
E-mail: hongweishi@mail.bnu.edu.cn, wangshengling@bnu.edu.cn.
� Qin Hu is with the Department of Computer and Information Science,
Indiana University - Purdue University Indianapolis, Indianapolis, IN
46202 USA. E-mail: qinhu@iu.edu.
� Xiuzhen Cheng is with the Department of Computer Science, George
Washington University, Washington, DC 20052 USA. E-
mail: cheng@gwu.edu.
� Junshan Zhang is with the School of Electrical, Computer and Energy
Engineering, Arizona State University, Tempe, AZ 85287 USA.
E-mail: junshan.zhang@asu.edu.
� Jiguo Yu is with the School of Computer Science and Technology, Qilu
University of Technology (Shandong Academy of Sciences), Jinan 250353,
China , and also with the Shandong Computer Science Center (National
Supercomputer Center in Jinan), Jinan 250014, China.
E-mail: jiguoyu@sina.com.
Manuscript received 9 Dec. 2019; revised 28 June 2020; accepted 24 Aug. 2020.
Date of publication 4 Sept. 2020; date of current version 9 July 2021.
(Corresponding author: Shengling Wang.)
Digital Object Identifier no. 10.1109/TDSC.2020.3021686
1580 IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 18, NO. 4, JULY/AUGUST 2021
1545-5971 © 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tps://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-6854-7385
https://orcid.org/0000-0001-6854-7385
https://orcid.org/0000-0001-6854-7385
https://orcid.org/0000-0001-6854-7385
https://orcid.org/0000-0001-6854-7385
https://orcid.org/0000-0002-6698-3623
https://orcid.org/0000-0002-6698-3623
https://orcid.org/0000-0002-6698-3623
https://orcid.org/0000-0002-6698-3623
https://orcid.org/0000-0002-6698-3623
https://orcid.org/0000-0001-5912-4647
https://orcid.org/0000-0001-5912-4647
https://orcid.org/0000-0001-5912-4647
https://orcid.org/0000-0001-5912-4647
https://orcid.org/0000-0001-5912-4647
https://orcid.org/0000-0002-3840-1753
https://orcid.org/0000-0002-3840-1753
https://orcid.org/0000-0002-3840-1753
https://orcid.org/0000-0002-3840-1753
https://orcid.org/0000-0002-3840-1753
https://orcid.org/0000-0001-6451-1158
https://orcid.org/0000-0001-6451-1158
https://orcid.org/0000-0001-6451-1158
https://orcid.org/0000-0001-6451-1158
https://orcid.org/0000-0001-6451-1158
mailto:hongweishi@mail.bnu.edu.cn
mailto:wangshengling@bnu.edu.cn
mailto:qinhu@iu.edu
mailto:cheng@gwu.edu
mailto:junshan.zhang@asu.edu
mailto:jiguoyu@sina.com
attack [14]. The first two attacks can be well solved through
the state-of-the-art approaches [10], [11], [12], [13], [15], and
hence, we focus on the pool-hopping attack.
The pool-hopping attack was first proposed by Rosenfeld
[14], in which the malicious miners strategically switch
among the pools to obtain a higher payoff. This attack is
cost-efficient and straightforward because of no more extra
operations (e.g., keeping the block secret, dropping full
proof of work or forking) needed. Studies have proved that
a miner has no incentive to stay in a pool without pool hop-
ping or redistributing the computing power [7], [12], [15].
As estimated in [14], a hopper can obtain a higher payoff up
to nearly 28 percent, depending on the ratio between the
hashrates of hoppers and honest miner in a pool. Pool hop-
ping definitely casts down the mining power of a pool,
resulting in its declined expected revenue. In addition, the
pool-hopping attack also jeopardizes the interests of honest
miners, who join in a pool continuously without switching
to other pools. According to [14], honest miners in the
attacked pool will receive 43 percent less payoff in the
worst-case theoretically, which is unfair for them.
However, little research has studied the pool-hopping
attack. PPS and PPLNS [14] are pioneer countermeasures.
Considering that the unbalanced distribution of reward over
time makes room for miners’ strategic hopping, the key idea
of PPS and PPLNS is reducing the variance of reward in time
series. Typically, in a PPS pool, a miner will be rewarded as
long as she submits a share (her contribution) to the pool,
regardless of whether a block is mined successfully or not
(we denote the pool as “he” and the miner as “she” for easy
differentiation in this paper). PPLNS, one of themost prevail-
ing reward mechanisms [16], drops the concept of “round”,
focusing on N shares submitted to the pool recently and dis-
tributing rewards according to the shares in proportion.
Essentially, the difference between PPS and PPLNS lies
in that the former is driven by events while the latter is trig-
gered by time. In detail, PPS rewards a miner once the event
of receiving her share happens; PPLNS evaluates whether a
miner should be awarded when the paying time arrives.
The common feature of PPS and PPLNS is that they pay
miners proportionally to their contribution, regardless of
whether a block is mined successfully or not. Due to the
uncertainty of mining results, the pool takes the full risk
when no block is mined. Therefore, both PPS and PPLNS
charge miners some fees when they join in a pool to allevi-
ate such a risk, which also increases the hopping cost so as
to further resist the pool-hopping attack. Obviously, the
higher the fee, the higher the cost of the miner joining in the
pool, and the smaller the motivation to mine and vice versa.
In a nutshell, the mainstream countermeasures to the
pool-hopping attack, namely PPS and PPLNS, pose a risk
to the pool as well as the cost to miners. Therefore, we pro-
pose a hopping-proof pooled mining with free fee in this
paper, which can hedge pool hopping without any fee
charged if the miner does not switch in pools strategically.
The proposed pooled mining strategy has a wide scope of
application since it can be employed in both prepaid and
postpaid mechanisms. The former rewards once share is
submitted, no matter whether there is a success mining or
not; the latter awards only when the full cryptographic
puzzle is solved.
It is challenging to realize the hopping-proof pooled min-
ing without fee charged. The reasons behind the fact are: a)
the strategic transferring among different pools is the
instinctive demand of a miner. Especially when no fee is
charged, costless hopping easily arouses miners to switch
among pools; b) in the postpaid mode, mining risk is
completely transferred from the pool to miners. In this situ-
ation, it is non-trivial to motivate miners to still work with-
out hopping.
To tackle these challenges, we take advantage of the zero-
determinant (ZD) theory to design an incentive mechanism
for pooled mining, where cooperation (i.e., mining without
hopping) is the dominant strategy of a rational miner in all
situations. The ZD theory was first developed in [17] by
Press and Dyson, in which the player who adopts the ZD
strategy (i.e., the ZD adopter) can unilaterally set its
adversary’s utility no matter what strategy the adversary
takes. The power of the ZD strategy endows the pool to
dominate the game with any miner, rewarding her coopera-
tion and punishing the defection, to lure the cooperation of
the miner.
The main contributions of this paper can be summarized
as follows:
� The interaction between the pool and any miner is
formulated as an iterated prisoner’s dilemma (IPD)
game and the corresponding conditions are also
identified. The generality of our model empowers
the proposed pooled mining to have a wide scope of
application, implying that it is suitable to both pre-
paid and postpaid mechanisms. When applied in a
postpaid mechanism, the proposed pooled mining
can incentivize miners to work without hopping
while keeping the pool away from the risk of no
block mined successfully.
� We investigate in detail whether the pool can be a
ZD adopter and how he plays the ZD strategy. We
draw a conclusion that the pool can unilaterally con-
trol the miner’s payoff rather than his own one. The
specific expected payoff of a miner that the pool can
set is characterized.
� An incentive mechanism based on the ZD theory is
proposed for motivating miners to work without
hopping. Specifically, the proposed mechanism
empowers the pool to encourage the miner to behave
cooperatively by increasing her short-term payoff
without any additional payment in the long run.
� Both theoretical analyses and simulations demon-
strate the effectiveness of the proposed incentive
mechanism. More importantly, we find the proposed
pooled mining is fair, implying that even the pool
can dominate the game with any miner, he has to
cooperate when the miner works collaboratively.
The fairness of our scheme makes it have long-term
sustainability.
The rest of the paper is organized as follows. The related
literatures are listed in Section 2. Section 3 describes the for-
mulation of our problem. The ZD strategy for the pool in an
iterated prisoner’s game is deduced in Section 4. Based on
which, we propose an incentive mechanism in light of the
ZD theory in Section 5. We evaluate the mechanism both
SHI ET AL.: FEE-FREE POOLED MINING FOR COUNTERING POOL-HOPPING ATTACK IN BLOCKCHAIN 1581
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
theoretically in Section 6 and experimentally in Section 7.
Section 8 concludes our paper finally.
2 RELATED WORK
At present, the researchers mainly focus on three kinds of
security attacks in pooled mining: the selfish mining attack,
the block withholding (BWH) attack and the pool-hopping
attack.
In detail, a selfish mining attacker [18] keeps its mined
block secret and intentionally forks the main blockchain.
Specifically, the selfish miner mines on its private branch
instead of working on the public chain as the honest miners.
When the public ledger approaches it’s private chain, the
selfish miner advertises its concealed chain to the public,
leading to wasting resources of the honest miners on resolv-
ing cryptopuzzles which ends up gaining no rewards. Sev-
eral defense mechanisms have been proposed to block this
selfish manner as well as its variants. For example, Saad et al.
[10] introduced the notion of truth state for every block and a
novel parameter named expected transaction confirmation
height in each transaction to detect selfish mining attack.
Additionally, they proposed a new defensive algorithm to
enforce miner’s fair mining by continuously checking the
length of transaction confirmation height and block publish-
ing height. Without any additional modification, Zhang et al.
[11] presented a backward-compatible defense mechanism
fighting for selfish mining attack which neglects the
untimely released blocks but concentrates more on the incor-
porate links to competing blocks of their predecessors.
The BWH attackers pretend to devote their computational
capabilities into the target pool and then obtain payoffs. How-
ever, they send only partial proof of work, not full proof of
work, resulting in reward reduction to other miners in the
pool. This kind of attack was first proposed in [14], after
which, Courtois et al. [19] summarized its concept and Eyal
modeled the confrontation between the pools as a prisoner’s
dilemma in [8]. Specifically, in [8], a Nash equilibrium was
established, where the rational pools would attack each other,
resulting in a lose-lose situation. Besides, the pools are
trapped into an iterative prisoner’s dilemma, in which the
pool chooses to attack or not is the so calledminer’s dilemma.
Ongoing researches on avoiding this attack have proposed
some efficient and cheap defense mechanisms. For example,
Bag et al. [12] brought in two mechanisms to effectively
defend it, the cryptocurrency commitment scheme and the
hash function scheme. Both of the mechanisms are capable of
protecting pools from misbehaved miners by distinguishing
between a partial proof of work and a full proof of work. Con-
sidering that existing studies stress solely on the pure and
equal strategy of conventional game, Hu et al. [13] analyzed
the ZD strategy that may be utilized in block withholding
attack between two pools. Based on which, different condi-
tions for the pools playing the ZD strategy individually and
simultaneously have been demonstrated comprehensively. In
addition, a novel computational power splitting (CPS) game
is established by Luu et al. [15], where they found the popular
pool protocols are insecure when facing the block withhold-
ing attack. They initiated several public proposals to mitigate
this attack and leftmore room for further investigation.
We focus on the pool-hopping attack in this work. The
pool-hopping attack was first proposed by Rosenfeld [14],
in which the malicious miners strategically switch among
pools to obtain a higher payoff. In particular, pool-hopping
denotes the malfeasance of malicious miners (or named by
attackers, hoppers, adversaries) to mine in a pool only
when the pool pays well and leave to join in other pools
when it is not the case. As such, the hoppers can earn more
from different pools than the honest ones who contribute
their mining power consistently into one pool.
Technical speaking, to launch the pool-hopping attack
successfully, the attacker needs to scrutinize the reward
mechanism of each pool to figure out which pool pays well
during which period of time for easy differentiation of hop-
ping preferences. Since reward mechanisms are quite stable
in each pool, such kind of examination can be derived
straightforwardly and costlessly compared with other kinds
of attacks, such as selfish mining attack, block withholding
attack and forking attack, since no more extra operations
(e.g., keeping the block secret, dropping full proof of work
or forking) are needed.
Studies have proved that a miner has no incentive to stay
in a pool without pool hopping or redistributing the com-
puting power [7], [15]. The cooperation game constructed in
[7] depicts that any arbitrary reward allocation mechanism
creates an incentive for miners to give up the current pool
and participate in others to increase the corresponding
expected reward, verifying the effectiveness and inevitabil-
ity of such a hopping behavior. Note that the hoppers may
strategically jump among pools during various periods,
they can also perform such kind of attack by cunningly
splitting and redistributing their mining powers into differ-
ent pools. In [15], Luu et al. analyzed the aforementioned
malicious actions as a power splitting game, based on
which, they derived the optimal strategies for such a player
to maximize its utility. Consequently, this kind of greedy
and opportunistic manner definitely casts down the mining
power of a pool, resulting in its declined expected revenue.
Pioneer countermeasures for the pool-hopping attack are
PPS, PPLNS and their variants, including the Slush’s method,
maximum pay-per-share (MPPS), and pay-once-PPLNS.
Detailedly, the pool manager can calculate the score of each
share based on the exponential score function s ¼ e
T
c , inwhich
s represents the score of the share given in time T and c
denotes the scaling parameter. Due to the share’s score, the
pool hopping behavior can be alleviated in mining pools by
reducing the score of shares at the earlier stage of the round
while increasing the score of shares later on. Such kind of
score-based method is recognized as the Slush’s method and
has been applied in the mining pools such as Slushpool [20].
Besides, in the maximum pay-per-share method, two balan-
ces are kept for each miner, that is, a PPS balance and a pro-
portional balance [14]. To be specific, if the miner offers a
share, her PPS share balance is increased as if the pool is a PPS
pool.When the pool generates a block, the proportional balan-
ces of theminers are increased as if they have joined a propor-
tional pool. Based onwhich, the reward paid for eachminer is
the minimum between the PPS balance and the proportional
balance. In pay-once-PPLNS, every share is rewarded at most
once [14]. In other words, the share is deleted after it is paid,
leading a higher probability to the elder shares to be paid for
1582 IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 18, NO. 4, JULY/AUGUST 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
future blocks. If a share is partially paid, it will be deleted par-
tially. However, theoretical analysis on the above mecha-
nisms are lacking and their effectiveness in preventing pool-
hopping attacks still remain an open issue [21].
3 GAME FORMULATION
In this section, we introduce our game model to formulate
the interaction between the pool and the miner. Generally,
we define the strategy space of each player as a dichoto-
mous space, namely cooperation (c) and defection (d). In the
PoWmining scenario, the pool is considered as a cooperator
if he decides to pay the highest payoff to the miner; other-
wise, he is regarded as a defector. On the other hand, the
miner can devote herself wholeheartedly to the current pool
by providing her total computational power to the pool
without hopping, defined as cooperation, or contribute her-
self halfheartedly through offering partial computing ability
or switching to other pools strategically, denoted by defec-
tion. We denote the actions of the pool and the miner as
x; y 2 fc; dg, respectively. Therefore, there are four possibili-
ties of states in each round between the pool and the miner,
i.e., XY ¼ ðcc; cd; dc; ddÞ, where X and Y denote the state of
the pool and that of the miner, respectively. It is worth to
note that the terminal of a mining round mentioned in our
model can be defined as the time a block is mined success-
fully or the paying time similar to that in PPLNS. Hence, the
proposed scheme can be applied in both prepaid and post-
paid mechanisms.
Each state will correspond to specific payoffs for both
players, which can be derived as follows:
� if both the pool and the miner are collaborative with
the pool providing the highest payoff and the miner
offering her entire computing power to the current
pool, the payoffs of them are represented as Kp and
Km, respectively;
� when the miner defects while the pool cooperates,
the miner will get an increase of s > 0 based on her
original payoff Km, while the pool may obtain a
decrease of p > 0 onKp;
� in the case that the defective pool plays against a
cooperative miner, the payoff of the pool increases
by m > 0, while the miner receives a loss of r > 0;
� when both players behave maliciously, the payoffs of
the pool and the miner areKp � pþ m andKm þ s �
r, respectively.
Subsequently, the payoff vectors of the pool, denoted as
Sp ¼ ðSxy
p Þ, and the miner, denoted as Sm ¼ ðSxy
m Þ, x; y 2
fc; dg, can be presented as follows:
Sp ¼ ðScc
p ; S
cd
p ; Sdc
p ; Sdd
p Þ ¼ ðKp;Kp � p; Kp þ m; Kp � pþ mÞ;
Sm ¼ ðScc
m; S
cd
m ; Sdc
m ; Sdd
m Þ ¼ ðKm;Km þ s; Km � r;Km þ s � rÞ;
which are also shown in Table 1.
Next, some insightful theorems are introduced to charac-
terize the game in the following.
Theorem 3.1. If p > m; r > s;m < r; s < p, a prisoner’s
dilemma (PD) game can be modeled to depict the confrontation
between the pool and the miner.
Proof. To become a PD game, two fundamental conditions
should be satisfied. In detail, 1) the stable state occurs
when both players defect, i.e., XY ¼ dd is the Nash equi-
librium; 2) mutual cooperation is the best outcome with
respect to the social welfare, which means XY ¼ cc out-
performs other states from an overall perspective.
The game between the pool and the miner satisfies the
first condition. To be specific, if the miner is friendly, the
pool will get a lower payoff as Kp when he cooperates
than his payoff of Kp þ m when he defects; besides, if the
pool challenges with a malicious miner, the payoff when
he defects, i.e., Kp � pþ m, is also larger than that of his
cooperation, i.e., Kp � p. Thus, as a rational decision
maker, the pool will always choose to defect rather than
cooperation when facing an adversary with uncertain
actions. With similar analysis, we can find the only feasi-
ble option for a rational miner is also to behave viciously.
Accordingly, both the pool and the miner will select
defection as the stable state. Therefore, the Nash equilib-
rium of this game comes to beXY ¼ dd:
In order to investigate the second condition clearly,
we denote the social welfare in each state as Wcc; Wcd;
Wdc and Wdd. Thus, we have Wcc ¼ Kp þKm, Wcd ¼
Kp þKm þ s � p, Wdc ¼ Kp þKm � rþ m, and Wdd ¼
Kp þKm þ s þ m� r� p. Then the second condition is
satisfied when Wcc > Wcd;Wcc > Wdc;Wcc > Wdd hold.
It is obvious that when p > m; r > s;m < r; s < p, the
above inequalities can be satisfied. Based on the analyses
above, as self-regarding players, the pool and the miner
will choose malicious behavior to maximize their pay-
offs, leading to mutual defection as the stable state in the
game consequently. However, the most favorable out-
come of the confrontation turns out to be mutual cooper-
ation. Therefore, a PD game is formed when p > m; r >
s;m < r; s < p. tu
Notably, the miner may stay in the current pool for a
long time without hopping to others. Hence, in this case, the
PD game mentioned above can become an iterated one if
some conditions are satisfied, which are summarized in the
following theorem.
Theorem 3.2. If p > m; r > s;m < r; s < p, the confronta-
tion between the pool and the miner can be modeled as an iter-
ated prisoner’s dilemma (IPD) game.
Proof. A PD game becomes an iterated one when the payoff
of any player’s persistence on cooperation is larger than
hopping between cooperation and defection. In other
words, the inequalities below should hold
2Kp > Kp þ mþKp � p;
2Km > Km þ s þKm � r:
�
(1)
TABLE 1
Payoff Matrix of the Pool and the Miner
SHI ET AL.: FEE-FREE POOLED MINING FOR COUNTERING POOL-HOPPING ATTACK IN BLOCKCHAIN 1583
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
Hence, when p > m; r > s;m < r and s < p, the game
between the pool and the miner can be modeled as an
IPD one. tu
In light of the above analyses, we can find that the miner
and the pool may be trapped into the iterated prisoner’s
dilemma, where the Nash equilibrium is far away from
mutual cooperation, leading to low efficiency and distrust for
Blockchain system in the long run. To tackle this problem, we
employ the powerful ZD strategy to drive the players to coop-
erate so as to reach the win-win situation. As introduced in
Section 1, the ZD adopter can unilaterally set its adversary’s
payoff nomatterwhat strategy the adversary takes.
Aware of such an effective strategy, the pool is attracted
to use the ZD strategy to resist a hopping miner. In this
case, however, we are facing the following problems: is the
pool capable of being a ZD adopter? if yes, how does the ZD strat-
egy work? To address these questions, we conduct the fol-
lowing analyses.
4 ZD STRATEGY FOR THE POOL
In this section, we examine whether the pool can play the
ZD strategy, and if yes, how to achieve that. First, a Markov
game is established between the pool and the miner. As
mentioned in Section 3, there are four possible game results,
i.e.,XY ¼ ðcc; cd; dc; ddÞ, in each round. We define the pool’s
mixed strategy as p ¼ ðp1; p2; p3; p4Þ, where p1 represents the
probability of choosing cooperation in this round based on
the previous outcome cc. Similarly, when the previous out-
come is cd, dc or dd, the probability of the pool to cooperate
in this round is p2, p3 or p4. Accordingly, the probability of
the pool being defective in each round is ð1� p1; 1� p2; 1�
p3; 1� p4Þ corresponding to different game results in last
round. Comparably, in the cases that the miner chooses to
cooperate when cc; cd; dc or dd happens previously, her
strategy can be denoted as q ¼ ðq1; q2; q3; q4Þ, while the prob-
ability of defecting is ð1� q1; 1� q2; 1� q3; 1� q4Þ:
With the above-defined strategies of the pool and the
miner, the Markov matrix in each round can be derived as
follow:
A ¼
p1q1 p1ð1� q1Þ ð1� p1Þq1 ð1� p1Þð1� q1Þ
p2q2 p2ð1� q2Þ ð1� p2Þq2 ð1� p2Þð1� q2Þ
p3q3 p3ð1� q3Þ ð1� p3Þq3 ð1� p3Þð1� q3Þ
p4q4 p4ð1� q4Þ ð1� p4Þq4 ð1� p4Þð1� q4Þ
2
664
3
775;
where each element denotes the probability of state transi-
tion. For example, if the previous outcome is cc, combining
the cooperation probabilities of the pool and the miner, i.e.,
p1 and q1, the probability of XY ¼ cc in this round is p1q1, so
do other elements in A.
Denote v as the stationary vector of matrix A, then vTA ¼
vT and vTM ¼ 0, where M ¼ A� I (I is the identity matrix).
According to the Cramer’s rule, the equation AdjðMÞM ¼
detðMÞI ¼ 0 holds, where AdjðMÞ and detðMÞ represent the
adjugate matrix and the determinant of M. Subsequently,
the equation above indicates that every row of AdjðMÞ is in
proportion to v[17]. Thus, if the dot product of v with any
vector f ¼ ðf1; f2; f3; f4ÞT is conducted, the determinant
remains unchanged with some elementary column transfor-
mation, such as adding the first column to the second and
the third columns. Thus, we have:
v � f ¼ Dðp;q; fÞ ¼ det
p1q1 � 1 p1 � 1 q1 � 1 f1
p2q2 p2 � 1 q2 f2
p3q3 p3 q3 � 1 f3
p4q4 p4 q4 f4
2
664
3
775:
It is evident that the second column of the above determi-
nant is only related to the pool’s strategy. Based on this, the
expected payoffs of the pool (Sp) and the miner (Sm) can be
derived as
Sp ¼ v � Sp
v � 1 ¼ Dðp;q;SpÞ
Dðp;q; 1Þ ;
Sm ¼ v � Sm
v � 1 ¼ Dðp;q;SmÞ
Dðp;q; 1Þ : (2)
Hence, the linear relationship between the pool and the
miner’s expected payoffs holds as follows:
aSp þ bSm þ g ¼ Dðp;q;aSp þ bSm þ g1Þ
Dðp;q; 1Þ ; (3)
where a; b; g are coefficients.
Therefore, if the pool sets his strategy the same as aSp þ
bSm þ g1, the determinant in the numerator equals 0,
because there exists two identical columns. In this case,
aSp þ bSm þ g ¼ 0, implying that a linear relation is estab-
lished between the expected payoffs Sp and Sm, where the
corresponding strategy is therefore called Zero-Determinant
Strategy, denoted as p̂ below.
Specifically, when the pool sets p̂ ¼ bSm þ g1 (i.e., a ¼ 0),
the pool can control the miner’s expected payoff indepen-
dently as Sm ¼ � g
b
; while when he exerts his strategy as p̂ ¼
aSp þ g1 by setting b ¼ 0, he can set his own expected pay-
off at Sp ¼ � g
a
. The following theorem demonstrates the
effectiveness of the ZD strategy adopted by the pool.
Theorem 4.1. The pool can unilaterally control the miner’s
expected payoff as Sm ¼ ð1�p1ÞSddm þp4S
cc
m
1�p1þp4
, while he is not able to
set his own expected payoff independently.
Proof. First, if the pool wants to control his adversary’s
expected payoff as Sm ¼ � g
b
by setting a ¼ 0, the specific
ZD strategy of the pool should satisfy p̂ ¼ bSm þ g1,
according to which, we can deduce p2 and p3 with respect
to p1 and p4
p2 ¼ p1ðScdm�Sddm Þ�ð1þp4ÞðScdm�SccmÞ
Sccm�Sddm
;
p3 ¼ ð1�p1ÞðSddm �Sdcm Þþp4ðSccm�Sdcm Þ
Sccm�Sddm
:
8<
: (4)
It is evident that p2 and p3 are meaningful as they
belong to [0, 1]. Therefore, it is clear that being a ZD
player, the pool can set the miner’s expected payoff uni-
laterally. And the miner’s expected payoff comes to be
Sm ¼ � g
b
¼ ð1� p1ÞSdd
m þ p4S
cc
m
1� p1 þ p4
: (5)
As (5) consisting of a weighted average of Scc
m and Sdd
m
with weights p4 and 1� p1, we can conclude that the
1584 IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 18, NO. 4, JULY/AUGUST 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
expected payoff of the miner can be set in the range of
½Sdd
m ; Scc
m� by the pool’s ZD strategy.
Second, when it comes to the case that the pool sets his
own expected payoff, the ZD adopter’s strategy should
meet p̂ ¼ aSp þ g1 (b ¼ 0). Using p1 and p4 to represent a
and g, we have
a ¼ p1�p4�1
Sccp �Sddp
;
g ¼ ð1�p1ÞSddp þp4S
cc
p
Sccp �Sddp
:
8<
: (6)
And we can use p1 and p4 to describe p2 and p3 as
p2 ¼ ð1þp4ÞðSccp �Scdp Þ�p1ðSddp �Scdp Þ
Sccp �Sddp
;
p3 ¼ �ð1�p1ÞðSdcp �Sddp Þ�p4ðSdcp �Sccp Þ
Sccp �Sddp
;
8><
>: (7)
which indicates p2 � 1 and p3 � 0. Under this condition,
the pool’s strategy is feasible in only one case, i.e., p̂ ¼
ð1; 1; 0; 0Þ, resulting in a ¼ 0 and g ¼ 0 according to (6).
Thus, as a ZD player, the pool cannot control his payoff.tu
5 INCENTIVE MECHANISM BASED ON THE ZD
STRATEGY
In this section, we propose a ZD-based incentive mecha-
nism for the pooled mining to hinder pool-hopping attacks.
Theorem 4.1 reveals the capability of the pool as a ZD player
to set the miner’s expected payoff unilaterally. However,
whether the pool can take advantage of such a capability to
regulate the miner depends on her strategy. If the miner’s
strategy is irrelevant to her payoff, such as all-cooperation
(ALLC, q ¼ ð1; 1; 1; 1Þ), all-defection (ALLD, q ¼ ð0; 0; 0; 0Þ),
tit-for-tat (TFT, q ¼ ð1; 1; 0; 0Þ), the pool cannot employ the
ZD strategy to motivate the cooperative behavior of the
miner. Hence, the proposed ZD-based incentive mechanism
is suitable for the case that the strategy is laid down by the
miner in light of her payoff. Win-stay-lose-shift (WSLS,
q ¼ ð1; 0; 0; 1Þ) and evolutionary strategies are typical pay-
off-driven examples.
A WSLS player will keep the same strategy as the previ-
ous round in which the outcome is good, that is so called
“win-stay”. Otherwise, it will adopt the strategy opposite to
the one in the previous round, which is therefore named as
“lose-shift”. Hence, WSLS can be regarded as a particular
case of the evolutionary strategy. In this work, we take the
evolutionary strategy as the representative for further anal-
ysis, which can be categorized into two kinds: non-memorial
and memorial. We introduce them in detail as follows.
5.1 Evolutionary Strategies
The non-memorial evolutionary (E) strategy is featured by
the fact that an E player may develop the strategy only based
on its expected payoff. Specifically, as a rational player, if the
cooperative behavior brings about a higher payoff than the
defective one, the E player will choose to collaborate and
vice versa. A typical non-memorial evolutionary strategy
can be formulated as follow [22]:
qtðcjpÞ ¼ e�½E
t
mðcjpÞ�Et
mðdjpÞ�
1þ e�½Et
mðcjpÞ�Et
mðdjpÞ� ; (8)
where qtðcjpÞ denotes the non-memorial E player’s coopera-
tion probability in round t based on the pool’s strategy p
and � > 0 is a scaling parameter. Besides, Et
mðcjpÞ and
Et
mðdjpÞ represent the expected payoffs of the miner who
acts cooperatively and defectively.
Different from the non-memorial evolutionary strategy,
the memorial evolutionary strategy is associated with not
only the expected payoff but also its strategy in the previous
round, which we call it memory. That is to say, informed of
the previous strategy and the expected payoff, the memorial
E player may adjust its strategy more rationally.
Inspired by [23], we present the memorial evolutionary
strategy as following: if the cooperation probabilities of the
pool and the miner are denoted as pt and qt in round t, then
the miner’s cooperation probability qtþ1 in the next round
evolves as
qtþ1 ¼ qt �W
t
c
Et
m
; (9)
whereWt
c indicates the expected payoff of theminerwhen she
cooperates andEt
m implies the expected payoff of theminer in
round t. Accordingly,Wt
c andEt
m can be calculated by
Wt
c ¼ pt � Scc
m þ ð1� ptÞ � Sdc
m ;
Et
m ¼ qt �Wt
c þ ð1� qtÞ �Wt
d;
(10)
where Wt
d ¼ pt � Scd
m þ ð1� ptÞ � Sdd
m is the miner’s expected
payoff when she defects.
5.2 ZD Incentive Mechanism
From Equations (8) and (9), it is clear that if the miner obtains
more payoff as a cooperative player, her cooperation proba-
bility will increase. That is to say, the miner is more likely to
devote her computing power entirely to the pool without
hopping if such an action brings about a higher payoff.
Therefore, as a ZD player, the pool may reward the coopera-
tion of a miner with a higher payoff while punishing her
defection with the lower one. Based on this, we propose a
ZD-based incentive mechanism for the pool to coerce the
miner’s collaborative action, thereby deterring the hopping
behavior of theminer, which is detailed in the following.
As shown in Algorithm 1, in the first round, we offer the
reward to each miner i (i ¼ 1; 2; . . . ; N) proportionally to her
contribution to the pool. The historical best computing
power Bi is recorded as the initial computation power of
each miner i, namely m1
i (Lines 1-4). In practice, whether a
miner behaves cooperatively or defectively can not be
deduced without any side information, since it is the private
information of the miner. Hence, the pool has to differentiate
a collaborate or defective miner based on the observation of
the difference of computational powers between two contin-
uous rounds. This requires the pool to record the computa-
tion powermj
i of any miner i at the end of each round j (Line
7), so that the pool can obtain the difference of the devoted
computational power of miner i between round j� 1 and
SHI ET AL.: FEE-FREE POOLED MINING FOR COUNTERING POOL-HOPPING ATTACK IN BLOCKCHAIN 1585
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
round j, i.e., Dmj
i ¼ mj
i �mj�1
i (Line 8). If Dmj
i � 0, miner i is
considered to be a cooperative player and vice versa.
The case Dmj
i < 0 indicates that the miner splits her com-
puting power into other pools, thus implying she is a pool-
hopping attacker (the situation where the miner is unavail-
able due to some reasons such as lacking of electricity is out
of our consideration). Her payoff is therefore needed to be
reduced in order to hinder such an attack. Under this situa-
tion, the pool will exert the ZD strategy, setting the attacker’s
payoff as the minimum one, i.e., L (Lines 9-10). If Dmj
i ¼ 0,
the pool provides the same payoff to the miner as that in the
last round (Lines 11-12). When Dmj
i > 0, the pool would
update Bi if needed (Lines 14-16). Since this case indicates
the miner behaves more cooperatively, the pool will increase
her payoff as Ej
i ¼ H � ez�y
1þez�y , where y ¼ ðDm
j
i
Bi
þ 1Þ � Ej�1
i and
z > 0 represents a scaling parameter (Line 17-18). It is worth
to note that themore increment of computational power rela-
tive toBi is, the higher reward the miner can obtain, which is
up to themaximumpayoff that the pool can offer, namelyH.
Algorithm 1. The ZD-Based Incentive Mechanism
Require:
The total number of iterations,M;
The number of miners, N ;
The initial computation power of miner i,m1
i ;
The minimum and maximum payoffs that the pool can
offer, L andH;
1: for i ¼ 1 to N do
2: Calculate the initial reward according to
m1
iPN
i¼1
m1
i
� ½H � L� þ L
3: Bi ¼ m1
i
4: end for
5: for i ¼ 1 to N do
6: for j ¼ 2 toM do
7: Update computation powermj
i
8: Dmj
i ¼ mj
i �mj�1
i
9: if Dmj
i < 0 then
10: Calculate pj which makes Ej
i ¼ L
11: else if Dmj
i ¼ 0 then
12: pj ¼ pj�1 which makes Ej
i ¼ Ej�1
i
13: else if Dmj
i > 0 then
14: if Bi < mj
i then
15: Bi ¼ mj
i
16: end if
17: y ¼ ðDm
j
i
Bi
þ 1Þ � Ej�1
i
18: Calculate pj which makes Ej
i ¼ H � ez�y
1þez�y
19: end if
20: end for
21: end for
6 THEORETICAL ANALYSIS
In this section, we analyze the proposed incentive mecha-
nism theoretically.
Theorem 6.1. For any non-memorial evolutionary miner who is
motivated by the ZD incentive mechanism, it is conceivable
that the miner’s cooperation probability will be maximized.
Proof. To maximize qtðcjpÞ according to (8), we turn to
prove that Et
mðcjpÞ � Et
mðdjpÞ rises with the increase of
game round t if the miner is a cooperative one. According
to Algorithm 1, if any miner i behaves more cooperatively
than the previous round, we have
Et
mðcjpÞ �Et
mðdjpÞ ¼ H � ez�y
1þ ez�y
� L
¼ H � e
z�ðDm
t
i
Bi
þ1Þ�Rt�1
i
1þ e
z�ðDm
t
i
Bi
þ1Þ�Rt�1
i
� L:
(11)
Since ðDm
t
i
Bi
þ 1Þ �Rt�1
i keeps raising because of the min-
er’s collaborative behavior, e
z�ðDm
t
i
Bi
þ1Þ�Rt�1
i
1þe
z�ðDm
t
i
Bi
þ1Þ�Rt�1
i
becomes to one
at last, leading Et
mðcjpÞ � Et
mðdjpÞ equals to H � L conse-
quently. Hence, driven by the proposed ZD incentive
mechanism, qtðcjpÞ can evolve to the maximum. tu
Theorem 6.2. For any memorial evolutionary miner who is
motivated by the ZD incentive mechanism, her cooperation
probability tends to 1 gradually.
Proof. In light of (9), a memorial evolutionary miner can
calculate her cooperation probability according to Wt
c and
Et
m, which can be deduced by (10). In practice, we use the
cooperative frequencies ftp and ft
m to approximate pt and
qt. Specifically, ft
p indicates the number of rounds the
pool cooperates divided by the total number of rounds,
while ft
m denotes that of a miner.
Based on the ZD incentive mechanism, we consider
the following two cases, where the miner chooses to
cooperate or defect [24].
a) if the miner is considered as cooperative, the pool
may reward her, resulting in Etþ1
m � Et
m. In this case, with
the increase ofEtþ1
m and ftþ1
m ,Wtþ1
c turns to
Wtþ1
c ¼ Etþ1
m � ð1� ftþ1
m ÞWtþ1
d
ftþ1
m
: (12)
Hence, limt!þ1 Wtþ1
c ¼ Etþ1
m �ð1�ftmÞWtþ1
d
ftm
> Wt
c because
ofWtþ1
d ¼ Wt
d.
b) when the miner is regarded as a defective miner,
then we have Etþ1
m � Et
m, and the decrease of Etþ1
m and
ftþ1
m will lead to
Wtþ1
d ¼ Etþ1
m � ftþ1
m Wtþ1
c
1� ftþ1
m
: (13)
Comparably, limt!þ1 Wtþ1
d ¼ Etþ1
m �ftmWtþ1
c
1�ftm
< Wt
d because
ofWtþ1
c ¼ Wt
c .
To sum up, Case a) indicates thatWt
c increases andWt
d
remains unchanged and Case b) implies that Wt
d declines
whileWt
c remains steady. Thus, 9T � 2 Zþ, such that 8t >
T �,Wt
c > Wt
d holds. Based on this, Et
m can be derived as
Et
m ¼ ft
mW
t
c þ ð1� ft
mÞWt
d
< ft
mW
t
c þ ð1� ftmÞWt
c ¼ Wt
c :
(14)
In light of (14), we can conclude that qtþ1 ¼ qt
Wt
c
Et
m
! 1
with the increase of game round t. That is to say, the
1586 IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 18, NO. 4, JULY/AUGUST 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
memorial evolutionary miner will gradually increase the
cooperation probability to one eventually. tu
Conclusively, the non-memorial and memorial evolu-
tionary miner will be encouraged to behave cooperatively
by the proposed ZD incentive mechanism in the end.
Another essential nature of the proposed incentive mech-
anism is that it can be employed into the prepaid mecha-
nism as well as the postpaid mechanism, with the former
rewards the miner when a share is submitted and the latter
defines the terminal of a mining round as the time a block is
mined successfully. Noteworthily, the ZD incentive mecha-
nism is free-fee charged for miners in both prepaid and
postpaid cases due to their wholehearted devotions. More
importantly, in the postpaid mechanism, the proposed
incentive mechanism can hinder pool hopping attackers
without putting any risk on the pools since our mechanism
enables the miners to mine wholeheartedly until a block is
generated successfully.
Now that such a powerful strategy the pool can employ,
he has an overwhelmingly dominant position compared
with the miner, then is the pool capable of getting a higher payoff
greedily through defecting when the miner collaborates? We use
the following theorem as a response to the above concern.
Theorem 6.3. When the miner chooses to cooperate, the only
rational strategy of the pool who employs the ZD incentive
mechanism is to collaborate.
Proof. As demonstrated in Theorems 6.1 and 6.2, the miner
will choose to contribute her maximum computational
power into the pool because of the effectiveness of the
proposed ZD incentive mechanism. In this case, the pool
will provide the miner with the maximal payoff. There-
fore, we will discuss what the ZD strategy is when the
pool sets the expected payoff of the miner as the optimal
value in the following.
According to Section 4, the miner’s expected payoff
can be set as Sm ¼ ð1�p1ÞSddm þp4S
cc
m
1�p1þp4
, which belongs to
½Sdd
m ; Scc
m�. Due to
@Sm
@p1
¼ p4ðr� sÞ
ð1� p1 þ p4Þ2
;
@Sm
@p4
¼ ð1� p1Þðr� sÞ
ð1� p1 þ p4Þ2
;
(15)
@Sm
@p1
> 0 and @Sm
@p4
> 0 because of r > s as indicated in
Theorem 3.2, implying a monotonically increasing rela-
tionship between Sm and p1, p4. Hence, when p1 ¼ 1, p4 ¼
1, the pool canmaximize theminer’s expected payoff. Fur-
thermore, according to (4), if p1 and p4 are equivalent to 1,
the only possible value of p2 is 1 because p2 should lie in
[0,1] to be a probability, so as for p3. That is to say, the pool
can set p ¼ ð1; 1; 1; 1Þ tomaximize the payoff of aminer.
In light of the above analysis, once the miner coopera-
tes, the pool will set his ZD strategy as p ¼ ð1; 1; 1; 1Þ to
maximize a collaborative miner’s expected payoff. That
is to say, whenever the miner cooperates, the pool will
collaborate subsequently. tu
In summary, the pool will be collaborative in return if the
miner offers her maximum computing power. Thus, the pro-
posed ZD incentive mechanism is fair to both sides, which
makes it be long-term sustainable. Such an aim is achieved via
controlling the miner’s short-term expected payoff by the
pool. Then, what are the players’ actual payoffs over the long run?
This question can be answered by the following two theorems.
Theorem 6.4. In the long run, the miner’s actual payoff equals to
Km based on our proposed ZD incentive mechanism.
Proof. a) For a non-memorial evolutionary miner, 9t 2 Zþ,
such that 8t � t, qt can be maximized. That is to say,
when t � t, the expected payoff of the miner is identical
to Km, which is the maximum payoff for a cooperative
miner. In light of this, the actual payoff of the miner PA
m
can be derived as the average of the expected payoff Ei
m
in each round i, where i < t and the expected payoff Km
after round t. Therefore, PA
m can be written as
PA
m ¼ lim
t!1
St�1
i¼1E
i
m þ St
i¼tKm
t
¼ Km: (16)
b) The actual payoff of amemorial evolutionaryminer is
PA
m ¼ lim
t!1
Wt
c � ð1� ptÞðKm þ s � rÞ
pt
¼ lim
t!1
Wt
c
¼ lim
t!1
Et
m � ð1� qtÞWt
d
qt
¼ lim
t!1
Et
m ¼ Km:
(17)
tu
By inspecting Theorem 6.4, the miner will receive the
actual payoff PA
m as Km over the long run. Then, is it possible
for the pool to own more payoff by greedy behavior? This ques-
tion can be resolved by the following theorem.
Theorem 6.5. In the long run, the pool’s actual payoffPA
p is equiv-
alent toKp based on our proposed ZD incentive mechanism.
Proof. According to Theorem 6.3, the pool will behave
cooperatively to reward a collaborative miner, implying
that XY ¼ cc is the stable state for the game. In such a
case, PA
p ¼ Kp holds according to Table 1. tu
In light of Theorems 6.4 and 6.5, the pool and miner will
obtain the actual payoffs asKm andKp, respectively. That is
to say, neither the pool nor the miner can receive higher
reward by noncooperative manner over the long run, which
is quite fair for both sides.
7 PERFORMANCE EVALUATION
To testify the effectiveness of the ZD incentive mechanism
proposed in Section 5, we conduct numerical simulations in
this section. To be specific, we set the payoff vectors of the
pool and the miner as Sp ¼ ð3; 0; 5; 2Þ and Sm ¼ ð3; 5; 0; 2Þ;
which is a typical example of the prisoner’s dilemma. We
also carry out the simulations with other parameter settings
and derive the comparable results. So we omit to present
those results to avoid redundancy. Note that each simula-
tion is repeated 100 times to get the average value for statis-
tical confidence.
In detail, if the pool is a ZD adopter competing with a
miner who employs four classical strategies, i.e., ALLC,
SHI ET AL.: FEE-FREE POOLED MINING FOR COUNTERING POOL-HOPPING ATTACK IN BLOCKCHAIN 1587
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
ALLD, TFT and WSLS, the miner’s expected payoffs can be
set at a fixed value as shown in Fig. 1. Taking the specific
ZD strategy of the pool p ¼ ð0:9; 0:3; 0:8; 0:2Þ as an example,
no matter what strategies the miner employs, her expected
payoff will finally become to a constant. That is to say, the
adversary’s outcome can be controlled unilaterally by the
ZD adopter because of his effective strategy.
As mentioned in Section 5, the classical strategies ALLC,
ALLD and TFT are out of our consideration because the
strategies are irrelevant to the payoff of the player. More-
over, WSLS is regarded as a special evolutionary strategy.
Hence, only the simulations of the evolutionary miners who
compete with a ZD pool are included in this work, which
are demonstrated as follows.
In our simulation, we assume there are four miners in a
pool, whose initial computational powers are respectively
m1
1 ¼ 1;m1
2 ¼ 2;m1
3 ¼ 3;m1
4 ¼ 4. It is worthy noting that the
cases in which more miners exist in a ZD pool share the
same conclusion, so we omit it for reducing repetition. Set-
ting the original cooperation probabilities (CPs) q0 ¼
0:01; q0 ¼ 0:1; q0 ¼ 0:5 and q0 ¼ 0:8, Figs. 2 and 3 respec-
tively show how the CPs of the non-memorial evolutionary
miners evolve according to the proposed ZD incentive
mechanism when � ¼ 5 and 8. In particular, � is set to be big
enough here so that the maximum cooperation probability
of a non-memorial evolutionary player (calculated by (8)),
can approach to 1.
Through further observation of Figs. 2 and 3, we can con-
clude that the CPs of the non-memorial evolutionary miners
converge to one with different speeds, which is mainly
because of different initial computational investments and
the scaling parameter �. To be specific, a miner with a larger
initial computing investment would be more inclined to
accelerate the cooperation process due to the higher growth
of payoff. Intuitively, a higher � brings about a faster conver-
gence speed of the CP according to (8).
Fig. 4 plots the CPs of a memorial evolutionary miner
driven by the ZD-based incentive mechanism, where the
CPs go up to 1 gradually with the initial values as p0 ¼
q0 ¼ 0:01; 0:1; 0:5; and 0.8. In detail, each subfigure shows
that the CP of the miner with a small initial input con-
Fig. 1. The expected payoffs of the miner when she adopts ALLC, ALLD,
TFT, WSLS strategies, and the pool employs the ZD strategy.
Fig. 2. The evolutions of the CPs of the non-memorial evolutionary min-
ers when � ¼ 5.
Fig. 3. The evolutions of the CPs of the non-memorial evolutionary min-
ers when � ¼ 8.
Fig. 4. The evolutions of the CPs of the memorial evolutionary miners.
1588 IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 18, NO. 4, JULY/AUGUST 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
verges slowly compared with other miners, even though
they share the same initial cooperation probability. The
reason may lie in that the miner with a smaller initial com-
puting investment may get a relatively lower payoff in the
beginning, leading a slow growth of the expected payoff.
Thus, her CP would rise slower comparably. Moreover,
considering the CPs of a miner with the same initial invest-
ment but having different initial cooperation probabilities,
for example, the blue lines in subfigures (a)-(d), the result
is that the higher the initial CP is, the faster it is converged
to one, which is mainly caused by the memory we men-
tioned above in light of (9).
8 CONCLUSION
In this paper, we propose a fee-free pooled mining fighting
for the pool-hopping attack in Blockchain. To that aim, we
formulate the interaction between the pool and any miner
as an IPD game and identify the corresponding conditions.
Based on the model, we take advantage of the ZD theory to
empower the pool to unilaterally control the miners payoff,
which can be used to motivate the cooperation of miners
through the proposed ZD incentive mechanism. Our work
is featured by three traits, which are fee-free, wide applicability
and fairness. Both theoretical analyses and numerical simu-
lations demonstrate the effectiveness of the ZD incentive
mechanism.
ACKNOWLEDGMENTS
This work was supported by National Key R&D Program of
China (No. 2019YFB2102600), National Natural Science Foun-
dation of China (No. 61772080, 61672321, 61771289, 61832012,
and 62072044), the Blockchain Core Technology Strategic
Research Program of Ministry of Education of China (No.
2020KJ010301), BNU Interdisciplinary Research Foundation
for the First-Year Doctoral Candidates (No. BNUXKJC2022),
the International Joint Research Project of Faculty of Educa-
tion, Beijing Normal University, and Engineering Research
Center of Intelligent Technology and Educational Applica-
tion,Ministry of Education.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”
Tech. Rep., 2008.
[2] G.Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum Project YellowPaper, vol. 151, pp. 1–32, 2014.
[3] H. Zhou, Y. Niu, J. Liu, C. Zhang, L. Wei, and Y. Fang, “A privacy-
preserving networked hospitality service with the bitcoin block-
chain,” in Proc. Int. Conf. Wireless Algorithms Syst. Appl., 2018,
pp. 696–708.
[4] H. Zhou, X. Ouyang, Z. Ren, J. Su, C. de Laat, and Z. Zhao, “A
blockchain based witness model for trustworthy cloud service
level agreement enforcement,” in Proc. IEEE Conf. Comput. Com-
mun., 2019, pp. 1567–1575.
[5] N. Papadis, S. Borst, A. Walid, M. Grissa, and L. Tassiulas,
“Stochastic models and wide-area network measurements for
blockchain design and analysis,” in Proc. Conf. Comput. Commun.,
2018, pp. 2546–2554.
[6] K. Nayak, S. Kumar, A. Miller, and E. Shi, “Stubborn mining: Gen-
eralizing selfish mining and combining with an eclipse attack,” in
Proc. IEEE Eur. Symp. Secur. Privacy, 2016, pp. 305–320.
[7] Y. Lewenberg, Y. Bachrach, Y. Sompolinsky, A. Zohar, and
J. S. Rosenschein, “Bitcoin mining pools: A cooperative game
theoretic analysis,” in Proc. Int. Conf. Auton. Agents Multiagent
Syst., 2015, pp. 919–927.
[8] I. Eyal, “The miner’s dilemma,” in Proc. IEEE Symp. Secur. Privacy,
2015, pp. 89–103.
[9] A. Sapirshtein, Y. Sompolinsky, and A. Zohar, “Optimal selfish
mining strategies in bitcoin,” in Proc. Int. Conf. Financial Cryptogra-
phy Data Secur., 2016, pp. 515–532.
[10] M. Saad, L. Njilla, C. Kamhoua, and A. Mohaisen, “Countering
selfish mining in blockchains,” in Proc. Int. Conf. Comput. Netw.
Commun., 2019, pp. 360–364.
[11] R. Zhang and B. Preneel, “Publish or perish: A backward-compat-
ible defense against selfish mining in bitcoin,” in Proc. Cryptogra-
phers Track RSA Conf., 2017, pp. 277–292.
[12] S. Bag, S. Ruj, and K. Sakurai, “Bitcoin block withholding attack:
Analysis and mitigation,” IEEE Trans. Inf. Forensics Security,
vol. 12, no. 8, pp. 1967–1978, Aug. 2017.
[13] Q. Hu, S. Wang, and X. Cheng, “A game theoretic analysis on
block withholding attacks using the zero-determinant strategy,”
in Proc. IEEE/ACM 27th Int. Symp. Qual. Service, 2019, pp. 1–10.
[14] M. Rosenfeld, “Analysis of bitcoin pooled mining reward sys-
tems,” Tech. Rep., 2011.
[15] L. Luu, R. Saha, I. Parameshwaran, P. Saxena, and A. Hobor, “On
power splitting games in distributed computation: The case of bit-
coin pooled mining,” in Proc. IEEE 28th Comput. Secur. Found.
Symp., 2015, pp. 397–411.
[16] P. Chatzigiannis, F. Baldimtsi, I. Griva, and J. Li, “Diversification
across mining pools: Optimal mining strategies under pow,” Work-
shop Econ. Inf. Secur., pp. 966–974, 2019.
[17] W. H. Press and F. J. Dyson, “Iterated Prisoner’s Dilemma contains
strategies that dominate any evolutionary opponent,” Proc. Nat.
Acad. Sci. United States America, vol. 109, no. 26, pp. 10 409–10 413,
2012.
[18] I. Eyal and E. G. Sirer, “Majority is not enough: Bitcoin mining is
vulnerable,” Commun. ACM, vol. 61, no. 7, pp. 95–102, 2018.
[19] N. T. Courtois and L. Bahack, “On subversive miner strategies
and block withholding attack in bitcoin digital currency,” Comput.
Res. Repository, Tech. Rep., 2014.
[20] Slushpool. Accessed: Sep. 9, 2020. [Online]. Available: http://
slushpool.com/home/
[21] W. Wang et al., “A survey on consensus mechanisms and mining
strategy management in blockchain networks,” IEEE Access,
vol. 7, pp. 22 328–22 370, 2019.
[22] H. P. Young, “The diffusion of innovations in social networks,”
Economy Evolving Complex Syst. III: Current Perspectives Future
Directions, vol. 267, 2006, Art. no. 39.
[23] X. Liu, W. Wang, D. Niyato, N. Zhao, and P. Wang, “Evolutionary
game for mining pool selection in blockchain networks,”
IEEE Wireless Commun. Lett., vol. 7, no. 5, pp. 760–763, Oct.
2018.
[24] Q. Hu, S. Wang, L. Ma, R. Bie, and X. Cheng, “Anti-malicious
crowdsourcing using the zero-determinant strategy,” in Proc.
IEEE 37th Int. Conf. Distrib. Comput. Syst., 2017, pp. 1137–1146.
Hongwei Shi received the BS degree in com-
puter science from Beijing Normal University,
Beijing, China, in 2018. She is currently working
toward the MS degree in computer science at
Beijing Normal University, Beijing, China. Her
research interests include blockchain, game the-
ory, and combinatorial optimization.
SHI ET AL.: FEE-FREE POOLED MINING FOR COUNTERING POOL-HOPPING ATTACK IN BLOCKCHAIN 1589
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
http://slushpool.com/home/
http://slushpool.com/home/
ShenglingWang (SeniorMember, IEEE) received
the PhD degree from Xi’an Jiaotong University,
Xi’an, China, in 2008. She is a full professor with
the School of Artificial Intelligence, Beijing Normal
University. After that, she did her postdoctoral
research with the Department of Computer Sci-
ence and Technology, Tsinghua University. Then,
she worked as an assistant and associate profes-
sor from 2010 to 2013 with the Institute of Comput-
ing Technology, Chinese Academy of Sciences.
Her research interests include mobile/wireless net-
works, game theory, and crowdsourcing.
Qin Hu received the PhD degree in computer sci-
ence from the George Washington University,
Washington, DC, in 2019. She is currently an
assistant professor with the Department of Com-
puter and Information Science, Indiana University
- Purdue University Indianapolis. Her research
interests include wireless and mobile security,
crowdsourcing/crowdsensing, and blockchain.
Xiuzhen Cheng (Fellow, IEEE) received the MS
and PhD degrees in computer science from the
University of Minnesota, Twin Cities, Minnesota,
in 2000 and 2002, respectively. She is a profes-
sor with the Department of Computer Science,
George Washington University, Washington, DC.
Her current research interests focus on privacy-
aware computing, wireless and mobile security,
dynamic spectrum access, mobile handset net-
working systems (mobile health and safety), cog-
nitive radio networks, and algorithm design and
analysis. She has served on the editorial boards of several technical
publications and the Technical Program Committees of various profes-
sional conferences/workshops. She has also chaired several interna-
tional conferences. She worked as a program director for the U.S.
National Science Foundation (NSF) from April to October 2006 (full
time), and from April 2008 to May 2010 (part time). She published more
than 170 peer-reviewed papers.
Junshan Zhang (Fellow, IEEE) received the PhD
degree from the School of Electrical and Computer
Engineering, Purdue University, West Lafayette,
Indiana, in 2000. He joined the School of Electrical,
Computer, and Energy Engineering, Arizona State
University, in August 2000, where he has been ful-
ton chair professor since 2015. His research inter-
ests fall in the general field of information networks
and data science, including communication net-
works, machine learning for Internet of Things
(IoT), fog/edge computing, optimization/control of
cyber physical systems, and smart grid. He is a recipient of theONRYoung
Investigator Award in 2005 and the NSF CAREER award in 2003. His
papers have won a few awards, including the Best Student Paper at
WiOPT 2018, the Kenneth C. Sevcik Outstanding Student Paper Award of
ACMSIGMETRICS2016, theBest PaperRunner-upAward of IEEE INFO-
COM 2009 and IEEE INFOCOM 2014, and the Best Paper Award at IEEE
ICC 2008 and ICC 2017. Building on his research findings, he co-founded
Smartiply Inc., in 2015, a fog computing startup company delivering
boosted network connectivity and embedded artificial intelligence. He was
TPC co-chair for a few major conferences in computer networks, including
IEEE INFOCOM 2012 and ACM MOBIHOC 2015. He was general chair
for ACM/IEEESEC2017 andWiOPT 2016.
Jiguo Yu (Senior Member, IEEE) received the
PhD degree from Shandong University, Jinan,
China, in 2004. He became a full professor with the
School of Computer Science, Qufu Normal Univer-
sity, Shandong, China, in 2007. Currently, he is a
full professor with theQilu University of Technology
(Shandong Academy of Sciences) and Shandong
Computer Science Center (National Supercom-
puter Center in Jinan). His main research interests
include privacy-aware computing, wireless net-
working, distributed algorithms, peer-to-peer com-
puting, and graph theory. Particularly, he is interested in designing and
analyzing algorithms for many computationally hard problems in networks.
He is a member of the ACM and a senior member of the China Computer
Federation (CCF).
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/csdl.
1590 IEEE TRANSACTIONS ON DEPENDABLE AND SECURE COMPUTING, VOL. 18, NO. 4, JULY/AUGUST 2021
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:12:35 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice