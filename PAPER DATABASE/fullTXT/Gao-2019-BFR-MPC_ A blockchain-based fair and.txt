BFR-MPC: A Blockchain-Based Fair and Robust Multi-Party Computation Scheme
Received July 15, 2019, accepted August 4, 2019, date of publication August 9, 2019, date of current version August 22, 2019.
Digital Object Identifier 10.1109/ACCESS.2019.2934147
BFR-MPC: A Blockchain-Based Fair and Robust
Multi-Party Computation Scheme
HONGMIN GAO , ZHAOFENG MA , SHOUSHAN LUO, AND ZHEN WANG
1School of Cyberspace Security, Beijing University of Posts and Telecommunications, Beijing 100876, China
2Information Security Center, Beijing University of Posts and Telecommunications, Beijing 100876, China
Corresponding author: Zhaofeng Ma (mzf@bupt.edu.cn)
This work was supported in part by the National Natural Science Foundation of China under Grant 61272519, Grant 61170297, Grant
61572080, and Grant 61472258.
ABSTRACT In a general secure multi-party computation (MPC) protocol, two or more participants who
do not trust each other, use their respective secret inputs to calculate a joint function in a distributed
environment without a centralized organization. They can get correct outputs on the premise of ensuring
privacy and independence of input. In this paper, to solve the problem of fairness and robustness in MPC,
a blockchain-based multi-party computation scheme (BFR-MPC) was proposed. The blockchain maintains
an open reputation system for parties as a public ledger where a more reputable party has a greater chance
to be selected. The block height is used as a trusted timestamp. In each round, parties must send the
correct information before the deadline. In our scheme, all parties are considered to be foresighted, and
an incentive mechanism encourages parties to cooperate rather than deviate from the protocol. Because of
non-cooperative parties will be immediately expelled from the protocol and will be penalized financially,
the proposed scheme is robust. The penalty will be used to reward honest parties. We also proved the fairness
of our scheme through Game Theory. The comparison results of the proposed scheme with other schemes
show that it is a more practical scheme for MPC with high fairness and robustness.
INDEX TERMS Multi-party computation, blockchain, smart contract, fairness, robustness, secret sharing,
game theory.
I. INTRODUCTION
Secure Multi-party Computation (MPC) was originally for-
mulated by Yao in 1982 [1], who has presented a solution
in form of decentralization for ‘‘The Millionaires’ Problem’’.
The study by Goldreich et al. extended the two-party compu-
tation to multiple parties [2]. MPC is used to solve a collab-
orative computing problem that protects privacy between a
group of untrusted participants. In this scenario, two or more
parties holding secret input want to jointly calculate a func-
tion and get their own output. In this process, the participant
does not get any additional information except the expected
output. Specifically, a given number of participants, P =
{P1, ...,Pn}, each have a private data, respectively x1, ..., xn.
Participants want to compute the value of a public function
on that private data: f (x1, ..., xn) = (y1, ..., yn), while keep-
ing their own inputs secret. At the end of the computation,
each participant Pi dose not receive any information except
The associate editor coordinating the review of this article and approving
it for publication was Asad Waqar Malik.
knowing (xi, yi) and the useless intermediate values derived
therefrom.
At present, researchers have proposed many efficient
MPC protocols [5]–[8]. Even in a lab environment, they
have completed the secure multi-party computation for AES
function [9]. Most of these work are focused on improving
the efficiency of MPC as much as possible under the premise
of a semi-honest adversary model. That is, all participants in
MPC are honest, even the corrupted who are attacked are only
curious, just use the observed message to analyze the extra
results without deviating from the protocol. Unfortunately,
this does not correspond to the actual situation. The reality is
that there are malicious adversaries who will actively change
the execution of the protocol to obtain the expected attack
results. There are also some MPC protocols under the mali-
cious adversary model [10]–[13]. But in reality, two things
still happen:
1) When a party gets results that are not good for himself
before others, he will not announce it, causing other parties
to fail to get output.
VOLUME 7, 2019 This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see http://creativecommons.org/licenses/by/4.0/ 110439
https://orcid.org/0000-0003-4585-2533
https://orcid.org/0000-0001-7875-4169
https://orcid.org/0000-0002-1437-0366
H. Gao et al.: BFR-MPC Scheme
2) Malicious adversaries constantly launch attacks to devi-
ate from the protocol, making it unable to run smoothly
Therefore, in reality, in addition to privacy and efficiency,
a practical MPC is also highly desirable to be fair (either all
parties get output or none) and robust (a malicious adversary
cannot mount a ‘‘denial of service’’ against the protocol).
II. RELATED WORKS
As early as 1986, R Cleve’s research [20] showed that, when
more than half of the malicious parties participated, it was
impossible to achieve fairness in the protocol. In 2004,
Joseph Halpern and Vanessa Teague proposed a novel idea
named rational multi-party computation (RMPC) [21], which
uses the concept and method of Game Theory to mod-
ify the goal of traditional cryptography. The key point is
to introduce the concept of rational adversary under the
traditional adversary model. It is believed that the adver-
sary is ‘‘self-interested’’ when participating in real-world
protocol. It has certain motives and will always be driven
by certain interests. These features redefine the strategies,
behaviors, and abilities of the adversary. Anna Lysyanskaya
et al. proposed a mixed-behavior model [22]. None of the
parties in this model is honest. All participants are rational
and selfish, and they are only interested in how to maxi-
mize their own interests. But the presence of an attacker
is detected by a trusted intermediary in their model. Adam
Groce et al. have proved that when all parties are ratio-
nal, a reasonable fairness is possible for arbitrary functions,
and Game Theory can be used to circumvent consequences
of cryptography [23]. Mehrdad Nojoumian et al. combined
the rational secret sharing scheme with the social secrete
sharing scheme to form a new socio-rational secrete sharing
scheme [24]. The main idea is to build a public trusted net-
work, which can be regarded as a reputation system, assigning
a reputation value to each participant. The reputation value
is updated with the participant’s behavior, and the parties
are rewarded or punished according to the reputation value.
Gilad Asharov et al. studied the relationship between Game
Theory and secure two-party computation [25]. They trans-
form a secure two-party computation protocol into several
two-party games. The study reveals the relationship between
privacy, correctness, and Nash equilibrium in secure two-
party computation. The above-mentioned RMPC based on
Game Theory mainly focuses on the fairness of MPC but
cannot solve the problem of robustness. Moreover, suchMPC
protocols seem to be specifically designed to achieve fairness,
and they either have a centralized trusted third-party system
or lack a real background environment.
With the emergence of blockchain technology represented
by Bitcoin [26], due to its characteristics of decentraliza-
tion and trustable, and the incentive mechanism of Bit-
coin is inseparable from Game Theory, scholars began to
introduce economic incentives in Bitcoin into the MPC
from the perspective of economics. It provides sufficient
and real motivation for parties to participate in a MPC
protocols. To the best of our knowledge, the work of
Marcin Andrychowicz et al. [29], [30] was the first to imple-
ment a secure two-party lottery protocol based on the Bit-
coin network. The parties in the protocol either get the
output or get economic compensation (such as Bitcoin).
Their work only defined a two-party protocol, but does
not extend to multiple parties, and the initialization pro-
cess requires multiple rounds of interaction with the Bitcoin
network. Iddo Bentov and Ranjit Kumaresan define several
ideal functionalities [31], e.g., F∗CR (claim-or-refund func-
tionality), F∗f (secure computation with penalties function-
ality), F∗lot (secure lottery with penalties functionality). The
MPC protocol they construct only needs to call a constant
round F∗CR. Ranjit Kumaresan and Iddo Bentov also stud-
ied how to use Bitcoin to motivate participants to achieve
correct computations [32]. Their work includes four aspects:
verifiable computation, secure computation with restricted
leakage, fair secure computation and non-interactive bounty.
Ranjit Kumaresan et al. also discussed how to use Bitcoin
to implement a decentralized poker game [33]. In 2017,
Ranjit Kumaresan et al. improved the previously proposed
scheme [34] and proposed how to use the penalty mechanism
to optimize the secure computation model. All of the above
work are based on the Bitcoin protocol, which only studies
the fairness in MPC, and has made some modifications to the
Bitcoin protocol in order tomeet their requirements. Aswe all
know, the Bitcoin blockchain has great limitations in practical
application scenarios. The scripting language of Bitcoin is
non-Turing Complete, so it cannot support more flexible and
complex functions. Moreover, the transaction confirmation
time of six blocks for nearly an hour and a high transaction
fee lead to the application based on Bitcoin protocol only
stays at the theoretical stage. The study by Kiayias et al. [14]
is most similar to our work. They propose a fair and robust
multi-party computation protocol using a global ledger. Their
work includes the following three aspects: 1) Propose a
formal model of secure multi-party computation with com-
pensation; 2) The model is UC-Secure; 3) First proposed a
constant-round robust multi-party computation protocol.
In this paper, we formalized an ideal function for a fair
and robust multi-party computation which we call it F∗FBMPC
(FRMPC stands for ‘‘fair and robust multi-party compu-
tation’’). Then, we proposed an outsourcing MPC scheme
based on EOS blockchain to achieve our goal. At last,
it proved that our scheme for MPC have a good fairness and
robustness.
III. PRELIMINARIES
A. PUBLICLY VERIFIABLE SECRET SHARING
The earliest PVSS was proposed by Schoenmakers [38]. The
most obvious feature of a non-interactive PVSS is that there
is no secret channel between the secret distributor and each
participant. All shares are encrypted and transmitted on the
public channel with a proof of commitment. The secret share
can be publicly verified.
110440 VOLUME 7, 2019
H. Gao et al.: BFR-MPC Scheme
Init: Generating the required system parameters using a
public algorithm. When participants join the protocol, they
need to first generate a pair of keys (Pki, Ski) using an asym-
metric encryption algorithm, publicly disclose the public key
Pki and keep the private key Ski secret.
Distribute: The Dealer chooses a secret s to share among
n parties {P1, ...,Pn}. He will generate a secret share si (i =
1, . . . , n) for each party and encrypt it with the corresponding
public key Pki. Then, the ciphertext will be broadcasted on a
public channel attach with a commitment ci = COMM (si).
Anyone can verify whether the Dealer has sent the cor-
rect shares through a non-interactive verification algorithm
PVSS(EnPki (si), ci).
Reconstruct: The party Pi uses his private key to decrypt
the ciphertext and gets his share si. All parties disclose their
own share. Anyone can verify the correctness of si through
an algorithm verify(si, ci), and exclude corrupt parties from
submitting incorrect shares.
PVSS can be used to construct a secure multi-party compu-
tation protocol. Because of its feature of additive homomor-
phism, in an addition gate, parties only need to operate their
own shares locally.When amultiplication gate, the parties are
required a secondary distribution of an useless intermediate
value using PVSS.
B. GAME THEORY
A game G consists of a set of players P, a set of strategies
S (the way of choosing actions) and a pay-off function u
which used by each participant to compute his utility, i.e.
G = {P, S, u}. The pay-off function ui : S → R represents
the utility of Pi under different combinations of strategies.
Let σi denote the strategy of player Pi, and σ−i be the
strategies of all players other than Pi, Eσ := (σi, σ−i) be the
strategy profile of all players. Let (σ ′i , σ−i) denote player Pi
replace σi by σ ′i and all the other players’ strategies remain
unchanged. Let ui(Eσ ) mark Pi’s utility when the strategy
profile Eσ is played.
A vector of strategies σ is a Nash equilibrium if, for any
player Pi, any σ ′i 6= σi, it holds that ui(σ ′i , σ−i) < ui(σ ).
This means that no one gains any advantage by deviating
from the protocol as long as the other players follow the
protocol. If player Pi can always improve its utility by not
playing σi, we say that the strategy σi is strictly dominated.
C. BLOCKCHAIN
The concept of blockchain originated from Nakamoto’s Bit-
coin white paper [26]. Its foundation is cryptography and P2P
networks. The data of specific structure is organized into
blocks in a certain way, and then these blocks are linked
into a chain according to a certain time sequence. The data’s
security and unforgeability are ensured by cryptography tech-
nology and consensus mechanism. Briefly, as the basic tech-
nology of cryptocurrency such as Bitcoin, blockchain is a
non-tamperable distributed and trusted ledger. It does not
require a trusted third-party center but can perform trusted
business processing.
1) SMART CONTRACT
In the early stage of blockchain development, only cryp-
tocurrencies like BTC, LTC were more successful appli-
cations. What really changed the blockchain was in 2013,
Vitalik Buterin presented the first public blockchain platform
with the built-in Turing complete programming language and
introduced the concept of Smart Contract in the Ethereum
white paper [27]. The concept of Smart Contract was intro-
duced by Szabo [36], and was defined as ‘‘a computerized
transaction protocol that executes the terms of a contract.’’ In
the blockchain, a Smart Contract is a piece of program code
that can be automatically triggered and executed securely
and reliably. On one hand, Blockchain provides a trusted
execution environment for the operation of Smart Contract.
On the other hand, Blockchain can achieve more complex
behavior with the programmability of Smart Contract. The
operation mechanism of blockchain-based Smart Contract is
shown in Fig.1.
FIGURE 1. Operation mechanism of blockcahin-based smart contract.
The blockchain can be seen as a transaction-triggered state
machine from a higher perspective and the public ledger is
a world state which begins from Genesis Block. Users can
connect to any node in the blockchain network to initiate
transactions and the receiving node broadcasts it to the entire
network through the P2P network. Due to the existence of
the incentive mechanism, all Block Producer will perform the
corresponding operations after receiving the transaction, and
package the transaction to create a block, and then get a final
result through the consensus mechanism to update the world
state. The action triggered by the transaction can be invoking
a smart contract from the ledger and executing it in a sandbox
environment, or deploying a new smart contract. Blockchain
provides the following capabilities for Smart Contract run-
ning in its environment:
VOLUME 7, 2019 110441
H. Gao et al.: BFR-MPC Scheme
Public status: All participants have access to the entire
ledger to see the current global status of the Smart Contract.
Timestamp server: The blockchain can be regarded as
a never-ending decentralized timestamp server with block
height.
Trusted propagation channel: The sender can propagate a
message through the blockchain, the receiver will receive the
message in the next block, and the content of the message will
be recorded in the ledger which cannot be tampered with and
trustable.
2) TRANSACTIONS OF EOS
In the EOS blockchain platform, account, address and
transaction are three important components. Cryptography
algorithms such as Elliptic Curve Digital Signature Algo-
rithm (ECDSA) and Hash function ensure the security of
the system. In the EOS blockchain, each user has his
own account, with each account corresponding to multiple
ECDSA key pairs denoted by (Pk, Sk), each pair of keys cor-
responding to different operating permission for the account.
The private key and the public key are used to sign and verify
the transactions. If a user wants to call a smart contract,
he needs to prepare a transactionTx:
Tx = (Refblock , t, SigU (Chain_ID,Tx),
Action(Code,Name,AuthU ,Data))
Ref block represents the reference to the height and id of a
recently generated block to prevent transactions from appear-
ing on a fork chain and t stands for the expiration time
of the transaction. SigU (Chain_ID,Tx) is the signature on
(Chain_ID,Tx) used to verify the identity of the user who
initiated the transaction. Action denotes the operation to be
performed, in which Code is the name of a Smart Contract,
Name is the method in the Smart Contract, AuthU is used to
authenticate whether the user who initiated the transaction
has permission to call this method, Data are the parameters
to be passed into the Smart Contract. There may be multiple
actions in a transaction. A contract account can also send an
action to another contract, calling each other’s method, which
called inline communication, and the permission of the action
has the same scope as the transaction initiated by the user for
the first time.
For example, we now assume Alice and Bob are two users
of the EOS system. If Alicewants to payBob a certain amount
of EOS (we assume the transfer amount is v), she needs to
prepare a transaction Tx which calls the transfer method of
contract eosio.token:
Tx = (Refblock , t, SigA(Chain_ID,Tx),Action
(eosio.token, transfer, (Alice, active), (Alice,Bob, v)))
IV. IDEAL FUNCTIONALITY
In this section, we have Designed a new ideal functionality
F∗BRMPC for MPC with fairness and robustness. We regard
MPC as a repeated game while previous work consider it
to be a one-time work. In the proposed ideal functionality,
each party has a reputation value which is undated to his
behavior each time the game is played. The greater the rep-
utation value, the easier to be selected for the next game,
so that they can earn more benefits in the future. Therefore,
the participants in ourmodel are selfish, focusing only on how
they can get more benefits, which is the same as the partici-
pants in RMPC. Furthermore, the participants in F∗BRMPC are
far-sighted and care what he will get in the future which is
different from RMPC.
In our model, we designed an incentive mechanism similar
to the Bitcoin ecosystem for MPC protocols. Our model
guarantees the following aspects:
1) No penalty will be imposed on the cooperative
participant.
2) If a participant deviates from the protocol or gets output
without announcing it, he will be punished financially. Hon-
est participants will receive these penalties as compensation.
3) All participants are concerned about their reputation,
so that it is easier to join the game in the future and get a
long-term benefits.
Our ideal functionality for fair and robust MPC is shown
in Fig. 2. We use the same notation coin as [32], which
define coins as atomic entities that are fungible and cannot
be duplicated. The coin(x) denote an item whose value is
described by x ∈ N.
In our ideal function F∗BRMPC , all participants are rational
and far-sighted. If someonewants to be a participant, he needs
to pay the deposit of at least d coins in the deposit phase.
The setup phase will select n out of N players with sufficient
deposit to start the current game, all of whom are considered
honest at first, where n ≤ N . In the input phase, F∗BRMPC
begins to receive inputs from all participants. If the ideal
functionality receives a corrupt-input from S for a honest
party Ps, 0 < s ≤ h, then marks it as corrupt. After all the
inputs have been collected, the ideal functionality begins to
perform the computation in thecompute phase. In the output
phase, F∗BRMPC distributes the output of each honest party,
and if receives a abort message or nothing from Ps, 0 < s ≤
h, then marks it as corrupt. If it receives a corrupt-output
from S for a honesty party Ps, also marks it as corrupt. In the
compensate phase, all participants marked with corruption
will be imposed a fine, and the penalty will be compensated to
honest participants. All participants can withdraw the balance
of their deposit at the withdraw phase.
V. BLOCKCHAIN-BASED FAIR AND ROBUST
MPC SCHEME
In order to achieve our goal, we will combine the characteris-
tics of PVSS and EOS blockchain to propose a fair and robust
outsourcing multi-party computation scheme (BFR-MPC).
The BFR-MPC proceeds in rounds. The parties execute the
computation locally, which they can do until a multiplication
gate, then they randomize their shares for an useless interme-
diate value using PVSS. This process repeats until an output
gate, then participants announce their shares of output for
reconstruction.
110442 VOLUME 7, 2019
H. Gao et al.: BFR-MPC Scheme
FIGURE 2. The ideal functionality F∗
BRMPC for fair and robust MPC.
We use the same terminology as in [41]. The part that
is executed on-chain we call it Contract, and the part exe-
cuted off-chain by MPC node we call it Protocol. Let _self
denote contract itself and asset(x) denote system token in
EOS blockchain. Transfer transactions are abbreviated as
transfer(A,B, asset(v)) which means that account A has
transferred v coins to account B.
A. SYSTEM MODEL
Our scheme consists of three types of roles: Blockchain, User
(U) and MPC Node (P). As a public ledger, the Blockchain
provides a fair and trustable service for the scheme. MPC
Nodes provide aMPC service for Users and reap the benefits.
The MPC node needs to be registered in the MPCNodeMan-
agement Contract (MPCNMContract) and a certain amount
of deposit is required for registration. If a MPC node deviates
from the protocol or acts unfairly (does not disclosing the
secret share it holds) during the computing process, it will be
deducted from his deposit as a penalty. Users can use theMPC
service provided by MPC nodes to use their respective secret
input to obtain the result of f and pay a service charge for
it. The system model of proposed scheme for fair and robust
MPC is shown in Fig 3.
FIGURE 3. The system model of FBRMPC.
B. MPC NODE MANAGEMENT CONTRACT
The contract MPCNMContract consists of the following
modules, and the functions of these modules are described
in detail as follows:
1) Register: If the participant wants to become a MPC
node, it is necessary to register in this contract and to pay
a certain deposit, only when the minimum deposit is met, it is
possible to be selected by the Users to provide a computing
service and earn income.
VOLUME 7, 2019 110443
H. Gao et al.: BFR-MPC Scheme
2) Reputation System: Each MPC node has a reputa-
tion value in this contract. If the MPC node is cooperative
and completes the computation task successfully, the rep-
utation value will increase, otherwise the reputation value
will decrease. The reputation value determines the long-term
utility of the MPC nodes.
3) Incentive Mechanism: The income of the MPC node
comes from two parts: the fee of Users usingMPC service and
the penalty of corrupt MPC nodes. The Incentive Mechanism
determines the actual utility ofMPC nodes, which is reflected
in the distribution of benefits after each service is provided.
4) Select Quorum: Users can select a quorum of MPC
nodes according to their reputation values and deposit
amounts to perform the current computation task. Poor repu-
tation does not mean that it will not be chosen, but the prob-
ability will decrease exponentially as the reputation value
declines. We should give a chance to the bad players so
they can compensate for their past behavior. We also need
to consider a newcomer. This is consistent with the reality.
C. COMPUTE CONTRACT
Compute Contract is negotiated and deployed to the
blockchain platform by the Users who needs to use the
multi-party computation service. The MPC parameters for
this current computation task, the computation scripts for
each selected MPC node, etc. are specified in the Compute
Contract.
The computation proceeds in rounds, and from the
blockchain’s perspective, each round has a time limit within
which participants (Users or MPC Nodes) must correctly
send the information that should be submitted to the
blockchain in this round. The smart contract will verify that
the information submitted is correct. At the beginning of
the next round, the smart contract will also check which
participant did not submit a correct message. After this,
the blockchain will determine whether the computation can
proceed or not (add cheaters to a corrupted parties list and
if the size of honest set less than the threshold t of PVSS,
then abort the task). This time limit can be the height of a
certain block in the future.We can let τ = RoundToHeight(r)
, r = 1, 2, 3 . . . denoted the height of blockchain at the end
of round r .
In the init phase, it will send a transaction to MPCNM-
Contract to get a quorumMPC nodes participating in current
computation task. In the first round, Users broadcast their
shares encrypted by the public key of MPC nodes utilizing
this contract and deposit the charge fee. The MPC nodes
broadcast the useless intermediate value generated during the
computation in the same way between the second round and
penultimate round. In the last round, MPC nodes announce
their respective output shares and charge fees. From this
perspective, this contract is a trusted broadcast channel. This
is somewhat equivalent to the synchronous broadcast channel
in [40].
The formal definition of a Compute Contract is shown
in Fig 5.
FIGURE 4. The formal definition of a MPC node management contract.
D. MPC PROTOCOL
In this part, we can take advantage of some studies of
existing multi-party protocols based on PVSS [40]–[42].
In this paper, we mainly focus on the fairness and robust-
ness of MPC. How to construct a secure MPC protocol
using PVSS is beyond the scope of this paper. As described
in [22], the parties compute secret shares of either a use-
less intermediate value or the outputs of the function f .
So in the BFR-MPC, Users and MPC nodes will broadcast
the shares to blockchain after the execution of each round.
Rewards or penalties are automatically executed by the Smart
Contract on the blockchain platform. What the Users and
MPC nodes need to do at the end of each round is shown
in Fig.6.
110444 VOLUME 7, 2019
H. Gao et al.: BFR-MPC Scheme
FIGURE 5. The formal definition of compute contract.
FIGURE 5. The formal definition of compute contract.
VI. SCHEME ANALYSIS
In this paper, we mainly study the fairness and robustness
of MPC. The security of the proposed scheme depends on a
secure multi-party computation protocol based on PVSS. The
verification of input, output and the intermediate values falls
into another category. So in this section, we provide fairness
analysis, robustness analysis and performance analysis of
BFR-MPC.
A. FARINESS ANALYSIS
Definition 1: In a repetitive MPC Game G = {Pi,Ai,Ri, ui},
where 1 < i ≤ N , is one that is repeated an infinite number
of times by different subsets of players. Each player Pi has a
set of action Ai, a reputation value Rτi , τ = 1, 2, 3... where
τ denotes the number of games Pi played in and a utility
function ui. In each game:
• A subset of n ≤ N is chosen to participant based on
their reputation value. The selected players will have an
income when completing the task and the greater the
reputation value, the easier it is for participants to be
selected for the next game.
• The selected player Pi, 1 < i ≤ n, will estimate his
utility by the utility function ui(ai,Ri). Players select his
action ai according to ui.
• The reputation Ri of each player will be updated on the
blockchain publicly and trustful.
We assume that each player Pi’s action ai ∈ {C,D,⊥},
where C denotes ‘‘cooperation’’, D denotes ‘‘defection’’ and
⊥ denotes that not selected to participate in this game. Players
who are not selected will not affect the result of this game,
nor will they affect the decision of other players, so we
only consider C and D of the players in current game. Let
A def
= A1× ...×An be an action profile and a = (a1, ..., an) ∈
A be the current game’s output.
VOLUME 7, 2019 110445
H. Gao et al.: BFR-MPC Scheme
FIGURE 6. The formal definition of MPC protocol.
Definition 2: Let coini(a) denote the coin income that
earned by Pi in current game, li(a) ∈ {0, 1} denote whether
the player Pi has obtained the computation output and set
δ(a) =
∑
i li(a). For our Scheme, we make that:
li(a) < li(a′) but coini(a) > coini (a′)
⇒ ui(va) > ui(a′) (1)
li(a) > li(a′) but coini(a) < coini (a′)
⇒ ui(a) < ui(a′) (2)
If set a suitable incentive with appropriate rewards and
penalties, the above definition are completely reasonable. Let
� > 0 be a unit of utility. The revenue of a player Pi consists
of three parts:
A. Reputation: (Rτi (a) − Rτ−1i (a))ωi(r) × �, where ωi(r)
denotes a curve that represents the impact of the difference
r in reputation on future earnings. The r and ωi(r) are all
positive.
Rτi (a)− R
τ−1
i (a) =
{
1r, if ai = C
−1r, if ai = D
B. Coin:

Ri
h∑
j=1
Rj
(
c∑
k=1
pk + fee)×�, if ai = C
−p/Ri ×�, ifai = D
C. Output: For a selfish adversary, the output is known to
himself, and the fewer people know the result, the greater the
gain. So:
li(a)
δ(a)+ 1
×�
Let ρ1, ρ2, ρ3 denote the weights of A, B and C respec-
tively. For a normal player, part B of each future game utility
is closely associated with his reputation value, so ρ1 � ρ2.
According to the definition 2, we can get ρ2 > ρ3. Let Ci(Di)
denote player Pi cooperate (defect), C−i(D−i) denote all the
players cooperate (defect) other than Pi. Let Mh
−i denote
that h of players other than Pi are cooperative. The following
5 situations will occur in the utility of Pi:
(1) If all players are cooperative and everyone receives the
output. li = 1, δ = n.
ui(a)(Ci,C−i) = �(ρ1rωi + ρ2(
Ri
n∑
j=1
Rj
× fee)+
ρ3
n+ 1
)
(2) If player Pi cooperates but other players some cooperate
and some defect, h ≥ t − 1, li = 1, δ = n. All players get the
output, but the players who do not cooperate will be fined.
ui(a)(Ci,M
h≥t−1
−i )
=�(ρ1rωi+ρ2(
Ri
h∑
j=1
Rj
×(
c∑
k
pk + fee))+
ρ3
n+ 1
)
(3) If playerPi cooperates but other players some cooperate
and some defect, h < t − 1, li = 0, δ = 0. The protocol will
be aborted so that no one will be able to get the output, but
the players who do not cooperate will be fined.
ui(a)(Ci,M
h<t−1
−i )
= �(ρ2(
Ri
h∑
j=1
Rj
× (
c∑
k
pk )))
(4) If player Pi defects, but the number of players who
cooperated exceeded the threshold t . All of the players will
get the output, but player Pi will be fined. li = 1, δ = n.
ui(a)(Di,Mh≥t
−i ) = �(−ρ1rωi − ρ2(p/Ri)+
ρ3
n+ 1
)
(5) If player Pi defects, and the number of players who
cooperated is less than the threshold t . The protocol will be
110446 VOLUME 7, 2019
H. Gao et al.: BFR-MPC Scheme
aborted so that no one will be able to get the output and the
players who do not cooperate will be fined. li = 0, δ = 0.
ui(a)(Di,Mh<t
−i ) = �(−ρ1rωi − ρ2(p/Ri))
We now analysis these five scenarios:
If player Pi cooperates (cases (1)-(3)), regardless of other
player’s cooperation or defection. We have:
uC
i
(a) ≥ �(ρ2(
Ri
h∑
j=1
Rj
× (
c∑
k
pk )))
If player Pi defects (cases (4)-(5)). We have:
uD
i
(a) ≤ �(−ρ1rωi − ρ2(p/Ri)+
ρ3
n+ 1
)
Because of ρ1 � ρ2, it is easy to prove that uC
i
(a) >
uD
i
(a). In extreme cases, if a malicious adversary registered
as a newcomer, and regardless of the influence of reputation,
we will have:
uD
i
(a) ≤ �(−ρ2(p/Ri)+
ρ3
n+ 1
)
According to the definition 2, we can also get uC
i
(a) >
uD
i
(a).
So it can be said that for a player Pi, C−i strictly dominates
D−i and vector aC = (aC1 , ..., a
C
n ) is a strict Nash equilibrium
strategy. BFR-MPC has a good fairness.
B. ROBUSTNESS ANALYSIS
The basis of BFR-MPC are blockchain and a (t , n)-theshold
PVSS, and it proceeds in rounds. Blockchain can provide
the ability of timestamps to enable protocols to execute syn-
chronously. Every participant who sends incorrect message
out of the protocol will be detected by the Smart Contract and
be kicked out at the beginning of the next round. All of this is
public and transparent, running automatically in a blockchain
environment. In the absence of a centralized node, this is
not possible in previous work. Each participant has its own
account and corresponding key pairs on the blockchain, and
the identity cannot be forged. The robustness of BFR-MPC is
mainly reflected in the following aspects:
1)Setup Phase: The ledger publicly maintains an reputa-
tion value determined by their past behavior for each par-
ticipant. In order to be easily selected, participants need to
accumulate their reputation values for a long time. To become
an MPC node, a deposit needs to be paid in the contract,
which avoids ‘‘The Sybil Attack’’. That is, the adversary
cannot terminate the protocol by adding more nodes. If the
protocol is aborted, the phase can be performed again, and
select a new subset to start with.
2) Input Phase: Users are required to pay a certain amount
of coins as the service fee for this current task when sub-
mitting the input. The Smart Contract will check whether
the input of the Users is correct. If a User does not submit
the correct input within the specified time, the service charge
will be transferred to the honest Users. The existence of the
service fee will enable the program to resist DoS attacks from
Users.
3) Compute Phase: The intermediate value of the MPC
node is also detected by the Smart Contract, and if a valid
message is not submitted, the node will be moved to the
corruption set at the beginning of the next round. As long
as the number of corrupt participants does not exceed n-t,
the protocol will be finally finalized.
In summary, any participant in the BFR-MPC that deviates
from the protocol will be detected by the Smart Contract
and will be prohibited from participating in the next work.
The scheme uses a (t, n)-theshold secret share, as long as
the setting of a suitable t , there is a certain degree of fault
tolerance. Even if the protocol is aborted, Users can select a
new subset to restart the agreement. So BFR-MPC has a good
robustness.
C. PERFORMANCE ANALYSIS
In this section, we provide the experimental evaluation of
the proposed scheme. We have tested these on a MacBook
Pro (2017) with Intel (R) Core (TM) i5 CPU that clocks at
3.1 GHz and has 8.0 GB of RAM. The code was written
in Java. We downloaded a Shamir’s secret shared code from
GitHub.
As we all know, in all blockchain-based schemes, the
efficiency of computations on the chain depends on the aver-
age block production time of the selected blockchain. For
example, the average processing time for a transaction on Bit-
coin is 10 minutes. BFR-MPC chooses the EOS blockchain
platform. The current consensus mechanism of EOS is BFT-
DPoS, which can accurately generate a block every 0.5 sec-
onds. In BFR-MPC, all operations inMPCNMContract and
ComputeContract are performed on chain.
In each round, the main time overhead of off-chain execu-
tion is a data distribution process of PVSS which includes a
Shamir’s secret shared and multiple asymmetric encryption
executions. Their execution time is mainly related to the size
of the quorum for MPC nodes that choosed to participate in
the current computation task in the Init phase of Compute-
Contract. Fig. 7 reflects the relationship between the cost of
time for each MPC per round and the size of quorum for the
selected MPC nodes.
We can conclude that the cost of time for each round
of BFR-MPC increases exponentially with the increase of
the size of quorum for selected MPC nodes in Compute-
Contract. This is because adding MPC nodes to a specific
computation task will result in more asymmetric encryp-
tion calculations per round. Even worse, a higher power
polynomial is needed for secret sharing, resulting that the
generated shares tasks up a larger number of bytes, making
the encrypted data of the asymmetric encryption larger and
consuming more time. We can see that when the quorum
exceeds 40, users will make a great sacrifice in efficiency if
they choose more MPC nodes to perform a computation task
for a better privacy.
VOLUME 7, 2019 110447
H. Gao et al.: BFR-MPC Scheme
FIGURE 7. The time cost per round of each node varies with the size of
quorum for selected MPC nodes increasing.
FIGURE 8. Computing time overhead of the whole network varies with
input size.
Fig. 8 illustrates that adding quorum is costly with larger
input. In our experiment, when the size of input exceeds 250
bytes, even adding a node can be very expensive.
VII. COMPARISON WITH RELATED WORKS
In previous studies on multi-party computation, most of them
only focus on the privacy of input, correctness or efficiency
of computation. Different from previous researches, BFR-
MPC concentrates on the fairness and robustness of MPC.
Although rational multi-party computation based on cryp-
tography and Game Theory also considers fairness, most
of them only regard multi-party computation protocol as a
one-time game which is not a particularly realistic situation.
There are also some studies focusing on running a robust
multi-party computation protocol, but they do not have an
TABLE 1. The comparison of BFR-MPC and some other schemes.
actual operating environment, and they cannot kick out mali-
cious nodes without a centralized node.
Only papers [14], [30], [31], [33], [34] have some resem-
blance to our work which they are all MPC based on
blockchain. We will compare BFR-MPC with these other
solutions from operating environment, the time complexity
of interacting with blockchain, fairness, robustness and com-
monality.
The solutions in [30], [33] are all proposed for multi-party
computation in a special scenario, so their commonality is
poor and we are not going to do much analysis of both
situations. As shown in TABLE 1, all schemes are based
on blockchain, and they are all have a better fairness. The
schemes in [31], [34] are constructed on Bitcoin network
without considering the problem of robustness, and only
one malicious node can launch a DoS attack. Although the
scheme in [14] considers the robustness, it can only identify
the nodes that abort the protocol whose robustness is weak. In
terms of time complexity of interaction with the blockchain,
the scheme of [31], [34] are based on an ideal functionality
called F∗CR, which needs to interact with the blockchain 2n
times per round, the scheme of [14] needs to interact with
the blockchain n2 times per round, while BFR-MPC just only
n times. Although [31] discussed to build a universal multi-
party computation protocol with PVSS, it is limited by the
limitations of the Bitcoin network. Moreover, in order to
achieve their goals, a slight change in the Bitcoin protocol is
needed, which seems almost impossible, while our solution is
based on the EOS blockchain and there are no such problems.
The feasibility of implementing MPC based on Ethereum is
analyzed in [14], but no specific implementation scheme is
given.
In addition, any blockchain-based solution needs to discuss
the performance of the blockchain platform that is selected.
Bitcoin generates a block for about 10 minutes. in order to
prevent forking, it is necessary to be confirmed after 6 blocks,
so the time for a transaction to be officially written into the
block is about 60 minutes, which is too inefficient. Moreover,
the scripting language of Bitcoin is non-Turling Complete,
which makes it impossible to build complex functions and
is very poor in terms of scalability. Ethereum produces a
block in about 15 seconds, it is generally recommended that
more than 15 blocks confirm. So, the confirmation time of
110448 VOLUME 7, 2019
H. Gao et al.: BFR-MPC Scheme
a transaction has been greatly improved in Ethereum. At the
same time, Ethereum has a good support from Smart Con-
tract. However, there is also a big problem in common with
Bitcoin and Ethereum, that both of them have adopted PoW
(proof of work) as a consensus mechanism. For this reason,
when the network is congested, transactions can often not
be immediately packaged into the block unless very expen-
sive fees are paid. This makes it that applying Bitcoin or
Ethereum to our scenario [14], [30], [31], [33], [34] can be
very likely: the last round of transactions have been broadcast,
but several rounds later, the transactions may still not be
processed. Therefore, the use of Bitcoin or Ethereum to solve
the unfairness in multi-party computation can only stay in a
theoretical stage and cannot be realized. These conditions are
completely different in the EOS blockchain. The consensus
mechanism of the EOS blockchain is BFT-DPoS, where a
block is generated in 0.5 seconds, which allows transactions
to reach second-level confirmation. It is completely free for a
user to initiate a transaction on the EOS blockchain. Further,
EOS blockchain has a more powerful account system and
permission control mechanism. All these advantages make
the EOS blockchain more suitable for building a fair and
robust multi-party computation protocol.
In summary, compared to other related works, BFR-MPC
has a better fairness, robustness, commonality and also
has a good performance in efficiency. Most importantly,
BFR-MPC is more practical and a realistic solution.
VIII. CONCLUSIONS
In order to meet the requirements of fairness and robustness
in themulti-party computation, a fair and robustMPC scheme
based blockchain was proposed in this paper. A public reputa-
tion system is maintained in the proposed scheme where each
participant has a reputation value where a more reputable
party has greater chance to be selected. Then a subset was
selected based on the reputation value to execute a common
MPC protocol based on PVSS. The output and intermediate
values in each round all need to be verified by the Smart
Contract. Both sending an incorrect message and not sending
any message within the specified time will be detected by
Smart Contract. Further, an incentive mechanism encourage
all participants to be cooperative, honest participants will
gain more and more benefits, while the corrupt participants
will be increasingly penalized. Blockchain maintains a ledger
publicly with a non-tamperable feature, but the disclosure of
the ledger means privacy issues, while MPC is precisely to
solve the problem of privacy protection. In the future work,
we will study what helps MPC can provide for blockchain in
terms of privacy protection.
REFERENCES
[1] A. C. Yao, ‘‘Protocols for secure computations,’’ inProc. 23rd Annu. Symp.
Found. Comput. Sci., vol. 82, Nov. 1982, pp. 160–164.
[2] O. Goldreich, S. Micali, and A. Wigderson, ‘‘How to play ANY mental
game,’’ in Proc. 19th Annu. ACM Symp. Theory Comput. (STOC), 1987,
pp. 218–229.
[3] Y. Aumann and Y. Lindell, ‘‘Security against covert adversaries: Effi-
cient protocols for realistic adversaries,’’ in Theory of Cryptography,
S. P. Vadhan, Eds. Berlin, Germany: Springer, 2007, pp. 137–156.
[4] A. Ben-David, N. Nisan, and B. Pinkas, ‘‘FairplayMP: A system for secure
multi-party computation,’’ in Proc. 15th ACM Conf. Comput. Commun.
Secur. (CCS), 2008, pp. 257–266.
[5] I. Damgård, M. Fitzi, E. Kiltz, J. B. Nielsen, and T. Toft, ‘‘Unconditionally
secure constant-rounds multi-party computation for equality, comparison,
bits and exponentiation,’’ in Theory of Cryptography. Berlin, Germany:
Springer, 2006, pp. 285–304.
[6] I. Damgård, M. Geisler, M. Krøigaard, and J. B. Nielsen, ‘‘Asynchronous
multiparty computation: Theory and implementation,’’ in Public Key
Cryptography—PKC. Berlin, Germany: Springer, 2009, pp. 160–179.
[7] M. Burkhart, M. Strasser, D. Many, X. Dimitropoulos, ‘‘SEPIA: Privacy-
preserving aggregation of multi-domain network events and statistics,’’ in
Proc. 19th USENIX Security Symp., 2010, pp. 223–240.
[8] D. Bogdanov, M. Niitsoo, T. Toft, and J. Willemson, ‘‘High-performance
secure multi-party computation for data mining applications,’’ Int. J. Inf.
Secur., vol. 11, no. 6, pp. 403–418, Nov. 2012.
[9] E. Prouff and T. Roche, ‘‘Higher-order glitches free implementation of the
AES using secure multi-party computation protocols,’’ in Cryptographic
Hardware and Embedded Systems—CHES. Berlin, Germany: Springer,
2011, pp. 63–78.
[10] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank, ‘‘Extending oblivious trans-
fers efficiently,’’ in Advances in Cryptology—CRYPTO. Berlin, Germany:
Springer, 2003, pp. 145–161.
[11] J. Nielsen, ‘‘Extending oblivious transfers efficiently—How to get robust-
ness almost for free,’’ IACR Cryptol. ePrint Arch., Tech. Rep. 2007/215,
2007. [Online]. Available: http://eprint.iacr.org/2007/215
[12] D. Harnik, Y. Ishai, E. Kushilevitz, and J. B. Nielsen, ‘‘OT-combiners
via secure computation,’’ Proc. 5th Conf. Theory Cryptogr. (TCC), 2008,
pp. 393–411.
[13] J. B. Nielsen, P. S. Nordholt, C. Orlandi, and S. S. Burra, ‘‘A new approach
to practical active-secure two-party computation,’’ in Proc. 32nd Annu.
Cryptol. Conf. Adv. Cryptol. (CRYPTO), vol. 7417, 2012, pp. 681–700.
[14] A. Kiayias, H.-S. Zhou, and V. Zikas, ‘‘Fair and robust multi-party com-
putation using a global transaction ledger,’’ in Advances in Cryptology—
EUROCRYPT. Berlin, Germany: Springer, 2016, pp. 705–734.
[15] I. Damgård, V. Pastro, N. Smart, and S. Zakarias, ‘‘Multiparty computation
from somewhat homomorphic encryption,’’ in Advances in Cryptology—
CRYPTO. Berlin, Germany: Springer, 2012, pp. 643–662.
[16] M. Keller, V. Pastro, and D. Rotaru, ‘‘Overdrive: Making SPDZ great
again,’’ in Advances in Cryptology—EUROCRYPT. Cham, Switzerland:
Springer, 2018, pp. 158–189.
[17] G. Spini and S. Fehr, ‘‘Cheater detection in SPDZ multiparty computa-
tion,’’ in Information Theoretic Security. Cham, Switzerland: Springer,
2016, pp. 151–176.
[18] Y. Lindell, B. Pinkas, N. P. Smart, and A. Yanai, ‘‘Efficient constant round
multi-party computation combining BMR and SPDZ,’’ in Advances in
Cryptology—CRYPTO. Berlin, Germany: Springer, 2015, pp. 319–338.
[19] Y. Ishai, R. Ostrovsky, and V. Zikas, ‘‘Secure multi-party computation
with identifiable abort,’’ in Advances in Cryptology—CRYPTO. Berlin,
Germany: Springer, 2014, pp. 369–386.
[20] R. Cleve, ‘‘Limits on the security of coin flips when half the processors are
faulty,’’ in Proc. 18th Annu. ACM Symp. Theory Comput. (STOC), 1986,
pp. 364–369.
[21] J. Halpern and V. Teague, ‘‘Rational secret sharing and multiparty com-
putation: Extended abstract,’’ in Proc. 36th Annu. ACM Symp. Theory
Comput. (STOC), 2004, pp. 623–632.
[22] A. Lysyanskaya and N. Triandopoulos, ‘‘Rationality and adversarial
behavior in multi-party computation,’’ in Advances in Cryptology—
CRYPTO. Berlin, Germany: Springer, 2006, pp. 180–197.
[23] A. Groce and J. Katz, ‘‘Fair computation with rational players,’’ in
Advances in Cryptology—EUROCRYPT. Berlin, Germany: Springer, 2012,
pp. 81–98.
[24] M. Nojoumian and D. R. Stinson, ‘‘Socio-rational secret sharing as a new
direction in rational cryptography,’’ in Decision and Game Theory for
Security. Berlin, Germany: Springer 2012, pp. 18–37.
[25] G. Asharov, R. Canetti, and C. Hazay, ‘‘Towards a Game Theoretic View of
Secure Computation,’’ in Advances in Cryptology—EUROCRYPT. Berlin,
Germany: Springer 2011, pp. 426–445.
[26] S. Nakamoto. (2008). Bitcoin: A Peer-to-Peer Electronic Cash System.
[Online]. Available: https://bitcoin.org/bitcoin.pdf
VOLUME 7, 2019 110449
H. Gao et al.: BFR-MPC Scheme
[27] V. Buterin. (2013). Ethereum: A Next-Generation Smart Contract and
Decentralized Application Platform. [Online]. Available: https://github.
com/ethereum/wiki/wiki/White-Paper
[28] D. Larimer. (2017). EOS.IO Technical White Paper. [Online]. Available:
https://steemit.com/eos/@eosio/eos-io-technical-white-paper
[29] M. Andrychowicz, S. Dziembowski, D. Malinowski, and Ł. Mazurek,
‘‘Fair two-party computations via Bitcoin deposits,’’ in Financial Cryptog-
raphy and Data Security. Berlin, Germany: Springer, 2014, pp. 105–121.
[30] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek,
‘‘Secure multiparty computations on Bitcoin,’’ in Proc. IEEE Symp. Secur.
Privacy, May 2014, pp. 443–458.
[31] I. Bentov and R. Kumaresan, ‘‘How to Use Bitcoin to design fair proto-
cols,’’ in Advances in Cryptology—CRYPTO. Berlin, Germany: Springer,
2014, pp. 421–439, 2014.
[32] R. Kumaresan and I. Bentov, ‘‘How to Use Bitcoin to incentivize correct
computations,’’ in Proc. ACM SIGSAC Conf. Comput. Commun. Secur.
(CCS), 2014, pp. 30–41.
[33] R. Kumaresan, T. Moran, and I. Bentov, ‘‘How to use Bitcoin to play
decentralized poker,’’ in Proc. 22nd ACM SIGSAC Conf. Comput. Com-
mun. Secur. (CCS), 2015, pp. 195–206.
[34] R. Kumaresan, V. Vaikuntanathan, and P. N. Vasudevan, ‘‘Improvements to
secure computation with penalties,’’ in Proc. ACM SIGSAC Conf. Comput.
Commun. Secur. (CCS), 2016, pp. 406–417.
[35] A. Shamir, ‘‘How to share a secret,’’ in Proc. Commun. ACM, vol. 22, no. 1,
pp. 612–613, 1979.
[36] N. Szabo. (1994). Smart Contracts. [Online]. Available: https://szabo.
best.vwh.net/smart.contracts.html
[37] M. J. Osborne, An Introduction to Game Theory. New York, NY, USA:
Oxford Univ. Press, 2004.
[38] B. Schoenmakers, ‘‘A simple publicly verifiable secret sharing scheme and
its application to electronic voting,’’ inAdvances in Cryptology—CRYPTO,
vol. 99. Berlin, Germany: Springer, 1999, pp. 148–164.
[39] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou, ‘‘Hawk:
The blockchain model of cryptography and privacy-preserving smart con-
tracts,’’ in Proc. IEEE Symp. Secur. Privacy (SP), May 2016, pp. 839–858.
[40] M. Backes, F. Bendun, A. Choudhury, and A. Kate, ‘‘Asynchronous MPC
with a strict honest majority using non-equivocation,’’ in Proc. ACM Symp.
Princ. Distrib. Comput. (PODC), 2014, pp. 10–19.
[41] I. Damgård, Y. Ishai, and M. Krøigaard, ‘‘Perfectly secure multi-
party computation and the computational overhead of cryptography,’’ in
Advances in Cryptology—EUROCRYPT. Berlin, Germany: Springer, 2010,
pp. 445–465.
[42] A. Patra, A. Choudhury, and C. P. Rangan, ‘‘Efficient asynchronous verifi-
able secret sharing and multiparty computation,’’ J. Cryptol., vol. 28, no. 1,
pp. 49–109, 2013.
[43] T. Rabin and M. Ben-Or, ‘‘Verifiable secret sharing and multiparty pro-
tocols with honest majority,’’ in Proc. 21st Annu. ACM Symp. Theory
Comput., 1989, pp. 73–85.
[44] Z. Wang, S.-C. S. Cheung, and Y. Luo, ‘‘Information-theoretic secure
multi-party computation with collusion deterrence,’’ IEEE Trans. Inf.
Forensics Security, vol. 14, no. 4, pp. 980–995, Apr. 2017.
[45] L. Zhou, L. Wang, Y. Sun, and T. Ai, ‘‘AntNest: Fully non-interactive
secure multi-party computation,’’ IEEE Access, vol. 6, pp. 75639–75649,
2018.
[46] K. Christidis and M. Devetsikiotis, ‘‘Blockchains and smart contracts for
the Internet of Things,’’ IEEE Access, vol. 4, pp. 2292–2303, 2016.
[47] T. Li, H. Qin, J. Li, W. Gao, Z. Liu, and Q. Xu, ‘‘A brief survey on secure
multi-party computing in the presence of rational parties,’’ J. Ambient
Intell. Humanized Comput., vol. 6, no. 6, pp. 807–824, 2015.
[48] Z. Yang, K. Yang, L. Lei, K. Zheng, and V. C. M. Leung, ‘‘Blockchain-
based decentralized trust management in vehicular networks,’’ IEEE Inter-
net Things J., vol. 6, no. 2, pp. 1495–1505, Apr. 2019.
HONGMIN GAO was born in 1987. He is
currently pursuing the Ph.D. degree with the
School of Computer Science and Technology,
Beijing University of Posts and Telecommunica-
tions. His research interests include blockchain,
encode cryptography, and network and informa-
tion security.
ZHAOFENG MA was born in 1974. He received
the Ph.D. degree from Xi’an Jiaotong Univer-
sity, in 2004. He did his post-doctoral research
work in Tsinghua University, from 2005 to 2007.
Since 2007, he has been with the Beijing Uni-
versity of Posts and Telecommunications, Bei-
jing, China, where he is involved in education
and research work. His research interests include
information security, digital rights management,
and blockchain.
SHOUSHAN LUO was born in 1962. He is cur-
rently a Professor and a Ph.D. Supervisor with
the School of Cyber Security, Beijing University
of Posts and Telecommunications. His research
interests include blockchain, encode cryptography,
and network and information security.
ZHEN WANG was born in 1989. He is cur-
rently pursuing the Ph.D. degree with the School
of Cyber Security, Beijing University of Posts
and Telecommunications. His research interests
include blockchain and digital rights management.
110450 VOLUME 7, 2019
	INTRODUCTION
	RELATED WORKS
	PRELIMINARIES
	PUBLICLY VERIFIABLE SECRET SHARING
	GAME THEORY
	BLOCKCHAIN
	SMART CONTRACT
	TRANSACTIONS OF EOS
	IDEAL FUNCTIONALITY
	BLOCKCHAIN-BASED FAIR AND ROBUST MPC SCHEME
	SYSTEM MODEL
	MPC NODE MANAGEMENT CONTRACT
	COMPUTE CONTRACT
	MPC PROTOCOL
	SCHEME ANALYSIS
	FARINESS ANALYSIS
	ROBUSTNESS ANALYSIS
	PERFORMANCE ANALYSIS
	COMPARISON WITH RELATED WORKS
	CONCLUSIONS
	REFERENCES
	Biographies
	HONGMIN GAO
	ZHAOFENG MA
	SHOUSHAN LUO
	ZHEN WANG