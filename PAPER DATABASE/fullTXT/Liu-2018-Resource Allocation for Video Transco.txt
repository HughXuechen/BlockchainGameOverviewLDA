Resource Allocation for Video Transcoding and Delivery Based on Mobile Edge Computing and Blockchain
Resource Allocation for Video Transcoding and
Delivery Based on Mobile Edge Computing and
Blockchain
Yiming Liu∗†, F. Richard Yu‡, Xi Li∗†, Hong Ji∗, and Victor C.M. Leung†
∗Key Lab. of Universal Wireless Comm., Beijing Univ. of Posts and Telecom., P.R. China
†Depart. of Electrical and Computer Eng., Univ. of British Columbia, Vancouver, BC, Canada
‡Depart. of Systems and Computer Eng., Carleton Univ., Ottawa, ON, Canada
Abstract—By bringing computing capabilities to the network
edge, mobile edge computing (MEC) has emerged as a promis-
ing technique to enable low-latency video streaming services.
However, due to the rapid growth of the number of devices
and the heterogeneous formats of the video streams, the tra-
ditionally centralized content delivery schemes are insufficient
to provide secure, adaptive video services with low complexity.
To achieve a decentralized content market among untruthful
parties (e.g., users and operators), in this paper, we propose
an effective video transcoding and delivery approach based on
MEC and blockchain. In the proposed approach, we envision a
set of blockchain-based smart contracts to build an autonomous
content delivery market, where all the participants are financially
enforced by smart contract terms. Then, users, small base sta-
tions (SBSs), and content provider (CP) are able to autonomously
adjust their strategies according to the content market statistics.
Moreover, we formulate the optimization problem, including
resource allocation, determining content price and quality levels
of contents, as a three-stage Stackelberg game. We analyze the
subgame equilibrium for each stage and the interplays of the
three-stage game. Lastly, an iterative algorithm is proposed to
obtain the solution. Simulation results are presented to show the
effectiveness of the proposed approach.
Index Terms—Video transcoding, Blockchain, Smart contracts,
Mobile edge computing, Resource allocation, Stackelberg game.
I. INTRODUCTION
With the increasing of video sharing services and applica-
tions over various mobile devices, wireless video streaming is
fueling an exponential growth of mobile data traffic. Due to
the heterogeneous devices and dynamic network conditions,
the video streams usually have to be transformed into different
bitrate versions to adapt to diverse mobile devices. Never-
theless, video transcoding of large-scale video streams is a
computationally intensive operation and requires on-demand
provisioning and scalable computational resources.
Mobile edge computing (MEC) has been recognized as
a promising solution to process video contents to support
adaptive video streaming [1]. Small base stations (SBSs)
equipped with MEC servers, which have powerful storage
This paper is sponsored by the National Science and Technology Major
Project of China (Grant No.2017ZX03001014).
and computation resources, can cache and transcode video
streams for users. Then, by obtaining video contents from the
proximate SBSs instead of a remote content provider (CP),
users can enjoy low-latency services and reliable connection
to networks [2]. A MEC-based architecture was proposed in
[3] to improve the performance of adaptive video streaming.
In this architecture, the MEC server could adjust the bitrate
version of the video to match network conditions and devices
capacities. In [4], the authors proposed a video bitrate adap-
tation algorithm in the radio access network. For the resource
allocation problems, the authors in [5], [6] studied the dynamic
resource allocation for transcoding and delivering adaptive
video streaming services. However, the heterogeneous MEC
networks in terms of different infrastructures and operators
have become less effective for providing wide-range, secure
and self-organized video services.
Recently, blockchain is considered as a feasible solution
for decentralized data sharing across a large network of
participants [7]. The blockchain is a synchronized and dis-
tributed public ledger, which is maintained by all the network
participants without any centralized controller in a logical
Peer-to-Peer (P2P) network [8]. Deepak et al. [9] proposed a
blockchain-based data provenance framework for the cloud.
JCLedger, which is a blockchain-based distributed ledger,
was proposed in [10] to achieve the cooperation among
multiple cloud service providers. To provide a secure and
distributed content delivery, the authors in [11] proposed
a scalable blockchain-based brokering mechanism allowing
several providers to collaborate and to provide the requested
service through network service chains. By utilizing edge
caching, the authors in [12] designed a decentralized proactive
caching system in wireless network based on blockchains.
Although some excellent works have been done on MEC
and blockchain extensively, there are still some challenges to
be addressed. First, video transcoding is a time-consuming
task and requires scalable computational resources. Since each
video is divided into multiple segments, and each segment can
be requested at different bitrate versions, the resource alloca-
tion problem for video transcoding becomes more challenging.
Second, to provide adaptive video services for large-scale of
end devices effectively, resource allocation strategies should
978-1-5386-4727-1/18/$31.00 ©2018 IEEE
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:50:32 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: Blockchain-based MEC Network Architecture
be dynamically adjusted without any centralized controller.
Lastly, to enable a secure, feasible and decentralized video
streaming services, the content trading processes among the
untrusted CPs, SBSs, and users should be well designed.
Thus, in this paper, to address above issues, we propose
a video transcoding and delivery approach based on MEC
and blockchain, which provides distributed, secure, and on-
demand video services at the edge of the networks. In the
proposed approach, all participants (i.e. users, SBSs, and CP)
are enforced by smart contracts and are able to autonomously
adjust their strategies according to the content market statis-
tics. We model the optimization problem, including resource
allocation, determining content price and quality levels of
contents, as a three-stage Stackelberg game. We analyze the
subgame equilibrium for each stage and discuss the interplays
between different stages. An iterative algorithm is developed
to obtain the feasible solution. Lastly, the simulation results
are presented to show the performance gains of the proposed
approach compared with other existing schemes.
The remainder of our work is organized as follows. In
Section II, we present the network model and the proposed
approach. In Section III, we present and analyze the three-
stage Stackelberg game and propose an iterative algorithm to
obtain feasible solutions. Simulation results and discussions
are given in Section IV. Finally, we conclude this paper in
Section V.
II. NETWORK MODEL AND PROPOSED APPROACH
This section introduces the network model and proposed
video transcoding and delivery approach.
A. Network Model
We consider a virtual P2P blockchain network as the
backbone of the decentralized content delivery network, which
is illustrated as Fig. 1. There are M SBSs equipped with MEC
servers that own limited caching and computing resources but
enough to meet the demands of the CP. We assume that N
users served by these SBSs enjoy video contents provided by
one CP (e.g. Youtube or Netflix). All content files f ∈ F
are chunked into l different segments with a fixed length,
and each segment has different bitrate versions in different
formats. Then, we consider a rate βn, where 0 < βn � 1,
to scale down the original videos and represent the different
quality levels of video required by user n. One user can only
select one quality level of one video at the same time. Lastly,
the whole available spectrum bandwidth is W . The channel
does not vary during the transmission of a packet and perfect
instantaneous Channel Quality Information (CQI) is available.
Assume that SBSs have cached proactively a set of popular
contents [13]. For an arbitrary SBS m, it charges the CP
for allocating computing resources fm (Mbps) and charges
the user for allocating power pmn (W). We consider a split-
spectrum approach where the same spectrum is split among
its nearby interfering SBSs and spectrum within one SBS is
orthogonally assigned to every user [14]. Then, suppose that
SBS m delivers required video contents to user n via wireless
access links. The data rate of user n that connects to the m-th
SBS can be denoted as
Rmn = wmn log2
(
1 +
pmn|hmn|2
δ2
)
(1)
where |hmn|2 denotes the channel gain between SBS m and
user n; wmn denotes the allocated bandwidth of SBS m to
user n; δ2 denotes the power spectrum density of the additive
white Gaussian noise (AWGN).
B. Proposed Approach with Blockchains and MEC
In this subsection, we propose a video transcoding and de-
livery approach that involves a series of small smart contracts
for ensuring the correct execution of the content trading. Each
entity (e.g., a CP, an SBS or a user) maps itself as a node in the
blockchain network and is identified by a unique “transaction
address”, using the hash-code of its public key.
During a process of video transcoding and delivery, users
first request a set of contents with specific preferences. Once
the request arrives in the blockchain, a content brokering
contract (CBC) that specifies required contents is created and
published. Then the CP is notified of the new CBC and use
it to create a content licensing contract (CLC). The CLC
specifies the content price to the user, a reference to the
CBC, and the maximum price to SBSs for transcoding and
delivery. Once the CLC is visible on the blockchain, SBSs
respond by publishing content delivery contracts (CDCs),
which specify the resource prices for delivering content and
the reference to the CLC. Finally, the original CBC collects
all the related CDCs, selects the cheapest one to implement
the content delivery and terminates all other contracts. After
content trading, a user pays for the content transaction through
an address of a CP and pays for the delivery transaction
through an address of an SBS, respectively. CP pays to a set of
SBSs for the content processing transaction through addresses
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:50:32 UTC from IEEE Xplore.  Restrictions apply. 
of SBSs. Then the payees (CPs or SBSs) generate transaction
records, and the payers (CPs or users) verify and digitally sign
the transaction records and upload them for audit.
We adopt a consensus mechanism based on proof-of-stake
(PoS) and consider that the CP and SBSs work as the
consensus nodes to participate in the consensus process. The
users work as user nodes and only send requests for content
delivery. To validate transactions and create blocks, CP and
SBSs that work as forger first put their own coins at ‘stake’
and then participate in the consensus process. We measure
the stake of each SBS by its transcoding and delivery reward
collected and consider the CP’s stakes are proportional to
the amount of unconfirmed payment for contents in the last
time slot. Since they have staked their own money, they are
generally incentivized to validate the correct transactions. If
they validate a fraudulent transaction, they lose their holdings
and their rights to participate as a forger in the future.
This ensures that the CP or SBSs cannot abuse the content
transcoding and delivery environment.
III. PROPOSED THREE-STAGE STACKELBERG GAME
In this section, we present and analyze the three-stage
Stackelberg game for content processing. Then an iterative
algorithm is proposed to obtain the feasible solution.
A. Problem Formulation
In three-stage Stackelberg game, the upstage acts as the
leader, which makes the decision first. The downstage is the
follower and reacts subsequently based on leader’s strategy.
In stage I, an SBS m acts as the leader and determines the
resource price zm. In stage II, the CP decides how many
computing resources and which SBS to purchase based on
the resource price. Then, the CP determines the content price
and sells the content to users. In stage III, a user n selects
which quality level of contents to purchase from CP and how
much power resource to purchase from SBSs.
1) Resource Allocation Model for SBSs: Assume that each
SBS is selfish and independent of gaining the revenue as much
as possible. Each SBS’s revenue depends on its own resource
cost and resource price, as well as the price offered by the
other SBSs. To maximize the revenue, each SBS needs to
find an optimal price zm by solving the following problem
max
zm�γm
Um
SBS(zm) = max
zm�γm
(zm − γm)(ζfamfm + ζp
N∑
n=1
pmn)
(2)
where γm denotes the resource cost of the SBS m (e.g.,
the computing cost and the networking cost); ζf and ζp are
weighted factors to adjust the balance between the computing
resource price and the power resource price; am ∈ {0, 1}
denotes whether CP selects SBS m to process its content or
not. If CP selects SBS m, am = 1; otherwise, am = 0.
2) Content Price Model for CP: CP’s profit depends on the
quality levels of contents required by users and the amount of
computing resource consumption. Let qnf ∈ {0, 1} denotes
whether user n selects the content file f or not. If user n
selects content file f , qnf = 1; otherwise, qnf = 0. To
maximize its profit, CP needs to determine its content price
y and the required computing resource fm. The optimization
problem for the CP can be formulated as
max
fm�0,y�φ
UCP (fm, y) = max
fm�0,y�φ
αv(y − φ)
N∑
n=1
F∑
f=1
L∑
l=1
βnqnfBfl
− αf
M∑
m=1
zmamfm +
M∑
m=1
am min
{
fm,
N∑
n=1
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
}
(3)
where αf and αv denote weighted factors to represent the
tradeoff between the resource cost and content revenue. We
assume that αf and αv are greater than zero. φ denotes the
content cost of CP, such as caching cost and backhaul cost;
Tn,thr represents the maximum delay required by user n. The
last term means that we should guarantee users enjoy their
video streaming service under tolerable delay.
3) Content Demand Model for Users: Considering the
transmission rate and quality level of content jointly, the
optimization problem for the user n can be formulated as
max
pmn�0,βn�0
Un
user(pmn, βn) = max
pmn�0,βn�0
−μpzmpmn−
μvyβn
F∑
f=1
L∑
l=1
qnfBfl +min
{
Rmn,
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
}
(4)
where μp and μv denote weighted factors of the power cost
and content cost, respectively. Similarly, we assume that μp
and μv are greater than zero. The last term means that we
should consider the balance between transmission rate and
proper quality levels of video contents.
B. Analysis of the Proposed Three-State Stackelberg Game
In this subsection, we analyze the proposed game and
introduce a backward induction method to solve it.
1) User Level Game Analysis: We decompose the optimiza-
tion problem into two sub-problems. At first, we keep βn
unchanged and optimize p∗mn to obtain the optimal β∗
n. For
an arbitrary user n, its utility function is defined in two cases:
(1) Rmn �
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
; (2) Rmn >
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
.
For the first case, we can obtain the utility function as
Un
user(pmn, βn) =wmn log2
(
1 +
pmn|hmn|2
δ2
)−
μvyβn
F∑
f=1
L∑
l=1
qnfBfl − μpzmpmn
(5)
When 1−μvyTn,thr > 0, the n-th user’s utility function is
a concave function of pmn, since
∂2Un
user
∂p2mn
= −wmn|hmn|4(1− μvyTn,thr)
ln 2(pmn|hmn|2 + δ2)2
< 0 (6)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:50:32 UTC from IEEE Xplore.  Restrictions apply. 
The optimal power allocation strategy p∗mn is derived as
p∗mn =
[
wmn(1− μvyTn,thr)
ln 2μpzm
− δ2
|hmn|2
]+
(7)
Because the utility function of βn is monotonic decreasing,
the optimal quality level strategy β∗
n is derived as,
β∗
n =
[
wmnTn,thr
F∑
f=1
L∑
l=1
qnfBfl
log2
(
wmn|hmn|2(1− μvyTn,thr)
ln 2μpzmδ2
)]+
(8)
When 1 − μvyfTn,thr < 0 , the utility function of pmn is
a convex function, we obtain the minimum of the function as
p∗mn =
[
wmn(1−μvyTn,thr)
ln 2μpzm
− δ2
|hmn|2
]+
. βn achieves optimal
when pmn = 0. Then the utility function is a monotonic
decreasing function with βn. So when β∗
n = 0, the utility
function gets the maximum value, but this situation makes no
sense in the real networks. Since a user requires service, its
data rate and quality level of content should be above zero.
For the second case, the utility function of βn is derived as
Un
user(pmn,βn) = (
1
Tn,thr
− μvy)βn
F∑
f=1
L∑
l=1
qflBfl − μpzmpmn
(9)
When (1 − μvyTn,thr) > 0, Un
user(βn) is a monotonic
increasing function. We can obtain the optimal quality level as
β∗
n =
[
wmnTn,thr
F∑
f=1
L∑
l=1
qnfBfl
log2
(
1+
p∗
mn|hmn|2
δ2
)]+
. Thus, we keep
the transmission power pmn unchanged to make β∗
n achieve
the optimal value.
When (1 − μvyTn,thr) < 0, Un
user(βn) is a monotonic
decreasing function. So when β∗
n = 0, the utility function
gets the maximum value, but this situation makes no sense in
the real networks as well.
2) CP Level Game Analysis: By using the decomposition
method, we first keep the content price y unchanged to get
the optimal fm to maximize UCP , and then we obtain the
desired value of y. The CP chooses a set of SBSs with the
lowest resource price z∗m one by one to purchase computing
resource. The CP’s utility function is also defined in two cases:
(1) fm �
N∑
n=1
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
; (2) fm >
N∑
n=1
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
.
For the first case, we obtain the utility function as
UCP (fm, y) =
M∑
m=1
amfm(1− αfzm)+
αv(y − φ)
N∑
n=1
F∑
f=1
L∑
l=1
βnqnfBfl
(10)
When 1− αfzm < 0, the utility function is monotonic de-
creasing of fm and the optimal computing resource allocation
f∗
m = 0. It only happens when the selected quality level of
content is cached exactly at SBS m and delivered to the user
directly.
When 1− αfzm > 0, the utility function is monotonic in-
creasing of fm and the optimal computing resource allocation
is f∗
m =
N∑
n=1
[
wmn log2
(
wmn|hmn|2(1−μvyTn,thr)
ln 2μpzmδ2
)]+
.
For the second case, the utility function is shown below,
UCP (fm, y) =
M∑
m=1
N∑
n=1
am
βn
F∑
f=1
L∑
l=1
qnfBfl
Tn,thr
−
αf
M∑
m=1
zmamfm + αv(y − φ)
N∑
n=1
F∑
f=1
L∑
l=1
βnqflBfl
(11)
Because of −αf
M∑
m=1
zmam < 0, the utility
function is monotonic decreasing of fm and
the optimal computing resource allocation is
f∗
m =
N∑
n=1
[
wmn log2
(
wmn|hmn|2(1−μvyTn,thr)
ln 2μpzmδ2
)]+
.
Next, we rewrite the utility function UCP of y as shown
in formula (12) and calculate the feasible content price y for
CP. Because UCP is a piecewise function of y, we cannot
solve it by derivation directly. We introduce a new variable
Dn =
wmn|hmn|2−ln 2μpzmδ2
wmn|hmn|2μvTn,thr
and sort all Dn in ascending
order as D1 � D2 � · · · � DN . We get N intervals as
[0, D1), (D2, D3), · · · , (DN−1, DN ). By piecewise differenti-
ating of function UCP in each interval, we obtain it is concave
except most D non-differentiable points, since
∂2UCP
∂y2
= −
{ M∑
m=1
N∑
n=1
wmnμvT
2
n,thr
[
2αv
ln 2(1− μvyTn,thr)
+
μv(am − αfzmam + αv(y − φ)Tn,thr)
ln 2(1− μvyTn,thr)2
]}
< 0
(13)
Thus the utility function of CP is a concave function
without some non-differentiable points D1, D2, · · · , DN . This
non-cooperative competitive game exists at least one Nash
UCP =
M∑
m=1
N∑
n=1
{
wmn
[
am − αfzmam + αv(y − φ)Tn,thr
]
log2
(
wmn|hmn|2(1− μvyTn,thr)
ln 2μpzmδ2
)}
(12)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:50:32 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Resource Allocation Iteration Algorithm
1: Initialization: Initialize the maximum number of iterations
Γ and set iteration number τ = 0; Initialize a default
resource price z for each SBS.
2: while τ < Γ do
3: The CP determines the content price y to their users
and the amount of computing resources based on zm;
4: Each user selects the quality level of required contents
βn and decides the amount of power resource pmn;
5: SBSs update their prices: zm(τ) = Gm(z−m(τ − 1));
6: if ‖z(τ)− z(τ − 1)‖/‖z(τ − 1)‖ � ε then
7: Output the resource allocation z;
8: Break.
9: end if
10: τ = τ + 1;
11: end while
equilibrium (NE). We can obtain this optimal value of y
in each interval by multiple methods (e.g., a binary search
algorithm and a gradient-based algorithm).
3) SBSs Level Game Analysis: We introduce the Bertrand
game to model the competition among SBSs [15]. The set of
the game players is M = {1, · · · ,m, · · · ,M}, the strategy
set is zm, and the pay off function of the SBS is Um
SBS . The
profit of the SBS m depends not only on the resource price
zm and the cost γm, but also on the resource prices z−m
offered by the other SBSs. The SBS with the lowest price
will occupy the entire content delivery market. Hence, every
SBS tries to reduce its resource price until hitting the bottom
with zero profit. Without loss of generality, let the cost set in
an ascending order γ1 < γ2 < · · · < γM .
Definition 1 (Nash-equilibrium): A resource price z∗ =
(z∗1 , · · · , z∗m, · · · , z∗M , ) is in an NE if neither SBS can in-
crease its profit Um
SBS by unilaterally changing the price.
The NE of the Bertrand game with multiple SBSs is shown
as z∗ = {z∗1 , γ2, γ3, · · · , γM}, where z∗1 denotes the price
strategy of the first SBS at the NE. The z∗1 can be derived as
z∗1 = arg max
γ1�z1<γ2
U1
SBS(z1) where U1
SBS(z1) is the utility
function of SBS 1 when it occupies the whole market, shown
as formula (14) at the bottom of the page.
C. Analysis of Convergence and Feasibility
In the duopoly case, the convexity of the follower’s reaction
function is essential for the uniqueness of the Stackelberg
equilibrium [16]. Since we have proved that each stage exists
an equilibrium in an NE, the NE of the proposed three-stage
Stackelberg game model exists. Moreover, since each stage
exists a unique equilibrium, the existence and uniqueness
TABLE I: The simulation parameters
Simulation parameters Value
The bandwidth 20MHz
The SBSs density 700 SBSs/Km2
The users density 1000 Users/Km2
Power spectral density of noise −174dBm/Hz
Cache capacity of each SBS [200-400]
Computing capability of each SBS [100-200]Mbps
The backhaul capacity of the m-th SBS Rm,b [40− 100]Mbps
The maximum transmission power of each SBS [1− 2]W
of the equilibrium of the proposed three-stage game are
guaranteed. Based on the above analysis, a resource allocation
iteration algorithm is proposed as shown in algorithm 1. The
algorithm will stop when the resource prices z converge.
Since the resource allocation in the whole network is
realized in a distributed manner, the CP, SBSs and users
only need to optimize their utility based on the response of
other entities. Comparing to the centralized schemes, which
optimize a unified objective in a centralized manner, the
computational complexity and the signaling overheads of the
proposed approach can be reduced significantly.
IV. SIMULATION RESULTS AND DISCUSSIONS
In this section, we evaluate the performance of the proposed
approach in wireless networks with MEC and blockchains via
Monte Carlo simulation. We consider a 120m× 120m square
area in an urban environment. The number of available videos
is 1000, with popularity following a Zipf distribution with
exponent 0.8. We assume the videos are distributed between
200 kbps and 2 Mbps. The channel gain models presented in
3GPP standardization are adopted here. The key simulation
parameters are summarized in Table I.
For comparison, we choose three typical schemes as fol-
lows: 1) the no-caching scheme that delivers video file without
caching, as labeled as “No caching”; 2) the no-transcoding
scheme that delivers video file without transcoding, as labeled
as “No transcoding”; 3) the centralized resource allocation
scheme is attained by method of exhaustion to minimize the
network cost for video transcoding and delivery, as labeled as
“Centralized scheme”.
Fig. 2 shows that, with the increase of the resource price
zm, users and CP have to decrease their required power and
computing resources, respectively. The reason is that when
the resource price is too high to afford for the users and CP,
both of them will reduce their required power and computing
resources step by step until stop transcoding and delivering
any content. The total network cost plays an important role
in optimizing network performance and improving resource
U1
SBS(z1) = (z1 − γ1)
(
ζfa1
N∑
n=1
[
w1n log2
(
w1n|h1n|2(1− μvyTn,thr)
ln 2μpz1δ2
)]+
+ ζp
N∑
n=1
[
w1n(1− μvyTn,thr)
ln 2μpz1
− δ2
|h1n|2
]+)
(14)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:50:32 UTC from IEEE Xplore.  Restrictions apply. 
2 4 6 8 10 12 14 16 18 20
Resource price offered by SBSs
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
2.2
2.4
P
ow
er
 a
llo
ca
te
d 
to
 u
se
r 
(W
)
100
110
120
130
140
150
160
170
180
190
200
C
om
pu
tin
g 
re
so
ur
ce
 a
llo
ca
te
d 
to
 C
P
 (
M
bp
s)
User
CP
Fig. 2: Resource allocation for CP and
users with various resource prices.
2 4 6 8 10 12 14 16 18 20
Total Frequency band (MHz)
0
20
40
60
80
100
120
140
160
180
200
T
ot
al
 n
et
w
or
k 
co
st
No caching
No transcoding
Proposed scheme
Centralized scheme
Fig. 3: Total network cost versus the total
frequency band.
2 4 6 8 10 12 14
Number of User
0
10
20
30
40
50
60
70
T
ot
al
 n
et
w
or
k 
co
st
No caching
No transcoding
Proposed scheme
Centralized scheme
Fig. 4: Total network cost versus the num-
ber of user.
utilization. We adopt network cost modeling in [17], which
considers energy consumption for transmission, processing,
as well as backhaul consumption. Figs. 3 and 4 illustrate the
total network cost versus the total frequency band and the
number of users, respectively. From Fig. 3, we can also see
that all the curves decrease gradually with the increase of the
frequency band. This is mainly because of the fact that spec-
trum allocation usually plays an important role in improving
the transmission rate between users and SBSs. Then, it can
reduce the network cost for transmission greatly. In Fig. 4, the
total network cost of the “No caching” scheme is the highest
compared with other schemes. The reason is that, without
caching proactively, the SBSs have to transmit contents by
fetching from remote CP via backhaul links. Hence, duplicate
content transmissions exist and huge backhaul resources are
needed to provide. Moreover, when transcoding technology is
used, the SBSs can process different quality level of contents
at the network edge. In this way, the duplicated content
transmission is further reduced and less backhaul resource
consumption is needed.
V. CONCLUSION AND FUTURE WORK
In this paper, we proposed a video transcoding and delivery
approach in blockchain-based MEC networks. In the proposed
approach, SBSs equipped with MEC servers provide their
resources for supporting adaptive video streaming in a dis-
tributed, incentivized and secure manner. Furthermore, we for-
mulated the optimization problem, including resource alloca-
tion, determining content price and quality levels of contents,
as a three-stage Stackelberg game. We analyzed the subgame
equilibrium for each stage and the interplays of the three-
stage game. An iterative algorithm was proposed to obtain the
solution. Simulation results show that the proposed approach
achieves better performance over other existing schemes. For
future work, we will jointly consider the efficient content
cache placement and transcoding strategies to optimize the
users’ experience and improve the resource utilization based
on the blockchain, edge caching, and computing.
REFERENCES
[1] Y. Zhou, F. R. Yu, J. Chen, and Y. Kuo, “Resource allocation for
information-centric virtualized heterogeneous networks with in-network
caching and mobile edge computing,” IEEE Transactions on Vehicular
Technology, vol. PP, no. 99, pp. 1–1, 2017.
[2] Y. Liu, F. R. Yu, X. Li, H. Ji, H. Zhang, and V. C. M. Leung,
“Joint access and resource management for delay-sensitive transcoding
in ultra-dense networks with mobile edge computing,” in Proc. IEEE
ICC‘18, Kansas City, MO, USA, May 2018.
[3] Y. Li, P. A. Frangoudis, Y. Hadjadj-Aoul, and P. Bertin, “A mobile
edge computing-based architecture for improved adaptive http video
delivery,” in Proc. IEEE CSCN‘16, Oct. 2016, pp. 1–6.
[4] H. A. Pedersen and S. Dey, “Enhancing mobile video capacity and
quality using rate adaptation, ran caching and processing,” IEEE/ACM
Transactions on Networking, vol. 24, no. 2, pp. 996–1010, Apr. 2016.
[5] Y. Jin, Y. Wen, and C. Westphal, “Optimal transcoding and caching
for adaptive streaming in media cloud: an analytical approach,” IEEE
Transactions on Circuits and Systems for Video Technology, vol. 25,
no. 12, pp. 1914–1925, Dec. 2015.
[6] Z. Wang, L. Sun, C. Wu, W. Zhu, and S. Yang, “Joint online transcoding
and geo-distributed delivery for dynamic adaptive streaming,” in Proc.
IEEE INFOCOM‘14, Toronto, Canada, Apr. 2014.
[7] F. R. Yu, J. Liu, Y. He, P. Si, and Y. Zhang, “Virtualization for distributed
ledger technology (vdlt),” IEEE Access, vol. 6, pp. 25 019–25 028, 2018.
[8] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[9] D. K. Tosh, S. Shetty, X. Liang, C. Kamhoua, and L. Njilla, “Con-
sensus protocols for blockchain-based data provenance: Challenges and
opportunities,” in Proc. IEEE UEMCON‘17, Oct. 2017, pp. 469–474.
[10] F. Xiang, W. Huaimin, S. Peichang, F. Yingwei, and W. Yijie, “Jcledger:
A blockchain based distributed ledger for jointcloud computing,” in
Proc. IEEE ICDCSW‘17, June 2017, pp. 289–293.
[11] N. Herbaut and N. Negru, “A model for collaborative blockchain-based
video delivery relying on advanced network services chains,” IEEE
Communications Magazine, vol. 55, no. 9, pp. 70–76, 2017.
[12] W. Wang, D. Niyato, P. Wang, and A. Leshem, “Decentralized caching
for content delivery based on blockchain: A game theoretic perspective,”
arXiv preprint arXiv:1801.07604, 2018.
[13] Z. Tan, F. R. Yu, X. Li, H. Ji, and V. C. M. Leung, “Virtual resource
allocation for heterogeneous services in full duplex-enabled scns with
mobile edge computing and caching,” IEEE Transactions on Vehicular
Technology, vol. 67, no. 2, pp. 1794–1808, Feb. 2018.
[14] Y. L. Lee, J. Loo, T. C. Chuah, and A. A. El-Saleh, “Fair resource
allocation with interference mitigation and resource reuse for lte/lte-
a femtocell networks,” IEEE Transactions on Vehicular Technology,
vol. 65, no. 10, pp. 8203–8217, Oct. 2016.
[15] B. Wang, Y. Wu, and K. R. Liu, “Game theory for cognitive radio
networks: An overview,” Computer Networks, vol. 54, no. 14, pp. 2537–
2561, 2010.
[16] H. D. Sherali, A. L. Soyster, and F. H. Murphy, “Stackelberg-nash-
cournot equilibria: characterizations and computations,” Operations
Research, vol. 31, no. 2, pp. 253–276, 1983.
[17] Y. Liu, F. R. Yu, X. Li, H. Ji, and V. C. M. Leung, “Distributed resource
allocation and computation offloading in fog and cloud networks with
non-orthogonal multiple access,” in Proc. IEEE Infocom WKSHPS‘18,
2018, pp. 1–6.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:50:32 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize false
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages true
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages true
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages true
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Required"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice