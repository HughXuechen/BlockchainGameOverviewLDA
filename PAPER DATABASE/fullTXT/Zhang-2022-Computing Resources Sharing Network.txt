Computing Resources Sharing Network in Urban Rail Transit System Architecture and Incentive Mechanism Design
Computing Resources Sharing Network In Urban Rail Transit: System
Architecture and Incentive Mechanism Design
MeiXin Zhang1, GaoFeng Hua2 and Hao Liang3
Abstract— Edge computing has recently emerged as a novel
computing paradigm that offers low-latency computing services
in urban rail transit systems. Suffering from constrained
computing resources due to their limited physical sizes, edge
servers cannot always handle all the incoming computation
tasks timely when they operate independently. They often
need to cooperate through peer-offloading.However, Deployed
and managed by different operation department, edge servers
operate in a distrusted environment. To realize safe and reliable
computing resource sharing in urban rail transit systems,
we propose a blockchain-based computing resource sharing
architecture. Blockchain provides audit and check function to
guarantee computing resource sharing security[1]. We explore
the data share incentive mechanism impact on share willingness
of edge servers. An evolutionary game model is formulated for
the edge servers with limited rationality to adapt their sharing
strategies aiming to maximize their individual utility. Extensive
experiments are conducted and illustrated that edge servers
of different department can share their computing resource
efficiently and safely in our proposed sharing system. Our
proposed evolutionary game model can determine the most
effective resource share incentive mechanism.
I. INTRODUCTION
Due to its large passenger capacity, fast operation speed
and safety and punctuality, urban rail transit has gradually
become the backbone of urban integrated public transport
network. With the development of urban rail transit, the
number of devices in urban rail transit lines is increasing
and computing resources are being deployed in a ubiquitous
manner, which inevitably leads to the “computing sil” effect.
Faced with more and more computing tasks, the computing
equipment of each department shows an uneven utilization
of resources in time and space[2]. The traditional computing
model is generally divided into centralized and distributed.
Centralized computing centralizes tasks, easily achieves high
consistency, and achieves high reliability through redundancy
of storage and highly optimized combination of hardware and
software, but suffers from low overall resources utilization,
insecurity, low availability and other problems. Distributed
computing disperses tasks into numerous smaller tasks for
processing, which facilitates flexible resources utilization and
This paper was supported by Natural Science Foundation of China
under Grants (61973026), Beijing Municipal Education Commission
Funding (I20H100010,I19H100010), Beijing Natural Science Foundation
(L201002), in part by the Beijing Jiaotong University Project under Grant
(RCS2021ZZ005, 2021CZ107). This paper is supported by the Fundamental
Research Funds for the Central Universities (2021QY004).
M. Zhang , G. Hua and H. Liang are with the State Key Labo-
ratory of Traffic Control and Safety, Beijing Jiaotong University, Bei-
jing, P. R. China (e-mail: 18211242@bjtu.edu.cn, gaofeng.hua@bjtu.edu.cn,
hao.liang@bjtu.edu.cn). Corresponding author: M. Zhang.
sharing of computing resources, but also suffers from two
major problems
• Lack of an effective computing power sharing mecha-
nism, the equipment in urban rail transit lines has the
characteristics of broad distribution space and strong
heterogeneity. These devices often belong to different
operators, and due to lack of effective incentives[3],
operators do not have the will to cooperate with each
other, resulting in serious resource island. As a result,
the computing resources of some devices cannot meet
the processing requirements of business applications,
and the computing resources of other devices are in an
idle state, unable to provide rich and efficient computing
services in the case of multi-party collaboration.
• There is a lack of trustworthy computing trust manage-
ment mechanism. The security protocols used by hetero-
geneous devices in urban rail transit are different, and
the plug-in and patching protection methods can hardly
meet their security needs. When sharing arithmetic
resources in urban rail transit, it is necessary to evaluate
and ensure that computing tasks can be completed by
arithmetic resources devices with trustworthy identities,
trustworthy behaviors and quality of service to meet the
demand, but the current arithmetic network still lacks
trust management solutions for arithmetic resources
devices. Secondly, there is still a lack of trustworthy
transactions of arithmetic resources and a secure and
traceable storage solution for transaction records
Blockchain technology[4] provides new ideas for dis-
tributed arithmetic networks. Unlike the traditional cen-
tralised bookkeeping technology,blockchain is a new type of
distributed bookkeeping technology. By means of distributed
bookkeeping, it can effectively solve the problem of data
being easily tampered with, stolen and lost in the tradi-
tional centralised authentication method, and also effectively
enhance the trust between nodes in the system. In this
paper, we propose an incentive model for sharing arithmetic
resources in a distributed rail transit arithmetic network with
blockchain technology to promote the participation of nodes
in the urban rail transit arithmetic network[5].
Specifically, the contributions of this paper mainly lie in
three folds:
• We propose an incentive model to promote computing
resources sharing, and use the parameter U to evaluate
the computing resources resources usage of computing
nodes. It can be expressed as Utility=Reward-Cost,
where Reward is the incentive and Cost is the cost.
2022 IEEE 25th International Conference on Intelligent Transportation Systems (ITSC)
October 8-12, 2022, Macau, China
978-1-6654-6880-0/22/$31.00 ©2022 IEEE 2986
20
22
 IE
EE
 2
5t
h 
In
te
rn
at
io
na
l C
on
fe
re
nc
e 
on
 In
te
lli
ge
nt
 T
ra
ns
po
rt
at
io
n 
Sy
st
em
s (
IT
SC
) |
 9
78
-1
-6
65
4-
68
80
-0
/2
2/
$3
1.
00
 ©
20
22
 IE
EE
 |
 D
O
I: 
10
.1
10
9/
IT
SC
55
14
0.
20
22
.9
92
25
95
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:53:59 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. Computing resources network architecture
• We propose an evolutionary game model suitable for
the computing resources sharing incentive model. It
is mainly used to train the computing resources dis-
tribution strategy of computing nodes. Its goal is to
balance the utility of computing nodes in the computing
resources network.
• Extensive experiments are conducted and illustrated
that edge servers of different department can share
their computing resource efficiently and safely in our
proposed sharing system. Our proposed evolutionary
game model can determine the most effective resource
share incentive mechanism.
The remainder of the paper is organized as follows:
Section II gives a brief introduction of computing resources
network and describes reward model. The application of
evolutionary games to the model is introduced in the Section
III. Numerical performance and conclusion are given in
Section IV and Section V respectively.
II. COMPUTING RESOURCES SHARING
SCENARIO
A. Computing Resources Network Architecture
Urban rail transit computing resources network framework
as shown in Fig. 1: it can be divided into blockchain layer,
service layer and device layer. The device layer mainly
includes devices that can provide computing services or
have computing needs. The service layer collects computing
tasks from the device layer and matches computing request
nodes with computing service nodes with the help of trust
management mechanism[6] and incentive mechanism. The
blockchain layer is responsible for safely and securely storing
the information of computing nodes, computing service
transaction information, and finally completes the transaction
clearing and updates the reputation value of computing nodes
after the transaction is completed.
Fig. 2. Computing resources sharing process
B. Computing Resources Sharing Process
Blockchain-based computing resource sharing process[7]
as shown in Fig. 2, which are: 1) The requesting node
publishes the task information, which includes the computa-
tion requirement, the identity of the computation node and
the digital signature of the requesting node. 2) The service
layer verifies the identity of the requesting node through the
blockchain network query. 3) The service layer selects the
appropriate computation service node (one or more) for the
requesting node with the help of reputation value and incen-
tive mechanism. 4) The service layer establishes the network
connection for both sides of the transaction. 5) The service
layer formulates the electronic contract. 6) Both parties sign
the contract and verify that the signatures are correct. 7)
The service layer uploads the contract information to the
blockchain. 8) The smart contract maintains the transaction
process and clears the transaction. 9) The reputation value is
updated.
C. Reward Model
We assume that computing resources sharing network
includes N compute service nodes and M compute re-
quest nodes. The index sets of compute service nodes and
compute request nodes are denoted by n ∈ [0, N ] and
m ∈ [0,M ]. Let Pn denote the computational resources
size of compute service node n and Dm denote the task
size. Tn,m denotes the computational time required for
compute service node n to serve compute request node m
and τn,m denotes the latency of compute service node n to
serve compute request node m. xn,m denotes the possibility
for computation service node n to provide computation to
computation request node m. xn = [xn,1, xn,2, . . . , xn,M ]
denotes the selection strategy of computation service node n
and X =
[
XT
1 , X
T
2 , . . . , X
T
N
]
denotes the selection strategy
for all computation service nodes. Then, the magnitude of
arithmetic resources contributed by computation service node
n to computation request node m can be expressed asxn,mPn,
and the arithmetic resources received by computation request
node m from computation service node can be expressed as∑N
i=1 (xn,mPn), Let rm(·) denote the incentive function to
describe the incentive that computation requesting node m
needs to pay to the computation service node for the task
2987
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:53:59 UTC from IEEE Xplore.  Restrictions apply. 
that has been published. The payoff required to be paid
by the computation request node m is: r
(∑N
i=1 xn,mPn
)
In addition, given that the greater the arithmetic resources
provided by the compute service node, the smaller the Tn,m
of the compute service node will be, this situation is more in
the interest of the compute requesting node, and the compute
service node will be paid from the compute service node in
proportion to its contribution in terms of arithmetic resources
size. For example, the proportion of arithmetic resources
contributed by compute service node n to compute request
node m is
∑N
i=1 (xn,m ∗ Pn) , so the incentive received by
compute service node n from compute request node m is
Rn,m = r
(
N∑
n=1
xn,mPn
)
xn,m ∗ Pn∑N
i=1 (xn,m ∗ Pn)
+ αm
where αm is the additional incentive provided by compu-
tation request node m to computation service node, and
αm > 0 in general.
On the other hand, compute service node n also incurs
costs when contributing its own computing resources, such as
time costs and energy costs incurred by compute resources.
Let Cn,m denote the cost incurred by compute service node
n in providing services to compute request node m. Thus,
the cost of compute service node n to provide service to
compute request node m is
Cn,m = βnxn,mPn
So we can define U as the utility function for computing
the service node. Un,m represents the utility of computing
service node n providing services to computing request node
m, which can be expressed as:
Un,m = Rn,m − Cn,m
We can define un = [Un,1, Un,2, . . . , Un,m]
T for calculating
the utility of the service node n vector.
III. EVOLUTIONARY GAME BASED ON RAIL
TRANSIT
In this section, we give an evolutionary game formulation
for the selection strategy of computing nodes in rail transit
computing resources sharing network. The replicator dynam-
ics model is used to model the strategy adaptation process.
A. Game Function
Computing resources sharing incentive problem can be
expressed as an evolutionary game[8], as follows:
Set of Players N: Computing service node set N refers
to the set of players playing games in the game, that
is, computing nodes providing computing resources in the
scenario of computing resources sharing.
Set of Action A: Compute service nodes, i.e. training
strategies for game players whose goal is to maximize their
personal utility in the long run. According to the system
model, xn gives the training strategy of computing service
node N, and X =
[
XT
1 , X
T
2 , . . . , X
T
N ,
]
gives the training
strategy of all computing service nodes. Accordingly, we
define the set of operations for each mobile device as A.
Utility function: the utility of computing service node N to
computing request node M evaluates the effect of its selection
strategy xn,m. Let U = [u1, u2, . . . , un] represent the utility
function matrix of computing service nodes.
According to the above definition, we define the evolu-
tionary game function φ as follows:
φ = (N,A,U)
B. Selection Strategy Training
In the context of evolutionary games, each computing
service node dynamically adjusts its strategy according to its
utility[9]. This is called the evolution of the game, and the
strategy adaptation of the computing service nodes affects the
computing resources distribution of the computing service
nodes, so the training strategy evolves over time.
In this case, the resources distribution xn,m is a function of
time t and can be expressed as xn,m(t) . The policy adapta-
tion process and corresponding training policy evolution can
be modeled and analyzed by replicator dynamics, which is
a set of ordinary differential equations defined as follows:
ẋn,m(t) = xn,m(t) (un,m(t)− ūn(t))
where all xn,m ∈ [0, 1] , and
∑M
m=1 xn,m = 1, ūn is the
average utility of computing service node training strategy,
which can be expressed as is
ūn =
M∑
m=1
un,mxn,m
The replicator dynamics controls the policy fitness rate of
the training policy. As the game repeats, each compute
service node observes its own utility and compares it to
the average utility. Then, in the next period, if the utility
of the computing service node is lower than the average,
the mobile device forms another strategy. Through replicator
dynamics, the probability xn,m of the computing service
node n to the computing requesting node m will increase
if the utility of the corresponding computing service node
n to the computing requesting node m is higher than the
average; If the utility of the computing service node n to
the computing requesting node m is lower than the average
value, the probability xn,m of the computing service node n
to the computing requesting node m will decrease.
IV. SIMULATION EVALUATION
A. Model Parameter Settings
We evaluate three computing request nodes, they publish
different tasks respectively, and the size of the tasks is
Dm = [1000, 3000, 5000] , and Dm is the computing amount
required by the task, which is expressed in CPU cycles. The
computing resources of the computing server point is related
to the frequency of the computer. We normalize the comput-
ing resources of each computing node, and the value of Pn is
2988
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:53:59 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I
PARAMETER SETTING IN REWARD MODEL
Parameter List
parameter value
M 3
Dm [1000, 3000, 5000]
αm [0.5, 0.5, 1]
N 3
βn,1
 0.2 0.6 1
0.2 0.6 1
0.2 0.6 1

x0
 0.1 0.3 0.6
0.3 0.6 0.1
0.6 0.1 0.3

Pn ∈ [0, 1]. τn,m represents the delay for computing service
node n to provide service for computing requesting node m,
which is composed of transmission time and computing time
Tn,m. The computing time Tn,m required by the computing
service node n to provide services for the computing request
node m is proportional to the amount of tasks and inversely
proportional to the computing resources of the computing
node. In the simulation calculation process, we take the
computing resources of the three computing service nodes
as P1 = P2 = P3 = 1.
The parameter settings can be viewed in TABLE I. From
the table, we can know that the same computing service
node has different cost coefficients for different computing
request nodes, and in the simulation environment βn,1 <
βn,2 < βn,3, this is due to the higher cost incurred for
tasks with larger computational load, indicating that larger
tasks often mean higher costs. At the same time, for the
same computing request node, different computing service
nodes may also have different cost coefficients, which may
be due to the influence of τn,m or the influence of integrity
factors. Besides, the additional incentive α3 of computing
requesting node 3 is much larger than that of the other two
computing requesting nodes, which indicates that when the
three computing requesting nodes receive the same comput-
ing resources, computing requesting node 3 gives a higher
incentive than the other two computing requesting nodes.
Incentives for computing request nodes.
1)Incentive: The incentive generated by computing service
node n providing computing resources to computing request-
ing node m is Rn,m = r
(∑N
n=1 xn,mPn
)
xn,m∗Pn∑N
i=1
(xn,m∗Pn)
+
αm, the incentive consists of basic incentive and additional
incentive αm, The basic incentive is determined by the pro-
portion of computing resources contributed by the computing
service node n to the computing requesting node m. The
change of the incentive that the computing requesting node
needs to pay with the increase of computing resources is
shown in Fig. 3.
The incentive function r(·) is a curve function that first
Fig. 3. Reward Fig. 4. Cost
grows rapidly and then gradually becomes stable[2], which
indicates that with the increase of computing resources, the
incentive obtained by unit computing resources will gradu-
ally decrease and finally stabilize. This shows that when the
computing resources received by the computing request node
gradually increases, the reward per unit computing resources
will gradually decrease until it stabilizes to a certain value.
For the computing resources sharing network, computing
service nodes are more inclined to provide services for
computing requesting nodes with less computing resources,
and at the same time, it prevents too much computing
resources from flocking to the same computing requesting
node at the same time. In order to obtain the excitation
function, we conducted a lot of experiments and finally
selected the function that is most conducive to improving
the utility of each node of the shared network.
2)Cost: The cost of computing service node n providing
computing force for computing request node m is Cn,m =
βnxn,mPnTn,m, where xn,mPn represents the computing
force provided by computing service node n for computing
request node m. That is to say, as the computing force
provided by computing service node n for computing request
node m increases, the cost generated by computing service
node n will increase proportionally. The change of cost
generated by computing service nodes with the increase of
computing resources is shown in Fig. 4.
B. Stability Analysis
The game party has bounded rationality, which means that
in the game process, the game party cannot find the optimal
strategy to obtain the maximum benefit through one game,
but through continuous learning and imitation in the repeated
game process, to find a better strategy. The learning process
is also a dynamic adjustment process of a policy. In the
process of studying bounded rationality game party learning
and strategy adjustment, people found that the dynamic
mechanism of biological evolution can be used to simulate,
and put forward the concept of “evolutionary stable strategy”
which is very similar to biological evolutionary game. The
general evolutionary game model is mainly established based
on two aspects: selection and mutation, that is, the survival of
the fittest in different populations and the mutation of some
individual genes in the process of biological evolution. The
process of repeated game by bounded rational players is also
a process of learning and selection. The players adjust their
strategies through continuous learning and imitation, so that
2989
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:53:59 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 5. Utility Fig. 6. Computing service node 1
their own interests can be improved, and the final structure
can reach a dynamic equilibrium[10].
C. Evolutionary Game Dynamics
Next, we study the dynamics and evolution of utility
and selection strategies for computing service nodes. The
computing service node has the same computing force, the
computing request node issues different tasks with differ-
ent computing amount and the additional excitation of the
computing request node is different. The dynamic process is
shown in Fig. 5-Fig. 8.
Utility changes: The utility changes of computing service
nodes over time are shown in Fig. 5. It can be seen that
the utility of the three computing service nodes is very
different at the beginning, which indicates that the comput-
ing resources resources of some devices in the computing
resources network cannot meet the processing requirements
of business applications at the moment, and the computing
resources resources of other devices are relatively idle. As
time changes, the effectiveness of three computing service
node eventually reached a stable state, and the effectiveness
of the three distribution is relatively balanced, this shows
that the computing service nodes to calculate force resources
usage is relatively stable, further can be thought of work
force in the network computing nodes to calculate force is
relatively balanced use, avoid the resources utilization of time
and space on imbalance situation.
Change of selection strategy: Fig. 6 describes the change
of the selection strategy of computing service node 1 over
time, Fig. 7 describes the change of the selection strategy of
computing service node 2 over time, and Fig. 8 describes the
change of computing service node 3 changes in the selection
strategy over time. As can be seen from the figure, although
the computing resources of the three computing service
nodes is the same, their starting selection strategies are
different. Over time, computing service nodes will converge
to different selection strategies. Comparing their final stable
selection strategies, it can be seen that all three computing
service nodes prefer computing requesting node 1, which
may be because computing requesting node 1 gives higher
incentives than the other two computing requesting nodes.
Their respective preferences for computing requesting node
2 and computing requesting node 3 are different, which may
be related to the trust of computing requesting nodes and the
incentives given.
Fig. 7. Computing service node 2 Fig. 8. Computing service node 3
V. CONCLUSIONS
For the distributed rail transit computing resources sharing
network scenario that integrates blockchain technology, this
paper proposes a computing resources sharing incentive
model, and studies the selection strategy of computing ser-
vice nodes in the process of computing resources sharing.
The dynamic strategies of computing service nodes with
bounded rationality are modeled using evolutionary game
theory. For three different computing request nodes, two
indicators of benefit and cost are modeled and measured, and
the utility of each computing service node is calculated. On
this basis, we also conduct a large number of experiments to
continuously adjust the cost coefficient, incentive coefficient
and additional incentives, and the results verify the stability
of the evolutionary equilibrium. These results can be applied
to scenarios consisting of multiple computing request nodes
and multiple computing service nodes.
REFERENCES
[1] L. Zhu, H. Liang, H. Wang, B. Ning, and T. Tang, “Joint security
and train control design in blockchain-empowered cbtc system,” IEEE
Internet of Things Journal, vol. 9, no. 11, pp. 8119–8129, 2022.
[2] Y. Zou, S. Feng, D. Niyato, Y. Jiao, S. Gong, and W. Cheng, “Mobile
device training strategies in federated learning: An evolutionary game
approach,” in 2019 International Conference on Internet of Things
(iThings) and IEEE Green Computing and Communications (Green-
Com) and IEEE Cyber, Physical and Social Computing (CPSCom)
and IEEE Smart Data (SmartData), 2019, pp. 874–879.
[3] H. Liang, Y. Zhang, and H. Xiong, “A blockchain-based model sharing
and calculation method for urban rail intelligent driving systems,” in
2020 IEEE 23rd International Conference on Intelligent Transporta-
tion Systems (ITSC), 2020, pp. 1–5.
[4] U. C. Dublin, “Patent issued for peer-to-peer sharing of network
resourcess,” University College Dublin, vol. USPTO 10,425,947, 2019.
[5] F. Wu, Y. Cao, and T. G. Robertazzi, “Optimal divisible load schedul-
ing for resource-sharing network,” ArXiv, vol. abs/1902.01898, 2019.
[6] S. Iqbal, R. M. Noor, A. W. Malik, and A. U. Rahman, “Blockchain-
enabled adaptive-learning-based resource-sharing framework for iiot
environment,” IEEE Internet of Things Journal, vol. 8, no. 19, pp.
14 746–14 755, 2021.
[7] M. W. Jinxin Zhang, “Cooperation mechanism in blockchain by
evolutionary game theory,” vol. 2021, Complexity,2021.
[8] A. Bukkuri and J. S. Brown, “Evolutionary game theory: Darwinian
dynamics and the g function approach,” Games, vol. 12, no. 4, 2021.
[Online]. Available: https://www.mdpi.com/2073-4336/12/4/72
[9] J. Lin, C. Huang, Q. Dai, and J. Yang, “Evolutionary
game dynamics of combining the payoff-driven and
conformity-driven update rules,” Chaos, Solitons Fractals,
vol. 140, p. 110146, 2020. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0960077920305427
[10] B. Kang, G. Chhipi-Shrestha, Y. Deng, K. Hewage, and
R. Sadiq, “Stable strategies analysis based on the utility of
z-number in the evolutionary games,” Applied Mathematics and
Computation, vol. 324, pp. 202–217, 2018. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0096300317308597
2990
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:53:59 UTC from IEEE Xplore.  Restrictions apply.