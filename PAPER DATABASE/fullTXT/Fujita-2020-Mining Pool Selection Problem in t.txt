Mining Pool Selection Problem in the Presence of Block Withholding Attack
Mining Pool Selection Problem in the Presence of
Block Withholding Attack
Kentaro Fujita, Yuanyu Zhang, Masahiro Sasabe, and Shoji Kasahara
Graduate School of Science and Technology, Nara Institute of Science and Technology,
8916-5 Takayama-cho, Ikoma, Nara 630-0192, Japan.
fujita.kentaro.fk0@is.naist.jp, {yy90zhang, m-sasabe, kasahara}@ieee.org
Abstract—Mining, the process where multiple miners com-
pete to add blocks to Proof-of-Work (PoW) blockchains, is of
great importance to maintain the tamper-resistance feature of
blockchains. In current blockchain networks, miners usually
form groups, called mining pools, to improve their revenues.
When multiple pools exist, a fundamental mining pool selection
problem arises: which pool should each miner join to maximize
its revenue? In addition, the existence of mining pools also
leads to another critical issue, i.e., Block WithHolding (BWH)
attack, where a pool sends some of its miners as spies to
another pool to gain extra revenues without contributing to
the mining of the infiltrated pool. This paper therefore aims
to investigate the mining pool selection issue (i.e., the stable
population distribution of miners in the pools) in the presence of
BWH attack from the perspective of evolutionary game theory.
We first derive the expected revenue density of each pool to
determine the expected payoff of miners in that pool. Based
on the expected payoffs, we formulate replicator dynamics to
represent the growth rates of the populations in all pools. Using
the replicator dynamics, we obtain the rest points of the growth
rates and discuss their stability to identify the Evolutionarily
Stable States (ESSs) (i.e., stable population distributions) of the
game. Simulation and numerical results are also provided to
corroborate our analysis and to illustrate the theoretical findings.
Index Terms—Blockchain, Mining Pool, Evolutionary Game
Theory, Block Withholding Attack
I. INTRODUCTION
Blockchain, the key enabler of modern crypto currency
systems like Bitcoin [1], has been identified as the most rep-
resentative distributed ledger technology. Although initially
developed for managing financial transactions, blockchain
has also found potential applications in other fields, like
access control [2], data sharing [3] and supply chain man-
agement [4]. Blockchain, at its core, is a distributed database
managed over a Peer-to-Peer (P2P) network, where the data
(i.e., transactions) are stored in blocks, which are chained
together through cryptographic hashes. In addition to a set of
transactions, a block also contains a header, which consists
of the Merkle tree root of the transactions, the hash value of
the previous block header, a timestamp indicating the block
generation time, a Difficulty representing the difficulty of
mining and a Nonce used in the mining. A block is usually
limited in size. For example, in Bitcoin, the block size limit
is about 1 MB [5].
Blocks are appended to the blockchain at regular intervals
(e.g., about 10 minutes in Bitcoin), which is achieved by a
process called mining. In each round of the mining process,
peers called miners compete to generate the next valid block.
To be specific, a miner first collects a set of transactions
and encapsulate them along with other fields (e.g., hash
of previous block, timestamp, Difficulty and Nonce) into a
block [6]. Next, the miner repeats to calculate the hash of
the block header by varying the Nonce value, until it finds a
valid block whose hash value satisfies the Difficulty condition.
These two steps are conducted by all miners and the miner
that first finds a valid block wins in this round and will be
rewarded a certain amount of money [7].
Mining requires a huge amount of computation power and
thus it is difficult for individual miners to gain revenues
regularly in general. Therefore, in current blockchain net-
works, miners usually form groups called mining pools and
aggregate their computation power to improve their revenues.
A pool has a manager, who sets another relaxed Difficulty
that is easier to satisfy. All miners in this pool are required
to find the blocks that meet the relaxed Difficulty and report
them to the manager. The number of reported blocks will
be used to measure the contributions of the miners. Once the
manager receives a valid block (i.e., a block whose hash value
satisfies the true Difficulty), it broadcasts the valid block to
the whole P2P network. If the pool wins, the revenue will be
distributed to all its miners according to their contributions.
Therefore, when multiple mining pools exist in the network,
the fundamental mining pool selection problem arises: which
pool should each miner join to maximize its revenue?
Despite the benefits brought by mining pools, a pool can
infiltrate another to illegally gain more revenue by launching
the so-called Block WithHolding (BWH) attack [8]. Fig. 1
illustrates a typical BWH attack in the case with two pools,
where one pool (say Pool 1) attacks the other (say Pool 2).
When launching the BWH attack, Pool 1 sends some of its
miners as spies to Pool 2. Like normal miners, the spies
participate in the mining process of Pool 2, reporting non-
valid blocks and receiving revenues. However, when the spies
find valid blocks, they will not report them to the manager of
Pool 2. Instead, they will withdraw the blocks. In addition,
after receiving the revenues from Pool 2, the spies send them
back to Pool 1, which then redistributes the revenues among
its miners including the spies. Under this typical BWH attack,
the authors in [9] investigated the impacts of BWH attack on
the revenues of mining pools. In particular, they focused on
321
2020 IEEE International Conference on Blockchain (Blockchain)
978-0-7381-0495-9/20/$31.00 ©2020 IEEE
DOI 10.1109/Blockchain50366.2020.00047
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:37:51 UTC from IEEE Xplore.  Restrictions apply. 
������
������
�	
�����
�����
�	�	
�	
�
������	
Fig. 1: Illustration of BWH attack.
the case with two pools and modeled the miner’s revenue
density for each pool. The results showed that pools can
improve their revenues by launching the BWH attack to other
pools.
Without considering the BWH attack, the authors in [10]
addressed the mining pool selection issue (i.e., the population
state of miners in the pools) from the perspective of evolu-
tionary game theory [11]. The mining pool selection issue
in the presence of BWH attack has also been investigated in
[12] based on the evolutionary game theory as well. However,
for simplicity of analysis, the authors ignored the revenue
from infiltrated pools, rendering the incentive for launching
the BWH questionable. This paper therefore takes the revenue
from infiltrated pools into consideration and solves the mining
pool selection problem in the presence of BWH attack. We
first derive the expected revenue density of each pool to
determine the expected payoff of miners in that pool. Based
on the expected payoffs, we formulate replicator dynamics
to represent the growth rates of the populations in all pools.
Like [10] and [12], for simplicity, we then focus on the case
with two pools where one pool attacks the other. Using the
replicator dynamics, we obtain the rest points of the growth
rates for the special case and discuss their stability to identify
the Evolutionarily Stable State (ESS) (i.e., stable population
states) of the game. Simulation and numerical results are
also provided to corroborate our analysis and to illustrate the
theoretical findings.
The rest of the paper is organized as follows. Section II
introduces the related work. In Section III, we model the
mining pool selection problem in the presence of the BWH
attack as an evolutionary game. We focus on the analysis
of the special case in Section IV. In Section V, we provide
simulation and numerical results for the special case. Finally,
we conclude this paper in Section VI.
II. RELATED WORK
Game theory has been recognized as the most widely
used approach to model interactions among rational miners
or mining pools in the blockchain network [13]. Classical
models include non-cooperative game, extensive-form game,
coalition formation games and evolutionary game, which have
been applied to address different problems in the blockchain
context. For example, non-cooperative games can be applied
to the BWH attack [9], [14], coalition formation games have
found applications in the mining pool formation problem, i.e.,
how miners form mining pools [15], [16] and evolutionary
games are popular in the mining pool selection problem to
investigate the pool selection behaviors of miners [10], [12].
In this section, we mainly focus on the studies that applied
game theory (especially the evolutionary game model) to
analyze the mining pool selection problem in the presence
and absence of BWH attacks. For the detailed introduction of
the application of game theory to the blockchain, the readers
are referred to [13].
A. Mining Pool Selection without BWH Attack
The authors in [10] formulated the mining pool selection
problem as an evolutionary game, while they focused on a
case without the BWH attack. Each pool adopts different
parameters (e.g. , block size, minimum required hash rate)
as its strategies to attract miners to join. Based on these
parameters, each miner selects the pool to join to maximize
its revenue/payoff. As a result, each pool attracts a fraction of
the miners and the resultant population states of miners are of
great interest. To investigate the properties of the population
state, the authors applied the evolutionary game theory to
model the pool selection process of miners and determined
the ESS (i.e., stable population state) for the special case with
two pools.
B. Mining Pool Selection under BWH Attack
The authors in [12] considered the mining pool selection
under the BWH attack. In this research, they investigated
the strategies of mining pools under the BWH attack from
the perspective of mining pool administrators. The strategies
of mining pool are the population of attacker and the size
of blocks to be mined by pool.Based on these parameters,
miners measure their profits and select pools to join. The
authors also applied the evolutionary game theory to model
the pool selection in order to investigate the properties of
the population state. They described how pool administrators
change the mining strategies to drive the population of miners
to ESS. However, the authors neglected the revenues from
the infiltrated pools for simplicity of analysis, making the
incentive for launching the BWH attack arguable.
III. EVOLUTIONARY GAME FORMULATION
In this section, we address the mining pool selection issue
in the presence of BWH attack based on the evolutionary
game theory. We formulate the expected payoff of miners
in Section III-A and show the details of evolutionary game-
theoretic analysis for mining pool selection in Section III-B.
322
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:37:51 UTC from IEEE Xplore.  Restrictions apply. 
A. Expected Payoffs of Miners
Similar to [10], we consider a blockchain network con-
sisting of N miners and M pools. Each pool i adopts the
following parameters as its mining strategies:
• ωi: the minimum computation power (or hash rate) of
miners required to join the pool. To simplify the analysis,
all miners in this pool are assumed to use the same hash
rate for mining.
• si: the size of blocks to be mined by pool.
Let ω = [ω1, . . . , ωM ] denote the hash rate requirement
profile of the pools. In addition, to launch the BWH attack,
each pool i uses a fraction aij (0 < aij < 1) of its total
hash rate to infiltrate pool j. We denote the attack profile of
pool i by ai = [ai1, . . . , aiM ] with
∑M
j=1,j �=i aij ≤ 1 and
the total attack profile of all the pools by a = [a1, . . . ,aM ].
We denote the population fraction of miners in pool i by
xi (0 ≤ xi ≤ 1,
∑M
i=1 xi = 1) and the population profile
of the pools by x = [x1, . . . , xM ]�. According to [9], the
probability that pool i finds a valid block is given by
Pmine
i (x,ω,a) =
Nxiωi(1−
∑M
j=1 aij)∑M
j=1 Nxjωj(1−
∑M
k=1,k �=j ajk)
. (1)
After a pool finds a block, the pool must broadcast the
block to the entire network so that it can be added to the
blockchain managed by other pools. However, if multiple
mining pools find different new blocks at the same time,
each pool acknowledges the block that arrives first and
discards the subsequent blocks. The block propagation time
is determined mainly by the propagation delay on each link
and the transaction verification time on each relay node. For
a block of size s, the propagation delay can be modeled as
τp(s) = s/(γc), where γ is the parameter related to the scale
of the network and c is the average effective channel capacity
of each link. The transaction verification time can be modeled
as a linear function τv(s) = bs, where b is a parameter
determined by the scale of the network and average approval
time between each node. Thus, the average propagation time
can be expressed as
τ(s) = τp(s) + τv(s) =
s
γc
+ bs. (2)
We assume that the average block generation interval T
remains constant. Thus, the occurrence of effective block
discarding due to the propagation time of blocks can be
modeled as a Poisson process with mean 1/T [17]. As a
result, the probability of orphaning block of size s is
P orphan
r (s) = 1− e−τ(s)/T = 1− e−( s
γc+bs)/T .
From (1) and (2), the probability of pool i winning the
block mining competition with a block of size si is
Pwin
i (x,ω, si,a) = Pmine
i (x,ω,a)e−(
si
γc+bsi)/T .
Once winning the mining competition, the winner pool will
be rewarded a certain amount of money, which includes a
fixed revenue from the coinbase of the new block and the
revenue from transaction fees. We use C to denote the fixed
revenue from the coinbase. We assume that the transaction
size and fee are fixed, and thus the total mining revenue for
pool i can be modeled a linear function of block size si.
Denoting ρ the transaction fee per unit block size, we can
formulate the revenue of pool i obtained from the transaction
fees of a block of size si as ρsi.
In addition to the mining revenue, each pool also receives
extra attacking revenue from the infiltrated pools. In [12],
in order to simplify the analysis, such attacking revenue was
ignored by simply assuming that it is contained in the mining
revenue. However, since the attacking revenue would motivate
pools to launch BWH attacks, it should be carefully taken
into consideration. Thus, this paper follows the method in
[9] to formulate the attacking revenue. First, we introduce
a new concept called revenue density to define the revenue
of unit hash rate, which is calculated by dividing the total
revenue (i.e., mining revenue plus attacking revenue) of a
pool by its total hash rate including those of the spies. We
use ri to denote the revenue density of pool i. Given the
mining revenue, attacking revenue and revenue density, we
now formulate the total expected revenue of pool i as
Ri(x,ω, si,a) = (C + ρsi)P
win
i (x,ω, si,a)
+Nxiωi
M∑
j=1,j �=i
aijrj
and the revenue density ri as
ri(x,ω, si,a) =
Ri(x,ω, si,a)
Nxiωi +
∑M
j=1,j �=i Nxjωjaji
. (3)
Thus, each miner in pool i will receive revenue of amount
ωiri(x,ω, si,a).
Since mining requires enormous computation power, min-
ers must also consider the cost of power consumption due
to hash calculation in the mining process. Assuming that the
power charge required for unit hash rate is p, we can express
the expected payoff of each miner in pool i as follows:
yi(x,ω, si,a) = (ri(x,ω, si,a)− p)ωi. (4)
Note that miners in the same pool use the same hash rate ωi,
obtaining identical expected payoffs.
B. Evolutionary Game for Mining Pool Selection
Each miner aims to maximize the payoff given in (4) by
selecting a mining pool to join. Therefore, we model mining
pool selection of each miner under the BWH attack as an
evolutionary game based on [10]. The game can be defined
as G =< N ,M,x, yi(x,ω, si,a) >, where
• N is the set of miners with |N | = N .
• M = {1, . . . ,M} is the set of mining pools.
• x = [x1, . . . , xM ]� ∈ X is the population profile of
mining pools with xi being the population fraction of
pool i and X denotes the set of all population profiles.
• {yi(x,ω, si,a)}i∈M is the set of miners’ expected pay-
offs.
323
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:37:51 UTC from IEEE Xplore.  Restrictions apply. 
Each pool i uses ωi, si, and ai as its parameters to attract
miners. All the parameters are pre-fixed before the game and
will remain unchanged during the playing of the game.
1) Replicator Dynamics: The growth rate of the population
fraction of each pool can be described by the replicator dy-
namics. Based on the pairwise proportional imitation protocol,
the replicator dynamics of the population fractions can be
expressed by the following system of Ordinary Differential
Equations (ODEs) [18]:
ẋi(t) = fi(x(t),ω, si,a)
= xi(t)(yi(x(t),ω, si,a)−y(x(t),ω, s,a)), (5)
where ẋi(t) represents the growth rate of the population of
pool i at time t and y(x) =
∑M
i=1 yi(x,ω, si,a)xi represents
the average expected payoff of all the miners. We can see
from (5) that the population of pools whose miners’ expected
payoffs are larger than the average payoff will increase,
meaning that these pools will attract more miners to join.
2) Nash Equilibrium: Consider the population states x =
[x1, . . . , xM ]� ∈ X as mixed strategies that each miner may
choose, where each xi denotes the probability of choosing
pool i. A Nash Equilibrium (NE) is then a mixed strategy
x∗ that is a best reply to itself. That means under the
condition that other miners choose x∗, a miner cannot gain
more revenue by choosing any other x ∈ X rather than x∗.
Formally, an NE satisfies the following inequality [19]:
(x∗ − x)�Y (x∗) ≥ 0, ∀x ∈ X ,
where Y (x) = [y1(x), . . . , yM (x)]� with yi(x) given by (4).
In an NE, the temporal growth rate of the population fraction
of each pool i is zero. That is, ∀i ∈M, fi(x(t),ω, si,a) = 0
holds [20]. Thus, we need to solve the ODEs of the replicator
dynamics (i.e., find the rest points) to identify the NEs.
3) Evolutionary Stable Strategy: Note that only the stable
NEs are ESSs. Thus, to find the ESSs, we need to further
investigate the stability of the NEs. Again, we consider the
population states as mixed strategies. Suppose the whole
population adopt the strategy x∗ and there exits another
mutant strategy x′ trying to invade a fraction ε ∈ (0, ε) of the
population. Then, x∗ is an ESS, if the following inequality
holds:∑
i∈M
x∗i yi((1− ε)x∗+ εx′) ≥
∑
i∈M
x′iyi((1− ε)x∗+ εx′).
More precisely, x∗ is an ESS if it meets the following two
conditions: [19].
1) (x∗ − x)�Y (x∗) ≥ 0, ∀x ∈ X
2) If (x∗ − x)�Y (x∗) = 0, then (x∗ − x)�Y (x) > 0
holds.
The first condition indicates that an ESS must be an NE. The
second condition means that if a miner choosing a strategy x
can gain as much revenue as a miner choosing the NE strategy
when other miners choose the NE, then a miner choosing the
NE must gain more revenue than a miner choosing x when
other miners choose x.
4) Mining Pool Selection Algorithm: Algorithm 1 shows
how each miner selects the pool to join based on the pairwise
proportional imitation protocol. To start the algorithm, each
miner initially joins a pool at random. After the initialization,
each miner i first chooses a pool j ∈ M at random and
computes the expected miners’ payoffs of pool j and its
current pool (say k). Then, the miner will move to pool j
with probability ρk,j . These two steps will be repeated until
the population profile x converges.
Algorithm 1 Mining Pool Selection Algorithm
1: Initial: t← 1;
2: while x is not converged and t < MAX COUNTER
do
3: for all i ∈ N do
4: k ← Current pool of miner i
5: j ← rand(1,M) � choose a pool j at random
6: Move from pool k to j with probability
7: ρk,j=xj max(yj(x,ω, sj ,a)−yk(x,ω, sk,a), 0)
8: t← t+ 1
IV. ANALYSIS IN CASE OF TWO MINING POOLS
In this section, we analyze the case of one-side attack,
where one pool attacks the other. We assume that Pool 1
attacks Pool 2, i.e., a12 > 0 and a21 = 0.
1) Miner’s Revenue Density: According to (3), the miner’s
revenue density of each pool can be expressed as follows:
r1 =
α(1− a12) +Na12r2(x1ω1(1− a12) + x2ω2)
N(x1ω1(1− a12) + x2ω2)
, (6)
r2 =
βω2x2
N(x1ω1a12 + x2ω2)(x1ω1(1− a12) + x2ω2)
, (7)
where
α = (C + ρs1)e
−(
s1
γc+bs1)/T ,
and
β = (C + ρs2)e
−(
s2
γc+bs2)/T .
2) Miner’s Expected Payoff: According to (4), (6) and (7),
the miner’s expected payoff of each pool can be described as
follows:
y1 = ω1
(
α(1−a12)(a12ω1x1+ω2x2)+a12βω2x2
N((1− a12)ω1x1+ω2x2)(a12ω1x1+ω2x2)
−p
)
,
y2 = ω2
(
βω2x2
N((1−a12)ω1x1+ω2x2)(a12ω1x1+ω2x2)
−p
)
.
3) Replicator Dynamics: According to (5), the system of
the ODEs for the replicator dynamics can be expressed as
follows:
ẋ1 = x1(y1 − y),
ẋ2 = x2(y2 − y),
where the expected payoff of miners y can be expressed as:
y = x1y1 + x2y2.
324
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:37:51 UTC from IEEE Xplore.  Restrictions apply. 
Using the fact x2 = 1−x1, we simplify the system of ODEs
into the following equation by letting x1 = x and x2 = 1−x:
ẋ1 = x(1− x)(y1 − y2).
Thus, the population state can be expressed as (x, 1− x).
4) Rest Points: Solving ẋ1 = 0 yields rest points in the
form of (x∗1, x
∗
2) = (x∗, 1− x∗) where x∗ is given by
x∗ ∈
{
0, 1,
−B ±√B2 − 4AC
2A
}
, (8)
where
A = a212Npω3
1 − a12Npω3
1 − a212Npω2ω
2
1 + a12Npω2ω
2
1
+Npω2ω
2
1 − 2Npω2
2ω1 +Npω3
2 ,
B = αa12ω1ω2 − αa212ω
2
1 + αa12ω
2
1 − a12βω1ω2
− αω1ω2 + βω2
2 − 2Npω3
2 + 3Npω1ω
2
2 −Npω2
1ω2,
C = −αa12ω1ω2 + a12βω1ω2 + αω1ω2 − βω2
2 +Npω3
2
−Npω1ω
2
2 .
5) Evolutionary Stability of Rest Points: From Sec-
tion III-B3, not all rest points are evolutionarily stable, and
their evolutionary stability needs to be proved. However,
this is extremely difficult under our game model. Thus, the
evolutionary stability of the rest points are discussed based
on the phase portrait of the replicator dynamics in Section V.
V. NUMERICAL RESULTS
In this section, we verify the correctness of the analysis
by simulations and also show the impacts of BWH attack
on the population states of the mining pools. We consider a
blockchain network with two pools (i.e., M = 2) and 5000
miners. We set the propagation delay parameter as 1
γc + b =
0.005, the transaction fee per unit block size as ρ = 2, the
block generation interval as T = 600, the fixed revenue from
coinbase as C = 1000 and the unit power charge per hash
rate as p = 0.01. In the simulations, we execute Algorithm 1
to obtain the population states after convergence.
A. No-Attack Case
First, we consider the case without BWH attack (i.e., a12 =
0) with pool hash rate requirements (ω1, ω2) = (30, 20) and
block sizes (s1, s2) = (100, 100). Fig. 2 shows the phase
portraits of the replicator dynamics. From the figure, we can
see the population states converges to (0.4, 0.6) for all initial
states, which is consistent with the results in [10].
B. One-Side Attack Case
In this subsection, we consider the one-side attack case
with attack size a12 = 0.015 from Pool 1 to Pool 2, i.e.,
Pool 1 attacks Pool 2. Other parameters are set as those in
Fig. 2. In this case, we also consider three initial population
states: (x1, x2) = (0.20, 0.80), (x1, x2) = (0.75, 0.25)
and (x1, x2) = (0.85, 0.15). Fig. 3a shows the change of
population states over time via simulations. From the figure,
it can be seen that the population state after convergence
0.0 0.2 0.4 0.6 0.8 1.0
Population fraction x1
0.0
0.2
0.4
0.6
0.8
1.0
P
op
u
la
ti
on
fr
ac
ti
on
x
2
stable rest point
Fig. 2: Stable population states vs. attack size a12.
differs depending on the initial population states. The results
in this figure show that the game in this scenario converges
two population states: (1, 0) and (0.55, 0.45). Calculating (8),
we obtain four rest points: (0, 1), (1, 0), (0.55, 0.45) and
(0.77, 0.23). This indicates that only the rest points (1, 0)
and (0.55, 0.45) are stable, i.e., they are the ESSs. To verify
this observation, we plot the phase portraits of the replicator
dynamics in Fig. 3b. We can see that the population states
converge to (0.55, 0.45) for initial states with x1 < 0.77. For
other initial states, the population states converge to (1, 0),
which is consistent with the observation obtained from the
simulations. Comparing the stable population states of the
cases with BWH attack and without BWH attack, we can
see that the population fraction of Pool 1 increases from 0.4
(without BWH attack) to 0.55 or to 1.0 (with BWH attack).
This indicates that launching BWH attack attracts miners to
join the attacking pools.
Next, we investigate the impacts of the attack size on the
mining pool selection. Fig. 4 shows how the stable population
state changes when the attack size increases from 0 to 0.03.
The initial state is fixed as (0.50, 0.50). We can see from
the figure that as the attack size increases, the population
fraction of Pool 1 increases, while that of Pool 2 decreases.
This implies that using more hash rate for attack attracts more
miners to join the pool. We can also observe that using even
only 1–3% of the total hash rate will lead to an increase of the
population. This shows the significant impacts of the BWH
attack on the mining pool selection of miners.
VI. CONCLUSIONS
In this paper, we investigate the mining pool selection
problem in the presence of BWH attack and model the pool
selection of miners by the evolutionary game theory frame-
work. In the case with two pools, we obtained the rest points
of the game and verified their stability using simulations. The
results in this paper show that launching BWH attack attracts
miners to join the pool, and the more hash rate (computation
325
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:37:51 UTC from IEEE Xplore.  Restrictions apply. 
0 500 1000 1500 2000
Time t
0.0
0.2
0.4
0.6
0.8
1.0
P
op
u
la
ti
on
fr
ac
ti
on
x
x1, Initial at 0.20
x2, Initial at 0.80
x1, Initial at 0.75
x2, Initial at 0.25
x1, Initial at 0.85
x2, Initial at 0.15
(a) Change of population ratio over time.
0.0 0.2 0.4 0.6 0.8 1.0
Population fraction x1
0.0
0.2
0.4
0.6
0.8
1.0
P
op
u
la
ti
on
fr
ac
ti
on
x
2
stable rest point
unstable rest point
(b) Phase portraits of replicator dynamics.
Fig. 3: One-side attack case with a12 = 0.015.
0.000 0.005 0.010 0.015 0.020 0.025 0.030
Attack hashrate ratio a12
0.0
0.2
0.4
0.6
0.8
1.0
C
on
ve
rg
ed
p
op
u
la
ti
on
fr
ac
ti
on
x x1
x2
Fig. 4: Stable population states vs. attack size a12.
power) used for attack, the more miners will be attracted.
In addition, using even a small amount of hash rate for
attack will greatly increase the population of the miners in
the attacking pool, indicating the significant impacts of BWH
attack on the mining pool selection of miners.
ACKNOWLEDGMENTS
This work was supported in part by KAKENHI (A) under
Grant 19H01103, SCAT Research Grant and The Telecom-
munications Advancement Foundation.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,”
2008. [Online]. Available: https://bitcoin.org/bitcoin.pdf
[2] D. D. F. Maesa, P. Mori, and L. Ricci, “Blockchain Based Access
Control,” in Proc. of IFIP International Conference on Distributed
Applications and Interoperable Systems, 2017, pp. 206–220.
[3] Q. I. Xia, E. B. Sifah, K. O. Asamoah, J. Gao, X. Du, and M. Guizani,
“MeDShare: Trust-Less Medical Data Sharing Among Cloud Service
Providers via Blockchain,” IEEE Access, vol. 5, pp. 14 757–14 767,
2017.
[4] N. Kshetri, “Blockchain’s Roles in Meeting Key Supply Chain Manage-
ment Objectives,” International Journal of Information Management,
vol. 39, pp. 80–89, 2018.
[5] F. Tschorsch and B. Scheuermann, “Bitcoin and Beyond: A Technical
Survey on Decentralized Digital Currencies,” IEEE Communications
Surveys & Tutorials, vol. 18, no. 3, pp. 2084–2123, 2016.
[6] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “An Overview of
Blockchain Technology: Architecture, Consensus, and Future Trends,”
in Proc. of IEEE International Congress on Big Data (BigData
Congress), 2017, pp. 557–564.
[7] O. Schrijvers, J. Bonneau, D. Boneh, and T. Roughgarden, “Incentive
Compatibility of Bitcoin Mining Pool Reward Functions,” in Proc.
of International Conference on Financial Cryptography and Data
Security, 2016, pp. 477–498.
[8] N. T. Courtois and L. Bahack, “On Subversive Miner Strategies and
Block Withholding Attack in Bitcoin Digital Currency,” arXiv preprint
arXiv:1402.1718, pp. 1–15, 2014.
[9] I. Eyal, “The Miner’s Dilemma,” in Proc. of IEEE Symposium on
Security and Privacy, 2015, pp. 89–103.
[10] X. Liu, W. Wang, D. Niyato, N. Zhao, and P. Wang, “Evolutionary
Game for Mining Pool Selection in Blockchain Networks,” IEEE
Wireless Communications Letters, vol. 7, no. 5, pp. 760–763, 2018.
[11] R. B. Myerson, Game Theory. Harvard University Press, 2013.
[12] S. Kim and S.-G. Hahn, “Mining Pool Manipulation in Blockchain
Network Over Evolutionary Block Withholding Attack,” IEEE Access,
vol. 7, pp. 144 230–144 244, 2019.
[13] Z. Liu, N. C. Luong, W. Wang, D. Niyato, P. Wang, Y.-C. Liang, and
D. I. Kim, “A Survey on Applications of Game Theory in Blockchain,”
arXiv preprint arXiv:1902.10865, 2019.
[14] L. Luu, R. Saha, I. Parameshwaran, P. Saxena, and A. Hobor, “On
Power Splitting Games in Distributed Computation: The Case of
Bitcoin Pooled Mining,” in Proc. of 2015 IEEE 28th Computer Security
Foundations Symposium. IEEE, 2015, pp. 397–411.
[15] Y. Lewenberg, Y. Bachrach, Y. Sompolinsky, A. Zohar, and J. S.
Rosenschein, “Bitcoin mining pools: A cooperative game theoretic
analysis,” in Proc. of the 2015 International Conference on Autonomous
Agents and Multiagent Systems, 2015, pp. 919–927.
[16] L. Brünjes, A. Kiayias, E. Koutsoupias, and A.-P. Stouka, “Reward
sharing schemes for stake pools,” arXiv preprint arXiv:1807.11218,
2018.
[17] J. Garay, A. Kiayias, and N. Leonardos, “The Bitcoin Backbone
Protocol: Analysis and Applications,” in Proc. of Annual International
Conference on the Theory and Applications of Cryptographic Tech-
niques, 2015, pp. 281–310.
[18] J. W. Weibull, Evolutionary Game Theory. MIT Press, 1997.
[19] J. Hofbauer and W. H. Sandholm, “Stable Games and Their Dynamics,”
Journal of Economic Theory, vol. 144, no. 4, pp. 1665–1693, 2009.
[20] J. Hofbauer and K. Sigmund, “Evolutionary Game Dynamics,” Bulletin
of the American Mathematical Society, vol. 40, no. 4, pp. 479–519,
2003.
326
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:37:51 UTC from IEEE Xplore.  Restrictions apply.