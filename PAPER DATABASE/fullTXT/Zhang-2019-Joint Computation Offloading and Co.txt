Joint Computation Offloading and Coin Loaning for Blockchain-Empowered Mobile-Edge Computing
9934 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
Joint Computation Offloading and Coin Loaning for
Blockchain-Empowered Mobile-Edge Computing
Zhen Zhang , Zicong Hong , Wuhui Chen , Member, IEEE, Zibin Zheng , Senior Member, IEEE,
and Xu Chen , Member, IEEE
Abstract—The blockchain-empowered mobile-edge computing
(MEC) is a promising solution for enhancing the computation
capabilities of mobile equipments (MEs) to process computation-
intensive tasks such as the real-time data processing tasks and
mining tasks. However, because of the “cold start” and “long
return” problems, efficient computation offloading cannot be
achieved in blockchain-empowered MEC because the MEs do not
always have enough coins to afford the offloading service cost.
In this article, we study the joint computation-offloading and
coin-loaning problem for blockchain-empowered MEC to mini-
mize the total cost of all MEs. We introduce the banks that can
provide loan services to the MEs to address the above two issues.
We formulate the problem as a noncooperative game to model
the competitions between the myopic MEs. By using a potential
game method, we prove the existence of a pure-strategy Nash
equilibrium (NE) and design a distributed algorithm to achieve
the NE point with low computational complexity. We also pro-
vide an upper bound on the price of anarchy of the game by
theoretical proof. Besides, two smart contracts are designed to
automatically perform the computing resource trading and coin
loaning processes. Lastly, our simulation results show that our
proposed algorithm can significantly reduce the total cost of all
MEs, has better performance compared with other solutions, and
scales well as the number of MEs increases. Moreover, the finan-
cial cost for executing the two smart contracts on the Ethereum
network is low.
Index Terms—Blockchain, coin loaning, computation offload-
ing, edge computing, Nash equilibrium (NE), potential game.
I. INTRODUCTION
MORE and more emerging smart applications such
as augmented reality, natural language processing,
and object recognition are gaining enormous attention
with the development of various smart mobile equipments
(MEs) [1], [2]. However, executing the computation-intensive
and resource-hungry applications may result in large delays
and significant energy consumption because of the limited
Manuscript received May 1, 2019; revised July 10, 2019; accepted
August 2, 2019. Date of publication August 6, 2019; date of cur-
rent version December 11, 2019. This work was supported in part
by the National Key Research and Development Plan under Grant
2018YFB1003800, in part by the National Natural Science Foundation of
China under Grant 11801595, in part by the Natural Science Foundation of
Guangdong under Grant 2018A030310076, and in part by the Program for
Guangdong Introducing Innovative and Entrepreneurial Teams under Grant
2017ZT07X355. (Corresponding author: Wuhui Chen.)
The authors are with the School of Data and Computer
Science, Sun Yat-sen University, Guangzhou 510006, China (e-mail:
zhangzh297@mail2.sysu.edu.cn; hongzc@mail2.sysu.edu.cn; chenwuh@
mail.sysu.edu.cn; zhzibin@mail.sysu.edu.cn; chenxu35@mail.sysu.edu.cn).
Digital Object Identifier 10.1109/JIOT.2019.2933445
onboard computation capabilities and battery life of MEs. To
address the contradiction between the resource limitation of
MEs and the requirements of the computation-intensive appli-
cations, mobile-edge computing (MEC) has been introduced as
an enabler to provide limited computing resources with shorter
delays close to the network edge to solve different types
of tasks (e.g., computation-intensive applications, blockchain
mining, and consensus process). In MEC, the requirements of
short delays and energy-saving of the MEs are met via offload-
ing the computation tasks to the edge servers deployed by
telecom operators. As in previous works [3]–[5], solutions on
efficiently designing the computation-offloading scheme and
resource allocation manner in MEC to reduce the time cost
and energy cost have been carefully studied. However, because
data exchanging and computing-resource trading inevitably
occur between MEs and edge servers (they have conflicting
interests with each other), the trust problem between MEs and
edge servers remains to be solved.
Fortunately, blockchain technology provides an opportu-
nity to solve this problem. Blockchain technology, which
allows MEs to maintain information transparency and build
up trust with edge servers via blockchain’s decentralized,
tamper-proof, secure, and traceable characteristics, can provide
feasible solutions for trust enhancement for MEC. Therefore,
the blockchain-empowered MEC is introduced to address
the trust problem still existing in traditional MEC [6]–[8].
In the blockchain-empowered MEC, the MEs can offload
their computation tasks to the edge servers after affording
the service cost for the computing services of edge servers,
and all the transactional data are recorded in the blockchain
to build up trust. For example, Jiao et al. [9] designed
secure auction mechanisms in edge-computing resource
allocation for blockchain-empowered MEC. However, effi-
cient computing-resource trading cannot be achieved for
blockchain-empowered MEC because of the “cold start” and
“long return” issues, where cold start means that a newly added
ME has no coins to afford the service cost for the computing
services of edge servers and long return means that auditing
and verifying the transaction records for new blocks in the
consensus process would be costly in terms of time.
To overcome the cold start and long return challenges for
blockchain-empowered MEC, we introduce banks to provide
loan services to the MEs. Each bank sets its own rate of return,
which increases with an increasing number of MEs that bor-
row from it, to gain revenue [10]. Hence, if an ME borrows
from a bank, it needs to repay the principal and the additional
2327-4662 c© 2019 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-0623-5866
https://orcid.org/0000-0001-5689-382X
https://orcid.org/0000-0003-4430-7904
https://orcid.org/0000-0001-7872-7718
https://orcid.org/0000-0001-9943-6020
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9935
fees caused by the rate of return to the bank. We then study
the joint computation-offloading and coin-loaning problem for
blockchain-empowered MEC to minimize the total cost of all
MEs, in which the MEs can choose either to offload their
computation tasks to an edge server and borrow from a bank
or to compute their computation tasks locally. In our joint
computation-offloading and coin-loaning problem, there are
three questions that need to be answered.
1) How should an ME choose between local computing and
edge computing (via computation offloading)?
2) If an ME chooses to offload its computation task to
an edge server with limited computing capabilities,
then which edge server should be chosen to efficiently
process its computation task?
3) If an ME chooses to borrow from a bank, then which
bank should it choose to borrow from to minimize its
loan cost?
In this article, we aim to address the joint computation-
offloading and coin-loaning problem to minimize the cost of
all MEs based on a game-theory-based method. To answer the
presented three questions, we formulate our joint computation-
offloading and coin-loaning problem as a noncooperative game
in which the rational MEs make decisions based on their own
interests and compete with each other to search for the optimal
decisions to minimize their cost. In the game, if an ME chooses
local computing, then its computation task is computed with its
onboard computing capabilities. If an ME chooses to offload
its computation task to an edge server with limited computing
capabilities and borrows from a bank, then the ME jointly con-
siders an edge server and a bank to minimize the computation
cost. Besides, we also design a distributed algorithm by which
the game can quickly converge to a stable state, i.e., a Nash
equilibrium (NE) point. To our best knowledge, we are the
first to study the joint computation-offloading and coin-loaning
problem for blockchain-empowered MEC. In conclusion, the
main contributions are summarized as follows.
1) The role of a bank is introduced to provide loan services
to the MEs to overcome the cold start and long return
problems in blockchain-empowered MEC. In such a sce-
nario, we formulate the joint computation-offloading and
coin-loaning problem as a noncooperative game to min-
imize the cost of each ME in terms of computing time,
energy, and digital coin, in which each ME shows its
economic property.
2) Based on a potential game method, the existence of an
NE point is proved, and an efficient distributed algorithm
is designed to quickly achieve the NE point. The game
theory can solve the optimization problem by allow-
ing each ME minimizes their own cost in a distributed
manner, which is more efficient than existing centralized
optimization methods when the number of MEs is large.
When considering the partial offloading model, we the-
oretically prove that the case of partial offloading can
be reduced into the case of binary offloading.
3) To support our model in blockchain environment, two
smart contracts are designed to automatically per-
form the computing resource trading and coin loaning
processes. By deploying the contracts on the Ethereum
network, we attain and analyze the financial cost for
executing each function in the contracts to show their
performance.
4) Lastly, the extensive simulation results demonstrate that
the proposed algorithm can significantly reduce the cost
of all MEs and possesses much better performance than
other existing solutions under different parameter set-
tings. Besides, the results of the real experiment in
Ethereum environment show that the economic cost for
using the smart contracts on the Ethereum network is
low.
The remainder of this article is organized as follows. We
discuss related work in Section II. We describe the system
model in Section III. We formulate the joint computation-
offloading and coin-loaning problem as a noncooperative game
in Section IV. We extend our model to the case of partial
offloading in Section V. We design a distributed algorithm
to achieve the NE point of the game in Section VI. The
results of simulations are presented in Section VIII. Lastly,
the conclusion is summarized in Section IX.
II. RELATED WORK
The computation-offloading problem for MEC has been
studied extensively [11]–[18]. For example, Chen et al. [11]
proposed a dynamic computation-offloading algorithm to solve
the problem in a distributed manner for MEC. Sun et al. [12]
proposed an efficient task-scheduling scheme in the vehicu-
lar cloud by jointly considering the instability of resources,
the heterogeneity of vehicular computing capabilities, and
the interdependency of computing tasks. Shah-Mansouri and
Wong [13] used a computation-offloading game to model the
competition between mobile users who aim to maximize their
own quality of experience in a hierarchical fog-cloud com-
puting paradigm. Zheng et al. [14] investigated the problem
of multiuser computation offloading for mobile-cloud comput-
ing under dynamic environments and proposed a stochastic
game-theory approach for dynamic computation offloading.
Guo et al. [15] proposed an iterative searching-based task
offloading scheme that jointly optimizes task offloading, com-
putational frequency scaling, and transmit-power allocation.
Zhang et al. [16] developed a multiqueue model to explore
the impact of offloading policies on the performance of MEs
with the computing resources supported by an edge-computing
server. Guo et al. [17] studied the computation-offloading
problem in a mobile-edge-computing framework and proposed
a two-tier game-theory greedy offloading scheme as the solu-
tion. Al-Shatri et al. [18] proposed a distributed algorithm on
computation offloading in multihop networks that aims to min-
imize the total network energy consumed. However, the trust
problem remains to be solved.
Recently, a few works such as [19]–[21] have investi-
gated the computation-offloading problem for blockchain-
empowered MEC to solve the computation-intensive proof-
of-work puzzle and enhance trust between MEs and edge
servers. Chatzopoulos et al. [19] proposed a multilayer
computation-offloading framework, FlopCoin, to integrate a
distributed incentive scheme and a distributed reputation
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9936 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
Fig. 1. Illustration of the system model.
mechanism for mobile devices. Liu et al. [20] proposed a
novel MEC-enabled wireless blockchain framework where
computation-intensive mining tasks can be offloaded to nearby
edge-computing nodes and where cryptographic hashes of
blocks can be cached in the edge servers. Xiong et al. [21]
studied the edge-computing resource management and pric-
ing problem for a proof-of-work-based blockchain network
using a game-theory-based approach. In addition, the coin-
loaning problem for blockchain-empowered MEC has been
studied. For example, Li et al. [22] proposed a double-auction-
based computing-resource trading approach to maximize the
economic benefits while protecting privacy for edge-cloud-
assisted Internet of Things (IoT). Jiao et al. [23] proposed
an auction-based edge-computing resource allocation mech-
anism for the edge-computing service provider to support
mobile blockchain-mining tasks. Li et al. [24] addressed the
optimal loan allocation based on the double-auction algorithm
for fast computing-resource trading in blockchain-enabled
edge-assisted IoT. However, the computation-offloading and
coin-loaning problems for blockchain-empowered MEC have
been studied separately. Most studies have not considered the
joint computation-offloading and coin-loaning problem, which
is of great significance to blockchain-empowered MEC. In this
article, we study the joint computation-offloading and coin-
loaning problem for blockchain-empowered MEC to minimize
the total cost of MEs.
III. SYSTEM MODEL AND PROBLEM STATEMENT
As shown in Fig. 1, we consider a blockchain-empowered
MEC framework consisting of MEs, edge servers, banks, and
blockchain. We assume that there are N MEs in the network,
denoted by N : (1, 2, . . . , N). Each ME has a computation
task to complete, and then attains some coins in return. The
task is denoted by An : (zn, γn), where zn is the input data size
of this task and γn is the number of CPU cycles required to
complete the task, and this number depends on the comput-
ing density of the task and is known to the user before the
task is executed. We assume that constant ρ is the price per
unit for the service demands of MEs and is charged by the
TABLE I
NOTATIONS USED IN THIS ARTICLE
edge servers. By affording the service cost for the computing
services of edge servers, the MEs can offload their computa-
tion tasks to the edge servers. If the MEs do not have sufficient
coins to afford the service cost, then they can borrow from the
banks. All transactions occurring in the network are recorded
into blockchain blocks so the transactional records cannot be
tampered with, by which security and reliability are guaran-
teed. Similar to previous works [25]–[27], we assume that the
MEs change slowly when offloading tasks.
To present this research more clearly, we list the important
notations used in this article in Table I.
A. Loan Model
We suppose that there are M banks in the framework,
denoted by M : (1, 2, . . . , M). For the MEs that decide
to offload but do not have sufficient coins, they need to
borrow from the banks to afford the service cost for the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9937
computing services of edge servers. We define the binary vari-
able bn,m ∈ {0, 1} for all ME n ∈ N , where bn,m = 1 denotes
that ME n borrows from bank m, and bn,m = 0 denotes that
ME n does not borrow from bank m. We further define a loan-
ing vector bn = (bn,1, bn,2, . . . , bn,M) for all ME n ∈ N . We
also assume that each ME can borrow from at most one bank,
so we have
∑
m∈M bn,m ≤ 1 for all ME n ∈ N . The banks
gain revenue by setting their own rates of return that obey the
linear models Rm(x) for all bank m ∈ M. Taking bank m as
an example, its rate of return is set as
Rm(x) = μ1,m + μ2,mx (1)
where x denotes the number of MEs that borrow from bank
m and μ1,m, μ2,m > 0 are coefficients set by bank m.
B. Communication Model
We assume that there are S edge servers in the framework,
denoted by S : (1, 2, . . . , S). Each ME connects with some
edge servers through a cellular network, and we assume that
each computation task should either be entirely computed by
an ME or entirely offloaded to an edge server. We define the
binary variable an,s ∈ {0, 1} for all ME n ∈ N to denote their
offloading decisions, where an,s = 1 denotes that the compu-
tation task of ME n is entirely offloaded to an edge server
s ∈ S and an,s = 0 denotes that the computation task of ME n
is entirely computed using onboard computing capabilities. We
also define an offloading vector an = (an,1, an,2, . . . an,S) for
all ME n ∈ N . Because the computation task can be offloaded
to at most one edge server, we must have
∑
s∈S an,s ≤ 1 for
all ME n ∈ N . We further define binary variable ln,s ∈ {0, 1}
for all ME n ∈ N , where ln,s = 1 denotes that ME n can con-
nect with edge server s and ln,s = 0 denotes that ME n is too
far away from edge server s to connect with it. Thus, based on
the connectivity model, we have an,s ≤ ln,s for all ME n ∈ N
to ensure the offloading behavior can be completed.
We know that ME n needs to transmit zn amount of data
belonging to its task to edge server s if it decides to offload its
task to edge server s. We use ωn,s to denote the uplink rate of
the link between ME n and edge server s. As in [13] and [26],
we consider that at most one wireless communication interface
is used between each ME n ∈ N and edge server s ∈ S, and
the rate ωn,s depends on the type of wireless interface and the
distance between ME n and edge server s. The time that ME
n takes to transmit data to edge server s is the following:
toff,s
n = zn
ωn,s
. (2)
We denote by pn the transmission power of ME n to model
its energy cost when transmitting data. The energy that ME
n consumes to transmit data to edge server s is the prod-
uct of transmission power and transmission time and can be
calculated as
eoff,s
n = pnzn
ωn,s
. (3)
C. Computation Model
We denote by dn = (an, bn) the decision of ME n, where
an denotes the offloading vector of ME n and bn denotes the
loaning vector of ME n. If an = 0, where 0 is a zero vector of
S dimensions, ME n completes its computation task locally.
Otherwise, ME n offloads its computation task to an edge
server. We further refer to the set d = {dn}n∈N as a decision
profile including the decisions of all MEs. In the decision pro-
file d, we denote by nS
s (d) = ∑
n∈N an,s the number of MEs
that offload tasks to edge server s. Similarly, we denote by
nM
m (d) = ∑
n∈N bn,m the number of MEs that borrow from
bank m in the decision profile d.
In the following, we introduce the time cost, energy cost,
service cost, and loan cost in the case of local computing and
in the case of computation offloading.
1) Local Computing: In this case, the computation task is
entirely computed with the onboard computing capabilities of
MEs. We consider the computing capabilities of ME n as f 0
n .
Hence, the computing capabilities f 0
n together with the number
of CPU cycles of task An determines the time consumed for
locally completing the task An of ME n
t0n = γn
f 0
n
. (4)
The energy consumption is related to the number of CPU
cycles required to complete the task and can be known based
on the conclusion in [26] and [28]. We assume the energy
consumed per CPU cycle for ME n is υn. Thus, the number
of CPU cycles of task An together with υn determines the
energy consumed for locally computing the task An of ME n
e0
n = γnυn. (5)
2) Computation Offloading: In this case, the computation
tasks are entirely offloaded to the edge servers and pro-
cessed with the computing services of the edge servers. We
denote by f S
s the computing capabilities of edge server s. As
in [26] and [29], we consider f S
s /nS
s (d) as the computing capa-
bilities assigned to each ME that offloads a task to edge server
s. Thus, the time required to process task An of ME n with
the computing services of edge server s is calculated as
tcom,s
n (d) = γn
f S
s
∑
n′∈N
an′,s. (6)
The edge servers with limited computing capabilities
are introduced to support the computation-intensive tasks
offloaded to them. The service demand γn together with the
service price ρ determines ME n’s service cost γnρ that is
charged by an edge server. Thus, if ME n offloads its com-
putation task to an edge server, then the service cost that is
charged by the edge server is calculated as
θn = γnρ. (7)
In our model, we assume the following condition hold.
Assumption 1: All the coins that the MEs receive are spent
(e.g., paying the service cost and loan cost), meaning that the
assets of each ME are 0.
Based on Assumption 1, when ME n decides to offload,
it needs to borrow an amount θn from a bank, which incurs
an additional cost because of the rate of return of the bank.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9938 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
When ME n borrows from bank m in the case of computation
offloading, its loan cost can be calculated as
πm
n (d) = θn · Rm
(
nM
m (d)
)
. (8)
D. Cost Model
In previous works [25]–[27], the authors modeled the total
cost of each ME as a linear combination of computing time
and energy because the edge servers do not charge the MEs
for computing service. In this research, we aim to mini-
mize the total cost of each ME in terms of the computing
time, energy, and digital coin, so each ME shows its eco-
nomic property. Therefore, the total cost of each ME is
modeled as a linear combination of computing time, energy,
and digital coin. We consider the weight of time as λT ,
weight of energy as λE, and weight of digital coin as 1.
In what follows, we discuss the total cost of each ME in
the case of local computing and in the case of computation
offloading.
For the case of local computing, the time cost and energy
cost for locally computing the task An of ME n determine the
total cost of ME n
c0
n = λT t0n + λEe0
n. (9)
For the case of computation offloading, if ME n decides to
offload its computation task to edge server s and to borrow
from bank m, then the corresponding time cost, energy cost,
service cost, and loan cost for offloading the tasks An of ME
n to edge server s and processing the task in edge server s
determine the total cost of ME n
cs,m
n (d) = θn + πm
n (d) + λT tcom,s
n (d) + λT toff,s
n + λEeoff,s
n .
(10)
Similar to previous works [25], [30], [31], we do not model the
cost for returning the results from edge server s to the original
ME n into cs,m
n (d) because the size of the results is much
smaller than those of the input data zn for many applications
such as face recognition. Besides, when the MEC system is
overloaded or broken, we adopt the recovery schemes in [32]
to solve the MEC failure problems and improve the quality of
experience.
As a consequence, the total cost of ME n in decision profile
d can be calculated as
cn(d) = c0
nI{an=0} + cs,m
n (d)I{an �=0} (11)
where 0 is a zero vector of S dimensions and I{C} is an indi-
cator function with I{C} = 1 if the condition C is true and
I{C} = 0 if the condition C is false.
Then, the system cost can thus be calculated as c(d) =∑
n∈N cn(d).
E. Problem Statement
Based on the discussion in the previous section, the problem
that we are addressing in this article is giving a decision pro-
file d that makes the total cost of all MEs in the framework
reach the minimum value. We then describe the optimization
problem as follows:
P1 : min
d
c(d) (12a)
s.t. :
∑
s∈S
an,s ≤ 1, ∀n ∈ N (12b)
∑
m∈M
bn,m ≤ 1, ∀n ∈ N (12c)
an,s ∈ {0, 1}, ∀n ∈ N , s ∈ S (12d)
an,s ≤ ln,s, ∀n ∈ N , s ∈ S (12e)
bn,m ∈ {0, 1}, ∀n ∈ N , m ∈ M. (12f)
Here, we observe that the optimization problem P1 is actu-
ally a 0–1 integer programming problem, so it is an NP-hard
problem. Besides, the decisions of the MEs affects each other
in the problem, which can be found in (6) and (8). The
approaches based on centralized optimization had been intro-
duced in [33] and [34]. However, the MEs owned by different
parties may not want to obey the centralized optimization
solution because they pursue their own interests, making the
approaches based on centralized optimization not always effec-
tive in practice. Therefore, we solve the optimization problem
P1 using game theory, by which the MEs can make decisions
in a distributed manner and thus ease the heavy burden of
computation and management at the center.
IV. EXISTENCE OF NASH EQUILIBRIUM
We formally define the game of optimization problem P1
as G � (N , {Dn}n∈N , {cn}n∈N ), where the set N of the MEs
is the set of players; Dn = An
⊗
Bn is the decision space of
ME n; An and Bn are the decision spaces of offloading vector
an and loaning vector bn of ME n, respectively; and cn is the
cost function of ME n. Each ME aims to minimize its own
cost in response to the decisions of other MEs and competes
to search for an optimal decision d∗
n that satisfies the following
conditions:
d∗
n ∈ arg min
dn∈Dn
cn(dn, d−n) (13a)
s.t. :
∑
s∈S
an,s ≤ 1, ∀n ∈ N (13b)
∑
m∈M
bn,m ≤ 1, ∀n ∈ N (13c)
an,s ∈ {0, 1}, ∀n ∈ N , s ∈ S (13d)
an,s ≤ ln,s, ∀n ∈ N , s ∈ S (13e)
bn,m ∈ {0, 1}, ∀n ∈ N , m ∈ M (13f)
where d−n denotes the decisions of all MEs except ME n.
We provide the definition of the best response decisions as
follows.
Definition 1: Given d−n that denotes the decisions of all
MEs excluding ME n, the best response decisions of ME n
are the decisions that satisfy the conditions in (13a).
In the best response decisions, each ME calculates current
optimal decisions according to the information received from
banks and edge servers, while other MEs do not change their
decisions, i.e., for given d−n, ME n calculates its best response
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9939
decisions based on the conditions in (13a). When the game
G reaches the NE point, the dynamic of the best response
decisions converges to the NE point, in which each ME cannot
find a better decision than the current one when decisions for
the other MEs remain unchanged. This property is important
for addressing the distributed problems using the game-theory-
based method because each ME makes a decision based on
its own interest.
Definition 2: When ME n decides to offload its computa-
tion task to an edge server in the decision profile d, a beneficial
computation-offloading ME occurs if cs,m
n (d) < c0
n is satisfied.
Based on the definition of the beneficial computation-
offloading ME, we know that ME n improves its performance
by offloading its computation task to an edge server if it is a
beneficial computation-offloading ME. Thus, as the number of
beneficial computation-offloading MEs in our model increases,
the performance of our model improves. In our model, we need
to ensure that an ME that offloads its task to an edge server
must be a beneficial computation-offloading ME. Otherwise,
this ME changes to local computing to reduce its computation
cost.
Based on the definition of the game G, the following is the
definition of the NE point.
Definition 3: If a decision profile d∗ is an NE point of the
game G, then no ME can further reduce its computation cost
by changing its decision unilaterally
cn(d
∗
n, d∗−n) ≤ cn(dn, d∗−n), ∀dn ∈ Dn, n ∈ N . (14)
According to the definition of the NE point, we consider
decision d′
n a better decision compared with decision dn if
cn(d′
n, d−n) > cn(dn, d−n) is satisfied. At the NE point,
each ME cannot find a better decision than the current one
when other MEs do not change their decisions. Therefore,
the dynamic of the best response decisions converges to the
NE point, and no ME can further reduce its computation cost
by changing its decision unilaterally and has an incentive to
deviate the system unilaterally.
Remark 1: In the game G, if an ME n decides to offload its
computation task to an edge server (i.e., an �= 0) at the NE
point, then ME n must be a beneficial computation-offloading
ME. This result is because if ME n is not a beneficial
computation-offloading ME, then cs,m
n (d) > c0
n. Hence, ME n
would have an incentive to switch to local computing to reduce
its computation cost, contradicting the fact that the game G has
achieved the NE point.
Because the decision spaces of the players are discrete, we
cannot prove the existence of the NE point in the game G
by differential means. Here, we use the concept of a weighted
potential game to prove the existence of the NE point. First, we
introduce the concept of a weighted potential game as follows.
Definition 4: A weight vector W = (wn)n∈N , where
wn > 0 for all ME n ∈ N , is considered. The game
is a weighted potential game if there exists a w-potential
function 	(d) such that the following equation holds for all
dn, d′
n ∈ Dn:
cn(d
′
n, d−n) − cn(dn, d−n)
= wn
(
	(d′
n, d−n) − 	(dn, d−n)
)
. (15)
In the weighted potential game, when any ME changes its
current decision from dn to d′
n, the variation of its cost function
cn(d′
n, d−n) − cn(dn, d−n) can be mapped into the variation
of the w-potential function 	(d′
n, d−n) − 	(dn, d−n) with a
weight wn. This is important for the property of the finite-
time convergence of an iterated game toward an NE point.
The following theorem shows that the game G in our model
is a weighted potential game.
Theorem 1: The game G in our model is a weighted
potential game with a weight vector W = (γn)n∈N .
Proof: See Appendix A.
Theorem 2: The game G admits a pure-strategy NE point
and has the finite improvement property (FIP).
Proof: See Appendix B.
V. EXTENSION TO PARTIAL OFFLOADING
As the discussion in Section III, we assume that the com-
putation tasks of the MEs either are entirely computed locally
or entirely offloaded to the edge servers. This offloading man-
ner is called binary offloading. This section considers another
offloading manner: partial offloading [2]. In partial offload-
ing, the computation task of each ME can be divided into two
arbitrary parts, one of which is computed locally and the other
is offloaded to an edge server. Each ME can achieve higher
efficiency in processing its computation task in this manner.
This article uses weight αn to represent the proportion of
ME n’s task An computed locally and weight 1−αn to represent
the proportion of ME n’s task An offloaded to an edge server.
Correspondingly, the offloading vector of each ME is modified
to an = (an,1, an,2, . . . an,S), where ‖an‖0 ≤ 1 means that at
most one of the elements in an is not equal to 0 and an,s ∈
[0, 1] for all ME n ∈ N . Thus, the decision of ME n can be
redefined as dn = (an, bn). Then, the cost of ME n in the
decision profile d = (dn)n∈N can be calculated as
cn(d) = αnc0
n + (1 − αn)c
s,m
n (d). (16)
In the case of partial offloading, the following theorem is
obtained.
Theorem 3: In the case of partial offloading, the best choice
of αn for each ME is αn = 0 or αn = 1.
Proof: See Appendix C.
In the case of partial offloading, we construct a new game
G � (N , {Dn}n∈N , {cn}n∈N ), where Dn = An
⊗
Bn is the
decision space of ME n; An and Bn are the decision spaces of
offloading vector an and loaning vector bn of ME n, respec-
tively; and cn is the cost function of ME n. We further refer
to the decisions of all MEs excluding ME n as d−n. Then, we
propose the following theorem.
Theorem 4: The game G can be reduced to game G, i.e.,
the case of partial offloading can be reduced to the case of
binary offloading.
Proof: See Appendix D.
Based on Theorems 3 and 4, we can extend our model to
the case of partial offloading. Moreover, the game G in the
case of partial offloading can be reduced to game G in the
case of binary offloading.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9940 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
VI. DISTRIBUTED ALGORITHM
A. Algorithm Design
Because, we have proven that the game G always possesses
a pure-strategy NE point and has the FIP, we can design our
distributed algorithm based on this property. The main idea of
the algorithm in Algorithm 1 is that we allow one and only one
ME to update its decision at a time. Besides, the slotted time
structure is used for smoothly implementing the algorithm into
practice. We describe the process of the proposed algorithm
as follows.
Each ME first needs to set its decision to be local computing
(line 2). In each time slot t, before calculating the best response
decision set, each ME n receives the information on nS
s (d(t−1)
of each edge server and nM
m (d(t − 1)) of each bank, respec-
tively (line 5). Then, each ME calculates the best response
decision set �n(t) based on (13a) (line 6). If �n(t) �= ∅, ME
n sends an update request to the server to complete the update
opportunity (lines 7 and 8). If �n(t) = ∅, the current decision
of ME n is optimal, so it maintains dn(t) = dn(t−1) (line 14).
After receiving enough update requests, the server randomly
selects an ME n that has sent the update request and sends
a permit response to it to update its decision at time slot t.
Thus, ME n chooses a decision dn(t) ∈ �n(t) as its deci-
sion at time slot t (lines 9 and 10). As for the MEs that have
already sent update requests to the server but do not receive
the permit response from the server, they keep their previous
decisions, i.e., dn(t) = dn(t − 1) (line 12). When the server
does not get any update requests within a specified period
of time, the NE point has been achieved (line 15). Then, the
server sends a response to all MEs to declare that the game is
ended.
After executing our proposed algorithm, the decisions of
all MEs are determined. Based on the decision of each ME,
each edge server performs the computing resource trading with
corresponding MEs by deploying the smart trading contract
on the blockchain, and each bank performs coin loaning with
corresponding MEs by deploying the smart loan contract on
the blockchain.
B. Convergence Analysis
Because our algorithm is designed according to the FIP, it
enables MEs to achieve a mutually satisfactory state, i.e., the
NE point of the game G. Therefore, the proposed algorithm
in this article is convergent.
The computation load of our proposed algorithm described
in Algorithm 1 is mainly concentrated on line 6, and the other
parts only involve some basic arithmetic operations. At line 6,
we need to calculate the best response decision set �n. First,
the proposed algorithm iterates the feasible decision space Dn
of ME n to calculate all possible cases of computation cost,
so the computational complexity of this operation is O(S∗M).
Next, we use the quick-sort algorithm to sort the computation
cost in all cases and then choose the best response decisions,
so the computing complexity of this operation is O(K log K),
where K = S ∗ M. Therefore, our proposed algorithm can
achieve the NE point of the game G in polynomial time.
Algorithm 1: Distributed Algorithm
1 initialization:
2 each ME sets its decision to be local computing;
3 iteration:
4 iterate for each time slot t and each ME n in parallel:
5 receive the information on nS
s (d(t − 1)), nM
m (d(t − 1)) of each
edge server and bank, respectively;
6 calculate the best response decision set �n(t);
7 if �n(t) �= ∅ then
8 send update request to the server to complete the update
opportunity;
9 if receive permit response then
10 select a decision dn(t) ∈ �n(t) for slot t;
11 else
12 keep dn(t) = dn(t − 1) for slot t;
13 else
14 keep dn(t) = dn(t − 1) for slot t;
15 until the NE point is achieved;
C. Performance Analysis
In this section, we analyze the efficiency of NE calculated
from our proposed algorithm by learning the important con-
cept of price of anarchy (PoA). PoA is the ratio of the system
cost in a worst NE point calculated from our proposed algo-
rithm and the system cost calculated from a centralized optimal
solution, and PoA demonstrates the effects of MEs’ selfish
behaviors on the system cost. According to the descriptions
in [13], [25], [29], PoA is calculated as
PoA = maxd∈DNE c(d)
mind∈D c(d)
(17)
where D = ∏
n∈N Dn is the decision space of all MEs and
DNE is the set of all possible NEs resulted from our proposed
algorithm. For our model, as the value of PoA decreases, the
performance of the proposed algorithm increases. Thus, the
theorem on the bound of PoA is the following.
Theorem 5: For game G in our model, the PoA of the
system cost is bounded by the following:
1 ≤ PoA ≤
∑
n∈N c0
n∑
n∈N min{c0
n, ĉmin
n } . (18)
Proof: See Appendix E.
VII. IMPLEMENTATION USING BLOCKCHAIN
SMART CONTRACTS
In this section, we leverage the smart contract to imple-
ment the computing resource trading mechanism and loan
mechanism without a trusted third party. The smart con-
tract uses cryptocurrencies as the currency exchange between
the provider and buyers [35]. Because of the transparency
and traceability of blockchain, the blockchain can trace the
misbehaving participants in the contracts and punish them.
1) Smart Trading Contract: When computing resource
trading happens, the buyers (MEs) need to pay coins from
their wallets to the wallet addresses (WAs) of providers (edge
servers). We use the smart contract to implement the trading
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9941
Fig. 2. Smart trading contract.
process. After the smart trading contract is deployed, the buy-
ers can participate in the trade. The smart trading contract is
automatically triggered to complete the trading process when
the trade occurs, and the key events on the blockchain are
listed as follows.
1) A new smart trading contract is created on the
blockchain.
2) The provider advertises the item and price.
3) Potential buyers monitor the blockchain for new trades
and submit their demands.
4) The smart trading contract is triggered to complete the
trading process.
5) The new transaction records are stored into blockchain
blocks and verified.
Fig. 2 shows a brief overview of the functions in the smart
trading contract. Here, “on receiving message from some bID”
means that the smart trading contract accepts a message from
any buyer who wants to participate in the trade, “on receiv-
ing message from s” means that the smart trading contract
accepts a message from a seller, and “upon receiving () from
some bID” means that the smart trading contract accepts a
transaction without any parameter from any buyer to execute
function.
1) Init and Create: The Init function defines and stores all
variables associated with a new trade, including the WA
of the seller WAs, unit price of computing resource ρ,
list of buyers blist, set of the demand of each buyer D,
and set of the WA of each buyer WA_list. The Create
function creates a new smart contract on the blockchain
and returns the address of the contract. After the smart
trading contract is deployed on the blockchain, it runs
independently and can be accessed by any participator
in the trade. The seller first executes the Init function
to initialize a new trade and then executes the Create
function to start a new trade. With Create, the seller
provides its WA WAs and the unit price of computing
resource ρ. After the Create function is executed, the
contract is ready to accept buyers.
2) CommitD and Trade: The buyers that monitor the
blockchain can commit their commands to the contract
after the Create function is executed. The CommitD
function accepts tuple (bID, γbID, and WAbID) from the
buyer bID, and the demand γbID and WAbID are recorded
Fig. 3. Smart loan contract.
in the contract. The trading process can be automati-
cally performed by triggering the Trade function. During
Trade, the buyers must pay coins from their wallets to
the WA of the seller. Then, the seller can verify the
payments by obtaining the new transaction records gen-
erated by the buyers. After verifying the payments, the
seller allows the buyers to offload their computation
tasks to it.
2) Smart Loan Contract: The MEs that do not have enough
coins for offloading need to borrow from banks. In the process,
the ME acts as the borrower and the bank acts as the loaner. We
use the smart contract to implement the loan process. After the
smart loan contract is deployed, the borrowers can participate
in the loan. When the loan occurs, the smart loan contract is
automatically triggered to complete the loan process, and the
key events on the blockchain are listed as follows.
1) A new smart loan contract is created on the blockchain.
2) The loaner advertises its rate of return.
3) Potential loaners monitor the blockchain for new loans
and submit their demands.
4) The smart trading contract is triggered to complete the
loan process.
5) The new transaction records are stored into blockchain
blocks and verified.
Fig. 3 provides a detailed overview of the functions in the
smart loan contract. Similar to the smart trading contract, “on
receiving message from bID” means that the contract receives
a message from any borrower who wants to participate in
the loan, “on receiving message from l” means that the con-
tract receives a message from a loaner, and “upon receiving
() from some bID” means that the contract receives a trans-
action without any parameter from any borrower to execute
function.
1) Init and Create: The Init function defines and stores all
variables associated with the smart loan contract, includ-
ing the WA of the loaner WAl, rate of return r, list of
borrowers blist, set of the demand of each borrower D,
and set of the WA of each borrower WA_list. The Create
function deploys a smart loan contract on the blockchain
and returns the address of the contract. The loaner needs
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9942 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
TABLE II
SIMULATION PARAMETERS
to send its WA and rate of return to the Create func-
tion. After the Create function is executed, the potential
borrowers can participate in the loan.
2) CommitD and Loan: The borrowers that monitor the
blockchain can commit their loan commands after
Create. The CommitD function receives and records the
tuple (bID, WAbID, and lbID) from borrower bID, where
lbID is the loan demand. The loan process is automati-
cally performed by triggering the Loan function. During
Loan, the loaner transforms the coins to the borrowers.
After Loan, the contract generates an IOU (I owe you)
from each borrower to the loaner.
3) Repay: After the borrowers earn coins by completing the
data processing tasks or mining tasks, they can repay
both principal and interest to the loaners by calling
the Repay function. After verifying the payments, the
contract destroys any corresponding IOUs.
VIII. NUMBER RESULTS
A. Simulation Setup
In the simulations, we placed the MEs and the edge
servers into the region of 600 m × 600 m. We assume that
the coverage of each edge servers is 80 m. In the region,
there are several banks that provide loan services to the
MEs, and we assume that each ME can borrow from any
bank. We suppose that each ME is equipped with long-term
evolution (LTE) interfaces and can connect with the edge
servers via LTE interfaces. Without loss of generality, we
suppose that the uplink rate ωn,s only depends on the type
of communication interface and the distance between ME
n and edge server s. We consider that the channel gain
for ME n to edge server s is proportional to d−θ
n,s , where
dn,s denotes the distance between ME n and edge server
s and θ is the pass loss factor that is set based on the
path loss model for the urban and suburban cellular radio
environment [26], [36]. Given the background noise p0, the
uplink rate between ME n and edge server s can be calculated
as ωn,s = Bs log(1 + pnd−θ
n,s /p0). Besides, the energy con-
sumed per CPU cycle is set as 10−11(f 0
n )2 [26], [29].
The main simulation parameters are listed in
Table II.
Fig. 4. Dynamics of the system cost and the value of the w-potential function
over time slot.
B. Baseline Solutions
In this section, we compare our proposed algorithm with
the following solutions.
1) Genetic Algorithm [37]: Genetic algorithm is an
advanced random-searching-based technique, and the algo-
rithm has been shown to be effective in seeking near-optimal
solutions of complicated combinational optimization prob-
lems. After a sufficient number of iterations, the genetic
algorithm can search for a near-optimal result. However, in
our problem, the searching space for the genetic algorithm is
very large. It takes a large amount of time for the genetic
algorithm to search for a near-optimal result in our problem,
which is intolerable for the computation tasks. Therefore, in
our simulations, we set the number of the generations of the
genetic algorithm to be 200 000 and the population size for
each generation to be 150. Then, we compared the final search-
ing results in the genetic algorithm with the results of our
proposed algorithm.
2) Local Computing by All MEs [25]: Each ME chooses
to compute its computation task using the onboard computing
capacities. In this scenario, each ME can avoid the potential
performance loss caused by the impacts of the decisions of
other MEs.
3) Computation Offloading by All MEs [25]: Each ME
offloads its computation task to an edge server and borrows
from a bank in a random manner. In this scenario, because each
irrational ME does not consider the impacts of the decisions
of other MEs, they may suffer performance loss.
C. Convergence Analysis
To demonstrate the convergence of our proposed distributed
algorithm, we plot the dynamics of the system cost and the
value of w-potential function over time slot in Fig. 4.
The figure shows that the proposed algorithm can ensure the
system cost decreases and converges to a stable state, i.e., the
NE point. At the same time, the value of the w-potential func-
tion also decreases as the time slot increases. Moreover, the
system cost and the value of the w-potential function reach a
stable state simultaneously, indicating that the variation of the
cost function of each ME can be mapped into the variation of
the w-potential function. Thus, the proposed algorithm enables
the system cost to reach a stable point where no MEs can
reduce their cost by changing their decisions unilaterally, i.e.,
the NE point of the game G, demonstrating that the proposed
algorithm has good convergence.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9943
Fig. 5. Number of iterations over the number of MEs.
To evaluate the computational complexity of the proposed
algorithm, in Fig. 5, the number of iterations of the proposed
algorithm under different numbers of MEs, edge servers, and
banks are presented. As shown in Fig. 5, as the number
of MEs in the network increases, the number of iterations
needed to reach the NE point increases. This relationship
exists because as the number of MEs in the network increases,
more MEs have better decisions to update. Moreover, as the
number of MEs increases, the number of iterations for con-
vergence increases slowly. When there are more edge servers
and banks, the number of iterations required to reach the NE
point increases. This is because as the numbers of edge servers
and banks in the network increase, there are more decisions
for each ME to make. However, the increase is very small,
demonstrating that the proposed algorithm can converge to
the NE point in a fast manner and scales well as the number
of MEs increases.
D. Performance Analysis
This section analyzes the performance of the proposed
distributed algorithm. Fig. 4 shows that as the time slot
increases, the proposed algorithm can continue to decrease
the system cost before reaching the NE point. When the
NE point is reached by the proposed algorithm, the system
cost of the network remains constant, demonstrating that the
proposed algorithm can effectively reduce the system cost of
the network. For different network densities (N = 50 and
N = 80 in Fig. 4), as the number of MEs increases, the system
cost increases. However, because of the game between differ-
ent MEs, the system cost at the NE point increases slowly
as the network densities increase. This relationship demon-
strates that the proposed algorithm can effectively improve
the computation performance of the network.
Fig. 6 illustrates the number of beneficial computation-
offloading MEs over time slot under different network den-
sities and computation loads. Fig. 6 shows that the number
of beneficial computation-offloading MEs becomes constant
finally because the proposed algorithm converges to the NE
point. Before reaching the NE point, there are more MEs
that can benefit by offloading their computation tasks to the
edge servers because the edge servers have more comput-
ing resources than the MEs. Moreover, if the size of input
data increases under the same number of MEs, the number
of beneficial computation-offloading MEs also increases. This
Fig. 6. Number of beneficial computation offloading MEs over time slot.
Fig. 7. Upper bound of PoA over the number of MEs.
relationship is because when the size of input data increases,
the computation cost of local computing increases, which is
shown in (9). Thus, more MEs offload their computation tasks
to the edge servers to reduce computation cost.
Fig. 7 shows the variation of the upper bound on PoA in the
game G as the number of MEs increases under different num-
bers of edge servers, banks, and computation loads. The results
in Fig. 7 show that as the number of MEs increases, the upper
bound on the PoA remains almost unchanged. However, when
the numbers of edge servers and banks increase, the upper
bound on PoA under the same network density increases. This
relationship is because when the numbers of edge servers and
banks increase, there are more MEs that offload their computa-
tion tasks to the edge servers and borrow from banks. Besides,
if the computation loads (i.e., the number of CPU cycles)
increase, the upper bound on PoA increases as well. This rela-
tionship is because more MEs offload their computation tasks
to the edge servers because of the higher computation cost in
local computing.
E. Performance of Partial Loan
Based on Assumption 1, the initial model considers the case
of fully depending on a loan to pay the offloading service cost.
We now extend the partial loan case into the initial model by
considering the inherent asset for each ME. We use �n to
denote the inherent asset of ME n. Hence, if ME n decides
to offload, the amount ln that ME n needs to borrow from a
bank is calculated as
ln =
{
0, θn ≤ �n
θn − �n, θn > �n.
(19)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9944 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
Fig. 8. Number of successful convergences of the proposed algorithm in the
extended model per 1000 simulations.
Fig. 9. Dynamics of the system cost over time slot in the extended model.
The above equation means that if the inherent coins of ME n
can cover the cost of offloading, it does not borrow from any
bank. Otherwise, ME n must borrow from a bank to attain
sufficient coins for offloading. Thus, when ME n decides to
borrow from bank m, its loan cost can be calculated as
π̃m
n = ln · Rm
(
nM
n (d)
)
. (20)
Unfortunately, it is difficult to theoretically prove the exis-
tence of the NE point for this extended model, because the
inherent asset �n of ME n has nothing to do with γn which is
a weight of the weighted potential game. Therefore, we show
the convergence of the proposed algorithm in the extended
model by extensive simulations. In the simulations, we draw
�n from a continuous uniform distribution with parameters
[0, 1]. Fig. 8 provides the number of successful convergences
of the proposed algorithm in the extended model per 1000 sim-
ulations. To our surprise, the results in Fig. 8 show that the
proposed algorithm under different numbers of MEs always
converges in the 1000 simulations. Fig. 9 shows the dynam-
ics of the system cost over time slots in the extended model.
The results in Fig. 9 demonstrate that our proposed algo-
rithm can significantly reduce the system cost in the extended
model. Fig. 10 shows the number of iterations required for
the proposed algorithm to converge in the extended model.
The results in Fig. 10 demonstrate that the proposed algorithm
can converge quickly in the extended model. The reason why
the proposed algorithm shows pretty good performance in the
extended model may be that the change of the cost function
of each ME can still be mapped into a global function.
Fig. 10. Number of iterations over the number of MEs in the extended
model.
Fig. 11. Proposed algorithm adapts to the topology changes.
F. Topology-Varying Adaptation
In a practical mobile scenario, the topology of the network
changes over time with the move of the MEs, so we need
to run the proposed algorithm continuously. To evaluate the
performance of our proposed algorithm when the topology
changes, we conduct a simulation to imitate how our algorithm
adapts to the varying topology.
In Fig. 11, we first execute the proposed algorithm to
achieve the NE point of the game, as performed in the simu-
lation shown in Fig. 4. After 50 time slots, the MEs reach the
NE point (denoted by the left-most cycle). Then, we allow the
MEs to move freely at a speed of 20 m/s for 2 s [27]. The
movement of the MEs causes the decisions of some MEs to
no longer be optimal, so the system cost increases (denoted
by the left-most hexagram), as shown in Fig. 11. To our sur-
prise, the increase in the system cost is fairly small. Besides,
the MEs can reach a new NE point again only using 15 time
slots (denoted by the second circle), which is much faster than
the first time. Similarly, we see that for the other four cases,
topology changes yielded similar results.
To show the universality of the phenomenon shown in
Fig. 11, we conduct the simulation shown in Fig. 11 repeat-
edly, and the average results are recorded in Fig. 12. In Fig. 12,
the black bars denote the ratios of the number of iterations
needed to reach the NE point after the first–fifth topology
changes to that needed to reach the NE point before the topol-
ogy changes. The gray bars denote the ratios of the system cost
at the NE point after the first–fifth topology changes to that at
the NE point before the topology changes. Fig. 12 shows that
the heights of the black bars are about 100% and the heights
of the gray bars are about 30%. These results demonstrate
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9945
Fig. 12. Illustration of the universality of the phenomenon shown in Fig. 11.
Fig. 13. Number of beneficial computation offloading MEs over the number
of MEs.
Fig. 14. System cost over the number of MEs.
that after changing the topology, our proposed algorithm can
quickly converge to the NE point again, and the change in the
system cost at the NE point is very small.
Overall, the proposed algorithm can adapt to the varying
topology quickly and maintain high performance in a practical
mobile scenario.
G. Impacts of Parameter Settings
This section investigates the performance of the proposed
distributed algorithm under different parameter settings. We
plot the number of beneficial computation-offloading MEs ver-
sus the number of MEs in Fig. 13. The figure shows that
as the number of MEs increases, the number of beneficial
computation-offloading MEs in the proposed algorithm and
the genetic algorithm increases, and the results of the proposed
algorithm are better than those of the genetic algorithm. While
the number of MEs increases to 70, the number of beneficial
computation-offloading MEs in the solution of computation
Fig. 15. System cost over the size of the input data of the computation task.
Fig. 16. System cost over the number of CPU cycles of the computation
task.
offloading by all MEs decreases. This relationship is because
when the network density increases to a certain level, the
impacts between the decisions of each ME become serious
in this solution.
Fig. 14 shows the system cost calculated from each solu-
tion under different network densities (i.e., different numbers
of MEs). As shown in Fig. 13, when the number of MEs
increases, the system cost in each solution increases as well.
In contrast, in the proposed algorithm, because of the game
between different MEs, the system cost increases slowly as the
network density increases. Moreover, the system cost in the
proposed algorithm under different network densities remains
the smallest, demonstrating that the proposed algorithm can
significantly reduce the system cost.
To analyze the impacts of the input data sizes of the com-
putation tasks, we conducted the simulation shown in Fig. 15.
The figure shows that the system cost in the proposed algo-
rithm, the genetic algorithm and the solution of computation
offloading by all MEs increases as the input data sizes of the
computation tasks increase. This relationship is because when
the input data sizes of the computation tasks increase, trans-
mitting the computation tasks consumes more time and energy.
However, the system cost in the solution of local computing
by all MEs remains constant, because the computation cost in
the case of local computing has nothing to do with the input
data sizes of the computation tasks, and this relationship is
shown in (9).
In Fig. 16, we investigate the impacts of the computa-
tion loads of the computation tasks (i.e., the number of CPU
cycles). The figure shows that when the computation load
increases, the system cost in each solution also increases.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9946 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
TABLE III
COST FOR THE SELLER AND BUYERS IN EXECUTING THE SMART TRADING CONTRACT WHEN THERE ARE 20 BUYERS
TABLE IV
COST FOR THE LOANER AND BORROWERS IN EXECUTING THE SMART LOAN CONTRACT WHEN THERE ARE 20 BORROWERS
This relationship is because computing the computation tasks
consumes more time and energy if the computation loads
of the computation tasks increase. In contrast, the MEs that
offload computation tasks to the edge servers borrow more
from banks, as demonstrated in (8).
Lastly, Figs. 13–16 show that the proposed distributed algo-
rithm can significantly improve the computation performance
of the network. Comparing with the solutions of compu-
tation offloading by all MEs and local computing by all
MEs, there is no doubt that the proposed algorithm pos-
sesses much better performance. The genetic algorithm can
search for a near-optimal result after sufficient iterations, but
it would take a long period of time. While in the simula-
tion we have set the number of the generations of the genetic
algorithm to be 200 000, and the population size for each gen-
eration to be 150, the genetic algorithm still takes much more
time than the proposed algorithm. Besides, the MEs owned
by different parties may not want to obey the centralized
optimization solution because they pursue their own interests.
Therefore, the proposed algorithm shows better performance
by comparison, demonstrating the efficiency of the proposed
algorithm.
H. Performance of Smart Contracts
To demonstrate the performance of the smart contracts
on the blockchain, we deploy these smart contracts in the
Ethereum environment. In Table III, we show the cost of
executing each function of the smart trading contract on the
Ethereum network when there are 20 buyers. In Table IV, we
show the cost of executing each function of the smart loan
contract on the Ethereum network when there are 20 borrow-
ers. The cost is in the amount of gas on the Ethereum network,
and then we convert the cost in gas into the cost in dollars
by using an exchange rate of 1 Gas ≈ 0.00000002 Ether and
1 Ether ≈ $ 280 in July 2019. As we can see, for the smart
trading contract, the total cost is 1.13 million gas ($ 6.35)
for each seller and about 80 thousand gas ($ 0.45) for each
buyer; and for the smart loan contract, the total cost is about
1.47 million gas ($ 8.22) for each loaner and about 132 thou-
sand gas ($ 0.74) for each borrower. Therefore, the financial
cost for executing these smart contracts on the Ethereum
network is low, demonstrating the practicality of the smart
contracts.
IX. CONCLUSION
In this article, we aim to optimize the total cost of all MEs
in the joint computation-offloading and coin-loaning problem
in which the role of a bank is introduced to address the cold
start and long return issues for blockchain-empowered MEC.
We solve the optimization problem in a distributed manner
by designing an efficient distributed algorithm based on a
potential game method. After extending the partial offload-
ing case into the initial model, we theoretically prove that
the case of partial offloading can be reduced to the case of
binary offloading. Besides, a smart trading contract is designed
for automatic computing resource trading between MEs and
edge servers, and a smart loan contract is designed for auto-
matic loan and repayment between MEs and banks. Lastly,
our simulation results demonstrate that the proposed algorithm
can quickly converge to the NE point, achieve superior com-
putation offloading performance, and adapt to the topology
changes. In addition, by deploying the smart contracts on the
Ethereum network, the results demonstrate that the financial
cost for executing the contracts in Ethereum environment is
low.
For future work, we will utilize the Stackelberg game to
optimize the interests of the MEs, edge servers, and banks at
the same time.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9947
APPENDIX A
PROOF OF THEOREM 1
We first define the w-potential function in the game G as
follows:
	(d) = λT
∑
s∈S
nS
s (d)∑
n=1
n
f S
s
+ ρ
∑
m∈M
nM
m (d)∑
n=1
nμ2,m
+
∑
n∈N
on(d)I{an �=0} +
∑
n∈N
qnI{an=0} (21)
where on(d) = ([λEeoff,kn(d)
n (d) + λT toff,kn(d)
n (d) + μ1,kn(d)θn]/
γn), kn(d) denotes the bank that ME n borrows from in the
decision profile d, and qn = ([c0
n − θn]/γn).
We show in the following five cases that the function
	(d) is a w-potential function that satisfies the equation in
Definition 4. Based on our model, there are five different
changing models of decision profile d. We calculate the vari-
ation of cost function and w-potential function based on the
changing models of decision profile d. If ME n decides to
update its decision in the decision profile d, we consider its
decision before updating as dn and its decision after updating
as d′
n.
For case 1), ME n that locally computes its computation task
updates its current decision to offload its computation task to
edge server s′ and borrow from bank m′. Then, the variation
of its cost function when updating its decision from dn to d′
n
can be calculated as
cn
(
d′
n, d−n
) − cn(dn, d−n)
=
(
ρ
∑
n′∈N
bn′,m′μ2,m′ + λT
∑
n′∈N
an′,s′
f S
s′
)
γn
+ (
1 + μ1,m′
)
γnρ +
(
λEpn + λT
)
zn
ωn,s′
− c0
n.
According to (21), for this case, we can calculate the variation
of the w-potential function
	
(
d′
n, d−n
) − 	(dn, d−n)
= ρ
∑
n′∈N
bn′,m′μ2,m′ + λT
∑
n′∈N
an′,s′
f S
s′
+
(
λEpn + λT
)
zn
γnωn,s′
− c0
n − (
1 + μ1,m′
)
γnρ
γn
= 1
γn
(
cn
(
d′) − cn(d)
)
.
For case 2), ME n that offloads its computation task to edge
server s and borrows from bank m updates its current decision
to offload its computation task to edge server s′ and borrow
from bank m. Then, the variation of its cost function when
updating its decision from dn to d′
n can be calculated as
cn
(
d′
n, d−n
) − cn(dn, d−n)
= λTγn
∑
n′∈N
(
an′,s′
f S
s′
− an′,s
f S
s
)
+ (
λEpn + λT)
(
zn
ωn,s′
− zn
ωn,s
)
.
In this case, the variation of the w-potential function can be
calculated as
	
(
d′
n, d−n
) − 	(dn, d−n)
= λT
∑
n′∈N
(
an′,s′
f S
s′
− an′,s
f S
s
)
+ λEpn + λT
γn
(
zn
ωn,s′
− zn
ωn,s
)
= 1
γn
(
cn
(
d′) − cn(d)
)
.
For case 3), ME n that offloads its computation task to edge
server s and borrows from bank m updates its current decision
to offload its computation task to edge server s and borrow
from bank m′. Then, the variation of its cost function when
updating its decision from dn to d′
n can be calculated as
cn
(
d′
n, d−n
) − cn(dn, d−n)
= γnρ
∑
n′∈N
(
bn′,m′μ2,m′ − bn′,mμ2,m
) + θn
γn
(
μ1,m′ − μ1,m
)
.
In this case, the variation of the w-potential function is the
following:
	
(
d′
n, d−n
) − 	(dn, d−n)
= ρ
∑
n′∈N
(
bn′,m′μ2,m′ − bn′,mμ2,m
) + θn
(
μ1,m′ − μ1,m
)
= 1
γn
(
cn
(
d′) − cn(d)
)
.
For case 4), ME n that offloads its computation task to edge
server s and borrows from bank m updates its current decision
to offload its computation task to edge server s′ and loan from
bank m′. Then, the variation of its cost function when updating
its decision from dn to d′
n can be calculated as
cn
(
d′
n, d−n
) − cn(dn, d−n)
= γn
(
λT
∑
n′∈N
(
an′,s′
f S
s′
− an′,s
f S
s
)
+ ρ
∑
n′∈N
(
bn′,m′μ2,m′ − bn′,mμ2,m
)
)
+ (
λEpn + λT)
(
zn
ωn,s′
− zn
ωn,s
)
+ θn
γn
(
μ1,m′ − μ1,m
)
.
In this case, the variation of the w-potential function can be
calculated as
	
(
d′
n, d−n
) − 	(dn, d−n)
= λT
∑
n′∈N
(
an′,s′
f S
s′
− an′,s
f S
s
)
+ ρ
∑
n′∈N
(
bn′,m′μ2,m′ − bn′,mμ2,m
)
+ λEpn + λT
γn
(
zn
ωn,s′
− zn
ωn,s
)
+ θn
(
μ1,m′ − μ1,m
)
= 1
γn
(
cn
(
d′) − cn(d)
)
.
For case 5), ME n that offloads its computation task to
edge server s and borrows from bank m updates its cur-
rent decision to local computing. Similar to the arguments in
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
9948 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
case 1), 	(d′) − 	(d) = (1/γn)(cn(d′) − cn(d)) holds in this
case.
In terms of the results in the presented five cases of the
changing models of decision profile d, the game G in our
model is a weighted potential game with the weight vector
W = (γn)n∈N . Therefore, Theorem 1 is proven.
APPENDIX B
PROOF OF THEOREM 2
This theorem can be proven according to the corollaries
on the potential game shown in [13] and [38]: every finite
potential game possesses a pure-strategy NE point and has the
FIP. Because the decision spaces of the players in the game G
are finite and we have proven that the game G is a weighted
potential game, the pure-strategy NE point exists and the FIP
holds, completing the proof of Theorem 2.
APPENDIX C
PROOF OF THEOREM 3
Because (16) is continuously differentiable with respect to
variable αn, we obtain the following:
∂cn(d)
∂αn
= c0
n − cs,m
n (d). (22)
According to above partial derivative, we know that if c0
n >
cs,m
n (d), then [∂cn(d)/∂αn] > 0 and cn(d) reach a minimum
value at point αn = 0, meaning that task An of ME n is
entirely offloaded to edge server m. If c0
n < cs,m
n (d), then
[∂cn(d)/∂αn] < 0 and cn(d) reaches a minimum value at point
αn = 1, meaning that task An of ME n is entirely computed
locally. If c0
n = cs,m
n (d), then [∂cn(d)]/∂αn] = 0, meaning that
cn(d) is a constant function with αn, so we can choose αn = 0
or αn = 1 for ME n in this case. Therefore, Theorem 3 holds.
APPENDIX D
PROOF OF THEOREM 4
We first define the w-potential function in the game G as
follows:
	(d) = λT
∑
s∈S
nS
s (d)∑
n=1
n
f S
s
+ ρ
∑
m∈M
nM
m (d)∑
n=1
nμ2,m
+
∑
n∈N
on(d)(1 − αn) +
∑
n∈N
qnαn (23)
where on(d) = ([λEeoff,kn(d)
n (d) + λT toff,kn(d)
n (d) + μ1,kn(d)θn]/
γn′), kn(d) denotes the bank that ME n borrows from in the
decision profile d, and qn = ([c0
n − θn]/γn).
According to Theorem 3, the best choice of αn for each
ME is αn = 0 or αn = 1 in the case of partial offloading.
Therefore, the changing models of decision profile d in the
game G are the same as the changing models of decision pro-
file d in the game G. To prove that the function defined above
satisfies the equation in Definition 4, we consider a changing
model of decision profile d, in which ME n that computes its
computation task locally wants to update its current decision
to offload its computation task to edge server s′ and borrow
from bank m′. Based on Theorem 3, we have αn = 0 in this
case. We consider the decision of ME n before updating as
dn and the decision of ME n after updating as d
′
n. Then, the
variation of its cost function when updating its decision from
dn to d
′
n can be calculated as
cn(d
′
n, d−n) − cn(dn, d−n)
=
(
(ρ
∑
n′∈N
bn′,m′μ2,m′ + λT
∑
n′∈N
an′,s′
f S
s′
)γn
+ (1 + μ1,m′)γnρ + (λEpn + λT)zn
ωn,s′
− c0
n
)
(1 − αn).
Based on (23), for this case, we can calculate that the variation
of the w-potential function in this case is the following:
	
(
d
′
n, d−n
)
− 	
(
dn, d−n
)
= ρ
∑
n′∈N
bn′,m′μ2,m′ + λT
∑
n′∈N
an′,s′
f S
s′
+
((
λEpn + λT
)
zn
γnωn,s′
− c0
n − (
1 + μ1,m′
)
γnρ
γn
)
(1 − αn).
Because, we have αn = 0, 	(d
′
n, d−n) − 	(dn, d−n) =
1
γn
(cn(d
′
n, d−n)−cn(dn, d−n)) holds in this case. Similarly, we
can easily obtain the same results in the other four cases of the
changing models of decision profile d. Therefore, Theorem 4
is proven.
APPENDIX E
PROOF OF THEOREM 5
We consider that dNE is an arbitrary NE point attained using
our algorithm and d∗ is the optimal decision calculated using
the centralized optimization solution. Because d∗ makes the
system cost reach a minimum value, we must have PoA ≥ 1.
We give an upper bound of maxd∈DNE c(d) by considering
dNE as the worst-case NE point. We prove that all MEs com-
pute their computation tasks locally is the worst-case NE point
resulting in the highest system cost. Because dNE is an NE
point, we know that cn(dNE) ≤ c0
n holds for all ME n ∈ N .
Otherwise, if an ME n ∈ N exists such that cn(dNE) ≥ c0
n, then
ME n switches to local computing for smaller computation
cost, contradicting the assumption that dNE is an NE point.
Therefore, cn(dNE) ≤ c0
n holds for all ME n ∈ N , and the
worst-case NE point is that all MEs choose local computing.
Thus, maxd∈DNE c(d) is upper bounded by
∑
n∈N c0
n.
Next, we derive the lower bound of system cost in the cen-
tralized optimal solution. If ME n computes its computation
task locally, then its computation cost is c0
n. Otherwise, if ME
n offloads its computation task to edge server s and borrows
from bank m, in the best case, there is no competition with
other MEs, i.e., nS
s (d) = 1 and nM
m (d) = 1. Therefore, based
on (10), we can get the following:
cs,m
n (dn, d−n) ≥ λTγn
f S
s
+ (
1 + μ1,m + μ2,m
)
γnρ
+
(
λEpn + λT
)
zn
ωn,s
= ĉs,m
n . (24)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
ZHANG et al.: JOINT COMPUTATION OFFLOADING AND COIN LOANING FOR BLOCKCHAIN-EMPOWERED MEC 9949
For all edge server s ∈ S and bank m ∈ M, we calcu-
late the minimum cost ĉmin
n = mins∈S,m∈M ĉs,m
n . Then, we
have cn(dn, d−n) ≥ min{c0
n, ĉmin
n } and
∑
n∈N cn(dn, d−n) ≥∑
n∈N min{c0
n, ĉmin
n }. Thus, we can conclude the following:
PoA ≤
∑
n∈N c0
n∑
n∈N min
{
c0
n, ĉmin
n
} (25)
which completes the proof of Theorem 4.
REFERENCES
[1] N. Dlodlo, O. Gcaba, and A. Smith, “Internet of Things technologies in
smart cities,” in Proc. IST-Africa Week Conf., May 2016, pp. 1–7.
[2] N. Abbas, Y. Zhang, A. Taherkordi, and T. Skeie, “Mobile edge com-
puting: A survey,” IEEE Internet Things J., vol. 5, no. 1, pp. 450–465,
Feb. 2018.
[3] X. Ma, S. Wang, S. Zhang, P. Yang, C. Lin, and X. S. Shen, “Cost-
efficient resource provisioning for dynamic requests in cloud assisted
mobile edge computing,” IEEE Trans. Cloud Comput., to be published.
[4] Z. Zhou, J. Feng, Z. Chang, and X. S. Shen, “Energy-efficient edge com-
puting service provisioning for vehicular networks: A consensus ADMM
approach,” IEEE Trans. Veh. Technol., vol. 68, no. 5, pp. 5087–5099,
May 2019.
[5] W. Chen, B. Liu, H. Huang, S. Guo, and Z. Zheng, “When UAV
swarm meets edge-cloud computing: The QoS perspective,” IEEE Netw.,
vol. 33, no. 2, pp. 36–43, Mar./Apr. 2019.
[6] K. Christidis and M. Devetsikiotis, “Blockchains and smart contracts for
the Internet of Things,” IEEE Access, vol. 4, pp. 2292–2303, 2016.
[7] Y. Zhang, S. Kasahara, Y. Shen, X. Jiang, and J. Wan, “Smart contract-
based access control for the Internet of Things,” IEEE Internet Things
J., vol. 6, no. 2, pp. 1594–1605, Apr. 2019.
[8] Z. Li, J. Kang, R. Yu, D. Ye, Q. Deng, and Y. Zhang, “Consortium
blockchain for secure energy trading in industrial Internet of Things,”
IEEE Trans. Ind. Informat., vol. 14, no. 8, pp. 3690–3700, Aug. 2018.
[9] Y. Jiao, P. Wang, D. Niyato, and K. Suankaewmanee, “Auction
mechanisms in cloud/fog computing resource allocation for public
blockchain networks,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 9,
pp. 1975–1989, Sep. 2019. doi: 10.1109/TPDS.2019.2900238.
[10] J. Wood. Lending and Borrowing on the Blockchain-Should
Banks Be Scared? Accessed: Jan. 2019. [Online]. Available:
https://medium.com/trivial-co/
[11] Y. Chen, N. Zhang, Y. Zhang, and X. Chen, “Dynamic computation
offloading in edge computing for Internet of Things,” IEEE Internet
Things J., vol. 6, no. 3, pp. 4242–4251, Jun. 2019.
[12] F. Sun et al., “Cooperative task scheduling for computation offload-
ing in vehicular cloud,” IEEE Trans. Veh. Technol., vol. 67, no. 11,
pp. 11049–11061, Nov. 2018.
[13] H. Shah-Mansouri and V. W. Wong, “Hierarchical fog-cloud computing
for IoT systems: A computation offloading game,” IEEE Internet Things
J., vol. 5, no. 4, pp. 3246–3257, Aug. 2018.
[14] J. Zheng, Y. Cai, Y. Wu, and X. S. Shen, “Dynamic computation offload-
ing for mobile cloud computing: A stochastic game-theoretic approach,”
IEEE Trans. Mobile Comput., vol. 18, no. 4, pp. 771–786, Apr. 2019.
[15] H. Guo, J. Zhang, J. Liu, and H. Zhang, “Energy-aware computation
offloading and transmit power allocation in ultra-dense iot networks,”
IEEE Internet Things J., vol. 6, no. 3, pp. 4317–4329, Jun. 2019.
[16] Y. Zhang, B. Feng, W. Quan, G. Li, H. Zhou, and H. Zhang, “Theoretical
analysis on edge computation offloading policies for IoT devices,” IEEE
Internet Things J., vol. 6, no. 3, pp. 4228–4241, Jun. 2019.
[17] H. Guo, J. Liu, J. Zhang, W. Sun, and N. Kato, “Mobile-edge computa-
tion offloading for ultra-dense IoT networks,” IEEE Internet Things J.,
vol. 5, no. 6, pp. 4977–4988, Dec. 2018.
[18] H. Al-Shatri, S. Müller, and A. Klein, “Distributed algorithm for energy
efficient multi-hop computation offloading,” in Proc. IEEE Int. Conf.
Communi. (ICC), 2016, pp. 1–6.
[19] D. Chatzopoulos, M. Ahmadi, S. Kosta, and P. Hui, “Flopcoin: A cryp-
tocurrency for computation offloading,” IEEE Trans. Mobile Comput.,
vol. 17, no. 5, pp. 1062–1075, May 2018.
[20] M. Liu, R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Computation
offloading and content caching in wireless blockchain networks with
mobile edge computing,” IEEE Trans. Veh. Technol., vol. 67, no. 11,
pp. 11008–11021, Nov. 2018.
[21] Z. Xiong, S. Feng, D. Niyato, P. Wang, and Z. Han, “Edge computing
resource management and pricing for mobile blockchain,” arXiv preprint
arXiv:1710.01567, 2017.
[22] Z. Li, Z. Yang, and S. Xie, “Computing resource trading for edge-cloud-
assisted Internet of Things,” IEEE Trans. Ind. Informat., vol. 15, no. 6,
pp. 3661–3669, Jun. 2019.
[23] Y. Jiao, P. Wang, D. Niyato, and Z. Xiong, “Social welfare maximization
auction in edge computing resource allocation for mobile blockchain,”
in Proc. IEEE Int. Conf. Commun., 2018, pp. 1–6.
[24] Z. Li, Z. Yang, S. Xie, W. Chen, and K. Liu, “Credit-based payments
for fast computing resource trading in edge-assisted Internet of Things,”
IEEE Internet Things J., vol. 6, no. 4, pp. 6606–6617, Aug. 2019.
[25] X. Chen, L. Jiao, W. Li, and X. Fu, “Efficient multi-user computation
offloading for mobile-edge cloud computing,” IEEE/ACM Trans. Netw.,
vol. 24, no. 5, pp. 2795–2808, Oct. 2016.
[26] S. Jošilo and G. Dán, “A game theoretic analysis of selfish mobile com-
putation offloading,” in Proc. IEEE INFOCOM Conf. Comput. Commun.,
2017, pp. 1–9.
[27] Z. Hong, H. Huang, S. Guo, W. Chen, and Z. Zheng, “QoS-aware coop-
erative computation offloading for robot swarms in cloud robotics,” IEEE
Trans. Veh. Technol., vol. 68, no. 4, pp. 4027–4041, Apr. 2019.
[28] Y. Wen, W. Zhang, and H. Luo, “Energy-optimal mobile application
execution: Taming resource-poor mobile devices with cloud clones,” in
Proc. IEEE Infocom, 2012, pp. 2716–2720.
[29] S. Jošilo and G. Dán, “Selfish decentralized computation offloading
for mobile cloud computing in dense wireless networks,” IEEE Trans.
Mobile Comput., vol. 18, no. 1, pp. 207–220, Jun. 2019.
[30] N. Li, J.-F. Martinez-Ortega, and V. H. Diaz, “Distributed power con-
trol for interference-aware multi-user mobile edge computing: A game
theory approach,” IEEE Access, vol. 6, pp. 36105–36114, 2018.
[31] N. Li, J.-F. Martinez-Ortega, and G. Rubio, “Distributed joint offloading
decision and resource allocation for multi-user mobile edge computing:
A game theory approach,” arXiv preprint arXiv:1805.02182, 2018.
[32] D. Satria, D. Park, and M. Jo, “Recovery for overloaded mobile
edge computing,” Future Gener. Comput. Syst., vol. 70, pp. 138–147,
May 2017.
[33] Y. Mao, J. Zhang, S. H.Song, and K. B. Letaief, “Power-delay tradeoff
in multi-user mobile-edge computing systems,” in Proc. IEEE Glob.
Commun. Conf. (GLOBECOM), 2016, pp. 1–6.
[34] Y. Mao, J. Zhang, S. H. Song, and K. B. Letaief, “Stochastic joint
radio and computational resource management for multi-user mobile-
edge computing systems,” IEEE Trans. Wireless Commun., vol. 16, no. 9,
pp. 5994–6009, Sep. 2017.
[35] S. Wu, Y. Chen, Q. Wang, M. Li, C. Wang, and X. Luo, “CReam: A
smart contract enabled collusion-resistant e-auction,” IEEE Trans. Inf.
Forensics Security, vol. 14, no. 7, pp. 1687–1701, Jul. 2019.
[36] T. S. Rappaport et al., Wireless Communications: Principles and
Practice. Upper Saddle River, NJ, USA: Prentice-Hall, 1996.
[37] L. Davis, Handbook of Genetic Algorithms. New York, NY, USA: Van
Nostrand Reinhold, 1991.
[38] D. Monderer and L. S. Shapley, “Potential games,” Games Econ. Behav.,
vol. 14, no. 1, pp. 124–143, 1996.
Zhen Zhang received the B.S. degree from Tianjin
Polytechnic University, Tianjin, China, in 2018. He
is currently pursuing the M.S. degree with the
School of Data and Computer Science, Sun Yat-sen
University, Guangzhou, China.
His current research interests include blockchain,
Internet of Things, edge computing, and game
theory.
Zicong Hong is currently pursuing the B.Eng.
degree in software engineering with the School of
Data and Computer Science, Sun Yat-sen University,
Guangzhou, China.
His current research interests include game the-
ory, Internet of Things, blockchain, and edge/cloud
computing.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TPDS.2019.2900238
9950 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 6, DECEMBER 2019
Wuhui Chen (M’15) received the bachelor’s degree
from Northeast University, Shenyang, China, in
2008, and the master’s and Ph.D. degrees from the
University of Aizu, Aizuwakamatsu, Japan, in 2011
and 2014, respectively.
From 2016 to 2017, he was a Researcher with
the University of Aizu. He is currently an Associate
Professor with Sun Yat-sen University, Guangzhou,
China. From 2014 to 2016, he was a Research
Fellow with the Japan Society for the Promotion of
Science, Tokyo, Japan. His current research interests
include edge/cloud computing, cloud robotics, and blockchain.
Zibin Zheng (SM’17) received the Ph.D. degree
from the Chinese University of Hong Kong,
Hong Kong, in 2011.
He is currently a Professor with the School of
Data and Computer Science, Sun Yat-sen University,
Guangzhou, China. His current research interests
include service computing and cloud computing.
Prof. Zheng was a recipient of the Outstanding
Ph.D. Thesis Award of the Chinese University of
Hong Kong in 2012, the Association for Computing
Machinery’s Special Interest Group on Software
Engineering Distinguished Paper Award at the International Conference on
Science and Engineering in 2010, the Best Student Paper Award at the
International Conference on Web Services in 2010, and the IBM Ph.D.
Fellowship Award for the year 2010. He has served as a Program Committee
Member of the IEEE International Conference on Cloud Computing, the
International Conference on Web Services, the International Conference
on Service Computing, the International Conference on Service-Oriented
Computing, and the International Symposium on Service-Oriented System
Engineering.
Xu Chen (M’12) received the Ph.D. degree
in information engineering from the Chinese
University of Hong Kong, Hong Kong, in 2012.
He is a Full Professor with Sun Yat-sen
University, Guangzhou, China, and the Vice
Director of the National and Local Joint
Engineering Laboratory of Digital Home Interactive
Applications, Guangzhou. He was a Post-Doctoral
Research Associate with Arizona State University,
Tempe, AZ, USA, from 2012 to 2014, and a
Humboldt Scholar Fellow with the Institute of
Computer Science, University of Göttingen, Göttingen, Germany, from 2014
to 2016.
Prof. Chen was a recipient of the prestigious Humboldt Research
Fellowship Award by Alexander von Humboldt Foundation of Germany, the
2014 Hong Kong Young Scientist Runner-Up Award, the 2016 Thousand
Talents Plan Award for Young Professionals of China, the 2017 IEEE
Communication Society Asia-Pacific Outstanding Young Researcher Award,
the 2017 IEEE ComSoc Young Professional Best Paper Award, the Honorable
Mention Award of the 2010 IEEE International Conference on Intelligence
and Security Informatics, the Best Paper Runner-Up Award of the 2014 IEEE
International Conference on Computer Communications, and the Best Paper
Award of the 2017 IEEE International Conference on Communications. He is
currently an Associate Editor of the IEEE INTERNET OF THINGS JOURNAL
and the IEEE JOURNAL ON SELECTED AREAS IN COMMUNICATIONS series
on Network Softwarization and Enablers.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:15:36 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice