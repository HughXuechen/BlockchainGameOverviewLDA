Coalition Game-Based Computation Resource Allocation for Wireless Blockchain Networks
IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019 8507
Coalition Game-Based Computation Resource
Allocation for Wireless Blockchain Networks
Ning Zhao , Hao Wu , Member, IEEE, and Yali Chen
Abstract—Public blockchain network (PBN) has been widely
used in wired networks such as bitcoin network, in which proof-
of-work (PoW) algorithm is deployed among miners to reach
consensus on users data during the mining process. However,
the PoW consensus mechanism is computation-consuming which
obstacles the application of PBN in wireless mobile networks since
most Internet of Things/mobile devices (IMDs) are resource lim-
ited. Recently, mobile edge computing (MEC) has been regarded
as a promising technology which can allow IMDs to offload
their computation tasks to the edge nodes. Although IMDs can
offload their computation tasks to the edge nodes, there is still
lots of competition among enormous solo mining IMDs when
reaching consensus. In this paper, we first formulate the compu-
tation resource allocation problem of PBN from the viewpoint
of coalition game theory under the MEC environment. Then, we
propose a coalition formation game-based algorithm to maximize
the system sum utility and take both the individual profit of IMD
and coalition profit into consideration. Furthermore, we prove
the proposed algorithm converges to a Nash-stable partition in a
fast convergence rate and finally reaches the near-optimal solu-
tion with low computational complexity. The simulation results
demonstrate the optimality and convergence of the proposed algo-
rithm, and the proposed algorithm outperforms other schemes
in terms of system sum profit and ratio of rewarded IMDs to
overall IMDs.
Index Terms—Coalition game, computation offloading,
Internet of Things (IoT), mobile edge computing (MEC), public
blockchain.
NOMENCLATURE
αr
m,e Rent-computation ability of IMD m from ESP e.
αs
m Self-computation ability of IMD m.
E Set of ESPs.
M Set of IMDs.
R(Cp) Common profit of coalition Cp.
Ri(Cp) Individual profit of cIMD i in coalition Cp.
XM×E Matrix on all IMDs’ choices.
Manuscript received March 15, 2019; revised May 12, 2019; accepted
May 23, 2019. Date of publication May 29, 2019; date of current ver-
sion October 8, 2019. This work was supported in part by the State Key
Laboratory of Rail Traffic Control and Safety, Beijing Jiaotong University,
under Contract RCS2019ZT006, and in part by the Fundamental Research
Funds for the Central Universities under Grant 2018JBZ102. (Corresponding
author: Hao Wu.)
N. Zhao and Y. Chen are with the State Key Laboratory of Rail Traffic
Control and Safety, Beijing Jiaotong University, Beijing 100044, China, and
also with the School of Electronic and Information Engineering, Beijing
Jiaotong University, Beijing 100044, China (e-mail: n_zhao@bjtu.edu.cn;
chenyali@bjtu.edu.cn).
H. Wu is with the State Key Laboratory of Rail Traffic Control
and Safety, Beijing Jiaotong University, Beijing 100044, China (e-mail:
hwu@bjtu.edu.cn).
Digital Object Identifier 10.1109/JIOT.2019.2919781
�i Preference order of cIMD i.
C Set of coalitions.
c Electricity fee per unit computation.
Cp Utility function of coalition Cp.
cm,ej Contribution parameter that used to assign min-
ing reward for cIMD m under ESP ej.
cIMD IMD that adopts collusive mining strategy.
D2D Device to device.
DApp Decentralized application.
E Number of ESPs.
ESP Edge computing service provider.
IMD Internet of Things or mobile device.
IoT Internet of Things.
Lej,c Common mining reward of cIMDs under the
same ESP ej.
Lm,c Individual mining reward Lm,c of the cIMD m.
Lm,s Mining reward of sIMD m.
M Number of IMDs.
MEC Mobile edge computing.
P2P Peer to peer.
pe Rent fee per unit computation resource of
ESP e.
Pm,orp Possibility of generating orphan blocks by
sIMD m.
Pm,v Possibility of generating valid block by sIMD m.
PBFT Practical Byzantine fault tolerance.
PoW Proof-of-work.
QoS Quality of service.
R Mining reward given by the system.
r Average mining reward from blockchain user for
each transaction.
sIMD IMD that adopts solo mining strategy.
Tm Number of transactions that IMD m
batches.
U System sum utility.
Ui(Cp) Individual utility function of cIMD i in coali-
tion Cp.
Uej,c Utility function of ESP ej.
Um,c Utility function of cIMD m.
Um,s Utility function of sIMD m.
VANET Vehicular ad hoc network.
w Fixed service cost per unit rent computation
resource of ESP.
WBN Wireless blockchain network.
xm,e Indicator on whether IMD m rents computation
resources from ESP e.
z Given network latency parameter.
2327-4662 c© 2019 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-1389-2469
https://orcid.org/0000-0002-4733-0125
8508 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019
I. INTRODUCTION
W ITH a prediction of 18 billion devices until 2022 [1],
IoT has been a promising technology with remark-
able influence across many fields, like smart transportation,
smart grid, smart heath, etc. [2]. Ubiquitous devices can
connect to each other with the help of IoT, provide high
efficiency and security services anytime and anywhere in var-
ious networks [3]. Traditional schemes are widely deployed
in IoT like cloud centric scheme. However, with the increase
of devices, the management and maintenance of devices has
been becoming an emerging problem from the manufacturer
side, and the increasing demands like latency and QoS cannot
be guaranteed from the user side.
Recently, blockchain has attracted great attention from
industry and academia, and has been regarded as a promis-
ing decentralized technology to enhance network performance
and security. Initially, blockchain was introduced to tackle
the double-spending problem in electronic trading, gradually
it has been applied gradually to many fields like smart grid
systems [4] and content delivery networks [5]. In essence,
blockchain is a distributed ledger, and the interactive data
from blockchain users is stored in the so-called blocks which
are chained by hash pointers. The key characteristic or the
most creative feature of blockchain is the hash pointer which
is used to chain different blocks, whereby the anti-tamper
and other security properties can be realized. Each block in
the blockchain has a specific hash header (i.e., hash pointer)
which is generated through some specific hash functions like
SHA256 whose input is related to the previous block con-
tent. The specific hash header is the hash value whose prefix
is a series of zeroes. Because the hash function is one-way
function that is easy to verify but hard to deduce its inputs
inversely, therefore, once a block is recognized by the major-
ity network participants, the attacker cannot tamper the block
content unless it controls the 51% computation ability com-
pared with the computation ability of the whole network [6].
Different from the centralized systems that the data is stored in
several central servers, the data in blockchain can be held and
accessed by any network participant so that can be supervised
by the entire network.
The blockchain-based network is a combination of the
P2P network and consensus algorithms. The P2P technology
is the underlying technology that supports the blockchain-
based network, therefore the network holds the ability of
self-organized [7] as the same as P2P. We distinguish
different types of blockchain-based networks according to
their consensus mechanisms. Generally speaking, we can
divide the blockchain-based network into two categories:
1) permissioned-chain network and 2) permissionless-chain
network. In the permissioned-chain network, the system has a
fine-grained control over the system participants, i.e., the par-
ticipants are restrictively filtered and whose roles and attributes
are also strictly regulated, meanwhile the behaviors of the
participants are also strictly monitored. Consensus algorithms
like PBFT [8] or Ripple algorithm [9] are adopted in such
network to reach consensus among participants on the data
that blockchain user generated. In the permissionless-chain
network [i.e., public blockchain network (PBN)], the identities
Fig. 1. Illustration of WBN.
of participants are unknown and the legality of participants
cannot be guaranteed, therefore the consensus algorithms
adopted in permissioned-chain network like PBFT cannot be
deployed in such network. The most famous consensus algo-
rithm that can be adopted in the permissionless-chain network
is PoW, which was proposed by Nakamoto in 2008 [6]. In
the PoW-based permissionless-chain network, participants can
be divided into two roles: 1) blockchain user and 2) miner.
Blockchain users generate transactions, and miners try to mine
valid blocks. Blockchain users can be miners, vice-versa. The
PoW consensus algorithm regulates that the miners should
change different nonce with the previous block content to gen-
erate a new valid block through specific hash function, also we
call it mining process. To incentive more miners participate in
the mining process, the first solver will be rewarded certain
tokens from system and blockchain user. The permissionless-
chain network is especially suitable to be deployed among
IMDs for constructing the decentralized autonomous frame-
work in wireless communication networks [10]. With the
help of blockchain, service providers of IMDs only need to
investigate a small operating fee to keep the self-organized
system operating normally. However, the mining process is
considered to be a computation-consuming process which
obstructs the application process among those lightweight
resource-limited IMDs from being directly participating in the
consensus process.
MEC has been introduced to leverage available computation
resources in mobile environments. Under the MEC environ-
ment, traditional centralized server is substituted by ESPs
which are deployed at the edge of the network, like RSU
equipped with some servers. With the help of MEC, IMDs
can acquire more computation and communication resources,
meanwhile decrease the latency and enhance QoS compared
with the traditional centralized system, which are key require-
ments in the fifth-generation (5G) networks [11]. Based on
MEC, a combination of MEC and blockchain network called
WBN is emerging [12], [13] as illustrated in Fig. 1. WBN
can be applied into many application scenarios like cellular
networks and D2D networks where mobile devices can equip
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
ZHAO et al.: COALITION GAME-BASED COMPUTATION RESOURCE ALLOCATION FOR WBNs 8509
blockchain clients, and WiFi/WLAN networks where personal
computers or pads can equip blockchain clients, and VANET
where vehicles can equip blockchain clients. Once equipped
blockchain clients, IMDs can try to mine and store valid
blocks and reach consensus on the credibility of IMDs or
some network views (like network topology) for the better
integration of the heterogeneous networks.
As aforementioned, the permissionless-chain network is
suitable for constructing the decentralized autonomous frame-
work in wireless communication, therefore, the PoW consen-
sus algorithm should be deployed among IMDs. However, the
PoW consensus algorithm is computation-consuming and most
IMDs are resource limited. For example, refer to [14] and [15],
the hash rate of an IMD equips ARM Cortex A53 is
555 555 H/s. The hash rate means the number of hash val-
ues that a device can generate per second. However, the
worst case is this IMD needs to generate 4 294 967 296 hash
values to solve the simplest case of PoW. Therefore, it is
impossible for an IMD to generate a valid block by its own
computation ability to solve the cryptographic puzzle. Hence,
to deploy the PoW consensus algorithm among resource-
limited IMDs, a new option called cloud-mining has been
proposed [13], whereby IMDs can offload their computation
tasks to ESPs. The introduction of the cloud-mining has the
following benefits.
1) The robustness of the permissionless-chain network can
be enhanced via involving more IMDs to anti the 51%
attack.
2) The incentive mechanism will facilitate more IMDs to
deploy blockchain-based applications, e.g., DApp which
has attracted much attention from industry [16].
3) The high activity of miners will attract more IMDs to
deploy blockchain-based applications which in return to
secure the underlying blockchain network.
The incentive mechanism to involve more IMDs in WBN
is they can obtain the mining reward when adopt the PoW
consensus mechanism. Xiong et al. [17] pointed out that IoT
devices can offload computation tasks to ESPs for mining
and pay rent to ESPs, and auction incentive mechanism like
Stackelberg model is adopted to describe the interest relation-
ship between IoT devices and ESPs. The interest relationship
is ESPs and IMDs try to maximize their individual profits
independently. However, although an IMD can offload com-
putation tasks to ESPs to mine a valid block and obtain mining
reward, there are still too many other IMDs will compete with
it during the mining process. This phenomenon will lead to
only a few IMDs can get mining reward, and lots of compu-
tation resources are largely wasted. If we change the thinking
way that supposes a certain set of miners can collude, namely,
put their computation resources together to mine a valid block,
and share the common reward, it might obtain more reward
than solo mining.
In this paper, we stand in the viewpoint of the coalition
game, and investigate the problem of computation resource
allocation by considering the collusive mining relationship
among the IMDs and ESPs. Specifically, we extract the com-
putation resource allocation problem for multiple IMDs and
ESPs from a view of game theory and use the coalition
formation game [18] to design an algorithm. Coalition game
is a mathematical tool used to study the complex interactions
between interdependent rational actors and predict their strate-
gic choices. Different from the noncooperative game approach
(NG) that stands in the viewpoint of individual profit, coali-
tion game considers the overall profit instead of individual
profit, and has been widely used in the field of wireless com-
munications networks [19], where players can form different
coalitions to enhance the system performance. We propose a
coalition formation game model, in which each IMD needs to
choose which ESP to rent computation resources, i.e., offload
computation tasks, meanwhile, tries to maximize the overall
system performance of the system sum utility, which is for-
mulated by a utility function. The main contributions of this
paper are summarized as follows.
1) To the best of our knowledge, we first introduce
the coalition formation game to study the computa-
tion resource allocation problem underlying WBN with
multiple IMDs and ESPs. IMDs under the same ESP
and ESP form one coalition. IMDs can collude under the
same coalition during the mining process, meanwhile, a
mining reward allocation scheme for IMDs in the same
coalition is designed according to their corresponding
computation ability.
2) We formulate the optimal computation resource alloca-
tion problem of IMDs and ESPs underlying WBN as a
utility maximization problem, propose a coalition forma-
tion game-based algorithm, and theoretically prove the
convergence, stability, optimality, and complexity of the
proposed algorithm.
3) We simulate the proposed coalition formation game-
based algorithm and compare its performance with
optimal solution scheme (OS), noncooperative scheme,
random coalition formation scheme, and average coali-
tion formation scheme. The simulation results demon-
strate the optimality and convergence of our proposed
algorithm, meanwhile, the algorithm outperforms other
schemes in terms of system sum profit and ratio of
rewarded IMDs to overall IMDs.
The rest of this paper is organized as follows. In Section II,
we summarize some related works of mining schemes in WBN
from cooperative and noncooperative view. In Section III, we
describe the computation resource allocation of IMDs and
ESPs underlying WBN overview, describe the WBN and for-
mulate the maximization utility problem. In Section IV, we
give some definitions of the coalition formation game and
propose a coalition formation game-based algorithm to deal
with the computation resource allocation problem under WBN.
In Section V, we theoretically prove the convergence, stabil-
ity, optimality, and complexity of the proposed algorithm. The
simulation results are in Section VI, and conclusion and future
considerations are in Section VII.
II. RELATED WORKS
There are several researches focusing on mining schemes
for WBN, and they can be divided into two categories:
1) noncooperative schemes and 2) cooperative schemes.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
8510 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019
From the view of noncooperative mining, Liu et al. [13]
studied the computation offloading and content caching
problem in the WBNs, alternating direction method of
multipliers (ADMMs) algorithm was used to find the optimal
solutions of offloading scheduling and content caching strat-
egy. Xiong et al. [20] introduced edge computing for mobile
blockchain applications, Stackelberg model was used to
model the relationship between mobile devices and ESPs.
Xiong et al. [17] adopted the two-stage Stackelberg game
model to jointly study the profit maximization of cloud/fog
provider and the utility maximization of miners. Unique Nash
equilibrium point of the game among the miners was derived.
However, the noncooperative mining schemes will largely
waste computation resources for there can only one miner to
be succeed.
From the view of cooperative mining, a scheme using
cooperative game-based method was proposed to find the
optimal pool mining mechanism in wired circumstance in [21].
Besides, a computational power splitting game-based scheme
was proposed in [22], where miners obtained the mining
reward by competitively solving the cryptographic problem, in
addition, modeled the attackers’ behavior. However, to the best
of our knowledge, there is no research focusing on adopting
the coalition game-based approach in WBN under the MEC
environment. Therefore, in this paper, we adopt the coali-
tion formation game-based method to design a computation
resource allocation scheme.
III. SYSTEM OVERVIEW AND PROBLEM DEFINITION
In the first section, we give an overview of the WBN
and describe the system. In the second section, we discuss
two mining strategies and formulate the computation resource
allocation problem.
A. System Overview and Description
As illustrated in Fig. 2, there are three entities in the system
which are ESPs, IMDs, and MEC server manager. More
specifically, we can distinguish IMD according to its mining
strategy. For ease of expression, we use sIMD to denote the
IMD that adopts solo mining strategy and use cIMD to denote
the IMD that adopts collusive mining strategy. sIMD mines
alone and it can only rent computation resources from an ESP.
Once mined a valid block, sIMD obtains the overall mining
reward alone. cIMDs rent computation resources from ESPs
and they concentrate their computation resources together and
mine collusively. Contrary to sIMD, once cIMDs mined a valid
block, they share the common mining reward. The sharing
mining reward process is led by the corresponding ESP. The
details of the different mining strategies will be specific illus-
trated in the problem definition section. An ESP is constituted
by two parts, a communication unit and a server. The com-
munication unit is responsible for communicating with IMDs
and managing them within its communication range, mean-
while share the common mining reward of cIMDs. There are
some researches have discussed the access management of
IMDs using blockchain technology, like [23]. CoAP proto-
col [24] can be adopted in the communication link between
Fig. 2. Two mining strategies of IMDs under the WBN.
ESP and IMDs, meanwhile, provide secure communication
channels through DTLS [25]. Actually, ESP can provide an
interface to translate the CoAP protocol into JSON format for
the ease of incorporating into Ethernet and extending applica-
tion scenarios in the future. To provide the computation task
offloading function for IMDs, ESP should equip a server with
strong processing ability. Additionally, ESPs are managed by
an MEC server manager in the cloud area.
The underlying IMDs constitute a P2P network, they run
blockchain clients and can communicate with each other. An
IMD can be a blockchain user or a miner. The difference
between the blockchain user and miner is whether they par-
ticipate in the mining process. Blockchain user only generates
transactions, and the consensus is accomplished by miners. In
this paper, we assume each IMD is a miner and can connect
to arbitrary ESP, and rent computation resources from only
one ESP. The PoW consensus algorithm is deployed among
IMDs to reach consensus on the newly generated transac-
tions from blockchain user. Consider the limited storage ability
among IMDs, each IMD can store partial blockchain ledger,
i.e., the latest several blocks. Meanwhile, consider the sleep
state among IMDs, they can acquire the latest blockchain
ledger from neighbor IMDs once booting which has been
discussed in [26]. As aforementioned, the PoW consensus
algorithm is computation-consuming, therefore, IMDs should
rent computation resources from ESPs to work on mining.
B. Problem Definition
In the system, we use a set E = {e1, e2, . . . , eE} to
denote ESPs whose cardinality is |E | = E, a set M =
{m1, m2, . . . , mM} to denote IMDs whose cardinality is |M| =
M. As aforementioned in the former section, IMDs can rent
computation resources from arbitrary ESP for mining. We
use an indicator xm,e ∈ {0, 1} to represent whether IMD m
chooses to rent computation resources from ESP e, for ∀e ∈ E ,
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
ZHAO et al.: COALITION GAME-BASED COMPUTATION RESOURCE ALLOCATION FOR WBNs 8511
∀m ∈ M. xm,e = 1 means IMD m chooses to rent computa-
tion resources from ESP e, otherwise xm,e = 0. Here, we only
consider the case that one IMD can only rent computation
resources from only one ESP. Correspondingly, we have the
following constraint condition,
∑
e∈E xm,e ≤ 1, m ∈ M. Here,
we use a matrix XM×E to denote the choices of all IMDs.
Once an IMD chooses to rent computation resources from
ESP e, then ESP e will give the IMD two mining strategies,
i.e., solo mining or collusive mining. We describe the solo
mining strategy first.
1) Solo Mining Strategy : Once an IMD adopts solo min-
ing strategy to mine a valid block, the mining reward is all
owned by itself. To be valid, a block needs to go through two
phases, i.e., mining phase and propagation phase, namely, its
hash header needs to be correct during the mining phase and
be recognized by the entire network during the propagation
phase. In the mining phase, for an sIMD, the possibility of
successful finding a correct hash header is related to its com-
putation ability which means the expected mining reward is
proportional to its computation ability. The computation ability
of sIMD m is constituted by two parts, self-computation abil-
ity αs
m and rent-computation ability αr
m,e from ESP e. Once
a block is mined, the solver will broadcast it to the entire
network and enter the propagation phase. In the propagation
phase, the mined block with the correct hash header needs
to be propagated to the entire network and recognized by the
majority IMDs. However, not all the mined blocks can be the
valid blocks due to the propagation latency in the network. The
propagation latency of a mined block depends on the transac-
tions it contains because each transaction needs to be verified
by the receiving IMDs, therefore, a mined block contains more
transactions needs more verification time in the propagation.
Once some mined blocks are propagated slowly relative to
other mined blocks in the propagation phase, they become
orphan blocks [27]. The orphan blocks will be discarded even-
tually. Refer to [28], the block mining process follows Poisson
distribution, therefore, the generation of orphan blocks by
sIMD m is
Pm,orp = 1 − e−λzTm (1)
where λ = 1/600 is the mean value of Poisson distribution
refers to [28], z is a given network latency parameter and Tm
is the number of transactions that a mined block contains.
According to the possibility that a mined block to be orphan
block, we can derive the possibility that a mined block to be
valid as
Pm,v = 1 − Pm,orp = e−λzTm . (2)
The corresponding mining reward of sIMD m is proportional
to its computation ability, and it can be calculated as
Lm,s =
∑
e∈E
xm,e(R + Tmr)(αs
m + αr
m,e)e
−λzTm (3)
where the mining reward is constituted by two parts, given by
system and given by blockchain user. Actually, in the tradi-
tional bitcoin network, blockchain users should pay a certain
mining fee for miners. We use a preset R to represent the
fixed mining reward given by the system, and a fixed r to
represent the average mining reward from blockchain user for
each transaction so that Tmr is the total mining reward from
blockchain users.
Besides the mining reward, sIMD needs to pay electricity
fee when trying to mine a valid block according to its self-
computation ability, and amount of fee to the corresponding
ESP for the needs of renting computation resources. Therefore,
the individual utility function of sIMD m can be calculated as
Um,s = Lm,s − αs
mc −
∑
e∈E
xm,eα
s
m,epe (4)
where c is the electricity fee per unit computation resource
and pe is the rent per unit computation resource published
by ESP e.
The solo mining strategy largely wastes the computation
resources, meanwhile, intensifies the competition between
IMDs during the mining process which leads to low possibil-
ity for a single IMD to obtain the mining reward. Conversely,
if IMDs can rent computation resources from ESP, and then
mine collusively with other IMDs, then it has higher possibility
for obtaining the mining reward than solo mining. Therefore,
the collusive mining strategy is introduced in the next section,
in which IMDs can collude to mine a common valid block,
then share the common mining reward which can reduce the
mining competition during the mining process.
2) Collusive Mining Strategy: IMDs that rent computation
resources from the same ESP can concentrate their computa-
tion resources together to increase the expected mining reward,
i.e., collusive mining strategy. cIMDs mine the same block
under the same ESP which means the transaction number of
blocks they are mining are the same. As aforementioned in
the introduction, miners try different nonce to find a correct
hash header. Hence, each cIMD is assigned a different nonce
segment for mining, and this process is led by ESP.
To define the individual mining reward of cIMD, we should
first formulate the common mining reward that cIMDs can
obtain. The expected mining reward depends on the sum com-
putation ability of the cIMDs. Therefore, we formulate the
common mining reward of cIMDs under the same ESP ej as
Lej,c =
∑
m∈M
xm,ej
(
R + Tjr
)(
αs
m + αr
m,ej
)
e−λzTj . (5)
It is noted that when cIMDs mine a block together, the number
of transactions Tj is the same among all the cIMDs.
Once cIMDs successfully mined a valid block, the min-
ing reward will be shared among them. To incentive cIMDs
contribute more computation resources, we design a min-
ing reward allocation scheme in which cIMD contributes
more computation resources will obtain more shared mining
reward. We define a contribution parameter cm,ej as shown
in (6), which means the contribution of cIMD m in ESP ej.
ESP is responsible for assigning the common mining reward
among cIMDs according to their corresponding contribution
parameters
cm,ej = e
αs
m+αr
m,ej
∑
m∈M xm,ej
(
e
αs
m+αr
m,ej
) . (6)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
8512 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019
Therefore, the formulation of the individual mining reward
Lm,c of the cIMD m in generalized form is
Lm,c =
∑
e∈E
xm,ecm,eLe,c
=
∑
e∈E
xm,e
eαs
m+αr
m,e
∑
m∈M xm,e
(
eαs
m+αr
m,e
)
× (R + Tmr)
(
αs
m + αr
m,e
)
e−λzTm . (7)
Besides the mining reward, a cIMD needs to pay other
cost when trying to mine a valid block. The individual utility
function of cIMD m is constituted by three parts.
1) The shared mining reward when mined a valid block.
2) The rent from the corresponding ESP for renting com-
putation resources.
3) The electricity fee in the mining process.
The individual utility function of cIMD m can be calcu-
lated as
Um,c = Lm,c −
∑
e∈E
xm,epeα
r
m,e − cαs
m (8)
where Lm,c is the individual shared mining reward of cIMD
m, pe is the price designed by ESP e per unit computation
resource, and c is the electricity fee per unit computation
resource.
After formulating the utility function of cIMD, we should
formulate the utility function of ESP. The utility function
of ESP is constituted by two parts: rent from cIMDs and
service cost. The rent is the obtained revenue by charging
cIMDs for renting computation resources. The service cost is
the management fee for sharing the common mining reward
among cIMDs. Therefore, the utility function of ESP ej can
be calculated as
Uej,c =
∑
m∈M
xm,ej pejα
r
m,ej
−
∑
m∈M
xm,ej wαr
m,ej
(9)
where w is a preset average service cost per unit computation
resource.
Combine the utility functions of cIMDs M and ESPs E
together in the system, we can formulate the system sum utility
as follows:
U =
∑
e∈E
(
Ue,c +
∑
m∈M
xm,eUm,c
)
. (10)
From the analysis above, the system utility U depends on the
computation resource allocation relations xm,e between cIMDs
M and ESPs E , where m ∈ M, e ∈ E . Therefore, we can
represent the system utility through a function U(X ), where
X is the matrix of xm,e, and m ∈ M, e ∈ E . To maximize
the system utility, we need to design the optimal computa-
tion resource allocation relationship. The optimal computation
resource allocation problem can be formulated as
max U(X )
s.t. xm,e ∈ {0, 1}, m ∈ M, e ∈ E
∑
e∈E
xm,e ≤ 1, m ∈ M. (11)
Obviously, the optimization problem above is NP-hard and
nonlinear integer programming problem [29], specifically, 0-1
Knapsack problem [30]. The object function has no concave
properties even if we slack the constraint xm,e ∈ {0, 1} to
continuous. Therefore, we cannot derive the optimal solution
through traditional convex optimization method like gradient
descent. In the next section, we will solve the optimization
problem above in the viewpoint of game theory. A coali-
tion formation game approach is proposed to find the optimal
computation resource allocation relationship.
IV. COALITION GAME APPROACH
In the first section, we transfer the optimal computation
resource allocation problem from the viewpoint of coalition
game theory, and then propose a coalition formation algorithm
in the second section.
A. Coalition Formation Game Definitions
Once IMDs adopt solo mining strategy, they mine indepen-
dently and coalitions cannot be formed. Therefore, we discuss
the IMDs adopt collusive mining strategy here, whereby IMDs
can concentrate their computation resources under different
ESPs to improve their common mining reward. As afore-
mentioned, there are E ESPs and M cIMDs in the system.
Therefore, we assume there are E coalitions in the system,
and M cIMDs form E coalitions, usually E ≤ M. We express
E coalitions as C = {C1, C2, . . . , CE}, where Ci
⋂
Cj = ø for
any i �= j, and
⋃E
i=1 Ci = M. The individual utility function
of cIMD i under coalition Cp can be written as
Ui(Cp) = e
αs
i +αr
i,Cp
∑
m∈Cp
xm,Cp
(
e
αs
m+αr
m,Cp
) (R + Tir)
×
∑
m∈Cp
(
αs
m + αr
m,Cp
)
e−λzTi − αr
i pCp − cαs
i . (12)
So the utility function of coalition Cp can be written as
UCp =
∑
i∈Cp
(pCp − w)αr
i,Cp
. (13)
It is noted that cIMDs will not form only one coalition.
The reasons are two: 1) with the increase of cIMDs in one
coalition, there must exists an cIMDs with relatively lower
computation ability compared with other cIMDs in this coali-
tion, so that it will obtain lower individual mining reward,
which facilitates the cIMDs to transform its coalition and
2) once cIMDs form only one coalition, the system will
become centralized instead of decentralized. Actually, cIMDs
will form disjoint coalitions according to certain rules which
facilitates us to adopt a coalition formation game to formulate
the allocation relationships among cIMDs.
In this paper, a coalition formation game is used in the
computation resource allocation among cIMDs with transfer-
able utilities. For each cIMDs, it should choose a coalition
to join and rent computation resources in order to maximize
its individual utility and system utility. In order to model the
coalition formation game, we have the following definitions.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
ZHAO et al.: COALITION GAME-BASED COMPUTATION RESOURCE ALLOCATION FOR WBNs 8513
Definition 1 (Transferable Utility in Coalition Game): To
use the coalition formation game approach into the com-
putation resource allocation problem, we should define the
transferable utility first. We use a pair (M,R) to represent
transferable utility, where M denotes the set of game players,
and R is a profit function for each coalition Cp ∈ M. We use
the sum utilities of the cIMDs and their corresponding ESP to
represent the profit function R. The profit function represents
the coalition common profit and is calculated as
R(Cp) = UCp +
∑
i∈Cp
Ui(Cp). (14)
Since the profit function R(Cp) represents the total profit
that the whole coalition Cp holds, we should assign it among
coalition members according to their individual contribution.
Therefore, for each cIMD i ∈ Cp, we can represent its individ-
ual profit Ri(Cp) by distributing the sum profit of the coalition
among all coalition members, including ESP. The distribution
relationship is linear in this paper, and as calculated as follows:
Ri(Cp) = R(Cp)Ui(Cp)
UCp + ∑
i∈Cp
Ui(Cp)
. (15)
Based on the transferable utilities, we can define the coalition
formation game in the next definition.
Definition 2 (Coalition Formation Game for WBN
Computation Resource Allocation): The coalition formation
game for cIMDs renting computation resources under differ-
ent coalitions with transferable utilities is defined by a triple
(M,R, C). The specific formulation is shown as follows.
1) Players: The players of the coalition formation game is
the set of M, i.e., all cIMDs.
2) Transferable Utility: R(Cp) is the profit function of each
coalition Cp ∈ M.
3) Coalition Partition: In the coalition formation game, we
express E coalitions as C = {C1, C2, . . . , CE}, where
Ci
⋂
Cj = ø for any i �= j, and
⋃E
i=1 Ci = M.
4) Strategy: Each cIMD decides which coalition to join.
The strategies of cIMDs are based on the individual
profit and coalition profit.
We define the preference order in the next definition
whereby a game player can decide whether to leave the current
coalition and join another coalition.
Definition 3 (Preference Order): For arbitrary cIMD i, we
define the preference order �i is a complete, reflexive, and
transitive binary relation over the set of all coalitions that
cIMD i can form, i.e., the set {Cp ∈ M, i ∈ Cp}. Each
cIMD can leave the current coalition and join another coalition
according to the preference order. The Cp �i Cp′ indicates that
cIMD i prefers being a member of coalition i ∈ Cp instead of
coalition i ∈ Cp′ , in which Cp ∈ C and Cp′ ∈ C. The individ-
ual profit and coalition profit are both taken into account when
designing the preference order. In this paper, for any cIMD
i ∈ M and i ∈ Cp, Cp′ , we propose the following preference,
which is also called the utilitarian order:
Cp �i Cp′ ⇔ Ri(Cp) > Ri
(
Cp′
)
& R(Cp) + R(
Cp′ \i
) ≥ R(Cp\i) + R(
Cp′
)
.
(16)
This definition means cIMD i prefers being a member of coali-
tion i ∈ Cp rather than i ∈ Cp′ under the condition that the two
coalitions’ sum profits are not decreasing, meanwhile the indi-
vidual profit of cIMD i is increasing. To form coalitions based
on the proposed preference order above, the switch operation
is defined in the next definition.
Definition 4 (Switch Operation): Given a partition C =
{C1, C2, . . . , CE} of cIMDs M, if cIMD i ∈ M forms
a switch operation from Cp to Cp′ , then the current par-
tition C is modified into a new partition C′ where C′ =
{C\{Cp, Cp′ }} ⋃{Cp\{i}, Cp′
⋃{i}}.
At the beginning of the system, we randomly generate
a coalition partition C = {C1, C2, . . . , CE}. For any cIMD
i ∈ M, i ∈ Cp and Cp ∈ C, we uniformly randomly select a
coalition Cp′ and assume the preference order Cp �i Cp′ that
defined in (16) is satisfied, where Cp′ ∈ C, Cp
⋂
Cp′ = ∅.
Then, cIMD i will join the coalition Cp′ and the current
coalition will be updated to a new partition C′ as shown
in Definition 4. Actually, the switch operation can only be
executed if and only if the preference order that defined
in (16) is strictly satisfied. Under this switch mechanism, each
cIMD i ∈ M can leave its current coalition and join another
coalition, further, each cIMD i ∈ M can make a greater
contribution to enhance the system performance. Namely, our
proposed coalition formation game entails finding a coalitional
structure that maximizes the system sum utility as defined
in (10) and also guarantees the individual profits of the cIMDs.
B. Coalition Formation Algorithm
The details of the proposed coalition formation algorithm is
shown in Algorithm 1. At the beginning, the system will gener-
ate an initial partition Cini and distribute cIMDs under different
coalitions randomly but satisfy the condition
∑
e∈E xm,e ≤ 1,
where m ∈ M, e ∈ E . Then, in step 2, the system will select
an cIMD i in a predetermined order and we assume it belongs
to the coalition Cp, and set a parameter num called unsuccess-
ful switch operation number which is used to terminate the
algorithm. In step 4, the selected cIMD i will uniformly ran-
domly select another coalition Cp′ as its potential transferable
coalition. In step 5, cIMD i will calculate the individual and
coalition profits, respectively, as calculated as (16) to make a
switch operation. If cIMD i prefers coalition Cp′ than coalition
Cp, then it will leaves the current coalition Cp and joins the
new coalition Cp′ , meanwhile, update the coalition partition in
step 8, reset the unsuccessful switch operation number num.
Otherwise, the quantities of the unsuccessful switch operation
num will plus 1 in step 10. The algorithm will terminate and
achieve the Nash-stable partition when num = |M|×b, and we
set b = 10 refer to [31]. Otherwise, the algorithm will return
to step 3 to execute the next iteration until convergence.
V. THEORETICAL ANALYSIS
In this section, we will analysis the convergence, stability,
optimality, and complexity of our proposed coalition formation
algorithm theoretically.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
8514 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019
Algorithm 1 Coalition Formation Algorithm
1: Initialize the system with a given partition Cini, and
distribute cIMDs among Cini randomly;
2: Set the current partition as Cini → Ccur, num = 0;
Repeat :
3: Select an cIMD i in a predetermined order, and denote its
coalition as i ∈ Cp, where Cp ∈ C;
4: Uniformly randomly choose another coalition Cp′ ∈ Ccur,
where Cp �= Cp′ ;
5: Calculate the preference order of cIMD i as (17) shows;
6: if Cp′ �i Cp then
7: cIMD i leaves current coalition Cp and joins new
coalition Cp′ ;
8: Update the coalition partition Ccur as follows
{Ccur\{Cp, Cp′ } ⋃{Cp\{i}, Cp′
⋃{i}} → Ccur;
9: num=0;
10: else
11: num = num + 1;
12: end if
13: if num = |M| × b then
14: Terminate the iteration, update the current partition as
the final partition Ccur → Cfin;
15: else
16: Return to step 3.
17: end if
A. Convergence
In this section, we will prove the convergence of the
proposed coalition formation algorithm refer to [32].
Theorem 1: Starting from an arbitrary initial coalitional
structure Cini and after several switch operations, our proposed
coalition formation algorithm will always converge to a final
coalition partition Cfin which is constituted by several disjoint
coalitions.
Proof: As the preference order shown in (16), it is
obvious that during each iteration in Algorithm 1 there are
two results: switch the current partitions or keep the cur-
rent partition. Therefore, partial coalitions might degenerate
the coalitions that contain few cIMDs, even by empty. Also,
the system can form E coalition at most for the maximum
number of ESPs is E. Additionally, because the number of
partitions for the already give cIMDs set M is the Bell num-
ber [18], we can conclude that Algorithm 1 will terminate
after several switch operations and converge to the final par-
tition Cfin, which completes the proof of the convergence of
Algorithm 1.
B. Stability
In this section, we analyze the stability of Algorithm 1
through using the definition from [33] on the hedonic games.
Definition 5 (Nash-Stable Structure): A coalitional partition
C = {C1, C2, . . . , CE} is Nash-stable if ∀i ∈ M, i ⊂ CP ⊂
C, Cp �i Cp′
⋃{i} for all Cp′ ⊂ C, Cp′ �= Cp.
Theorem 2: The final partition Cfin calculated by
Algorithm 1 is Nash-stable.
Proof: The coalition formation game is Nash-stable
when no cIMD makes its contribution to the entire
system, i.e., no cIMD leaves its current coalition. C∗
P =
arg maxCp R(C),∀Cp ⊂ C, and C∗ = {C∗
1, C2,
∗ . . . , C∗
E} is the
final stable Nash-stable structure. We use the counter-evidence
method to prove the stability of the proposed approach.
Suppose that the final coalition partition Cfin is unstable,
namely, there exists an cIMD i ∈ M and its current coali-
tion and randomly selected coalition are denoted as Cp and
Cp′ , respectively. And these two coalitions satisfy the pref-
erence order that Cp′
⋂{i} �i Cp. As a result, cIMD i will
execute the switch operation and then leave the current coali-
tion Cp and then join the new coalition Cp′ , which means
the final coalition partition Cfin will be updated and no more
the final the final coalition partition. Whereby we complete the
proof that the final coalition partition Cfin calculated through
Algorithm 1 is Nash-stable structure.
C. Optimality
In this section, we will prove the results of Algorithm 1 is
near-optimal solution.
Theorem 3: The result calculated by Algorithm 1 achieves
an near-optimal system performance.
Proof: The overall system utility obtained through
Algorithm 1 is convergent after several iterations. As shown in
Algorithm 1, the number of consecutive unsuccessful switch
operations (i.e., num) is the number of cIMDs multiplied by
10. In our scheme, we only involve one-step switching dur-
ing each iteration and exists the limitation of not allowing
multiple cIMDs to execute switch operations simultaneously.
Therefore, the obtained solution calculated by Algorithm 1 is
near-optimal, and is compared with the solution calculated by
the exhaustive search method Section in VI-B. From Figs. 3
and 4 in Section VI-B, the gap between our proposed approach
with the exhaustive search method is quite small, therefore the
performance of our proposed approach can be guaranteed. In
addition, we will analyze the performance bound in-depth in
the future work.
D. Complexity
In this section, we will derive the computational complexity
of Algorithm 1.
Theorem 4: The computational complexity of our proposed
coalition formation algorithm is O(N) where N is the total
iteration number.
Proof: During each iteration of Algorithm 1, the selected
cIMD will calculate the preference order as shown in step 5,
and then make a decision on whether execute a switch oper-
ation. Namely, during each iteration, there is at most one
switch operation and the computational complexity has a linear
relationship with the number of iterations. Meanwhile, as illus-
trated in Fig. 8, Algorithm 1 has low computational complexity
property.
VI. EVALUATION ANALYSIS
We evaluate our simulation on MATLAB which based on
the hardware of the Intel quad-core Core i7-7700HQ, 8-GB
DDR4 2400 MHz, 128 GB SSD.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
ZHAO et al.: COALITION GAME-BASED COMPUTATION RESOURCE ALLOCATION FOR WBNs 8515
Fig. 3. Performance of system sum profit under the coalition formation game
and optimal solution versus the number of ESPs.
Fig. 4. Performance of system sum profit under the coalition formation game
and optimal solution versus the number of IMDs.
A. Simulation Setup
After deriving the coalition formation according to our
proposed coalition formation approach, we evaluate it accord-
ing to the real situation. In the traditional bitcoin network, the
block generation rate is fixed, generally six blocks an hour [6],
specifically one block per ten minutes. Therefore, we can use
the time duration to represent the block generation process,
i.e., we assume there generates a valid block during each time
slot t. We use a function Cp(t) to represent whether the coali-
tion Cp has successfully mines a valid block during time slot
t, where Cp(t) = 1 represents the coalition Cp has successfully
mines a valid block, otherwise failed. The constraint in (17)
means there can only be one successful coalition during time
slot t, which is in line with the reality situation
∑
Cp∈C
Cp(t) = 1. (17)
In the following sections, we set the maximum simulation
duration time is 1000, i.e., during 1000 time slots, and average
the performance on 1000 time slots. The simulation parameters
are summarized in Table I.
We define the system sum profit as the profit of the suc-
cessful coalition minus the overall cost of other unsuccessful
coalitions. IMDs can obtain mining reward under the suc-
cessful coalition, however, those IMDs under unsuccessful
TABLE I
SIMULATION PARAMETERS
8
coalitions cannot obtain mining reward but still need to pay
rent to their corresponding ESPs and electricity fee for running
blockchain clients. We will compare the proposed coalition
formation game-based resource allocation scheme (denoted
as CG, i.e., Algorithm 1) in the following section with four
schemes as follows.
1) OS: The exhaustive method is used to search possible
coalition formation partition, and select the optimal one.
However, restricted to the computation complexity, it
can only be applied to a small scale of the network.
Therefore, we compare the CG with OS to discuss its
optimal property in a small scale of the network in the
next section.
2) Random Coalition Formation Approach (RF): IMDs will
form coalitions randomly. Initially, each IMDs will be
assigned a coalition randomly, then it will stay in the
initial coalition and will not change its current coalition.
3) Average Coalition Formation Approach (AF): The
system will assign each coalition almost the same num-
ber of IMDs. Then, IMDs will stay in the current
coalition and will not change its current coalition.
4) NG: IMDs will not form coalitions, they adopt solo min-
ing strategy as described in Section III-B1. They use
their self-computation and rent-computation resources to
mine a block lonely, if successful, it will obtain all the
mining reward.
B. Compared With the Optimal Solution
In this section, we will compare CG with OS from the
aspects of system sum profit, and demonstrate the CG reaches
the optimal solution closely.
To obtain the optimal solution in OS, it should consider
all possible combination ways to maximize the system util-
ity in (10), and obviously, the computation complexity of OS
is NP-hard which leads to it can only find the optimal solu-
tion under small network scale with several IMDs and ESPs.
Therefore, in this simulation, we set the number of IMDs is
fixed to be 10 and vary the number of the ESPs from 2 to 8
to obtain the results of system sum profit as shown in Fig. 3,
while setting the number of ESPs is fixed to be 5 and vary
the number IMDs from 2 to 8 to obtain the results of system
sum profit as shown in Fig. 4. From the two figures above, it
is obvious that the system utility achieved by CG, denoted by
the red dotted curve, is almost the same with the blue solid
curves achieved by OS.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
8516 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019
Fig. 5. System sum profit of different schemes versus the number of IMDs.
In order to quantify the gap between the CG (near-optimal
solution) and OS, we use a so-called Average deviation to
derive it. The Average deviation [34] is calculated as
Average deviation = 1
n
n∑
i=1
ROS(i) − RCG(i)
ROS(i)
. (18)
We denote the system sum profit obtained by CG and OS
are RCG(n) and ROS(n), respectively, whose number of IMDs
or ESPs are n. Specifically, as shown in Fig. 3, when we vary
the number of ESPs, the Average deviation between the CG
and OS is about 0.92%. As shown in Fig. 4, when we vary
the number of IMDs, the Average deviation is about 1.25%.
Therefore, combine the two Average deviations together we
can demonstrate that the proposed CG approximates the OS,
which further supports our theoretical analysis and proof in
Theorem 3.
C. System Sum Profit
In this section, we compare the performance of CG with
AF, RF, and NG on the aspect of system sum profit. Consider
the high complexity of OS and we have demonstrated the opti-
mality of the CG, hence we do not compare CG with OS in
this section. As illustrated in Fig. 5, we set the number of
ESPs is fixed to be 10 and vary the number of IMDs from
30 to 60 with step size 5. The system sum profit is increasing
with the increasing of IMDs no matter IMDs adopt CG, AF
or RF, and CG outperforms RF about 16% on the aspect of
system sum profit as calculated as similar to (18). Actually,
CG outperforms all other algorithms and this is because the
preference order in CG takes the coalition profit into consid-
eration. If IMDs adopt NG, the system sum profit is negative
for the reason is the mining reward of a single IMD cannot
balance the enormous electricity and computation resources
rent of the entire network, meanwhile, the competition inten-
sifies in the course of mining. This is one way explains why
the mining process is a computation-resource waste.
In Fig. 6, we set the number of IMDs is fixed to be 60
and vary the number of ESPs from 5 to 15 with step size 1.
With the increasing of ESPs, the competition between dif-
ferent ESPs is intensifying, which deteriorates the system
performance. In this case, CG still outperforms RF about 21%
Fig. 6. System sum profit of different schemes versus the number of ESPs.
on the aspect of system sum profit as calculated as similar
to (18). CG still outperforms all other algorithms and this
is because the preference order in CG takes the coalition
profit into consideration. NG generally does not fluctuate over
the increasing of ESPs for the reason is they do not form
coalitions.
D. Ratio of Rewarded IMDs to Overall IMDs
In this section, we compare the CG with AF, RF and NG
from the aspect of the ratio of rewarded IMDs to overall IMDs.
The ratio of rewarded IMDs to overall IMDs is the proportion
of rewarded miners under successful coalition to the overall
IMDs. Using the same parameters as the former section, we
set the number of ESPs is fixed to be 10 and vary the number
of IMDs from 30 to 60 with step size 5. From Fig. 7, we can
obtain that CG outperforms RF about 10.11% which is also
calculated using the equation similar to (18). Because there can
only be one IMD succeed in once mining process, therefore,
the ratio of rewarded IMDs to overall IMDs of NG decreases
with the increasing of the number of IMDs. It is worth noting
that, in AF scheme, the number of IMDs in each coalition are
the same, which means the ratio of rewarded IMDs to overall
IMDs doesn’t fluctuate with the increasing of IMDs. CG also
outperforms AF on the aspect of the ratio of rewarded IMDs
to overall IMDs, which indicates that the CG can let more
IMDs obtain the mining benefits and this behavior will attract
more IMDs participate in the mining process.
E. Convergence
In this section, we discuss the convergence of CG. We
study two conditions, i.e., the quantity of IMDs is varied from
30 to 60 with step size 5 under the number of ESPs to be 5 and
10. As illustrated in Fig. 8, we calculate the average quantity
of switch operations until CG converges to the final partition
Cfin under these two conditions. With the increasing of the
quantity of IMDs, the corresponding average switch operation
quantity is increasing. In the case of ten ESPs, denoted by red
real line, they form ten coalitions and the average quantity of
switch operations is between 31 and 114. Even we enlarge the
quantity of ESPs to 20, denoted by the blue real line, they form
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
ZHAO et al.: COALITION GAME-BASED COMPUTATION RESOURCE ALLOCATION FOR WBNs 8517
Fig. 7. Ratio of rewarded IMDs to overall IMDs of different schemes versus
the number of ESPs.
Fig. 8. System convergence rate in terms of the average number of switch
operations versus the number of IMDs.
20 coalitions and the average quantity of switch operations is
between 44 and 132.
The result can be interpreted that with the increasing of the
number of IMDs or ESPs, the possibility of searching the can-
didate resource sharing peers is increasing significantly which
is reflected by the increase of the quantity of switch operations.
Fig. 8 illustrates that CG allows IMDs and ESPs to form a sta-
ble coalition partition with a quite fast convergence speed in
practice, which further completes the theoretical analysis of
convergence in Theorem 1.
VII. CONCLUSION
In this paper, we studied the computation resource allocation
problem for IMDs during the mining process underlying MEC
environment. We formulated it as a maximization problem on
the aspect of system utility. The maximization problem is NP-
hard, hence we proposed a coalition formation game-based
algorithm to derive the near-optimal solution. We theoreti-
cally proved the algorithm can obtain Nash-stable partition
with high convergence rate and low computational complexity.
Simulation results showed that the proposed algorithm outper-
forms other schemes on the aspect of system sum rate and
ratio of rewarded IMDs to overall IMDs by about 16% to
21% and 10%. In the future, we may consider optimal com-
putation resources design from IMD side and optimal price
design from ESP side, meanwhile, consider the path loss
during the wireless communication process which has been
studied in [13].
REFERENCES
[1] Ericsson Mobility Report, “On the pulse of the networked society,”
Ericsson, Stockholm, Sweden, Rep. Q2, Nov. 2017. [Online]. Available:
https://www.ericsson.com/mobility-report
[2] J. Lin, W. Yu, N. Zhang, X. Yang, H. Zhang, and W. Zhao, “A sur-
vey on Internet of Things: Architecture, enabling technologies, security
and privacy, and applications,” IEEE Internet Things J., vol. 4, no. 5,
pp. 1125–1142, Oct. 2017.
[3] I. Andrea, C. Chrysostomou, and G. Hadjichristofi, “Internet of Things:
Security vulnerabilities and challenges,” in Proc. IEEE Symp. Comput.
Commun., Jul. 2015, pp. 180–187.
[4] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-in hybrid
electric vehicles using consortium blockchains,” IEEE Trans. Ind.
Informat., vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[5] N. Herbaut and N. Negru, “A model for collaborative blockchain-based
video delivery relying on advanced network services chains,” IEEE
Commun. Mag., vol. 55, no. 9, pp. 70–76, Sep. 2017.
[6] S. Nakamoto, Bitcoin: A peer-to-peer electronic cash system,”
Consulted, 2008.
[7] Y. He, H. Li, X. Cheng, Y. Liu, C. Yang, and L. Sun, “A blockchain
based truthful incentive mechanism for distributed P2P applications,”
IEEE Access, vol. 6, pp. 27324–27335, 2018.
[8] M. Castro and B. Liskov, Practical Byzantine Fault Tolerance.
Cambridge, MA, USA: Massachusetts Inst. Technol., 2000.
[9] N. Chwartz and A. Britto. (2014). The Ripple
Protocol Consensus Algorithm. [Online]. Available:
https://ripple.com/les/ripple_consensus_whitepaper.pdf
[10] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Joint compu-
tation offloading and content caching for wireless blockchain networks,”
in Proc. IEEE INFOCOM Workshops, Honolulu, HI, USA, Apr. 2018,
pp. 517–522.
[11] V. W. S. Wong, R. Schober, D. W. K. Ng, and L. Wang, Key Technologies
for 5G Wireless Systems. New York, NY, USA: Cambridge Univ. Press,
2017.
[12] Z. Xiong, Y. Zhang, D. Niyato, P. Wang, and Z. Han, “When mobile
blockchain meets edge computing,” IEEE Commun. Mag., vol. 56, no. 8,
pp. 33–39, Aug. 2018.
[13] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Computation
offloading and content caching in wireless blockchain networks with
mobile edge computing,” IEEE Trans. Veh. Technol., vol. 67, no. 11,
pp. 11008–11021, Nov. 2018.
[14] D. Abbasinezhad-Mood and M. Nikooghadam, “An anonymous ECC-
based self-certified key distribution scheme for the smart grid,” IEEE
Trans. Ind. Electron., vol. 65, no. 10, pp. 7996–8004, Oct. 2018.
[15] D. Abbasinezhad-Mood and M. Nikooghadam, “Efficient design of a
novel ECC-based public key scheme for medical data protection by uti-
lization of NanoPi fire,” IEEE Trans. Rel., vol. 67, no. 3, pp. 1328–1339,
Sep. 2018.
[16] F. Wessling, C. Ehmke, M. Hesenius, and V. Gruhn, “How much
blockchain do you need? Towards a concept for building hybrid DApp
architectures,” in Proc. IEEE/ACM 1st WETSEB, May 2018, pp. 44–47.
[17] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/fog computing resource management and pricing for blockchain
networks,” IEEE Internet Things J., to be published.
[18] W. Saad, Z. Han, M. Debbah, A. Hjorungnes, and T. Basar, “Coalitional
game theory for communication networks,” IEEE Signal Process. Mag.,
vol. 26, no. 5, pp. 77–97, Sep. 2009.
[19] W. Saad, Z. Han, R. Zheng, A. Hjorungnes, T. Basar, and H. V. Poor,
“Coalitional games in partition form for joint spectrum sensing and
access in cognitive radio networks,” IEEE J. Sel. Topics Signal Process.,
vol. 6, no. 2, pp. 195–209, Apr. 2012.
[20] Z. Xiong, S. Feng, D. Niyato, P. Wang, and Z. Han, “Optimal pricing-
based edge computing resource management in mobile blockchain,” in
Proc. IEEE ICC, May 2018, pp. 1–6.
[21] B. Fisch, R. Pass, and A. Shelat, “Socially optimal mining pools,”
in Web and Internet Economics. Cham, Switzerland: Springer, 2017,
pp. 205–218.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
8518 IEEE INTERNET OF THINGS JOURNAL, VOL. 6, NO. 5, OCTOBER 2019
[22] L. Luu, R. Saha, I. Parameshwaran, P. Saxena, and A. Hobor, “On power
splitting games in distributed computation: The case of bitcoin pooled
mining,” in Proc. IEEE 28th Comput. Security Found. Symp., Jul. 2015,
pp. 397–411.
[23] O. Novo, “Blockchain meets IoT: An architecture for scalable access
management in IoT,” IEEE Internet Things J., vol. 5, no. 2, pp. 195–209,
Apr. 2018.
[24] Z. Shelby, K. Hartke, and C. Bormann, “The constrained application
protocol (CoAP),” Internet Eng. Task Force, Fremont, CA, USA, RFC
7959, Jun. 2014. [Online]. Available: http://www.ietf.org/rfc/rfc7252.txt
[25] E. Rescorla and N. Modadugu, “Datagram transport layer security ver-
sion 1.2,” Internet Eng. Task Force, Fremont, CA, USA, RFC 7905,
Jan. 2012. [Online]. Available: http://www.ietf.org/rfc/rfc6347.txt
[26] C. Xu et al., “Making big data open in edges: A resource-efficient
blockchain-based approach,” IEEE Trans. Parallel Distrib. Syst., vol. 30,
no. 4, pp. 870–882, Apr. 2019.
[27] N. Houy. (Mar. 2014). The Bitcoin Mining Game. [Online]. Available:
https://ssrn.com/abstract=2407834
[28] J. Kang, Z. Xiong, D. Niyato, P. Wang, D. Ye, and D. I. Kim,
“Incentivizing consensus propagation in proof-of-stake based consor-
tium blockchain networks,” IEEE Wireless Commun. Lett., vol. 8, no. 1,
pp. 157–160, Feb. 2019.
[29] T. Cormen, C. Leiserson, R. Rivest, and C. Stein, Introduction to
Algorithms, 2nd ed. Cambridge, MA, USA: MIT Press, 2001.
[30] D. Pisinger, “Where are the hard knapsack problems?” Comput. Oper.
Res., vol. 32, no. 9, pp. 2271–2284, 2005.
[31] Y. Zhao, Y. Li, Y. Cao, T. Jiang, and N. Ge, “Social-aware resource
allocation for device-to-device communications underlaying cellu-
lar networks,” IEEE Trans. Wireless Commun., vol. 14, no. 12,
pp. 6621–6634, Dec. 2015.
[32] T. Wang, L. Song, Z. Han, and B. Jiao, “Dynamic popular content dis-
tribution in vehicular networks using coalition formation games,” IEEE
J. Sel. Areas Commun., vol. 31, no. 9, pp. 538–547, Sep. 2013.
[33] R. Feng, T. Li, Y. Wu, and N. Yu, “Reliable routing in wireless sensor
networks based on coalitional game theory,” IET Commun., vol. 10,
no. 9, pp. 1027–1034, Sep. 2016.
[34] Y. Chen, B. Ai, Y. Niu, K. Guan, and Z. Han, “Resource allocation
for device-to-device communications underlaying heterogeneous cellu-
lar networks using coalitional games,” IEEE Trans. Wireless Commun.,
vol. 17, no. 6, pp. 4163–4176, Jun. 2018.
Ning Zhao was born in Hebei, China, in 1994.
He received the B.S. degree in electronic and
information engineering from Beijing Information
Science and Technology University, Beijing, China,
in 2016. He is currently pursuing the Ph.D. degree
with the State Key Laboratory of Rail Traffic Control
and Safety, Beijing Jiaotong University, Beijing.
His current research interests include vehicular
networks, trust management, blockchain, and game
theory.
Hao Wu (M’09) received the Ph.D. degree in
information and communication engineering from
the Harbin Institute of Technology, Harbin, China,
in 2000.
She is currently a Full Professor with the State
Key Laboratory of Rail Traffic Control and Safety,
Beijing Jiaotong University, Beijing, China. She has
published over 100 papers in international jour-
nals and conferences. Her current research interests
include intelligent transportation systems, security
and QoS issues in wireless networks (VANETs,
MANETs, and WSNs), and Internet of Things.
Dr. Wu is a reviewer of its major conferences and journals in wireless
networks and security.
Yali Chen was born in Shanxi, China, in 1995.
She received the B.S. degree in communication
engineering from the Taiyuan University of Science
and Technology, Taiyuan, China, in 2016. She is
currently pursuing the Ph.D. degree with the State
Key Laboratory of Rail Traffic Control and Safety,
Beijing Jiaotong University, Beijing, China.
Her current research interests include millimeter-
wave wireless communications and wireless
resource allocation, and game theory.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:19:06 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice