Blockchain Storage and Computation Offloading for Cooperative Mobile-Edge Computing
9084 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
Blockchain Storage and Computation Offloading for
Cooperative Mobile-Edge Computing
Yiping Zuo , Shi Jin , Senior Member, IEEE, Shengli Zhang , Senior Member, IEEE,
and Yan Zhang , Fellow, IEEE
Abstract—To enable more Internet-of-Things (IoT) devices for
participating in the Proof-of-Work (PoW) mining process of pub-
lic blockchains, we propose a cooperative mobile-edge computing
(MEC)-aided blockchain network. In the network, devices can
offload computation-intensive PoW mining tasks to base stations
and store their block data to the cloud service provider. Then,
we study the joint computation offloading, block storage, and
resource service pricing problem as a three-stage Stackelberg
game. We analyze the subgame optimization problem in each
stage and propose an iterative algorithm based on backward
induction to achieve the Nash equilibrium of the Stackelberg
game. Furthermore, we derive the upper bound of the ergodic
throughput of the cooperative scheme and the maximum number
of devices connected to the network. The analysis shows that the
proposed cooperative MEC-aided blockchain network can sig-
nificantly improve the system throughput, and more devices can
access the blockchain network. Analytical results show that the
proposed backward induction-based iterative algorithm can effi-
ciently attain the Nash equilibrium of the game. Numerical results
show that our proposed backward induction-based iterative algo-
rithm has fast convergence and good stability, and the proposed
cooperative scheme can serve more devices in comparison with
other noncooperative schemes.
Index Terms—Block storage, blockchain, computation offload-
ing, cooperative, Stackelberg game.
I. INTRODUCTION
BLOCKCHAIN is a distributed public ledger that records
transaction information between arbitrary nodes in a
peer-to-peer network and does not require any trusted third-
party [1]–[5]. Recently, blockchain, together with cloud
computing, big data, artificial intelligence, and quantum com-
puting, is regarded as one of the most revolutionary emerging
technologies [6]–[10]. Due to its characteristics of decen-
tralization, nontampering, and traceability, blockchain has
Manuscript received November 5, 2020; revised January 20, 2021; accepted
January 27, 2021. Date of publication February 3, 2021; date of current version
May 21, 2021. This work was supported in part by the National Key R&D
Program of China under Grant 2019YFB1803400, and in part by the National
Natural Science Foundation of China under Grant 61921004. The work of
Shengli Zhang was supported in part by the Guangdong Basic and Applied
Basic Research Foundation under Grant 2019B1515130003. (Corresponding
author: Shi Jin.)
Yiping Zuo and Shi Jin are with the National Mobile Communications
Research Laboratory, Southeast University, Nanjing 210096, China (e-mail:
zuoyiping@seu.edu.cn; jinshi@seu.edu.cn).
Shengli Zhang is with the College of Information Engineering, Shenzhen
University, Shenzhen 518060, China (e-mail: zsl@szu.edu.cn).
Yan Zhang is with the Department of Informatics and the Simula
Metropolitan Center for Digital Engineering, University of Oslo, 0316 Oslo,
Norway (e-mail: yanzhang@ieee.org).
Digital Object Identifier 10.1109/JIOT.2021.3056656
attracted wide attention from both academia and industry. To
order to overcome the limitations of Internet-of-Things (IoT)
devices in performing computation-intensive tasks, there have
been many works on the problem of computation offload-
ing in mobile-edge computing (MEC) [11]–[14]. The work
in [11] considers the statistical information of extreme task
queue lengths and proposes a task offloading and resource
allocation framework under the constraints of ultrareliabil-
ity and low latency. El Haber et al. [12] investigated the
joint optimization of offloading cost and device energy in a
multilayer MEC network and proposed a low-complexity algo-
rithm based on the successive convex approximation method
for obtaining an efficient solution. Particularly, in the long
term, some approaches based on deep reinforcement learning
(DRL) have been applied to computation offloading in edge
computing [13], [14]. For example, the work in [13] studies the
random computation offloading problem of MEC-aided users
in the ultradense slice radio access network (RAN) and pro-
poses two computing offloading algorithms based on a double
deep Q-network to learn the optimal policy. Chen et al. [14]
formulated the problem of multitenant cross-slice resource
orchestration in a system with RAN-only slicing as a non-
cooperative random game, and proposes a DRL-based online
scheme to find the optimal abstract control policies. When IoT
devices want to run Proof-of-Work (PoW)1 based blockchain
applications, they must spend tremendous hash computing
resources to solve the PoW cryptopuzzle. However, resource-
constrained devices are not able to mine effective blocks in a
short time. To tackle this issue, several studies have investi-
gated MEC-aided blockchain networks [15], [17]–[19], where
IoT devices offload computationally intensive mining tasks
to the MEC server. In a traditional blockchain network, only
bulky and fixed servers can participate in the mining process of
verification transactions, while every IoT device can take part
in the computation-intensive mining process in the MEC-aided
blockchain network [20]–[30].
Recently, many studies have been conducted on complet-
ing computation-intensive mining tasks of IoT devices with
the assistance of the MEC server [26]–[31]. For example,
Xiong et al. [26] formulated the computation offloading and
service pricing problem between IoT devices and the edge
service provider (ESP) as a two-stage Stackelberg game in
MEC-aided blockchain networks. The Stackelberg equilibrium
1More details about the PoW consensus protocol of the Bitcoin system can
be found in [1], [15], and [16].
2327-4662 c© 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-4642-5824
https://orcid.org/0000-0003-0271-6021
https://orcid.org/0000-0002-7937-5870
https://orcid.org/0000-0002-8561-5092
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9085
TABLE I
SUMMARY OF MAIN NOTATIONS
ensures that ESP maximizes its revenue. Alternatively, it is
also significant to maximize the profit of IoT devices. To
accomplish this goal, Jiao et al. [27] considered an auction-
based market model to effectively allocate the computing
resources of the cloud service provider (CSP) to devices
in MEC-aided blockchain networks. According to the dis-
tance between devices and the resource service provider,
the work in [28] proposes a two-layer computing offload-
ing MEC-aided blockchain framework, including IoT devices,
ESP, and CSP. Under this framework, there are three com-
puting offloading schemes for IoT devices: 1) offloading to
ESP; 2) offloading to CSP; and 3) offloading to ESP and
then transferring to CSP. To maximize the system sum util-
ity, the work in [29] studies the computing resource allocation
problem under the MEC-assisted blockchain network exploit-
ing coalition game theory. In the long term, Nguyen et al. [30]
and Feng et al. [31] applied DRL to solve the problem
of computing resource allocation in MEC-aided blockchain
networks.
The large body of previous works [26]–[31] have also inves-
tigated the computation offloading of PoW mining tasks, but
they all handle PoW mining tasks as general computing tasks.
They have not studied the detailed PoW mining process of
public blockchain offloaded to the MEC server. The aforemen-
tioned studies [26]–[31] mainly analyze computation resource
allocation and pricing problems in MEC-assisted blockchain
networks. When devices take part in the PoW mining pro-
cess for a longer times, more block data will be accumulated.
Large amount of block data will impose huge storage pressure
for resource-limited IoT devices. To tackle this block storage
problem, the work in [32] studies the joint computing offload-
ing and block content storage problem in the MEC-assisted
blockchain network. Notably, Liu et al. [32] considered stor-
ing the block content of devices on the MEC server, which
is slightly inconvenient to call the block content when the
location of IoT devices changes. Meanwhile, the interaction
process of computing offloading and block storage between
IoT devices and ESP/CSP requires the assistance of wireless
communication links. Furthermore, the prior works [25]–[32]
consider one MEC server in the blockchain-enabled network,
which may affect the throughput and computing resources
of the entire network, resulting in fewer users accessing the
blockchain-enabled network.
To solve the block storage and throughput problems, in this
article, we investigate blockchain storage and computation for
cooperative MEC. The main contributions of this article are
summarized as follows.
1) We propose a cooperative MEC-aided blockchain frame-
work, where IoT devices offload computation-intensive
PoW mining tasks to BSs of the cooperative two cells
and store the block data to the CSP. In the communi-
cation model, we consider the uplink transmission from
IoT devices to BSs of the two cooperative cells.
2) We formulate the joint computation offloading, block
storage, and resource service pricing problem as a
Stackelberg game. Then, we propose a backward
induction-based iterative algorithm to obtain the Nash
equilibrium of the Stackelberg game. We also derive the
upper bound of the ergodic throughput of two cells and
the maximum number of users served by the proposed
cooperative network.
3) We provide numerical results to show that the backward
induction-based iterative algorithm has fast convergence
performance and the proposed cooperative scheme can
achieve much higher user access probability compared
with two noncooperative schemes.
The remainder of this article is organized as follows.
Section II presents the cooperative MEC-aided blockchain
framework. In Section III, we formulate the joint computa-
tion offloading, block storage, and resource service pricing
problem as a Stackelberg game. In Section IV, we analyze the
subgame optimization problem and propose an iterative algo-
rithm to obtain the Nash equilibrium of this game. Numerical
results are presented in Section V to validate the analytical
results. Finally, we conclude the main results of the work in
Section VI.
The main notations used in this article are summarized in
Table I.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
9086 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
Fig. 1. Blockchain-enabled two-cell network.
II. SYSTEM MODEL
Fig. 1 shows a cooperative MEC-assisted blockchain
network, which consists of a CSP and two cells2 denoted
by M = {1, 2}. Each cell has a single BS with K anten-
nas and N single-antenna IoT devices/users denoted by N =
{1, 2, . . . ,N}. IoT devices are allowed to communicate with
both cells simultaneously. Each BS has a MEC server managed
by the CSP of the core network. We assume that the overlap-
ping area of the two cells occurs only over the cell-edge zone.
The full cooperative transmission is limited in the cell-edge
zone, which is called the cooperative transmission area. BSs
fully cooperate and share both the channel state information
(CSI) and transmission data. All BSs are connected to the CSP
via the backhaul links (e.g., fiber links) with sufficient capacity.
We have main interest in the devices located in the cooperative
transmission area. IoT devices participate in the PoW mining
process of public blockchains. Due to the limited computing,
storage, and communication resources of devices, resource ser-
vice providers (including BSs and CSP) should provide these
resources to devices. The proposed cooperative MEC-assisted
blockchain network in this article can provide theoretical guid-
ance for the participation of all people in mobile blockchain
networks, so that the scalability of the blockchain can be
improved. According to different requirements of IoT devices,
we divide the system model into the following three specific
functional models, namely, the computation offloading model,
block storage model, and communication model. Our proposed
cooperative MEC-assisted blockchain scheme can provide the-
oretical guidance for the participation of all people in mobile
blockchain networks, so that the scalability of blockchain can
be improved.
2For the sake of simplicity, we only consider the cooperation of two cells.
Using cluster cooperation [33], our proposed blockchain-enabled the two-cell
framework can be easily extended to scenarios with more than two cells, such
as dense deployment scenarios and cloud RAN scenarios in the future.
A. Computation Offloading Model
We consider the PoW consensus mechanism of the public
blockchain network. Each device packages different transac-
tions into its block before mining and then tackles the PoW
puzzle until the mining is successful. The PoW mining process
needs to perform a large number of hash computing operations
and this computation-intensive mining task is too heavy for
IoT devices. Hence, IoT devices in the cooperative transmis-
sion area offload the computation-intensive PoW mining tasks
to the BSs of both cells, where the MEC servers are connected
by the CSP of the core network.
Each device independently selects nonces for hash com-
puting because the block content of each device is different.
Even though each device chooses the same nonce, the corre-
sponding hash is different. IoT devices also need to pay for
hash computing services of BSs, the eventual revenue of an
individual user could be reduced or even negative. Therefore,
without loss of generality, we assume that each user only
partially offloads the nonces to BSs to do hash computing
instead of going through the entire nonce space. This computa-
tion offloading model in MEC-aided blockchain IoT networks
draw lessons from the existing blockchain mining pool leas-
ing business model [34], indicating that our system model
has a certain practical background. BSs jointly receive the
nonce sequence and the block header information submitted
by different IoT devices. To attain a fairer computing service
among IoT devices, we use the nonce ordering mechanism
mentioned in [16] to map N nonce sequences into a merged
sequence, and then BSs provide hash computing services for
the long merged nonce sequence. We denote qn as the num-
ber of nonces offloaded from the nth user to BSs. The unit of
qn is Hash, which means the number of nonce hash comput-
ing. The data size of the block header of each user except
nonce is fixedly expressed as d and the data size of each
nonce is denoted as a. Therefore, when the PoW mining task
is offloaded to all BSs, the amount of data transmitted by the
nth user [16] is
Dn = d + aqn. (1)
B. Block Storage Model
Due to the limited storage of IoT devices, it is difficult
to store a full copy of the entire public blockchain ledger.
To tackle this problem, we consider that IoT devices are
lightweight and retain some useful data structures, such as
block header information. Consequently, we further consider
storing the entire block information into the CSP to release
the storage pressure of IoT devices. This block information is
packaged by each user in each round of the PoW mining pro-
cess. There are two reasons for storing the block information
packaged by IoT devices on the CSP instead of BSs. On the
one hand, IoT device participates in the PoW mining pro-
cess for a longer time, the device will accumulate more block
information. From a long-term perspective, the storage capac-
ity of BSs is unbearable for storing accumulated block data.
On the other hand, if an IoT device needs to call the block
information during the movement, it could be inconvenient
for downloading block data from the remote original BS. The
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9087
way to call block information from the remote original BS is
influenced extremely by the mobile location of IoT devices.
Therefore, the block information of IoT devices is stored on
the CSP of the core network to get rid of the restriction of
mobility.
The detailed process of storing the block data on the CSP is
as follows: the IoT device first transmits its block information
to BSs. Then, BSs transmit the block data to the CSP for
storage via wired links. IoT devices need to pay for the block
storage service to the CSP. Suppose Yn ∈ {0, 1} is the decision
of the nth device to store its block data on the CSP, where
Yn = 1 if the nth device stores block on the CSP, and Yn = 0
otherwise. In the current mining process, we assume that the
data size of the block data for user n is denoted as Sn.
C. Communication Model
IoT devices offload PoW mining computing tasks and
deliver block storage requests to BSs. In this process, the
transmission of these service request data to BSs requires the
support of the wireless communication link. Here, we only
consider the uplink transmission from IoT devices to BSs.
During the process of mining a new block, the IoT device
needs to upload its service request data, including computing
offloading data and block storage data, to BSs. The data size
of these service requests for devices n is given by
An = Dn + Sn
= d + aqn + Sn. (2)
Two cells process the received signal from N IoT devices
jointly. By stacking the received signal by two BSs, we have
y = Gx + w (3)
where G ∈ C
2K×N denotes the multi-input–multioutput chan-
nel matrix between the two BSs and N IoT devices/users.
y = [yT
1 , yT
2 ]T ∈ C
2K×1 is the received signal vector of
the two BSs. x = [x1, x2, . . . , xN]T ∈ C
N×1 is the trans-
mitted signal vector from all IoT devices, where xn denotes
the independent identically distributed (i.i.d.) transmitted sig-
nal from user n with the covariance matrix P = ε(xxH) =
diag{p1, p2, . . . , pN} ∈ C
N×N . w ∈ C
2K×1 is the addi-
tive white Gaussian noise vector with the covariance matrix
ε(wwH) = w0I. We denote the uplink channel coefficient
from the user n to the kth receiving antenna at the mth BS
as g(m,n)k = [G](m,n)k. The channel matrix G models inde-
pendent small-scale fading and the large-scale fading and the
channel coefficient g(m,n)k can be written as
g(m,n)k = h(m,n)k
√
β(m,n) (4)
where h(m,n)k is the Rayleigh fading coefficient from the user
n to the kth antenna of the mth BS. The Rayleigh fading
coefficients are i.i.d. zero-mean complex Gaussian random
variables, i.e., h(m,n)k ∼ CN (0, 1). β(m,n) is the large-scale
fading coefficient to model the path-loss effect between user
n and BS m. The large-scale fading coefficient is assumed
to be constant across the antenna. Specifically, the large-scale
fading coefficient can be described as
β(m,n) = γ−α
(m,n). (5)
Fig. 2. Upper bound of ergodic throughput and Monte Carlo results. The
cell radius of cell 1 and cell 2 are 100 and 190 m, respectively. The minimum
distances between cell-edge users and the BSs of cell 1 and cell 2 are 10 and
100 m, respectively. IoT devices are uniformly distributed in the overlapping
area of two cells and α = 3.5. The final Monte Carlo simulation results are
obtained by averaging over 105 independent realizations.
Here, γ(m,n) is the distance between the nth user and the mth
BS, and α is the path-loss exponent. Under the above channel
model, we can rewrite the channel matrix G as
G =
[
H(1)B
1/2
(1)
H(2)B
1/2
(2)
]
(6)
where H(m) ∈ C
K×N denotes the Rayleigh fading channel
matrix between all users and the mth BS. B(m) ∈ C
N×N is
the large-scale fading channel matrix from the IoT devices to
the mth BS with B(m) = diag{β(m,1), β(m,2), . . . , β(m,N)}. The
signal is optimally detected at BSs through maximum likeli-
hood detection. When CSI is available at the IoT devices side,
the ergodic throughput of two cells can be expressed as
R = E
{
Wlog2det
(
I2K + 1
w0
GPGH
)}
(7)
where W is the transmit bandwidth in the wireless link. Before
formulating a problem, we theoretically analyze the ergodic
throughput of two cells. We provide an upper bound [35], [36]
in the following theorem.
Theorem 1: The ergodic throughput of two cells by using
full BS cooperation is upper bounded by
R ≤ Ru = WK
[
log2
(
1 + 1
w0
N∑
n=1
β(1,n)pn
)
+ log2
(
1 + 1
w0
N∑
n=1
β(2,n)pn
)]
. (8)
Proof: See Appendix A.
From Theorem 1, we can see that the ergodic throughput (7)
approximates its upper bound (8). Fig. 2 plots the upper bound
of the ergodic throughput and Monte Carlo results versus SNR,
verifying Theorem 1.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
9088 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
Fig. 3. Working process of PoW mining tasks offloading and block storage between IoT devices, BSs, and CSP.
III. COMPUTATION OFFLOADING, BLOCK STORAGE, AND
RESOURCE SERVICE PRICING PROBLEM FORMULATION
Fig. 3 shows the working process of PoW mining tasks
offloading and block storage between IoT devices, BSs, and
CSP. In the PoW mining tasks offloading period, CSP first
allocates computing resources to BSs. All IoT devices offload
their PoW mining tasks to BSs of the two cells. Then, BSs
take full cooperative processing and provide nonce hash com-
puting services to IoT devices. Once a user has solved the
PoW puzzle, BSs will stop all mining tasks immediately and
announce the result to all IoT devices. Then, a new round of
computation offloading will begin. In the block storage period,
the IoT device first transmits its block storage requests, and
then BSs transmit the block information to the CSP for stor-
age via the fiber links. Finally, the CSP provides block storage
services.
When IoT devices perform computing, storage, and com-
munication operations, they need to interact with various
resource service providers, which also leads to the interplay
between resource service providers. Therefore, we formu-
late the interaction process between IoT devices, BSs, and
CSP as a three-stage Stackelberg game as Fig. 4, and ana-
lyze their mutual influences in the entire blockchain IoT
system.
A. Stage I: Resource Allocation Model for CSP
In stage I, the CSP acts as a leader, who provides com-
puting capacity to BSs and block storage resources to IoT
devices. Then, the CSP can determine the unit price charged
for providing these resources. The workflow at this stage can
be constructed as the resource allocation model for CSP. The
utility function of the CSP can be expressed as the fee charged
minus the cost of electricity, which is written as follows:
UCSP
(
cBS, cUE,s
n
)
= cBSQ +
∑
n∈N
YncUE,s
n Sn
−
(
cCSP,cQ + cCSP,s
∑
n∈N
YnSn
)
(9)
Fig. 4. Three-stage Stackelberg game of interactions among IoT devices,
BSs, and CSP in the two-cell cooperative blockchain IoT network.
where cBS is the computing management unit price paid by
BSs to the CSP, and cUE,s
n is the block storage service unit
price paid by the nth device to the CSP. Q represents the
computing capacity of BSs allocated by the CSP and the unit
of Q is Hash, which means the number of nonce hash comput-
ing. cCSP,c and cCSP,s denote the unit electricity costs of the
CSP to provide computing management services and block
storage services, respectively. Then, we formulate the sub-
game optimization problem at this stage, which maximizes
the revenue of the CSP and seeks the optimal unit price of
resource services. The subgame optimization problem P1 in
stage I is
P1 : max
cBS≥0,cUE,s
n ≥0
UCSP
(
cBS, cUE,s
n
)
. (10)
B. Stage II: Computing Service Pricing Model for BSs
In stage II, the BS is the follower of stage I. The computing
capacity, which refers to the maximum nonce number that BSs
perform hash computing, is determined according to the unit
price of the computing management service announced by the
CSP. On the other hand, the BS also becomes the leader of
stage II and decides the unit price of the nonce hash computing
services charged from IoT devices. Stage II is modeled as the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9089
computing service pricing model for BSs. The utility function
of BSs corresponds to the computing service fees charged by
IoT devices minus the computing service management costs
submitted by BSs to the CSP. Especially, the utility function
of BSs can be written as
UBS(cUE,c
n ,Q
) =
∑
n∈N
cUE,c
n qn − cBSQ (11)
where cUE,c
n is the unit price of the hash computing services
paid by user n to BSs. Note that in the physical layer trans-
mission, we assume that the BSs of both cells jointly receive
signals from IoT devices in a fully cooperative manner, which
improves the throughput of processing data. Moreover, BSs
of both cells jointly handle the computing demands offloaded
from devices. Then, we formulate the subgame optimization
problem at Stage II. This problem maximizes the revenue of
BSs and finds the optimal computing capacity and the unit
price of computing services charged by devices. We have the
subgame optimization problem P2 in this stage
P2 : max
cUE,c
n ≥0,Q≥0
UBS(cUE,c
n ,Q
)
s.t. C1 : Q ≥
∑
n∈N
qn. (12)
Constraint C1 indicates that the total computing tasks
offloaded by all users to BSs cannot exceed the computing
capacity of BSs.
C. Stage III: Computing, Storage, and Communication
Model for IoT Devices
In stage III, IoT devices are followers of stages I and II.
The users determine the hash computing demands offloaded
to BSs and the block storage strategies transmitted to the
CSP. Stage III is formalized as the computing, storage, and
communication model for devices. Note that the results of
successful mining are shared among BSs, there is no fork
and the orphaning probability will not be considered. After
the mining task is completed, the first user who successfully
mines can get a fixed bonus and a tip from the transaction
packaged into their own block. Specifically, the revenue func-
tion [16] of computation offloading for user n is expressed as
follows:
UUE,c
n = (Fc + rzn
)
2−H qn∑
j∈N qj
− cUE,c
n qn (13)
where Fc is a fixed monetary reward for mining a new block
and r is the transactional fee rate. zn denotes the transactional
size [37], [38] of user n and H is an adjustable blockchain
difficulty factor. The first term of (13) represents the expected
reward received by user n after successful mining. Here,
qn/
∑
j∈N qj is the probability of mining a new block for user
n, i.e., the ratio of the nonce hash computing demand of user
n to the total computing demand of the network. Moreover,
nonce hash computing is a memoryless search process. The
successful mining probability is only related to the target dif-
ficulty value and has nothing to do with the size of the search
space. Each nonce hash computing is an i.i.d. Bernoulli trial
with a successful probability as PD = 2−H. Then, the expected
reward discounted by PD is shown in the first term of (13).
The second term of (13) denotes the computing service cost
paid by user n to BSs.
If the block information is stored locally, resource-limited
IoT devices need to purchase storage hardware from the com-
puter equipment shopping mall for block storage. Denote the
unit price of the storage hardware, which locally stores data
of mining a new block as Fs. To save the storage hardware
overhead and the convenience of IoT devices, we consider
transferring the block data to the CSP. In this scheme, IoT
devices need to pay storage service fees to the CSP. After
storing the block data to the CSP, the revenue function of
storing block for user n is given by
UUE,s
n = Yn
(
Fs − cUE,s
n Sn
)
(14)
where Yn ∈ {0, 1} is the decision of the nth device to store
its block data on the CSP. When the block data are stored in
the CSP, Fs is actually the hardware cost saved by IoT devices
and is equivalently regarded as a fixed reward for storing block
data to the CSP. As a result, the total revenue function of user
n can be expressed as the sum of the profits of computation
offloading and block storage. Then, the utility function of the
nth user is
UUE
n (qn,Yn) = UUE,c
n + UUE,s
n
= (
Fc + rzn
)
2−H qn∑
j∈N qj
− cUE,c
n qn
+ Yn
(
Fs − cUE,s
n Sn
)
. (15)
Then, we formulate the subgame optimization problem at
stage III, which maximizes the individual profits of user n
by optimizing computing demands and block storage strate-
gies. The subgame optimization problem P3 in stage III is
formulated as
P3 : max
qn≥0,Yn∈{0,1} UUE
n (qn,Yn)
s.t. C2 :
∑
n∈N
(d + aqn + Sn) ≤ Ru. (16)
Constraint C2 represents that the total data uploaded to BSs
for computing offloading and block storage service requests
of all users cannot exceed the upper bound of the ergodic
throughput as (8).
IV. STACKELBERG GAME ANALYSIS FOR
IOT DEVICES, BSS, AND CSP
In this section, we use the backward induction method to
obtain the Nash equilibrium of the Stackelberg game. We
first solve the subgame problem P3 in stage III, then tackle
the subgame problem P2 in stage II, and finally handle the
stage I’s subgame problem P1. Furthermore, we design a back-
ward induction-based iterative algorithm to achieve a Nash
equilibrium of the entire game.
A. Stage III: IoT Devices Level Game
In stage III, to maximize the individual revenue of each
user, the IoT device first acts as the follower of stage II and
determine the optimal hash computing demands offloaded to
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
9090 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
BSs. Next, the IoT device is also the follower of stage I and
decide the block storage strategy transmitted to the CSP. We
formulate the subgame optimization problem in stage III as P3.
In P3, the design variable qn is the number of nonces
offloaded to BSs from user n with the integer constraint. The
block storage strategy Yn = {0, 1} is also a discrete variable.
Therefore, the subgame optimization problem P3 is a mixed
binary nonlinear integer programming problem. Generally, P3
can be solved by the traditional branch and bound (B&B)
algorithm to obtain the optimal solutions, which however has
exponential complexity. To effectively tackle the subgame
problem P3, we need to design a low-complexity algorithm
and make some simple relaxation operations.
We first continuously relax the target variable qn and find
the optimal solution of this continuous variable. The optimal
solution of the relaxation problem is taken as the upper bound
of the target variable qn of the original problem, and the lower
bound can be set to 0. Then, we use the binary search method
to find the optimal computing demand q∗
n that satisfies the
integer constraint, while maximizing the individual revenue of
IoT devices. Then, we relax the binary block storage strategy
Yn to the following continuous constraint as:
0 ≤ Yn ≤ 1, n ∈ N . (17)
Note that Yn after continuous relaxation can be regarded as
a storage factor, which represents the percentage of storing
block information from user n to the CSP.
Combining the above continuous relaxation of target vari-
able, the original subgame optimization problem P3 of user n
is equivalent to
P3′ : max
qn≥0,0≤Yn≤1
UUE
n (qn,Yn)
s.t. C2 :
∑
n∈N
(d + aqn + Sn) ≤ Ru. (18)
Next, we analyze the existence of the Nash equilibrium in
stage III’s subgame of the Stackelberg game which is described
by the following theorem.
Theorem 2: The subgame in stage III has at least one pure-
strategy Nash equilibrium, i.e., the probability of the existence
of the Nash equilibrium is 1.
Proof: After the above continuous relaxation operation,
the constraint C2 is the convex set with qn. The utility function
UUE
n is a continuous function and then we take the second-
order derivative of (15) with respect to (w.r.t.) qn and Yn to
obtain the Hessian matrix, which is given by
Hn =
⎡
⎣
(Fc + rzn)2−H −2
∑
j 	=n,j∈N qj
(
qn+∑j 	=n,j∈N qj
)3 0
0 0
⎤
⎦ 
 0. (19)
As a result, the objective function UUE
n is a concave function
and constraint C2 is a convex set w.r.t. variables qn and Yn,
and problem P3′ is a convex optimization problem. According
to [39, Th. 3.2], the Nash equilibrium exists in the subgame
of Stage III.
P3′ can be solved by standard convex optimization algo-
rithms, such as the interior point method and gradient projec-
tion method. In order to obtain a more effective closed-form
expression of qn and Yn, we further analyze this optimization
problem by decoupling P3′ into two subproblems as follows:
P3′ − 1 : max
qn≥0
UUE
n (qn)
s.t. C2 :
∑
n∈N
(d + aqn + Sn) ≤ Ru (20)
and
P3′ − 2 : max
Yn
UUE
n (Yn). (21)
First, we fix Yn and solve the subproblem P3′−1 of qn. Derived
from [∂2UUE,c
n /∂q2
n] < 0, the convex of the function UUE
n (qn)
is proved. Then, we take the first-order derivative of UUE
n (qn)
w.r.t. qn, we obtain
∂UUE,c
n
∂qn
= (
Fc + rzn
)
2−H
∑
j 	=n,j∈N qj
(
qn +∑j 	=n,j∈N qj
)2
− cUE,c
n
= 0. (22)
After mathematical transformations, we can get the optimal
computing demand of user n as
q∗
n = N − 1
∑
j∈N
cUE,c
j 2H
Fc+rzj
− cUE,c
n 2H
Fc + rzn
⎛
⎜
⎝
N − 1
∑
j∈N
cUE,c
j 2H
Fc+rzj
⎞
⎟
⎠
2
(23)
and q∗
n satisfies the following constraint:
∑
n∈N
(
d + aq∗
n + Sn
) ≤ Ru. (24)
Substituting (23) into (24), we can obtain the maximum num-
ber of users that the proposed two-cell cooperative blockchain
network as follows:
Nmax =
⌊(
Ru + φ −
∑
n∈N
Sn
)/
(d + φ)
⌋
(25)
where �·� represents floor operation and φ =
a(
∑
n∈N [(cUE,c
n 2H)/(Fc + rzn)])−1.
Remark 1 [Properties of (25)]: Observing the maximum
number of users described in (25), we can get the following
insights.
1) Nmax increases with W. That is, the maximum number of
users accommodated by the proposed network increases
when the transmit bandwidth increases.
2) Nmax is an increasing function of K. That is, the maxi-
mum number of users served by the proposed blockchain
system increases when the number of receiving antennas
of each BS becomes larger.
3) Nmax decreases with the distance between users and BSs.
That is, the maximum number of users is smaller when
the average distance between users and BSs is larger.
Then, we fix q∗
n and solve Yn of the subproblem P3′ − 2.
When Fs − cUE,s
n Sn ≥ 0, the utility function of BSs is mono-
tonic increasing w.r.t. Yn. Thus, BSs have the maximum
revenue when Yn selects the maximum value as Y∗
n = 1. When
Fs − cUE,s
n Sn < 0, UUE
n is a monotonically decreasing func-
tion w.r.t. Yn and gets the maximum value when Yn takes the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9091
minimum value as Y∗
n = 0. The optimal block storage strategy
for user n can be concluded as
Y∗
n =
{
1, Fs − cUE,s
n Sn ≥ 0
0, Fs − cUE,s
n Sn < 0.
(26)
B. Stage II: BSs Level Game
To maximize the revenue of BSs in two cells, BSs are the
follower of stage I and choose the optimal computing capacity
from CSP. Next, BSs act as the leader of stage II and determine
the unit price of the nonce hash computing services charged
from IoT devices. Stage II of the Stackelberg game is modeled
as a subgame optimization problem P2.
By analyzing problem P2, we find that the target variable Q
has the nonnegative integer constraint and cUE,c
n is a continuous
variable, problem P2 becomes a mixed integer programming
problem. In order to get feasible solutions, problem P2 is
decoupled into two subproblems as
P2 − 1 : max
Q≥0
UBS(Q)
s.t. C1 : Q ≥
∑
n∈N
qn (27)
and
P2 − 2 : max
cUE,c
n ≥0
UBS(cUE,c
n
)
. (28)
We first keep cUE,c
n fixed and find the optimal Q. The revenue
of BSs is nonnegative. Combined with the constraint C1, all
constraints w.r.t. the objective variable Q can be written as
∑
n∈N
qn ≤ Q ≤
∑
n∈N cUE,c
n qn
cBS
. (29)
We can see from (28) that the revenue function of BSs is a
monotonically decreasing function of Q. When Q takes the
minimum value, BSs will have the maximum revenue. Thus,
the optimal computing capacity of BSs is given by
Q∗ =
∑
n∈N
q∗
n
= N − 1
∑
n∈N
cUE,c∗
n 2H
Fc+rzn
. (30)
Now, we fix Q∗ and optimize cUE,c
n of the subproblem P2−2.
Substituting (23) and (30) into the utility function of BSs, the
subproblem P2 − 2 can be rewritten as
P2 − 2 : max
cUE,c
n ≥0
UBS(cUE,c
n
) =
∑
n∈N
cUE,c
n
N − 1
∑
j∈N cUE,c
j bj
×
(
1 − cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
)
− cBS(N − 1)
∑
j∈N cUE,c
j bj
(31)
where bn = [2H/(Fc + rzn)] > 0.
Theorem 3: When ζn ≤ 0, UBS(cUE,c
n ) is
a concave function w.r.t. cUE,c
n , where ζn =∑
i 	=n ([1/bn] + [1/bi])(1 − cUE,c
i bi[N/(
∑
j∈N cUE,c
j bj)]).
Fig. 5. Unit price cUE,c
1 versus the revenue of BSs. N = 2, cUE,c
2 = 10−3,
z1 = 500, z2 = 1500, H = 10, and cBS = 10−5, and other parameter settings
are given in Table III in Section V.
When ζn > 0, UBS(cUE,c
n ) is a monotonic decreasing function
w.r.t. cUE,c
n .
Proof: See Appendix B
Remark 2 (Interpretation of Theorem 3): From Theorem 3,
we have the following statements.
1) IoT devices will not be willing to purchase hash com-
puting services from BSs, when the unit price of the
computing services is higher than a certain threshold.
Thus, given the unit prices of other users, the utility
function of BSs decreases with the increasing cUE,c
n .
2) When the unit price of the computing services is lower
than this threshold, IoT devices can accept this unit
price. Therefore, given the unit prices of other users, the
utility function of BSs is a concave function of cUE,c
n .
Fig. 5 shows the unit price of the computing service for
user 1 versus the revenue of BSs and verifies Theorem 3. As
expected, we see that the revenue of BSs is concave of cUE,c
1
if cUE,c
1 ≤ η1, where η1 satisfies the condition ζ1 ≤ 0. When
cUE,c
1 > η1, we see that the revenue of BSs decreases with
increasing cUE,c
1 . Based on Theorem 3, within the range of
ηn ≥ 0, we can maximize the revenue of BSs to find the
optimal cUE,c
n . As a result, the subproblem P2 − 2 can be
equivalent to
P2 − 2′: max
cUE,c
n ≥0
UBS(cUE,c
n
)
s.t. C1′ : ζn ≤ 0. (32)
From the analysis above, we see that P2 − 2′ is a convex
optimization problem under constraint C1′. Therefore, cUE,c
n
can obtain the optimal solution by applying standard convex
optimization algorithms, such as the interior-point algorithm
and gradient projection algorithm.
C. Stage I: CSP Level Game
To maximize the revenue of CSP, CSP acts as the follower
of stage I and decide the optimal unit price of the comput-
ing management services paid by BSs. Moreover, CSP also
chooses the optimal unite price of the block storage services
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
9092 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
paid by IoT devices. In this stage, we construct the subgame
optimization problem as P1.
Observing the structure of UCSP in problem P1, it can be
shown that UCSP is a simple linear function w.r.t. cBS and
cUE,s
n . Therefore, problem P1 becomes a linear programming
problem. To effectively get feasible solutions, we decouple
problem P1 into two subproblems as
P1 − 1 : max
cBS≥0
UCSP
(
cBS
)
(33)
and
P1 − 2 : max
cUE,s
n ≥0
UCSP(cUE,s
n
)
. (34)
We first keep cUE,s
n fixed and solve the optimal cBS of the
subproblem P1 − 1. The nonnegativity of the revenue of CSP
w.r.t. cBS can be written as
cBS ≥ max
×
{
cCSP,cQ + cCSP,s∑
n∈N YnSn −∑n∈N YncUE,s
n Sn
Q
, 0
}
.
(35)
We further consider that the revenue of BSs in stage II is
nonnegative as follows:
cBS ≤
∑
n∈N cUE,c
n qn
Q
. (36)
Equation (9) shows that the revenue function of CSP is mono-
tonically increasing of cBS. So, we can get the maximum
revenue of CSP when cBS selects the maximum value, which
is obtained by
cBS∗ =
∑
n∈N cUE,c∗
n q∗
n
Q∗ . (37)
Then, we keep cBS∗ unchanged and optimize cUE,s
n of the
subproblem P1 − 2. When Yn = 0, cUE,s
n = 0. When Yn = 1,
cUE,s
n is constrained by the nonnegative revenue of CSP. Then,
we obtain
cUE,s
n ≥ max
⎧
⎨
⎩
⎛
⎝cCSP,s
∑
n∈N
Sn −
∑
j 	=n,j∈N
cUE,s∗
j Sj
−
∑
n∈N
(
cUE,c∗
n − cCSP,c
)
q∗
n
⎞
⎠
/
Sn, 0
⎫
⎬
⎭
.
(38)
We also consider that the nonnegativity of the user storage
revenue of stage III has an effect on cUE,s
n . When Yn = 0,
cUE,s
n = 0. When Yn = 1, we can obtain
cUE,s
n ≤ Fs
Sn
. (39)
From (9), the revenue function of CSP is monotonic increasing
of cUE,s
n and gets the maximum revenue of CSP when cUE,s
n
takes the maximum value as
cUE,s∗
n = Y∗
n
Fs
Sn
. (40)
TABLE II
COMPUTATIONAL COMPLEXITY
D. Algorithm for Stackelberg Game and Analysis
Based on the analysis results in Sections IV-A–IV-C, we
adopt the backward induction method to achieve the Nash
equilibrium of the Stackelberg game. Backward induction is
a method to solve the equilibrium of dynamic games. The
dynamic game means that there is a sequence of actions of
the player in the game, and the player in the latter actions can
observe the previous actions. The backward induction method
is to go back from the last step of the dynamic game to
solve the equilibrium result. The rationale behind the backward
induction method to solve the equilibrium of the Stackelberg
game is explained below. The CSP acts first in the Stackelberg
game and selects resource service pricing strategies in stage I.
The CSP will inevitably consider the behavior choices of the
post-action BSs and IoT devices in stages II and III. Only IoT
devices in stage III can directly make choices without being
restricted by other players. When the selection of IoT devices
in stage III is determined, the behavior of the CSP and BSs
in stages I stage II is easily decided. The backward induc-
tion method eliminates untrustworthy threats and promises.
Specifically, we first solve stage III’s subgame problem P3
using (23) and (26), and then tackle the subgame problem P2
in stage II using (30) and interior-point algorithm, and finally
handle the stage I’s subgame problem P1 using (37) and (40).
For the detailed process, the proposed backward induction-
based iterative algorithm of the proposed Stackelberg game is
summarized in Algorithm 1.
In the three-stage Stackelberg game, there is at least one
NE at each stage, which includes the computing demand q∗
n
and block storage strategy Y∗
n determined by IoT devices in
stage III, the computing capacity Q∗ and the unit price of the
computing services cUE,c∗
n decided by BSs in stage II, and
the unit price of the computing management services cBS∗
and the unit price of the block storage cUE,s∗
n determined by
the CSP in stage I. When Algorithm 1 converges, the IoT
device in stage III cannot change the computing demand and
block storage strategies for increasing its individual revenue.
The convergence of the subgame of stage III has been proved
in Theorem 2. Specifically, when q∗
n and Y∗
n in stage III are
fixed, Q∗ and cUE,c∗
n in subsequent stage II are also inflexible.
Similarly, when Q∗ and cUE,c∗
n in stage II are unchanged, cBS∗
and cUE,s∗
n in subsequent stage I are also fixed. Therefore, the
entire game eventually converges to a unique result. In other
words, Algorithm 1 of the Stackelberg game converges to its
unique Nash equilibrium.
Using Algorithm 1, the complexity of each stage of the
Stackelberg game is summarized in Table II, where II repre-
sents the number of iterations required for the convergence
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9093
Algorithm 1 Backward Induction-Based Iterative Algorithm
of the Stackelberg Game
1: Input: The initial data set (N, K, Fc, Fs, H, r, a, d, cCSP,c,
cCSP,s, zn, Sn) for n ∈ N .
2: Output:
(
q∗
n, Y∗
n ,Q∗, cUE,c∗
n , cBS∗, cUE,s∗
n
)
for n ∈ N .
3: Initialization:
(
qn, Yn,Q, cUE,c
n , cBS, cUE,s
n
)
for n ∈ N .
4: repeat
5: Stage III : IoT devices level game
6: for n = 1 to N do
7: Fix
(
Q, cUE,c
n , cBS, cUE,s
n
)
, obtain the optimal continuous
computing demand of problem P3 using (23) and the binary
search method to get q∗
n, and obtain the optimal solution Y∗
n
using (26).
8: end for
9: Stage II : BSs level game
10: for n = 1 to N do
11: Fix
(
qn, Yn, cBS, cUE,s
n
)
, obtain the optimal computing
capacity of problem P2−1 using (30) to get Q∗, and obtain
the optimal solution cUE,c∗
n of problem P2 − 2′ using the
interior-point algorithm.
12: end for
13: Stage I : CSP level game
14: for n = 1 to N do
15: Fix
(
qn, Yn,Q, cUE,c
n
)
, obtain the optimal vector
(cBS∗, cUE,s∗
n ) of problem P1 using (37) and (40),
respectively.
16: end for
17: until The optimal vectors
(
q∗
n, Y∗
n ,Q∗, cUE,c∗
n , cBS∗, cUE,s∗
n
)
for
n ∈ N are obtained.
of the interior point method in the inner loop and Io indi-
cates the number of iterations of the outer loop dominated
by step 4. Q̂ is obtained by rounding up the continuous
computing demand using (23). Specifically, the computational
complexity of one iteration using an interior-point algorithm
is O(max{L3
v,L2
vLc}) [40], [41], where Lv and Lc are the
numbers of the optimization variable and constraint, respec-
tively. As will be shown in simulation, the number of iterations
of the outer loop is not large. So, it can be seen that our
proposed Algorithm 1 can quickly acquire the NE point of
the Stackelberg game in the polynomial time.
V. NUMERICAL RESULTS
In this section, we first verify the convergence of the
proposed backward induction-based iterative algorithm of the
Stackelberg game. Then, we compare the user access proba-
bility of the proposed two-cell cooperative scheme with two
noncooperative schemes. We further illustrate the effect of
different parameters on the proposed cooperative MEC-aided
blockchain networks, that is, interactions between three stages.
We consider the cooperative MEC-assisted blockchain sce-
nario, involving the multiuser multicell cooperative scenario
and the mobile blockchain scenario. The parameters in the
multiuser multicell cooperative scenario include the number
of antennas of each BS, the transmit power of each user,
and the transmit bandwidth. The selection of these param-
eters mainly refers to previous works [33], [42], [43]. The
parameters in the mobile blockchain scenario, such as the
transaction fee rate, the fixed reward for mining a new block,
and the transactional size, are selected mainly based on prior
works [26], [27], [37], [38]. The main simulation parame-
ters are listed in Table III. Note that some of these system
parameters are varied in different simulation scenarios.
A. Convergence of the Backward Induction-Based
Iterative Algorithm
In this section, we demonstrate the convergence of the
Stackelberg game. For ease of illustration, we consider a
simple example with two users in the proposed blockchain
network in Fig. 6(a). The transactional sizes of two users
are z1 = 500 and z2 = 1500, and we set the data size
Sn = 103 ×zn. The maximum unit price of computing services
for each user is set to 10−5$. Three users are further considered
in the proposed cooperative MEC-aided blockchain network in
Fig. 6(b). The transactional sizes of three users are z1 = 500,
z2 = 1000, and z3 = 1500.
Fig. 6 plots the convergence of the proposed backward
induction-based iterative algorithm described as Algorithm 1
for the Stackelberg game when N = 2 and N = 3. From
Fig. 6(a), when the iteration number is larger than 10, we can
see that the unit price of each resource service for users and
BSs reaches a stable state. From Fig. 6(b), when the iteration
number is larger than 15, the computing demands for three
users tend to stabilize. As a result, we can see that Algorithm 1
has fast convergence performance and the number of iterations
never exceeds 20 when N = 2 and 3. This result also shows
that the proposed backward induction-based iterative algorithm
can achieve the Nash equilibrium of the Stackelberg game in
the polynomial time.
B. User Access Probability of Proposed Two-Cell
Cooperative Scheme
In this section, we compare the user access probability of
the proposed two-cell cooperative scheme and two noncoop-
erative schemes depicted in Fig. 7. The transactional size of
users is uniformly distributed from 300 to 1500 and we set
cUE,c
n = 10−8$ for n ∈ N . Other parameters setting are given
in Table III.
Fig. 7 shows the user access probability versus the num-
bers of users. Observing from Fig. 7, in the proposed two-cell
cooperative scheme, we see that the user access probability is
100% when N ≤ 1300 and there is a slow downward trend
when N > 1300. However, the user access probabilities of
the other two noncooperative schemes rapidly decrease with
the number of users. For example, when N = 800, the user
access probabilities of only cell 1 scheme and only cell 2
scheme are 39.37% and 24.50%, respectively. Under the only
cell 2 scheme, the average distance between BSs and users is
farther than the other two schemes, so the user access proba-
bility of the only cell 2 scheme is lower. The reason is that the
proposed two-cell cooperative scheme improves the through-
put of the entire system and can serve more users than the other
two noncooperative schemes. As a result, the proposed two-
cell cooperative scheme has a significantly great advantage
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
9094 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
TABLE III
SIMULATION PARAMETERS
(a) (b)
Fig. 6. Convergence of the Stackelberg game. (a) Unit price versus iterations (N = 2). (b) Computing demand versus iterations (N = 3).
Fig. 7. User access probability versus the number of users.
compared with two noncooperative schemes, especially when
the number of users is large.
C. Effect of Different Parameters on Proposed Network
In this part, we discuss the effect of different parameters,
including the unit price of the computing service, the com-
puting demands of users, the unit price of the storage service,
and the block storage strategies, on the proposed network as
shown in Figs. 8–10. We consider a simple example with four
Fig. 8. Computing demands for users versus the unit price of the computing
service.
users in this network. The transactional sizes of four users are
z1 = 500, z2 = 750, z3 = 1000, and z4 = 1500.
Fig. 8 shows the computing demands for users versus the
unit price of the computing service. From Fig. 8, we clearly
see that when the unit price of the computing is the same
value for all users, the computing demand of user 4 is the
largest and that of user 1 is the smallest. This is because as
the transactional number increases, each user can achieve more
tips from transactions, which incentivizes users to mine a new
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9095
Fig. 9. Block storage strategies for users versus the unit price of the storage
service.
Fig. 10. Computing service unit price versus computing management unit
price.
block, resulting in offloading more PoW mining computing
demands from users to BSs. Then, we observe that the com-
puting demands of all users decrease with the increment of the
computing service unit price. Furthermore, with the unit price
of the computing service increasing, the gap of the computing
demands among users becomes smaller. The reason is that if
the unit price of computing services is too high, users will
reduce computing demands offloaded to BSs in order to save
costs.
Fig. 9 illustrates the block storage strategies for users versus
the unit price of the storage service. As can be seen, if the unit
price of the storage service is cheaper, all users will choose to
store block data on the CSP. Observing from Fig. 9, if the unit
price of the storage service is higher, users with a large number
of transactions will not store their block data on the CSP. For
example, when the storage service unit price is 2 ∗ 10−4 $,
user 1 with a smaller number of transactions still chooses to
store block on the CSP. In contrast, other users, who have
more transactions, will not store block on the CSP. However,
if the unit price of storage services is too much high, all users
cannot store block data on the CSP. The reason is that when
the unit price of the storage service is higher than a certain
threshold, users cannot afford the storage service fee, so they
will not store their blocks on the CSP.
Fig. 10 shows the computing service unit price of users ver-
sus the computing management service unit price of BSs. We
can see that as the computing management service unit price
of BSs increases, the computing service unit price of all users
increases accordingly when the unit price of the computing
management is smaller. As shown in Fig. 10, the user’s com-
puting service unit price does not always increase when the
unit price of the computing management is higher. The reason
is that as the unit price of the computing management service
increases and the computing service fee is too high, the user
cannot afford it and the computing service unit price of users
will no longer increase in order to save costs of users. This
result also shows that the players, including IoT devices, BSs,
and CSP in the Stackelberg game influence each other, and
eventually tend to a stable state that every player is satisfied
with, that is, converge to the Nash equilibrium of the game.
VI. CONCLUSION
In this article, we considered a new cooperative MEC-aided
blockchain network, where PoW mining tasks can be offloaded
to BSs and the block data can be stored to the CSP. In this
network, we have formulated the interaction process between
IoT devices, BSs, and CSP as a three-stage Stackelberg game.
We also analyzed the subgame optimization problem in each
stage. To efficiently obtain the computation offloading, block
storage strategies, and resource service prices for all devices,
BSs, and CSP, we have designed the backward induction-based
iterative algorithm of the Stackelberg game. Besides, we have
derived the upper bound of the ergodic throughput in the two-
cell cooperative scheme and the maximum number of users
served by the proposed network. Numerical results showed
that the proposed backward induction-based iterative algorithm
has fast convergence performance and discussed interplays
between three stages of the proposed game. Furthermore, the
analysis and optimization results have shown that the proposed
two-cell cooperative scheme has great advantages compared
with two noncooperative schemes. In our further work, we will
use the DRL technique [13], [14] to further study the impact
of time-varying cooperative MEC-aided blockchain networks
on the computation offloading and block storage.
APPENDIX A
PROOF OF THEOREM 1
To prove Theorem 1, we apply Jensen’s inequality to (7),
which is given by
R ≤ Wlog2det
(
I2K + 1
w0
E
(
GPGH
))
. (43)
Under the condition that the large-scale fading is known and
the small-scale fading is unknown, we transform the channel
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
9096 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
matrix G as follows:
G =
[
H(1)B
1/2
(1)
H(2)B
1/2
(2)
]
=
[
H(1) 0
0 H(2)
][
B1/2
(1)
B1/2
(2)
]
. (44)
Let J =
[
H(1) 0
0 H(2)
]
∈ C
2K×2N and B =
[
B1/2
(1)
B1/2
(2)
]
∈
C
2N×N . Substituting these into E(GPGH), we get
E
(
GPGH) = E
(
J
JH) (45)
where
 = BPBH =
[
B(1)P B1/2
(1) B1/2
(2) P
B1/2
(1) B1/2
(2) P B(2)P
]
∈ C
2N×2N (46)
is the block diagonal matrix. Substituting (46) into (45), we
can obtain
E
(
GPGH)
=
⎡
⎣
E
(
H(1)B(1)PHH
(1)
)
E
(
H(1)B
1/2
(1) B1/2
(2) PHH
(2)
)
E
(
H(2)B
1/2
(1) B1/2
(2) PHH
(1)
)
E
(
H(2)B(2)PHH
(2)
)
⎤
⎦.
(47)
The distribution of the small-scale fading channel matrix H(m)
between the IoT devices and the mth BS can also be repre-
sented as H(m) ∼ CNK,N(0, IK ⊗ IN). According to [44, Th.
2.3.5], we have
E
(
H(m)B(m)PHH
(m)
)
= tr
(
B(m)P
)
IK . (48)
Besides, H(m) is an i.i.d. zero-mean complex Gaussian distri-
bution, so we get
E
(
H(1)B
1/2
(1) B1/2
(2) PHH
(2)
)
= 0 (49)
and
E
(
H(2)B
1/2
(1) B1/2
(2) PHH
(1)
)
= 0. (50)
Thus, (8) is obtained.
APPENDIX B
PROOF OF THEOREM 3
To prove Theorem 3, we rewrite (11) as (41), shown at the
bottom of the page. First, we derive the first-order derivative
of (41) w.r.t. cUE,c
n as shown in (42), at the bottom of the page.
When ζn > 0, ψn in (42) is obviously less than 0. Next, we
UBS(cUE,c
n
) = 1
bn
cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
(
1 − cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
)
+
∑
i 	=n,i∈N
1
bi
cibi
N − 1
∑
j∈N cUE,c
j bj
(
1 − cibi
N − 1
∑
j∈N cUE,c
j bj
)
− cBS(N − 1)
∑
j∈N cUE,c
j bj
(41)
∂UBS
∂cUE,c
n
= (N − 1)bn
(∑
j∈N cUE,c
j bj
)2
⎛
⎝
∑
i 	=n
−
(
1
bn
+ 1
bi
) ∑
j 	=n,j∈N
cUE,c
j bj
(
1 − cUE,c
i bi
N − 1
∑
j∈N cUE,c
j bj
)
+
∑
i 	=n
(
1
bn
+ 1
bi
)
cUE,c
i bi
(
1 − cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
)
+ cBS
⎞
⎠
≤ (N − 1)bn
(∑
j∈N cUE,c
j bj
)2
⎛
⎜⎜⎜⎜⎜
⎝
−ζn
∑
j∈N
cUE,c
j bj
︸ ︷︷ ︸
ψn<0
+ cBS −
∑
i 	=n
(
1
bn
+ 1
bi
)
cUE,c
i bic
UE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
︸ ︷︷ ︸
θn<0
⎞
⎟⎟⎟⎟⎟
⎠
< 0 (42)
∂2UBS
∂
(
cUE,c
n
)2
= 2(N − 1)b2
n
(∑
j∈N cUE,c
j bj
)3
⎛
⎝−
∑
i 	=n
(
1
bn
+ 1
bi
)
cUE,c
i bi
(
1 − cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
)
+
∑
i 	=n
(
1
bn
+ 1
bi
) ∑
j 	=n,j∈N
cUE,c
j bj
(
1 − cUE,c
i bi
2(N − 1)
∑
j∈N cUE,c
j bj
)
− cBS
⎞
⎠
≤ 2(N − 1)b2
n
(∑
j∈N cUE,c
j bj
)3
⎛
⎜⎜⎜⎜⎜
⎝
−
∑
i 	=n
(
1
bn
+ 1
bi
)
cUE,c
i bi
(
1 − cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
)
− cBS
︸ ︷︷ ︸
<0
+ ζn
∑
j 	=n,j∈N
cUE,c
j bj
︸ ︷︷ ︸
<0
⎞
⎟⎟⎟⎟⎟
⎠
< 0 (51)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ZUO et al.: BLOCKCHAIN STORAGE AND COMPUTATION OFFLOADING FOR COOPERATIVE MOBILE-EDGE COMPUTING 9097
focus on θn. When N = 2, with some manipulations, we can
obtain θn < 0. Since cBS < cUE,c
n , we obtain
θn < cBS
(
1 − cUE,c
n bn
(
1 + bi
bn
)
(N − 1)2
∑
j∈N cUE,c
j bj
)
. (52)
We mainly prove the following:
cUE,c
n bn
(
1 + bi
bn
)
(N − 1)2 −
∑
j∈N
cUE,c
j bj > 0. (53)
Then, we calculate the summation of this inequality (53) for
all users as follows:
∑
n∈N
cUE,c
n bn
((
1 + bi
bn
)
(N − 1)2 − N
)
> 0. (54)
The inequality (54) is obviously true when N > 2, that is, (53)
holds and θ < 0 in (42). According to the above analysis, we
can prove [(∂UBS)/(∂cUE,c
n )] < 0 when ηn > 0.
Then, we derive the second-order derivative of (41) w.r.t.
cUE,c
n as shown in (51), at the bottom of the previous page.
Since q∗
n > 0, we have
1 − cUE,c
n bn
N − 1
∑
j∈N cUE,c
j bj
> 0. (55)
After operations on (51), we can achieve
[(∂2UBS)/(∂(cUE,c
n )
2
)] < 0 when ηn ≤ 0. Therefore,
we prove Theorem 3.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” White
Paper, May 2008.
[2] H.-N. Dai, Z. Zheng, and Y. Zhang, “Blockchain for Internet of Things:
A survey,” IEEE Internet Things J., vol. 6, no. 5, pp. 8076–8094,
Oct. 2019.
[3] H. Baniata and A. Kertesz, “A survey on blockchain-fog integration
approaches,” IEEE Access, vol. 8, pp. 102657–102668, 2020.
[4] A. Taghizadeh, H. Kebriaei, and D. Niyato, “Mean field game for equi-
librium analysis of mining computational power in blockchains,” IEEE
Internet Things J., vol. 7, no. 8, pp. 7625–7635, Aug. 2020.
[5] S. R. Pokhrel and J. Choi, “Federated learning with blockchain for
autonomous vehicles: Analysis and design challenges,” IEEE Trans.
Commun., vol. 68, no. 8, pp. 4734–4746, Aug. 2020.
[6] M. Dai, S. Zhang, H. Wang, and S. Jin, “A low storage room requirement
framework for distributed ledger in blockchain,” IEEE Access, vol. 6,
pp. 22970–22975, 2018.
[7] P. K. Sharma, N. Kumar, and J. H. Park, “Blockchain-based distributed
framework for automotive industry in a smart city,” IEEE Trans. Ind.
Informat., vol. 15, no. 7, pp. 4197–4205, Jul. 2019.
[8] W. Viriyasitavat, L. D. Xu, Z. Bi, and D. Hoonsopon, “Blockchain
technology for applications in Internet of Things-mapping from
system design perspective,” IEEE Internet Things J., vol. 6, no. 5,
pp. 8155–8168, Oct. 2019.
[9] A. Yazdinejad, R. M. Parizi, A. Dehghantanha, Q. Zhang, and
K. R. Choo, “An energy-efficient SDN controller architecture for
IoT networks with blockchain-based security,” IEEE Trans. Services
Comput., vol. 13, no. 4, pp. 625–638, Jul. 2020.
[10] S. Jangirala, A. K. Das, and A. V. Vasilakos, “Designing secure
lightweight blockchain-enabled RFID-based authentication protocol for
supply chains in 5G mobile edge computing environment,” IEEE Trans.
Ind. Informat., vol. 16, no. 11, pp. 7081–7093, Nov. 2020.
[11] C. Liu, M. Bennis, M. Debbah, and H. V. Poor, “Dynamic task offloading
and resource allocation for ultra-reliable low-latency edge computing,”
IEEE Trans. Commun., vol. 67, no. 6, pp. 4132–4150, Jun. 2019.
[12] E. El Haber, T. M. Nguyen, and C. Assi, “Joint optimization of com-
putational cost and devices energy for task offloading in multi-tier
edge-clouds,” IEEE Trans. Commun., vol. 67, no. 5, pp. 3407–3421,
May 2019.
[13] X. Chen, H. Zhang, C. Wu, S. Mao, Y. Ji, and M. Bennis, “Optimized
computation offloading performance in virtual edge computing systems
via deep reinforcement learning,” IEEE Internet Things J., vol. 6, no. 3,
pp. 4005–4018, Jun. 2019.
[14] X. Chen et al., “Multi-tenant cross-slice resource orchestration: A deep
reinforcement learning approach,” IEEE J. Sel. Areas Commun., vol. 37,
no. 10, pp. 2377–2392, Oct. 2019.
[15] Y. Wei, M. Xiao, N. Yang, and S. Leng, “Block mining or service provid-
ing: A profit optimizing game of the PoW-based miners,” IEEE Access,
vol. 8, pp. 134800–134816, 2020.
[16] Y. Zuo, S. Jin, and S. Zhang, “Computation offloading in the untrusted
MEC-aided mobile blockchain IoT system,” Nov. 2019. [Online].
Available: arXiv:1911.08255.
[17] A. Asheralieva and D. Niyato, “Distributed dynamic resource manage-
ment and pricing in the IoT systems with blockchain-as-a-service and
UAV-enabled mobile edge computing,” IEEE Internet Things J., vol. 7,
no. 3, pp. 1974–1993, Mar. 2020.
[18] K. Gai, Y. Wu, L. Zhu, L. Xu, and Y. Zhang, “Permissioned
blockchain and edge computing empowered privacy-preserving smart
grid networks,” IEEE Internet Things J, vol. 6, no. 5, pp. 7992–8004,
Oct. 2019.
[19] R. Sekaran, R. Patan, A. Raveendran, F. Al-Turjman, M. Ramachandran,
and L. Mostarda, “Survival study on blockchain based 6G-enabled
mobile edge computation for IoT automation,” IEEE Access, vol. 8,
pp. 143453–143463, 2020.
[20] Z. Zhao et al., “A novel framework of three-hierarchical offloading
optimization for MEC in industrial IoT networks,” IEEE Trans. Ind.
Informat., vol. 16, no. 8, pp. 5424–5434, Aug. 2020.
[21] B. Yang, X. Cao, C. Yuen, and L. Qian, “Offloading optimization in
edge computing for deep learning enabled target tracking by Internet-
of-UAVs,” IEEE Internet Things J., early access, Aug. 14, 2020, doi:
10.1109/JIOT.2020.3016694.
[22] K. Xiong, S. Leng, C. Huang, C. Yuen, and Y. L. Guan,
“Intelligent task offloading for heterogeneous V2X communications,”
IEEE Trans. Intell. Transp. Syst., early access, Aug. 31, 2020, doi:
10.1109/TITS.2020.3015210.
[23] M. B. Mollah et al., “Blockchain for the Internet of Vehicles towards
intelligent transportation systems: A survey,” IEEE Internet Things J.,
early access.
[24] N. U. Hassan, C. Yuen, and D. Niyato, “Blockchain technologies for
smart energy systems: Fundamentals, challenges, and solutions,” IEEE
Ind. Electron. Mag., vol. 13, no. 4, pp. 106–118, Dec. 2019.
[25] Z. Chang, W. Guo, X. Guo, Z. Zhou, and T. Ristaniemi, “Incentive
mechanism for edge-computing-based blockchain,” IEEE Trans. Ind.
Informat., vol. 16, no. 11, pp. 7105–7114, Nov. 2020.
[26] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han,
“Cloud/fog computing resource management and pricing for blockchain
networks,” IEEE Internet Things J., vol. 6, no. 3, pp. 4585–4600,
Jun. 2019.
[27] Y. Jiao, P. Wang, D. Niyato, and K. Suankaewmanee, “Auction
mechanisms in cloud/fog computing resource allocation for public
blockchain networks,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 9,
pp. 1975–1989, Sep. 2019.
[28] S. Jiang, X. Li, and J. Wu, “Hierarchical edge-cloud computing for
mobile blockchain mining game,” in Proc. IEEE 39th Int. Conf. Distrib.
Comput. Syst. (ICDCS), Dallas, TX, USA, Jul. 2019, pp. 1327–1336.
[29] N. Zhao, H. Wu, and Y. Chen, “Coalition game-based computation
resource allocation for wireless blockchain networks,” IEEE Internet
Things J., vol. 6, no. 5, pp. 8507–8518, Oct. 2019.
[30] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne, “Privacy-
preserved task offloading in mobile blockchain with deep reinforce-
ment learning,” IEEE Trans. Netw. Service Manag., vol. 17, no. 4,
pp. 2536–2549, Dec. 2020.
[31] J. Feng, F. R. Yu, Q. Pei, X. Chu, J. Du, and L. Zhu, “Cooperative
computation offloading and resource allocation for blockchain-enabled
mobile-edge computing: A deep reinforcement learning approach,” IEEE
Internet Things J., vol. 7, no. 7, pp. 6214–6228, Jul. 2020.
[32] M. Liu, F. R. Yu, Y. Teng, V. C. M. Leung, and M. Song, “Computation
offloading and content caching in wireless blockchain networks with
mobile edge computing,” IEEE Trans. Veh. Technol., vol. 67, no. 11,
pp. 11008–11021, Nov. 2018.
[33] E. Katranaras, M. A. Imran, M. Dianati, and R. Tafazolli, “Green
inter-cluster interference management in uplink of multi-cell pro-
cessing systems,” IEEE Trans. Wireless Commun., vol. 13, no. 12,
pp. 6580–6592, Dec. 2014.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/JIOT.2020.3016694
http://dx.doi.org/10.1109/TITS.2020.3015210
9098 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 11, JUNE 1, 2021
[34] X. Liu, W. Wang, D. Niyato, N. Zhao, and P. Wang, “Evolutionary
game for mining pool selection in blockchain networks,” IEEE Wireless
Commun. Lett., vol. 7, no. 5, pp. 760–763, Oct. 2018.
[35] D. Gesbert, S. Hanly, H. Huang, S. S. Shitz, O. Simeone, and W. Yu,
“Multi-cell MIMO cooperative networks: A new look at interference,”
IEEE J. Sel. Areas Commun., vol. 28, no. 9, pp. 1380–1408, Dec. 2010.
[36] X. Li, S. Jin, X. Gao, and M. R. McKay, “Capacity bounds and low com-
plexity transceiver design for double-scattering MIMO multiple access
channels,” IEEE Trans. Signal Process., vol. 58, no. 5, pp. 2809–2822,
May 2010.
[37] N. Houy, “The bitcoin mining game,” Ledger J., vol. 1, no. 13,
pp. 53–68, 2016.
[38] E. S. Robla, “Analysis of reward strategy and transaction selection in
bitcoin block generation,” Ph.D. dissertation, Dept. Elect. Eng., Univ.
Washington, Washington, DC, USA, 2015.
[39] Z. Han, D. Niyato, W. Saad, T. Başar, and A. Hjørungnes, Game
Theory in Wireless and Communication Networks: Theory, Models, and
Applications. Cambridge, U.K.: Cambridge Univ. Press, 2012.
[40] S. Boyd and L. Vandenberghe, Convex Optimization. Cambridge, U.K.:
Cambridge Univ. Press, 2004.
[41] W. Wen, Y. Fu, T. Q. S. Quek, F. Zheng, and S. Jin, “Joint
uplink/downlink sub-channel, bit and time allocation for multi-access
edge computing,” IEEE Wireless Commun. Lett., vol. 23, no. 10,
pp. 1811–1815, Oct. 2019.
[42] K. Hosseini, W. Yu, and R. S. Adve, “Large-scale MIMO versus network
MIMO for multicell interference mitigation,” IEEE J. Sel. Topics Signal
Process., vol. 8, no. 5, pp. 930–941, Oct. 2014.
[43] S. Jacobsson, G. Durisi, M. Coldrey, U. Gustavsson, and C. Studer,
“Throughput analysis of massive MIMO uplink with low-resolution
ADCs,” IEEE Trans. Wireless Commun., vol. 16, no. 6, pp. 4038–4051,
Jun. 2017.
[44] A. K. Gupta and D. K. Nagar, Matrix Variate Distributions, vol. 104.
Hoboken, NJ, USA: CRC Press, 2018.
Yiping Zuo received the B.S. degree in electronic
information science and technology from Huaiyin
Normal University, Huaian, China, in 2015, and
the M.S. degree in communication and information
systems from Nanjing University of Posts and
Telecommunications, Nanjing, China, in 2018. She
is currently pursuing the Ph.D. degree in information
and communications engineering with Southeast
University, Nanjing.
Her current research interests include blockchain,
mobile-edge computing, and next-generation cellular
networks.
Shi Jin (Senior Member, IEEE) received the B.S.
degree in communications engineering from Guilin
University of Electronic Technology, Guilin, China,
in 1996, the M.S. degree from Nanjing University of
Posts and Telecommunications, Nanjing, China, in
2003, and the Ph.D. degree in information and com-
munications engineering from Southeast University,
Nanjing, in 2007.
From June 2007 to October 2009, he was a
Research Fellow with the Adastral Park Research
Campus, University College London, London, U.K.
He is currently with the faculty of the National Mobile Communications
Research Laboratory, Southeast University. His research interests include
space–time wireless communications, random matrix theory, and information
theory.
Dr. Jin and his coauthors have been awarded the 2011 IEEE
Communications Society Stephen O. Rice Prize Paper Award in the field
of communication theory and the 2010 Young Author Best Paper Award
by the IEEE Signal Processing Society. He served as an Associate Editor
for the IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, IEEE
COMMUNICATIONS LETTERS, and IET COMMUNICATIONS.
Shengli Zhang (Senior Member, IEEE) received
the B.Eng. degree in electronic engineering and the
M.Eng. degree in communication and information
engineering from the University of Science and
Technology of China, Hefei, China, in 2002 and
2005, respectively, and the Ph.D. degree from the
Department of Information Engineering, Chinese
University of Hong Kong, Hong Kong, in 2008.
He joined the Communication Engineering
Department, Shenzhen University, Shenzhen, China,
where he is currently a Full Professor. From March
2014 to March 2015, he was a Visiting Associate Professor with Stanford
University, Stanford, CA, USA. He is also the pioneer of Physical-Layer
Network Coding. He has published more than 20 IEEE top journal articles and
ACM top conference papers, including the IEEE JOURNAL ON SELECTED
AREAS IN COMMUNICATIONS, the IEEE TRANSACTIONS ON WIRELESS
COMMUNICATIONS, the IEEE TRANSACTIONS ON MOBILE COMPUTING,
the IEEE TRANSACTIONS ON COMMUNICATIONS, and the ACM Mobicom.
His research interests include physical-layer network coding, interference can-
celation, cooperative wireless networks, and blockchain.
Prof. Zhang has severed as an Editor for the IEEE TRANSACTIONS
ON VEHICULAR TECHNOLOGY, the IEEE WIRELESS COMMUNICATIONS
LETTERS, and IET Communications. He has also severed as a TPC member
in several IEEE conferences.
Yan Zhang (Fellow, IEEE) received the B.S.
degree from Nanjing University of Post and
Telecommunications, Nanjing, China, in 1997, the
M.S. degree from Beihang University, Beijing,
China, in 2000, and the Ph.D. degree from the
School of Electrical and Electronics Engineering,
Nanyang Technological University, Singapore, in
2004.
He is currently a Full Professor with the
Department of Informatics, University of Oslo,
Oslo, Norway. His research interests include next-
generation wireless networks leading to 5G beyond/6G, green and secure
cyber–physical systems, such as smart grid and transport.
Prof. Zhang has been a recipient of the global “Highly Cited
Researcher” Award (Web of Science top 1% most cited worldwide)
since 2018. He is an Editor (or an Area Editor, a Senior Editor,
and an Associate Editor) for several IEEE transactions/magazine, includ-
ing IEEE Network Magazine, IEEE TRANSACTIONS ON NETWORK
SCIENCE AND ENGINEERING, IEEE TRANSACTIONS ON VEHICULAR
TECHNOLOGY, IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS,
IEEE TRANSACTIONS ON GREEN COMMUNICATIONS AND NETWORKING,
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, IEEE INTERNET OF
THINGS JOURNAL, IEEE SYSTEMS JOURNAL, IEEE Vehicular Technology
Magazine, and IEEE BLOCKCHAIN TECHNICAL BRIEFS. He is a
Symposium/Track Chair in a number of conferences, including IEEE
ICC 2021, IEEE SmartGridComm 2021, and IEEE Globecom 2017. He
is the Chair of IEEE Communications Society Technical Committee on
Green Communications and Computing. He is an IEEE Communications
Society Distinguished Lecturer and the IEEE Vehicular Technology Society
Distinguished Speaker. He was an IEEE Vehicular Technology Society
Distinguished Lecturer from 2016 to 2020. He is a CCF Senior Member and
an Elected Member of CCF Technical Committee of Blockchain and 2019
CCF Distinguished Speaker. He is Fellow of IET and an Elected Member of
Academia Europaea, the Royal Norwegian Society of Sciences and Letters,
and the Norwegian Academy of Technological Sciences.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:37:20 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice