An Architecture for Game to Game Data Transfer Using Blockchain
An Architecture for Game to Game Data 
Transfer Using Blockchain 
Chanon Yaklai 
Department of Computer Engineering 
Faculty of Engineering 
Chulalongkorn University 
Bangkok, Thailand 
chanon.y@student.chula.ac.th 
Vishnu Kotrajaras 
Department of Computer Engineering 
Faculty of Engineering 
Chulalongkorn University 
Bangkok, Thailand 
vishnu@cp. eng. chula.ac .th 
Abstract—Blockchain has been used in several 
industries, especially in the financial area. In the game 
industry, blockchain has not been utilized much even 
with a large number of users who deserve to own their 
game data. There were attempts to allow players to own 
their in-game objects or data. But they were mostly 
crowdfunding platforms which were not yet in 
operation. In addition, users were required to use their 
ecosystem. In this paper, we propose a generic game 
architecture, using blockchain, that allows players to 
own their "spent time" in a game. The value of this 
spent time can be passed on to new games as ERC20 
token on the Ethereum network and redeemed in such 
games. Our architecture can be used with any public 
blockchain. It can benefit many roles such as player, 
blockchain node, and game developer. Our experiment 
shows that the proposed architecture can be accepted by 
players, but other factors such as the type of gameplay 
and how the spent time is exchanged in a game can 
greatly affect the player acceptance. 
Keywords-blockchain component; game architecture; 
smart contract; transaction queue; 
I. INTRODUCTION 
In traditional online game architecture, users do 
not own their game data. If a game provider closes its 
service, users lose all their data. Hence, they lose all 
their time and effort. 
With smart contract, blockchain can be used to 
implement a game logic server and game database, 
thus providing players with game data that they 
actually own. 
In this paper, we propose an architecture that 
allows users to have their own game data stored on 
blockchain. Such data can be straightforwardly 
transferred to a new game once users decide to leave. 
A generic form of data that can be transferred between 
games are presented as "EXPTOKEN", coins that 
users earn while spending time in a game, which can 
be exchanged for game items and other game benefits. 
The architecture is designed to be hassle-free for 
users. It is also easy to integrate with existing game 
architecture. 
Benefits in a game, gained from users' effort in 
any other games, are new. It can be a new model for 
game ecosystem. This paper also presents a user study 
of this model. 
II. RELATED WORK 
Min, Wang, Guo and Chei [1] reviewed games 
created especially for blockchain. They categorized 
these games based on rule transparency, asset 
ownership, asset reusability, and user generated 
content. However, integration between traditional 
game architecture and blockchain was not explored. 
Transferring users' items or objects amongst different 
games was not discussed either. 
For our research, we presented a generic 
framework that supported games created for 
blockchain, as well as games created using traditional 
game architecture. Our framework allowed a smooth 
transfer of users' items or objects between such 
games. 
Besancon, Da Silva and Ghodous [2] proposed a 
generic blockchain game architecture. The 
architecture structured game assets and location by 
using decentralized storage such as a distributed 
database or IPFS. Their work focused on how to apply 
decentralized storage to store game data and transfer 
such data within a game. There was no mention of full 
game-server integration, roles and other components 
needed for game to game data transfer. 
Our architecture did not emphasize using 
decentralized storage. Game assets were stored on 
clients. However, the architecture was generic enough 
to be used with traditional game server, or with 
blockchain alone. Its role-oriented design made it easy 
to identify benefits for players, blockchain nodes, and 
developers. 
Hoard.exchange [3] provided crowdfunding for 
game developers, a secondary market for trading, and 
virtual items like ERC721. It, however, did not 
provide a generic framework for game development 
and did not provide any guideline for integrating the 
9 7 8 - 1 - 7 2 8 1 - 6 1 6 7 - 9 / 2 0 / $ 3 1 . 0 0 © 2 0 2 0 I E E E 
- 75 -
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:24:32 UTC from IEEE Xplore.  Restrictions apply. 
framework with traditional games. Every game must 
be under their ecosystem. Only game engines capable 
of running Hoard.exchange library were able to 
connect to the blockchain of Hoard Platform. 
Our architecture, on the contrary, utilized a 
framework wrapper. A game developed using our 
architecture did not need to include library for 
blockchain connection. Our architecture was 
implemented on Ethereum Layer 1, while Hoard used 
Sidechain. 
III . GAME ARCHITECTURE 
The architecture proposed in this paper (see Fig. 1) 
could be integrated with traditional game-servers 
(called Mixed architecture). However, games could 
also be developed without relying on a traditional 
structure (called DApp architecture). 
Database ^ 
Q_Game S e r v e i J 
f 
Game Client 
Traditional 
Framework Wrapper Mixed 
1 = — = 1 ^ Blockchain ! 
[ ^ G a m e Server^j 
( Game Client ] 
> Blockchain 
DApp Framework Wrapper 
^ y Rlockchain ! 
DApp 
[ Game Client ] 
^ B l o c k c h a i n 
1) Player component 
A player component acted as a communication 
channel between a game client and blockchain. Before 
entering a game, a player had to start a game client in 
his/her device or access the game through the web 
browser. If the player wanted to use blockchain to 
store game data (in our model, we stored them as 
EXPTOKEN), he/she needed to register by his/her 
private key and also give his/her public wallet. The 
information would be stored in the player component. 
2) Blockchain node component 
A blockchain node component was an Ethereum 
client node used to verify transactions from clients, act 
as a committee to approve new games, prevent fraud, 
prevent oversaturated EXPTOKEN and maintain 
game standard. 
3) Game developer component 
A game developer component represented any game 
developer who integrated our architecture into their 
development pipeline. It was, in fact, a smart contract 
that the game developers put on blockchain. This 
component benefited from other players who wanted 
to exchange EXPTOKEN for in-game items, levels, or 
items from potential future games under ERC721 
standard. 
Fig. 1. Game Architecture Integration. 
A framework wrapper was used as a medium of 
communication between a game client and other parts 
of the system, including blockchain. 
For example, an html5 game client (any game 
engine capable of building html5 could be used) could 
be connected to the framework wrapper. For console 
or mobile games, the framework wrapper could be put 
in the OS layer. This allowed game developers to 
completely isolate game logic from smart contract. A 
game client in this architecture would not be 
unnecessarily large because it did not need to deal 
with blockchain by itself. 
IV. BLOCKCHAIN COMPONENTS 
The blockchain part of our architecture was 
defined to contain three main components. They were 
player component, blockchain node component, and 
game developer component (shown in Fig. 2). Each 
component interacted with another through smart 
contract located in the blockchain ecosystem. 
Fig. 2. Blockchain Components. 
Fig. 3. Process for player entering and exiting blockchain 
ecosystem. 
Fig. 3 (left) shows how a player component 
operated and how it communicated with a blockchain 
node component when a new player (an entering 
player) was about to play a game. The player who 
wanted to play the game must purchase currency in 
order to pay for Gas (in our example, ETH). The 
player could buy from a blockchain node component 
or from another player already in the ecosystem. 
Buying from a blockchain node component only 
resulted in ETH (the buyer used fiat currency). When 
buying from another player, the buyer could purchase 
with anything the seller considered acceptable. The 
buyer would then receive ETH and/or EXPTOKEN 
from the seller (The seller was regarded as a player 
who was about to leave the game, or an exiting 
player). 
Fig. 3 (right) shows what happened when a player 
wanted to leave the ecosystem (becoming an exiting 
player), he/she could do so any time by exchanging 
his/her ETH for some fiat currency from a blockchain 
- 76 -
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:24:32 UTC from IEEE Xplore.  Restrictions apply. 
node component. A player could also leave the 
ecosystem by exchanging his/her ETH and/or 
EXPTOKEN with anything he/she considered 
acceptable from an entering player. 
Fig. 4. Player component's interaction with game developer 
component while playing game and exchanging items. 
Fig. 4 (left) illustrates how a player component 
interacted with a game developer component when a 
player played a game. Every time a player played a 
game, he/she must pay ETH for transaction 
verification. The player received EXPTOKEN in 
return. 
Fig. 4 (right) shows an interaction between a 
player component and a game developer component 
when a player wanted to exchange his/her 
EXPTOKEN with in-game items. A player could use 
EXPTOKEN obtained from any game to redeem 
game items. Items could be non-fungible tokens 
(ERC721). 
Fig. 5. Game developer component exchanging EXPTOKEN 
for ETH or fiat currency with blockchain node component. 
Fig. 5 demonstrates how a game developer 
component communicated with a blockchain node 
component when exchanging EXPTOKEN. Initially, a 
blockchain node component acted as a referee, 
selecting games that requested to join the ecosystem. 
A game developer component could initiate its 
EXPTOKEN exchange for ETH (Fig. 5 (left)) or fiat 
currency (Fig. 5 (right)). The exchange rates of 
EXPTOKEN/ETH and EXPTOKEN/FIAT were not 
in the scope of our work. How much a blockchain 
node component pays a game developer component 
depended on assets and the amount of ETH in the 
system. The rates might have to be authorized by a 
committee formed from blockchain nodes. 
V. BLOCKCHAIN TRANSACTION QUEUEING 
A transaction could take place only when the 
framework wrapper had a player's private key (and 
public wallet address). In our architecture, a player's 
private key and public wallet address were injected 
within the framework wrapper (in the player 
component) so that the framework wrapper could 
sign a transaction and send it to the blockchain. 
Fig. 6. Blockchain Transaction Queueing Process. 
Fig. 6 illustrates how our framework wrapper 
communicated with blockchain nodes. For each game 
client, the framework wrapper contained an array that 
stored events taking place at the client. The events are 
PlayerTimes (amount of time the player spent in the 
game), HighScore (the player's highest score), and 
NewItem (a new item the player found in the game). 
When a client sent an event to the framework 
wrapper, the framework wrapper would queue that 
event in the array. After blockchain confirmed a 
finished transaction through its callback event, the 
next event from the array would then be hashed and 
sent to blockchain (the first event did not need to wait 
for this confirmation). 
This event management prevented sending 
duplicated transactions (duplication nonce). 
Transactions could be processed in the background. 
Therefore, players were able to continue playing a 
game without waiting for confirmation. 
However, players might need to wait when the 
game ended if the array was still not empty. Any new 
status, such as obtaining new high score or new item 
at the end of the game, might be lost if the players did 
not wait. Therefore, the game system should prompt 
players to wait until all events are cleared from the 
array. 
VI . EXPTOKEN AND ITEMS 
In this paper, players' data were their meaningful 
playtime. Each meaningful move (according to 
developers) in each game counted as an EXPTOKEN 
(ERC20). 
- 77 -
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:24:32 UTC from IEEE Xplore.  Restrictions apply. 
* K E * 1 E 4 <" 0 
£> i f t y | g t E f f i 
i V * > 4 & 
> J ' * E?1
 ' 
g > y > y 
>.{'*. * < C ® 
* ® ' - B > ( ' E 
Fig. 7. Games used in experiment. 
For instance, the experiment carried out for this 
paper had two games from Fig. 7. The first game was 
a match-three genre game. Each slide that a player 
could complete to break blocks counted as time well 
spent, and EXPTOKEN would be given. The other 
game was a side-scrolling flappy bird-like game, 
where player had to make a character avoid obstacles 
by touching the screen. In this game, EXPTOKEN 
were given according to how far a character could 
travel. 
From Fig. 6, playing time for these games would 
queue in the array and the array ran as an 
asynchronous process while players were playing the 
game. 
Players were able to exchange their EXPTOKEN 
earned from one game with an item in the other game. 
We used a smart contract to convert EXPTOKEN for 
users and notified them later. 
Our assumption was that players who knew that 
their spent time could be redeemed in a new game 
would spend more time playing both games than 
players who could not redeem their spent time. 
In our experiment, exchange rates for 
EXPTOKEN and items were decided by us because 
most of our testers did not have background 
knowledge regarding blockchain. However, if our 
proposed architecture is to be adopted for real 
ecosystem in the future, players can rely on 
blockchain node components to review whether the 
exchange rate proposed by a game developer is fair. 
Our implementation for this experiment utilized 
the Mixed architecture using Unity Tiny [4] (0.13.2-
preview) to build an html5 game client. 
Authentication on game server used users' private key 
and public wallet. Player playtimes, top score, and 
items were stored on Thaichain [5], a public 
blockchain by go chain. The same code base can be 
used on any Ethereum Testnet. A game client was 
wrapped with JavaScript framework called React [6]. 
Within the wrapper, we used ethers.js [7] library to 
communicate with blockchain. Communication with a 
game client was done via post message method, a 
standard in any web browser on mobile or desktop. 
VIII. RESULT AND ANALYSIS 
There are many public blockchains with very 
small transaction mining time. Therefore, in our 
experiment, we did not take the mining time into 
account. We only considered the time players actually 
spent playing games. 
VII . EXPERIMENT 
In this paper, we designed an experiment to find out 
how well our architecture was received by users. The 
experiment involved 120 players and was carried out 
for 14 days. In the first seven days we let the players 
play a game, and in the last seven days we let the 
players play another game. We divided players into 
four groups (30 players per group). 
For the first group of players (G1), we let them 
know since the beginning of the experiment that we 
used blockchain technology, and if players spent time 
in the first game (the first seven days), they could 
convert their EXPTOKEN to an item or level boost up 
in the second game. The first game was the flappy 
bird-like game and the second game was the match-
three game. 
For the second group (G2), we did not let players 
know about EXPTOKEN at all. The order of the game 
was the same as that of the first group. 
The third group (G3) was informed in the same 
way as the first group. However, the first game was 
the match-three game and the second game was the 
flappy bird-like game. 
For the fourth group (G4), we did not let players 
know about EXPTOKEN at all. The order of the game 
was the same as that of the third group. 
Player Playtimes 
3500 
3000 M 
\ li li H ll 
G1 G2 G3 G4 
• 1st Week • 2nd Week 
Fig. 8. Result from experiment. 
Fig. 8 demonstrates our result. For each group (G1 
to G4), the average time spent to play the first game 
(in seconds) was shown by the left bar. The average 
time spent to play the second game was shown by the 
right bar. 
For group G3 and G4, players in G3, who knew 
about EXPTOKEN, spent more time in both games 
than players in G4. This was in line with our 
assumption. Players spent more time in the first game 
in order to collect EXPTOKEN. Players spent more 
time in the second game because EXPTOKEN from 
the first game allowed them to exchange for a 
permanent boost up in the second game that helped 
them progress further than they could normally do, 
resulting in them continued playing. 
- 78 -
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:24:32 UTC from IEEE Xplore.  Restrictions apply. 
However, players in G1 and G2 spent almost the 
same amount of time in the same game, for both 
games. This contradicted our assumption. Looking at 
the experiment detail, we discovered that due to the 
first game being a flappy bird-like game, the players 
might not be motivated enough (even with 
EXPTOKEN) to come back to the game after the 
game was over because they had to restart the game 
from the beginning. Additional interviews with the 
players revealed that the reason for not spending time 
in the second game (the match-three game) was 
because items gained from exchanging EXPTOKEN 
could be used to obtain high score very easily. Once 
the high score was obtained, there was not any 
challenge left for the players. Furthermore, collecting 
the same number of in-game items to achieve any 
higher score was too difficult. 
We did an additional experiment to find out if 
limiting the number of items that could be redeemed 
by EXPTOKEN would helped reduce this problem. 
We set up a new experimental group just like G1, 
except that we had this item limit. 
The result turned out to be similar to the result 
from G1. Even though players' high scores became 
lower, the scores obtained by exchanging 
EXPTOKEN for items were still better than the scores 
players could achieve by re-playing the game. 
Therefore, players still lost interest. 
The reason the result from G3 followed our 
assumption was likely because the item that could be 
exchanged by EXPTOKEN in the second game was a 
permanent boost up. Even though players might 
game-over after receiving the item, he/she could 
replay the game and get a better score because of the 
permanent boost up. Thus, players were motivated to 
get back into the game. In contrast, the second game 
from G1 did not have a permanent boost up (due to 
the nature of the game), so once players got high 
scores by the item exchanged with EXPTOKEN, they 
were unable to replay the game to get a better score. 
This made them quit the game. 
IX . CONCLUSION AND FUTURE WORK 
Our experiment shows that the proposed 
architecture has potential to be accepted by players. 
However, the type of gameplay, items obtainable from 
EXPTOKEN, and even the sequence of games may 
also play a significant role in player behavior. More 
experiments are needed in order to get a more 
definitive result. 
The length of games may affect players' 
motivation. Players who play long games, that require 
months or years of playtime, may not regard 
blockchain reward as relevant to their experience at 
all. Other issues, such as EXPTOKEN exchange rates 
or how comfortable it is for users to create and 
maintain their public/private keys, manage a wallet, 
convert fiat money to crypto-currency, pay gas for 
transactions, and connect to blockchain while playing, 
are also worth investigating. However, full evaluation 
cannot be done unless there are more games and a 
complete ecosystem becomes available. 
In our experiment, players who finished the game 
needed to wait until all transactions were completed. 
We intend to fix this problem by storing all remaining 
events in web browser's local storage. Any change 
that needs to be updated in blockchain when the game 
ends can then be stored and updated in the next game 
session. 
Regarding security issue, storing a player's Private 
Key in Framework Wrapper is not safe since it could 
be leaked. To prevent key leakage, blockchain nodes 
can form a committee to recommend trustworthy 
wallets, similar to how Ethereum.org recommends its 
wallets [8]. 
Another security issue is a user can cheat by 
sending falsified transaction to the smart contract. 
This problem can be prevented, to a degree, by 
making game clients sign the transaction with the 
user's public key and the developer's private key. 
Still, game clients can be hacked. Hence, the 
developer's private key rolling must be used to 
generate a new key regularly. 
The next step of our research is to find out the 
EXPTOKEN setup amongst games in different genres 
to facilitate further experiments without drawbacks 
from the type of gameplay and other factors. 
REFERENCES 
[1] T. Min, H. Wang, Y. Guo, and W. Cai, "Blockchain games: 
A survey," in 2019 IEEE Conference on Games (COG), 
August 2019. 
[2] L. Besanjon, C. F. D. Silva and P. Ghodous, "Towards 
Blockchain Interoperability: Improving Video Games Data 
Exchange," in 2019 IEEE International Conference on 
Blockchain and Cryptocurrency (ICBC), Seoul, Korea 
(South), 2019, pp. 81-85. 
[3] Hoard. "True Ownership. Whitepaper," 2019. [Online]. 
Available: https://hoard.exchange/files/hoard-whitepaper.pdf 
[Accessed: 22-Feb-2020]. 
[4] Unity3d. "Tiny Mode," 2018. [Online]. Available: 
https://docs. unity3d. com/Packages/com. unity. tiny@0.13/man 
ual/index.html [Accessed: 22-Feb-2020] 
[5] Thaichain. "Thailand Public Blockchain Network," 2019. 
[Online]. Available: https://thaichain.io [Accessed: 22-Feb-
2020] 
[6] React. "A JavaScript library for building user interfaces," 
2019. [Online]. Available: https://reactjs.org [Accessed: 22-
Feb-2020] 
[7] Ethers.js. "The ethers.js library is a compact and complete 
JavaScript library for Ethereum," 2019. [Online]. Available: 
https://docs. ethers. io/ethersjs/html/getting-started. html 
[Accessed: 22-Feb-2020] 
[8] Ethereum.org. "What is an Ethereum wallet, and which one 
should I use?," 2019. [Online]. Available: 
https://ethereum.org/wallets [Accessed: 22-Feb-2020] 
- 79 -
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:24:32 UTC from IEEE Xplore.  Restrictions apply.