Three-stage Stackelberg game based edge computing resource management for mobile blockchain
https://doi.org/10.1007/s12083-020-01032-y
Three-stage Stackelberg game based edge computing resource
management for mobile blockchain
Yuqi Fan1 · Zhifeng Jin1 ·Guangming Shen1 ·Donghui Hu1 · Lei Shi1 · Xiaohui Yuan2
Received: 29 July 2020 / Accepted: 12 November 2020
© Springer Science+Business Media, LLC, part of Springer Nature 2021
Abstract
Blockchain can provide a dependable environment for mobile applications. Mining, as an important component in
blockchain, requires a lot of computing resources, and hence resource limited moblie devices are unable to perform the
mining. Offloading mining computation tasks to an edge computing service provider (ESP) or a cloud computing service
provider (CSP) is considered as a feasible solution to mobile blockchain mining. However, the computing resources of the
ESP are not unlimited. Therefore, rational edge computing resource management is critical to maximizing the utilities of
the ESP and the miners. Most of the existing work assumes the computation is offloaded to either the CSP or the ESP
which serves the terminal devices. However, an ESP can also offload the computation to the other ESPs, when the ESP
is overloaded. In this paper, we construct a computation offloading model composed of multiple miners, multiple ESPs,
and a CSP, where an overloaded ESP can offload the mining tasks to the CSP or the other ESPs or both. We propose a
three-stage Stackelberg game for optimal pricing-based edge computing resource management. We analyze the existence
and uniqueness of Stackelberg game equilibrium and derive the optimal amount of computing resource requests from the
miners. We then propose a simple yet effective golden section based Stackelberg game equilibrium searching algorithm SES
for resource pricing. We conduct experiments through simulations. Experimental results show that the proposed computing
offloading model and algorithm can achieve high unit service utilities of both the ESPs and the terminal devices.
Keywords Edge computing · Mobile blockchain mining · Resource management · Stackelberg game
1 Introduction
In recent years, blockchain has been receiving extensive
attention from industry and academia. Blockchain has been
increasingly used in areas such as Bitcoin, financial ser-
vices, Internet of Things (IoT), smart grids power systems,
etc. The annual revenue of the enterprise applications of
blockchain is estimated to increase to approximately $19.9
billion by 2025 [1].
This article belongs to the Topical Collection: Special Issue on
Privacy-Preserving Computing
Guest Editors: Kaiping Xue, Zhe Liu, Haojin Zhu, Miao Pan and
David S.L. Wei
This work was partly supported by the National Natural Science
Foundation of China under Grant U1836102.
� Yuqi Fan
yuqi.fan@hfut.edu.cn
Extended author information available on the last page of the article.
Initially, blockchain was designed as a distributed shared
ledger, and the data in the blockchain network can be
saved and accessed by any node in the blockchain network.
Consensus is the core of the blockchain. In the blockchain
system, each node must make its ledger consistent
with the ledger of other nodes through the consensus.
The consensus algorithm guarantees the consistency and
correctness of each transaction on all the nodes and
enables the blockchain for efficient collaborative work on
a large scale without relying on a centralized third party.
Some consensus algorithms, such as Proof-of-Work (PoW),
require a large amount of computation. Users (miners) win
rewards through mining, where the users need to solve a
computationally challenging problem. The first miner who
successfully solves the computation problem and reaches an
agreement with other miners is considered as the winner of
the competition, and the winner will receive a reward for
successful mining.
Blockchain can provide a dependable environment
for mobile applications [2, 3]. However, the computing
resources required to solve the compute-intensive mining
/ Published online: 5 January 2021
Peer-to-Peer Networking and Applications (2021) 14:1431–1445
http://crossmark.crossref.org/dialog/?doi=10.1007/s12083-020-01032-y&domain=pdf
http://orcid.org/0000-0003-0270-6261
mailto: yuqi.fan@hfut.edu.cn
problem are prohibitively high for mobile devices [4]. Edge
computing is considered as a viable solution to blockchain
mining in mobile environments [5], where the terminal
devices offload the mining tasks to an edge computing
service provider (ESP). The ESPmakes profits by allocating
the computing resources for the mining tasks offloaded by
the terminal devices. Nevertheless, the computing resources
of the ESP are not unlimited and hence are competed by the
terminal devices. Therefore, careful resource management
is critical for the ESP and terminal devices to maximize their
utilities.
Most of the existing work assumes the computation is
offloaded to the CSP or the ESP which is serving the
terminal devices. However, an ESP can also offload the
computation to the other ESPs when the ESP is overloaded.
In this paper, we deal with the problem of resource
management of the ESPs for mobile blochain, assuming an
overloaded ESP can offload the mining tasks to the CSP or
the other ESPs or both. The main contributions of this paper
are as follows:
1) We construct a computation offloading model con-
sisting of a CSP, multiple ESPs, and multiple mobile
miners/end devices. When an ESP has no enough
capacity to process the service requests from the ter-
minal devices, the mining tasks of the terminal devices
can be offloaded to the CSP or the other ESPs or both.
2) We design the utility functions of the miners, ESPs
and CSP to capture the intrinsic relationship among
them. We formulate a three-stage Stackelberg game
for optimal pricing-based edge computing resource
management. In the first stage, the CSP decides the
resource price. In the second stage, each ESP decides
the resource price. In the third stage, the miners
determine the amount of resources to purchase. We
prove the existence and uniqueness of the Stackelberg
game equilibrium and derive the miners’ optimal
amount of computing resources to purchase. We then
propose an efficient golden section based Stackelberg
game equilibrium searching algorithm SES for resource
pricing.
3) We conduct simulations to evaluate the performance of
the proposed model and algorithm. Simulation results
demonstrate the proposed model and algorithm can
achieve high unit service utilities of the ESPs and the
terminal devices.
The rest of the paper is organized as follows. Section 2
introduces the related work. The system model is formu-
lated and analyzed in Section 3. Section 4 presents the
proposed golden section based Stackelberg game equilib-
rium searching algorithm. The simulations are given in
Section 5, and Section 6 concludes the paper.
2 Related work
Blockchain has the characteristics of security, reliability,
immutability, decentralization, etc., and it can provide a
reliable environment for IoT devices. For example, Roberto
et al. proposed an architecture based on blockchain and
edge computing to improve the quality of IoT data and
false data detection [6]. Chamarajnagar et al. designed
a decentralized architecture using blockchain technology,
in order to promote the distributed collaboration among
mobile IoT devices to share their services and redundant
computing resources [7]. In vehicle edge networks, Kang
et al. proposed a reputation-based data sharing scheme
which introduces consortium blockchain and smart contract
technology to implement secure data storage and prevent
data sharing without authorization [8]. Kim et al. proposed
an edge computing architecture based on blockchain
technology to ensure the availability, scalability, and
integrity of edge computing; blockchain structure and
protocols were modifified to support the execution of
complex programs [9].
Some research on resource management for mobile
blockchain mining has been conducted. Kroll et al. proposed
a game model consisting of miners for the mining process
of blockchain, and each miner made a decision on which
branch of the blockchain to mine on [10]. Sompolinsky
et al. proposed a cooperative game model to solve the
mining pool problem; in this model, the miners form
an alliance to finish the computing power accumulation
and share stable reward [11]. Houy organized the mining
process as a speed game between miners with different
computational powers, and analytically found the Nash
equilibrium in the two-player case [12]. Xiong et al.
adopted a two-stage Stackelberg game to jointly maximize
the profit of the ESP and the individual utilities of
different miners [13]. Zhang et al. proposed a joint
optimization framework of Fog nodes (FNs), data service
operators (DSOs), and data service subscribers (DSSs),
which implemented the optimal resource allocation scheme
in a distributed manner [14]. Chiu et al. formalized
the PoW protocol into a Cournot game in which users
compete to update the blockchain for rewards [15]. Luong
proposed an optimal auction based on deep learning for
the edge resource allocation, which used valuations of
the miners as the training data to adjust the parameters
of the neural networks [16]. Jiao et al. constructed an
auction-based market model which achieved an efficient
allocation of computing resources [17]. Liu et al. modeled
the joint optimization problem of mining task offloading
and block cryptographic hash cache, and proposed an
alternating direction multiplier method for the problem
[18]. Wu et al. proposed efficient distributed algorithms
for the mobile terminals to individually determine their
1432 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
optimal computational resources acquired from different
edge servers, so as to maximize the total net return of the
mobile terminals while maintaining the fairness between
mobile terminals [19]. Fan et al. constructed a computation
offloading model consisting of multiple miners, an ESP, and
a CSP, where the ESP and the CSP are independent of each
other; a Stackelberg game was formulated with the ESP
as the leader and the miners as the followers for optimal
pricing based edge computing resource management [20].
Most of the existing work assumes the computation is
offloaded to the CSP or the ESP which is serving the
terminal devices. However, an ESP can also offload the
computation to the other ESPs, when the ESP is overloaded.
In this paper, we study the cloud/edge computing resource
allocation and pricing problem for mobile blockchain under
the computing offloading framework consisting of a cloud,
multiple edge servers, and multiple users.
3 The systemmodel
Figure 1 illustrates the system model which is divided
into three layers. The bottom layer consists of multiple
miners, the middle layer includes multiple ESPs, and the top
layer is a CSP. Each terminal device conducts mining for
reward, and the resource-limited terminal devices offload
the mining tasks to the ESPs who make profits by providing
the computing resources to the miners. The CSP typically
has enough processing capacity to execute the mining tasks,
while the miners will experience an unpredictable Internet
communication latency with the CSP, which restricts the
performance of running the tasks at the CSP. The ESPs are
close to the miners so that the network latency between
the ESPs and the terminal devices is low. However, due
to the limited computing resources of ESPs, when an ESP
has no computing resources to accommodate all the service
requests, the ESP has three modes to offload the tasks. The
first is to offload the mining tasks to the other ESPs, the
second is to send the mining tasks to the CSP, and the third
Table 1 Symbols and notations
Attributes Description
B the set of miners/terminal devices
K the number of ESPs
en the n-th ESP
Mn the number of miners under ESP en
bn,i the i-th miner served by ESP en
qn,i the amount of services/computing resources pur-
chased miner bn,i
Qn,i the maximum amount of services/computing
resources that bn,i will purchase
w the unit service reward of miners
pc
n the unit service price of the CSP corresponding to
ESP en
pe
n the unit service price of ESP en
Cn the computing capacity of ESP en
Rc the transfer rate of between the ESP and the CSP
Re the transfer rate of between the miner and the ESP
f c the CSP’s computing power
f e
n the computing power of ESP en
τ the unit time cost of service provisioning
α the unit service provisioning cost of the ESPs
βn,i the weight of service response time for miner bn,i
δn indicating the fraction of excessive tasks at ESP en
to be offloaded to the other ESPs
θn indicating whether ESP en is overloaded (=1) or
not (=0)
μn the amount of computing resources sold to the
other ESPs by ESP en
En,i the utility of miner bn,i
En the utility of ESP en
Ec
n the utility of the cloud gained from ESP en
is to offload the mining tasks to both the other ESPs and the
CSP. When an ESP is not overloaded, the ESP can provide
its computing resources to the terminal devices or the other
ESPs. The symbols and notations used in the paper are listed
in Table 1.
Fig. 1 System model
1433Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
3.1 Analysis of the offloadingmode
An overloaded ESP has three modes to execute the tasks that
are beyond the computing capaicity of the ESP. One is to
send the mining tasks to the CSP (mode 0), and the second
is to offload the mining tasks to the other ESPs (mode 1),
and the third is to offload the mining tasks to the other ESPs
and the CSP (mode 2). We define the excessive tasks of ESP
en as
A =
∑Mn
i=1
qn,i − Cn (1)
3.1.1 Offloading to the CSP (mode 0)
In this mode, the overloaded ESP offloads the excessive
mining tasks to the CSP. The delay with mode 0 is
tc(A) = tcU (A)+tcE(A) =
∑Mn
i=1 qn,i −Cn
Rc
+ (
∑Mn
i=1 qn,i −Cn)γ (A)
f c
(2)
where tcU (A), tcE(A), and tc(A) are the transfer delay
between the ESP and the cloud, the execution time at the
cloud, and the total delay of offloading A to the cloud,
respectively; γ (A) is the unit workload of A.
3.1.2 Offloading to the other ESPs (mode 1)
In this mode, the overloaded ESP offloads the excessive
mining tasks to the other ESPs. The delay with mode 1 is
te(A) = max
n=1..K
ρn(t
e
U (A, n) + teE(A, n))
= max
n=1..K
ρn
(∑Mn
i=1 qn,i −Cn
Re
+ (
∑Mn
i=1 qn,i − Cn)γ (A)
f e
n
)
(3)
where teU (A, n), teE(A, n), and te(A) are the transfer delay
between the ESPs, the execution time at ESP en, and the
total delay of offloading A to the other ESPs, respectively;
ρn ∈ [0, 1](n ∈ {1, 2, . . . , K}) is the ratio of the tasks
offloaded to ESP en to A, and
∑K
n=1 ρn = 1.
3.1.3 Offloading to both the CSP and the other ESPs
(mode 2)
In this mode, the overloaded ESP offloads the excessive
mining tasks to the CSP and the other ESPs. The delay with
mode 2 is
t (A) = (1 − δn)t
c(A) + δnt
e(A) (4)
where tc(A) and te(A) are the transfer delay between
the ESP and the cloud, and the delay between the ESPs,
respectively.
3.2 Resource allocation and pricing of miners, ESPs
and CSP
ESP’s unit service price pe
n has an important impact on
the ESP’s utility. A higher pe
n leads to a higher ESP’s
utility for a given amount of services purchased by the
miners. A low pe
n will attract the miners to purchase a
large amount of computing resources. Note that service
provisioning also imposes cost on the ESP, where the cost
includes power, equipment loss, etc. As the total amount of
computing resources sold increases, the ESP’s cost will also
increase. If the total demand of computing resources from
the miners exceed the ESP’s computing capacity, the ESP
has to purchase computing resources from the CSP at price
pc
n or from another ESP ek at price pe
k(k �= n), which brings
computing resource purchase cost to the ESP. If pe
n < pc
n,
the ESP will experience a loss by providing computing
resources to the miners, and hence the ESP is not willing to
provide services to the terminal devices. Therefore, we set
pe
n ≤ pc
n.
The utility of ESP en, En, is defined as follows:
En = pe
n
∑Mn
i=1
qn,i + (1 − θn)μnp
e
n − α
∑Mn
i=1
qn,i
−θn
{
(1 − δn)[pc
nA + τ tc(A)]
+δn
[∑K
k=1
ρ(k)Ape
k + τ te(A)
]}
(5)
The objective of the ESP is to
maximize
En (6)
subject to:
0 ≤ pe
n ≤ pc
n (7)
The utility of miner bn,i is determined by ESP’s unit
service price pe
n and the amount of computing resources
purchased by the ESP. If the total number of service requests
exceeds the ESP’s computing capacity, the ESP needs to run
the offloading tasks at the cloud or the other ESPs, which
increases the latency of executing mining tasks and degrades
1434 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
the performance of task execution. The utility of miner bn,i ,
En,i , is defined as follows:
En,i = wqn,i − pe
nqn,i − βn,iq
2
n,i
Cn
(8)
The objective of each miner bn,i is to
maximize
En,i = wqn,i − pe
nqn,i − βn,iq
2
n,i
Cn
(9)
subject to:
0 ≤ qn,i ≤ Qn,i (10)
We regard the CSP as being composed of different small
parts, each of which plays a game with an ESP. The CSP’s
revenue comes from the computing resources purchased by
the ESPs. The CSP’s utility is defined as:
Ec
n = (1 − δn)
[
pc
n
(∑Mn
i=1
qn,i − Cn
)]
(11)
The objective of the CSP is to maximize Ec
n. During the
interaction between the ESP and the miners, the ESP acts
first to set unit service price pe
n, and then the miners respond
to the price by deciding the amount of computing resources
to purchase. Therefore, the interaction between the ESP and
the users can be formalized as a Stackelberg game with a
single leader and multiple followers, where the leader is the
ESP and each follower is a miner. During the interaction
between the ESP and the CSP, the CSP acts first to set unit
service price pc
n, and then the ESP responds to the price
based on whether it is overloaded and whether it offloads
the tasks to the CSP. Therefore, the interaction between the
ESP and the CSP can also be formalized as a Stackelberg
game, where the leader is CSP and each follower is
an ESP.
4 Resourcemanagement based on golden
section search
In this section, we first prove the existence and uniqueness
of equilibrium of the Stackelberg game between the ESP
and the miners, and between the ESP and the CSP, respec-
tively. We then derive the optimal amount of computing
resources to be purchased by the miners. We also propose
a Stackelberg game equilibrium search algorithm based on
the golden section search (SES) for resource pricing.
4.1 Analysis of the Stackelberg game
Lemma 1 There is a unique equilibrium in miner sub-
game.
Proof During miner sub-game, i.e. the third phase of the
Stackelberg game, each miner bn,i determines qn,i , the
amount of computing resources to purchase, with the goal
of maximizing the utility at given resource price pe
n. The
miner’s utility function defined in Eq. 8 is continuous,
and the second derivative of the function is calculated as
follows:
∂2En,i
∂q2
n,i
= −2βn,i
Cn
(12)
We can get ∂2En,i
∂q2n,i
≤ 0, since βn,i ≥ 0 and Cn > 0.
Therefore, miner’s utility En,i is a strict concave function of
variable qn,i , and there exists a unique equilibrium in miner
sub-game.
Lemma 2 At given computing resource price pe
n, the
optimal amount of computing resources purchased by miner
bn,i is calculated as
q∗
n,i = min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
(13)
Proof At a given pe
n, miner bn,i decides qn,i by making the
first derivative of Eq. 8 equal to 0 as Eq. 14.
∂En,i
∂qn,i
= w − pe
n − 2βn,i
Cn
qn,i = 0. (14)
Note that qn,i ≤ Qn,i . Therefore, the lemma is proven.
Theorem 1 The unique equilibrium exists in the Stackel-
berg game between the ESP and the miners.
Proof According to Lemma 1, there is a unique equilibrium
in the third phase of the Stackelberg game. Next, we
consider the second phase of the Stackelberg game during
which pe
n is determined by the ESP. We can recalculate ESP
utility En based on q∗
n,i obtained by Lemma 2 as Eq. 15.
1435Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
En = pe
n
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
+ (1 − θn)μnp
e
n
−α
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
−θn
⎧
⎨
⎩(1 − δn)
⎡
⎣pc
n
(∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
− Cn
)
+τ
⎛
⎝
∑Mn
i=0 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn
Rc
+
(∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn
)
γ (A)
f c
⎞
⎠
⎤
⎦
+δn
⎡
⎣
∑K
k=0
ρ(k)
(∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
− Cn
)
pe
k + τ max
k �=n
ρ(k)
⎛
⎝
∑Mn
i=0 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn
Re
+
(∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn
)
γ (A)
f e
n
⎞
⎠
⎤
⎦
⎫
⎬
⎭ (15)
Next we discuss different cases of whether the ESP is
overloaded.
(1) Case 1: θn = 0; that is, the ESP is not overloaded.
The utility of ESP en becomes:
En = pe
n
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
+μnp
e
n − α
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
(16)
The second derivative of the function is calculated via
Eq. 17.
∂2En
∂pe
n
2
=
∑Mn
i=1
{
0,
− Cn
βn,i
,
(w−2pe
n)Cn
2βn,i
≥ Qn,i
(w−2pe
n)Cn
2βn,i
< Qn,i
(17)
We can get δ2En
δP 2
n,e
≤ 0, sincew > 0, βn,i ≥ 0, andCn > 0.
(2) Case 2: θn = 1; that is, the ESP is overloaded.
In this case, the ESP has three modes to offload the
excessive tasks.
Mode 0: the ESP chooses to offload the excessive tasks
to the CSP. The utility of the ESP becomes:
En = pe
n
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
− α
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
−
{[
pc
n
(∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
− Cn
)
+τ
⎛
⎝
∑Mn
i=0 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn
Rc
+
(
∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn)γ (A)
f c
⎞
⎠
⎤
⎦
⎫
⎬
⎭
(18)
1436 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
The first derivative of the function is calculated via
Eq. 19.
∂En
∂pe
n
=
∑Mn
i=1
min
(
(w − 2pe
n)Cn
2βn,i
, Qn,i
)
−α
∑Mn
i=1
min
(
− Cn
2βn,i
, 0
)
−
[
pc
n
∑Mn
i=1
min
(
− Cn
2βn,i
, 0
)
+ τ
⎛
⎝
∑Mn
i=1 min
(
− Cn
2βn,i
, 0
)
Rc
+
(∑Mn
i=1 min
(
− Cn
2βn,i
, 0
))
γ (A)
f c
⎞
⎠
⎤
⎦
(19)
The second derivative of the function is calculated via
Eq. 20.
∂2En
∂pe
n
2
=
∑Mn
i=1
⎧
⎨
⎩
0,
− Cn
βn,i
,
(w − 2pe
n)Cn
2βn,i
≥ Qn,i
(w − 2pe
n)Cn
2βn,i
< Qn,i
(20)
We can get δ2En
δP 2
n,e
≤ 0, since w > 0, βn,i ≥ 0, and
Cn > 0.
Mode 1: The ESP chooses to offload the excessive tasks
to the other ESPs. The utility function of the ESP becomes:
En = pe
n
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
− α
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
,Qn,i
)
−
⎧
⎨
⎩
⎡
⎣
∑K
k=0
ρ(k)
(∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
,Qn,i
)
− Cn
)
pe
k
+ τ max
k �=n
ρk
⎛
⎝
∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
,Qn,i
)
− Cn
Re
+
(
∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
,Qn,i
)
− Cn)γ (A)
f e
n
⎞
⎠
⎤
⎦
⎫
⎬
⎭
(21)
The second derivative of the function is calculated via
Eq. 22.
∂2En
∂pe
n
2
=
∑Mn
i=1
⎧
⎨
⎩
0,
− Cn
βn,i
,
(w − 2pe
n)Cn
2βn,i
≥ Qn,i
(w − 2pe
n)Cn
2βn,i
< Qn,i
(22)
We can get δ2En
δP 2
n,e
≤ 0, since w > 0, βn,i ≥ 0, and Cn > 0.
Mode 2: The ESP offloads the excessive tasks to both the
CSP and the other ESPs. The utility function of the ESP
becomes:
En =pe
n
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
,Qn,i
)
− α
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
,Qn,i
)
−
⎧
⎨
⎩(1 − δn)
⎡
⎣pc
n(
∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
,Qn,i
)
− Cn)
+τ
⎛
⎝
∑Mn
i=0 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn
Rc
+
(
∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
, Qn,i
)
− Cn)γ (A)
f c
⎞
⎠
⎤
⎦
+δn
⎡
⎣
∑K
k=0
ρ(k)
(∑Mn
i=1
min
(
(w − pe
n)Cn
2βn,i
, Qn,i
)
− Cn
)
pe
k + τ max
k �=n
ρ(k)
⎛
⎝
∑Mn
i=0 min
(
(w−pe
n)Cn
2βn,i
,Qn,i
)
− Cn
Re
+
(
∑Mn
i=1 min
(
(w−pe
n)Cn
2βn,i
,Qn,i
)
− Cn)γ (A)
f e
n
⎞
⎠
⎤
⎦
⎫
⎬
⎭ (23)
The second derivative of the function is calculated via
Eq. 24.
∂2En
∂pe
n
2
=
∑Mn
i=1
⎧
⎨
⎩
0,
− Cn
βn,i
,
(w − 2pe
n)Cn
2βn,i
≥ Qn,i
(w − 2pe
n)Cn
2βn,i
< Qn,i
(24)
We can get δ2En
δP 2
n,e
≤ 0, since w > 0, βn,i ≥ 0, and Cn > 0.
Therefore, En is a strict concave function of pe
n (0 ≤ pe
n ≤ pc
n).
That is, the ESP can find the optimal resource price pe
n to
maximize the ESP’s utility, and the Stackelberg game has a
unique equilibrium.
Theorem 2 The unique equilibrium exists in the Stackelberg game
between the ESP and the CSP.
Proof According to Lemma 1 and Theorem 1, there is a unique
equilibrium in the second and the third phases of the Stackelberg game.
Next, we consider the first phase of the Stackelberg game during which
pc
n is determined by the CSP. Only when the ESP is overloaded and the
task is offloaded to the CSP, it can benefit from the service provisioning.
1437Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
In other cases, the CSP’s utility is 0. Therefore, we can recalculate CSP’s
utility Ec
n as Eq. 25.
Ec
n =
⎧
⎨
⎩
pc
n
(∑Mn
i=1 qn,i − Cn
)
,
0,
0 ≤ δn < 1 & θn = 1
otherwise
(25)
When the ESP does not choose to offload the excessive
tasks to the CSP, the utility of CSP is 0, and the second
derivative of Ec
n must be equal to 0. Therefore, we only
consider the case that the tasks are offloaded to the CSP. We
can get the CSP’s utility Ec
n as Eq. 26.
Ec
n = pc
n
(∑Mn
i=1
qn,i − Cn
)
(26)
According to Eq. 13, we can get the CSP’s utility function
as:
Ec
n =
⎧
⎨
⎩
pc
n
(∑Mn
i=1 Qn,i − Cn
)
,
(w−pe
n)Cn
2βn,i
≥ Qn,i
pc
n
(∑Mn
i=1
(w−pe
n)Cn
2βn,i
− Cn
)
,
(w−pe
n)Cn
2βn,i
< Qn,i
(27)
At a given pe
n, the CSP decides pc
n by making the first
derivative of Eq. 19 equal to 0.
∂En
∂pe
n
=
∑Mn
i=1
min
(
(w − 2pe
n)Cn
2βn,i
,Qn,i
)
− α
∑Mn
i=1
min
(
− Cn
2βn,i
, 0
)
−
[
pc
n
∑Mn
i=1
min
(
− Cn
2βn,i
, 0
)
+τ
⎛
⎝
∑Mn
i=1 min
(
− Cn
2βn,i
, 0
)
Rc
+
(∑Mn
i=1 min
(
− Cn
2βn,i
, 0
))
γ (A)
f c
⎞
⎠
⎤
⎦=0
(28)
After getting pe
n, we put pe
n into Eq. 27 and then get the
CSP’s utility function as:
Ec
n =
⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
pc
n
(∑Mn
i=1
Qn,i − Cn
)
,
(w − pe
n)Cn
2βn,i
≥Qn,i
pc
n
{[ ∑Mn
i=1
wCn
2βn,i
+ α
2
∑Mn
i=1
(
− Cn
2βn,i
)
+ pc
n
2
∑Mn
i=1
(
− Cn
2βn,i
)
+
τ
∑Mn
i=1
(
− Cn
2βn,i
)
2Rc
+
τγ (A)
∑Mn
i=1
(
− Cn
2βn,i
)
f c
+
∑Mn
i=1
(
− wCn
4βn,i
)]
− Cn
}
,
(w−pe
n)Cn
2βn,i
< Qn,i
(29)
The first derivative of the function is calculated via
Eq. 30.
∂Ec
n
∂pc
n
=
⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
∑Mn
i=1
Qn,i − Cn,
(w−pe
n)Cn
2βn,i
≥Qn,i
[∑Mn
i=1
wCn
2βn,i
+ α
2
∑Mn
i=1
(
− Cn
2βn,i
)
+pc
n
∑Mn
i=1
(
− Cn
2βn,i
)
+
τ
∑Mn
i=1
(
− Cn
2βn,i
)
2Rc
+
τγ (A)
∑Mn
i=1
(
− Cn
2βn,i
)
f c
+
∑Mn
i=1
(
− wCn
4βn,i
)]
− Cn,
(w − pe
n)Cn
2βn,i
< Qn,i
(30)
The second derivative of the function is calculated via
Eq. 31.
∂2Ec
n
∂pc
n
2
=
∑Mn
i=1
⎧
⎨
⎩
0,
− Cn
2βn,i
,
(w − 2pe
n)Cn
2βn,i
≥ Qn,i
(w − 2pe
n)Cn
2βn,i
< Qn,i
(31)
We can get δ2Ec
n
δP 2
n,c
≤ 0, since w > 0, βn,i ≥ 0, and Cn > 0.
Therefore, Ec
n is a strict concave function. That is, the CSP
can find the optimal pc
n to maximize the CSP’s utility, and
the Stackelberg game has a unique equilibrium.
4.2 Stackelberg game equilibrium search algorithm
We consider the sequential decision process of all users,
the ESPs, and the CSP. First, the CSP decides the resource
price. Second, the ESP plays a game with the users to decide
the ESP’s resource price pe
n. All the users will decide the
amount of computing resources to purchase based on the
observed resource price of the ESP. If the ESP is overloaded
and offloads the excessive tasks to the CSP, it will adjust
the resource price pc
n based on the ESP’s resource purchase
amount decision to increase the CSP’s utility. The ESP then
plays the game with the users.
The miners can calculate the optimal amount of
computing resources to purchase with Eq. 13 when the
ESP determines computing resource price pe
n, so we need
to find the optimal pe
n to maximize the ESP’s utility.
The equilibrium prediction of the Stackelberg sub-game
between the ESP and the miners in this paper is a one-
dimensional single-peak concave function extreme value
searching problem, since the range of pe
n is [0, pc
n].
Similarly, the ESP can calculate the optimal ESP’s utility
with Eq. 11 when the CSP determines computing resource
price pc
n, and the equilibrium prediction of the Stackelberg
sub-game between the ESP and the CSP is also a one-
dimensional single-peak concave function extreme value
searching problem.
The analysis of the Stackelberg game shows that
resource pricing is the key to the edge computing
resource management in mobile blockchain. Therefore,
we propose an efficient golden section based Stackelberg
game equilibrium searching algorithm SES to decide the
resource prices of the CSP and the ESPs, which is shown
in Algorithm 1. Two points t1 and t2 are inserted in the
searching interval of [t0, t3] based on the ratio of 0.618,
where t0 and t3 are initialized as 0 and pc
n, respectively.
For points t1 and t2, we calculate the optimal amount
of computing resources to purchase via Eq. 13. We can
then obtain the ESP’s utility function values at the two
inserted points, i.e. E′
n and E′′
n and obtain the CSP’s utility
function values at the two inserted points, i.e. E′
n,c and E′′
n,c.
The searching interval is divided into three segments by
1438 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
the inserted points. We compare the values of E′
n and E′′
n
according to the nature of the single-peak function, and
one of the segments, either [t0, t1] or [t2, t3], is deleted
to reduce the original searching interval. The algorithm
proceeds iteratively following the process of narrowing the
searching interval until the size of searching interval [t0,
t3] is less than the predefined precision threshold ε. The
middle value of the final searching interval is returned as
the approximate maximum value of the ESP’s computing
resource price.
5 Performance evaluation
In this section, we evaluate the performance of the proposed
algorithm SES through simulations. There are 5 ESPs in
the system. The unit time cost of service provisioning is
5, and the maximum amount of services that each miner
will purchase is 50. The transfer rates of task uploading
to the ESPs and the CSP are 10 and 1, respectively. The
computing power of the ESPs and the CSP is 1 and 10,
respectively. The simulation parameters are listed in Table 2.
Table 2 Simulation parameters
Attributes Value
the number of ESPs K 5
the unit time cost of service
provisioning
5
the maximum amount of services
that each miner will purchase
50
the transfer rate of task uploading
to CSP Rc
1
the transfer rate of task uploading to ESP Re 10
the CSP computing power f c 10
the ESP computing power f e
n 1
the unit workload of excessive task A, γ (A) 1.5
the precision threshold ε of algorithm SES 0.01
We also investigate the impact of important parameters,
i.e. the number of miners, the cloud service price, the unit
service provisioning cost of the ESPs, the weight of service
response time for the miners, the unit service reward of
miners, the ESPs’ computing capacity, etc., on the proposed
algorithm.
5.1 Unit service utility of ESPs
Figure 2 shows the unit service utility of ESPs versus
different numbers of miners under mode 0 (offloading the
excessive tasks to the CSP), assuming w = 10, α = 1,
each Cn = 200, δn = 0, and βn,i = 20. The unit service
utility of ESPs initially increases and then decreases with
increasing number of miners. A large number of miners
leads to a large number of computing resource requests,
and hence the ESP increases the computing resource price
pe
n to earn more income and control the total amount of
8 9 10 11 12 13 14 15 16 17
Number of miners
1
2
3
4
5
6
7
U
ni
t s
er
vi
ce
 u
til
ity
 o
f E
S
P
s
pc
n
=6.5
pc
n
=7.0
pc
n
=7.5
Fig. 2 Unit service utility of ESPs versus the number of miners
(mode 0)
1439Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
services sold. As a result, the unit service utility of ESPs
initially shows an increasing trend. When the total number
of services purchased by the miners exceeds the ESP’s
computing capacity, high pe
n makes the miners unwilling to
buy computing resources, resulting in a decreasing trend in
the unit service utility of ESPs. A high cloud service price
pc
n makes the ESPs take a large increase of pe
n to control
the total number of services purchased by the miners.
Therefore, the unit service utility of ESPs starts to decline
with a higher pc
n later than that with a lower pc
n.
Figure 3 demonstrates the unit service utility of ESPs
with different numbers of miners under mode 1 (offloading
the excessive tasks to the other ESPs), assuming w = 10,
α = 1, each Cn = 200, δn = 1, and βn,i = 20. The unit
service utility of ESPs also initially increases and then
decreases as the number of miners increases. The increase
of miners potentially leads to more task offloading requests,
which increases the ESPs’ unit service utility. However,
with the increasing amount of service requests, more tasks
need to be offloaded to the other ESPs, which incurs more
service provisioning cost and hence decreases the ESPs’
unit service utility.
Figure 4 shows the unit service utility of ESPs versus
different numbers of miners under three different offloading
modes of the ESPs, assuming w = 10, α = 1, each Cn = 200,
pc
n = 8, and βn,i = 20. The ESP offloads half of the excessive
tasks to the CSP in mode 2, i.e. δn = 0.5. The unit service
utility of ESPs also initially increases and then decreases as
the number of miners increases. However, the unit service
utility of ESPs with mode 0 declines faster than that with
mode 1, and the unit service utility of ESPs with mode
1 declines faster than that with mode 2. In the following
simulations, we assume an overloaded ESP will offload the
excessive tasks to the CSP and the other ESP (mode 2).
That is, the overloaded ESP can obtain more utilities by
8 9 10 11 12 13 14 15 16 17
Number of miners
1
2
3
4
5
6
7
U
ni
t s
er
vi
ce
 u
til
ity
 o
f E
S
P
s
pc
n
=6.5
pc
n
=7.0
pc
n
=7.5
Fig. 3 Unit service utility of ESPs versus the number of miners
(mode 1)
03520251
Number of miners
3
3.5
4
4.5
5
5.5
6
6.5
7
7.5
8
U
ni
t s
er
vi
ce
 u
til
ity
 o
f E
S
P
s
n
=0
n
=0.5
n
=1
Fig. 4 Unit service utility of ESPs versus the number of miners under
three different offloading modes of the ESPs
offloading some of the excessive tasks to the other ESPs
than to the CSP. However, it is most beneficial for the
overloaded ESP to offload some of the excessive tasks to
the other ESPs and offload the other tasks to the CSP at the
same time.
Figure 5 illustrates the unit service utility of ESPs with
different w, the unit rewards of miners, assuming each Mn =
10, Cn = 200, δn = 0.5, pc
n = 8, and βn,i = 25. The unit
service utility of ESPs increases as w increases. With the
increase in the unit service reward w, the number of ser-
vices that the miners are willing to purchase will continue
to increase. For the ESPs, increasing the unit service price
pe
n can obtain higher service revenue, but the increase in the
number of services also leads to more ESPs’ service provi-
sioning cost and more services purchased from the cloud.
With a specific unit service reward w, the unit service util-
ity of ESPs decreases as the unit service provisioning cost α
increases.
5 6 7 8 9 10 11
Unit service reward of miners
0
1
2
3
4
5
6
U
ni
t s
er
vi
ce
 u
til
ity
 o
f E
S
P
s
=1
=4
Fig. 5 Unit service utility of ESPs with different unit service rewards
of miners
1440 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
Figures 2–5 demonstrate that the unit service utility of
ESPs increases and then decreases as the number of miners
increases, the unit service utility of ESPs increases with the
increase of the unit service reward of miners and decreases
with the increasing unit service provisioning cost, and it is
better for the overloaded ESP to offload the mining tasks to
both the CSP and the other ESPs.
5.2 Unit service price of ESPs
Figure 6 shows the unit service price of ESPs versus
different ESPs’ computing capacities, assuming w = 10, α =
1, each Mn = 10, δn = 0.5, and pc
n = 8. The unit service price
of ESPs increases with the increase of the ESPs’ computing
capacity. A large ESPs’ computing capacity enables a big
number of tasks to be executed at the ESPs, such that the
ESPs can increase the price to increase the ESPs’ utilities.
It can be observed that a large β, the weight range of task
response time for miners, results in a low unit service utility
of ESPs, since the negative impact of executing the tasks at
the cloud or at the other ESPs increases with the increase of
β.
Figure 7 depicts the unit service price of ESPs by varying
the weight of service response time for miners, assuming
each w = 10, α = 1, each Mn = 10, δn = 0.5, and pc
n = 8.
We can observe that as the weight of service response time
for miners continues to increase, the unit service price of
ESPs first decreases and then keeps stable at a low point.
For the ESPs, in order to increase the utility, it is necessary
to stimulate the miners to purchase more services through
price reduction. With a specific weight of service response
time for miners, more ESPs’ computing capacities lead to
more tasks to be executed at the ESPs, such that the ESPs
can increase the unit service price.
Figures 6 and 7 demonstrate that the unit service price
of ESPs increases with the increase of ESPs’ computing
500 550 600 650 700 750 800
ESP's computing capacity
5
5.5
6
6.5
7
7.5
8
8.5
9
U
ni
t s
er
vi
ce
 p
ric
e 
of
 E
S
P
s
n,i
=15
n,i
=20
Fig. 6 Unit service price of ESPs with different ESPs’ computing
capacities
15 16 17 18 19 20 21 22 23 24 25
Weight of service response time
5
5.5
6
6.5
7
7.5
8
8.5
9
U
ni
t s
er
vi
ce
 p
ric
e 
of
 E
S
P
s
C
n
=200
C
n
=800
Fig. 7 Unit service price of ESPs with different weights of service
response time for miners
capacity and decreases with the increasing weight of service
response time.
5.3 Unit service utility of miners
Figure 8 shows the unit service utility of miners versus
different α, the unit service provisioning cost of ESPs,
assuming each Mn = 10, βn,i = 20, δn = 0.5, Cn = 200, and pc
n =
8. The unit service utility of miners decreases as α increases.
The increase of α indicates that the ESPs take an increasing
cost to provide the services to the miners. Therefore, the
miners do not want to buy more services, which leads to a
decrease in the unit service utility of miners. With the same
α, the increase of unit service reward of miners leads to more
rewards of miners through mining, which increases the unit
service utility of miners.
Figure 9 depicts the unit service utility of miners by
varying w, the unit service reward of miners, assuming α = 1,
each Mn = 10, βn,i = 10, δn = 0.5, and pc
n = 8. The unit service
2 2.5 3 3.5 4 4.5 5 5.5 6
Unit service provisioning cost of ESPs
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
2
2.2
U
ni
t s
er
vi
ce
 u
til
ity
 o
f m
in
er
s
w=8
w=10
Fig. 8 Unit service utility of miners versus unit service provisioning
cost of ESPs
1441Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
11 12 13 14 15 16 17 18
Unit service reward of miners
1
2
3
4
5
6
7
8
9
10
U
ni
t s
er
vi
ce
 u
til
ity
 o
f m
in
er
s
C
n
=200
C
n
=500
C
n
=800
Fig. 9 Unit service utility of miners with different unit service rewards
of miners
utility of miners increases as w increases. The increase of w
leads to more rewards of the miners, such that the miners are
willing to purchase more computing resources. With a small
ESPs’ computing capacity, the miners’ competition for edge
resources is intense so that a big number of tasks are
executed at the CSP, which decreases the miners’ utilities.
Figures 8 and 9 demonstrate that the unit service utility of
miners increases with the increase of unit service reward of
miners and the ESPs’ computing capacities, and decreases
with the increase of unit service provisioning cost of ESPs.
5.4 Total number of services purchased byminers
Figure 10 shows the total number of services purchased
by the miners versus different ESPs’ computing capacities,
assuming α = 1, each Mn = 10, βn,i = 15, δn = 0.5, and
pc
n = 8. The total number of services purchased by the
miners increases as the ESPs’ computing capacity increases.
More computing resources enable the ESPs to reduce the
100 120 140 160 180 200 220 240 260 280 300
ESP's computing capacity
50
100
150
200
250
300
350
400
450
T
ot
al
 n
um
be
r 
of
 s
er
vi
ce
s 
pu
rc
ha
se
d 
by
 m
in
er
s
w=11
w=12
Fig. 10 Total number of services purchased by miners versus ESPs’
computing capacities
10 11 12 13 14 15 16 17 18 19 20
Weight of service response time
100
200
300
400
500
600
700
800
900
T
ot
al
 n
um
be
r 
of
 s
er
vi
ce
s 
pu
rc
ha
se
d 
by
 m
in
er
s
M
n
=10
M
n
=20
Fig. 11 Total number of services purchased by miners with different
weights of service response time for miners
purchase price to attract more miners to purchase computing
resources. Similarly, when the unit service reward is higher,
the miners are willing to purchase more services.
Figure 11 depicts the total number of services purchased
by the miners by varying the weight of service response time
for miners, assuming w = 12, α = 1, each Cn = 200, δn = 0.5,
and pc
n = 8. The total number of services purchased by the
miners decreases as the weight of service response time
for miners increases. The increase in the weight of service
response time indicates that the miners care more about
the tasks completion time, such that the miners prefer to
make the tasks be executed by the ESPs. Therefore, the total
number of resources purchased by the miners will decrease
so that the offloaded tasks are within the capacities of the
ESPs. With the same weight of service response time, the
increase in the number of miners will lead to an increase in
the service requests, such that the total number of services
purchased by miners also increases.
Figures 10 and 11 demonstrate that the total number of
services purchased by the miners increases with the increase
of unit service reward of miners and the ESPs’ computing
capacities, and decreases with the increase of the weight of
service response time and the number of miners.
6 Conclusions
Offloading mining computation tasks to an edge computing
service provider (ESP) or a cloud computing service
provider (CSP) is considered as a feasible solution to
blockchain mining in mobile environments. In this paper,
we constructed a mining offloading model which includes
multiple miners, multiple ESPs, and a CSP. We formulated
a three-stage Stackelberg game for optimal pricing-based
edge computing resource management. In the first stage,
the CSP decides the resource price. In the second
1442 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
stage, each ESP decides the resource price. In the third
stage, the miners determine the amount of resources to
purchase. We proved the existence and uniqueness of the
Stackelberg game equilibrium and derived the miners’
optimal amount of computing resources to purchase. We
then proposed an efficient golden section based Stackelberg
game equilibrium searching algorithm SES for resource
pricing. Simulation results showed: (1) the unit service
utility of ESPs increases and then decreases as the number
of miners increases, and the unit service utility of ESPs
increases with the increase of the unit service reward
of miners and decreases with the increasing unit service
provisioning cost; (2) the unit service price of ESPs
increases with the increase of ESPs’ computing capacity
and decreases with the increasing weight of service response
time; (3) the unit service utility of miners increases with
the increase of unit service reward of miners and the ESPs’
computing capacities, and decreases with the increase of
unit service provisioning cost of ESPs; (4) the total number
of services purchased by the miners increases with the
increase of unit service reward of miners and the ESPs’
computing capacities, and decreases with the increase of the
weight of service response time and the number of miners;
(5) it is better for the overloaded ESP to offload the mining
tasks to both the CSP and the other ESPs.
References
1. Blockchain for enterprise applications. https://www.tractica.com/
research/blockchain-for-enterprise-applications(2018)
2. Dorri A, Kanhere SS, Jurdak R (2016) Blockchain in Internet of
Things: Challenges and solutions. arXiv:1608.05187
3. Rawat DB, Alshaikhi A (2018) Leveraging distributed blockchain-
based scheme for wireless network virtualization with security and
QoS constraints. In: 2018 International Conference on Computing,
Networking and Communications (ICNC). IEEE, pp 332–336
4. Suankaewmanee K, Hoang DT, Niyato D, Sawadsitang S, Wang
P, Han Z (2018) Performance analysis and application of mobile
blockchain. In: 2018 International Conference on Computing,
Networking and Communications (ICNC). IEEE, pp 642–646
5. Jiao Y, Wang P, Niyato D, Xiong Z (2018) Social welfare
maximization auction in edge computing resource allocation for
mobile blockchain. In: 2018 IEEE International Conference on
Communications (ICC), pp 1–6
6. Casado-Vara R, de la Prieta F, Prieto J, Corchado JM (2018)
Blockchain framework for IoT data quality via edge computing.
In: Proceedings of the 1st Workshop on blockchain-enabled
networked sensor systems, pp 19–24
7. Chamarajnagar R, Ashok A (2018) Opportunistic mobile IoT
with blockchain based collaboration. In: 2018 IEEE Global
Communications Conference (GLOBECOM), pp 1–6
8. Kang J, Yu R, Huang X, Wu M, Maharjan S, Xie S, Zhang
Y (2019) Blockchain for secure and efficient data sharing in
vehicular edge computing and networks. IEEE Internet of Things
Journal 6(3):4660–4670
9. Kim JY, Moon SM (2018) Blockchain-based edge computing for
deep neural network applications. In: Proceedings of the workshop
on intelligent embedded systems architectures and applications,
pp 53–55
10. Kroll JA, Davey IC, Felten EW (2013) The economics of Bitcoin
mining, or Bitcoin in the presence of adversaries. In: Proceedings
of WEIS, p 11
11. Sompolinsky Y, Lewenberg Y, Bachrach Y, Zohar A, Rosen-
schein JS (2015) Bitcoin mining pools: A cooperative game theo-
retic analysis. In: Proceedings of the 2015 International confer-
ence on autonomous agents and multiagent systems, pp 919–927
12. Houy N (2016) The Bitcoin mining game. Ledger 1:53–68
13. Xiong Z, Feng S, Niyato D, Wang P, Han Z (2018) Optimal
pricing-based edge computing resource management in mobile
blockchain. In: 2018 IEEE International Conference on Commu-
nications (ICC), vol 05, pp 1–6
14. Zhang H, Xiao Y, Bu S, Niyato D, Yu FR, Han Z (2017)
Computing resource allocation in three-tier IoT fog networks:
A joint optimization approach combining Stackelberg game and
matching. IEEE Internet of Things J 4(5):1204–1215
15. Chiu J, Koeppl T (2019) Incentive compatibility on the
blockchain. In: Social design. Springer, pp 323–335
16. Luong NC, Xiong Z, Wang P, Niyato D (2018) Optimal auction
for edge computing resource management in mobile blockchain
networks: A deep learning approach. In: 2018 IEEE International
Conference on Communications (ICC). IEEE, pp 1–6
17. Jiao Y, Wang P, Niyato D, Suankaewmanee K (2019) Auction
mechanisms in cloud/fog computing resource allocation for public
blockchain networks. In: IEEE Transactions on parallel and
distributed systems
18. Liu M, Yu FR, Teng Y (2018) Computation offloading and
content caching in wireless blockchain networks with mobile edge
computing. IEEE Trans Veh Technol 67(11):11008–11021
19. Wu Y, Chen X, Shi J, Ni K, Qian L, Huang L, Zhang K (2018)
Optimal computational power allocation in multi-access mobile
edge computing for blockchain. Sensors 18(10):3472
20. Fan Y, Shen G, Jin Z, Hu D, Shi L, Yuan X (2020) Stackelberg
game based edge computing resource management for mobile
blockchain. ACM Turing Celebration Conference - China (ACM
TURC’20)
Publisher’s note Springer Nature remains neutral with regard to
jurisdictional claims in published maps and institutional affiliations.
Yuqi Fan is an associate pro-
fessor at School of Com-
puter Science and Information
Engineering at Hefei Univer-
sity of Technology, China. He
received his Ph.D. in Com-
puter Science and Engineering
from Wright State University
in 2009. He received both B.S.
and M.S. degrees in computer
science and engineering from
Hefei University of Technol-
ogy in 1999 and 2003, respec-
tively. His research interests
include blockchain, computer
networks, cloud computing,
cyber-physical systems, etc.
1443Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
https://www.tractica.com/research/blockchain-for-enterprise-applications
https://www.tractica.com/research/blockchain-for-enterprise-applications
http://arxiv.org/abs/1608.05187
Zhifeng Jin received the B.S.
degree in Computer Science
and Technology from Hefei
University of Technology,
China, in 2019. He is currently
a graduate student in Com-
puter Science at School of
Computer Science and Infor-
mation Engineering at Hefei
University of Technology,
Hefei, China. His research
interests include blockchain,
computer networks, cloud
computing, etc.
Guangming Shen received
the B.S. degree in Com-
puter Science from Zhejiang
Normal University, China,
in 2018. He is currently a
graduate student in Com-
puter Science at School of
Computer and Information
Engineering at Hefei Uni-
versity of Technology, Hefei,
China. His research interests
include blockchain, deep
learning, etc.
Donghui Hu received the B.S.
degree from Anhui Normal
University, Wuhu, China, in
1995, the M.S. degree in com-
puter science and technology
from University of Science
and Technology of China,
Hefei, China, in 2004, and
Ph.D. degree in information
security from Wuhan Univer-
sity, Wuhan, China, 2010. He
was a Visiting Researcher with
UNCC IN 2013-2014. Cur-
rently, he is a Professor in the
College of Computer Science
and Information Engineering
at the Hefei University of Technology. His research interests include
network and information security.
Lei Shi received his B.S.
degree in 2002, M.S. degree
in 2005, and Ph.D. degree
in 2012, all from Hefei Uni-
versity of Technology, Hefei,
Anhui, China. He is cur-
rently an associate professor in
School of Computer Science
and Information Engineering,
Hefei University of Technolo-
gy. His main research area lies
in edge computing and wire-
less network optimization.
Xiaohui Yuan received the
B.S. degree in electrical
engineering from the Hefei
University of Technology,
China, in 1996, and the Ph.D.
degree in computer science
from Tulane University in
2004. After his graduation, he
was with the National Insti-
tutes of Health until 2006.
He is currently an Associate
Professor with the University
of North Texas. His research
interests include computer
vision, data mining, machine
learning, and arti cial intel-
ligence. He was a recipient of the Ralph E. Powe Junior Faculty
Enhancement Award in 2008 and the Air Force Summer Faculty
Fellowship in 2011, 2012, and 2013. University of North Texas, 3940
N. Elm, Denton, TX 76207, xiaohui.yuan@unt.edu.
1444 Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
Affiliations
Yuqi Fan1 · Zhifeng Jin1 · Guangming Shen1 · Donghui Hu1 · Lei Shi1 · Xiaohui Yuan2
Zhifeng Jin
2019170960@hfut.edu.cn
Guangming Shen
2018170910@hfut.edu.cn
Donghui Hu
hudh@hfut.edu.cn
Lei Shi
shilei@hfut.edu.cn
Xiaohui Yuan
xiaohui.yuan@unt.edu
1 Key Laboratory of Knowledge Engineering with Big Data
(Hefei University of Technology), Ministry of Education School
of Computer Science and Information Engineering, Hefei
University of Technology, Hefei, Anhui 230601, China
2 Department of Computer Science and Engineering, University
of North Texas, Denton, TX 76203, USA
1445Peer-to-Peer Netw. Appl. (2021) 14:1431–1445
http://orcid.org/0000-0003-0270-6261
mailto: 2019170960@hfut.edu.cn
mailto: 2018170910@hfut.edu.cn
mailto: hudh@hfut.edu.cn
mailto: shilei@hfut.edu.cn
mailto: xiaohui.yuan@unt.edu
	Three-stage Stackelberg game based edge computing resource management for mobile blockchain
	Abstract
	Introduction
	Related work
	The system model
	Analysis of the offloading mode
	Offloading to the CSP (mode 0)
	Offloading to the other ESPs (mode 1)
	Offloading to both the CSP and the other ESPs (mode 2)
	Resource allocation and pricing of miners, ESPs and CSP
	Resource management based on golden section search
	Analysis of the Stackelberg game
	Stackelberg game equilibrium search algorithm
	Performance evaluation
	Unit service utility of ESPs
	Unit service price of ESPs
	Unit service utility of miners
	Total number of services purchased by miners
	Conclusions
	References
	Affiliations