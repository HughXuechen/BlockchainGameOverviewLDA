A Blockchain-Enabled Ecosystem for Distributed Electricity Trading in Smart City
2040 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 3, FEBRUARY 1, 2021
A Blockchain-Enabled Ecosystem for Distributed
Electricity Trading in Smart City
Jianxiong Guo , Xingjian Ding, and Weili Wu, Senior Member, IEEE
Abstract—Along with the development in the Internet of
Things technology and smart city, a distributed network has been
formed among cities. This makes it easy to integrate distributed
electric energy into the power grid, thus become an efficient
way to use energy. However, how to guarantee the security
and privacy protection of distributed electricity trading has not
been solved effectively. In this article, we propose a blockchain-
based electricity trading (B-ET) ecosystem and design a smart
contract to ensure transactions are conducted in a safe and
reliable manner. To overcome the shortcomings of high latency
in traditional Proof-of-Work (PoW) consensus, we proposed a
credit-based PoW consensus mechanism by integrating the con-
cept of “stake” to improve the consortium blockchain under the
B-ET ecosystem. Then, we take combined cooling, heating, and
power (CCHP) system as an example that supplies distributed
energy, and model its interactions with the agent of power grid by
a novel Stackelberg game. We show that the optimal utilities of
entities in a city can be obtained at the Stackelberg equilibrium
by a distributed algorithm, which is guaranteed to exist and be
unique. In the end, we conduct a number of numerical simula-
tions to evaluate our proposed model and verify our algorithms,
which demonstrate their correctness and efficiency completely.
Index Terms—Blockchain, credit-based Proof of Work (PoW),
distributed electricity trading, smart city, Stackelberg game.
I. INTRODUCTION
TO REDUCE the cost of energy and emission of green-
house gas, distributed energy stations (DESs) combined
with multiple energy sources have been developed effectively
in the last decades [1]. Consider a smart community equipped
with a DES, it can be used to supply necessary energies,
such as cool, heat, and electricity, for residents living in this
community. In addition to this, it reduces the dependence on
centralized energy supply for instance the power grid, thereby
increasing efficiency and reducing the cost of energy usage.
Because in the traditional power grid, the electricity generated
from the centralized node, such as power plant, has to be trans-
mitted by a complex mesh, which results in high losses during
transmission and thus low efficiency [2], [3]. The deployment
Manuscript received June 2, 2020; revised July 11, 2020; accepted August
9, 2020. Date of publication August 12, 2020; date of current version
January 22, 2021. This work was supported in part by the National Science
Foundation under Grant 1747818 and Grant 1907472. (Corresponding author:
Jianxiong Guo.)
Jianxiong Guo and Weili Wu are with the Department of Computer
Science, Erik Jonsson School of Engineering and Computer Science,
University of Texas at Dallas, Richardson, TX 75080 USA (e-mail:
jianxiong.guo@utdallas.edu).
Xingjian Ding is with the School of Information, Renmin University of
China, Beijing 100872, China.
Digital Object Identifier 10.1109/JIOT.2020.3015980
of the Internet of Things (IoT) and smart cities has connected
cities to each other, which makes the use of distributed energy
more flexible and diversified. Based on that, the surplus elec-
tricity left by a DES can be integrated into the power grid, in
other words, the DES can sell its electricity to the agent of
power grid (APG) for making revenue. Thus, the distributed
electricity trading problem between the APG and DESs is
formulated and discussed in this article.
Traditional peer-to-peer (P2P) electricity trading relies on a
centralized trading platform, but such a mechanism has many
drawbacks. The payment security and privacy protection are
vulnerable when trading in this untrusted third centralized
platform, which needs to manage and store the transactions
between the AGP and DESs. If attacked by some damages
such as a single point of failure, it will result in data loss and
privacy leakage [4]. Therefore, it is imperative to design a
secure and reliable electricity trading system that ensure trad-
ing among the distributed Internet of Energy can be performed.
It stimulates the DESs to sell their electricity to APG at ease,
which promotes the rational use of energy.
With this in mind, blockchain is an effective technique to
address the aforementioned problem. Blockchain is a public
and distributed ledger that permits nodes to trade with each
other without a trusted intermediary [5]. Here, a new trans-
action is validated by a group of authorized nodes first and
then added into the blockchain in a permanent and tamper-
resistant manner. Based on its decentralization, a secure and
reliable electricity trading system can be constructed [6], [7].
Consider a smart city, it consists of a number of communities,
each of which is equipped with a DES. There is an agent,
namely, APG, trading with DESs in this city. The agents of
all cities are interconnected to form a wide area network and
then formulate a trading ecosystem. Based on that, we propose
a blockchain-based electricity energies trading (B-ET) ecosys-
tem, which is a consortium blockchain where all agents are
authorized participants required to store the blockchain and
complete the consensus process.
The B-ET ecosystem can be divided into two subsystems,
called the Internet-of-Energy (IoE) subsystem and blockchain
subsystem. Each IoE subsystem is a single city made up of
interconnections between the APG and DESs in this city. Here,
we design a smart contract that guarantees electricity trading
to be performed automatically when the trading conditions are
satisfied. The blockchain subsystem is constructed on the P2P
network that connects all APGs of cities in the ecosystem,
which stores complete data about the blockchain distribut-
edly. The transactions produced by some APG are required
2327-4662 c© 2020 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-0994-3297
GUO et al.: BLOCKCHAIN-ENABLED ECOSYSTEM FOR DISTRIBUTED ELECTRICITY TRADING IN SMART CITY 2041
to be verified and reached consensus across all APGs in the
ecosystem. The proof-based mechanisms, such as Proof of
Work (PoW) and Proof of Stack (PoS), are the most mature
and generally accepted methods to finish the consensus in the
blockchain. However, for the PoW, it is computation consum-
ing and high latency. For the PoS, it lacks randomness that will
bring about the one with a larger stake always win the package
right. They are not suitable for our B-ET ecosystem because
it requires low latency and security. Thereby, we proposed a
credit-based PoW consensus mechanism, which overcomes the
high latency in PoW and a lack of randomness in PoS.
In the aforementioned contract, it exists an interaction
between the agent and DES before launching a new electric-
ity trading, where the agent offers a unit price to purchase
electricity from DES, then DES responds it with the amount
of electricity they are willing to sell. Here, we take com-
bined cooling, heating, and power (CCHP) system [8] as an
instance of DES. In a city, each DES’s utility consists of
two parts: one is to serve the residents living in its commu-
nity by providing them with the energy needed for life, and
the other is sold electricity to the APG of its corresponding
city for gaining revenues. The agent’s utility is the profit gain
from buying electricity at a lower price and selling it at the
retail price. To encourage the DESs to sell more electricity,
the AGP should offer them a higher price. But like this, it
has the potential to make less profit because of this higher
cost. Thus, this is a dilemma. Then, due to the multilevel
decision-making processes of APG and DESs in a city, we
formulate a Stackelberg game to model the bargain between
them, where the AGP is leader and DESs are followers. The
leader offers a price for buying electricity from followers, such
that its profit based on the optimal responses from DESs can
be maximized. The properties of this Stackelberg game are
analyzed in this article, and we prove the Stackelberg equi-
librium (SE) exists and is unique. Because the responses of
DESs are unpredictable in advance, we propose a distributed
algorithm that is guaranteed to reach the unique SE by limited
information interactions. Finally, we conduct numerical simu-
lations to model our B-ET ecosystem, verify the correctness of
our proposed utility functions and feasibility of our proposed
algorithm.
The remainder of this article is organized as follows.
Section II discusses the state-of-the-art work. Section III
introduces the B-ET ecosystem and CCHP system and defines
utility functions. Section IV presents our blockchain design.
Section V analyzes the Stackelberg game, distributed algo-
rithm, and security. Section VI conducts numerical simula-
tions. Section VII concludes this article.
II. RELATED WORK
The distributed energy system has been studied intensively,
especially for how to integrate DES into the power grid.
Cecati et al. [9] exploited DES to make the cost of power
delivery minimized by the use of an efficient smart grid man-
agement system. Georgilakis and Hatziargyriou [1] summa-
rized the optimally distributed generation placement problem
systematically and analyzed current and future research about
it. Zhang et al. [10] considered microgrid as a local energy
supplier for domestic buildings by utilizing DES and studied
optimal scheduling of energy consumption through mixed-
integer programming. To deal with the transaction security
issues in P2P energy trading, many latest works about it
adopt the blockchain technology. Kang et al. [11] put for-
ward a localized P2P electricity trading pattern based on
consortium blockchain among plug-in hybrid electric vehi-
cles. Liu et al. [12] designed an adaptive blockchain-based
charging scheme to reduce power fluctuation in the grid and
cost of electric vehicle users. Aggarwal et al. [13] proposed
an EnergyChain that permits energy trading between grid and
home in a secure manner, including miner choice, transaction
verification, and block adding. Zhou et al. [14] consid-
ered the scenario of vehicle-to-grid and developed a secure
energy trading mechanism based on a consortium blockchain.
Even though that, our ecosystem is novel and more realistic.
Besides, they did not consider some of the inherent flaws in
the traditional blockchain.
A Stackelberg game is suitable to model the interactions in
energy trading. Maharjan et al. [15] addressed the demand
response management problem by means of establishing a
Stackelberg game between multiple utility companies and cus-
tomers to maximized the profit of each company and utility
of each customer. Meng and Zeng [16] studied a Stackelberg
game between an electricity retailer and customers. They
adopted genetic algorithms for the retailer to maximize its
profit and developed an analytical solution for customers to
minimize their bills. Bu and Yu [17] considered a real-time
pricing problem for the electricity retailer in the demand-side
management, proposed a four-stage Stackelberg game, and
solved it by a backward induction process. Tushar et al. [18]
proposed an energy management scheme and formulated a
Stackelberg game between residential units and the shared
facility controller that can buy energy from residential units or
grids. Other researches about game theory in energy trading
and management are shown in [19]–[21].
III. ECOSYSTEM
Consider a smart city, it can be divided into a number of
smart communities, each of which is equipped with a DES
for supplying multiple energies, especially electricity, to these
residents living in this community. In this city, there is an agent
representing the power grid company that collects electricity
from all DESs appertained to this city. Given a smart city Si,
the structure of this smart city is shown in Fig. 1, and the
entities in this smart city are shown as follows.
1) Agent: There is an agent delegated by the power grid
associated with this city Si, which is denoted by APGi.
The APGi is a monopoly of the energy market that
purchases electric energy generated by DESs in those
communities that belong to this smart city.
2) DESs: The city Si can be partitioned into disjoint smart
communities, denoted by set {Ci1, Ci2, . . . , Cij, . . . , }.
In community Cij, there is a distributed energy station
DESij supplying energies to the residents living in this
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
2042 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 3, FEBRUARY 1, 2021
Fig. 1. Structure of smart city Si.
Fig. 2. Instance of B-ET ecosystem that is composed of four smart cities (a
P2P network among all agents in the ecosystem).
community. Besides, DESij is able to sell surplus elec-
tric energy to the corresponding APGi in order to make
revenues.
3) Smart Meters: It is a built-in component installed in each
agent that monitors the energy flow transferred by each
DES in this city in real time, and decide whether the
transaction has been accomplished.
Then, consider a larger ecosystem, it is composed of
a number of smart cities. For instance, a country is
a typical energy ecosystem. Here, the ecosystem S is
denoted by S = {S1, S2, . . . , Si, . . . , }, where Si =
{{APGi}, {Ci1, Ci2, . . . , Cij, . . . , }} is a smart city in this
ecosystem. For convenience, the notation DESij can be con-
sidered equivalent to Cij. Our B-ET ecosystem is established
on such an ecosystem, where all APGs are interconnected
with each other to form a P2P network called “blockchain
network.” An instance of the B-ET ecosystem that is com-
posed of four smart cities is shown in Fig. 2. In order to
support secure trading between the agent and DESs, we adopt
consortium blockchain to construct our B-ET ecosystem. In
Fig. 3. CCHP system.
the traditional blockchain, the consensus process is carried out
by all participants. But the blockchain in the B-ET takes all
agents in the ecosystem as authorized participants, and they
are charged with storing the whole blockchain and performing
the consensus process. Each agent manages and records those
transactions between it and DESs in its city. The transactions
are packaged into blocks and added into blockchain when the
consensus among agents is reached, then stored in all agents
permanently.
A. Combined Cool, Heat, and Power System
In this article, the aforementioned DES is implemented by
the CCHP system, which is the most common and widely used
technique of distributed energy utilization. The CCHP system
consumes natural gas to generate electricity and exploits the
recoverable waste heat generated by the power generation unit
(PGU) for the purpose of space cooling, heating, and hot water.
The process is shown in Fig. 3. The gas is fed into the PGU
which will generate electricity Epgu and emit high-temperature
waste heat Qw. Then, the Euse is used to supply electricity to
the community for lighting, electronic equipment, etc., and
Eexc is sold to the APG. For the heat energy, when the waste
heat Qw is insufficient for supply to buildings, it can be replen-
ished by the input of the boiler. Here, Qw +Qboi can be split
into two parts, where Qcc is fed into the cooling component
to generate cool (air conditioning) Qc and Qhc is fed into the
heating component to generate heat Qh.
Shown as Fig. 3, the total electricity produced by PGU is
Epgu = Euse+Eexc. Measured in days, the units of Epgu, Euse,
Eexc, Qw, Qboi, Qcc, Qbc, Qc, and Qh are J/day. The PGU fuel
consumption Fpgu (m3/day) is
Fpgu = Eg/(q · ηpgu) = Qw/(q · (1− ηpgu)) (1)
where q (J/m3) is the calorific value of fuel, hence the total
energy generated by Fpgu is q·Fpgu. The ηpgu is the conversion
efficiency of PGU, percent energy that transferred from heat
to electricity. Given a specific PGU, its conversion efficiency
is assumed to be a constant. Consider the heat energy supplied
by the boiler, we have
Fboi = Qboi/(q · ηboi) (2)
where ηboi is the thermal efficiency of the boiler. To handle
the cooling load, the input of thermal energy Qcc to cooling
component can be defined as Qc = COPcc · Qcc, where Qc is
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: BLOCKCHAIN-ENABLED ECOSYSTEM FOR DISTRIBUTED ELECTRICITY TRADING IN SMART CITY 2043
the cooling load and COPcc is the coefficient of performance
of chiller. Similarly, to handle the heating load, the input of
thermal energy Qhc to heating component can be defined as
Qh = ηhc · Qhc, where Qh is heading load and ηhc is the
thermal efficiency of coil. By the heat balance, we can know
that Qw + Qboi = Qcc + Qhc definitely.
However, it is complex to determine how to distribute the
total thermal energy Qr + Qboi to cooling component Qcc
and heating component Qhc. For example, in summer, the
cooling load is significantly heavier than in other seasons
due to the hot weather; but in winter, heating demand is
higher because of the demand to heat the space of build-
ings. Apart from this, in different regions, such as tropical
or temperate regions, even at different times of the day, the
requirements for cooling and heating are different as well.
Thus, the allocation of total thermal energy to the cooling
and heating component depends more on experience. For
simplicity, we consider the cooling and heating load as a
whole, that is, Qcom = Qc + Qh = ηcom · (Qr + Qboi),
where Qcom is the sum of cooling load and heating load
and ηcom is its comprehensive thermal efficiency such that
ηcom ∈ [ min{COPcc, ηhc}, max{COPcc, ηhc}]. It can be deter-
mined by historic records of cooling and heating load, and we
assume it to be a constant.
The total fuel consumption can be denoted by F, which is
F = Fpgu + Fboi. Thereby, we define two dispatching factors
α, β ∈ [0, 1] for this CCHP system, where α = Fpgu/F is the
fuel dispatching factor and β = Euse/Epgu is the electricity
dispatching factor. This DES needs to buy natural gas from
the gas company. The company is for profit, thus it is valid
to assume the gas company always supply enough gas that is
able to meet the DES’s requirement. Given a smart city Si and
a community Cij ∈ Si, the energy relationship in the CCHPij
of Cij can be defined, that is
Eij
use = αij · β ij · ηpgu ·
(
qFij) (3)
Eij
exc = αij · (1− β ij) · ηpgu ·
(
qFij) (4)
Qij
use =
(
αij(1− ηpgu
)+ (1− αij)ηboi
) · ηcom ·
(
qFij). (5)
The CCHPij can determine the amount of heat that used in
this community by adjusting αij and the amount of electricity
that sold to APGi by adjusting β ij for making revenue.
B. Utility Functions
Consider a smart city Si, the agent in this city APGi offers a
unit price pi
e to collect surplus electricity generated by DESij ∈
Si, where the units of pi
b are coin/J. For each DESij ∈ Si,
it is risk averse in the energy market. If DESij chooses the
dispatching factors αij, β ij and consume natural gas Fij, its
utility function is
Uij(αij, β ij, Fij) = kij
1 · ln
(
1+ bij
1Eij
use
)
+ kij
2 · ln
(
1+ bij
2Qij
use
)
+ pij
b · Eij
exc (6)
where kij
1 , bij
1, kij
2 , and bij
2 are adjustable parameters. The utility
function Uij is composed of three items. The first item is the
utility of electricity used for electricity demand in its commu-
nity. The second item is the heat used for cooling and heating
demand in its community, and it consists of waste heat from
PGU and boiler. The third item is the revenue from selling
electricity to the APGi at the price of pi
b.
Unfortunately, the utility Uij(αij, β ij, Fij) is a multivariate
function and cannot be guaranteed to be concave because of
involving two variables in the first item. This causes great
difficulty for our follow-up mathematical analysis processing.
Thereby, we need to analyze the actual situation carefully and
simplify this utility function. In (6), we neglect the cost of
natural gas since we assume the price pi
b offered by APGi
is always greater than this cost. If not, there is no electricity
trading between the agent and DESs, and this is meaningless.
For each DESij ∈ Si, it will produce electricity as much as
possible, because of the fact that it is always profitable to sell
them to the APGi. At this time, to maximize its utility, each
CCHP system will run at full capacity. Here, for each CCHPij,
we define its maximum production capacity (maximum gas
consumption) per day as Fij
m. In addition, we suppose the waste
heat Qw at full capacity is enough to supply heat to satisfy its
community if dispatching all fuel Fij
m to PGU. Therefore, the
utility Uij(αij, β ij, Fij
m) can be denoted by Uij(β ij), where Fij
m
is considered as a constant and αij = 1.
Remark 1: After here, we default Fij = Fij
m and αij = 1.
Moreover, we denote Xij = ηpgu · (qFij
m) and Yij = (1− ηpgu) ·
ηcom · (qFij
m).
From (6), the natural logarithmic functions were adopted
to characterize the satisfaction of consuming electricity and
heat. This method has been used in [18], [22], and [23]. But
it exists a drawback to this utility function that logarithmic
function does not have an asymptote. Thus, we add an adaption
parameter bij
1 such that ln(1 + bij
1x) ∈ [0, 1] and use it to
model the satisfaction of electricity used in the community.
This parameter bij
1 is to control the variation range of term
ln(1 + bij
1x) and avoid growing infinitely. Our objective is to
have ln(1 + bij
1x) = 1 if β ij = 1, then the utility of the first
item in (6) reaches the maximum value. That is
bij
1 =
(
1/Xij) · (1− e); bij
2 =
(
1/Yij) · (e− 1). (7)
For the agent in this city, it has no power of pricing because
the retail price of electricity is usually regulated by the govern-
ment. Thereby this retail price can be considered as a constant.
To make revenue, the APGi wishes to purchase electricity from
those DESij ∈ Si at a price as low as possible. Based on (6), if
it offers a lower pi
b, the DESs tend to increase their electricity
dispatching factor β, namely, sell less and use more electricity
to serve themselves. They consume more electricity to improve
the quality of life, or simply reduce power generation, results
in the revenue of APGi is reduced. In contrast, if it offers a
higher pi
b, even approached to retail price ps, the profit per
unit of electricity will be small. Therefore, it is important for
the APGi to offer a valid price pi
b, not only encourage DESs
to sell more electricity but also ensure to have sufficient prof-
itability. Usually, pi
b ∈ (pm, pc), where pc is the cost price of
generating electricity by itself, where the grid needs to gen-
erate electricity at a cost price pc when the electric energy
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
2044 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 3, FEBRUARY 1, 2021
Fig. 4. Four major component in an APG.
collected from DESs is not enough to meet the requirement.
If APGi offer a price pi
b, its profit function can be defined as
Li(pi
b
) = (ps − pi
b
) ·
(∑
Cij∈Si
Eij
exc
)
+ (ps − pc) ·
(
Ri −
∑
Cij∈Si
Eij
exc
)
(8)
where Ri is the electric load of APGi, and we assume
Ri ≥ ∑
Cij∈Si
Xij. The profit function Li(pi
b) is composed of
two items. The first item is the profit of selling the electricity
bought from all DESs. The second item is the profit of selling
the electricity generated by itself.
IV. BLOCKCHAIN DESIGN
Generally speaking, our B-ET ecosystem is made up of IoE
subsystems and blockchain subsystem. A smart city Si ∈ S is
an IoE subsystem, which is composed of an APGi and a num-
ber of DESij ∈ Si. It mainly realizes information interactions
and finishes energy transactions between the APG and DESs
in this city. Shown as Fig. 1, there is an information chan-
nel and an electrical transmission path between the APG and
each DES in this city. The blockchain subsystem consists of
all APGs in the ecosystem S, where all APGs are connected
by P2P communication shown as Fig. 2. Apart from the effect
described above in the IoE subsystem, it needs to verify and
record those energy transactions between APGs and DESs in
a secure and trusted manner. The workflow of electricity trad-
ing in the B-ET ecosystem is as follows: first, a transaction
between the APG and DESs is initiated and finished in an IoE
subsystem; then this transaction can be verified and stored
permanently in the blockchain subsystem.
A. IoE Subsystem
For each APGi ∈ Si ∈ S in the ecosystem, there are
four major components: 1) a transaction server; 2) an account
server; 3) a memory server; and 4) a computation server, which
is shown in Fig. 4. The transaction server is a central controller,
which is mainly responsible for offering a price, collecting the
responses from DESs in its city, adjusting trading strategy, and
decide whether to trade. All entities, including APG and DESs
in the Si, have a personal account in the APGi’s account server,
which stores personal transaction records. Besides, there is a
wallet associated with each personal account, and the digital
assets of each entity are stored in its wallet in the form of
energy coin [11]. For privacy protection, the true address of
the wallet is hidden by a public key (random pseudonym),
and the mapping relationships between the personal accounts
and the public keys of their associated wallets are stored in this
account server. Moreover, the memory server and computation
server are mainly used in the later blockchain subsystem, we
will introduce in the next section.
Next, our core problem is how to protect privacy during
information interaction and how to ensure security during trad-
ing. Here, we design a smart contract to solve this problem.
The smart contract empowers credible transactions without
third parties based on blockchain technology, which can ensure
transactions to be trackable and irreversible, but reduce time
and cost at the same time. In a city Si, a smart contract is
launched by the agent APGi and one of the DESs DESij ∈ Si
together, which is denoted by Contract(APGi, DESij, STime).
Then, the procedure to execute this contract is demonstrated
as follows.
1) System Initialization: First, all entities, including APG
and DESs, need to register on a trusted institution, e.g., a
department authorized by the government, to become legiti-
mate entities. For each DESij ∈ Si, it will be assigned with a
unique identification IDij, public/private key pair (PKij, SKij),
and a personal account Accountij. That is
{
IDij, PKij, SKij, Accountij
}← register(DESij)
where there is a wallet address mapping to this
account, Accountij ← {Addressij, Balanceij}. Similarly,
the registration information of the APGi is denoted by
{IDi, PKi, SKi, Accounti} as well, but there is a credit value in
its account, that is, Accounti ← {Addressi, Balancei, Crediti}.
This credit reflects its reputation in the ecosystem. Here, the
public/private key pair can be achieved by some existing
asymmetric encryption algorithms, such as elliptic curve
digital signature [24], lattice-based signature [25], and
anti-quantum signature [26]. Given a message msg encrypted
by DESij, we have Hash(msg) = PKij(SKij(Hash(msg))).
2) Creation: In a city Si, the agent APGi offers a price
pi
b to buy electricity from communities in its city, then each
DESij ∈ Si responds it with the amount of electricity Eij
exc
that can be sold to APGi. Like this, a new smart contract
Contract(APGi, DESij, STime) is generated by signing with
their private key, respectively. Then, this contract will be
copied in its memory server and broadcasted to all agents
(authorized participants) in the ecosystem S. After reach-
ing a consensus, this smart contract will be deployed and
executed automatically. The Contract(APGi, DESij, STime)
is associated with several variables, they are account
information on both sides (Accounti, Accountij), offered price
pi
b, traded amount of electricity Eij
exc, expected transaction time
TransTime, and timestamp STime. To guarantee this contract
can be executed successfully, it needs to verify whether the
APGi has sufficient balance such that Balancei ≥ pi
b ·Eij
exc and
whether DESij has enough production capacity Eij
exc.
3) Execution: The Contract(APGi, DESij, STime) will be
executed if current time t ≥ TransTime after reaching a con-
sensus among agents in blockchain network. From now on,
it begins to trade energy and finish the payment. The smart
meter in APGi verifies whether the electricity has been trans-
ported to the designated location. Then, fed this result from
the smart meter into the smart contract, if yes, it will execute
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: BLOCKCHAIN-ENABLED ECOSYSTEM FOR DISTRIBUTED ELECTRICITY TRADING IN SMART CITY 2045
the payment process automatically, that is
(
APGi, Balancei − pi
b · Eij
exc
)
;
(
DESij, Balanceij + pi
b · Eij
exc
)
.
If this smart contract is executed successfully, the APGi’s
credit value Crediti will be increased by 1. It achieves the
digital currency and energy exchange specified by contract
between participants in a secure manner.
B. Blockchain Subsystem
As mentioned above, it will be broadcasted to all APGs
in the ecosystem when a transaction is produced. All agents
will verify whether their received transactions are valid. Those
valid transactions will be stored in their memory server tem-
porarily and packaged into a block later. The whole blockchain
is stored in every memory server as well. Then, a consensus
process is necessary to be performed among all agents in the
ecosystem so as to ensure the consistency of blockchain. In our
design, we develop a credit-based PoW mechanism. This is a
novel combination of PoW and PoS, which can overcome the
shortcomings of high latency in PoW and lack of randomness
in PoS.
1) Miner and Block Production: The consensus process is
executed round by round, where all agents are authorized par-
ticipants, also called “consensus nodes.” The first step in a
round is to select a miner from all consensus nodes by solv-
ing a computational puzzle. Based on PoW, all consensus
nodes attempt to find a nonce and compute the hash value
of its packaged block that contains this nonce. The one who
acquires such a hash value less than a predefined threshold
first is elected as the miner, and then it can broadcast its
block. Thereby those nodes that have more sufficient comput-
ing power will become the miner easily by finding the correct
nonce faster. Due to a credit value Crediti associated with each
APGi ∈ S, we can use it to improve the PoW mechanism. For
the different nodes, the difficulty of their corresponding hash-
ing puzzles is different. The agent with a higher credit statistic
has an easier hashing puzzle and a better chance of winning
the election. This credit-based miner election mechanism can
be formalized as
Hash(IDi, Block, PHash, T, Nonce) ≤ f (�i(T), D) (9)
where PHash is the pointer that links to the previous block,
T is the timestamp (round), and D is the predefined difficulty
of this blockchain subsystem. All agents in this ecosystem are
given by the same difficulty D. Now, let us look at the �i(T)
defined in (9). We denote by Crediti(t) the credit of APGi at
round t and Crediti(t) = Crediti(t − 1) + θi(t), where θi(t),
called credit increment, is the number of transactions finished
by APGi and DESs in its city successfully at round t. Then,
�i(T) can be defined as �i(T) = Crediti(T)− Crediti(T − δ)
given a round interval δ that is the credit’s variation of APGi
during the previous δ rounds. It represents the number of
successful trades that are completed by APGi from T − δ
to T . The more number of times a node has successfully
traded during the recent rounds, the more credible we think
it is. This is an incentive for the agents to participate in
more electricity tradings as well. Given a difficulty D, thresh-
old function f increases as the �i(T) increases. We consider
f (0, D) as the baseline of the threshold. If �i(T) > 0, we have
f (�i(T), D) > f (0, D) but cannot be larger than (1+γ )·f (0, D)
as �i(T) increases, where γ is an adjustable parameter and
γ ∈ (1, 7) generally. If the trading system is more active, the
more nodes frequently participate in the trading, the better the
robustness of the system, and the overall difficulty of mining
will be reduced. It is based on the assumption that the more
successful transactions a node makes over a period of time,
the more credible it is. We make those credible nodes less
difficult to win the election, which increases the security of
this system and reduces the latency to reach consensus. In this
process, the computational power is from computation servers
of agents.
2) Distributed Consensus: Once some node wins the miner,
it will broadcast its blocks to the blockchain network. After
receiving the new block from the miner, the remaining consen-
sus nodes requires to verify the miner’s identity, nonce, and the
block. If the number of consensus nodes in the ecosystem that
agree to accept it satisfies the condition of consensus (≥ 51%),
then this new block will be added into the blockchain. Once
finishing the consensus, those smart contracts contained in this
new block will be executed automatically. On condition that
receiving more than one block, it should follow the longest
chain principle where other forks are discarded eventually.
C. Security Analysis
For each APG in the ecosystem, it is not only an entity that
participating in the transaction in the IoE subsystem but also
a node that stores the blockchain and executes the consen-
sus process in the blockchain subsystem. Different roles are
played by different servers, and these servers work together
but work independently. Thus, our B-ET ecosystem inherits
the characteristics of the blockchain, shown as follows.
1) Decentralization: The electricity trades between the
APG and DESs in a smart city are carried out in a P2P
manner, and the bookkeeping process is finished among
APGs without a third trusted intermediary.
2) Privacy Protection: Each DES uses its public key to
communicate with the APG in its city, and this pub-
lic key is shared among the APGs to be verified without
disclosing true identity. Besides, the wallets of DESs are
hidden by pseudonyms and can only be accessed by cor-
responding key and certificate, which avoiding malicious
attacks against a specific entity.
3) Authentication: All transactions need to be audited and
verified publicly in the consensus process by all APGs
in the ecosystem. It is extremely hard to dominate the
majority of APGs to create an unreal block because of
the difficulty of credit-based PoW.
4) Integrity: Any block that newly added into blockchain
contains the hash of the previous block, and its sub-
sequent block contains its hash. A malicious attacker
that attempts to modify a transaction must create a new
chain after the block this transaction is in by dominat-
ing the majority of computational power and credit, this
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
2046 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 3, FEBRUARY 1, 2021
is impossible. Besides, every transaction in the block is
encrypted, it is hard to be decrypted without the private
key.
5) Transparency: The nature of decentralization requires
the blockchain to be saved in all memory servers of
APGs. Thus, it is transparent to every entity, and DESs
are able to check and confirm those transactions that
they participate in easily.
6) No Double-Spending: The blockchain provides all enti-
ties with a public ledger of transactions in the ecosystem,
which avoids double-spending potentially.
V. ELECTRICITY TRADING: STACKELBERG APPROACH
A noncooperative Stackelberg game generally refers to the
multilevel decision-making processes of a number of indepen-
dent decision makers in response to the decision taken by the
leading player of the game [27]. In this section, we formulate a
Stackelberg game to model the interactions in the above smart
contract between the APG and DES. Consider a smart city Si,
the Stackelberg game G is formally defined by its strategic
form as
G = {Si,P,D, {Li}, {Uij}Cij∈Si
}
(10)
where the components are shown as follows.
1) Players Set Si: The agent APGi acts as a leader and
offers a price pi
b to the DESs in this city. Then,
DESij ∈ Si act as followers and decide on the amount
of electricity they want to sell according to this offered
price.
2) Strategy Spaces P and D: Let P = [pm, pc] be the strat-
egy space of the agent, where we say {pi
b} ∈ P is a
feasible strategy of APGi. Then, let D = ×Cij∈Si{[0, 1]}
be the strategy space of all DESs in this city, and we
have {β ij}Cij∈Si ∈ D is a feasible strategy of DESs.
3) Utility Functions {Li} and {Uij}Cij∈Si : Each player in this
game aims to maximize its utility or profit, which reflects
the quality of strategy that this player chooses. {Li} is
the profits of the agent, defined in (8); and {Uij}Cij∈Si
are the utilities of DESs, defined in (6).
A. DESs (Followers) Side Analysis
Given a price pi
b offered by APGi in city Si, each DESij ∈ Si
responds it with the amount of electricity Eij
exc that sold to
the agent by controlling its dispatching factor β ij. Thus, the
objective of DESij can be defined, that is
max{β ij} Uij(β ij) s.t., β ij ∈ [0, 1]. (11)
Then, its first-order derivative is
∂Uij
∂β ij
= Xij ·
(
kij
1bij
1
1+ bij
1Xijβ i
− pi
b
)
. (12)
The maximum utility can be obtained by solving its first-order
differential condition ∂Uij/∂β ij = 0, so we have
β
ij
� = 1
Xij
·
(
kij
1
pi
b
− 1
bij
1
)
(13)
which is the DESij’s optimal response according to pi
b.
However, the choice of kij
1 must be in a valid range such that
β
ij
� ∈ [0, 1] given offered price pi
b ∈ [pm, pc]. Or else, this
utility function is monotone, and it is meaningless to adjust
its dispatching factors. Based on (7) and (13), we have
Xij · (pc)(e− 1)−1 ≤ kij
1 ≤ Xij · (e · pm)(e− 1)−1 (14)
where it assumes pc ≤ e · pm, or else no such ki
1 can keep
β i
� ∈ [0, 1] satisfied. Thereby the optimal β
ij
� is proportional
inversely to the offered price pi
b, and the DESij tends to sell
more electricity by decreasing β ij for a higher offered price.
B. Agent (Leader) Side Analysis
After receiving the optimal responses Eij
exc from all DESs in
Si, the APGi needs to make a decision such that maximizing
its profit by offering a reasonable price. Thus, the objective of
APGi can be defined, that is
max{
pi
b
} Li(pi
b
)
s.t., pi
b ∈ [pm, pc]. (15)
Substituting (13) into (8), we have
Li(pi
b
) = (pc − pb)
∑
Cij∈Si
·
(
Xij −
(
kij
1
pi
b
− 1
bij
1
))
+ (ps − pc) · Ri. (16)
Then, its first-order derivative is
∂Li
∂pi
b
=
∑
Cij∈Si
(
kij
1pc
pi
b
2
−
(
Xij + 1
bij
1
))
. (17)
The maximum profit can be obtained by solving its first-order
differential condition ∂Li/∂pi
b = 0, so we have
p̂i
b =
√√√√√
√
pc
∑
Cij∈Si
kij
1
∑
Cij∈Si
(
Xij +
(
bij
1
)−1
) (18)
which shows that the temporary optimal price p̂i
b is affected
by the number of DESs and their properties. From (18), we
can see that this optimal price is interfered with by the cost
price pc as well. With the increase of pc, the optimal price
increases theoretically. In order to make the profit maximized,
the agent has to offer its price according to (18). But based
on (15), pi
b ∈ [pm, pc], the optimal strategy of APGi can be
shown as follows:
p̄i
b =
⎧
⎨
⎩
pc, if p̂i
b ≥ pc
pm, if p̂i
b ≤ pm
p̂i
b, if pm < p̂i
b < pc.
(19)
Because the profit function is concave which will be proved
later, Li(pc) is the maximum value when p̂i
b ≥ pc. Similarly,
Li(pm) is the maximum value when p̂i
b ≤ pm. Now, we can
discuss whether they can reach an SE.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: BLOCKCHAIN-ENABLED ECOSYSTEM FOR DISTRIBUTED ELECTRICITY TRADING IN SMART CITY 2047
C. Stackelberg Equilibrium
In a smart city, the purpose of APG (resp., DES) is to
maximize its profit (resp., utility) by adapting its correspond-
ing trading strategy. The optimal solution of this game can be
obtained when the APGi get the maximized profit by offering
a price p̃i
b given the DESs’ optimal responses. In other words,
none of them, including the leader and followers, can get a
larger profit and utilities through altering their strategies uni-
laterally. At this time, the SE is formulated, which is defined
as follows.
Definition 1 (SE): Given a Stackelberg game G defined in
(10), we say a set of strategies (p̃i
b, {β ij∗ }Cij∈Si) reaches an SE
of game G if and only if the following inequalities are met:
Uij
(
p̃i
b,
{
β il∗
}
Cil∈Si
)
≥ Uij
(
p̃i
b, β
ij,
{
β il∗
}
Cil∈Si\Cij
)
(20)
Li
(
p̃i
b,
{
β il∗
}
Cil∈Si
)
≥ Li
(
pi
b,
{
β il∗
}
Cil∈Si
)
(21)
where {β il∗ }Cil∈Si is the optimal responses defined in (13)
according to their previous leader’s price.
Now, neither the leader and the followers can improve their
utilities by changing their strategies, respectively, when the
SE (p̃i
b, {β ij∗ }Cij∈Si) is reached. However, it is possible for the
noncooperative game with pure strategies that the point of
equilibrium does not exist [27]. Hence, we want to know
whether our proposed game G exists an SE.
Theorem 1: Between the APG and DESs in city Si, it exists
a unique SE in our Stackelberg game G.
Proof: For each DESij ∈ Si, based on the first-order
derivative of Uij defined in (12), we have
∂2Uij
∂β ij2
= −kij
1 ·
(
bij
1Xij
1+ bij
1Xijβ ij
)2
< 0. (22)
The utility function Uij defined in (6) is strictly concave
with respect to β ij. Thus, regardless of offered price pi
b, each
DESij ∈ Si exists a unique dispatching factor β
ij
� selected from
[0, 1] that maximizing DESij’s utility function. An SE can be
reached when the APG and DESs have their maximum profit
and utilities, respectively. Because the optimal response β
ij
�
for DESij ∈ Si is unique, we have that the game G reaches an
equilibrium only if the APGi is capable of offering the best
price p̃i
b depended on the optimal responses from DESs. Based
on (16) and (17), we have
∂2Li
∂pi
b
2
= −2pc
pi
b
3
·
∑
Cij∈Si
kij
1 < 0. (23)
The profit function Li defined in (16) is strictly concave with
respect to pi
b. The APGi can acquire the maximum profit by
offering the uniquely optimal price p̃i
b. Therefore, our proposed
game G exists a unique SE definitely.
D. Distributed Algorithm
From (18) and (19), the APGi can obtain its optimal offer-
ing price p̄i
b that maximize its profit easily if it can acquire
complete information about those parameters, such as kij
1 , bij
1,
Algorithm 1 Finding SE
1: Initialize: p̃i
b := pm, Li∗ := (ps − pc)Ri
2: for each DESij ∈ Si do
3: Initialize: β
ij∗ = 0
4: end for
5: for the offering price pi
b from pm to pc do
6: for each DESij ∈ Si do
7: DESij decides on its dispatching factor β
ij
� according
to β
ij
� = 1
Xij ·
(
kij
1
pi
b
− 1
bij
1
)
8: end for
9: The APGi computes its profit Li based on the response
β
ij
� for each DESij ∈ Si according to
Li = (pc − pb)
∑
DESij∈Si
(
Xij(1− β
ij
�)
)
+ (ps − pc)Ri
10: if Li ≥ Li∗ then
11: p̃i
b := pi
b, Li∗ := Li
12: β
ij∗ := β
ij
� for each DESij ∈ Si
13: end if
14: end for
15: return (p̃i
b, {β ij∗ }Cij∈Si)
and Xij for each DESij ∈ Si. However, in the real situation, it
seems unrealistic that complete information about the param-
eters setting of all DESs can be accessed by the agent in a
direct way because of their flexibility or out of privacy pro-
tection. Thereby the complete information about DESs is not
available for the APG. Instead of a centralized manner, a dis-
tributed algorithm needs to be designed, where the APG is
not required to know the complete parameter information of
DESs in its city, but only receives the amounts of electricity
DESs plan to sell. Consider a smart city Si, the APGi and all
DESij ∈ Si can reach the unique SE of Stackelberg game G in
an iterative manner by use of limited communications between
the leader and followers, which is shown in Algorithm 1.
According to Algorithm 1, in each iteration, the APGi in
city Si offers a price p̃i
b which is initialized by p̃i
b := pm first,
then each DESij ∈ Si decides on its best dispatching factor
β
ij
� according to (13) based on the current price p̃i
b offered by
APGi and sends it back to the APGi. After receiving all the
optimal responses {β ij
�}Cij∈Si from DESs, the agent is able to
compute its current profit Li according to (8). If this profit Li
is larger than the maximum profit got before, it updates the
global variables p̃i
b and Li∗. The result (p̃i
b, {β ij∗ }Cij∈Si) returned
by Algorithm 1 satisfies the definition of SE shown as (20)
and (21), thus the game G reaches the SE. Here, the interval
[pm, pc] can be split at any step length.
VI. NUMERICAL SIMULATION
In this section, we will test the efficiency of our credit-based
PoW mechanism and conduct several simulations to model the
interactions between the APG and DESs in a smart city.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
2048 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 3, FEBRUARY 1, 2021
Fig. 5. Average time to generate a new block under the different π and
threshold functions. (a) δ = 10, linear model. (b) δ = 20, quadratic model.
A. Simulation Setup
To test our credit-based PoW mechanism, we give a
blockchain network with 100 APGs (consensus nodes) with
the same computational power and there are at most k com-
munities in each city. It implies that an APG can finish at most
k transactions with the DESs in its city at each round. Then,
we need to define the threshold function f (�i(T), D). Under
the difficulty D and f (0, D), the average time to generate a
new block among these 100 consensus nodes is given by 10
min generally. During the previous δ rounds, each agent can
finish at most kδ transactions with its DESs. Under the linear
model, we define f (�i(T), D) as
f (�i(T), D) =
(
1+ �i(T)
kδ
· γ
)
· f (0, D). (24)
And under the quadratic model, we have
f (�i(T), D) =
(
1+
(
�i(T)
kδ
)2
· γ
)
· f (0, D) (25)
where �i(T) = Crediti(T) − Crediti(T − δ). If T − δ ≤ 0,
we have Crediti(T − δ) = 0. When �i(T) = kδ, f (�i(T), D)
reaches its maximum value (1+ γ ) · f (0, D).
To model the interactions between the APG and DESs in
a smart city, we give this city S = {{APG}, {C1, C2, . . . , Cn}}
and denote the number of communities in this city by n.
Typically, the calorific value of natural gas is 3.6× 107 J/m3
at the standard atmosphere and the measure for electricity is
kW · h, where 1 kW · h = 3.6× 106 J. According to the latest
U.S., retail price of electricity, that is, 0.2 dollar/kW·h, hence,
we can set ps = 5.5× 10−8 dollar/J. In our B-ET ecosystem,
it can be considered as ps = 5.5 × 10−8 coin/J equivalently.
We assume the cost price pc = 4 × 10−8 coin/J because the
cost price should be less than retail price. Besides, for these
DESs in this city, we assume their maximum gas consumption
Fj
m = 200 m3 for Cj ∈ S and ηpgu = 1 for simplicity, because
these settings does not affect the properties of our objective
functions. From (14), we have pc ≤ e ·pm, thus we are able to
assume pm = 2×10−8 coin/J, kj
1 ∈ [167.6093, 227.8046], and
kj
2 = 0 for Cj ∈ S. Thereby we have the range of variables,
that is, β j ∈ [0, 1] for each DES and pb ∈ [2×10−8, 4×10−8]
for the APG.
Fig. 6. Probability of consensus nodes with different credit increments to
win the miner election at round 50. (a) δ = 10, linear model. (b) δ = 20,
quadratic model.
TABLE I
DISTRIBUTION OF CREDIT INCREMENT FOR AGENT AT π = 20%
B. Simulation Results
First, we show the performance analysis and security anal-
ysis of our credit-based PoW mechanism as follows.
1) Performance Analysis: We default the maximum num-
ber of transactions (maximum credit increment) for an
agent at each round is k = 30 and define a parameter
π ∈ [0, 1] to show the percentage of nodes whose credit
increment at each round is high. Take π = 20% as an
example, there are 20% consensus nodes whose number
of completed transactions at each round θi(t) is sampled
from [20, 30] uniformly and remaining nodes is split into
two parts half and half distributed in [0, 10] and [10, 20]
uniformly. The distribution at π = 20% is shown in
Table I. Fig. 5 draws the average time to generate a
new block under different settings. Shown as Fig. 5, the
average time to reach the consensus reduces as the num-
ber of consensus increases until reaching the stationary
point, which is equal to δ. After reaching the station-
ary point, we can see that the average time decreases
with the increase of π because the proportion of nodes
with high credit increments increases, which results in
the falling of difficulty of their hash puzzles. Thereby it
reduces latency for reaching a consensus.
2) Security Analysis: As mentioned early, we have a basic
assumption that the more transactions have been com-
pleted by an agent during the previous δ rounds, the
more credible this agent is. Fig. 6 draws the probability
of consensus nodes with different credit increments to
win the miner election. At the π = 40%, the probabil-
ity of nodes with θ(t) ∼ U(20, 30) to win the miner
should be equal to 40% under the classic PoW mech-
anism. However, shown as Fig. 6(a), this probability
soars to 53.93%, which implies that those more credible
nodes have a better chance to win the miner. Thereby it
improves the security of our B-ET ecosystem.
Then, we demonstrate the interactions between the APG and
DESs and SE in a smart city as follows.
1) Concavity of Functions: Consider a city S that has
only one community, we define the DES’s parameter
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
GUO et al.: BLOCKCHAIN-ENABLED ECOSYSTEM FOR DISTRIBUTED ELECTRICITY TRADING IN SMART CITY 2049
Fig. 7. Objective function of entities, including APG and DES, in the city S
under the different parameter settings. (a) DES’s utility U. (b) APG’s profit L.
Fig. 8. Process of entities in the city S converged to SE under the differ-
ent parameter settings by following Algorithm 1. (a) APG’s offering price.
(b) DESs’ dispatching factor.
as k1 = 197.7069 and APG’s electric load R = 0.
Fig. 7 draws the objective function of entities in the
city S. Shown as Fig. 7(a), we set DES’s parameter
k1 = 197.7069. As β increases, these utility functions
increase first and then decrease regardless of what the
offered price is. It proves that the utility function U
defined in (6) is concave. Furthermore, as pb increases,
the point of maximum utility moves to the left, which
means that this DES tends to allocate more electricity
that sold to the APG by decreasing its β in order to
obtain the maximum utility. Shown as Fig. 7(b), these
profit functions increase first and then decrease regard-
less of what the k1 is. It proves that the profit function L
defined in (16), is concave. Furthermore, as k1 increases,
the point of maximum profit moves to the right, which
means that the APG has to offer a higher price to buy
the electricity from DES in order to obtain the maxi-
mum profit. Here, a larger k1 implies the electricity that
used to serve community contributes much to the total
utility, thus the APG has to offer a higher price.
2) SE: Consider a city S that has five communities, we
define there DESj’s parameter where j ∈ {1, . . . , 5}
as k1
1 = 168.00, k2
1 = 182.75, k3
1 = 197.50, k4
1 =
212.25, and k5
1 = 227.00, and APG’s electric load
R = 2·∑Cj∈S Xj. Now, we can evaluate the performance
of the convergence to the SE by Algorithm 1. Fig. 8
draws the process of converging to SE in the city S by
following Algorithm 1. In the beginning, the price pb
offer by APG is low, the DESs are unwilling to sell their
electricity to the APG, hence, their dispatching factor is
very high. By interacting with DESs in this city, the APG
adjusts its strategy (increases its offering price) gradu-
ally in each iteration to encourage DESs to sell more
TABLE II
APG’S PROFITS OBTAINED IN CENTRALIZED AND DISTRIBUTED
MANNER UNDER DIFFERENT # OF DESS IN THE CITY
electricity in order to obtain a larger profit. After the
32nd iterations, the APG gains the largest profit at the
offering price 2.64× 10−8 coin/J, which is the point of
equilibrium, thus their SE is reached.
3) Centralized Versus Distributed: We have discussed
before that the APG can acquire the optimal offering
price directly in a centralized manner if all parameters
of DESs in its city are known. Here, we can compare
the performance of profits that are obtained in both the
centralized and our proposed distributed manner. The
comparison results are shown in Table II. Here, we set
electric load R = 30 ·Xj and kj
1 for j ∈ {1, 2, . . . , 30} are
sampled uniformly from [167.6093, 227, 8046]. Shown
as Table II, the profits of APG at the SE of this game
obtained by following our distributed algorithm are very
close to that computed in a centralized manner regard-
less of the number of DESs in this city. The profit in
a centralized manner is slightly higher than that under
the distributed algorithm, thus its performance is better
because of complete information. We execute 100 iter-
ations between [2 × 10−8, 4 × 10−8], thus the stride is
2 × 10−10. To improve the accuracy of the distributed
algorithm further, we can reduce the stride by increas-
ing the number of iterations. In addition, we assess how
the profit of APG changes with the different number of
DESs in this city by comparing with the base profit. The
base profit is computed under the circumstance that there
is no DES, which is equal to (ps − pc) · R = 3240. This
implies that all required energy R has to be generated
at the cost price. Accordingly, the base profit is lower
than that involved with DESs. Next, the profit of APG
increases gradually with the increase of the number of
DESs in this city, because the APG is able to buy more
electricity from DESs at a price lower than cost price.
Thus, the profit will be increased certainly. The incre-
ment in Table II measures the performance compared to
base profit because of DESs’ existence, namely, quanti-
fied by actual profit divided by base profit. The effect is
getting more and more significant that increasing from
108% to 147% as the number of DESs increases.
VII. CONCLUSION
In this article, we investigate a distributed electricity trading
problem systematically. First, we propose the B-ET ecosystem
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
2050 IEEE INTERNET OF THINGS JOURNAL, VOL. 8, NO. 3, FEBRUARY 1, 2021
to solve the privacy protection and transaction security issues
in distributed electricity trading. To overcome the shortcom-
ings of PoW and PoS, we design a smart contract for executing
transactions and propose a credit-based PoW consensus mech-
anism. Then, we model the interactions between the agent and
DESs in a smart city by Stackelberg game and take the CCHP
system as an example to show this scene really. We prove that
the SE between the agent and DESs in a city is guaranteed
to exist and be unique, and propose a distributed algorithm
that is able to reach the SE by limited iterations. Finally, the
numerical simulations indicated that our model is valid and
our algorithm is verified to be correct and efficient.
REFERENCES
[1] P. S. Georgilakis and N. D. Hatziargyriou, “Optimal distributed gener-
ation placement in power distribution networks: Models, methods, and
future research,” IEEE Trans. Power Syst., vol. 28, no. 3, pp. 3420–3428,
Aug. 2013.
[2] J. Matamoros, D. Gregoratti, and M. Dohler, “Microgrids energy trading
in islanding mode,” in Proc. IEEE 3rd Int. Conf. Smart Grid Commun.
(SmartGridComm), Tainan, Taiwan, 2012, pp. 49–54.
[3] Y. Wu, X. Tan, L. Qian, D. H. Tsang, W.-Z. Song, and L. Yu, “Optimal
pricing and energy scheduling for hybrid energy trading market in future
smart grid,” IEEE Trans. Ind. Informat., vol. 11, no. 6, pp. 1585–1596,
Dec. 2015.
[4] N. Z. Aitzhan and D. Svetinovic, “Security and privacy in decentral-
ized energy trading through multi-signatures, blockchain and anonymous
messaging streams,” IEEE Trans. Depend. Secure Comput., vol. 15,
no. 5, pp. 840–852, Sep./Oct. 2018.
[5] K. Christidis and M. Devetsikiotis, “Blockchains and smart contracts for
the Internet of Things,” IEEE Access, vol. 4, pp. 2292–2303, 2016.
[6] M. Li et al., “CrowdBC: A blockchain-based decentralized framework
for crowdsourcing,” IEEE Trans. Parallel Distrib. Syst., vol. 30, no. 6,
pp. 1251–1266, Jun. 2019.
[7] Z. Yang, K. Yang, L. Lei, K. Zheng, and V. C. Leung, “Blockchain-based
decentralized trust management in vehicular networks,” IEEE Internet
Things J., vol. 6, no. 2, pp. 1495–1505, Apr. 2019.
[8] D. Wu and R. Wang, “Combined cooling, heating and power: A review,”
Progr. Energy Combust. Sci., vol. 32, nos. 5–6, pp. 459–495, 2006.
[9] C. Cecati, C. Citro, A. Piccolo, and P. Siano, “Smart operation of wind
turbines and diesel generators according to economic criteria,” IEEE
Trans. Ind. Electron., vol. 58, no. 10, pp. 4514–4525, Oct. 2011.
[10] D. Zhang, N. Shah, and L. G. Papageorgiou, “Efficient energy consump-
tion and operation management in a smart building with microgrid,”
Energy Convers. Manag., vol. 74, pp. 209–222, Oct. 2013.
[11] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain,
“Enabling localized peer-to-peer electricity trading among plug-in hybrid
electric vehicles using consortium blockchains,” IEEE Trans. Ind.
Informat., vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[12] C. Liu, K. K. Chai, X. Zhang, E. T. Lau, and Y. Chen, “Adaptive
blockchain-based electric vehicle participation scheme in smart grid
platform,” IEEE Access, vol. 6, pp. 25657–25665, 2018.
[13] S. Aggarwal, R. Chaudhary, G. S. Aujla, A. Jindal, A. Dua, and
N. Kumar, “EnergyChain: Enabling energy trading for smart homes
using blockchains in smart grid ecosystem,” in Proc. 1st ACM MobiHoc
Workshop Netw. Cybersecurity Smart Cities, 2018, pp. 1–6.
[14] Z. Zhou, B. Wang, M. Dong, and K. Ota, “Secure and efficient
vehicle-to-grid energy trading in cyber physical systems: Integration of
blockchain and edge computing,” IEEE Trans. Syst., Man, Cybern., Syst.,
vol. 50, no. 1, pp. 43–57, Jan. 2020.
[15] S. Maharjan, Q. Zhu, Y. Zhang, S. Gjessing, and T. Basar, “Dependable
demand response management in the smart grid: A Stackelberg game
approach,” IEEE Trans. Smart Grid, vol. 4, no. 1, pp. 120–132,
Mar. 2013.
[16] F.-L. Meng and X.-J. Zeng, “A Stackelberg game-theoretic approach
to optimal real-time pricing for the smart grid,” Soft Comput., vol. 17,
no. 12, pp. 2365–2380, 2013.
[17] S. Bu and F. R. Yu, “A game-theoretical scheme in the smart grid with
demand-side management: Towards a smart cyber-physical power infras-
tructure,” IEEE Trans. Emerg. Topics Comput., vol. 1, no. 1, pp. 22–32,
Jun. 2013.
[18] W. Tushar et al., “Three-party energy management with distributed
energy resources in smart grid,” IEEE Trans. Ind. Electron., vol. 62,
no. 4, pp. 2487–2498, Apr. 2015.
[19] W. Tushar, J. A. Zhang, D. B. Smith, H. V. Poor, and S. Thiébaux,
“Prioritizing consumers in smart grid: A game theoretic approach,” IEEE
Trans. Smart Grid, vol. 5, no. 3, pp. 1429–1438, May 2014.
[20] S. Bu, F. R. Yu, Y. Cai, and X. P. Liu, “When the smart grid meets
energy-efficient communications: Green wireless cellular networks pow-
ered by the smart grid,” IEEE Trans. Wireless Commun., vol. 11, no. 8,
pp. 3014–3024, Aug. 2012.
[21] G. E. Asimakopoulou, A. L. Dimeas, and N. D. Hatziargyriou, “Leader–
follower strategies for energy management of multi-microgrids,” IEEE
Trans. Smart Grid, vol. 4, no. 4, pp. 1909–1916, Dec. 2013.
[22] P. Samadi, A.-H. Mohsenian-Rad, R. Schober, V. W. Wong, and
J. Jatskevich, “Optimal real-time pricing algorithm based on utility
maximization for smart grid,” in Proc. 1st IEEE Int. Conf. Smart Grid
Commun., Gaithersburg, MD, USA, 2010, pp. 415–420.
[23] W. Tushar, W. Saad, H. V. Poor, and D. B. Smith, “Economics of electric
vehicle charging: A game theoretic approach,” IEEE Trans. Smart Grid,
vol. 3, no. 4, pp. 1767–1778, Dec. 2012.
[24] D. Johnson, A. Menezes, and S. Vanstone, “The elliptic curve digi-
tal signature algorithm (ECDSA),” Int. J. Inf. Security, vol. 1, no. 1,
pp. 36–63, 2001.
[25] Y.-L. Gao, X.-B. Chen, Y.-L. Chen, Y. Sun, X.-X. Niu, and Y.-X. Yang,
“A secure cryptocurrency scheme based on post-quantum blockchain,”
IEEE Access, vol. 6, pp. 27205–27213, 2018.
[26] W. Yin, Q. Wen, W. Li, H. Zhang, and Z. Jin, “An anti-quantum trans-
action authentication approach in blockchain,” IEEE Access, vol. 6,
pp. 5393–5401, 2018.
[27] T. Başar and G. J. Olsder, Dynamic Noncooperative Game Theory, 2nd
Edition. Philadelphia, PA, USA: Soc. Ind. Appl. Math., 1998.
Jianxiong Guo received the B.S. degree in energy
engineering and automation from the South China
University of Technology, Guangzhou, China, in
2015, and the M.S. degree in chemical engineer-
ing from the University of Pittsburgh, Pittsburgh,
PA, USA, in 2016. He is currently pursu-
ing the Ph.D. degree with the Department of
Computer Science, University of Texas at Dallas,
Richardson, TX, USA.
His research interests include social networks,
data mining, IoT application, blockchain, and
combinatorial optimization.
Xingjian Ding received the B.E. degree in electronic
information engineering from Sichuan University,
Sichuan, China, in 2012, and the M.S. degree in soft-
ware engineering from Beijing Forestry University,
Beijing, China, in 2017. He is currently pursuing
the Ph.D. degree with the School of Information,
Renmin University of China, Beijing.
His research interests include wireless recharge-
able sensor networks algorithm, design and analysis,
and blockchain.
Weili Wu (Senior Member, IEEE) received the M.S.
and Ph.D. degrees from the Department of Computer
Science, University of Minnesota, Minneapolis, MN,
USA, in 1998 and 2002, respectively.
She is currently a Full Professor with the
Department of Computer Science, University of
Texas at Dallas, Richardson, TX, USA. Her research
mainly deals in the general research area of data
communication and data management. Her research
focuses on the design and analysis of algorithms
for optimization problems that occur in wireless
networking environments and various database systems.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:20:32 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice