Original file was jvis_final.tex
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, Aug. 2019                                        4093 
Copyright ⓒ 2019 KSII 
MMOG User Participation Based 
Decentralized Consensus Scheme and 
Proof of Participation Analysis on the 
Bryllite Blockchain System 
 
Jusik Yun1, Yunyeong Goh 1, Jong-Moon Chung1*, OkSeok Kim2,3, SangWoo Shin2,3, Jin Choi2,3, 
and Yoora Kim2,3 
1 School of Electrical and Electronic Engineering, Yonsei University  
Seoul, Republic of Korea 
 [e-mail: e-mail: awp212@yonsei.ac.kr, rhdbsdud@yonsei.ac.kr, jmc@yonsei.ac.kr] 
2 HanbitSoft, Seoul, Republic of Korea, 3 Bryllite, Hong Kong 
[e-mail: jade@hanbitsoft.co.kr, swoows@hanbitsoft.co.kr, program@t3.co.kr, yoora@t3.co.kr] 
*Corresponding author: Jong-Moon Chung 
 
Received April 11, 2019; revised May 25, 2019; accepted June 13, 2019;  
published August 31, 2019 
 
Abstract 
 
Proof of Work (PoW) based blockchains have limitations in throughput, time consumption, 
and energy efficiency. In these systems, a miner will consume significant time and resources 
to obtain a reward for contributing to the blockchain. To overcome these limitations, recent 
research on blockchains are focused on accelerating the speed, scalability, and enhancing the 
security level. By enhancing specific procedures of blockchain system, the level of data 
integrity supported by the blockchain can become more robust, and efficient. In this paper, a 
new blockchain consensus model based on the Bryllite Consensus Protocol (BCP) is proposed 
to support a hyper-connected massively multiplayer online game (MMOG) ecosystem. The 
BCP scheme enables users to participate directly in new consensus processes through a Proof 
of Participation (PoP) algorithm. In this model, the consensus algorithm has a simpler form 
while maintaining high security level. In addition, because the BCP scheme gives users an 
equal chance to make a contribution to the blockchain, rewards are distributed in an equal 
fashion, which motivates user participation. The analysis of the proposed scheme is applied to 
the Bryllite consortium blockchain system (homed in Hong Kong), which is a new blockchain 
network developed for international game industries, gamers, and game events. 
 
 
Keywords: Blockchain, Bryllite, Bitcoin, Decentralized Consensus Algorithm, Ethereum, Proof of 
Participation. 
A preliminary version of this paper was presented at ICONI 2018, where it received the Outstanding Paper Award.  
This research was supported by the MSIT (Ministry of Science and ICT) of the Republic of Korea, under the ITRC 
(Information Technology Research Center) support program (IITP-2019-2018-0-01799) supervised by the IITP 
(Institute for Information & communications Technology Promotion).  
 
http://doi.org/10.3837/tiis.2019.08.015                                                                                                                ISSN : 1976-7277 
4094                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
1. Introduction 
Blockchain is a distributed ledger system that ensures data integrity, which was initially 
proposed in a paper on Bitcoin by Satoshi Nakamoto [1]. A blockchain used for Bitcoins 
would need to maintain a decentralized database structure without being under the control of a 
centralized organization by sharing a ledger with mining nodes. To maintain data integrity, 
each node stores the same block and uses data chaining and hash functions. The method used 
to reliably determine the node that generated the block is based on the consensus algorithm. In 
the Proof of Work (PoW) consensus algorithm, mining nodes use SHA-256 to find a hash 
output value less than the target hash value corresponding to a predefined difficulty level. 
Then, the mining node that finds the corresponding hash value is selected to generate a block 
that is added to the blockchain. The difficulty of the hash calculation is adjusted so that one 
block is generated every 10 minutes for a Bitcoin, while all other competing mining nodes 
waste a huge amount of electric energy due to the computation process of the hash calculation. 
Meanwhile, with the continuous development of blockchain technology, the application range 
has expanded in to fields such as finance, game industry, and social network services (SNSs). 
Especially, the application of blockchains in the game industry can help build a 
hyper-connected game ecosystem for various massively multiplayer online games (MMOGs) 
supported by a common blockchain service network. In networks supporting MMOGs, there 
are numerous users and MMOG service providers, therefore, network scalability is essential 
[2]. Blockchain technology is now being linked across various industries, and consensus 
algorithms such as PoW are inefficient and unsuitable to satisfy user quality of service (QoS) 
requirements in networks supporting MMOGs, which need quick transactions. Therefore, in 
this paper, a novel proof of participation (PoP) consensus mining scheme based on user 
participation is proposed, and is applied to the Bryllite game blockchain system and its 
performance is analyzed [3]. 
The unique features of the proposed blockchain algorithm are characterized by the following 
two aspects. First, not only the miners but also the users (clients) can participate in the 
consensus process and receive a compensation. This motivates the user to join the blockchain 
network. Second, only one hash computation needs to be conducted for each user during the 
PoP process, which is opposing to the repetitive hash computations that were conducted by all 
miners in the PoW mechanism. In addition, the probability of receiving individual users block 
rewards is fairly equal, which promotes continuous monitoring and participation to the 
blockchain by its users. 
In this paper, the proposed PoP based consensus algorithm is named the Bryllite Consensus 
Protocol (BCP). The following sections of this paper are organized as follows. Section 2 
presents the taxonomy of blockchain consensus algorithms, the system model of the BCP is 
provided in section 3, the BCP algorithm’s analysis is in section 4, the simulation results and 
discussion are in section 5, and the paper is concluded in section 6. 
2. Taxonomy of Blockchain Consensus Algorithms 
In this section, the characteristics of blockchains and the corresponding consensus algorithms 
are described. Blockchains can be classified into permissionless or permissioned depending on 
the network purpose. 
 
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4095 
2.1 Permission-less Blockchain 
In a permissionless blockchain, there are no specific restrictions to participate in the network. 
Since network members are not pre-validated, a strict consensus algorithm is used to verify 
untrusted distributed ledgers of participants [4]. PoW is a typical consensus algorithm used in 
permissionless blockchains. When PoW is used, block miners solve the SHA-256 based 
crypto puzzle consuming an enormous amount of hash calculations, which is a means of 
defending against well-known Sybil attacks [5]. This expensive method of consensus is a 
mechanism triggered by the nature of the network that any user can participate in the 
blockchain without permission. Such blockchains are typically classified as a public 
blockchain, thus, public blockchains are generally permissionless blockchains. 
Permissionsless blockchains are focused on decentralization, in which Bitcoin and Ethereum 
are represenative examples. 
2.2 Permissioned Blockchain 
In a permissioned blockchain, the distributed ledger is confirmed by pre-validated users. Since 
the trust of the participants is guaranted, there is less motivation to use a resource consuming 
consensus algorithm such as PoW. The block mining process is performed using a bounded 
asynchronous consensus algorithm, where the Practical Byzantine Fault Tolerance (PBFT) is a 
representative example [6]. Such schemes are much faster than permissionless consensus 
algorithms, such as PoW, but these schemes have the disadvantage that the message 
complexity increases signifincantly when the network is expanded [7]. Therefore, Byzantine 
Fault Tolerance (BFT) based consensus algorithms experience scalability issues. Consortium 
or private blockchains belong to the category of permissioned blockchains. In particular, these 
consortium blockchains appear in the form of a prospective blockchain that are mainly used in 
various service chain models by many companies [8-10]. 
3. BCP System Model 
The Bryllite Consensus Protocol (BCP) has been proposed to serve as a new type of 
blockchain network for the game industry ecosystem, enabling cryptocurrency exchange 
between companies, conferences, consortiums, and gamers. The BCP system architecture can 
be classified into four major components as shown in Fig. 1. 
 
Fig. 1.  Overall process of the BCP PoP 
4096                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
1) Master Node (MN): A mining node that participates in the consensus of the Bryllite 
blockchain. One MN is assigned to each game. 
2) Game Client: A game user that plays the game(s). 
3) Game Server: A game server will manage the local game database, and also store and 
manage the transactions that occur during the game(s). However, game servers do not 
belong to the blockchain network, instead they interact with the Bryllite blockchain 
network via the bridge service node described below. 
4) Bridge Service Node: The bridge service node manages bidirectional communication 
between the MN and game servers. It also manages the asymmetric keys (i.e., public 
and private keys) of the game client. 
BCP consists of two steps: PoP and Majority Voting. In the PoP process, each MN selects a 
representative game client with a minimum hash value. In the Majority Voting process, each 
MN proposes a hash value for its representative game client, and the MN that proposes the 
lowest output hash value is chosen as the block generation node, which will receive a mining 
compensation for its contribution. Transactions from users are propagated in the network and 
accumulated in the transaction pool (e.g., Mempool in Bitcoin). In the proposed blockchain 
model, each MN generates a candidate block based on the consensus interval (T), and the 
winning miner is selected by the PoP based on majority vote, which decides the block to 
connect to the blockchain.   
 
3.1 Proof of Participation (PoP) 
The overall process of the PoP is described in the following, which is based on an individual 
MN. The symbols and abbreviations used in the text are summarized in Table 1. 
 
 
Table 1. Symbols and Abbreviation 
Symbol Description 
𝐺𝑘 kth game server 
𝐵𝑘 kth bridge node 
𝑀𝑘 kth MN 
𝑁𝑘 Active game client connected to the kth game server 
𝐶𝑘,𝑖 Client i of game k 
H () Hash function 
𝑃𝐾𝑘,𝑖, 𝑆𝐾𝑘,𝑖 Public and private key of game client i of game k 
𝑀𝑘
𝑝𝑘 ,𝑀𝑘
𝑠𝑘 Public and private key of 𝑀𝑘 
𝛹𝑘 Block header (BH) of 𝑀𝑘 
𝛹𝑘,𝑖 BH signed by client i of game k 
𝛹𝑘∗ BH with minimum hash value in game k 
(Representative BH of MN k) 
𝛹𝑉∗ BH selected from majority vote 
Ξ𝑘 Block generated by 𝑀𝑘 
𝑆𝑖𝑔𝑛(𝛹,𝑆𝐾𝑘,𝑖) Sign of game client i of game k in the BH 
𝑆𝑘,𝑖 Signature of client i of game k 
𝑉(𝑆𝑖 ,𝛹,𝑃𝐾𝑘,𝑖) 
 
Verification of signature of client i of game k through 
the public key 
T Consensus interval 
𝑃𝑘  Set of 𝛹 received at the propose step in 𝑀𝑘 
𝑉𝑘  Set of 𝛹 received at the vote step in 𝑀𝑘 
𝐶𝑘 Set of messages received at the commitment step in 𝑀𝑘 
 
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4097 
A) Background Key Management Process 
A game client will register to the game server to participate in a game. Then the server 
generates a private key using the private key generator (PKG), which is returned to the user. 
The generated public and private key set of the entire user is managed by the bridge service 
node. When a client registers or deletes its own account, the same process is performed in the 
bridge service node. 
 
B) Block Header (BH) Distribution 
A MN will generate a BH Ψ for use in each round of the consensus and send it to the bridge 
service node. The block header contains the block version, previous block hash, the Merkle 
root hash (i.e., combined hash value of the transactions), time-stamp, Tx count (i.e., maximum 
transaction count in one block), and gamer signature. The gamer signature consists of a 
signature and public key. Initially, the gamer signature is set to null and it will be signed by the 
client in the PoP process. The structure of the block header is shown in Fig. 1. First, the bridge 
service node sends the received block header to the game server, which is represented in (1). 
The game server k sends 𝛹𝑘 to the active game client 𝐶𝑘,𝑖 ∈ 𝑁𝑘, where (k, i) denotes client i of 
game k in (2). 
 
𝑀𝑘   
𝛹𝑘
��   𝐵𝑘    
𝛹𝑘
�� 𝐺𝑘                                                         (1) 
𝐺𝑘   
𝛹𝑘
��    𝐶𝑘,𝑖   ∈ 𝑁𝑘                                                            (2) 
 
C) Client signature 
After the active client receives the 𝛹𝑘 that has the gamer signature space as null, the client 
hashes the received ΒΗ through the hash function H(⋅) based on SHA256, which has strong 
collision resistance. Each game client generates a signature using its private key (SK) with a 
hash value in the ΒΗ (H(𝛹𝑘)). The public key generator (PKG) can create a large scale of 
random unique numbers to be used in assignment to many game clients. In (3), the signature of 
game client i is represented as 𝑆𝑘,𝑖 = 𝑆𝑖𝑔𝑛(𝐻(𝛹𝑘),𝑆𝐾𝑘 ,𝑖). The ith game client update pair of 
the signature and public key is denoted as (𝑆𝑘,𝑖, 𝑃𝐾𝑘,𝑖) in the gamer signature space in (4). 
Finally,  the client will send 𝛹𝑘,𝑖 to the MN, where in (5), 𝛹𝑘,𝑖 represents the signed block 
header of client i in game k. 
 
𝑆𝑘,𝑖 = 𝑆𝑖𝑔𝑛(𝐻(𝛹𝑘), 𝑆𝐾𝑘 ,𝑖)                                           (3) 
𝛹𝑘,𝑖 = 𝛹𝑘 ∪ (𝑆𝑘,𝑖 + 𝑃𝐾𝑘,𝑖)                                          (4) 
∑ 𝑐𝑘 ,𝑖
𝑁𝑘
𝑖=1 ∈ 𝑁𝑘   
(𝛹𝑘,𝑖)
�⎯⎯�  𝑀𝑘                                               (5) 
 
D) Selection Representative Client 
The MN receives the block headers that include the signature and PK pairs sent by all users 
connected to the game. Using 𝑃𝐾𝑘,𝑖 , the signature 𝑆𝑘 ,𝑖 can be decrypted to H(𝛹𝑘), which is the 
value sent by client i that represents 𝑉�𝑆𝑘,𝑖 ,𝐻(𝛹𝑘),𝑃𝐾𝑘,𝑖�. The MN can identify the signature 
from all clients if 𝑉�𝑆𝑘,𝑖 ,𝐻(𝛹𝑘),𝑃𝐾𝑘,𝑖� = 𝐻(𝛹𝑘) is satisfied. For a signature that has been 
verified, client 𝑖∗ with the minimum hash value is designated as the representative of 𝑀𝑘, as 
defined in (6). In addition, the signed block header of client 𝑖∗ (i. e. ,𝛹𝑘∗) is the representative 
block header of 𝑀𝑘, as presented in (7). 
 
 𝑖∗ = 𝑎𝑟𝑔min𝑖 𝐻(𝛹𝑘,𝑖)                                               (6) 
4098                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
Pseudocode 1.  PoP operation process 
Algorithm: Proof of Participation (PoP) 
𝛹: Block Header; PK/SK: Public/Private Key 
Broadcasting Block header to game client 
For every consensus 
Generate 𝛹, send to bridge service node 
Bridge service sends 𝛹 to game server  
Server delivers 𝛹 to connected game client 
Signature Generation at the Game Client 
For each game k 
Input: 𝛹, 𝑃𝐾𝑘= (𝑃𝐾𝑘,1 ,𝑃𝐾𝑘,2 ,⋯ ,𝑃𝐾𝑘,𝑁𝑘), 
𝑆𝐾𝑘= (𝑆𝐾𝑘,1 ,𝑆𝐾𝑘,2 ,⋯ ,𝑆𝐾𝑘,𝑁𝑘) 
𝑁𝑘: number of active clients 
Generate H(𝛹) 
For each game client i 
Generate 𝑆𝑘,𝑖 = 𝑆𝑖𝑔𝑛�𝛹𝑘 ,𝑆𝐾𝑘,𝑖� 
Output: 𝛹𝑘 ,𝑖  
Send output to MN k 
Signature Verification  
Input: S = (𝑆𝑘,1 ,𝑆𝑘,2 ,𝑆𝑘,3 ,⋯ , 𝑆𝑘,𝑁), PK set  
PK = (𝑃𝐾𝑘,1,𝑃𝐾𝑘,2 ,⋯ ,𝑃𝐾𝑘,𝑁) 
For each client i 
If 𝑉�𝑆𝑘 ,𝑖 ,𝐻(𝛹𝑘),𝑃𝐾𝑘,𝑖� = 𝐻(𝛹𝑘), 
             Generate 𝐻(𝛹𝑘 ,𝑖)  
       Else  
             Delete 𝛹 of client i 
Generate hash set 𝐻�𝛹𝑘,𝑖� 
Find 𝑖∗ = 𝑎𝑟𝑔min𝑖 𝐻(𝛹𝑘,𝑖) 
Output: MN selects client 𝑖∗  and decides 
representative 𝛹𝑘∗= 𝛹𝑘,𝑖∗. 
 
𝛹𝑘∗ = 𝛹𝑘,𝑖∗                                                      (7) 
 
Each node compares the 𝐻(𝛹𝑘,𝑖) values of all clients created in each game and sets the block 
header that has the lowest hash as the representative ΒΗ of each game. The overall PoP process 
is described in Pseudocode 1. In the PoP process, MNs present their ΒΗ in every round, and 
the users sign the ΒΗ and returns it to the MN. Since the ΒΗ information received from the MN 
is fixed, there is only one possible signed block that the user can submit, depending on its 
private key. Thus, users cannot attempt mining to achieve a smaller hash value, which is why 
there is no mining process computation burden in the BCP scheme. In addition, it needs to be 
noted that if a malicious user attempts to perform a Sybil attack in the BCP PoP process, it will 
be nearly impossible, as the bridge server node will easily notice irregular user account 
changes (based on multiple keys being used) and can easily apply user authentication 
procedures along with gamer profile status checks (e.g., game log monitoring, minimum 
duration of game playing time, etc.) to prevent Sybil attacks. 
 
 
 
 
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4099 
 
3.2 Majority Voting 
In the majority voting process, each MN broadcasts its representative ΒΗ and votes for the 
minimum hash output. After verifying which ΒΗ has the minimum hash value, that block is 
selected and added to the blockchain, and a reward is given to the provider of that block. When 
sending and receiving a ΒΗ or when voting, pairs of public keys (PKs) and private keys (SKs) 
of each MN (𝑀𝑘
𝑠𝑘 ,𝑀𝑘
𝑝𝑘) are used in the certification process.  
 
A) Propose 
In the Propose phase, the MNs broadcast their representative ΒΗ. Each MN selects a 
representative client 𝑖∗ and delegate ΒΗ 𝛹𝑘∗. The MNs of each game k signs 𝛹𝑘∗ with its own 
private key, 𝑀𝑘
𝑠𝑘, and propagates it to all other MNs, as presented in (8).  
 
∑ 𝑀𝑘
𝑛
𝑘=1 𝑆𝑖𝑔𝑛(𝛹𝑘∗ ,𝑀𝑘
𝑠𝑘)
�⎯⎯⎯⎯⎯⎯⎯⎯⎯�  ∑ 𝑀𝑘
𝑛
𝑘=1                                         (8) 
 
Next, each MN receives all block headers from other MNs satisfying 𝑉�𝑀𝑘
𝑠𝑘 ,𝛹𝑘∗ ,𝑀𝑘
𝑝𝑘� =
𝛹𝑘∗. Then, MN k creates its own ΒΗ set 𝑃𝑘 = {𝛹𝑖∗|𝑖 = 1,⋯ ,𝑛}. 
 
B) Vote 
After receiving the BH in the Propose phase, in the Vote phase, each MN will find a ΒΗ that 
has the minimum hash value, as presented in (9), and denote it as the voted candidate of 𝑀𝑘 
(i.e., 𝐾𝑣). After the candidate is determined, each MN re-broadcasts its candidate value to all 
other nodes, as presented in (10). 
 
 
 
 
 
Fig. 2.  Example of a majority voting process based on the Propose, Vote, and Commit phase 
4100                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
 
𝑘𝑣 = 𝑎𝑟𝑔min𝑖∗{ 𝐻(𝛹𝑖∗)  ∈  𝑃𝑘 }                                    (9) 
 
∑ 𝑀𝑘
𝑛
𝑘=1
𝑆𝑖𝑔𝑛(𝛹𝐾𝑣 ,𝑀𝑘
𝑠𝑘)
�⎯⎯⎯⎯⎯⎯⎯⎯⎯�  ∑ 𝑀𝑘
𝑛
𝑘=1                                  (10) 
 
In the same way, each MN receives all candidate BHs from other MNs satisfying 
𝑉�𝑀𝑘
𝑠𝑘 ,𝛹𝐾𝑉 ,𝑀𝑘
𝑝𝑘� = 𝛹𝐾𝑉 . Then, the MN k generates its own voting candidate set 𝑉𝑘= 
�𝛹𝑘𝑉�𝑘 = 1,⋯ ,𝑛�. For example, if 𝑀1 determines the candidate to be 𝛹2∗ in the voting step, 
then 𝛹1𝑣 = 𝛹2∗. Since each node selects a candidate ΒΗ based on the minimum hash value in 
𝑃𝑘, the 𝐾𝑣 selected by each node should be equal if there is no malicious situation. Based on 
the assumption that more than half of the miners are honest, and the PKI system is secure, the 
voting decision is made using the majority rule. If the value of 𝛹𝑘∗ in set 𝑉𝑘 of node k exceeds 
the majority, this ensures that the majority of MNs have identified 𝛹𝑘∗ as the minimum hash 
value in this round. If {𝑁𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝛹𝑘∗ 𝑣𝑜𝑡𝑒𝑠|𝛹𝑘∗ ∈ 𝑉𝑘 , for ∃𝑘} > 𝑛
2
 is satisfied, then 𝛹𝑘∗ 
will represent 𝛹𝑉∗.  
 
C) Commit 
In the Commit phase, all MNs verify the block candidate’s integrity and finally determine the 
block that will be connected to the blockchain. The MN that had proposed the final candidate 
ΒΗ 𝛹𝑉∗ broadcasts the total block data including the transaction list to all other MNs. After 
receiving the blockchain data, every node verifies the previous block hash and gamer signature 
in the block. If the block is valid, the MN suggests that this block is valid and broadcasts a 
verification message (𝑚𝑠𝑔𝑣𝑎𝑙𝑖𝑑) to all other nodes. If not, it broadcasts a message claiming 
that this block is not valid (𝑚𝑠𝑔𝑖𝑛𝑣𝑎𝑙𝑖𝑑). These procedures are expressed in (11). 
 
∑ 𝑀𝑘
𝑛
𝑘=1 (𝑚𝑠𝑔𝑣𝑎𝑙𝑖𝑑  𝑜𝑟 𝑚𝑠𝑔𝑖𝑛𝑣𝑎𝑙𝑖𝑑)
�⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯�  ∑ 𝑀𝑘
𝑛
𝑘=1                             (11) 
 
After receiving the message whether this block is valid or invalid, MNs make a final decision. 
MN k will store the msg received from the other nodes in its message set 𝐶𝑘 . If the number of 
𝑚𝑠𝑔𝑣𝑎𝑙𝑖𝑑 exceeds more than half, then the transaction is confirmed, and the MNs connect that 
block to their own blockchain. The algorithm of the majority voting process is described in 
Pseudocode 2. Finally, the representative user of the MN that proposed the minimum hash 
value in the majority voting process receives a block compensation. 
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4101 
Pseudocode 2. Majority voting process 
Algorithm: Majority Voting 
𝛹𝑘∗  : ΒΗ  of minimum hash value in game k 
For each MN k  (Propose) 
MN broadcasts 𝛹𝑘∗  to other nodes 
Receive BHs from other nodes 
Generate 𝑃𝑘 = {𝛹1∗ , 𝛹2∗  , 𝛹3∗ ,…, 𝛹𝑛∗} 
For each MN k (Vote) 
   Input: 𝑃𝑘 = {𝛹1∗ , 𝛹2∗  , 𝛹3∗ ,…, 𝛹𝑛∗} 
Find 𝑘𝑣 = 𝑎𝑟𝑔min𝑘{ 𝐻(𝛹𝑘∗)  ∈  𝑃𝑘 } 
Vote on  𝛹𝐾𝑣  and broadcast to network 
Receive voted ΒΗ and generate 𝑉𝑘 
For each 𝛹𝑘∗  
  If   {𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝛹𝑘∗ ∈ 𝑉𝑘} > 𝑛
2
  𝑓𝑜𝑟 ∃𝑘 
       Set 𝛹𝑉∗ = 𝛹𝑘∗ 
Output: 𝛹𝑉∗ 
𝑀𝑉 broadcasts entire block to network  
For each MN k (Commit) 
 Input: 𝛹𝑉∗ , Total block data of 𝛹𝑉∗ 
Verify integrity of block candidate 
If block is valid  →  Generate 𝑚𝑠𝑔𝑣𝑎𝑙𝑖𝑑 
Else →   Generate 𝑚𝑠𝑔𝑖𝑛𝑣𝑎𝑙𝑖𝑑 
Output: 𝑚𝑠𝑔𝑣𝑎𝑙𝑖𝑑 or 𝑚𝑠𝑔𝑖𝑛𝑣𝑎𝑙𝑖𝑑 
MN broadcasts that message to other  
MNs and receive messages 
Set of received messages 𝐶𝑘 is made 
Input: 𝐶𝑘, Entire block of MN 𝑀𝑉 
If  {𝑛𝑢𝑚𝑏𝑒𝑟 𝑜𝑓 𝑚𝑠𝑔𝑣𝑎𝑙𝑖𝑑 ∈  𝐶𝑘} > 𝑛
2
  𝑓𝑜𝑟 ∃𝑘  
      Validate and con�irm this consensus 
      Connect block of 𝑀𝑉 to its own blockchain 
 
 
 
As example of the majority voting process is described in Fig. 2. In this Figure, three MNs 
𝑀1,𝑀2 , and 𝑀3 perform a majority voting process. In the Propose phase, all MNs broadcast 
their representative block header 𝛹1∗ ,𝛹2∗,  and 𝛹3∗. In this example, the hash of 𝛹2∗ is a global 
minimum hash value. Then, in the Vote phase, each MN votes to elect the ΒΗ that has the 
minimum hash value. But, there may be cases in which a node has problems in communication 
or a node may intentionally vote maliciously (to hinder the blockchain process) on a ΒΗ that 
does not have the minimum hash value. In this example, 𝑀3 votes for its own representative 
ΒΗ. However, because 𝛹2∗ is selected by the majority rule vote decision in this example. In 
the Commit phase, the validity of the block generated by 𝑀2 is checked, where if it is valid, Ξ2 
(i.e., the block generated by 𝑀2) is connected to its own blockchain. 
An advantage of the BCP scheme is that it depends on a majority vote mechanism. In 
comparison, the PBFT algorithm (for asynchronous blockchain networks) has an obligation to 
select a leader, where more than two-thirds of nodes have to be honest to ensure a successful 
consensus [4]. In the BCP model, the block message transmitted by each MN during the consensus 
process includes the signature of each MN's private/public key. Therefore, message modulations is 
impossible unless the entire blockchain is hacked and manipulated. In addition, the BCP model does not 
need a leader election process, therefore, it does not have to satisfy the strict consensus bound of PBFT. 
Rather, the PoP model is a competitive-based algorithm, such as PoW, which selects a block generator 
4102                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
based on the minimum hash value, but is more economical. In the BCP model, if an attempt to 
manipulate the selection process to make a malicious miner to be selected as the block generator, the 
number of false game users participating in the game must be increased rapidly. However, this can be 
prevented by periodic checking of the game log (e.g., play time, user identification) within the game 
server by the network management system. 
 
4. Analysis of the BCP Algorithm 
The proposed system has the following stable and fairness properties. 
 
Lemma 1. There is practically only one minimum hash output value, which is determined on a 
random basis in the BCP process.                                                                                            
Proof. The output hash value is 𝐻(𝛹𝑉∗) and the client’s SK and PK are fixed. However, MNs 
have different Merkle root hashes depending on their combination of transactions, and the 
hash of a ΒΗ per round for each MN are randomly determined. In other words, the output hash 
values of each MN are all different because hash values have a very low collision probability 
based on the generalized birthday problem of a n bit hash function. In (12), P (N, n) is the 
probability that among N inputs that are independent (which are n bits each and given that 
k ≪ 2𝑛), at least two will have the same hash output.  
P(𝑁,𝑛) = 1−∏ (1 − 𝑘
2𝑛
𝑁−1
𝑘=1 ) ≈ 1 −∏ 𝑒−
𝑘
2𝑛 =𝑁−1
𝑘=1 1 − 𝑒−
𝑁(𝑁−1)
2𝑛+1                 (12) 
 
If a hash algorithm such as SHA-256 or SHA-512 is used, the collision resistance of the 
security requirement is satisfied. In addition, based on the avalanche effect of the hash output 
[11], the probability that any hash output will be the minimum among all N participants is 1/N.          
∎ 
 
Lemma 2. Clients participating in each game receive a fair block generation reward.            
Proof. Let X𝑘 ,𝑖
1  denote the event that client i of game k (𝐶𝑘 ,𝑖) will be selected as the minimum 
hash in the PoP, and X𝑘 ,𝑖
2  denotes the corresponding event majority voting process. Then, the 
probability of X𝑘 ,𝑖
1  is 𝑃(X𝑘,𝑖
1 ) = 1
𝑁𝑘
 by Lemma 1. The probability of X𝑘 ,𝑖
2  is expressed as 𝑃(X𝑘,𝑖
2 ) 
= 𝑁𝑘
∑ 𝑁𝑘𝑚
𝑘=1
, where m is the total number of game servers. Let the block generation reward be R, 
then the expected reward of client 𝐶𝑘 ,𝑖 can be expressed as (11). 
 
    𝐸(𝑅𝑘 ,𝑖) = 𝑃�X𝑘,𝑖
1 �𝑃�X𝑘,𝑖
2 �𝑅 = 𝑅
𝑁𝑘
𝑁𝑘
∑ 𝑁𝑘𝑚
𝑘=1
= 𝑅
∑ 𝑁𝑘𝑚
𝑘=1
                             (13) 
 
Therefore, regardless of which user participates in which game, all clients participating in each 
game has the same expected reward, which is a new fairness property.                                    ∎ 
 
4.1 Complexity and scalability analysis 
In this section, the complexity analysis of BCP and delegated mining blockchains are provided. 
Since users can receive block rewards through PoP, scalability analysis in reference to an 
increase in number of users is important. In addition, since BCP is aimed at a highly-connected 
ecosystem of MMOGs, it is essential to consider connection of multiple games. As the number 
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4103 
of users increases, the number of MNs will correspondingly increase. To overcome 
complexity issues due to an increasing number of blockchain miners, Delegated Proof of Stake 
(DPOS) based algorithms (e.g., EOS [12]) confine mining nodes to maintain scalability in 
blockchains. Therefore, the message complexity of delegated mining is also anlyzed. The 
analysis of the existing system and the model using delegated mining are summarized in 
lemmas 3 and 4, respectively. 
 
 
Lemma 3. The message complexity M(n) in each consensus round is 𝑂(3𝑛2 − 3𝑛 − 1).      
Proof. In the Propose phase, each MN broadcasts its representative block header to the other 
n-1 nodes. Therefore, the total message complexity of the Propose phase is 𝑂(𝑛(𝑛 − 1)). In 
the Vote phase, each MN selects and broadcasts the ΒΗ that has the minimum hash among the 
received BHs during the Propose phase. Thus, the message complexity becomes 𝑂(𝑛(𝑛 − 1)). 
In the Commit phase, the majority voted node (𝑀𝑉) broadcasts a block to the other n-1 nodes, 
and each node broadcasts the verification results back through the network, resulting in a 
message complexity of 𝑂(n − 1) and 𝑂((𝑛 − 1)2), respectively. Therefore, the total message 
complexity in each consensus round is 𝑂(𝑛(𝑛 − 1) + 𝑛(𝑛 − 1) + (𝑛 − 1) + (𝑛 − 1)2) =
𝑂(3𝑛2 − 3𝑛 − 1) .                                                                                                                                  
   ∎ 
 
 
Lemma 4. The message complexity of BCP in delegation mode is 𝑂(2𝑑2 + (𝑛 − 3)𝑑 − 1), 
where d is the number of delegated miner nodes.                                                                     
 Proof. In delegation mode, d delegation nodes are selected from n MNs. The selected d nodes 
only participate in the consensus process of BCP. The (n-d) MNs that do not participate in 
consensus should broadcast their representative ΒΗ to the d mining nodes. Therefore, the 
complexity of this process is 𝑂((𝑛 − 𝑑)𝑑). The d mining nodes compare the received (n-d) 
different ΒΗ hash values and select the ΒΗ that has the minimum value as the representative 
ΒΗ. Next, the consensus process proceeds among the d mining nodes, therefore, the 
complexity is given as 𝑂(3𝑑2 − 3𝑑 − 1) based on lemma 3. As a result, the final complexity 
in delegation mode is given by 𝑂(𝑛𝑑 − 𝑑2 + 3𝑑2 − 3𝑑 − 1) = 𝑂(2𝑑2 + (𝑛 − 3)𝑑 − 1).  In 
addition, the inequality 𝑂(2𝑑2 + (𝑛 − 3)𝑑 − 1)  ≤ 𝑂(3𝑛2 − 3𝑛 − 1)  always holds if 𝑑 ≤ 𝑛.                                                                                                                           
 ∎ 
 
The message complexity graph is shown in Fig. 3. Each performance curve segment 
represents the message complexity by changing the ratio of the delegation node while keeping 
n constant. The message complexity is proportional to the delegation percentage, and the 
message complexity increases as the number of MNs increases. 
 
 
 
 
 
 
 
 
 
 
4104                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
 
 
Fig. 3. Message complexity of delegated mining 
5. Simulation Result and Discussion 
In this section, the TPS and latency simulation of the BCP algorithm is analyzed based on the 
Bryllite blockchain [13]. First, the TPS of the BCP algorithm was analyzed. The system was 
set such that one block could be generated per consensus period T. In BCP, a transaction has a 
fixed size of 128 bytes. Therefore, if the block size is 128 KB, the maximum number of 
transactions that can be contained in one block is 1024. Therefore, dividing this by the period T 
(30 seconds) results in 1024/30 = 34. Therefore, the maximum TPS according to the block 
sizes 128 KB, 256 KB, 512 KB, 1 MB, 2 MB, and 4 MB is determined as 34, 68, 136, 273, 546, 
and 1092, respectively. The maximum TPS and average TPS are shown in Table 2. 
Next, the latency is analyzed. The latency is defined as the total time required for the BCP 
algorithm to reach consensus and successfully generate a block to add on to the blockchain. 
Generally, if the BCP algorithm verifies the MN with the minimum hash value within T 
seconds, the consensus process succeeds. Otherwise, consensus fails and the overall TPS 
performance drops. Therefore, latency is an indicator of the performance against the network 
scalability, and each cycle of operation aims for completion within the time limit of T seconds. 
The experiment results of the average latency based on an increasing number of nodes is 
presented in Fig. 4.  The results show the trend of how the latency increases as the number of 
MNs increase from 50 to 500. The MN serves the role of block validator in the BCP algorithm 
and each MN serves one game each. If the block sizes are 512 KB and 1 MB, the average 
latency corresponds to about 18 seconds. When the block size is expanded to 4 MB, the 
average latency grows up to 25 seconds for the case of 500 MNs. When the block sizes are 
larger, the transaction time increases proportionally, as it takes more time to verify and commit 
to a block. Instead, if the block Commit process is completed within the consensus period T, 
then the TPS increases because more transactions can be processed. The experiment results in 
Table 2 show how the average TPS increases in proportion to the block size. However, the 
difference between maximum and average TPS also increases as the block size increases. This 
is because the latency increases as the block size increases. If the maximum latency exceeds 
the consensus period T, the consensus will be continued in the next round, which will result in 
the average TPS value decreasing. Therefore, the block size and latency are in a trade-off 
relation. In addition, approximately up to 500 games can be connected in the PoP based 
blockchain under the time limit T set in the experiments. 
 
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4105 
 
 
Fig. 4. Latency experiment results based on number of MNs    
Table 2. TPS experiment results based on block size 
Block Size 128 KB 256 KB 512 KB 1 MB 2 MB 4 MB 
Maximum TPS 34 68 136 273 546 1092 
Average TPS 33 59 128 246 482 945 
 
 
 
 
 
 
6. Conclusions 
In this paper, the BCP blockchain system is proposed, which is uses the PoP instead of the 
PoW mechanism. The BCP system model was implemented on the new Bryllite blockchain 
international game network. The proposed BCP scheme encourages user participation to the 
blockchain network by giving block rewards to individual users in a fair fashion. Future work 
will focus on building more secure and flexible fast blockchains to support massive user 
networks, game companies, and gamers that need instantaneous real-time transactions. 
References 
[1] Satoshi Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008. 
Article (CrossRef Link) 
[2] M. Ghaffari, B. Hariri, S. Shirmohammadi, and D. T. Ahmed, "A Dynamic Networking Substrate 
for Distributed MMOGs," IEEE Trans. Emerging Topics in Computing, vol. 3, no. 2, pp. 289-302, 
Jun. 2015. Article (CrossRef Link) 
[3] “Bryllite Platform Beyond the Game Boundaries,” Oct. 2, 2018. Article (CrossRef Link) 
[4] T. Neudecker and H. Hartenstein, "Network Layer Aspects of Permissionless Blockchains," IEEE 
Commun. Surveys & Tutorials, vol. 21, no. 1, pp. 838-857, 1st quarter, 2019. 
Article (CrossRef Link) 
 
https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.221.9986
https://dx.doi.org/10.1109/TETC.2014.2330520
https://www.bryllite.com/common/doc/whitePaper_ko.pdf?ver=1538504943
https://dx.doi.org/10.1109/COMST.2018.2852480
4106                                                 Jusik Yun et al.: MMOG User Participation Based Decentralized Consensus Scheme and 
Proof of Participation Analysis on the Bryllite Blockchain System 
[5] J. R. Douceur, “The Sybil attack,” in Proc. of 1st Int. Workshop Peer-to-Peer Syst., pp. 251-260, 
2002. Article (CrossRef Link) 
[6] M. Castro and B. Liskov, “Practical Byzantine Fault Tolerance,” in Proc. of the Third Symposium 
on OSDI, vol. 99, pp. 173-186, 1999. Article (CrossRef Link) 
[7] K. Yeow, A. Gani, R. W. Ahmad, J. J. P. Rodrigues, and K. Ko, “Decentralized Consensus for 
Edge-Centric Internet of Things: A Review, Taxonomy, and Research Issues,” IEEE Access, vol. 6, 
pp. 1513-1524, 2017. Article (CrossRef Link) 
[8] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain, "Enabling Localized 
Peer-to-Peer Electricity Trading Among Plug-in Hybrid Electric Vehicles Using Consortium 
Blockchains," IEEE Trans. Industrial Informatics, vol. 13, no. 6, pp. 3154-3164, Dec. 2017. 
Article (CrossRef Link) 
[9] J. Gu, B. Sun, X. Du, J. Wang, Y. Zhuang, and Z. Wang, "Consortium Blockchain-Based Malware 
Detection in Mobile Devices," IEEE Access, vol. 6, pp. 12118-12128, 2018. 
Article (CrossRef Link) 
[10] B. Shahzad and J. Crowcroft, "Trustworthy Electronic Voting Using Adjusted Blockchain 
Technology," IEEE Access, vol. 7, pp. 24477-24488, 2019. Article (CrossRef Link) 
[11] “Avalanche effect,” Wikipedia, Dec. 4, 2018. Article (CrossRef Link) 
[12] “EOS.IO Technical White Paper,” Github, 2018. Article (CrossRef Link) 
[13] Bryllite test simulation, Github, 2019. Article (CrossRef Link) 
 
 
 
 
 
Jusik Yun (awp212@yonsei.ac.kr) received a B.S. degree in electrical and electronic 
engineering from Yonsei University, Seoul, Republic of Korea, in 2016. He is currently 
pursuing a combined M.S. and Ph.D. degree in electrical and electronic engineering at Yonsei 
University, where he is also a researcher of the Communications and Networking Laboratory 
(CNL). His current research interests include blockchain, trust systems, and machine 
learning. 
 
 
 
 
Yunyeong Goh (rhdbsdud@yonsei.ac.kr) received a B.S. degree in electrical and 
electronic engineering from Yonsei University, Seoul, Republic of Korea, in 2019. He is 
currently pursuing a combined M.S. and Ph.D. degree in electrical and electronic engineering 
at Yonsei University, where he is also a researcher of the CNL laboratory. His current 
research interests include blockchain, trust systems, and augmented reality. 
 
 
 
 
 
Jong-Moon Chung (jmc@yonsei.ac.kr) received B.S. and M.S. degrees in electronic 
engineering from Yonsei University and Ph.D. in electrical engineering from the 
Pennsylvania State University. Since 2005, he has been a professor in the School of Electrical 
and Electronic Engineering at Yonsei University, where he is currently the Associate Dean of 
the College of Engineering. From 1997 to 1999, he was an assistant professor and instructor 
at the Pennsylvania State University. From 2000 to 2005, he was with the Oklahoma State 
University as a tenured associate professor. He is the Vice President of the IEEE Consumer 
Electronics Society, Editor of the IEEE Transactions on Vehicular Technology, Associate 
Editor of the IEEE Transactions on Consumer Electronics, Section Editor of the Wiley ETRI 
Journal, and Co-Editor-in-Chief of the KSII Transactions on Internet and Information 
Systems. 
https://dx.doi.org/10.1007/3-540-45748-8_24
https://www.usenix.org/legacy/events/osdi99/full_papers/castro/castro_html/castro.html
https://dx.doi.org/10.1109/ACCESS.2017.2779263
https://dx.doi.org/10.1109/TII.2017.2709784
https://dx.doi.org/10.1109/ACCESS.2018.2805783
https://dx.doi.org/10.1109/ACCESS.2019.2895670
https://en.wikipedia.org/wiki/Avalanche_effect
https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md
https://github.com/bryllite/elastic-grid-network-simulation
KSII TRANSACTIONS ON INTERNET AND INFORMATION SYSTEMS VOL. 13, NO. 8, August 2019                                    4107 
 
Ok-Seok Kim (jade@hanbitsoft.co.kr) is an expert in game and software development with 
18 years of experience. He has been in charge of game server / client development at 
Gargamel.com a game portal subsidiary of Hanbitsoft Co., Ltd. as well as at Freecal. He went 
on to work at SK Telecom and developed their SMS billing system. At LG MC Labs he 
developed a feature phone SNS client and has worked on a variety of projects beyond gaming. 
In 2010, he joined TCOMMS and successfully developed the Liveicon service. He is a 
veteran developer who has been involved in the Bryllite platform since its inception. 
 
 
 
SangWoo Shin (swoows@hanbitsoft.co.kr) graduated from Kyungwon College in 
Architecture. In 2003, began developing feature phone games. And progressed to client and 
server for online PC games, as well as iOS and Android nativer app development. He has 15 
years of experience developing mobile games on Unity game engine , using a wide range of 
platforms and programming languages. His most notable work was as Gravity's main 
programmer was Ragnarok Mobile Thieves. He was the main server programmer at Sonov 
for the game Club Starking. At Hanbitsoft, he has developed the mobile soccer simulation 
game FCMM, the tank strategy simulation game Hagane Orchestra, and fitness apps Run Day 
and Fit Day. 
 
Jin Choi (program@t3.co.kr) graduated from Dong-A University, Busan, Korea in 
Industrial Engineering. He joined T3 Entertainment, where he developed and led server, DB, 
and security teams for the dance battle online game, Club Audition. The game was launched 
in 10 different countries in Asia, Europe and South America. He served as a specialist in the 
development of MMORPG Hellgate London, FCM a soccer simulation game, and online 
fishing game Grand Mer. In addition, he was the team Manager and Server Programmer for 
the online game Audition3, MMORPG Camon Hero, and Mythos. Currently, he lead the AR 
team that is developing an augmented reality training simulator for disaster response. He is 
also involved in blockchain, cryptocurrency, and the Bryllite Project. 
 
Yoora Kim (yoora@t3.co.kr) has a total of 18 years of gaming business experience. She 
graduated from Hankuk University of Foreign Studies in International Trade. She went to 
work at T3 Entertainment as the Marketing Team Lead for the game, Audition. As a game 
marketing specialist, she held the title of Chief Marketing Officer (CMO). After the 
acquisition by HanbitSoft in 2008, she served as the Head of Business, before becoming the 
CEO of HanbitSoft and HanbitSoft Japan Corporation. Kim Yura led the global success of 
the dance game, Audition. She maintained a network of more than 700 million game users, 
with business partners in China, Southeast Asia, North America and Europe. In addition, 
Hanbitsoft has been actively promoting the 4th industry capability of AR, VR, and drone 
technology. She was also appointed as the CEO of Bryllite Hong Kong to oversee Bryllite's 
ICO in Hong Kong.