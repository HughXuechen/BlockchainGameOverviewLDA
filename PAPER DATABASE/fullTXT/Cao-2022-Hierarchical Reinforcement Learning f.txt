Hierarchical Reinforcement Learning for Blockchain-Assisted Software Defined Industrial Energy Market
6100 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 18, NO. 9, SEPTEMBER 2022
Hierarchical Reinforcement Learning for
Blockchain-Assisted Software Defined
Industrial Energy Market
Yifan Cao , Student Member, IEEE, Xiaoxu Ren , Student Member, IEEE, Chao Qiu , Member, IEEE,
and Xiaofei Wang , Senior Member, IEEE
Abstract—Energy Internet (EI) is developing and boom-
ing rapidly with the increase of distributed energy re-
sources, which is beneficial to address the severe
condition of industrial energy. However, there are inevitable
credit crises and utility optimization challenges in EI that
need to be settled. In this article, we propose a blockchain-
assisted software defined energy Internet (BSDEI), where
a distributed energy market smart contract is designed
to ensure transactions executed reliably and participants’
accounts dealt accurately. In order to jointly optimize the
utilities of operators, retailers, and industrial prosumers in
BSDEI, we formulate the whole trading process as a three-
stage Stackelberg game, with the proof of existence and
uniqueness for the Stackelberg equilibrium. Then, we de-
sign a hierarchical distributed policy gradient algorithm to
solve the Stackelberg game under incomplete information.
We implement a blockchain-based industrial energy trading
system using a middleware platform. The smart contract
is deployed on the consortium blockchain, providing web-
site interfaces for participants to operate. Furthermore, we
conduct experiments for analyzing economic benefits. Our
system prototype demonstrates the feasibility of BSDEI and
the algorithm exceeds about 18% in total mean reward than
comparing algorithms.
Index Terms—Blockchain, industrial energy market, rein-
forcement learning, software defined network (SDN), Stack-
elberg game.
I. INTRODUCTION
INDUSTRIAL energy is generally supplied by few utility
companies, with high transmission loss in long distance and
expensive unit energy price, which hinders the development
of industrial energy. With the tendency of distributed energy
Manuscript received July 31, 2021; revised October 15, 2021 and
November 18, 2021; accepted December 5, 2021. Date of publication
January 6, 2022; date of current version June 13, 2022. This work
was supported in part by the National Key Research and Development
Program of China under Grant 2019YFB2101901, in part by the Na-
tional Science Foundation of China under Grant 62072332, in part by
China NSFC (Youth) under Grant 62002260, and in part by the China
Postdoctoral Science Foundation under Grant 2020M670654. Paper no.
TII-21-3284. (Corresponding author: Chao Qiu.)
The authors are with the College of Intelligence and Computing,
Tianjin University, Tianjin 300072, China (e-mail: yifancao@tju.edu.cn;
xiaoxuren@tju.edu.cn; chao.qiu@tju.edu.cn; xiaofeiwang@tju.edu.cn).
Color versions of one or more figures in this article are available at
https://doi.org/10.1109/TII.2022.3140878.
Digital Object Identifier 10.1109/TII.2022.3140878
resource (DER), energy Internet (EI) has rapidly gained the spot-
light [1], which is beneficial to address the dilemma of industrial
energy. However, widespread DER and ossified control methods
overturn the huge benefit of EI. Meanwhile, software defined
networking (SDN) offers programmable control for ubiquitous
networks, where the control and data are decoupled. This control
paradigm flexibly separates distributed energy devices from
energy applications [2]. Therefore, the marriage of SDN and EI
gives the birth to software defined energy Internet (SDEI), which
brings a hope of sorting out these issues, including reliability and
flexibility [3].
Due to the reasonable price and effective transmission, the
industrial energy market gradually takes shape in SDEI. It
transforms ordinary energy consumers to energy retailers, who
are capable to generate, store, and sell DER [4]. The transfor-
mation potentially brings less transmission loss and lower load
peaks to EI. Despite its potential benefits, the industrial energy
market currently faces major issues, which hinder its widespread
adoption. 1) The credit crisis among different trading entities
prevents it from the way of trading energy reliably and credibly.
2) Due to the fact that the utility is monopolistic and difficult
to balance among trading entities, the industrial energy market
currently is less attractive.
There are two solutions that can be used to address the above
challenges. One is blockchain, which works as a distributed
ledger to record transactions and provides trustworthy services
to a group of nodes without central authority [5]. Specifically,
the energy trading information among interest entities is reliably
managed and stored on the blockchain. As enforced computer
protocols in blockchain [6], smart contracts have the capabil-
ity to assist trading entities in the industrial energy market to
effectively reduce the cost of credit.
The other one is game theory to solve the problem of utility
optimization in SDEI. However, to search the equilibrium in the
game, some current methods, such as backward induction and
some heuristic algorithms, acquiescently suppose that a central-
ized broker [7] is capable of collecting parameter information
from all entities and helping them adopt policies. Unfortunately,
parameter information of entities is strictly protected. To pre-
vent privacy from disclosure, we assume all the entities in the
industrial energy market as a multiagent system [8]. Compared
with traditional heuristics approaches, multiagent reinforcement
learning (MARL) converges to a great equilibrium due to the
1551-3203 © 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-2436-7790
https://orcid.org/0000-0002-3166-1405
https://orcid.org/0000-0002-2224-2292
https://orcid.org/0000-0002-7223-1030
mailto:yifancao@tju.edu.cn
mailto:xiaoxuren@tju.edu.cn
mailto:chao.qiu@tju.edu.cn
mailto:xiaofeiwang@tju.edu.cn
https://doi.org/10.1109/TII.2022.3140878
CAO et al.: HIERARCHICAL REINFORCEMENT LEARNING FOR BLOCKCHAIN-ASSISTED SOFTWARE 6101
balance of exploration and learning of all agents, without re-
quiring ideal knowledge about the environment and complete
information of other agents [9].
In this article, we design a blockchain-assisted software de-
fined energy Internet (BSDEI), where the consortium blockchain
acts as a trusted and decentralized ledger. To reduce the con-
sensus cost and the risk of malicious node attacks [10], we
adopt practical byzantine fault tolerance (PBFT) as the con-
sensus mechanism. Moreover, to overcome the credit crisis in
large-scale distributed energy trading in SDEI, a trading smart
contract for the industrial energy market is designed to assist
trading entities to automatically execute their reached agreement
and provides a number of open interfaces for participants to
trace their transaction records. To solve the utility optimization
problems without leaking the privacy of participants in SDEI,
we design a hierarchical distributed industrial policy gradient
algorithm, under an incomplete information environment to
search the game equilibrium. The main contributions are as
follows.
1) To address the dilemma of industrial energy, we propose
a blockchain-assisted software defined EI architecture.
A smart contract is designed to build a self-organizing
industrial energy market.
2) We model the energy trading and transmission in BSDEI
as a three-stage hierarchical Stackelberg game, giving the
proof of existence and uniqueness for the Stackelberg
equilibrium (SE).
3) Considering the privacy issue during the game, we design
a hierarchical distributed policy gradient (HDPG) algo-
rithm under incomplete information of different entities
to solve the game equilibrium.
4) We factually construct a blockchain-based industrial en-
ergy trading system, by designing the distributed energy
market smart contract to reach the distributed automation
control of energy trading and dispatching.
The rest of this article is organized as follows. Section II
presents some related works. The architecture introduction and
problem formulation are shown in Section III. The three-stage
game model with proof is shown in this section. In Section IV,
the hierarchical MARL algorithm HDPG is designed for the pro-
posed game model. Furthermore, a smart contract is conceived
for the industrial energy market. Section V presents the system
deployment and the simulation results. Finally, Section VI con-
cludes this article.
II. RELATED WORK
A. SDN and Blockchain Technologies in Energy Field
The concept of SDEI is primarily proposed by the authors
in [11]. They focus on an energy control system based on SDN to
achieve programmable control of energy flow from a high-level
perspective. To address the single point of failure with one SDN
controller, the authors in [12] build a distribution platform based
on distributed SDN controllers, which provides energy services
in SDEI and resists the network threats encountered through
the communication in SDEI. In the face of consensus problem
among different controllers in SDN, the authors in [3] merge
blockchain as a trusted third party into SDN control plane, which
collects and synchronizes traceable control information among
different SDN controllers securely.
A blockchain-based energy trading system is proposed in [13]
to solve the untrustworthy problem in the traditional trading
market. Besides, the authors propose the concept of credit banks
based on credit mechanism to speed up energy trading. The
paper [14] introduces edge computing in energy trading based
on blockchain realizing a frequent and convenient loan scheme,
solving the “cold start” and “long return” in large-scale efficient
problems trading. However, these works only consider the en-
ergy trading between buyer and seller and attach less importance
to the balance of multiparty utilities.
B. Game Theory to Model Trading Process
On account of its distributed autonomous solution for opti-
mization problems, game theory has been widely used in micro-
grid energy trading researches. A lot of researches search for the
game equilibrium by transforming a two-stage game to a single
optimization model with Karush–Kuhn–Tucher conditions [15].
Backward induction [16], as an optimization method, is also
frequently used in Stackelberg game. The authors in [7] propose
a hierarchical energy market architecture. The power generation
company, load aggregator, and microgrid constitute a three-stage
dynamic game under complete information to solve the problem
of utility coordination in the energy market. In [17], the authors
further consider the competition among multiple sellers and
the competition between buyers for the seller selection. They
adopt a Stackelberg game and evolutionary game to model the
relationships, respectively.
C. Deep Reinforcement Learning in Energy Field
The authors in [18] propose a deep Q network (DQN) based
energy trading method to solve the mismatch problem between
supply and demand based on game theoretic in the energy trading
process. In [19], the authors formulate the matching problem
between uncertain wind power and electric vehicle charging
demand as a bi-level Markov decision process (MDP) model and
use a proximal policy optimization (PPO) algorithm to solve it.
An energy scheduling policy based on a soft actor-critic (SAC)
algorithm is proposed in [20] to minimize operational costs and
ensure power supply reliability. However, all these above works
neglect the privacy protection of game participants.
III. SYSTEM ARCHITECTURE AND GAME FORMULATION
A. Different Types of Entities in BSDEI
Our research focuses on the energy transaction interaction
between various interest entities in BSDEI. In an energy trading
process, there are three types of entities.
1) Prosumer: We define prosumers as industrial energy
users who cannot generate energy by themselves or their energy
generation is unable to supply their energy consumption. They
purchase energy from the utility company or the retailer in
BSDEI. Prosumers have different usage scenarios for energy
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
6102 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 18, NO. 9, SEPTEMBER 2022
Fig. 1. Architecture of the blockchain-assisted software defined
energy Internet.
utilization, such as assembly line production, lathe process,
industrial agriculture [21], etc.
2) Retailer: A retailer is defined as the one whose total
energy generation is greater than total energy consumption
with distributed energy generation devices and energy storage
devices. The retailers get payments by providing DER to various
industrial applications. Inversely, they have to afford the cost of
distributed generation and energy storage and pay the operator
for transmission routing service.
3) Operator: The operator becomes the intermediary be-
tween industrial production and distributed generation, assisting
to accomplish the energy trading process. To provide more con-
venient service and lower latency, the operator deploys hardware
devices, such as edge servers and SDN controllers, at the edge
side instead of the cloud side. In return, it charges retailers
for transmission routing services and prosumers for credible
blockchain services.
B. Layers of Content and Interfaces
BSDEI is divided into industrial application layer (IAL), edge
control layer (ECL), and energy data layer (EDL) as shown
in Fig. 1. These three planes are mutually independent and
interrelated, which decouples the energy routing and dispatching
control in BSDEI. They jointly serve for energy trading in the
industrial energy market. EDL interacts with ECL through the
standard interface OpenFlow, while IAL interacts with ECL
through the smart contract interface.
1) Industrial Application Layer: More direct transaction pro-
cess and low unit energy price than that of the utility company
incentivize retailers and prosumers to participate in the industrial
energy market. They conduct energy transactions through the
client of the blockchain trading platform.
2) Edge Control Layer: Due to the intermittent and uncer-
tainty of DER, large-scale access of DER will bring great
challenges to the stability of EI. Therefore, a more intelligent
energy dispatching control paradigm is needed. The physical
devices in ECL are composed of distributed SDN controllers
and edge servers maintained by the operator. These controllers
jointly dispatch and control the energy routing of the physical
layer. Each of the edge servers acts as a node in the consortium
blockchain, taking on the functions of bookkeeping, broadcast-
ing, verification, and consensus. The consortium blockchain
provides credible and stable third-party services for energy trans-
actions in IAL. The smart contract in the blockchain provides
reliable automated process control for energy trading.
3) Energy Data Layer: The EDL consists of numerous com-
munication devices and energy devices. Communication devices
include switches, which receive dispatching instructions issued
by ECL, and forward them to the corresponding energy routers
along the specified optimal path. With some sensing elements,
energy routers automatically sense and reflect the real-time state
of the environment to ECL, which facilitates the controllers to
modify the dispatching instructions. In addition, energy routers
also receive upper level commands from EDL to change their
states.
C. System Model
1) Prosumers’ Model: In a local industrial energy market,
we assume that there are a set of prosumers, presented as
N = {1, 2, . . ., j, . . ., N}. The prosumer j submits its energy
demand qj with unit energy price p to the local retailer. In
order to maximize its overall benefit, it will dynamically adjust
its energy consumption and demand. Considering the marginal
benefit of energy utilization, we model the benefit function as a
quadratic function. It should be noticed that prosumers have
different industrial intentions to utilize energy [22], defined
by W = {1, 2, . . ., wj , . . ., wN}, which are tightly related to
their utilities. Therefore, the prosumer j determines its energy
demand to maximize the utility Up
j (qj)
max
qmin≤qj≤qmax
δ
(
wjqj − 1
2
q2
j
)
−mpqj − r (1)
where δ and m are conversion factors. The first term indicates
that the prosumer j obtains benefit in industrial production,
using its purchased energy. The second term and the third term
represent the energy payment pqj to the retailer and blockchain
service payment r to the operator.
2) Retailer’s Model: The retailer’s utility is determined by
the unit energy price p and the total quantity of demand
∑N
j=1 qj
from prosumers. In turn, the retailer needs to afford the genera-
tion costCg and storage costCs, which are respectively modeled
as
Cg = a
(∑N
j=1 qj
1− φ
)2
+ b
∑N
j=1 qj
1− φ
+ k (2)
Cs =
∑N
j=1 qj
1− φ
cs
ξcξd
(3)
where a, b, and k denote the weighted factors of generating
cost [7]. Considering the energy loss during transmission, the ac-
tual energy that the retailer needs to generate and store is denoted
as
∑N
j=1 qj
1−φ , where φ denotes the transmission loss rate. cs is the
unit storage cost of energy, while ξc and ξd are the charging and
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
CAO et al.: HIERARCHICAL REINFORCEMENT LEARNING FOR BLOCKCHAIN-ASSISTED SOFTWARE 6103
Fig. 2. Three-stage Stackelberg game in BSDEI.
discharging efficiencies of energy storage devices [22]. Besides,
the retailer pays for the dispatching and transmission service,
with a commission rate η. The retailer intends to maximize its
utility Ur(p) by adjusting the unit energy price
max
pmin≤p≤pmax
p
N∑
j=1
qj − η
N∑
j=1
qj − Cg − Cs. (4)
3) Operator’s Model: The operator charges the retailer for
dispatching and transmission service. Besides, an incentive
mechanism is designed for operating and maintaining the
blockchain. The operator acquires an extra fee Um
s for providing
a reliable blockchain service for each transaction:
Um = (Rf + rs)λ. (5)
On the one hand, Rf is the fixed block allowance, where s
is a parameter related to the block size. On the other hand,
the operator gets a transaction fee r from prosumers in every
transaction. λ is a probability factor in the blockchain. Similar to
the storage cost, the transmission cost Ct =
∑N
j=1 qj
1−φ ct includes
the exact prosumers demand portion and the lost energy portion,
with unit transmission cost ct. Co is considered as fixed cost
for operation and maintenance. Hence, the operator intends to
maximize its utility Uo(η) by adjusting the unit service price
max
ηmin≤η≤ηmax
η
N∑
j=1
qj + Um −
∑N
j=1 qj
1− φ
ct − Co. (6)
D. Game Equilibrium Analysis
The three-stage Stackelberg game is shown in Fig. 2. We will
give the existence and uniqueness of the SE next.
Theorem 1: The Subgame Gp = {N , {Up
j }j∈N , [0,+∞)N}
exists a unique equilibrium, which is given by
q∗j = δ − m
wj
· p. (7)
Proof: According to (1), we obtain the first and second deriva-
tives of utility Up
j with respect to qj
∂Up
j
∂qj
= δ · (wj − qj)−m · p (8)
and
∂2Up
j
∂2qj
= −wj . (9)
Since prosumers tend to use energy services,wj is assumed non-
negative, and the second derivative is negative. We can arrive
at the conclusion that the utility function is concave. Next, we
prove the existence of equilibrium. Let q � (q1, . . . , qN ), from
the Up(q) � Up
1 (q), . . . ,Up
N (q), we have point-to-set mapping
F = F(Up) = [∇qjUp
j (q)]
N
j=1, where ∇F = ∇F(Up(q))
=
⎡
⎢⎢⎢⎢⎣
∇2
11Up
1 (q) ∇2
12Up
1 (q) . . . ∇2
1˜NUp
1 (q)
∇2
21Up
2 (q) ∇2
22Up
2 (q) . . . ∇2
2˜NUp
2 (q)
...
...
. . .
...
∇2
N1Up
N (q) ∇2
N2Up
N (q) . . . ∇2
NNUp
N (q)
⎤
⎥⎥⎥⎥⎦
=
⎡
⎢⎢⎢⎢⎣
−w1 0 . . . 0
0 −w2 . . . 0
...
...
. . .
...
0 0 . . . −wN
⎤
⎥⎥⎥⎥⎦ .
(10)
Therefore,∇F+∇FT is negative definite. Furthermore,∇F
is diagonally strictly concave [23]. Then the Subgame Gp exists
a unique equilibrium. We set
∂Up
j
∂qj
= 0 and get q∗j . �
Theorem 2: When the unit service price η is given, the optimal
unit energy price p∗ is
p∗ =
A
B
(11)
where A = N · δ + (η + b
1−φ + Cs
ξc·ξd·(1−φ) +
2a·δ
(1−φ)2 ) ·
∑N
j=1
m
wj
, B = 2
∑N
j=1
m
wj
+ 2a
(1−φ)2 ·
∑N
j=1
m2
w2
j
.
Proof: From the first-order condition, we obtain the first
derivative of utility Ur with respect to unit energy price p
∂Ur(p)
∂p
=
N∑
j=1
q∗j + p ·
N∑
j=1
∂q∗j
∂p
− η ·
N∑
j=1
∂q∗j
∂p
−
2a ·∑N
j=1 q
∗
j ·
∂q∗j
∂p
(1− φ)2
− b
1− φ
·
N∑
j=1
∂q∗j
∂p
−
Cs
ξcξd(1− φ)
·
N∑
j=1
∂q∗j
∂p
.
(12)
Then we set ∂Ur(p)
∂p = 0. According to (7), we obtain the
∂q∗j
∂p =
− m
wj
, and we substitute it to (12) to obtain the expression of
p∗. �
Theorem 3: With the best response of the prosumers q∗j and
retailer p∗, the optimal unit service price of operator η∗ is
expressed by
η∗ =
N · δ ·B − (C − ct
1−φ ) · (
∑N
j=1
m
wj
)2
2 · (∑N
j=1
m
wj
)2
(13)
where C = N · δ + ( b
1−φ + Cs
ξc·ξd·(1−φ) +
2a·δ
(1−φ)2 ) ·
∑N
j=1
m
wj
.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
6104 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 18, NO. 9, SEPTEMBER 2022
Fig. 3. Architecture of hierarchical multiagent reinforcement learning
algorithm in energy trading process.
Proof: From the first-order condition, we obtain the first
derivative of utility Uo with respect to unit service price η
∂Uo(η)
∂η
=
N∑
j=1
q∗j −
ct
1− φ
N∑
j=1
∂q∗j
∂p
· ∂p
∗
∂η
+ η ·
N∑
j=1
∂q∗j
∂p
· ∂p
∗
∂η
.
(14)
Then we set ∂Uo(η)
∂η = 0. According to (11), we obtain the ∂p∗
∂η =∑N
j=1
m
wj
, and we substitute it to (14) to obtain the expression
of η∗. �
Theorem 4: The proposed sequential three-stage game has
the unique SE.
Proof: In the proposed three-stage sequential game, each
stage has its optimal closed-form solution respectively: the unit
service price η∗ in (13), the unit energy price p∗ in (11), and the
energy demand {q∗j} in (7). As each stage has the perfect and
unique equilibrium, the SE for the proposed three-stage game
model exists and is unique as well.
IV. HIERARCHICAL MARL ALGORITHM AND DISTRIBUTED
ENERGY MARKET SMART CONTRACT
A. Implementation of Hierarchical MARL
To solve the three-stage Stackelberg game, we model the
whole procedure of industrial energy trading in BSDEI as a
Markov decision process. Considering the Stackelberg game
under incomplete information, we design a hierarchical MARL
algorithm shown in Fig. 3 to solve the problem, instead of
leaking the privacy parameters of participants in other heuristic
algorithms. Hierarchical MARL focuses on models including
multiple agents that learn policies dynamically as they interact
with the environment. Compared with single-agent reinforce-
ment learning, the proposed algorithm avoids serious oscillation
problems that come from huge state space and action space of
an agent, which is more suitable for the dynamic energy market.
We design the action spaces Ao, Ar, and Ap of the operator,
retailer, and prosumers, respectively. At time slot t, the operator
first sets the unit transmission price ηt ∈ Ao based on its ob-
servation sto ={pt−1, [qt−1
j ]i∈N} from the lower level games at
time slot (t− 1). Its reward function is denoted as (6). Then, we
define the state of the retailer as str = {ηt, [qt−1
j ]i∈N}. Its action
Algorithm 1: HDPG for the Three-Stage Stackelberg Game.
Input: αo, αr, αp, γ, E, T, M, Ao,Ar,Ap,So,Sr,Sp.
Initialization:
Initialize θo(s
t
o, a
t
o), θr(s
t
r, a
t
r) and θp(s
t
p, a
t
p)
arbitrarily.
for episode = 1, 2, . . . , E do
Reset actions of all agents.
for t = 1, 2, . . . , T do
1. Operator step:
Observe the state sto : pt−1, qt−1
1 , . . ., qt−1
N
θo ← θo + αo∇θo log πo(s
t
o, η
t; θo)R
t
o·
2. Retailer step:
Observe the state sto : ηt, qt−1
1 , . . ., qt−1
N .
θr ← θr + αr∇θr log πr(s
t
r, p
t; θr)R
t
r·
3. Prosumers step:
for j = 1, 2, . . . , N do
Observe the state stpj
: pt.
θpj
← θpj
+ αpj
∇θpj
log πp(s
t
pj
, qtj ; θp)R
t
pj
·
end for
end for
end for
Output: πo, πr, πp
is signified by pt ∈ Ar, while the reward function is expressed
as the utility function in (4). After observing the actions of
the operator and retailer at time slot t, each of the prosumers
determines its submitted purchase action qtj ∈ Ap based on the
observed states stpj
= pt. The reward function of prosumer j is
expressed as the utility function in (1).
A MARL algorithm called HDPG is designed for searching
the SE in incomplete information environments constructed by
multiagent, as shown in Algorithm 1. Letαo,αr, andαp ∈ (0, 1]
represent the learning rate of policy network about operators,
retailers, and prosumers, respectively. γe ∈ (0, 1] is the future
reward discount factor. E denotes the total episode, T denotes
maximum time-step in each episode, while M means the batch
size of training networks. Each policy network consists of an
input layer, an output layer, and two fully connected layers.
First, the algorithm randomly initializes the policy net-
works πo(s
t
o, η
t; θo), πr(s
t
r, p
t; θr) and πp(s
t
pj
, qtj ; θp), with
their weights θo, θr, θp. As shown in Fig. 3, agents’ actions
in each round consist of three steps for the operator, retailer, and
prosumers, respectively. The operator, as the high-level leader of
the game, preferentially updates the weights θo in operator policy
network with sto and selects an action ηt. The retailer, in the
middle-level of the game, observes the operator’s action in this
step and prosumers’ action in the last step. Then, it updates the
retailer policy network and takes its action pt. In the prosumers
step, prosumers observe the high-level action and middle-level
action from the above-mentioned steps. After updating weights
θp in the prosumer policy network, each of them chooses its
action qt individually based on the state and the intention of
using energy.
For each episode of the outer, middle, and inner loops, the time
complexity is O(E), O(T ), and O(N), respectively. According
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
CAO et al.: HIERARCHICAL REINFORCEMENT LEARNING FOR BLOCKCHAIN-ASSISTED SOFTWARE 6105
Fig. 4. Trading process in the smart contract.
to [24], the time complexity of a fully connected layer is denoted
as Tf = O(
∑L
l=1 KlKl−1), where L represents the layers of
neural networks, and Kl means the number of neural units in a
fully connected layer. For calculating θo, θr, and θp, each policy
network utilizes two fully connected layers to output an action.
Hence, the total time complexity of Algorithm 1 is regarded as
O(ETN(Tf )).
B. Implementation of Smart Contract for Energy Market
For credit crisis among trading entities in industrial energy
market, a smart contract is designed to realize the automatic
execution of trading and clearing of accounts. The smart contract
consists of five modules as shown in Fig. 4, i.e., Registration,
Transaction, Transmission, Record, and Information Quire. To
realize the unified management, we design a circulation currency
called etcoin.
First, the contract deployer is registered as the initial adminis-
trator of the trading system, and some public parameters are ini-
tialized by constructor(). Then, participants register accounts
with their usernames, account addresses, and account types by
register() function, which initializes these accounts’ informa-
tion, including their available energy and etcoins as well as total
generated and used energy. Participants could acquire etcoins
by getToken() function. When transactions begin, prosumers
select the retailer and confirm the quantity of energy. Before
trading() function finishes the update of the corresponding
accounts information, some requirements will verify the ac-
counts’ rights and ensure the balance adequate. The transimit()
function is called automatically following the trading(). It not
only clears the transactions between retailers and operators but
also triggers the SDN controllers, which ensures the energy
flow from retailers to prosumers. According to information from
smart meters in retailers’ and prosumers’ location, generate()
and consume() functions are responsible for recording the total
generated and used energy of participants. Furthermore, we
design several quire functions to conveniently acquire accounts’
information, such as tokenInfo(), energyInfo(), etc.
V. SIMULATION RESULTS AND SYSTEM DEPLOYMENT
A. System Implementation
To better complete our work, we implement a consortium
blockchain-based industrial energy trading system, which is
demonstrated in Fig. 5.
Algorithm 2: Distributed Energy Market Smart Contract.
constructor()→ Initialize:
administrator, totalTokens, tokenPrice
unitEnergyPrice, unitTransPrice.
function register(address, name, type)
Require (administrator)
accountName, accountAddr, accountType.
availEnergy = 0, availTokens = 0.
totalGenEnergy = 0, totalUseEnergy = 0.
function getToken(address, value)
Require
(sender == address, value <= totalTokens)
Etcoins balance clearing
function
trading(seller, operator, value, ePrice, tPrice)
Require(value <= seller.availEnergy)
Require(value ∗ ePrice <= sender.availTokens)
Trade energy and etcoins balance clearing
function
transmit(from, to, by, value, ePrice, tPrice)
Require (value <= from.availEnergy)
Require (value ∗ ePrice <= to.availTokens)
sdnController.start()
Transmit energy and etcoins balance clearing
function generate(), consume()
Require (sender == administrator)
Smart meters update energy record
function tokenInfo(), energyInfo()
Inquire available etcoins, consumed, generated, and
available energy for utilization and selling.
Fig. 5. Blockchain-based industrial energy trading system.
1) Consortium Blockchain Configuration: To factually pro-
vide blockchain services for energy trading, we build a con-
sortium blockchain across physical hardware based on FISCO
BCOS,1 which is a stable and efficient blockchain underlying
1[Online]. Available: https://github.com/FISCO-BCOS/FISCO-BCOS
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
https://github.com/FISCO-BCOS/FISCO-BCOS
6106 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 18, NO. 9, SEPTEMBER 2022
platform. As shown in the top left of Fig. 5, the devices’ con-
figuration in implementation is three Jetson Nanos with 4-GB
RAM, Quad-core ARM A57, a laptop with 16-GB RAM, Intel
i5-10210 U as the management device, and a router for network
access service. Each Jetson Nano represents an edge server in
BSDEI and acts as a consensus node providing credible service
in the consortium blockchain.
2) Platform Implementation and Application Deployment: In
order to provide better transaction services for participants and to
more conveniently manage the system, a common set of compo-
nents are built between the industrial energy market application
and consortium blockchain nodes based on WeBASE,2 which
is a comprehensive middleware platform assisting to develop
blockchain-based distributed application. It provides unified
managements of chains, contracts, private keys, and applica-
tions. To provide distributed blockchain service, we open node
front function for each Jetson Nano, as shown in the top right of
Fig. 5. Using the built management platform shown in the bottom
left of Fig. 5, we compile and deploy the smart contract on
the constructed blockchain. Additionally, after testing the smart
contract, strict authentication of identities and calling modes
are set to prevent some malicious attacks caused by permission
problems. In order to facilitate prosumers to conveniently op-
erate their accounts and conduct transactions, a client website
is designed for prosumers to call the function as shown in the
bottom right of Fig. 5. Besides, prosumers could interact with
the consortium blockchain for information, such as the current
block and transaction details, through the client.
B. Parameter Setting
During the simulation, we setAo ∈ [2, 12],Ao ∈ [15, 30], and
Ax ∈ [0, 70]. For parameters in HDPG algorithm, the learning
rates are set as αo = αr = αp = 0.0004 and the future dis-
count factor γ = 0.9. The total episode E is set as 700, the
maximum time-step T is set as 700, and the batchsize M is
set as 128. For parameters in the models of industrial energy
market [22], we set λ = 0.8, φ = 0.85, ct = 1, cs = 2, ξc =
0.85, ξd = 0.9, and δ = 70. For parameters in blockchain [13],
we consider Rf = 5, r = 2, and s = 5.
C. Simulation Results
In this section, we provide convergence analysis and eco-
nomic analysis to illustrate the equilibrium performance. We
mainly focus on the convergence performance, the economic
benefit comparison, and the effect of diverse experiment param-
eters on the utilities of different entities in BSDEI.
1) Convergence Analysis: First, as shown in Fig. 6, we verify
the convergence performance of HDPG algorithm under the
unified pricing mechanism. To clearly present the tendency,
we set one operator, one retailer, and ten prosumers in this
experiment.
Before game equilibrium analysis, we plot the model of
each party in BSDEI under different variables shown in Fig. 7.
For each case, we annotate the theoretical optimal solution
2[Online]. Available: https://github.com/WeBankFinTech/WeBASE
Fig. 6. Convergence of the game under HDPG.
Fig. 7. Performance of the system model.
considering only unilateral model and game equilibrium under
HDPG. For each unilateral model, the entity has its optimal ac-
tions without considering other entities’ policies. In Stackelberg
game, to reach a relatively fair equilibrium, each entity makes
its actions to cope with other entities’ policies, which results in
the utility being far from the single optimal solution. However,
the actual optimization problems in energy trading are complex
game processes instead of single objective optimizations of
multiparties.
Under the unified pricing mechanism, prosumers’ optimal
demands are quite similar. Thus, we chose one of the prosumers
to present. Both the leader operator and the subleader retailer
obtain a splendid utility, especially the top leader with the
first mover advantage. Under the operator’s high-level policy
and retailer’s middle-level policy, prosumers also converge to a
relatively good solution. In addition, the convergence sequence
of different entities accords with the action sequence in the
three-stage Stackelberg game, which is reflected in that the
leader rapidly converges to its solution.
2) Utility Performance: To present the remarkable perfor-
mance of the HDPG algorithm for the three-stage Stackelberg
game, we compare it with some prevalent deep reinforcement
learning algorithms as shown in Fig. 8. We average the result
data from ten times of experiments to reduce the random error.
From Fig. 8(a), it is obvious that HDPG gains more total reward
of all entities than PPO, SAC, and DQN algorithms. Different
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
https://github.com/WeBankFinTech/WeBASE
CAO et al.: HIERARCHICAL REINFORCEMENT LEARNING FOR BLOCKCHAIN-ASSISTED SOFTWARE 6107
Fig. 8. Performance contrast on different types of reward. (a) Contrast
on total reward. (b) Contrast on operator’s reward. (c) Contrast on
retailer’s reward. (d) Contrast on prosumers’ reward.
Fig. 9. Utilities under different parameters. (a) Up(q) vs. δ. (b) Uo(η)
vs. φ. (c) Ur(p) vs. φ. (d) Ur(p) vs. ξc.
algorithms have respective characteristics. For example, SAC
assists prosumers to get the highest utility, while it gets poor
performance in the operator’s policy. In comparison, HDPG
assists the leader operator and the subleader retailer achieves
higher utilities. Besides, the prosumers also achieve a relatively
good utility with HDPG. The hierarchical design of multiagent’s
action and learning process assists agents to learn their policies
according to the rival policies, which potentially contributes to
the performance of HDPG.
Then, we analyze the parametric sensitivity of the utilities as
the number of prosumers varies. On account of that the utility
of prosumers shows not so much sensibility with the number
of participants, we use the boxplot to meticulously describe
the influence of prosumers’ willingness on the utility of pro-
sumers. As shown in Fig. 9(a), it is sensible for prosumers with
high-value industrial production to participate in the industrial
energy market. From Fig. 9(b) and (c), we observe that the
transmission loss rate φ decides the utilities of the operator and
retailer to a large extent. Thus, it is of great significance to reduce
the transmission loss rate using more advanced technology in
Fig. 10. Total reward under different parameters. (a) Total reward un-
der different α. (b) Total reward under different γ.
energy transmission and distribution network. As the increasing
prosumers, the utilities of the operator and retailer rise steadily,
while the utility of each prosumer shows a slight downward
trend. It should be noted that the increase of prosumers may
affect each prosumers’ policy, which results in some fluctuations
to the utilities of all the entities. Fig. 9(d) presents the variation
trend of the retailer’s utility under different efficiencies of energy
storage, which is a crucial part in BSDEI. Low energy storage
efficiency may lead to negative utility, while higher efficiency of
the energy storage devices achieves better utility of the retailer.
However, the cost and difficulty of reducing transmission loss
rate and raising energy storage efficiency are also hard obstruc-
tions in BSDEI.
As shown in Fig. 10, we further find different values of
learning rate α and future discount factor γ has some influence
on the convergence performance of the HDPG algorithm. After
evaluation, it is better to fix α = 0.025 and γ = 0.6.
VI. CONCLUSION
To better provide industrial energy trading services and min-
imize the impact of DER accessing to EI, we proposed a
blockchain-assisted software defined EI architecture. For the
industrial energy market in BSDEI, we used blockchain to
ensure the reliability between trading entities and avoids the
risk of a single point of failure. To jointly optimize the utilities
of the operator, retailer, and industrial prosumers in BSDEI, we
modeled the whole energy trading process as a three-stage Stack-
elberg game, with the proof of existence and uniqueness for the
SE. Then, we designed a hierarchical MARL algorithm HDPG
to solve the Stackelberg game under incomplete information,
which exceeds about 18% in total mean reward than that of some
prevalent algorithms. To better serve for demand of industrial
energy trading, we implemented the industrial energy trading
system using a middleware blockchain platform, by deploying
the distributed energy market smart contract on the consortium
blockchain.
REFERENCES
[1] H. Zhang, Y. Li, D. W. Gao, and J. Zhou, “Distributed optimal energy
management for energy Internet,” IEEE Trans. Ind. Informat., vol. 13,
no. 6, pp. 3081–3097, Dec. 2017.
[2] G. S. Aujla, M. Singh, A. Bose, N. Kumar, G. Han, and R. Buyya,
“BlockSDN: Blockchain-as-a-service for software defined networking
in smart city applications,” IEEE Netw., vol. 34, no. 2, pp. 83–91,
Mar./Apr. 2020.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
6108 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 18, NO. 9, SEPTEMBER 2022
[3] J. Luo, Q. Chen, F. R. Yu, and L. Tang, “Blockchain-enabled software-
defined industrial Internet of Things with deep reinforcement learning,”
IEEE Internet Things J., vol. 7, no. 6, pp. 5466–5480, Jun. 2020.
[4] Z. Xu, G. Han, L. Liu, M. Martínez-García, and Z. Wang, “Multi-energy
scheduling of an industrial integrated energy system by reinforcement
learning-based differential evolution,” IEEE Trans. Green Commun. Netw.,
vol. 5, no. 3, pp. 1077–1090, Sep. 2021.
[5] C. Qiu, H. Yao, X. Wang, N. Zhang, F. R. Yu, and D. Niyato, “AI-chain:
Blockchain energized edge intelligence for beyond 5G networks,” IEEE
Netw., vol. 34, no. 6, pp. 62–69, Nov./Dec. 2020.
[6] F. Shamieh, X. Wang, and A. R. Hussein, “Transaction throughput pro-
visioning technique for blockchain-based industrial IoT networks,” IEEE
Trans. Netw. Sci. Eng., vol. 7, no. 4, pp. 3122–3134, Oct.–Dec. 2020.
[7] S. D. Manshadi and M. E. Khodayar, “A hierarchical electricity market
structure for the smart grid paradigm,” IEEE Trans. Smart Grid, vol. 7,
no. 4, pp. 1866–1875, Jul. 2016.
[8] A. Feriani and E. Hossain, “Single and multi-agent deep reinforcement
learning for AI-enabled wireless networks: A tutorial,” IEEE Commun.
Surv. Tut., vol. 23, no. 2, pp. 1226–1252, Apr.–Jun. 2021.
[9] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trad-
ing in blockchain-based industrial Internet of Things,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[10] C. Qiu, H. Yao, C. Jiang, S. Guo, and F. Xu, “Cloud computing assisted
blockchain-enabled Internet of Things,” IEEE Trans. Cloud Comput., to
be published, doi: 10.1109/TCC.2019.2930259.
[11] W. Zhong, R. Yu, S. Xie, Y. Zhang, and D. H. Tsang, “Software defined
networking for flexible and green energy Internet,” IEEE Commun. Mag.,
vol. 54, no. 12, pp. 68–75, Dec. 2016.
[12] D. Jin et al., “Toward a cyber resilient and secure microgrid using
software-defined networking,” IEEE Trans. Smart Grid, vol. 8, no. 5,
pp. 2494–2504, Sep. 2017.
[13] Z. Li, J. Kang, R. Yu, D. Ye, Q. Deng, and Y. Zhang, “Consortium
blockchain for secure energy trading in industrial Internet of Things,”
IEEE Trans. Ind. Informat., vol. 14, no. 8, pp. 3690–3700, Aug. 2018.
[14] Z. Li, Z. Yang, S. Xie, W. Chen, and K. Liu, “Credit-based payments for
fast computing resource trading in edge-assisted Internet of Things,” IEEE
Internet Things J., vol. 6, no. 4, pp. 6606–6617, Aug. 2019.
[15] B. Gu, X. Yang, Z. Lin, W. Hu, M. Alazab, and R. Kharel, “Multiagent
actor-critic network-based incentive mechanism for mobile crowdsens-
ing in industrial systems,” IEEE Trans. Ind. Informat., vol. 17, no. 9,
pp. 6182–6191, Sep. 2021.
[16] Z. Xiong, S. Feng, D. Niyato, P. Wang, Y. Zhang, and B. Lin, “A
Stackelberg game approach for sponsored content management in mobile
data market with network effects,” IEEE Internet Things J., vol. 7, no. 6,
pp. 5184–5201, Jun. 2020.
[17] A. Paudel, K. Chaudhari, C. Long, and H. B. Gooi, “Peer-to-peer energy
trading in a prosumer-based community microgrid: A game-theoretic
model,” IEEE Trans. Ind. Electron., vol. 66, no. 8, pp. 6087–6097,
Aug. 2019.
[18] X. Lu, X. Xiao, L. Xiao, C. Dai, M. Peng, and H. V. Poor, “Reinforcement
learning-based microgrid energy trading with a reduced power plant sched-
ule,” IEEE Internet Things J., vol. 6, no. 6, pp. 10728–10737, Dec. 2019.
[19] T. Long, X. Ma, and Q.-S. Jia, “Bi-level proximal policy optimization for
stochastic coordination of EV charging load with uncertain wind power,”
in Proc. IEEE Conf. Control Technol. Appl., 2019, pp. 302–307.
[20] B. Zhang et al., “Soft actor-critic -based multi-objective optimized en-
ergy conversion and management strategy for integrated energy sys-
tems with renewable energy,” Energy Convers. Manage., vol. 243, 2021,
Art. no. 114381.
[21] Y. Liu, X. Ma, L. Shu, G. P. Hancke, and A. M. Abu-Mahfouz, “From
industry 4.0 to agriculture 4.0: Current status, enabling technologies,
and research challenges,” IEEE Trans. Ind. Informat., vol. 17, no. 6,
pp. 4322–4334, Jun. 2021.
[22] J. Lee, J. Guo, J. K. Choi, and M. Zukerman, “Distributed energy trading in
microgrids: A game-theoretic model and its equilibrium analysis,” IEEE
Trans. Ind. Electron., vol. 62, no. 6, pp. 3524–3533, Jun. 2015.
[23] J. B. Rosen, “Existence and uniqueness of equilibrium points for concave
n-person games,” Econometrica, vol. 33, no. 3, pp. 520–534, 1965.
[24] Y. Liu, H. Wang, M. Peng, J. Guan, and Y. Wang, “An incentive mechanism
for privacy-preserving crowdsensing via deep reinforcement learning,”
IEEE Internet Things J., vol. 8, no. 10, pp. 8616–8631, May 2021.
Yifan Cao (Student Member, IEEE) received
the B.S. degree in electrical engineering and
automation in 2020 from the School of Electrical
and Information Engineering, Tianjin University,
Tianjin, China, where he is currently working
toward the M.S. degree in computer science and
technology with the College of Intelligence and
Computing.
His current research interests include energy
trading, blockchain, and reinforcement learning.
Xiaoxu Ren (Student Member, IEEE) received
the B.S. degree in information and computing
science from the College of Science, Inner Mon-
golia University of Technology, Hohhot, China, in
2016. She is currently working toward the Ph.D.
degree in computer applications technology with
the College of Intelligence and Computing, Tian-
jin University, Tianjin, China.
Her current research interests include ma-
chine learning, computing power networking,
and blockchain.
Chao Qiu (Member, IEEE) received the B.S.
degree in communication engineering from
China Agricultural University, Beijing, China, in
2013, and the Ph.D. degree in information and
communication engineering from the Beijing
University of Posts and Telecommunications,
Beijing, in 2019.
From 2017 to 2018, she was with Carleton
University, Ottawa, ON, Canada, as a Visiting
Scholar. She is currently a Lecturer with the
School of Computer Science and Technology,
College of Intelligence and Computing, Tianjin University, Tianjin, China.
Her current research interests include machine learning, software de-
fined networking, and blockchain.
Xiaofei Wang (Senior Member, IEEE) received
the master’s and Ph.D. degrees in computer sci-
ence and engineering from Seoul National Uni-
versity, Seoul, South Korea, in 2008 and 2013,
respectively.
He was a Postdoctoral Fellow with The Uni-
versity of British Columbia, Vancouver, BC,
Canada, from 2014 to 2016. He is currently
a Professor with the Tianjin Key Laboratory of
Advanced Networking, School of Computer Sci-
ence and Technology, Tianjin University, Tianjin,
China. Focusing on the research of social-aware cloud computing, coop-
erative cell caching, and mobile traffic offloading, he has authored more
than 140 technical papers in publications such as IEEE JOURNAL ON
SELECTED AREAS IN COMMUNICATIONS, IEEE TRANSACTIONS ON WIRELESS
COMMUNICATIONS, IEEE WIRELESS COMMUNICATIONS, IEEE COMMUNICA-
TIONS, IEEE TRANSACTIONS ON MULTIMEDIA, IEEE International Confer-
ence on Computer Communications, and IEEE International Conference
on Sensing, Communication and Networking.
Dr. Wang was the recipient of the “Scholarship for Excellent Foreign
Students in IT Field” by NIPA of South Korea from 2008 to 2011, the
“Global Outstanding Chinese Ph.D. Student Award” by the Ministry of
Education of China in 2012, and the Peiyang Scholar from Tianjin Uni-
versity. In 2017, he was the recipient of the “Fred W. Ellersick Prize” from
the IEEE Communication Society.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:07:41 UTC from IEEE Xplore.  Restrictions apply. 
https://dx.doi.org/10.1109/TCC.2019.2930259
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice