Secure Decentralized Application Development of Blockchain-based Games
IEEE IPCCC 2020 1
Secure Decentralized Application Development of
Blockchain-based Games
Natalia Trojanowska, Michal Kedziora, Member, IEEE, Moataz Hanif and Houbing Song, Senior Member, IEEE
Abstract—The purpose of this paper is to present Ethereum
decentralized application development methodology with focus on
security issues and its verification. We introduce key concepts that
are related to developing decentralized applications and Crypto
Collectibles games. Moreover, the requirements for blockchain
projects were presented along with a selection of use case
examples. The paper concerns the application design process
issues, starting from the methodology used, going through the
description of requirements and specification, ending up with the
implementation. Finally, an overview of the issues associated with
the security of Ethereum decentralized applications is presented.
We compared guidelines from Ethereum Smart Contract Best
Practices by ConsenSys, Smart Contract Security Verification
Standard created by SecuRing, Decentralized Application Se-
curity Project introduced by NCC Group, Security Consider-
ations from Solidity documentation, Ethereum Smart Contracts
Security Recommendations from Guylando Knowledge Lists, and
Smart Contract Weakness Classification and Test Cases. It was
discussed which guideline should be followed and when should
the verification take place, considering the life cycle of the
application. The paper covers different security risks related to
blockchain games along with examples of how vulnerabilities can
arise, how they can be detected during security verification phase,
and countermeasures to address them.
Index Terms—Blockchain, Decentralized Apps, Crypto Col-
lectibles Games.
I. INTRODUCTION
IN the past few years blockchain found its way into the
canon of key computer science subjects, discussed both
in literature and on worldwide conferences along with ar-
tificial intelligence or big data. Decentralization became a
new paradigm for digital networks, often worshipped for the
independence from third parties such as governments and
corporations. The success of Bitcoin laid the foundations for
a completely new approach to software development[1][2][3].
Instead of hosting an application on a central server, the
data of a so called decentralized application, or DApp for
short, is stored in a distributed ledger, which is often a
blockchain. In this way, it is possible to create a system that
is fully transparent and corruption-proof, thanks to the fact
that no intermediaries are involved in its administration[4][5].
The concept of a blockchain-based application challenges the
Michal Kedziora is with the Faculty of Computer Science and Management,
Wroclaw University of Science and Technology, Wroclaw, Poland. email:
michal.kedziora@pwr.edu.pl
Natalia Trojanowska is with Wroclaw University of Science and Technology
and SecuRing, Krakow, Poland.
Moataz Hanif and Houbing Song are with the Department of Electrical
Engineering and Computer Science, Embry-Riddle Aeronautical University,
Daytona Beach, FL 32114 USA
programmers to create code that is secure, thoughtful, and
efficient from the beginning.
Unfortunately decentralized blockchain applications are fac-
ing many major security issues. According to PeckShield
Safety Report, only in 2018 the overall economic losses were
estimated for 2.238 billion dollars. More than 120 incidents
involved application and contract layer of surveyed applica-
tions. Additionally, over 50 security incidents were connected
directly with Ethereum and 49 security incidents targeted EOS
smart contracts. What is especially dangerous, is that any
vulnerabilities found in smart contract layer of DApps can
be easily transferred to other applications relying on similar
smart contract business logic. It is crucial for programmers to
follow development process with high focus on security issues
of decentralized applications and make sure that the software
code will follow security best practices.
In this paper, we will present decentralized application
development methodology for blockchain-based games with
focus on security issues and its verification. Paper will con-
cern the application design process issues, starting from the
methodology used, going through the description of require-
ments and specification, ending up with the implementation.
We will compare guidelines from Ethereum Smart Contract
Best Practices by ConsenSys, Smart Contract Security Veri-
fication Standard created by SecuRing, Decentralized Appli-
cation Security Project introduced by NCC Group, Security
Considerations from Solidity documentation, Ethereum Smart
Contracts Security Recommendations from Guylando Knowl-
edge Lists, and Smart Contract Weakness Classification and
Test Cases. We will discuss different security risks connected
with blockchain games, examples of how vulnerabilities can
arise, how they can be detected during security verification
phase and countermeasures to address them. As a use case,
this paper will present the development process of creating
a decentralized cooperative game, which will be designed
around the concept of Crypto Collectibles. The paper focuses
on the design and implementation of the application, leaving
the actual deployment out of scope.
The remainder of this paper is structured as follows. First we
introduces the concept of smart contracts, ether, gas, accounts,
and transactions, which will be crucial for later understanding
of game design difficulties. We also provide an overview of
ERC-721 standard, which is often the basis of blockchain
games. Next we describe requirements for blockchain projects
and various aspects of the technology that specific applications
can benefit from. Then the methodology of decentralized
application development will be introduced. It provides an
extensive description of every phase of modified waterfall
978-1-7281-9829-3/20/$31.00 ©2020 IEEE
20
20
 IE
EE
 3
9t
h 
In
te
rn
at
io
na
l P
er
fo
rm
an
ce
 C
om
pu
tin
g 
an
d 
C
om
m
un
ic
at
io
ns
 C
on
fe
re
nc
e 
(I
PC
C
C
) |
 9
78
-1
-7
28
1-
98
29
-3
/2
0/
$3
1.
00
 ©
20
20
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
IP
C
C
C
50
63
5.
20
20
.9
39
15
56
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 2
model and a list of useful tools. It also emphasizes the im-
portance of Ethereum standards and community audited smart
contracts, which have a significant impact on the security of
the application. Next a brief summary of project specification
of the use case application is included. Moreover, the outline
of the architecture is shown using component and deployment
diagrams. Main part of paper goes over the security evaluation
of the smart contracts and discussion about DApps security
issues.
II. AN OVERVIEW OF THE ETHEREUM PLATFORM
Ethereum, taken as a whole, can be viewed as a transaction-
based state machine. Transactions represent a valid arc be-
tween two states, e.g. reducing an account balance with an
equal and opposite increase elsewhere. Formally:
σt+1 ≡ Υ(σt, T ) (1)
where Υ is the Ethereum state transition function. In
Ethereum, Υ together with σ are considerably more pow-
erful than any comparable system; υ allows components to
carry out arbitrary computation, while σ allows components
to store arbitrary state between transactions[9]. Ethereum
was proposed in a whitepaper by Vitalik Buterin in 2013
as a blockchain integrated with a programming language,
which can be used to create smart contracts and custom
applications[7]. Ethereum was supposed to fully exploit the
potential of the technology used by Bitcoin, as the idea of im-
plementing a Turing-complete scripting language into Bitcoin
has not gained popularity in the community[8]. On January
25, 2014, Ethereum was presented at the North American
Bitcoin Conference in Miami. Then the Yellow Paper by
Gavin Wood was published, which discussed the design and
implementation issues of Ethereum[9] - it is now considered
to be the specification of the Ethereum Virtual Machine[10].
In July 2014, a crowdfunding initiative called the Ether Sale
was launched, making it possible to buy ether by transferring
bitcoins to a specified wallet. The ethers, however, would
not be usable or transferable until the launch of the genesis
block[11]. A year later, in June 2015, the beta version of the
Ethereum blockchain called Olympic was publicly launched as
the first public testnet. After that, the development of Ethereum
was planned to consist of four main development stages: Fron-
tier, Homestead, Metropolis, and Serenity[12]. On July 30,
2015, the genesis block was mined on the first version of the
Ethereum mainnet referred to as Frontier. It contained almost
9000 transactions with approximately 72 million pre-mined
ethers mostly bought in the Ether Sale. In March 2016 a hard
fork into the Homestead version took place, which meant that
the miners needed to upgrade their software to contribute to the
new chain. A few minor changes were implemented leading
to an increase in the stability of the blockchain[10]. Soon
after that, The DAO was created, which was a decentralized
autonomous organization allowing investors to fund various
projects based on the outcome of the voting. Unfortunately,
the code of The DAO had a vulnerability that leaded to
The DAO hack, in which 3689577 ETH (around 30% of the
total amount owned by The DAO) have been transferred into
attacker’s account. After a public debate it was decided to
perform a hard fork to remove the event from the blockchain.
Conceptually, it was a violation of the fundamental principle
of the blockchain, which is its immutability. Moreover, in
such cases taking advantage of a loophole is perfectly legal,
as it is within the rules of a smart contract. Some of the
miners refused to perform the hard fork and contribute to
the new, altered blockchain, which led to the creation of a
new cryptocurrency called Ethereum Classic[13]. The third
stage of Ethereum called Metropolis included two hard forks,
Byzantium and Constantinople, launched in October 2017 and
February 2019, respectively[12]. The next major update as
well as the beginning of a new era, Ethereum 2.0, will be
Serenity, that is yet to be announced. Most importantly, it will
bring a switch to a new consensus protocol, Proof of Stake,
which does not waste as much computational resources as the
currently used Proof of Work[14]. The update will consist of
multiple phases, finally leading to an environmentally friendly
blockchain development platform.
A. DApps Key Concepts
1) Ether: The native cryptocurrency of Ethereum is called
ether (abbreviated as ETH). The smallest unit of ether is wei
with the following conversion factor: 1 ether is an equivalent
of 1018 wei[17]. Apart from the initial ether supply that was
pre-mined in the genesis block, the only source of new ether
is mining[18]. Mining is the process of dedicating effort to
bolster one’s block over any other potential competitor block.
It is achieved thanks to a cryptographically secured proof.
Formally:
σt+1 ≡ Π(σt, B) (2)
B ≡ (..., (T0, T1, ...)) (3)
Π(σ,B) ≡ Ω(B,Υ(Υ(σ, T0), T1)...) (4)
where Ω is the block-finalisation state transition function; B
is block which includes transactions and smart contracts; and
Π is the block-level state transition function[9]. Since the
Constantinople hard fork, the block reward equals 2 ETH
per block – it was decreased after Byzantium to reduce
the inflation. It means that the daily supply of new ethers
is now around 13400 ETH[19]. After the Serenity update,
adding a new block to the blockchain will require much less
computational power, as Proof of Stake will be introduced.
For that reason, it will be possible to reduce the annual ether
issuance while it will still be profitable to the nodes[20]. Only
ethers owned on the mainnet can be bought and sold for real
money. On the testnets such as Ropsten, Kovan, or Rinkeby
the ethers are acquired by creating a request at the appropriate
faucet[21].
2) Smart contracts: The idea of a smart contract was first
mentioned in 1994 by Nick Szabo, a famous researcher in
the field of cryptocurrency[15]. He compared a smart contract
to a simple vending machine, which makes the user act in
accordance to the rules built into its hardware[16]. In case of
a smart contract, the transaction rules are written in the script.
Therefore, it can be described as a digital legal agreement, as
it is a piece of code that enforces some regulations. Below
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 3
is an example of a simple smart contract written in Solidity
programming language intended to set variable and make it
publicly visible.
contract DataStorage {
uint Data;
function set(uint x) public {
Data = x;
}
function get() public
view returns (uint) {
return Data;
}
}
In the first definitions the use of the blockchain technology
is not explicitly specified, as it has not been invented until
2008, but it turned out to be perfectly suitable for this cause,
as it implements the key features of a smart contract[17]. That
includes immutability, permanence, and global availability. It
is also worth noting that a smart contract is timestamped and
digitally signed, as every blockchain transaction. Moreover,
blockchain is trustless, which means there is no need for a
third party – the actions described in a smart contract will be
triggered automatically after an occurrence of a specific event.
It also eliminates the need of escrow accounts, as the funds
can be stored directly on the smart contract[15]. However,
smart contracts and blockchain are separate ideas and both
can exist independently[17]. Smart contracts are the answer
to the world needs in terms of a trustworthy legal system.
A person involved into the execution of a contract is not
always reliable, neutral, and fully informed, which can affect
their judgement. A smart contract, on the other hand, will
provide a deterministic output under any circumstances[18].
When it comes to smart contracts it also should be remembered
that they are only just as smart as the programmer that
has written their code. Therefore, if it is designed to rely
on incorrect data, it will execute correctly, but still provide
flawed results. Furthermore, considering the inalterability of
the blockchain, whenever a vulnerability is introduced to the
code, it is final. This leads to the conclusion that in case
of smart contract development, it is essential to identify the
main risks associated with the assets and create a proper threat
model.
III. RELATED WORK
In paper[33], authors presented a survey on blockchain-
based digital games, and discussed especially how multi-
player scenario games will be significantly impacted by this
technology. In their work, the authors were surveying most
popular blockchain games like Satoshi Dice, PoWH, and
CryptoKitties. Moreover, blockchain integration for games
and the categorization of existing blockchain games from the
aspects of their genres and technical platforms were discussed.
In paper[34], authors examined popular Ethereum decen-
tralized games to tease out characteristic technical properties
and gameplay. Then the games’ features were compared with
criteria found in current legal and psychological definitions of
gambling.
In paper[38], authors looked at the economic ramifications
of cryptogames as well as their social implications using
CryptoKitties game as a case study. Paper aims at establishing
an understanding of why blockchains are important for the
study of games and how they might shape the future of game
design and play.
In paper[36], authors presented several benefits and disad-
vantages of blockchain games. Currently gaming companies
usually store in-game assets on centralized servers to protect
them from being duplicated. Blockchain technology allows
full transparency and decentralized control of virtual assets,
enabling players to have actual ownership of their virtual
belongings. Blockchain technology also encourages reward-
based interaction with video games, meaning that users can
earn tokens for playing, reviewing, or sharing games on social
media. Additionally, it builds credibility and accountability.
The records are publicly available, therefore encouraging play-
ers to behave properly. Introducing blockchain also improves
security by reducing the chances of a fraud and provides trans-
parent, faster payments. The technology will allow companies
to fortify their conditions using smart contracts, democratizing
the gaming industry. Moreover, the current methods of manip-
ulating the votes result in unreliable feedback from the voting
systems in games. The paper concludes by identifying the
three biggest obstacles facing blockchain gaming: scalability
issues that prevent the development of games at this point,
sustainability which is connected to the lack of users interested
in blockchain games or decentralized assets exchanges, and the
fact that centralized games surpass blockchain-based ones.
In paper[35], authors proved that blockchain games are still
suffering from security issues due to immature blockchain
technologies and developers are not fully prepared for us-
ing this new technology. In their work, they analyzed the
blockchain game architecture and revealed possible penetra-
tion testing methods. More than 600 commercial blockchain
games were scanned. Additionally, case studies for blockchain
games were presented to show vulnerability detection meth-
ods.
In paper[37], authors considered the security challenges in
blockchain-based online multiplayer games. Due to the fact
that this adaptation is still new, additional security measures
should be taken into account. The authors pointed out that
currently there is insufficient research on security and issues
related to the integration of online multiplayer games with
new blockchain systems. In order to fill this gap, the pa-
per discusses two main security questions in this domain:
what challenges do game developers face if they switch to
blockchain, and what are possible security concerns associated
with blockchain-based online multiplayer games.
IV. BLOCKCHAIN GAME USE CASE
Usually games do not exactly benefit from the fact that they
are decentralized and based on blockchain, as it introduces a
lot of limitations. The gas cost poses a large restriction to code
complexity, so the game designers must choose between an en-
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 4
Fig. 1. DApp component diagram
tirely decentralized game, which means simplifying the server-
side mechanics and moving parts of it to the client side (and
that is not always possible), or even creating only a partially
decentralized game, where only some of its functionalities are
hosted on the blockchain.
In 2018, almost 50% of DApps registered on State of the
DApps were classified as games, which resulted in over 19%
of Ethereum transactions[6], meaning that decentralized games
do seem interesting and are willing to be played. There are
numerous popular games available on the Ethereum platform.
CryptoKitties gained popularity in late 2017 and is considered
the first of its kind. It stands out for its extremely simple
mechanics that can be explained instantly. Another game,
currently the most played one according to State of the DApps,
is MyCryptoHeroes, an RPG game focused on battles. Unfor-
tunately, both games are launched only in the main Ethereum
network, meaning that they require spending real ether to play.
Most people will not be willing to buy cryptocurrency to
try out an application, so despite the dynamic growth of the
cryptocurrency market, decentralized applications are slowly
gaining popularity.
A. Architecture
The proof-of-concept DApp game, that we will use as an
example in this paper, consists of two components (Fig. 2):
1) The web browser that displays the graphical interface,
providing an easy and user-friendly way of interacting
with smart contracts. In order to communicate with the
Ethereum blockchain from the browser, the user must
install a wallet plug-in such as Metamask.
2) The Ethereum blockchain where the backend of the ap-
plication (smart contracts) is deployed and executed. The
communication with a smart contract on the Ethereum
blockchain is described in an Application Binary Inter-
face (ABI).
Our DApp can be considered a hybrid decentralized appli-
cation, as the graphical user interface, which is static, is served
from a web server. However, backend is fully decentralized,
alongside with the database, as it is hosted on the Ethereum
blockchain.
B. Technology overview
The frontend has been implemented in React.js framework
using several libraries such as:
• Drizzle, Drizzle React, and Drizzle React Components,
which are part of the Truffle Suite that allows easy
interaction with the Ethereum blockchain,
• React Bootstrap, Material UI, and Material UI Form
Validator to create a modern graphical user interface,
• React Router for navigation.
The backend has been written in Solidity. The unit tests were
performed using JavaScript and Mocha testing framework with
Chai assertions.
V. DECENTRALIZED APPLICATION DEVELOPMENT
METHODOLOGY
In this paper, the application we presented as use case was
developed using a modified waterfall model. This methodology
has been chosen due to multiple reasons. Firstly, decentralized
applications are generally small (as compared to web appli-
cations). Also, the project requirements and scope, once set,
will not be modified, as a change often entails the need of
restructuring the whole smart contract. The same applies to
the technology and the architecture, which are predetermined.
Another reason is that smart contracts are rarely updated,
so there is no need for continuous deployment[28]. The
development process will therefore consist of the following
phases:
1) requirements and design,
2) implementation,
3) security verification - which will be discussed separately,
4) maintenance.
A. Requirements and design phase
Requirements and design phases can be combined and will
result in a preparation of the following project artefacts:
1) a glossary, which defines the vocabulary found in the
application,
2) a use case diagram describing the possible interactions
with the game,
3) a list of system features along with the functional
requirements,
4) a component diagram specifying the key components in
the system and the communication between them,
5) a deployment diagram, that visualizes the physical struc-
ture of a blockchain decentralized application,
6) a class diagram adjusted to the structure of smart con-
tracts.
The outcome of the requirements and design phase will serve
as a complete specification for the project.
B. Implementation phase
The implementation phase will be integrated with unit test-
ing in order to ensure that the system works as expected. Ex-
tensive testing is especially important when it comes to smart
contracts, so combining testing with implementation ensures
high code coverage. The most popular framework for Solidity
development is Truffle. It helps with organizing the process of
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 5
Fig. 2. User case App deployment diagram
application lifecycle management, increasing the productivity
of the development team. Its main functionalities include com-
piling, deploying, and testing decentralized applications[21].
Truffle allows writing unit tests in two languages: Solidity,
with a built-in assertion library, and JavaScript, in which case
Mocha testing framework is used with Chai assertions[29]. In
order to deploy and test a smart contract, a connection to an
Ethereum network is required. However, in the initial phase
there is no need to use a real network, as it would be highly
time consuming – a local node is enough. For this purpose,
Ganache can be used, which is not exactly an Ethereum client,
but rather a mock-up of one, as it cannot be a part of a real
network. It is written in JavaScript and is a part of Truffle
Suite. Ganache is perfectly suitable for local testing. In the
final phase, on the other hand, it is recommended to test the
application on an official testing network such as Ropsten.
C. Maintenance phase
It is impossible to create a system that is fully secure,
so it is important to always have a contingency plan for
a potential security incident[30]. In case of decentralized
applications there are multiple design patterns that make it
possible to provide maintenance – without them, the creator
of the application would have no control over it once de-
ployed. Admittedly, this is sometimes desirable to provide true
decentralization (meaning no one has control over the smart
contract and everyone is a subject to the same set of rules), but
it also means that a vulnerability can lead to a considerable
financial loss. The first of the design patterns is called Access
Restriction. By implementing a modifier, it is possible to
limit the access to specific functions, so they are callable
only by a defined set of accounts or under special conditions.
It can be used for functionalities meant exclusively for the
owner. The next one is Emergency Stop, which introduces an
option to disable some of the application’s functionalities. It
is extremely useful in emergencies such as an attack that is
actively draining contract’s funds. Finally, the Proxy Delegate
pattern, which allows semi-upgradeability of smart contracts.
It is implemented by creating a proxy contract, that stores the
address of the current version of the application. It significantly
increases the complexity of the code. Also, it should be noted
that the storage of the old version of the smart contract is not
transferred to the new one, which means that this technique
is not always applicable, as it would mean losing user’s data.
Nonetheless, some applications use the Proxy Delegate pattern
only for specific functions, which does not interfere with
storage[31]. To sum up, it should be left to the community
to decide, whether a compromise between decentralization
and cautiousness offered by a certain decentralized application
does not violate their principles and is right for the application
itself. Many decentralized applications offer full transparency
of the source code, so it is possible for everyone to check, if
e.g. the creator does not have too many privileges. However, if
there would be no way of preparing a decentralized application
for a security incident, the risk of creating one is extremely
high, especially taking into considerations many incidents
from the past like The DAO Hack. In this paper user case app
the Access Restriction and the Emergency Stop design patterns
will be implemented to provide a possibility of application
maintenance as well as risk mitigation.
VI. SECURITY VERIFICATION
As it was previously mentioned, the main principle of
blockchain is to enforce the immutability of the deployed code.
Therefore, it is especially important to include security into the
smart contract development process, as every bug introduced
into the code will be final. There are multiple ways of making
a decentralized application more secure. The first and the
simplest practice is to use one of the smart contract libraries
e.g. developed by OpenZeppelin. It provides code that in many
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 6
cases can be considered a standard implementation[12]. It is
highly advisable to use it rather than try to write the code
by oneself. Secondly, a static analysis of the code can be
done using open source tools like Oyente, which is based
on an academic paper. It checks for multiple known attacks,
e.g. reentrancy. Next, a manual penetration test should be
performed. It can be held based on Decentralized Application
Security Project Top 10, which describes ten most popular
vulnerabilities, and SWC Registry, which covers weaknesses
and provides smart contract examples. Additionally, compli-
ance with Smart Contract Security Verification Standard can
be validated. All the above are created and maintained by
professionals in the field of smart contracts. However, the
most important factor in the context of secure application
development is educating the programmers. For this purpose,
Ethernaut project will be helpful, which is a game that
involves exploitation of vulnerable smart contracts. It is also
an initiative of OpenZeppelin. In this paper we compared the
available security standards, best practices and guidelines:
1) Ethereum Smart Contract Best Practices maintained by
ConsenSys,
2) Smart Contract Security Verification Standard (SCSVS)
maintained by SecuRing,
3) Decentralized Application Security Project Top 10
(DASP Top 10) from 2018 maintained by NCC Group,
4) Solidity Security Considerations which are a part of
Solidity documentation,
5) Ethereum Smart Contracts Security Recommendations
as part of Guylando Knowledge Lists,
6) Smart Contract Weakness Classification and Test Cases,
also referred to as SWC Registry, which is a database
of currently 33 vulnerabilities and weaknesses related to
smart contracts.
We considered nine security areas of DApps and Smart Con-
tracts, and compared how they are addressed in most popular
security guidelines resources.
A. Authorisation and Access Control
First area is Authorisation and Access control, which is the
process of granting or denying specific requests to obtain and
use information and related information processing services. In
smart contract development there are multiple issues regarding
access control and authorisation including the following:
• incorrectly set function visibility,
• usage of tx.origin instead of msg.sender, as the tx.origin
returns the original caller, not the last caller of a function,
• unsafe proxy contracts,
• hard to spot mistakes in require assertions[12], [32].
Beside SCSVS this area is mentioned in DASP Top 10, but it is
Ethereum Smart Contracts Security Recommendations where
authorization and access control related to smart contracts are
listed and presented in a detailed way.
B. Business Logic and Denial of Service
Security of smart contract business logic is essential as it
is very hard or usually not possible to change smart contract
after it was deployed on a blockchain. Contracts should not
be considered safe without verification. Business assumptions
should meet with the principle of minimal trust, which is
essential in building smart contracts. This means that the
business logic flow should be sequential and the business limits
should be specified and enforced.
As every transaction in Ethereum is deterministic, it is
impossible to achieve randomness. If a smart contract uses
block number as a source of entropy, it can be easily abused
by creating a malicious smart contract, which would first
check if the number of the current block is a winner and then
call the vulnerable smart contract. Another approach is using
the timestamp of the block, but this, on the other hand, can
be slightly manipulated by the miners. If the randomness is
necessary, the solutions include using an external source of
entropy, or implementing a commit-reveal scheme[12].
Another threat is time manipulation. The timestamp of
the block is controlled by the miner and can be slightly
manipulated. For that reason, a smart contract should not rely
on the time of the mining, but rather on the number of the
block.
As for Denial of Service attacks, in Ethereum they are also
related to business logic. It includes cases in which the smart
contract becomes unusable, such as when selfdestruct function
is called e.g. due to an access control issue (as in the second
Parity Wallet hack). Another real world example includes
GovernMental, which was a smart contract that accumulated
1100 ether that was impossible to withdraw because such
transaction would exceed the block gas limit. The funds
were finally obtained after a while, when the block gas limit
increased enough[12].
All threats related to Business Logic of Smart Contracts
are well presented in all frameworks except Solidity Security
Considerations which is focused more on technical aspect of
Solidity language.
C. Data Storage
Smart contracts and blochchain are not designed to store
secret data securely. It is important to protect sensitive data
from being accessed by unauthorized parties, meaning that
secret data should not be kept in blockchain as plaintext. Data
stored in smart contracts should be identified and protected.
An example of an attack connected with blockchain storage
is front-running. Usually the transactions with higher gas cost
are mined more quickly, as they are more profitable for the
miners. Also, as Ethereum is a public blockchain, everyone
can see the list of pending transactions and its contents. These
two facts lead to the possibility of a front-running attack also
known as race condition. If a smart contract relies on the
time that a user sends an answer, the attacker can monitor
the transaction pool in order to discover the correct solution
and then create own transaction with a higher gas price[32].
Once again, this vulnerability can be mitigated by using the
commit-reveal scheme.
D. Design and Architecture
This area focuses on best practices that should be followed
during design phase of application development. Most impor-
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 7
TABLE I
COMPARISON OF DAPP/SC SECURITY FRAMEWORKS/GUIDELINES/BEST PRACTICES
Ethereum
Smart Contract
Best Practices
(ConsenSys)
Smart Contract
Security Verification
Standard (SecuRing)
DASP Top 10
(NCC Group)
Solidity Security
Considerations
Guylando
Knowledge
Lists
SWC Registry
Authorization and Access Control - + + - + -
Business Logic and Denial of Service + + + - + -
Data Storage + + - - + -
Design and Architecture + + - - + -
Good Code Examples + - - + + +
Input Validation and Variable Handling + + + + + -
Known Attacks + + + + + +
Test Coverage - - - - - +
Token Recommendations + + - - + -
tantly, all smart contracts should be identified and an extensive
threat modelling should be performed. Additionally, the possi-
bility of identifying new attacks vectors should be considered.
In the Decentralized Application Security Project Top 10 this
issue is referred to as ”Unknown Unknowns”, which stands for
the vulnerabilities and attacks that are yet to be discovered, as
Solidity is still evolving[32]. Therefore, its best to reuse code
from trusted repositories such as OpenZeppelin and to provide
proper countermeasures that will help to minimize the surface
of a potential attack. It is also especially important to perform
a thorough penetration test on every smart contract.
E. Test Coverage and Good Code Examples
Developing DApps requires a lot of specific knowledge not
only about smart contracts, but also about Solidity program-
ming language. Security issues can be caused by improper
usage of the language. Good code examples are integral part of
Smart Contract Weakness Classification and Test Cases. Good
code examples are also provided in Ethereum Smart Contracts
Security Recommendations by Guylando.
F. Known Attacks
One of the most famous smart contract known attacks is
reentrancy, which was exploited in The DAO Hack. It can be
introduced into the code when a smart contract sends ether to
an unknown account, that can also be a smart contract with
attacker-defined code. Then after the vulnerable smart contract
sends ether to a malicious one, the fallback function is invoked,
causing another call to the vulnerable smart contract, which is
why the attack is called reentrancy[12]. This scenario is only
a threat if a smart contract does not follow the checks-effects-
interactions pattern, meaning that ethers are sent (which is an
interaction) before all effects are enforced (e.g. the balance of
an account is not decreased)[12]. This attack is described in
every framework we compared.
Another described threat in this area is the homoglyph
attack, which leads to unexpected smart contract behaviour.
The victim thinks that the function will refund wei balance
of the user and decrease the token balance. However, due to
the presence of a homoglyph, the function will only delete the
tokens. As a result, the function will not be activated and it
will only decrease user’s token balance.
G. Input Validation and Variable Handling
Values obtained as parameters by smart contracts should be
validated as Solidity is not protected against e.g. arithmetic
overflows and underflows by design, which means that when
a number that is outside of the data type’s range is assigned
to a variable, the result wraps around, e.g. assigning 256 to
uint8 will result in 0, as the range of uint8 covers values
from 0 to 255. The mitigation for this attack is ensuring
that arithmetic operations such as addition, subtraction, and
multiplication are guarded with appropriate require assertions.
It is not necessary in case of division, as it does not cause
overflows or underflows, and division by 0 is reverted by
the EVM. The most popular way of preventing arithmetic
issues is using SafeMath library available in OpenZeppelin
repositories[12]. In order to minimise the gas cost of the code,
every usage of integer data type should be analysed for a
possibility of overflow and underflow, considering e.g. the
number of operations that a user would have to perform to
cause an overflow. It should be also noted that sometimes an
overflow is intended (e.g. in a clock).
Another popular issue with smart contracts is caused by not
checking the return values when using low level calls. There
are numerous ways of performing an ether transfer. The first is
through the transfer method, which is considered safe, as any
errors will propagate and stop the further execution. Otherwise,
it is possible to abuse the smart contract by making it send
funds to a smart contract that has no payable fallback function,
so it would not be possible to transfer funds to it. Despite a
failed transfer, the rest of the vulnerable function will still
be executed. The same problem applies to calling other smart
contracts using callcode and delegatecall – they also do not
propagate, but instead they return false. The safe alternative is
to perform a contract call, which means defining an instance
of external smart contract inside another smart contract and
calling it as in object-oriented programming[12], [32].
Last weakness we present under this security area is the
short address attack, which is performed on third-party appli-
cations such as exchange’s hot wallets. It results from improper
input validation of the address field and the fact that the EVM
will pad the encoded parameters with zeros if their length is
shorter than expected. This vulnerability can only occur if the
transactions are signed by the third party[12], [32].
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply. 
IEEE IPCCC 2020 8
VII. CONCLUSION
The purpose of this paper was to present Ethereum decen-
tralized application development methodology with focus on
security issues and its verification. We introduced key concepts
that are related to developing decentralized applications and
Crypto Collectibles games. Additionally, an overview of the
issues associated with the security of Ethereum decentralized
applications was presented. We compared guidelines from
Ethereum Smart Contract Best Practices by ConsenSys, Smart
Contract Security Verification Standard created by SecuRing,
Decentralized Application Security Project introduced by NCC
Group, Security Considerations from Solidity documentation,
Ethereum Smart Contracts Security Recommendations from
Guylando Knowledge Lists, and Smart Contract Weakness
Classification and Test Cases. It should be noted that there
is no one guideline to follow during the whole application
development process. After comparing this guidelines we
concluded that Decentralized Application Security Project Top
10 and Solidity Security Considerations are entry guidelines
with generic instructions for introducing developers to smart
contract development security issues. Smart Contract Security
Verification Standard is the only guideline which includes
a standardized security checklist for developers, reviewers
and vendors in every stage of the development cycle of
smart contracts, but it lacks of technical focus. Ethereum
Smart Contracts Security Recommendations by Guylando are
the best choice for developers who want to avoid known
weaknesses in application code. When it comes to security
verification, Smart Contract Weakness Classification and Test
Cases guideline is irreplaceable, as it contains 33 known
major weaknesses of smart contracts including code examples.
Ethereum is currently one of the many platforms that support
decentralized blockchain games. Despite its weaknesses, it
is also most technologically mature in case of developing
decentralized applications and games. Further research should
consider a permissioned blockchain, which in many cases
can provide a sufficient degree of decentralization while also
improving the usability and security.
ACKNOWLEDGMENT
This work was partially supported by the European Union’s
Horizon 2020 research and innovation programme under the
grant agreement No. 825183.
REFERENCES
[1] S. Raval, Decentralized Applications, O’Reilly Media, Inc., 2016.
[2] Zhu, S., Cai, Z., Hu, H., Li, Y., & Li, W. (2019). zkCrowd: a hybrid
blockchain-based crowdsourcing platform. IEEE Transactions on Indus-
trial Informatics, 16(6), 4196-4205.
[3] Zhu, S., Li, W., Li, H., Tian, L., Luo, G., & Cai, Z. (2018). Coin hopping
attack in blockchain-based iot. IEEE Internet of Things Journal, 6(3),
4614-4626.
[4] Cai, Z., Zheng, X., & Yu, J. (2019). A differential-private framework for
urban traffic flows estimation via taxi companies. IEEE Transactions on
Industrial Informatics, 15(12), 6492-6499
[5] Cai, Z., & He, Z. (2019, July). Trading private range counting over big
IoT data. In 2019 IEEE 39th International Conference on Distributed
Computing Systems (ICDCS) (pp. 144-153). IEEE.
[6] Wu, K. An Empirical Study of Blockchain-based Decentralized Applica-
tions. arXiv preprint arXiv:1902.04969. (2019)
[7] Buterin, V. (2014). A next-generation smart contract and decentralized
application platform. white paper, 3(37).
[8] K. Raj, Foundations of Blockchain, Birmingham: Packt Publishing Ltd.,
2019.
[9] Wood, G. Ethereum: A secure decentralised generalised transaction
ledger. Ethereum project yellow paper, 151(2014), 1-32., 2014
[10] Gerring, T. (2016). Cut and try: building a dream-Ethereum Blog.
Ethereum Blog.
[11] Buterin, V. (2014). Launching the Ether sale. working paper,
http://blog. ethereum. org/2014/07/22/launching-the-ether-sale (accessed
12.02. 2020).
[12] Wood, G., Antonopoulos, A. M. (2018). Mastering Ethereum. Se-
bastopol, California, USA: O’Reily Medica Inc.
[13] DuPont, Q. (2017). Experiments in algorithmic governance: A history
and ethnography of “The DAO,” a failed decentralized autonomous orga-
nization. In Bitcoin and Beyond (Open Access) (pp. 157-177). Routledge.
[14] N. Prusty, P. Valencourt, S. Chopra and B. Hill, Blockchain Developer’s
Guide, Packt Publishing, 2018.
[15] W. Sun and X. Wu, Blockchain Quick Start Guide, Packt Publishing,
2018.
[16] Szabo, N. (1996). Smart contracts: building blocks for digital markets.
EXTROPY: The Journal of Transhumanist Thought,(16), 18, 2.
[17] B. Hill, S. Chopra and P. Valencourt, Blockchain Quick Reference, Packt
Publishing Ltd., 2018.
[18] I. Bashir, Mastering Blockchain, Packt Publishing Ltd., 2018.
[19] E. Muzzy, “The Thirdening: What You Need To Know,” ConsenSys,
10.01.2019. [Online]. Available: https://media.consensys.net/the-
thirdening-what-you-need-to-know-df96599ad857. [Accessed 12 02
2020].
[20] Baird, K., Jeong, S., Kim, Y., Burgstaller, B., Scholz, B. (2019). The
Economics of Smart Contracts. arXiv preprint arXiv:1910.11143
[21] R. Modi, Solidity Programming Essentials, Packt Publishing Ltd., 2018.
[22] R. Kanna, K. Solorio and D. Hoover, Hands-On Smart Contract Devel-
opment with Solidity and Ethereum, O’Reilly Media, Inc., 2019.
[23] W. Entriken, D. Shirley, J. Evans and N. Sachs,
“Ethereum Github: EIP-721,” 24.01.2018. [Online]. Available:
https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.
[Accessed 12.02.2020].
[24] Wüst, K., Gervais, A. (2018, June). Do you need a blockchain?. In 2018
Crypto Valley Conference on Blockchain Technology (CVCBT) (pp. 45-
54). IEEE.
[25] M. Mukhopadhyay, Ethereum Smart Contract Development, Packt Pub-
lishing, 2018.
[26] S. Au and T. Power, Tokenomics, Packt Publishing, 2018.
[27] M. Wuehler, S. Lederer, R. Madsen, K. Iyer, P. Allen and J. Bambara,
Blockchain: A Practical Guide to Developing Business, Law, and Tech-
nology Solutions, McGraw-Hill, 2018.
[28] J. Ingeno, Software Architect’s Handbook, Packt Publishing, 2018.
[29] P. R. Manoj, Ethereum Cookbook: Over 100 recipes covering Ethereum-
based tokens, games, wallets, smart contracts, protocols, and Dapps, Packt
Publishing, 2018.
[30] Pang, J., Huang, Y., Xie, Z., Han, Q., & Cai, Z. (2020). Realizing the
Heterogeneity: A Self-Organized Federated Learning Framework for IoT.
IEEE Internet of Things Journal.
[31] F. Volland, “Solidity Patterns,” [Online]. Available:
https://fravoll.github.io/solidity-patterns/. [Accessed 10.02.2020].
[32] D. Wong and M. Hemmel, “Decentralized Application Security
Project Top 10 of 2018,” [Online]. Available: https://dasp.co/. [Accessed
20.11.2019].
[33] Min, T., Wang, H., Guo, Y., & Cai, W. (2019, August). Blockchain
games: A survey. In 2019 IEEE Conference on Games (CoG) (pp. 1-8).
IEEE.
[34] Scholten, O. J., Hughes, N. G. J., Deterding, S., Drachen, A., Walker, J.
A., & Zendle, D. (2019, October). Ethereum Crypto-Games: Mechanics,
Prevalence, and Gambling Similarities. In Proceedings of the Annual
Symposium on Computer-Human Interaction in Play (pp. 379-389).
[35] Min, T., & Cai, W. (2019, June). A security case study for blockchain
games. In 2019 IEEE Games, Entertainment, Media Conference (GEM)
(pp. 1-8). IEEE.
[36] Attaran, M., & Gunasekaran, A. (2019). Blockchain for Gaming. In
Applications of Blockchain Technology in Business (pp. 85-88). Springer,
Cham.
[37] Munir, S., & Baig, M. S. I. (2019). Challenges and Security Aspects of
Blockchain Based Online Multiplayer Games.
[38] Sihvonen, T., Serada, A., & Harviainen, J. T. (2019). CryptoKitties and
the New Ludic Economy: How blockchain introduces value, ownership,
and scarcity in the digital world.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:30:32 UTC from IEEE Xplore.  Restrictions apply.