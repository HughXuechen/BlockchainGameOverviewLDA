Resource Trading in Blockchain-Based Industrial Internet of Things
3602 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 15, NO. 6, JUNE 2019
Resource Trading in Blockchain-Based
Industrial Internet of Things
Haipeng Yao , Member, IEEE, Tianle Mai , Jingjing Wang , Student Member, IEEE,
Zhe Ji, Member, IEEE, Chunxiao Jiang, Senior Member, IEEE, and Yi Qian , Fellow, IEEE
Abstract—Past few years have witnessed the compelling
applications of the blockchain technique in our daily life
ranging from the financial market to health care. Consid-
ering the integration of the blockchain technique and the
industrial Internet of Things (IoT), blockchain may act as a
distributed ledger for beneficially establishing a decentral-
ized autonomous trading platform for industrial IoT (IIoT)
networks. However, the power and computation constraints
prevent IoT devices from directly participating in this proof-
of-work process. As a remedy, in this treatise, the cloud
computing service is introduced into the blockchain plat-
form for the sake of assisting to offload computational task
from the IIoT network itself. In addition, we study the re-
source management and pricing problem between the cloud
provider and miners. More explicitly, we model the interac-
tion between the cloud provider and miners as a Stackel-
berg game, where the leader, i.e., cloud provider, makes the
price first, and then miners act as the followers. Moreover, in
order to find the Nash equilibrium of the proposed Stackel-
berg game, a multiagent reinforcement learning algorithm is
conceived for searching the near-optimal policy. Finally, ex-
tensive simulations are conducted to evaluate our proposed
algorithm in comparison to some state-of-the-art schemes.
Index Terms—Blockchain, cloud mining, industrial In-
ternet of Things (IIoT), multiagent reinforcement learning,
Stackelberg game.
I. INTRODUCTION
R ECENTLY, Internet of Things (IoT) has received a large
amount of attention from both academics and industries. It
is estimated that there may be a total of 20 billion connected IoT
Manuscript received October 25, 2018; revised February 4, 2019; ac-
cepted February 24, 2019. Date of publication March 4, 2019; date of
current version June 12, 2019. Paper no. TII-18-2795. (Corresponding
author: Haipeng Yao.)
H. Yao and Z. Ji are with the State Key Laboratory of Networking
and Switching Technology, Beijing University of Posts and Telecom-
munications, Beijing 100876, China (e-mail:, yaohaipeng@bupt.edu.cn;
jiz18@bupt.edu.cn).
T. Mai is with the Beijing Advanced Innovation Center for Future Inter-
net Technology, Beijing University of Technology, Beijing 100124, China
(e-mail:,machealmai@gmail.com).
J. Wang is with the Department of Electronic Engineering, Tsinghua
University, Beijing 100084, China (e-mail:,chinaeephd@gmail.com).
C. Jiang is with the Tsinghua Space Center, Tsinghua University,
Beijing 100084, China (e-mail:, jchx@tsinghua.edu.cn).
Y. Qian is with the Department of Electrical and Computer Engineer-
ing, University of Nebraska-Lincoln, Lincoln, NE 68588 USA (e-mail:,
yqian2@unl.edu).
Color versions of one or more of the figures in this paper are available
online at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/TII.2019.2902563
devices by the end of 2020. Specifically, industrial IoT (IIoT)
as a subset of IoT has shown a significant impact on businesses,
safety, and even lives. Compared to other IoT applications, the
IIoT is focusing on connecting machines and devices in a di-
verse range of industries, including manufacturing, agriculture,
oil and gas, transportation, and health care [1]. However, with
the IIoT devices numbers and performance requirement contin-
ually growing, the traditional centralized IoT architecture poses
great challenges, such as device safety, personal privacy, and
architecture rigid, especially in the context of the IIoT charac-
terized by frequency information exchange and autonomic fi-
nancial transaction. To address this problem, peer-to-peer (P2P)
architecture was introduced to design trading platform for IIoT,
where each node can trade their asset (such as surplus energy
in microgrids and weather information in the meteorological
station) with others directly without third-party organization.
At past few years, the blockchain has shown its world-
changing potential in a range of IoT applications. The
blockchain, as an incorruptible digital ledger, is a tamper-
proof, distributed database, which is maintained by network
nodes without identity authentication in a P2P network [2]. It
can not only record financial transactions but also anything of
value through using a growing list of the cryptographic hash
block. Meanwhile, the concept of decentralized autonomous or-
ganizations (DAOs) became practical with the development of
blockchain, which aims at establishing a fully decentralized and
autonomous organization without hierarchical management [3].
A DAO is operated upon the encoding procedure in smart con-
trasts and is capable of tracking the financial transaction in
blockchain [2].
However, the huge computational resources requirement of
establishing a DAO platform based on blockchain prevents
lightweight IIoT devices and smart mobile devices from directly
participating. To address this issue, the “cloud mining” mecha-
nism was introduced to provide computation resource (such as
CPU and GPU) for the IIoT DAO platform, where lightweight
devices can offload their computational task to cloud providers.
Specifically, relying on the cloud mining, more nodes can par-
ticipate as the consensus nodes, which is beneficial in terms of
improving the robustness of the blockchain. With the cloud com-
puting joining in, a resource management and pricing problem
between the resource provider and miners turns up, where the
resource provider first set price aiming at maximizing its own re-
ward, whereas miners purchase the computational resource from
the provider for the sake of obtaining the “best buys.” Relying
1551-3203 © 2019 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See http://www.ieee.org/publications standards/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0003-1391-7363
https://orcid.org/0000-0002-8500-1461
https://orcid.org/0000-0003-3170-8952
https://orcid.org/0000-0001-5671-916X
mailto:yaohaipeng@bupt.edu.cn
mailto:jiz18@bupt.edu.cn
mailto:machealmai@gmail.com
mailto:chinaeephd@gmail.com
mailto:jchx@tsinghua.edu.cn
mailto:yqian2@unl.edu
YAO et al.: RESOURCE TRADING IN BLOCKCHAIN-BASED INDUSTRIAL INTERNET OF THINGS 3603
on the sequence of two players’ actions, in this paper, we model
the interaction between the resource provider and miners as a
Stackelberg game. In addition, considering the noncooperative
relationship among miners, we propose a multiagent reinforce-
ment learning to search the Nash equilibrium point. Compared
with traditional meticulously designed heuristics approaches,
the multiagent reinforcement learning can converge to the best
solution without requiring ideal knowledge about environment
system.
The main contributions of this paper are summarized as fol-
lows.
1) We use blockchain to construct a decentralized self-
organized trading platform for IIoT devices. In addi-
tion, cloud mining mechanism is introduced to assist the
lightweight IoT devices to offload huge computational
tasks to the cloud provider.
2) We model the interaction between the cloud provider and
miners as a Stackelberg game. Moreover, a multiagent re-
inforcement learning approach, namely “WoLF-PHC,” is
proposed to solve the Nash equilibrium of the Stackelberg
game considered.
3) Extensive simulations are conducted for evaluating the
convergence performance of the “WoLF-PHC” in com-
parison to Q-learning.
The rest of this paper is organized as follows. In Section II,
we review the related work about the scenario considered. In
Section III, we model the interaction between the resource
provider and miners as a Stackelberg game. In Section IV, a mul-
tiagent reinforcement learning algorithm, i.e., “WoLF-PHC”
algorithm, is conceived for searching the Nash equilibrium of
our proposed game model. In Section V, simulation results and
performance evaluation are provided, followed by our conclu-
sions and future works in Section VI.
II. RELATED WORKS
Recently, numerous pieces of the literature concentrate on
DAOs for a variety of IoT networks. In [4], Huh et al. proposed
a blockchain computing platform relying on Ethereum to man-
age IoT devices, where a smart contract was used to save data
coming from meters and smartphones for the sake of achieving
the communication and synchronization among IoT devices.
In [5], Kang et al. proposed a reputation-based data sharing
scheme to efficiently ensure data storage and sharing among
Internet of vehicles without centralized authorization through
exploiting the consortium blockchain and smart contract. In [6],
Kang et al. proposed a COnsortium blockchaiN (PETCON)
method for the localized P2P electricity trading system through
blockchain. In [7], Liu et al. exploited blockchain-inspired data
coins and energy coins to deal with the challenges brought by
both information and energy interactions in electric vehicles
cloud and edge computing.
Furthermore, there have been a series of works on blockchain
from the perspective of game theory. In [8], considering the
block propagation time, Houy presented a game for deciding
how many transactions should be packed in a block in the face
of the fact that more transactions may bring more profit, but
may also decrease the possibility of a successful mining process.
Similarly, Beccuti and Jaag [9] modeled this competition as a
sequential game, where the player who aimed at solving the
Proof-of-Work (PoW) based puzzle had to decide whether to
report it or to start the next puzzle. In [10], Li et al. constructed
a secure energy trading system for P2P energy trading through
consortium blockchain technology and proposed a credit-based
payment scheme by using Stackelberg game to guarantee high
frequent trading. In [11], Xiong et al. formulated a Stackelberg
game to model the relationship between the resource provider
and miners and applied a backward induction algorithm for
searching the Nash equilibrium.
III. IIOT DAO PLATFORM
In this section, we first design a DAO trading platform for
IIoT based on blockchain network aided with cloud mining.
Then, we model the computational resource management and
pricing problem between the resource provider and miners as a
Stackelberg game.
A. DAO Platform Assisted by Cloud/Fog Computing
The IIoT starts up an industrial revolution industry 4.0. Con-
sidering the vulnerable and brittle defect in a centralized archi-
tecture, to design security and unified distributed platform for
billions of devices become reasonable. The blockchain technol-
ogy is the security guards of the most valuable cryptocurrencies
in the world, and its decentralized network and embedded smart
contracts are suitable solutions for IIoT’s security and durability
concerns [12].
In blockchain networks, achieving distributed consen-
sus is the core problem. Nakamoto consensus protocol
is a decentralized, pseudonymous consensus protocol [13],
where a computation-intensive mechanism PoW is introduced
for achieving the consensus from all participants. PoW, also
termed as mining, is a process of solving a hash function, which
is costly to generate but easy for others to verify [14]. The
aforementioned characteristic of PoW mechanism needs to meet
certain requirements of updating decentralized shared ledger.
Additionally, there is a special type of nodes, namely “min-
ers,” which make the decision to devote their computational
resources. They may compete with each other to produce a
new block and obtain rewards relying on the financial intensive
mechanism.
With the aid of PoW, the mobile users in IoT blockchain
are incentive to contributing its computation power to maintain
the decentralized shared ledger. However, given that the mo-
bile users’ power and computational capability are limited, it
is difficult for lightweight nodes to directly participate in the
PoW process. Hence, as shown in Fig. 1, we introduce the cloud
mining to the blockchain networks for assisting the nodes to
offload their storage and computation task to computation re-
source provider. Due to the financial intensive mechanism of
PoW, the nodes prefer to join in the consensus process. When
more nodes change their roles from free riders into consensus
nodes, a robust DAO trading platform can be established. Then,
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
3604 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 15, NO. 6, JUNE 2019
Fig. 1. Self-organized DAO trading platform for IoT networks.
we will describe the operation details of this “cloud mining”
assisted IIoT DAO platform.
1) System Initialization: In order to ensure the authenticity
and integrity of digital messages, the blockchain system needs
to be initialized by the cryptography technique. In our IIoT
DAO system, each node registers on a trusted authority agent
deploying on the cloud server to become a legitimate entity
with an identity ID joining the blockchain system, and gets the
public/privacy key using elliptic asymmetric cryptography and
certificate with curve digital signature algorithm [3].
2) Transactions Process: Recording the transactions is the
core function of the IoT trading system. The transaction process
of blockchain is a transfer of cryptocurrency (such as Bitcoin and
Ether) value, which is broadcast to all system and stored into new
blocks. In our system, the IoT nodes first send their request (such
as energy request and surrounding weather information) to edge
computer servers, and edge servers will broadcast their demand
to the whole DAO platform. Then, the relevant supplier nodes
(such as solar panels or wind generators and meteorological
station) will respond to the edge server, their inventory, and unit
price. Based on demand of consumers and stock of supplier, the
edge server will match the trading pairs. Then, the consumers
and supplier can carry on transactions.
3) Building Block: Based on the PoW process, each node
needs to compete with each other to obtain the authority of up-
dating the distributed ledger. With the assisting of cloud mining
mechanism, each node can buy the computer service from the
cloud computing provider, and offload the huge computation to
cloud servers. In addition, the more computation power means
the more possibility of win financial incentive. Therefore, there
exists resource management and pricing problem between IoT
devices and cloud provider, which we will detailedly describe
in the following.
4) Consensus Process: The consensus process is to deal
with the agreement of the whole blockchain system onto a truth
Fig. 2. Stackelberg game model.
about their transactions data. Once the solution of the hash
puzzle is obtained by a miner, all transactions in the current
period are packed into a new block and broadcast to the whole
blockchain network. The other nodes in the blockchain apply a
hash validation-comparison function and the longest-chain rule
to evaluate if they accept this new block. If so, the new block will
be linked to the main blockchain in the chronological order, and
the node’s local view of the blockchain state is updated [15].
In the blockchain, once the consensus process accomplished,
details of the transaction (such as ownership, price, and time
stamp) are recorded through the distributed ledger guarantees.
B. Problem Formulation
As is described earlier, a resource management and pricing
game between miners and the resource provider turns up. In this
paper, we model this relationship as a two stages Stackelberg
game, which is a strategic game in economics. As shown in
Fig. 2, the resource provider, termed as the “leader,” takes action
first and the miners, termed as the “followers,” take actions
afterward. Both the leader and followers can constantly adjust
their strategies for the sake of earning more profit.
In the upper stage, the resource provider sets the pricing
strategy {λ = [λi ]i∈N : 0 < λi < λ̄} as the unit price of the
computational resource, where λi is the price for miner i and λ̄
is the maximum price. In addition, some other overhead c may
be costed resulting from the electricity consumption, loss of
hardware, as well as operation and maintenance cost. Therefore,
the expected reward of the resource provider can be expressed
as
Rc = Σ
i∈N
λiμi − Σ
i∈N
cμi (1)
where μi is the service demand of miner i.
By contrast, in the lower stage, there are a set of nodes de-
noted as N = {1, . . . , N}, which are interested in purchasing
computational service and in competing with each other to earn
financial incentive by mining blocks. Each miner i ∈ N de-
cide its computational service demand, which is represented by
μi ∈ [μ, μ̄]. μ is represented by the minimum computational
power to participate in the blockchain for data synchroniza-
tion, whereas the maximum computational power of the cloud
provider is represented by μ̄. According to Nakamoto consen-
sus protocol, the probability of winning the competition among
miners who is the first to solve the PoW-based puzzle is related
with the miners’ computational power. Therefore, we defined
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
YAO et al.: RESOURCE TRADING IN BLOCKCHAIN-BASED INDUSTRIAL INTERNET OF THINGS 3605
αi to evaluate the corresponding computational power of miner
i among the whole consensus nodes, which can be given by
α(μi) =
μi∑
j∈N μj
. (2)
Furthermore, we define a utility function Ri to evaluate the
expected reward by acting μi , and we have
Ri = R× α(μi)− λi × μi (3)
where R represents the fixed reward of a successful mining pro-
cess, whereas λi is the price of the unit computational resource
from cloud provider.
As described earlier, a sequential decision-making process of
cloud provider and miners is modeled. The cloud providers first
predict the total service demand of miners and set its price to
earning more profit. We can formulate the optimization problem
of cloud providers as follows:
max
λ
Rc(λ|μ)
s.t.
{
λ ≥ 0
Σi∈N λiμi ≥ Σi∈N cμi
.
Furthermore, observing the price strategies of cloud
providers, the miners set its service demand to earn more profit.
The optimization problem of miners is denoted as
max
μi
Ri(μi |λi)
s.t.
{
μi ≥ 0
R× α(μi) ≥ λi × μi
.
C. Game Analysis
Hence, we have already formulated the mathematical model
of two sides in the Stackelberg game. Both the resource provider
and miners are capable of constantly adjusting their strategies to
maximize their reward. Specifically, the objective of the Stack-
elberg game is to find the Nash equilibrium. The Nash equi-
librium is the optimal outcome of the game, where no player
has an incentive to deviate from its strategy after considering its
opponent’s choice [16]. In our problem, the Nash equilibrium
of the proposed Stackelberg game can be defined as follows.
Definition 1: Let μ∗ and λ∗ be the optimal unit price of re-
source provider and service demand of each miner, respectively.
Then, the point (μ∗, λ∗) is the Nash equilibrium point if it satis-
fies
Ri(μ∗, λ∗) ≥ Ri(μ, λ∗) (4)
as well as
Rc(μ∗, λ∗) ≥ Ri(μ∗, λ). (5)
Then, in order to verify the uniqueness and existence of the
Nash equilibrium in our Stackelberg game, we take the second
order derivatives of the utility function of miners (7) with respect
to μi and utility function of (1) with respect to λ, which is written
as follow:
∂2Ri
∂μi
2
= − 2R
Σj �=iμj
(Σj∈N μj )3
≤ 0 (6)
∂2Rc
∂λ2
= − 2c
λ2
(N − 1)R
N
≤ 0. (7)
Therefore, Ri and Rc are strictly concave. Accordingly, the
Nash equilibrium exists in this Stackelberg game.
IV. MULTIAGENT REINFORCEMENT LEARNING
BASED RESOURCE MANAGEMENT
In this section, we first introduce the multiagent reinforce-
ment learning algorithm, termed as “WoLF-PHC.” Then, we
present how the “WoLF-PHC” can be applied to solve a pro-
posed Stackelberg game.
A. Multiagent System
The cloud provider and miners constitute a multiagent system
in a Stackelberg game. Considering the noncooperation rela-
tionship among players, each of them can only have incomplete
information of the underlying game model. Therefore, it is im-
practical to implement designed heuristics analysis algorithms,
which require accurate environmental information. Inspired by
some successful examples of applying machine learning algo-
rithms to game theory, we introduce the reinforcement learning
method for the miners and the cloud provider to obtain their own
optimal reward. Reinforcement learning algorithms are a kind
of model-free algorithms, because the update rule of the policy
does not require ideal knowledge about the environment system.
In the context of a single agent, the reinforcement learning algo-
rithm can learn a policy mapping from the state to the action by
interacting with the underlying environment so as to maximize
the cumulative reward. By contrast, for the multiagent system,
compared to the single-agent case that aims for maximizing its
own cumulative reward, the multiagent case aims for maximiz-
ing the whole reward of all the agents in the system considering
other agents’ behaviors [17].
To elaborate, in the learning process, the agent observes the
environment states, and then takes some actions for getting a
reward. Based on such interacting process, the agent can update
its policy with the purpose of maximizing the cumulative reward,
as shown in Fig. 3. In the following, let us, first of all, define three
critical components, i.e., state, action, and immediate reward, of
the miners and cloud provider for our proposed reinforcement
learning algorithm.
In this paper, let μt ∈ Am and λt ∈ Ac denote the service
demand action of miners and the unit price set by resource
provider, respectively, where Am represents the action space of
the miner, whereas Ac represents the action space of the resource
provider. In each time slot, the miners and the resource provider
take actions sequentially.
At the beginning of the time slot t, the cloud provider first
set the price λt based on the state st
c = [μt−1
i ]i∈N observed
from underling game, where μt−1
i represents the service demand
of each miner in time slot (t− 1). The immediate reward is
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
3606 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 15, NO. 6, JUNE 2019
Fig. 3. Architecture of a multiagent reinforcement learning algorithm.
expressed by
Rc = Σ
i∈N
λt
iμ
t−1
i − Σ
i∈N
cμi. (8)
Similarly, after observing the pricing action of the cloud provider
in time slot t, each miner decides its service demand action
μt based on the state st
m = λt , where λt represents the pric-
ing action of the cloud provider. Hence, the immediate reward
Rm = Θ(R)− λt × μt can be obtained, where R is the fixed
reward of successful mining and Θ() is to present whether the
miner i success in this time stamp. The three critical compo-
nents of our reinforcement learning algorithm are summarized
as follows.
Definition 2: The three components of the miners are as
follows.
1) State:
st
m = λt .
2) Action:
μt ∈ Am .
3) Immediate reward:
Rm = Θ(R)− λt × μt.
Definition 3: The three components of the resource provider
are as follows.
1) State:
st
c = [μt−1
i ]i∈N .
2) Action:
λt ∈ Ac.
3) Immediate reward:
Rc = Σ
i∈N
λtμt
i − Σ
i∈N
cμt
i .
B. Policy Generation
The key challenges of multiagent reinforcement learning
are the nonstationary learning problem due to the noise sig-
nal brought by other agent. Directly applying single-agent re-
inforcement learning will suffer seriously oscillatory problem
and the learning result is hardly converge [18].The WoLF-PHC,
as the extension of Q-learning, adopts the principle of “win or
learn fast” to learn the dynamic target [19], where the variety of
learning rates is effectively to encourage convergence of multia-
gent in nonstationary environment. Therefore, in this paper, we
apply the WoLF-PHC algorithm for the miners and the cloud
provider to learn their policy in a multiagent system.
The updating rule of the Q-value is the same as that in the
Q-learning algorithm. Let αm ∈ (0, 1] denote the learning rate
and let δm ∈ (0, 1] represent the discount factor. The Q-function
of the miner with the service demand μ in the state st
m can be
formulated by Qm (st
m , μt). Hence, the update rule of the Q-
value can be given by
Qm (st
m , μt)← (1− αm )Qm (st
m , μt)
+ αm
(
Rm + δm Vr (Qm (st+1
m ))
) (9)
as well as
Vr (Qm (st
m )) = max
μ∈Am
Qm (st
m , μ) (10)
where Vr (Qm (st
m )) denotes the maximum Q-value of the miner
in the state st
m .
In the WoLF-PHC algorithm, miners can update their service
demand policy, i.e., πm :→ Pr(Am ), which is a map from the
state space to action space, for maximizing the cumulative re-
ward by interacting with the environment and other agents [20].
The πm (st
m , μ) denotes the possibility of choosing action μ in
the state st
m . The πm (st
m , μ) increases the possibility of the
current best action μ∗ based on the Q-function, which can be
expressed as
μ∗ = arg max
μ∈Am
Qm (sm , μt). (11)
Relying on the “win or learn fast” mechanism, a current aver-
age policy πm (st
m , μ) is introduced as a competitor to judge
the “win” or “failure” of the policy πm (st
m , μ). The miner
node chooses its learning parameter θm from θwin
m and θlose
m ,
where θwin
m < θlose
m , calculated from the result of the competition
of the Q-value of πm (st
m , μ) and πm (st
m , μ). In the condition
of win, θwin
m is used to update the policy cautiously. Otherwise,
θlose
m is applied to learn fast from the “failure” condition, i.e.,
θm =
⎧
⎨
⎩
θwin
m , Π
θlose
m , o.w
(12)
where we have Π
∑
μ∈Am
πm (st
m , μ)Qm (st
m , μ) >
∑
μ∈Am
πm (st
m , μ)Qm (st
m , μ).
(13)
In order to calculate the current average policy, Nm (st
m ) is
introduced to record and update the occurrence count of states
observed by the agent, which can be calculated by
Nm (st
m )← Nm (st
m ) + 1. (14)
Then, the average service demand of the miner node
πm (st
m , μ) can be updated by
πm (st
m , μ)← πm (st
m , μ) + Δ ∀μ ∈ Am (15)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
YAO et al.: RESOURCE TRADING IN BLOCKCHAIN-BASED INDUSTRIAL INTERNET OF THINGS 3607
Algorithm 1: The WoLF-PHC Algorithm for the Cloud
Provider.
set αc, δc , θ
win
c , θlose
c
Initialization
repeat
for t = 1, 2, 3 do
Observe the current state st
c
Select action λt at random with the probability policy
πm (st
m , λ)
Observe the next state st+1
c and immediate reward Rc
Update Qc(st
c , λ
t) and Vm (sc
m ) by:
Qc(st
c , λ
t)← (1− αc)Qc(st
c , λ
t) + αc(Rc +
δcVr (Qc(st+1
c )))
Update πc(st
c , λ) and πc(st
c , λ) by:
πc(st
c , λ)← πc(st
c , λ) + Δ ∀λ ∈ Ac
πc(st
c , λ)← πc(st
c , λ) +
st
c ,λ ∀λ ∈ Ac
end for
until
where
Δ =
πm (st
m , μ)− πm (st
m , μ)
Nm (st
m )
. (16)
In the learning process, the possibility of the miner choosing
a service demand is gradually increased, which can maximize
the expected reward, followed by the decrease of the other ac-
tions [19]. Therefore, the update of the service demand policy
of the miner can be given by
πm (st
m , μ)← πm (st
m , μ) +
st
m ,μ ∀μ ∈ Am (17)
where
st
m ,μ =
⎧
⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
−min
(
πm (st
m , μ),
θm
M − 1
)
,Π
′
Σμ ′ �=μ min
(
πm (st
m , μ′),
θm
M − 1
)
, o.w
(18)
where we have Π
′
: μ �= arg maxμ ′∈Am
Qm (st
m , μ′) and where
M is a constant coefficient.
As for the complexity of the WoLF-PHC algorithm, during
the training process, the agent updates its strategy according
to (9). Hence, the complexity of training process of each agent
is on the order of O(S2 ×A), where S represents the number of
state space and A represents the number of action space. As for
the complexity of the running process of WoLF-PHC, the most
complexity is the Q-table look-up. Therefore, the complexity of
the running process of each agent is approximate O(S).
The WoLF-PHC algorithm of pricing policy for the cloud
provider is shown in Algorithm 1.
V. SIMULATION RESULTS
In this section, we show the simulation results to evaluate
the convergence performance of our proposed algorithm for
the multiagent system. In addition, by performing simulation
with different number of miners, we evaluate the miners’ and
resource provider’s policy.
Fig. 4. Convergence performance of both Q-learning and WoLF-PHC
algorithms.
A. Convergence Performance of WoLF-PHC
First of all, we evaluate the convergence of the WoLF-PHC
algorithm and compare it with the Q-learning algorithm. In our
simulations, for simplicity, let the pricing action set and ser-
vice demand action set of the resource provider and miners
be Am = (10, 11, . . . , 100) and Ac = (0, 1, . . . , 100), respec-
tively. The quantitative factor of the cost of the unit resource in
cloud provider is c = 1, and the reward of the successful mining
is R = 10 000. For simplicity, we assume a uniform pricing
strategy for each miner. In order to ensure that the agent can
converge to optimal policy, we set the maximum episode num-
bers as 5000 for both Q-learning and WoLF-PHC algorithms. In
addition, the learning rate is α = 0.2, which determines the de-
gree to which the modified Q-value overrides the older one. The
discount factor β = 0.8 quantifies how much importance we
focus on future rewards. The learning parameters θwin and θlose
are set as 0.0025 and 0.01, respectively, which can improve the
convergence performance [19]. Our experiment environment is
developed on Python 3.3.
First, we set only one miner and one cloud provider partici-
pating in the blockchain network. We apply the Q-learning and
WoLF-PHC algorithms in both side of the resource provider
and the miner for learning the optimal policy. The Q-learning
process is demonstrated in Fig. 4 where the learning result can-
not converge and shows poor performance. Compared with Q-
learning algorithm, the WoLF-PHC algorithm exhibits a good
convergence performance due to the automatic adjustment of
learning rate, as shown in Fig. 4. Both the cloud provider and
miners converge near to the Nash equilibrium point benefiting
from the “winning or learning fast” mechanism of WoLF-PHC.
B. Number of Miners Versus Service Demand
In the following, we evaluate the impact for both cloud
provider’s price and miners’ service demand imposed by the
number of miners. It can be obviously seen that the ser-
vice demand of each miner is decreased with the increase in
the number of miners in the blockchain. This is because the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
3608 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 15, NO. 6, JUNE 2019
Fig. 5. Service demand versus the number of miners.
Fig. 6. Total service demand versus the number of miners.
competition among miners decreases the possibility of mining a
valued block for each miner, which can be explained by (2). Due
to the decrease of expected reward, the miners tend to cut down
its service demand for reducing financial loss. In addition, Fig. 5
shows the impact of the reward. With the increase of the fixed
reward from success mining, the service demand of each miner
is also increased. This is due to the fact that the increased reward
can enhance the miner’s expected reward, which stimulates the
miner to purchase more computational service to obtain more
profits. Therefore, the Nash equilibrium point is increased with
the increase of the reward value. As illustrated, we can draw the
conclusion that the Nash equilibrium point of service demand
is related to the expected reward of each agent, say the service
demand increases with the expected reward.
In spite of the service demand of each miner decreasing with
the growth of numbers, the total service demand is increasing,
as shown in Fig. 6. This is due to the fact that the competition
among miners distorts the relationship between expected reward
Fig. 7. Optimal price versus the number of miners.
and service demand. This competition simulates the miners to
have higher service demand to obtain more profit. Therefore,
the total service demand is increasing with the competition ag-
gravating.
C. Number of Miners Versus Price
As for the resource provider, as shown in Fig. 7, the optimal
price of the cloud provider is almost invariably with the increase
of the number of miners. That is because of the negative cor-
relation between the price and the service demand. With the
increase of the number of miners, the total service demand of
miners is increased. Therefore, due to the condition of the Nash
equilibrium, the price needs to slightly increase to meet a new
Nash equilibrium point. However, due to the default parameter
in our scenario, the optimal price is constrained to the maxi-
mum price. Therefore, the optimal price is always close to the
maximum price.
VI. CONCLUSION
In this paper, we investigated the resource management and
pricing problem in IIoT-based blockchain network with the aid
of cloud mining, which is an important topic and a vital prob-
lem in IoT blockchain. We established a self-organized trading
platform for presenting how the cloud mining can assist the
IoT-based blockchain. Moreover, we formulated the interaction
between the cloud provider and cloud miners as a Stackelberg
game. Then, we invoked a multiagent reinforcement learning al-
gorithm to achieve the near-optimal policy. Finally, simulation
results were given to evaluate to our proposed algorithm.
REFERENCES
[1] Y. Zhang, R. Yu, M. Nekovee, and Y. Liu, “Cognitive machine-to-machine
communications: Visions and potentials for the smart grid,” IEEE Netw.,
vol. 26, no. 3, pp. 6–13, May/Jun. 2012.
[2] T. T. A. Dinh, R. Liu, M. Zhang, G. Chen, B. C. Ooi, and J. Wang,
“Untangling blockchain: A data processing view of blockchain systems,”
IEEE Trans. Knowl. Data Eng., vol. 30, no. 7, pp. 1366–1385, Jul. 2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
YAO et al.: RESOURCE TRADING IN BLOCKCHAIN-BASED INDUSTRIAL INTERNET OF THINGS 3609
[3] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain, “En-
abling localized peer-to-peer electricity trading among plug-in hybrid elec-
tric vehicles using consortium blockchains,” IEEE Trans. Ind. Inform.,
vol. 13, no. 6, pp. 3154–3164, Jun. 2017.
[4] S. Huh, S. Cho, and S. Kim, “Managing IoT devices using blockchain
platform,” in Proc. IEEE 19th Int. Conf. Adv. Commun. Technol., Bong-
pyeong, South Korea, Feb. 2017, pp. 464–467.
[5] J. Kang et al., “Blockchain for secure and efficient data sharing in vehicu-
lar edge computing and networks,” IEEE Internet Things J., early access,
doi: 10.1109/JIOT.2018.2875542.
[6] J. Kang, R. Yu, X. Huang, S. Maharjan, Y. Zhang, and E. Hossain, “En-
abling localized peer-to-peer electricity trading among plug-in hybrid elec-
tric vehicles using consortium blockchains,” IEEE Trans. Ind. Inform.,
vol. 13, no. 6, pp. 3154–3164, Dec. 2017.
[7] H. Liu, Y. Zhang, and T. Yang, “Blockchain-enabled security in electric
vehicles cloud and edge computing,” IEEE Netw., vol. 32, no. 3, pp. 78–83,
May 2018.
[8] N. Houy, “The bitcoin mining game,” Working Papers, 2014.
[9] J. Beccuti and C. Jaag, “The bitcoin mining game: On the optimality
of honesty in proof-of-work consensus mechanism,” Cryptecon, Zürich,
Switzerland, 2017.
[10] Z. Li, J. Kang, R. Yu, D. Ye, Q. Deng, and Y. Zhang, “Consortium
blockchain for secure energy trading in industrial internet of things,” IEEE
Trans. Ind. Inform., vol. 14, no. 8, pp. 3690–3700, Aug. 2018.
[11] Z. Xiong, S. Feng, W. Wang, D. Niyato, P. Wang, and Z. Han, “Cloud/fog
computing resource management and pricing for blockchain networks,”
IEEE Internet Things J., early access, doi: 10.1109/JIOT.2018.2871706.
[12] N. Teslya and I. Ryabchikov, “Blockchain-based platform architecture for
industrial IoT,” in Proc. 21st Conf. Open Innov. Assoc., Helsinki, Finland,
Nov. 2017, pp. 321–329.
[13] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Working
Papers, 2008.
[14] B. Laurie and R. Clayton, “Proof-of-work proves not to work,” in Proc.
Workshop Econ. Inf., Secur., p. 9, 2004.
[15] A. Gervais, G. O. Karame, K. Wüst, V. Glykantzis, H. Ritzdorf, and S.
Capkun, “On the security and performance of proof of work blockchains,”
in Proc. ACM SIGSAC Conf. Comput. Commun. Secur., Vienna, Austria,
Oct. 2016, pp. 3–16.
[16] D. Niyato and E. Hossain, “Competitive pricing for spectrum sharing
in cognitive radio networks: Dynamic game, inefficiency of Nash equi-
librium, and collusion,” IEEE J. Sel. Areas Commun., vol. 26, no. 1,
pp. 192–202, Jan. 2008.
[17] L. Busoniu, R. Babuska, and B. De Schutter, “A comprehensive survey
of multiagent reinforcement learning,” IEEE Trans. Syst. Man Cybern.,
vol. 38, no. 2, pp. 156–172, Mar. 2008.
[18] Y. Zhang, R. Yu, S. Xie, and W. Yao, “Home M2M networks: Architec-
tures, standards, and QoS improvement,” IEEE Commun. Mag., vol. 49,
no. 4, pp. 44–52, Apr. 2011.
[19] L. Xiao, Y. Li, J. Liu, and Y. Zhao, “Power control with reinforcement
learning in cooperative cognitive radio networks against jamming,” J.
Supercomput., vol. 71, no. 9, pp. 3237–3257, Sep. 2015.
[20] M. Bowling and M. Veloso, “Multiagent learning using a variable learning
rate,” Artif. Intell., vol. 136, no. 2, pp. 215–250, Apr. 2002.
Haipeng Yao (M’16) received the Ph.D. de-
gree from the Department of Telecommunica-
tion Engineering, Beijing University of Posts and
Telecommunications, Beijing, China, in 2011.
He is currently an Associate Professor with
the Beijing University of Posts and Telecommu-
nications, Beijing, China. He has authored or
coauthored more than 80 papers in prestigious
peer-reviewed journals and conferences. He has
been engaged in research on future Internet ar-
chitecture, network AI, big data, cognitive radio
networks, and optimization of protocols and architectures for broadband
wireless networks.
Tianle Mai received the bachelor’s degree from
the Beijing University of Posts and Telecommu-
nications, Beijing, China, in 2016.
He is currently a graduate student with the
Beijing University of Technology, Beijing, China.
His main research interests include artificial in-
telligence and future internet architecture.
Jingjing Wang (S’14) is currently working to-
ward the Ph.D. degree in information and
communication engineering at the Department
of Electronic Engineering, Tsinghua University,
Beijing, China.
From 2017 to 2018, he has been a joint
Ph.D. student with the Next Generation Wire-
less Group chaired by Prof. L. Hanzo, Univer-
sity of Southampton, Southampton, U.K. His re-
search interests include the resource allocation
and network association, learning theory aided
modeling, analysis and signal processing, as well as information diffu-
sion theory for mobile wireless networks.
Zhe Ji (M’15) received the Ph.D. degree in
electronic engineering from Tsinghua University,
Beijing, China, in 2015.
She is currently a Postdoctoral Researcher
with the Beijing University of Posts and Telecom-
munications, Beijing, China. Her research
interests include resource allocation, traffic con-
trol, and networking in wireless and satellite
networks.
Chunxiao Jiang (S’09–M’13–SM’15) received
the B.S. (highest Hons.) degree in information
engineering from Beihang University, Beijing,
China, in June 2008, and the Ph.D. (highest
Hons.) degree in electronic engineering from
Tsinghua University, Beijing, China, in January
2013.
Dr. Jiang was a recipient of the IEEE Globe-
com Best Paper Award in 2013, IEEE Global-
SIP Best Student Paper Award in 2015, IEEE
IWCMC Best Paper Award in 2017, and IEEE
Communications Society Young Author Best Paper Award in 2017.
Yi Qian (M’96–SM’07–F’19) received the Ph.D.
degree in electrical engineering from Clemson
University, Clemson, SC, USA.
He is currently a Professor with the Depart-
ment of Electrical and Computer Engineering,
University of Nebraska-Lincoln (UNL), Lincoln,
NE, USA. Prior to joining UNL, he was with
the telecommunications industry, academia, and
government. His research interests include com-
munications and systems, and information and
communication network security.
Prof. Qian was previously the Chair of the IEEE Technical Committee
for Communications and Information Security. He was the Technical Pro-
gram Chair for the IEEE International Conference on Communications
2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 06:55:18 UTC from IEEE Xplore.  Restrictions apply. 
https://dx.doi.org/10.1109/JIOT.2018.2875542
https://dx.doi.org/10.1109/JIOT.2018.2871706
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice