A Blockchain-Based Model for Cloud Service Quality Monitoring
A Blockchain-Based Model for Cloud
Service Quality Monitoring
Mona Taghavi , Jamal Bentahar , Hadi Otrok , and Kaveh Bakhtiyari
Abstract—This paper introduces a novel blockchain-based decentralized federation model that embodies quality verification for cloud
providers who lease computing resources from each other. The blockchain structure removes the barriers of a traditional centralized
federation and offers a fully distributed and transparent administration by enforcing the involved agents to maintain consensus on the
data. For a blockchain-based federation, it is vital to avoid blind-trust on the claimed SLA guarantees and monitor the quality of service
which is highly desirable considering the multi-tenancy characteristic of cloud services. Due to the fact that the blockchain network is
unable to access the outside world, it cannot handle, by its own, providers misbehavior in terms of SLA violations. Thus, we introduce
oracle as a verifier agent to monitor the quality of the service and report to the smart contract agents deployed on the blockchain.
Oracle is a trusted third-party agent who can communicate with the outside world of the blockchain network. The interaction between
cloud service providers (either providing a service or requesting it from another provider) and the oracle through smart contracts
comprises a system of autonomous and utility maximizer agents. Cloud requesters seek to receive high quality services with constant
monitoring at cheap prices or even with no charge, while cloud providers aim to have a balanced work-load with less preserved
capacity, and the oracle tends to charge higher for their monitoring services. Therefore, to model this conflicting situation, we formulate
a dynamic Stackelberg differential game to optimize the cost of using the oracle and maximize the profit of the agents with the role of
provider agent as a leader, and the requester and verifier agents as followers. Our designed Stackelberg differential game can seize
the dynamicity of users’ demand and resource provisioning in a competitive cloud market. We implemented our proposed decentralized
model using the Solidity language in the remix IDE on the Ethereum network. We further evaluated the optimal controls and agents’
profit with real-world data simulated for three concrete cloud providers. The results revealed that the requester agent initiates most of
the quality verification requests at the beginning to the middle time of the contract. Thus, the provider agent could reserve less
computing resources considering the fact that it could share the workload among other customers’ computing resources during the
peak-time. Moreover, imposing a higher penalty on the provider agent increased the capacity and decreased the number of requests
for quality verification at the equilibrium. The evaluation also disclosed that the impact of timing in the dynamic pricing strategy of the
verifier agent is very minimal, and the provisioning capacity of the provider is strongly correlated with the monitoring price.
Index Terms—Smart contracts, quality verification, stackleberg differential game, cloud computing, service provider, oracle
Ç
1 INTRODUCTION
THE demand variation has forced cloud providers to pre-
serve a massive amount of computing resources to avoid
Service Level Agreements (SLA) violation. To mitigate the
issue of underutilized and over provisioned computing
resources, cloud providers scaled their pool of resources by
forming cloud federations to maximize their profit and pro-
vide guaranteed Quality of Services (QoS) [1]. In spite of their
prominent advantages, cloud providers are reluctant to par-
ticipate in federations due to some strict challenges, including
the federations’ stability, long-term commitments from the
providers, fair revenue sharing, the presence of unknown and
untrusted participants, security and privacy concerns regard-
ing the managed data, and the creation and management
overhead of these federations [1], [2], [3], [4]. In order to over-
come the aforementioned limitations of the traditional federa-
tions, Cloudchain [5] proposed a new distributed blockchain-
based framework to support interoperability and coopetition
(i.e., cooperative competition) among the cloud providers.
Cloudchain allows the cloud providers to outsource their
unmet computing demands and agree on the values of shared
variables (e.g., amount of the resource, SLA and price) and
keep a history of how the values change over time.
Utilizing smart contracts in blockchain enabled Cloud-
chain to offer higher transparency, visibility, and reliance
within its fully decentralized agreements deployed on top
of Ethereum. However, Cloudchain falls short in supervis-
ing the SLA’s agreed terms, which requires to access the
outside world of the blockchain network. Each of the cloud
providers may disagree about SLA compliance. However,
investigating that is beyond the control of blockchain min-
ers or digital codes embedded in the smart contracts due to
its self-contained execution environment. Thus, we need a
third party to perform the highly important verification task
and confirm if the SLA is met.
� H. Otrok is with the Center for Cyber-Physical Systems (C2PS), Department
of EECS, Khalifa University, Abu Dhabi, UAE, and also with the Concordia
Institute for Information System Engineering, Concordia University,
Montreal, QCH3G 1M8, Canada. E-mail: Hadi.Otrok@kustar.ac.ae.
� M. Taghavi and J. Bentahar are with the Concordia Institute for Information
System Engineering, Concordia University, Montreal, QC H3G 1M8,
Canada. E-mail: mona.taghavi@gmail.com, bentahar@ciise.concordia.ca.
� K. Bakhtiyari is with the Interactive Systems, University of Duisburg-Essen,
Duisburg 47057, Germany, and also with the Department of Electrical &
Electronic Engineering, Universiti Kebangsaan Malaysia, Bangi, Selangor
43600,Malaysia. E-mail: academic@bakhtiyari.com.
Manuscript received 31 Mar. 2019; revised 3 Sept. 2019; accepted 10 Oct.
2019. Date of publication 17 Oct. 2019; date of current version 15 Apr. 2020.
(Corresponding author: Mona Taghavi.)
Digital Object Identifier no. 10.1109/TSC.2019.2948010
276 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
1939-1374� 2019 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See ht _tps://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0001-6204-4744
https://orcid.org/0000-0001-6204-4744
https://orcid.org/0000-0001-6204-4744
https://orcid.org/0000-0001-6204-4744
https://orcid.org/0000-0001-6204-4744
https://orcid.org/0000-0002-3136-4849
https://orcid.org/0000-0002-3136-4849
https://orcid.org/0000-0002-3136-4849
https://orcid.org/0000-0002-3136-4849
https://orcid.org/0000-0002-3136-4849
https://orcid.org/0000-0002-9574-5384
https://orcid.org/0000-0002-9574-5384
https://orcid.org/0000-0002-9574-5384
https://orcid.org/0000-0002-9574-5384
https://orcid.org/0000-0002-9574-5384
https://orcid.org/0000-0001-9357-9063
https://orcid.org/0000-0001-9357-9063
https://orcid.org/0000-0001-9357-9063
https://orcid.org/0000-0001-9357-9063
https://orcid.org/0000-0001-9357-9063
To address the quality monitoring issue, we propose to
employ oracles tailed to smart contracts within an innova-
tive multiagent decentralized model. A smart contract is a
piece of code deployed and executed on blockchain. Oracle
in the blockchain context is a fully-trusted third-party agent
that has access to the outside world, and feeds the data into
the blockchain to be accessible by the applications. Oracles
usually provide proofs to show that the retrieved data is
tamper-proof. A number of oracles have been deployed
using cryptographic evidence (e.g., hash code) such as
Oraclize, or the Intel SGX feature, such as Town Crier, to
make sure the data is tamper-proof. Our proposed multi-
agent model includes five different agents, namely the
cloud service requester (requester agent (RA)), cloud service
provider (provider agent (PA)), oracle (verifier agent (VA)),
and two smart contract agents called registry-profile and
contract agents. These contracts that were developed in [5],
are registered in the blockchain and are triggered by
new transactions (i.e., initiating new requests or registering
inputs from VA), which will make each blockchain node
update its state based on the results obtained after running
the smart contract. The smart contract is considered as an
agent that has state variables and enforces the associated
rules. In our scenario, RA makes a contract with PA and
might initiate a quality monitoring request anytime from
VA. VA can check the quality of the service with respect to
different attributes (e.g., availability, bandwidth, response
time, etc.) and detects any misbehavior of RA or PA, then
returns the result to the contract agent to manage the pay-
ments and apply potential punishments. Accordingly, the
contract agent decides who should pay the monitoring cost
to VA.
Having cloud requesters, providers, and the oracle inter-
acting with each other through smart contracts composes a
system of autonomous and utility maximizer agents. Cloud
requesters seek to receive high quality services with con-
stant monitoring which could be very costly. On the other
hand, providers aim to have a balanced work-load with
less preserved capacity, yet avoid any monitoring cost or
possible punishments. If they do not manage the gap
between the actual and ideal resource provisioning, it can
negatively affect their reputation and aggregated utility.
Meanwhile, the oracle tends to charge higher for the moni-
toring services without risking a decline in the number of
the requests for monitoring that it receives. Yet some
important questions remain: how many times and when to
ask for quality monitoring, who has to pay for such a ser-
vice, how much should be paid and how to avoid SLA vio-
lations and its possible consequences. To answer the above
questions and to optimize the providers’ computational
resource capacity, quality verification requests and cost of
the monitoring, we formulate a dynamic Stackelberg differ-
ential game among three agents seeking to maximize their
revenue. The Stackelberg differential game is used to study
the sequential decision making of cloud provider (leader)
for the optimal resource provisioning, cloud requester (fol-
lower) for the quality monitoring requests, and oracle (fol-
lower) for the monitoring cost. In the designed game, the
differential equations capture the dynamic competition and
resource provisioning, quality monitoring requests and
costs in continues time.
This paper contributes as follows:
1) Developing a novel blockchain-based decentralized
model for cloud providers that outsource some parts
of their demand which they cannot fulfill on their
own. Our proposed model enjoys a multiagent struc-
ture, which allows us to introduce a quality verifier
agent to ensure the cloud provider’s compliance with
the SLA. The interaction of an oracle within block-
chain for monitoring purposes is innovative.
2) Formulating a three-player dynamic Stackelberg dif-
ferential game in which players have to make choices
about their control variables at various points in time,
where PA acts as the leader and RA and VA are the
followers. Differential equations are introduced into
the game model to characterize the dynamic varia-
tions of the end-users’ demand. Finally, the optimal
solutions are obtained based on the open-loop equi-
libria of the proposed game.
3) Implementing and evaluating our proposed model
using the Solidity language on Ethereum andWeb3.js
by simulating three real-world cloud providers using
our system for 100 days. To the best of our knowl-
edge, there is no research that implements oracles
and their practical integrationwith smart contracts.
Due to the very recently emerging research topic and
nonexistence of any similar model, we are not able to com-
pare our model with any other model. In addition to the
optimal profit of agents, we also evaluated estimated trans-
actions and costs.
2 MOTIVATIONAL SCENARIO
For a blockchain-based federation, it is vital to monitor the
QoS and ensure that SLA conditions are met, since cloud pro-
viders may have an incentive to deviate. This verification is
highly desirable considering the multi-tenancy characteristic
of cloud services. In this context, to scale the economic benefits
and optimize resource utilization, multiple Virtual Machines
(VMs) are initiated on the same physical server simulta-
neously. The performance variation depends on the network
load and usage peak from other tenants. Cloud providers try
to balance the workloads and achieve the required perfor-
mance with less preserved capacity, yet they might not be
able to supply a consistent performance.
Fig. 1 illustrates a scenario when cooperation among two
cloud providers could be problematic. Let us imagine cloud
provider A and cloud provider B are using Cloudchain
through the following steps:
1) Cloud providers have to supply scalable cloud serv-
ices with consistent performance for their users with
guaranteed SLA. To ensure such scalability and on-
promise performance, cloud providers A and B can
register themselves in Cloudchain to enjoy the feder-
ated services from the available resources.
2) When cloud provider B faces a computing resources
deficiency to meet its end users’ demand, it can cre-
ate a request through Cloudchain.
3) Provider A, who has idle servers, accepts the request
and leases its computing resources to provider B
TAGHAVI ET AL.: A BLOCKCHAIN-BASED MODEL FOR CLOUD SERVICE QUALITY MONITORING 277
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
within the smart contract deployed over Cloudchain
with a specified SLA, price, terms, and conditions.
4) Two issues might happen that Cloudchain cannot
resolve on its own. First, provider A has actually
complied with SLA stated in the Cloudchain con-
tract, but provider B claims falsely that provider A
violated the SLA conditions and has to be fined.
5) Cloudchain is impotent to oversight and to confirm
who is telling the truth due to its inability to communi-
cate with the outside world of the blockchain network.
Blockchain can only access information present in a
transaction or in the transaction history of the block-
chain. Thus, we introduce oracle as a third party to
perform the verification and confirm if the SLA ismet.
6) The oracle can check the QoS at some cost and report
the SLA compliance to Cloudchain.
7) Second issue can arise when provider A has actually
compromised the quality but denies the accusation
and requests to receive the full deposit from pro-
vider B.
8) Cloudchain calls the oracle and initiates a verifica-
tion request.
9) The oracle confirms that a violation has happened.
10) At the end, considering the terms and conditions of
the contract, as well as the verification reports from
the oracle, Cloudchain distributes the money and
charges the verification cost.
Utilizing the oracle through the steps 4 to 9 is part of our
contribution in this paper. In order to fully materialize the
oracle as a verifier agent, we first develop a new multi-agent
structure and then optimize the cost of using the oracle and
trading within Cloudchain.
3 RELATED WORK
This work extends our previous work on Cloudchain [5], a
novel model that exploits blockchain to prompt and support
interoperability and coopetition among cloud providers
over the public Ethereum network. Blockchain is employed
to ensure transparency and decentralize the agreements in
Cloudchain, but the provided cloud services are supplied out
of the blockchain network. So, the blockchain dynamics can
neither guarantee nor validate the quality of the supplied ser-
vice. Therefore, to ensure that the providers comply with the
agreements, we need to validate the QoS, even though the
agreement is deployed over blockchain. Similar to any other
blockchain-based platform, Cloudchain suffers from the
most challenging issue, yet to be solved, which is its inability
to interact with the outside world. Thus, in this work, we
introduce a verifier agent as an autonomous oracle tomonitor
the quality upon the request of the service requester (RA).We
further investigate the revenue maximization strategies
among the cloud providers and verifier agent whichwere not
discussed in our previous contribution.
Summaries of the related literature are drawn from three
different areas elaborated as follows.
3.1 Game Theory in Cloud Computing
Game theory has been successfully applied in the cloud
computing area, for instance for resource allocation and
pricing mechanisms, where the interactions of players have
to be taken into account [6]. A user-provider interactive
approach is taken by Hadji et al. [7], where a Stackelberg
game is designed to consider constrained pricing with lim-
ited resources offered by a cloud service provider and the
optimal user demands. Xu et al. [8] optimized a pricing pol-
icy for cloud service providers to better compete with each
other under the evolution of the cloud market. Forming a
Stackelberg game, the authors applied Q-learning to find
out an optimal policy for the leader. Following the leader,
the optimal policy for followers will be uncovered. How-
ever, the price is the only utility factor considered in these
studies and the importance of QoS is somehow neglected.
The study by Fan et al. [9] could address the QoS competi-
tion issue by considering the market competition among a
SaaS (software-as-a-service) provider and a traditional soft-
ware provider as a differential game. This research analyzes
short and long-term competitions for price and dynamic
Fig. 1. Cloud providers misbehavior through the federation.
278 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
quality between the two firms. The authors found that the
cost of software implementation can significantly affect the
equilibrium price while quality improvement has a more
robust effect.
3.2 Cloud Federation
The literature about cloud providers cooperation focuses on
federation formation as coalitional games where capacity
and revenue are shared [10]. Coronado et al. had an inten-
sive investigation on federation formation variables among
providers, including revenue sharing mechanisms, capacity
and cost disparity, and the presence of a big competitor
[11]. They defined revenue sharing mechanisms as the most
important factor. Among these mechanisms, shapely value
and outsourcing models had the least and best performance,
respectively. They indicated that collaborating providers
can implement a mechanism in which a provider outsources
some of its business and gets a percentage of the revenue.
The outsourcing model allows the provider to keep some of
the revenue of its secured business, even though it is not
able to fulfill that business alone. The authors had an insight
through the demand peaks and concluded that cloud pro-
viders tend to stay in outsourcing collaboration when the
demand is high. However, interoperability, trust among
providers, and service quality or SLA are not considered in
their study. The findings from this work confirm the superi-
ority of outsourcing in terms of maximizing the profit of
providers, which is what we are proposing in this paper in
addition of having the advantage of coopetition among
these providers. The fact that providers tend to collaborate
when they face a hike in their demand, reinforces the con-
sideration of a dynamic and long/short-term federation-
like blockchain. The challenges of interoperability and trust
issues among cloud providers are also addressed by the
blockchain platform we propose in this paper.
Wahab et al. [12] focused on the business potential ofWeb
services and addressed the problem of community-based
cooperation as a virtual trading market using a Stackelberg
game model. Khosrowshahi [13] considered stability and
fairness for all web services within a community and off-
ered an applicable mechanism for membership requests and
selection of web services. The proposed mechanism used
cooperative game-theoretic techniques, particularly Shapley
value, core, �-core and convex games. Nonetheless, none of
these studies utilized blockchain to form a federation and
neither proposed a solution for service quality monitoring
for federated services.
Zhao et al. [14] investigated the impact of two factors:
energy consumption and SLA violations on degrading the
cost-efficiency of data centers and the cloud providers’ reve-
nue. The authors developed online VMs placement algo-
rithms as an optimization problem of maximizing revenue
from VMs migration and achieved promising results. How-
ever, no initiatives are proposed to monitor the SLA
violations, specifically when it comes to cooperation and
competition among providers. The dynamic and timed deci-
sionmaking strategies are also not considered.
3.3 Blockchain and its Applications
Blockchain has emerged as a distributed database technol-
ogy building upon a secured list of timestamped transaction
records. Its main innovation stems from enabling parties to
transact with untrusted parties over a computer network
[15]. The blockchain data structure is an ordered list of blocks
containing aggregated transactions. Every block is identifi-
able and linked to the previous block in the chain where the
integrity is ensured by cryptographic techniques. Recently,
blockchain had a revolutionary impact in corporate gover-
nance by offering greater transparency among stakeholders,
easier administration, and the creation of an infrastructure
for innovative applications where business transactions
could be shared in real-time [16]. By leveraging blockchain-
enabled smart contracts, we eliminate the need for trust in
the federation and reduce barriers of entry, lock-in, and
transaction costs, by removing obsolete trust-establishing
mechanisms [17]. A smart contract is a piece of code residing
on a blockchain and is identifiable by a unique address.
Moreover, smart contracts permit creating decentralized
applications (DApp) that operate autonomously without
any intervention by a system entity.
A few efforts have been made to study the potential of
blockchain in real-world applications despite its great poten-
tial for businesses to share data and collaborate in a secure
and customizedmanner [15]. According to Tractica, amarket
research firm, the annual revenue for enterprise applications
of blockchain is estimated to reach $19.9 billion by 2025 [18].
The majority of studies about blockchain’s application have
focused on finance [19], energy [20] and IoT applications [21].
In cloud computing and service industry, to the best of our
knowledge, there have been very few related academic initia-
tives in addition to Cloudchain. Among which, one paid
major attention in the energy-aware resource management
problem in cloud data centers and developed a robust block-
chain-based decentralized resource management framework
in order to save the energy consumed by the request sched-
uler [22]. Moreover, this research further utilizes a reinforce-
ment learning embedded in a smart contract to minimize
energy cost. Their simulations based on Google cluster traces
and electricity prices showed their methodwas able to reduce
the data centers’ cost significantly. Desmaa [17] is a cloud
marketplace framework based on blockchain technology.
This conceptual frameworkmodeled the interactions between
a service provider and a service consumer and tried to over-
come problems of conventional marketplace systems, such as
barriers of entry and transaction costs. Yet, the outsourcing
model with collaboration and competition among cloud pro-
viders themselves are not considered in this initiative. More-
over, the providers’ profit and the best strategies for utilizing
this marketplace are not elaborated nor modeled. Even
though the authors developed a prototype, no evaluation and
validation against real-world’s scenarioswere provided.
4 QUALITY VERIFICATION MODEL
WITHIN CLOUDCHAIN
4.1 Background: Cloudchain’s Smart Contracts
Cloudchain incorporates three types of smart contracts
including a set of executable functions and state variables [5].
Similar contracts are proposed in [23] in the context of medi-
cal data management. Contract 1 (C1) or Cloudchain Registry
(CCR) is a global contract that maps cloud providers identifi-
cation values (including Name, Reputation Value, Computing
TAGHAVI ET AL.: A BLOCKCHAIN-BASED MODEL FOR CLOUD SERVICE QUALITY MONITORING 279
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
Capacity and Storage Capacity) to their Ethereumaddress iden-
tities (equivalent to public keys). Policies coded into the con-
tract can regulate registering new providers or changing the
mapping of the existing ones. The cloud provider registration
can be restricted only to certified providers. CCR also maps
identities to the Cloudchain Contract (CCC) address on the
blockchain, where a special contract regarding each provider
profile and list of services is recorded.
Contract 2 (C2) denotes Cloudchain Profile (CCP). It holds
a list of references to CCC, representing all the participants’
previous and current engagements with other nodes in the
system. CCP also implements a functionality to enable
provider notifications. Ethereum supports an event-based
mechanismwhich permits smart contracts to create an event
and signals that a certain action (e.g., an update to profile’s
data) has been performed. Providers should register their
requests in the CCP contract to be propagated and raised to
other nodes of providers. Each transaction list stores a status
variable. This indicates whether the transaction is newly
established, awaiting pending updates and has or has not
been completed. This contract is important as it stores the
address of all newCCC contracts, withoutwhichCloudchain
can simply lose the track of all the contracts.
Contract 3 (C3) represents the Cloudchain Contract (CCC).
It is issued between two nodes in the system when one node
accepts and provides the requested service for the other. The
beneficiaries can also complete or cancel the contract. Once
the contract is completed or canceled, the contract balance
would be transferred to the supplier or requester address
respectively, and the contract status would also be updated.
There are two approaches to reduce the size of the data as
well as the cost of transactions over Cloudchain. The first
approach is a common practice for data storage in smart con-
tracts and consists of storing raw data off-chain, and meta-
data, small critical data, and hashes of the raw data on-chain
[24]. However, the selection of off-chain data storage has
some concerns regarding the interaction between the block-
chain and the off-chain data storage. The other approach is
to provide a common glossary among cloud providers to
define the generic terms and policies to be referred to in the
contract. The members of Cloudchain can join and leave the
system anytime by executing specific functions in the smart
contracts. Such a flexible membership allows them to supply
or demand a service once or multiple times as required.
Notwithstanding the fact that the developed smart con-
tracts can operate as a reliable distributed technology among
the cloud providers, its execution environment is self-
contained which makes it unable to communicate with the
outside world and check if any SLA violation has happened.
So, an oracle is required to verify the service quality which is
supplied out of the blockchain network. For this purpose, we
develop a new multiagent model for cloud service quality
monitoring in the following section.
4.2 Multiagent Architecture of the Cloud Service
Distributed Model
The proposed model incorporates five agents as follows:
� The Requester Agent (RA) and Provider Agent (PA) are
both cloud providers willing to trade their comput-
ing resources;
� The Registry-Profile Agent (RPA) and Contract Agent
(CA) represent CCR-CCP and CCC smart contracts,
respectively, with a set of executable functions and
state variables; and
� The Verifier Agent (VA), known as oracle, is an agent
that verifies real-world occurrences and submits this
information to a blockchain to be used by smart
contracts.
Fig. 2 provides the interactions among these agents. In
step 1, RA and PA should register themselves in RPA where
each registered user is assigned with a public key pair. RPA
maps identities of RA and PA to the contract agent’s (CA)
address on the blockchain. It holds a list of references to CA
to provide all the participants’ previous and current engage-
ments with other nodes in the system with a record of any
SLA violation or compliance.
When RA faces a computing resources deficiency, it can
submit a request for a service using RPA to create and deploy
a CA in the blockchain in step 2. Meanwhile, a rule for pro-
viders is set by the requesters to ensure that qualified pro-
viders could ultimately receive the task, e.g., reputation
value threshold. The first time reputation values can be com-
puted from the customers’ ratings given to each provider
through online rating platforms (known in recommender
systems [25]) andwill be updated based on the future ratings
given by RA.
CA regulates the interactions between two nodes in the
system where one node accepts and provides the requested
service to the other in step 3. RA is required to pay a deposit
in advance and it is stored in the contract using CA. The bene-
ficiaries can complete or cancel the contract, however, the con-
tract termination and delivery of the requested service have to
be confirmed by RA. Once completed or canceled, CA calcu-
lates fines to be charged if any exist and the remained contrac-
t’s balance would be transferred to the RA or PA address
respectively, and the contract statuswould be updated.
Fig. 2. Multiagent cloud service quality monitoring model.
280 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
Function calls on contracts are transactions, and those
which update the contract storage need to be validated by
blockchain miners. Once a new block is mined with the
newly linked CA, it would be broadcasted to other nodes
and the first node that accepts the request should update
the respective CA contract.
RA can initiate a quality monitoring request anytime to
check if the provider is complying with the SLA conditions
during the runtime. The request should be submitted to CA
and CA calls VA to perform the verification through step 4.
VA checks the prioritized quality attributes of the service
using RA credentials and extracts the runtime needed infor-
mation and pushes it into CA. PA would be penalized if
there is any violation of the SLA. A record of the SLA moni-
toring and penalties will be kept by RPA for future referen-
ces. RA is required to rate the supplier based on the
perceived performance. The process of requesting a service
and monitoring its quality among the five agents are elabo-
rated in Algorithms 1 and 2. The agents’ decision variables
and the details of their trading policies provided in these
algorithmswill be discussed in the following section.
Time and Space Complexity. The time complexity of Algo-
rithm 1 grows linearly with the number of verification
requests (n), therefore it has the time complexity of OðnÞ.
Algorithm 2 is independent of the number of requests, and it
has the time complexity ofOð1Þ. However, running the algo-
rithms over the blockchain affects the complexity. When
cloud providers are interacting with Cloudchain, they call
various functions. Some of these functions are only reading
the states of variables (View functions), and some are chang-
ing the states (Transactional functions). View functions,
which only read the states and are not called within a trans-
actional function, do not consume gas, and they can only be
executed on a local node to get the results. However, in
Transactional functions, some states would be changed on
Blockchain, therefore new blocks are expected to be created.
In this case, all active nodes (m) over Blockchain should run
the same code to verify the results of the new block, thus the
time complexity would increase to Oðm� nÞ for Transac-
tional functions in Algorithm 1 andOðmÞ for Algorithm 2, as
the number of nodes increases. The space complexity of
Algorithm 1 is OðnÞ by growing the number of inputs, the
required space grows linearly to store the stack of data in a
mapping structure. However, when it stores the data on
blockchain, there is a triangular pattern (nðnþ 1Þ=2) stack of
the previous versions of the data by every update. In addi-
tion, this is also happening on every active node over block-
chain (m� ðnðnþ 1Þ=2Þ). Thus, the space complexity of
Algorithm 1 isOðm� n2Þ, and for Algorithm 2 isOðmÞ.
5 REQUESTER, PROVIDER AND VERIFIER AGENTS
DECISION MAKING
Unlike conventional (static) game theoretic models, dynamic
models we use in this paper consider the important dimen-
sion of time and recognize the competitive decisions that do
not necessarily remain fixed. Models involving competition
in continuous time are typically treated as differential games,
in which critical state variables, e.g., demand, are assumed
to change over time according to specified differential
equations.
Algorithm 1.Cloud Providers Service Agreements within
the Multiagent Model
Input: Ether Deposit; Reputation threshold; PA reputation;
Cloud requester’s Etheruem address (RA); Cloud supplier’s
Etheruem address (PA).
1: procedure SERVICEAGREEMENT
2: RA makes a service request in RPA
3: RPA creates a CA
4: RA.SendTo(CA, Ether Deposit)
5: CA.Availability = True
6: EventLog.Create(“New request is available”)
7: if RA.Reputation � Reputation threshold AND
RA.Accept(CA) then
8: CA.Availability = False
9: while RA requests a quality verification do " refer
to Eq. (8)
10: CA calls Algorithm 2
11: NðtÞ += 1
12: if Verification.Result = True then
13: RA.SendTo(Verifier,MðtÞ)
14: PA.PositiveVerification += 1
15: else if Verification.Result = False then
16: PA.SendTo(Verifier,MðtÞ)
17: PA.NegativeVerification += 1
18: Assign F to charge PA
19: CA.SendTo(RA, F )
20: end if
21: end while
22: if CA.Completed then
23: EventLog.Create(“CA is completed”)
24: ContractDeposit = CA.TotalAmount
25: CA.SendTo(PA, ContractDeposit)
26: EventLog.Create(“Fund is transferred to the Cloud
supplier”)
27: RA.UpdateReputation(PA)
28: end if
29: end if
30: end procedure
Algorithm 2. Verification Process
Input: CA Ethereum address; MðtÞ; �; VA Etheruem address
(oracle).
Output: Verification.Result " Boolean
1: procedure VERIFICATIONPROCESS
2: VA retrieves CA terms and monitor the cloud service
3: VA verifies the quality of the provided service based on
CA.SLA
4: if ð�f� fðtÞÞ <¼ � then
5: Verification.Result = True
6: else
7: Verification.Result = False
8: end if
9: CalculateMðtÞ to charge CA " refer to Eq. (15)
10: end procedure
Our RA, PA, and VA agents aim to maximize their profit
within our proposed multiagent and blockchain-based federa-
tion. RA is facing a peak time and is going to request some
VMs from other federation’s members, and PA has some idle
servers and is willing to rent them outwith the price offered by
RA. For simplicity andwithout losing generality, we will focus
TAGHAVI ET AL.: A BLOCKCHAIN-BASED MODEL FOR CLOUD SERVICE QUALITY MONITORING 281
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
on a single VM type, with �f denoting the desired capacity and
the process rate of VM instances that can be hosted by PA
which guarantees to meet the SLA even during the peak time.
In fact �f is what RA is paying for, while f is the actual pre-
served capacity that PA assigns for RA considering the fact that
its other customers might use less and it can assign the extra
capacity toRAwhenneeded. Therefore, PAcontrols its optimal
capacity assignment f. Since RA might experience a QoS deg-
radation or sense a violation of SLA, it has the right to initiate a
monitoring verification request. However, this request can be
costly as it has to pay if there is no SLA violation. Thus, RA is
required to decide on the number of verification requests to
make, denoted by the control pathNðtÞ (a control path is a vec-
tor of control or decision variables). On the other hand, VA has
to decide on its control path representing the optimal pricing
MðtÞwhich alters its verification demands andfinal revenue.
We formulate the profit maximization, service trading,
and quality assurance problems as a Stackelberg differential
game as follows.
� Players: There are three players: PA acts as leader;
and VA and RA act as followers. We assume that the
decision making of the followers are simultaneous
and they use each others’ control variable as input of
their models.
� Strategy space: PA can choose the optimal capacity
control path fðtÞ to maximize its payoff by observing
the cost and numbers of the requests for monitoring
in response to the capacity. VA sets an optimal price
control pathMðtÞ to charge for the quality verification
by considering the given capacity which also affects
the number of the requests from RA. RA controls its
verification requests NðtÞ to ensure the service qual-
ity by considering the given fðtÞ.
� State: The end users’ demands and the quality moni-
toring demands are the system states of PA, RA, and
VA, respectively.
In the Stackelberg differential game, both the leader and fol-
lowers try to maximize their own payoffs, which are the inte-
gration of instantaneous payoffs over the time horizon ½0; T �,
by controlling their control paths which are their decision vari-
ables to be committed to for the whole time horizon. Similar to
a statistic Stackelberg, to obtain the equilibrium of a Stackel-
berg differential game, we use backward induction and solve
the problem for the follower first. A list of the notations is pro-
vided in Table 1.
5.1 Preliminaries
This section explains some of the required elements to for-
mulate our game. We first make an assumption that is a rule
for differential games.
Assumption. Each player has perfect knowledge of:
� The dynamic state function determining the evolution
of the demand, and the control paths of the three players.
� The payoff functions.
� The initial demand states at time zero.
The analysis of differential games relies profoundly on
the concepts and techniques of optimal control theory [26].
Definition 4.1 provides some relevant points on this regards.
Definition 1. The open-loop strategy spaces of RA, VA and PA
are respectively defined as:
~N ¼ fNðtÞjNðtÞ measurable on ½0; T �; NðtÞ � 0 for all t 2
½0; T �g
~M ¼ fMðtÞjMðtÞ measurable on ½0; T �;MðtÞ > 0 for all t 2
½0; T �g
~f ¼ ffðtÞjfðtÞ measurable on ½0; T �; 0 > fðtÞ � �f for all t
2 ½0; T �g. The strategy profile ðN�ðtÞ;M�ðtÞ;f�ðtÞÞ is an
open-loop Stackelberg equilibrium if, for RA, VA and PA, each
of them is optimal control strategies given others’ strategies.
It is assumed that cloud providers can participate in the
mining to earn some rewards if they have spare computing
resources. In the mining race, miners have to compete to
solve proof of work and propagate the block to reach con-
sensus. The new blocks’ generation follows a Poisson pro-
cess with a constant rate 1
G throughout the whole blockchain
network [27]. Before the race, miners collect their selected
pending transactions into their blocks with a total gas
amount of
Pk
j¼1 Wj. Gas is a proportional amount that
Ethereum pays to motivate the miners to participate in the
mining process. When miner j propagates its block to the
blockchain for consensus, the time for verifying each trans-
action is affected by the total size of the transactionsWj. The
first miner j who successfully has its block achieves consen-
sus will be rewarded based on the amount of the assigned
capacity f
0
j. The amount of the reward can be computed by
the following proposition.
Theorem 1. The miner j’s expected reward Rwjðf0
jÞ is:
Rwjðf0
jÞ ¼ Rwjf
0
je
�1
G
Wjhj : (1)
TABLE 1
Notations Used in Stackelberg Differential Game
j=i Index of a provider/quality attribute from the set k/I
M Quality monitoring cost
N Number of monitoring verification requests
r=p=v Requester/provider/verifier agents
G=C Cost of gas/capacity
F Fine payment of PA to RA due to SLA violation
W The amount of the cumulated gas for each block
W
0
The amount of required gas for each transaction
X Number of the transactions over the blockchain
Y Maximum number of the initiated verification requests
v Rate of transactions arrival for an agent in ½0� T �
v
0
Weight of the monitoring request arrival from RA
G Rate of the block generation for miners
f=f
0
=�f Provider’s active/mining/maximum capacity
P Price per VM
R Reputation value of RA and PA in the range of ½0� 1�
Rw Reward value of mining
t Block propagation time
h Rate of the impact ofW over t
c Rate of end users’ demands increase due to higher
quality for RA
u Rate of end users’ demands increase due to higher Rp
b Quality sensitivity of the end users
g Price sensitivity of RA and PA for monitoring service
d Demand decay rate
m The amount of VMs
Q Quality attributes of a cloud service in the set I
�=L=Q Adjoint variables
282 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
Proof. The expected reward of mining is: RwjPjðf0
j;WjÞ
where Pjðf0
j;WjÞ is the probability that miner j receives the
reward by contributing a block. To win the reward, the
miner must perform a successful mining and instant prop-
agation. However, the miner may fail to obtain the reward
if its new block does not achieve consensus as the first. This
kind ofmined block that cannot be added to the blockchain
is called orphaned block. The block containing a larger size
of transactions has a higher chance of becoming orphaned
since a larger block requires more propagation time, thus,
causing a higher delay for consensus. As the arrival of new
blocks follows a Poisson distribution, miner j’s orphaning
probability, P0
j , can be approximated as:
P0
j ¼ 1� exp � 1
G
� �
tj: (2)
It is safe to assume that miner j’s block propagation time
tj is linear with the size of transactions in its block,
tj ¼ Wjhj, where hj is a constant that reflects the impact
of Wj over tj. Therefore, we obtain the reward probabil-
ity from Eq. (2) as follows:
Pjðf0
j;WjÞ ¼ 1� P0
j ¼ f
0
je
�1
G
Wjhj : (3)
By multiplying Eq. (3) by the reward value, we obtain
Eq. (1). tu
Definition 2. To model the transactions’ distribution, we use the
compound Poisson process, which is a generalization of the
Poisson process where each arrival is weighted according to a
distribution. The compound Poisson process represents better
the transactions dynamics. The assumption is that transactions
sent to the blockchain follow a Poisson process, but the amount
of gas they require follows a compound Poisson process. The
reason is that the difference between the amount of gas is based
on the complexity of the transaction, for example, the creation
of a contract requires a much higher amount of gas than updat-
ing the contract. Therefore, the probability of the required gas
by Xj transactions occurring in ½0� T � follows an exponential
distribution as follows:
PjðXÞ ¼ e�vT ðvT ÞXj
Xj!
: (4)
We further require another distribution function to for-
mulate the cost and penalty/reward of the quality monitor-
ing services provided by VA. To do so, we require to
consider how the history records of transactions and the rep-
utation values of the providers can influence the number of
the requests for quality verification. This formulation is pro-
vided in the below definition.
Definition 3. Let us define Y as the maximum number of the ver-
ification requests that an agent j can initiate. If the reputation
value of an agent who is providing a service is high, it is likely
that there will be less number of the verification requests. How-
ever, if the reputation value of RA is high it is more likey to have
more numbers of verifications to ensure that quality will remain
reliable and the reputation stays untouched. Thus, the most
requests will be initiated if the reputation value of RA is high
and PA is low. We propose a similar distribution function given
by Eq. (4), since the initiation of monitoring requests and the
amount of cost MðtÞ or the received reward (penalty F paid by
PA) follows the same compound Poisson process which is tight
with the agents’ reputation values:
PjðY Þ ¼ e�v
0
T ðv0
T ÞYjð1�RpÞRr
ðYjð1�RpÞRrÞ! : (5)
5.2 Problem Formulation and Open-Loop
Equilibrium of RA (Follower)
We first discuss the problem of the optimal number of verifi-
cation requestsNðtÞ for RA, to get the open loop equilibrium
solution. Adopted from [28] and [29], we define the end
users’ demand using the Cobb-Douglas function that cap-
tures the demand elasticities and variations specific for each
user of a cloud service, D ¼ m P�a Qb. The two variables a
and b are the users’ sensitivities towards the price and qual-
ity, respectively.
As presented in Algorithms 1 and 2, we assume that if
ð�f� fðtÞÞ <¼ �, then PA is complying with the SLA and
there will be no penalty of F and no verification costMðtÞ for
PA. Here, � is a very small number that PA is allowed to dis-
obey due to the very dynamic context of cloud service attrib-
utes. But, if ð�f� fðtÞÞ > �, then RA will not pay for MðtÞ
and will be rewarded the penalty value of F . The provider’s
cost is usually considered to be quadratic in the literature
[30], a convex cost term can prevent aggressive behavior of a
certain provider which can result in amonopolymarket.
The requester agent acts as a follower of PA by relying on
the provided capacity and simultaneously receiving the
monitoring cost from VA to adjust its optimal number of
the verification monitoring requests NðtÞ, while considering
the evolve of its end users’ demand state. Thus, it tries to
maximize its profit according to the following function:
Maximize RAðNðtÞ; DrðtÞ;MðtÞ;fðtÞ; tÞ
¼
Z T
0
ertfPrDrðtÞ � �fP 2
p þRwrðf0
rÞ � PrðXÞW 0
rGr
� PrðY ÞðMðtÞ � F Þð�f� fðtÞÞNðtÞgdt
subject to _DrðtÞ ¼ ðNðtÞfðtÞÞbc� drDrðtÞ;
(6)
Rwrðf0
rÞ, PrðXÞ and PrðY Þ are borrowed from Proposition 4,
Definition 4.2 and Definition 4.3. r denotes discounted fac-
tor in our discounted-utility model, in which it is assumed
that the instantaneous utility each period depends solely on
profit in that period, and that the utilities from streams of
profit are discounted exponentially.
The demand state dynamics is defined with _DrðtÞ which
increaseswith the number of capacitymonitoring and ensur-
ing the service quality with the power of b as the end user
sensitivities towards the quality at the rate c. It also decays
at the rate dr in which users switch to another provider.
Definition 4. For RA, the number of monitoring requests’ strat-
egy NðtÞ� is optimal if the following inequality holds for all
feasible control N�ðtÞ 6¼ NðtÞ, RAðNðtÞ�; DrðtÞÞ � RAðNðtÞ;
DrðtÞÞ.
In order to get the equilibrium solution of the optimiza-
tion problem in Eq. (6), we need to construct theHamiltonian
TAGHAVI ET AL.: A BLOCKCHAIN-BASED MODEL FOR CLOUD SERVICE QUALITY MONITORING 283
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
system of the RA’s problem. Equilibrium strategies in the
open-loop structures can be found by solving a two-point
boundary value problem for ordinary differential equations
derived from the Pontryagin maximum principle in Hamil-
tonian functions. Here, the equilibrium solution for RA is the
solution of the differential game, and also is the Stackelberg
equilibrium solution for RA as a follower. The Hamiltonian
system of RA is as follows:
HrðtÞ ¼PrDrðtÞ � �fP 2
p þRwrðf0
rÞ � PrðXÞW 0
rGr
� PrðY ÞðMðtÞr� F Þð�f� fðtÞÞNðtÞ
þ �ðtÞððNðtÞfðtÞÞbc� drDrðtÞÞ:
(7)
The adjoint variable or shadow price ð�Þ associated with a
particular constraint is the change in the optimal value of the
objective function per unit increase in the right-hand-side
value of that constraint, all other problem data remaining
unchanged. The economic interpretation of �ðtÞ is the value
of an additional unit of the end users’ demand for RA. For a
given NðtÞ, �ðtÞ > 0 implies that RA benefits from the cur-
rent demands. With a zero shadow price �ðtÞ ¼ 0, RA does
not take into account the impact of the price on future users’
demands. On the other hand, when �ðtÞ < 0, RA has no
motive to sacrifice current profits for future profits by paying
the cost of quality monitoring, so that it will no longer
increase NðtÞ. The final solution is obtained in the following
Theorem.
Theorem 2. Knowing the fact that verification cost is paid by RA
unless there is a violation of the SLA by PA, in which PA
incurs MðtÞ and F , the optimal number of monitoring requests
is given by:
NðtÞ� ¼
�PrðY ÞMðtÞð�f�fðtÞÞ
�ðtÞbcfðtÞb�1
� � 1
b�1
if ð�f� fðtÞÞ <¼ �
PrðY ÞF ð�f�fðtÞÞ
�ðtÞbcfðtÞb�1
� � 1
b�1
if ð�f� fðtÞÞ > �
8><
>: ;
(8)
and �ðtÞ is given by:
�ðtÞ ¼ Pr
r� dr
ð1� expððr� drÞðt� T ÞÞ: (9)
Proof. As proven in the optimal control theory, the optimal
control strategy of the original problem must also maxi-
mize the corresponding Hamiltonian function. According
to the Pontryagin’s Maximum Principle (PMP), a control
constitutes an open loop equilibrium to the problem in
Eq. (7), and DrðtÞ is the corresponding state trajectory, if
there exists a costate function �ðtÞ such that the following
relations are satisfied,
@HRAðtÞ
@NðtÞ ¼PrðY ÞðMðtÞr� F Þð�f� fðtÞÞ
þ �ðtÞbcðNðtÞfðtÞÞb�1 ¼ 0
(10)
_�ðtÞ ¼ r�ðtÞ � @H�
RAðtÞ
@DrðtÞ ¼ �ðtÞðr� drÞ � Pr; �ðT Þ ¼ 0;
(11)
where Eq. (11) is the adjoint equation to describe the
dynamics of a costate variable. In the case that the strategy
space ~N does not depend on the system stateDr, themaxi-
mizedHamiltonian functionH�
RA on the right hand side of
Eq. (11) can be replaced by the original HRA. When only
one boundary condition is specified asDr0ðtÞ ¼ Drð0Þ, the
free-end condition is used as � ¼ 0 at t ¼ T . Solving the
differential equation of Eq. (11) can lead us to the corre-
sponding costate function. By solving Eq. (10), we can
obtain the optimalNðtÞ� given in Eq. (8). tu
5.3 Problem Formulation and Open-Loop
Equilibrium of VA (Follower)
To formulate the optimal pricing controlMðtÞ problem for VA
and to get the open loop equilibrium solution, we require
to define the dynamic variation of the state of verification
demand. A major part of dynamic pricing research originates
from the Bass new service diffusion model, which was later
enriched by incorporating price sensitivity to allow a dynamic
pricing examination [31], [32].Wemodify thismodel to elabo-
rate on the new concept of verification demand in our model
as described in the following definition.
Definition 5. Let V ðtÞ denotes the total number of the verifica-
tion requests initiated by RA at time t for each quality attribute,
given an I-tuple of QoS attributesQ1; Q2; . . . ; QI with an index
of i. The verification state evolves based on the external factor of
capacity discrepancy and the internal factor of price as follow:
_V ðtÞ ¼ dV ðtÞ=dt ¼ ðMðtÞV ðtÞ þ ð�f� fðtÞÞÞð1� gMðtÞÞ;
(12)
where the positive parameter g measures the providers’ sensi-
tivity to the verification price.
To obtain a suitable dynamic pricing strategy, VA observes
the number of the verification requests from RA and provides
a response to the announced capacity control of PA. There-
fore, VA tries to maximize its profit by the following Eq. (13)
which is subject to Eq. (12):
Maximize VAðMðtÞ;NðtÞ; V ðtÞ; tÞ
¼
Z T
0
ertfðMðtÞ � C2
vÞV ðtÞ � PvðXÞW 0
vGvgdt
subject to: _V ðtÞ ¼ ðMðtÞV ðtÞ þ ð�f� fðtÞÞÞð1� gMðtÞÞ:
(13)
The Hamiltonian system is given as below.
HVAðtÞ ¼ðMðtÞ � C2
v ÞV ðtÞ � PvðXÞW 0
vGvþ
LðtÞðMðtÞV ðtÞ þ ð�f� fðtÞÞÞð1� gMðtÞÞ:
(14)
Theorem 3. The optimal monitoring cost is given by,
MðtÞ� ¼ 1
g
� ð�f� fðtÞÞ
V ðtÞ þ LðtÞ þ 1
; (15)
where LðtÞ is given by:
LðtÞ ¼ gð�f� fðtÞÞ þ V ðtÞ � C2
vV ðtÞg
V ðtÞðrg þ 1Þ
� �
1� expðrþ 1
g
� �
ðt� T ÞÞ:
(16)
284 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
Proof. Similarly, the necessary optimality conditions for VA
can be derived according to PMP as follows:
@HVAðtÞ
@MðtÞ ¼ 0
V ðtÞ þ LðtÞðV ðtÞð1� gMðtÞÞ � gðMðtÞV ðtÞ þ ð�f� fðtÞÞÞÞ ¼ 0:
(17)
By solving Eq. (17), we can obtain the optimal price given
by Eq. (15). When the optimal control depends on the sys-
tem state, it has to be replaced in the original Hamiltonian
system in Eq. (14) to achieve H�
VAðtÞ and to be used for
calculation of the adjoint variableLðtÞ.
_LðtÞ ¼ rLðtÞ � @H�
VAðtÞ
@V ðtÞ ;LðT Þ ¼ 0
_LðtÞ ¼ LðtÞ rþ 1
g
� �
�
�f� fðtÞ
V ðtÞ � 1
g
þ C2
v :
(18)
tu
5.4 Problem Formulation and Open-Loop
Equilibrium of PA (Leader)
For each capacity path fðtÞ 2 ~f PA announces, there is a cor-
responding N�ðtÞ 2 ~N and a M�ðtÞ 2 ~M. PA takes the VA
and RA’s best responses into consideration when solving the
optimization problem. The PA’s optimization problem is
given by:
Maximize PAðfsðtÞ; RðtÞ; DsðtÞ; �ðtÞ;LðtÞ;GðtÞ;M�ðtÞ; N�ðtÞ; tÞ
¼
Z T
0
ertfPpDpðtÞ � fðtÞC2
p þRwjpðf0
pÞ
� PpðXÞW 0
pGp � PpðY ÞðMðtÞ� þ F Þð�f� fðtÞÞNðtÞ�gdt
(19)
subject to
_DpðtÞ ¼ ðRp � F ð�f� fðtÞÞÞbu � dpDpðtÞ
_�ðtÞ ¼ �ðtÞðr� drÞ � Pr
_LðtÞ ¼ LðtÞðrþ 1
g
Þ � �f�fðtÞ
V ðtÞ � 1
g
þ C2
v :
8><
>:
(20)
Compared to RA and VA, the Hamiltonian function of PA
in the Stackelberg differential game is more complex since
the maximization of the payoff of PA also needs to consider
the dynamics of costate variables of RA and VA as the addi-
tional state constraints besides the system state constraints.
In this case, similar to the introduction of a costate variable
for the system states in the follower’s Hamiltonian function,
the costate variables for both the system states and costates
of the followers are needed in the Hamiltonian function of
PA as leader.
HPAðtÞ ¼PpDpðtÞ � fðtÞC2
p þRwjpðf0
pÞ � PpðXÞW 0
pGp
� PpðY ÞðMðtÞ� þ F Þð�f� fðtÞÞNðtÞ�
þQ1ðtÞðuðRp � F ð�f� fðtÞÞÞbÞ � dpDpðtÞÞ
þQ2ðtÞð�ðtÞðr� drÞ � PrÞ
þQ3ðtÞðLðtÞ rþ 1
g
� �
�
�f� fðtÞ
V ðtÞ � 1
g
þ C2
v
!
:
(21)
Similarly, the necessary optimality conditions for PA can
be derived through the PMP. Due to the concavity of
Hamiltonian function with respect to fðtÞ, we can obtain
f�ðtÞ for the leader which could beQ obtained from
@HPAðtÞ
@fðtÞ ¼ 0, and denoted as f�ðtÞ ¼ gpðM�ðtÞ; N�ðtÞ; �ðtÞ;
LðtÞ;Q1ðtÞ;Q2ðtÞ;Q3ðtÞ; DpðtÞ; V ðtÞ; tÞ. We further have the
following conditions:
_Q1ðtÞ ¼ rQ1ðtÞ � @HPAðtÞ
@DpðtÞ ¼ Q1ðtÞðr� dpÞ � Pp
_Q2ðtÞ ¼ rQ2ðtÞ � @HPAðtÞ
@�ðtÞ ¼ �Q2ðtÞdr
� 1
1�b
� �
�
b
1�b
PjðY ÞF ð�f�f�ðtÞÞ
bcf�ðtÞb�1
� � 1
b�1
PpðY ÞðM�ðtÞ þ F Þð�f� fðtÞÞ
_Q3ðtÞ ¼ rQ3ðtÞ � @HPAðtÞ
@LðtÞ ¼
rðQ3ðtÞ � 1Þ þ 1
g
þ PpðY Þð�f� f�ðtÞÞ2NðtÞ�
V ðtÞ þ LðtÞ þ 1
;
(22)
with boundary conditionsQ1ðT Þ ¼ 0 andQ2ð0Þ ¼ Q3ð0Þ ¼ 0.
We impose Q1ðT Þ ¼ 0, because DrðT Þ is free to move and
imposeQ2ð0Þ and Q3ð0Þ to be 0, because our problem is con-
trollable and initial state depends on fð0Þ. Replacing f�ðtÞ
into Eq. (16) along with differential equations in Eq. (22) con-
stitutes a system of five differential equations which, along
with the boundary conditions, imply a solution; however is
difficult to obtain analytical solutions for that (you can refer
to [33] for a discussion of the complexity of the solutions to a
similar system). Yet, we analyze all the variables and the
system behavior in Section 5.
Theorem 4. For the formulated Stackelberg differential game, the
candidate strategy profile ðN�ðtÞ;M�ðtÞ;f�ðtÞÞ is indeed an
open-loop Stackelberg equilibrium.
Proof. It is straightforward that the construction of strategy
profile ðN�ðtÞ;M�ðtÞ;f�ðtÞÞ satisfies all the necessary con-
ditions as it followed the PMP conditions. The following
arguments constitute the sufficient conditions for optimal-
ity. Since the Hamiltonian functionHRA is strictly concave
and continuously differentiable with respect toNðtÞ for all
t 2 ½0; T �, the necessary optimality condition in Eq. (10)
uniquely determines a candidate optimal control path
NðtÞ� as a function of the observed verification pricing
strategy MðtÞ, capacity strategy fðtÞ and the system state
TABLE 2
Provider’s Estimated Transactions and Costs Based
on the Proposed Scenarios
Cloud providers Amazon C-Link Alibaba
Reputation 0.9 0.6 0.8
Price 0.0058 0.025 0.0125
Requests n/a 14 17
Consumed gas* 1,739,596 32,022,933 36,254,668
Gas Price 15 12 11
Gas cost ðGÞy 26,093,940 384,275,203 398,801,348
Gas Cost (USD)z $12.06 $256.50 $248.45
Transaction Delay(s)x 27-66 27-4000 27-5459
*Py
Y¼1 W
0
yTotal Gas�Gas Price
zAverage
xTime range of each transaction in seconds
TAGHAVI ET AL.: A BLOCKCHAIN-BASED MODEL FOR CLOUD SERVICE QUALITY MONITORING 285
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
_DrðtÞ, and the costate �ðtÞ. In a similarway, due to the strict
concavity of Hamiltonian function HVA with respect to
MðtÞ, andHPA with respect to fðtÞ, PMP provides not only
necessary conditions but also sufficient conditions for opti-
mality of M�ðtÞ for VA and f�ðtÞ for PA. According to the
stated conditions, we can conclude that the obtained strat-
egy profile is indeed an open-loopNash equilibrium. tu
6 IMPLEMENTATION AND EVALUATION
We implemented our proposed blockchain-based qualitymon-
itoring prototype on Ethereum using Solidity (version 0.4.25),
the script language on Ethereum andWeb3.js. This program is
available open-source in Github.1 The program was written
with the main concern of the minimum consumption of gas
per each transaction and was tested using remix,2 an online
IDE for Solidity. The gas price unit is in gwei, which is 1� 10�9
ether. In our implemented prototype, we used solidity struc-
tures and variables to store the provider’s data and requests
inside the contracts. Meanwhile, each transaction is logged
with a summary using an event to make it easily accessible for
the other providers (blockchain nodes) to track new transac-
tions. Once a new transaction with a specific event (e.g., new
request) is created, other providers can call the contract to get
more information and/or change contract stored data. To
make the simulation more realistic, we followed up all the
contract transactions from registering up to confirmation of
the contract completion and assigning a reputation.
For the sake of representation, we assumed three real-
world cloud providers (Amazon (PA), Alibaba cloud (RA),
and Century Link (RA)) using the system for a duration of
100 days to investigate their economic gain through the
Stackelberg differential game. The scalability of our system
for a higher number of providers is not questioned since the
Ethereum platform is proven to be scalable.3 We simulated
Alibaba and Century Link as cloud requesters who make 17
and 14 requests of service, respectively. The on-demand
services’ prices are borrowed from the providers’ websites
and their ratings are collected through the Gartner’s data-
set.4 The collected real-world data, simulated number of
requests and simulated results of total gas consumption,
gas price, gas cost (at the time of writing this paper), and
transactions delays are shown in Table 2.
The gas price that providers choose to pay for each trans-
action can affect the speed of processing their transactions to
be approved sinceminers choose themost profitable transac-
tions to include in their block.We adopt the optimal gas price
formulated in our previous study [5]. As Table 2 depicts, the
obtained gas consumptions of cloud service requesters are
much higher than those that answer these requests and sup-
ply these services. This is why Alibaba has the most and
Microsoft the least gas consumption. To compute the trans-
action delays, we had two options: 1- connecting as a node to
Ethereum network and collect data to estimate the delays
based on the given gas price, 2- using provided online tools
that present live monitoring and sound predictions. To save
time and get sufficiently large data to obtain an accurate
delay range, we followed the second option and used ETH
gas station5 which estimates price and time based on the last
1,500 blocks created each time. Thus, for each transaction, we
tested different prices in different time slots to obtain an
approximate range of delay depending on the traffic of the
Ethereum network. Since there is no time-dependent profit
maximization model similar to our proposal, not even in tra-
ditional centralized federations or related experiments to be
compared to, only the results of ourmodel are reported.
Fig. 3a illustrates the optimal fðtÞ for Amazon, where
�f ¼ 304 according to the speed attribute mentioned in the
SLA terms of Amazon. It can be easily noticed that during the
first half period of T , it is crucial to preserve a capacity close to
the desired capacity all the time, otherwise, Amazon incurs a
huge loss. The surprising point is that Amazon can cheat over
the preserved capacity after t ¼ 60, since it does not influence
its profit. In this situation, Amazon will not reserve the whole
resource for Century Link, and if the request consumes extra
computing resource than the reserved one, the workload will
be shared with other tenants. In this way, there is a minimal
risk of penalty and monitoring surcharge as the number of
Amazon’s customers and tenants grow over time. It should
be noted that the patternwas similar for both followers.
The optimal pricing of VA in response to fðtÞ is provided
in Fig. 3b. According to our findings, the impact of timing
in dynamic pricing is very minimal, meanwhile capacity
is strongly correlated with monitoring price. This strong
correlation was expected according to Eq. (15) in Theorem 3.
Fig. 3. (a) Optimal capacity of Amazon (PA) emerging towards equilibrium, (b) Dynamic pricing strategy of VA in the equilibrium, (c) Optimal quality
verification requests for Century Link (RA) in the equilibrium.
1. https://github.com/kavehbc/Cloudchain
2. https://remix.ethereum.org
3. Scalability is in terms of the number of users, however, it is worth
mentioning that the current version of Ethereum suffers handling a
huge number of transactions efficiently.
4. https://www.gartner.com/reviews/market/public-cloud-iaas 5. https://ethgasstation.info
286 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
https://github.com/kavehbc/Cloudchain
https://remix.ethereum.org
https://www.gartner.com/reviews/market/public-cloud-iaas
https://ethgasstation.info
As the capacity increases, the computational cost and time for
VA also climb. Consequently, VA has to enhance its price to
be profitable. Another reason could be the low number of the
monitoring requests, initiated when the capacity is almost
desired, as shown in Fig. 3c. This is also aligned with Eq. (8)
in Theorem 2 where the number of verification requests has
to be much lower if the difference of the provided capacity is
less that �. Century Link had the most number of requests
during the first half of the period with very high intensity at
the beginningwhere fðtÞwas low. For the second half period,
Century Link is well informed about the quality and the
results of the verification from VA, so the number of the
requests is almost flattened. This behavior of Century Link
now justifies why Amazon can cheat over the quality after
t ¼ 60. Alibaba Cloud also showed a similar pattern, though
the scale was different. Alibaba had a higher number of
requests for verification due to its higher reputation value
and number of transactions. It is worthy to mention that this
response is given to a finite time, it could be different if we
assume theywill be collaborating for an infinite time.
We further investigated the effect of the penalty value
and the reputation value of PA over RA’s profit and optimal
control. As shown in Fig. 4, the number of the requests for
verification starts declining unexpectedly, as penalty F for
Amazon (meaning reward for Alibaba) is getting higher.
However, based on Eq. (8), we expected the number of veri-
fication requests to be increased in case of undesired capac-
ity allocation. This means that with a higher penalty,
Amazon will not risk over fðtÞ, so the probability of earning
a reward is low. Whereas, it is pretty much probable that
Alibaba ends up with the monitoring cost to be paid. So,
imposing a higher penalty to the provider agent, will
increase the capacity and decrease the quality verification
requests’ equilibria. The reputation value of PA has a signif-
icant effect on the profit of RA. As shown in Fig. 5, Alibaba
with a reputation of 0.8 gain most if the reputation of PA is
higher than Alibaba itself. If the reputation value of Ama-
zon drops to less than 0.8, it is not economically justified to
outsource Alibaba’s demand to it. This highlights the effect
of the users’ satisfaction over the demand evolution and
economic gain over time. The reputation threshold is cer-
tainly less for Century Link with lower reputation value.
7 CONCLUSION
To overcome the issue of traditional federations of cloud pro-
viders and compromised QoS, this paper proposed a multi-
agent blockchain-based quality monitoring model. In our
proposed model, a multiagent approach was taken where an
oracle plays the role of a verifier agent to evaluate the service
quality whenever is called through the smart contract agents
deployed on the blockchain. A Stackelberg differential game
was designed to formulate the best strategies of resource pro-
visioning, the number of quality verification requests and the
monitoring price for the provider, requester and verifier
agents, respectively. The system was implemented using
Solidity on Ethereum and was simulated for resource trading
among three real-world cloud providers. It was found that at
the beginning, the provider has to preserve the desired
amount of capacity to satisfy the required quality even
throughout the peak-times. However, it is not economically
justified tomake this reservation for the last periods of its con-
tracts’ time. Such a resource provisioning impacted the veri-
fier pricing strategy and the number of requests. RA asks for
more verification during the first half period of the contract
when the preserved capacity is low. The reputation of PA ele-
vated the profit of RA,whereas, it negatively affected the rep-
utation of PA when it is lower than RA. Furthermore, a
higher penalty raised the capacity and reduced the number
of verification requests at the equilibrium. Thedeveloped sys-
tem was proven to be economical for cloud beneficiaries and
valuable in transparency and preventing the SLA violation.
Our proposed model in this research assumed having a
single trusted oracle to perform the verification. However,
having a fully-blinded trust on a single third-party may hin-
der the reliability and efficiency of the blockchain network
and Cloudchain. Therefore, for future, we plan to consider
multiple oracles and utilize more advanced techniques, such
as reinforcement learning, to enforce truthfulness among
these oracles and select the most reliable and efficient one in
each round of verification.
Fig. 4. Optimal quality verification requests for Alibaba (RA) in the
equilibrium.
Fig. 5. The impact of the Amazon’s reputation over Alibaba’s profit.
TAGHAVI ET AL.: A BLOCKCHAIN-BASED MODEL FOR CLOUD SERVICE QUALITY MONITORING 287
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] M. M. Hassan, A. Alelaiwi, and A. Alamri, “A dynamic and effi-
cient coalition formation game in cloud federation for multimedia
applications,” in Proc. Int. Conf. Grid Comput., 2015, Art. no. 71.
[2] B. Ray, A. Saha, S. Khatua, and S. Roy, “Quality and profit assured
trusted cloud federation formation: Game theory based approach,”
IEEE Tran. Services Comput., 2018, early access, doi: 10.1109/
TSC.2018.2833854.
[3] A. K. Bairagi, M. G. R. Alam, A. Talukder, T. H. Nguyen, D. E. Lee,
and C. S. Hong, “An overlapping coalition formation approach to
maximize payoffs in cloud computing environment,” in Proc. Int.
Conf. Inf. Netw., 2016, pp. 324–329.
[4] C. A. Lee, “Cloud federation management and beyond: Require-
ments, relevant standards, and gaps,” IEEE Cloud Comput., vol. 3,
no. 1, pp. 42–49, Jan./Feb. 2016.
[5] M. Taghavi, J. Bentahar, H. Otrok, and K. Bakhtiyari, “Cloudchain:
A blockchain-based coopetition differential game model for
cloud computing,” in Proc. Int. Conf. Service-Oriented Comput., 2018,
pp. 146–161.
[6] R. Pal and P. Hui, “Economic models for cloud service markets:
Pricing and capacity planning,” Theoretical Comput. Sci., vol. 496,
pp. 113–124, 2013.
[7] M. Hadji, W. Louati, and D. Zeghlache, “Constrained pricing for
cloud resource allocation,” in Proc. IEEE 10th Int. Symp. Netw.
Comput. Appl., 2011, pp. 359–365.
[8] B. Xu, T. Qin, G. Qiu, and T.-Y. Liu, “Optimal pricing for the com-
petitive and evolutionary cloud market” in Proc. 24th Int. Conf.
Artif. Intell., 2015, pp. 139–145.
[9] M. Fan, S. Kumar, and A. B. Whinston, “Short-term and long-term
competition betweenproviders of shrink-wrap software and software
as a service,” Eur. J. Operational Res., vol. 196, no. 2, pp. 661–671, 2009.
[10] D. Niyato, A. V. Vasilakos, and Z. Kun, “Resource and revenue
sharing with coalition formation of cloud providers: Game theo-
retic approach,” in Proc. 11th IEEE/ACM Int. Symp. Cluster Cloud
Grid Comput., 2011, pp. 215–224.
[11] J. P. R. Coronado and J. Altmann, “Model for incentivizing cloud
service federation,” in Proc. Int. Conf. Economics Grids Clouds Syst.
Services, 2017, pp. 233–246.
[12] O. A. Wahab, J. Bentahar, H. Otrok, and A. Mourad, “A stackel-
berg game for distributed formation of business-driven services
communities,” Expert Syst. Appl., vol. 45, pp. 359–372, 2016.
[13] E. K. Asl, J. Bentahar, H. Otrok, and R. Mizouni, “Efficient com-
munity formation for web services,” IEEE Trans. Services Comput.,
vol. 8, no. 4, pp. 586–600, Jul./Aug. 2015.
[14] L. Zhao, L. Lu, Z. Jin, and C. Yu, “Online virtual machine place-
ment for increasing cloud provider’s revenue,” IEEE Trans. Serv-
ices Comput., vol. 10, no. 2, pp. 273–285, Mar./Apr. 2017.
[15] J. Mendling et al., “Blockchains for business process management-
challenges and opportunities,” ACM Trans. Manage. Inf. Syst.,
vol. 9, no. 1, 2018, Art. no. 4.
[16] D. Yermack, “Corporate governance and blockchains,” Rev.
Finance, vol. 21, no. 1, pp. 7–31, 2017.
[17] M.Klems, J. Eberhardt, S. Tai, S. H€artlein, S. Buchholz, andA. Tidjani,
“Trustless intermediation in blockchain-based decentralized service
marketplaces,” in Proc. Int. Conf. Service-Oriented Comput., 2017,
pp. 731–739.
[18] Y. Jiao, P. Wang, D. Niyato, and Z. Xiong, “Social welfare maximi-
zation auction in edge computing resource allocation for mobile
blockchain,” in Proc. IEEE Int. Conf. Commun., Kansas City, MO,
2018, pp. 1–6.
[19] S. Underwood, “Blockchain beyond bitcoin,” Commun. ACM,
vol. 59, no. 11, pp. 15–17, 2016.
[20] E. M€unsing, J. Mather, and S. Moura, “Blockchains for decentral-
ized optimization of energy resources in microgrid networks,” in
Proc. IEEE Conf. Control Technol. Appl., 2017, pp. 2164–2171.
[21] Y. Zhang and J. Wen, “The IoT electric business model: Using
blockchain technology for the Internet of Things,” Peer-to-Peer
Netw. Appl., vol. 10, no. 4, pp. 983–994, 2017.
[22] C. Xu, K. Wang, and M. Guo, “Intelligent resource management in
blockchain-based cloud datacenters,” IEEE Cloud Comput., vol. 4,
no. 6, pp. 50–59, Nov./Dec. 2017.
[23] A. Azaria, A. Ekblaw, T. Vieira, and A. Lippman, “Medrec: Using
blockchain for medical data access and permission management,”
in Proc. Int. Conf. Open Big Data, 2016, pp. 25–30.
[24] X. Xu et al., “A taxonomy of blockchain-based systems for archi-
tecture design,” in Proc. IEEE Int. Conf. Softw. Architecture, 2017,
pp. 243–252.
[25] M. Taghavi, J. Bentahar, K. Bakhtiyari, and C. Hanachi, “New
Insights towards developing recommender systems,” Comput. J.,
vol. 61, no. 3, pp. 319–348, 2017.
[26] L. M. Hocking, Optimal Control: An Introduction to the Theory with
Applications. Oxford, United Kingdom: Oxford Univ. Press, 1991.
[27] D. Kraft, “Difficulty control for blockchain-based consensus sys-
tems,” Peer-to-Peer Netw. Appl., vol. 9, no. 2, pp. 397–413, 2016.
[28] M. Taghavi, J. Bentahar, H. Otrok, O. A. Wahab, and A. Mourad,
“On the effects of user ratings on the profitability of cloud serv-
ices,” in Proc. IEEE Int. Conf. Web Services, 2017, pp. 1–8.
[29] M. Taghavi, J. Bentahar, and H. Otrok, “Two-stage game theoreti-
cal framework for iaas market share dynamics,” Future Gener.
Comput. Syst., vol. 102, pp. 173–189, 2020.
[30] X. He, A. Prasad, S. P. Sethi, and G. J. Gutierrez, “A survey of
stackelberg differential game models in supply and marketing
channels,” J. Syst. Sci. Syst. Eng., vol. 16, no. 4, pp. 385–413, 2007.
[31] B. Robinson and C. Lakhani, “Dynamic price models for new-
product planning,”Manage. Sci., vol. 21, no. 10, pp. 1113–1122, 1975.
[32] G. J. Gutierrez and X. He, “Life-cycle channel coordination issues
in launching an innovative durable product,” Production Opera-
tions Manage., vol. 20, no. 2, pp. 268–279, 2011.
[33] J. Eliashberg andA. P. Jeuland, “The impact of competitive entry in a
developingmarket upon dynamic pricing strategies,”Marketing Sci.,
vol. 5, no. 1, pp. 20–36, 1986.
Mona Taghavi is working toward the PhD degree
at Institute of Information System Engineering,
Concordia University, Canada. She was awarded
the prestigious Canadian federal Vanier Research
Graduate scholarship in 2016 and ranked first
for FRQNT scholarship in Quebec. Her research
interests include services computing, blockchain,
game theory, machine learning, and recommender
systems.
Jamal Bentahar received the PhD degree in
computer science and software engineering from
Laval University, Canada, in 2005. He is a profes-
sor with Concordia Institute for Information System
Engineering, Concordia University, Canada and
NSERC co-chair of theDiscoveryGrant Evaluation
Group for Computer Science (2016-2018). His
research interests include services computing,
game theory, model checking, and multi-agent
systems.
Hadi Otrok received the PhD degree in ECE from
Concordia University, Canada. He is an associate
professor with the Department of EECS at Khalifa
University, UAE. He is an associate editor of the Ad
hoc Networks (Elsevier) and a co-chair of several
committees at various IEEE conferences. His
research interests include IOT, services comput-
ing, network security, VANET, game theory, and
mechanismdesign.
Kaveh Bakhtiyari received the Master of Artificial
Intelligence degree from UKM, Malaysia. He is
currently working toward the PhD degree in sys-
tem engineering and computer science at the Uni-
versity of Duisburg-Essen, Germany, and The
National University of Malaysia (UKM). His main
research interests include recommender systems,
reinforcement learning, and affective computing.
He has been awarded DAAD Doctoral Scholar-
ship in Germany, UKMResearch Fellowship.
" For more information on this or any other computing topic,
please visit our Digital Library at www.computer.org/csdl.
288 IEEE TRANSACTIONS ON SERVICES COMPUTING, VOL. 13, NO. 2, MARCH/APRIL 2020
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 07:43:18 UTC from IEEE Xplore.  Restrictions apply. 
http://dx.doi.org/10.1109/TSC.2018.2833854
http://dx.doi.org/10.1109/TSC.2018.2833854
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 150
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice