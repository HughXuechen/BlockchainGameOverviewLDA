Blockchain-Based Network Slice Broker to Facilitate Factory-As-a-Service
IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023 519
Blockchain-Based Network Slice Broker to
Facilitate Factory-As-a-Service
Tharaka Hewa , Student Member, IEEE, Pawani Porambage , Member, IEEE,
Ivana Kovacevic , Student Member, IEEE, Nisita Weerasinghe , Student Member, IEEE,
Erkki Harjula , Member, IEEE, Madhusanka Liyanage , Senior Member, IEEE,
and Mika Ylianttila , Senior Member, IEEE
Abstract—The novel concept of factory-as-a-service
(FaaS) allows the agility of adapting the manufacturing pro-
cess by identifying the industry’s supply chain and user
requirements. To cater to FaaS, flexibility in networking and
cloud services is a must. 5G network slice broker (NSB) is
a third-party mediator that caters to networking resource
demand from clients to the service providers. Thus, this ar-
ticle introduces a secure blockchain-based NSB to facilitate
FaaS. The proposed secure NSB (SNSB) provides secure,
cognitive, and distributed network services for resource
allocation and security service level agreement (SSLA) for-
mation with coordination of slice managers and SSLA man-
agers. In SNSB, we introduce a federated slice selection
algorithm with Stackelberg game model and reinforcement
learning algorithm to compute the real time and the opti-
mal unit price and demand level. We provide an extensive
implementation and performance evaluation of SNSB using
the slice manager and a custom SSLA manager.
Index Terms—Blockchain, network slice broker, Stackel-
berg game.
I. INTRODUCTION
THE growing need for Industrial Internet of Things (IIoT)
will require scaling up or down in different technolog-
ical aspects and addressing the societal and environmental
changes [1]. Factory-as-a-Service (FaaS) allows the agility of
Manuscript received 14 March 2022; accepted 25 April 2022. Date of
publication 16 May 2022; date of current version 8 November 2022. This
work was supported in part by Academy of Finland in 6Genesis Flagship
under Grant 318927 Project, in part by SFI Connect Center under Grant
13/RC/2077_P2, and in part by EU in INSPIRE-5Gplus Project under
Grant 871808. Paper no. TII-22-1070. (Corresponding atuhor: Tharaka
Hewa.)
Tharaka Hewa, Pawani Porambage, Nisita Weerasinghe, Erkki
Harjula, and Mika Ylianttila are with the Center for Wireless
Communications, University of Oulu, 90570 Oulu, Finland (e-mail:
tharaka.hewa@oulu.fi; pawani.porambage@oulu.fi; nisita.weerasinghe
@oulu.fi; erkki.harjula@oulu.fi; mika.ylianttila@oulu.fi).
Ivana Kovacevic is with Nokia, 90570 Oulu, Finland (e-mail: ivana.
kovacevic@nokia.com).
Madhusanka Liyanage is with the School of Computer Science, Uni-
versity College Dublin, D04 V1W8 Dublin, Ireland, with the Center for
Wireless Communications, University of Oulu, 90570 Oulu, Finland, and
also with the Department of Electrical and Information Engineering,
University of Ruhuna, Galle 80000, Sri Lanka (e-mail: madhusanka.
liyanage@oulu.fi).
Color versions of one or more figures in this article are available at
https://doi.org/10.1109/TII.2022.3173928.
Digital Object Identifier 10.1109/TII.2022.3173928
adaptation of the manufacturing process by identifying the
supply chain and user requirements in IIoT. To enable FaaS
with the help of networking and cloud services, it is always
essential to have noninterrupting IT and telecommunication
services [2]–[4]. When an IIoT site is forming as FaaS, it should
scale up or scale down the operations against the new engage-
ments with higher flexibility. Similar to the adjustment of other
infrastructure and accessibility of different services, networking
and cloud services should also be flexible and adapted to the
time requirements. Instead of buying these from a single service
provider, the operations in FaaS will have higher flexibility
to acquire them from an open marketplace that has access to
multiple resource providers (RPs).
Instead of conventional network slice creation by one opera-
tor, we propose a more democratic way of forming multioperator
network slices based on the consumer requirements to cater
to FaaS. An intermediate third-party service is running as a
network slice broker (NSB) to enable this slicing scenario. 5G
NSB allows the dynamic interoperability and resource trading
requirements of market players, such as infrastructure providers,
consumers, and mobile network operators in trading the network
and computational resources [5]. Instead of having a central-
ized NSB, offering brokering service as a blockchain-based
distributed service will bring higher flexibility and eliminate
the single point of failure [6]. To invoke the security services
and meet the security levels requested by the consumers, it
is necessary to integrate the predefined security service level
agreements (SSLAs) [7] with the corresponding RPs.
In the previous works, the concept of NSB is presented in both
centralized and distributed forms as the running prototypes. At
the same time, in the state-of-the-art, blockchain is used as a fa-
cilitator to FaaS and even blockchain-based NSBs are proposed
for other applications. Although the blockchain-based NSBs
are proposed for general applications, they lack applicability
in a particular use case and the security considerations like the
invocation of SSLAs. Moreover, they do not provide any cogni-
tive slice selection mechanisms which can formulate federated
network slices based on the resource demand and availability.
Therefore, this article introduces the blockchain-based NSB to
create federated network slices in the context of sharing network
resources in FaaS for IIoT applications. Our main contribution is
to develop the secure NSB (SNSB) that provides distributed and
intelligent network services in resource allocation and SSLA
1551-3203 © 2022 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-4520-6542
https://orcid.org/0000-0001-6365-9804
https://orcid.org/0000-0002-6188-3711
https://orcid.org/0000-0001-6500-3147
https://orcid.org/0000-0001-5331-209X
https://orcid.org/0000-0003-4786-030X
https://orcid.org/0000-0002-8079-5514
mailto:tharaka.hewa@oulu.fi
mailto:pawani.porambage@oulu.fi
mailto:nisita.weerasinghe@oulu.fi
mailto:nisita.weerasinghe@oulu.fi
mailto:erkki.harjula@oulu.fi
mailto:mika.ylianttila@oulu.fi
mailto:ivana.kovacevic@nokia.com
mailto:ivana.kovacevic@nokia.com
mailto:madhusanka.liyanage@oulu.fi
mailto:madhusanka.liyanage@oulu.fi
https://doi.org/10.1109/TII.2022.3173928
520 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023
formation with the coordination of slice managers and SSLA
managers. To the best of our knowledge, this is the very first
research article that presents a secure and trustworthy network
slice brokering solution for FaaS as a blockchain-based service
using game theory and reinforcement learning (RL)-based se-
lection algorithm together with a real-life implementation in 5G
networking environment by integrating Katana network slice
manager [8]. In the federated slice selection algorithm of SNSB,
we use a Stackelberg game model and RL algorithm to com-
pute the optimal unit price and demand level of each resource
category in real time. The federated network slice is created
based on those obtained optimal values used as a quantitative
representation for the resource allocation.
The rest of this article is organized as follows. Section II
discusses the related works. Then, Section III proposes the
brokering architecture for the FaaS use case and explains the
slice selection algorithm explicitly. Section IV evaluates the slice
selection algorithm and presents the prototype implementation.
Finally, Section VI concludes this article.
II. RELATED WORK
As stated in [5], in addition to facilitating on-demand re-
source allocation, NSB performs admission control based on
traffic monitoring and forecasting, including mobility, based on
a global network view. It configures radio access network (RAN)
schedulers to support multitenancy use cases. According to
3GPP specifications and the initial design in [5], the 5G NSB is
colocated at the master operator-network manager (MO-NM),
which monitors and controls the shared RAN, and interacts
with the sharing operator network manager (SO-NM). Chaer
et al. [9] presents how the blockchain leverages the 5G networks
with potential opportunities for the 5G networks, including
infrastructure crowdsourcing and infrastructure sharing. Nguyen
et al. [10] presents a comprehensive survey on the integration of
blockchain for 5G and beyond networks.
Backman et al. [11] highlighted the significance of blockchain
as an additional trust layer for NSB. Valtanen et al. [12] present
an analysis of a blockchain-based slice brokering use case as
a resource configuration framework in the perspective of in-
dustrial automation. Boubendir et al. [13] proposed a federated
operational architecture to share network and IT resources to the
consuming stakeholders.
Afraz et al. [14] defined blockchain as a tradable commodity
with the parameters, such as RAN, computational resources,
and storage. Zanzi et al. [15] proposed NSBChain, which is a
hierarchical blockchain architecture for network slice brokering.
Nour et al. [16] proposed a blockchain-based network slice bro-
kering mechanism with anonymous transactions. Antevski and
Bernardos [17] proposed a distributed-ledger-based solution for
the federation of 5G network services through smart contracts.
While evolving the above research efforts toward beyond 5G, the
most significant improvement is to bring intelligence by learning
the network state and user satisfaction to form a suitable network
slice. With this requirement, the role of the NSB also needs to be
reformed as an entity that operates with higher intelligence. The
current state-of-the-art brokering architectures do not provide
Fig. 1. Role of network slice broker to enable FaaS.
real-time evaluation of the resource availability and their pricing
values offered by different RPs or do not consider any security
properties for network slice creation. Therefore, to bring the
intelligence for slicing technology in beyond 5G networks, it
is highly required to have a trusted and secured slice brokering
architecture that provides real-time services based on the current
network resource availability.
III. BROKERING ARCHITECTURE FOR FAAS
The former part of this section describes the role of the NSB
in a FaaS use case scenario together with the proposed SNSB
architecture and its workflow. Then we provide the mathematical
explanation for the slice selection algorithm that we consider in
the SNSB.
A. Usecase Scenario
In this article, we consider a use case scenario. where a
blockchain-based NSB facilitates to enable FaaS. A blockchain-
based NSB is a distributed trading platform to cater to federated
network slices as required by each production site (Fig. 1).
In our solution, NSB is a distributed service that collects
resource requests and security service requirements from each
production site and designs the network slice based on the
resource availability and ability to provide security services at
the RPs. For that, NSB requires to keep records of resource
availability and security services provided by each resource
provider. NSB blockchain service should run on each miner
located at the production and RP sites.
The potential RPs proposed in the SNSB include MNOs,
local 5G operators, and cloud infrastructure providers who are
willing to trade the resources for the service-oriented factories
that operate as consumers.
B. Proposed Brokering Architecture
The SNSB architecture and its core modules are presented
in Fig. 2. Prime mover collects the resource requests coming
from different production sites and forwards them to mediator.
Security manager is a security service blockchain (SSB) to
protect the entire brokering service from denial of service (DoS)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
HEWA et al.: BLOCKCHAIN-BASED NETWORK SLICE BROKER TO FACILITATE FACTORY AS A SERVICE 521
Fig. 2. Proposed architecture of SNSB solution.
Fig. 3. Workflow of brokering architecture.
attacks. When the resource requests are coming from the tenants,
mediator runs the slice selection algorithm by taking the updates
of resource availability and price, creating the network slice
template (NST), and sending NST to global slice manager.
Finally, the global slice manager accumulates the slice with the
coordination of slice managers and SSLA manager, and send the
slice to consumers.
C. Work Flow of Brokering Architecture
The sequence of events executed from the initial stage to
the completion stage in our approach is depicted in the Fig. 3.
Initially, a tenant sends a slice request along with their desired
security requirements 1) to the proposed framework. Then,
the security service smart contract verifies the slice request
against DOS attacks and 2) sends the confirmed slice request
with the security requirements to the SNSB. In the next stage,
SNSB runs the slice selection algorithm (4) to find the optimal
slice that tallies the tenant and security requirements. The slice
managers of the selected slice are notified by SNSB (5). The
SNSB acknowledges the SSLA manager that slice has been
instantiated and forwards the SSLA information (6). After that,
the slice manager is responsible for invoking and offering the
chosen optimal slice to the tenant (7). Afterward, the SSLA
manager sends the SSLA establishment notification to the tenant
(8), based on the tenant’s security requirements. Whenever an
MNO adds/updates its network resources or the unit prices of
the resources, that particular information will be updated by the
respective slice manager of the MNO. The security service smart
contract checks the validity of the updated request received by
the resource provider against the DoS attacks, based on profile
information stored in the ledger.
D. Slice Selection Algorithm
We consider that a particular network slice blueprint is created
with n number of resource (or network functions) categories. In
a resource request created by a certain fog node, ui denotes
the amount of resource demand for ith resource Ri, where i ∈
{1, 2, . . ., n}. There are m number of RPs such that Oj denotes
the jth resource provider, where jε{1, 2, . . .,m}. The resource
provider (or operator) Oj sets the pricing strategy {vj = [vjii ∈
n : 0 < vji < v]} as the unit price of the ith resource, where vji
is the price offered and v is the maximum price. c is taken as the
common and constant cost resulting from the general operation
and maintenance cost.
Hence, the expected utility (reward) by Oj resource provider
can be presented as
Pj =
n∑
i=1
uivji −
n∑
i=1
cui. (1)
In addition to that, we introduce a utility function Pi, which is
the expected utility (reward) for Ri resource category requested
by the miner node located at fog node (based on the offer given
byOj operator). To develop the algorithm, the reward is assigned
to each resource category as an indication of its popularity (or
demand level) among the consumers
Pi = P
ui∑N
i=1 ui
− vjiui. (2)
The fixed utility P is received as a reward by the miner node
for successful mining of a given service request with respect to
all the resource categories.
As described above, after receiving all the offers from the
RPs with in a given period of time, the selection algorithm first
computes the total service demand of fog nodes and set the offer
prices to earn more profit to the RPs. This optimization problem
can be formulated as
max
vj
Pj(vj |u)
subject to yj ≥ 0
N∑
i=1
uivji ≥
N∑
i=1
cui. (3)
On the other hand, the miner nodes located in fog nodes, need
to maximize the reward received for each resource requirement
(category). Therefore, observing the price strategies of RPs,
the selection algorithm will formulate the optimization problem
(i.e., to compute the optimum resource demand) of each resource
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
522 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023
category as
maxui
Pi(ui|vji)
subject to ui ≥ 0
P
ui∑N
i=1 ui
≥ vjiui. (4)
Accordingly, the mathematical model is formulated for two
sides in the Stackelberg game. The selection algorithm in SNSB
is responsible for updating both the RPs and the fog nodes about
how they are able to continuously modify strategies to boost
their utilities. The aim of the Stackelberg game is to discover
the Nash equilibrium, where no player has the intention to
diverge from its strategy after taking into consideration of its’
opponent’s selection. In this problem, the Nash equilibrium of
the Stackelberg game is modeled as follows.
In order to show the feasibility of Stackelberg game, let v∗
and u∗ be the optimal unit price of one resource provider and the
optimal resource demand for each resource category. Therefore,
the point (u∗, v∗) is considered the Nash equilibrium point if it
satisfies, Pi(u
∗, v∗) ≥ Pi(u, v
∗) and Pj(u
∗, v∗) ≥ Pi(u
∗, v).
Verifying the distinctiveness and presence of the Nash equi-
librium in the Stackelberg game is achieved by taking the
second-order derivatives of utility functions of (2) and (1) with
respect to ui and vj as follows:
∂2Pi
∂ui
2
= − 2P
∑
k �=i uk(∑
k∈N uk
)3 ≤ 0 (5)
∂2Pj
∂vj2
= − 2P
vj2
(N − 1)P
N
≤ 0. (6)
According to the above equations and, as described in [6], Pi
and Pj utility functions are stringently concave, and the Nash
equilibrium present in this Stackelberg game .
In the first part of the selection, the algorithm should be run
to fill the values given in Table I. The table is updated for all
the available operators, their optimal unit prices is a common
indication for all the resource categories, and the optimal de-
mand. This table is taken as a reference to create the federated
NST and decide its composition with different operators and
resource categories.
E. Multiagent Reinforcement Learning Algorithm
The Stackelberg game presented above can be solved as a
multiagent reinforcement learning problem, where each player
in the game is represented by a learning agent. In multiagent
scenario, each agent aims at maximizing its own cumulative
reward, which, in turn, maximizes the total reward of all agents in
the system. The key issue of multiagent reinforcement learning is
the nonstationary learning problem due to the effects of actions
of other agents. Therefore, reinforcement learning agents often
experience oscillatory problems, where optimal policy does not
converge [18]. For this reason, classical learning algorithms,
such as Q-learning, have been modified to achieve better con-
version. The win-of-learn-fast policy hill climbing (WoLF-PHC)
TABLE I
TABLE FOR OPTIMAL UNIT PRICES OF OPERATORS AND OPTIMAL
RESOURCE DEMAND FROM EACH RESOURCE CATEGORY
algorithm is proposed as an extension of the Q-learning algo-
rithm for more efficient learning of the dynamic target [19].
Its characteristic is the use of different learning rates depend-
ing on the game outcome, which increases the convergence
in multiagent nonstationary environment. This article presents
the application of WoLF-PHC algorithm to the slice selection
problem.
We denote ui ∈ Ai and vji ∈ Aj the resource Ri demand
action of fog node and the unit price set by resource provider
Oj for resource i, respectively, where Ai represents the set of all
possible actions of the fog node, and Aj set of possible actions
of the operator. In each time slot, the miners and the resource
provider take actions. At the start of the time slot t, the operator
and fog nodes take the actions, i.e., set the price vtji and demand
ut
i, based on the observed state of the system. The state of the
system for the fog node is described as si = vt−1
ji , which is the
observed price for the resource Ri at the previous time slot. The
state of the system for the operator is defined as sj = [ut−1
i ],
where ut−1
i represents the service demand of each fog node in
the previous time slot. The immediate reward is defined by (1)
and (2).
Similar to the Q-learning algorithm, the WoLF-PHC algo-
rithm calculates the Q-table. In the multiagent case, each agent
is updating its own Q-table. However, the action selection in the
WoLF mechanism is different from the classic ε-greedy policy,
where the action is selected based on the values of the Q-table,
i.e., maximum of the actions for the given state in the exploitation
phase and random in the exploration phase. WoLF-PHC selects
the action based on the policy π. This means that some action
a in-state s is selected with probability π[s][a]. In the rest of
the section, we describe the details of the policy updates and
the WoLF-PHC algorithm steps on the example of the fog node
agent. The operator’s agent utilizes the same algorithm for its
own set of actions, states, and reward definitions as defined
above.
After the all agents have taken actions and observed their
rewards, they update the Q-value. We denote the learning rate
of the fog node as αi ∈ (0, 1] and discount factor as γi ∈ (0, 1].
The Q-function of the fog node with the service demand ui in
the state sti is updated as
Qi(s
t
i, u
t
i) = Q(sti, u
t
i) + αi (Pi
+γ maxui
Q(st+1
i , Ai)−Q(sti, u
t
i)
)
. (7)
The WoLF mechanism, keeps track of the current average pol-
icyπi(s
t
i, ui)which is used in order to decide the “win” or “lose”
of the policy πi(s
t
i, ui). The fog node agent selects its learning
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
HEWA et al.: BLOCKCHAIN-BASED NETWORK SLICE BROKER TO FACILITATE FACTORY AS A SERVICE 523
Algorithm 1: WoLF-PHC algorithm for the fog node.
1: Set αi, δi, θi,win, θi,lose
2: Initialize t = 0, Qi(s, u) = 0, πi(s, u) = 1/ | Ai | and
πi(s, u) = 1/ | Ai | ∀s, u
3: Repeat
4: Observe environment state sti
5: Select action ut
i at random with the probability policy
πi(s
t
i, ui)
6: Observe next state st+1
i and immediate reward Pi
7: Update Qi(s
t
i, u
t
i) according to (7)
8: Update πi(s
t
i, ui) according to (10)
9: t = t+ 1
10: until
parameter θi from θi,win and θi,lose, where θi,win < θi,lose. If the
agent is winning, θi,win updates the policy cautiously. Otherwise,
θi,lose is used to learn fast from the lost game. The policy is the
winning policy if the following criteria is met:
∑
ui∈Ai
πi(s
t
i, ui)Qi(s
t
i, ui) >
∑
ui∈Ai
πi(s
t
i, ui)Qi(s
t
i, ui). (8)
For the computation of the current average policy, Ni(s
t
i) is
used to record the occurrence count of states noticed by the
agent, that is increased by one each time the system is in the
state sti. Then, the average policy of the fog node can be updated
as
πi(s
t
i, ui) = πi(s
t
i, ui) +
πi(s
t
i, ui)− πi(s
t
i, ui)
Ni(sti)
∀ui ∈ Ai.
(9)
In the course of the learning process, the chance of the fog node
selecting a service demand is progressively increased, which
can elevate the expected reward, followed by the reduction of
the other actions [19]. Hence, the update of the service demand
policy of the fog node can be presented as follows:
πi(s
t
i, ui) = πi(s
t
i, ui) + Δ ∀ui ∈ Ai (10)
where
Δ =
⎧⎨
⎩
−min
(
πi (s
t
i, ui) ,
θi
|Ai|
)
, Π
∑
ui �=u′
i
min
(
πi (s
t
i, ui) ,
θi
|Ai|
)
, otherwise
(11)
where | Ai | is the number of actions and condition Π is
Πui �= argmaxu′
i∈Ai
Qi(s
t
i, u
′
i). (12)
The WoLF-PHC algorithm steps for the fog agent are summa-
rized in Algorithm 1.
In the course of the training process, the agent updates its
strategy based on (7). Hence, the complexity of the training
process of each agent is in the order of O(S2 ×A), where S
stands for the size of the state space and A stands for the size of
the action space. As for the complexity of the running process
of WoLF-PHC, considerably complex is the Q-table look-up.
Hence, the complexity of the running process of each agent is
approximately O(S).
Fig. 4. Smart contract interaction.
F. Deployment of Smart Contracts
The proposed architecture leverages the slice brokering oper-
ation by encoding the selection algorithm into smart contract
in the consortium blockchain. The consortium comprises of
factories and RPs. As indicated in Fig. 2, the Tenants slice
managers and SSLA managers connected using application
programming interfaces (APIs). The slice brokering service is
deployed in the local blockchain nodes with the APIs to invoke
slice request (Step1) from tenant end as indicated in Fig. 2.
Inward transactions APIs are encoded in the PrimeMover
smart contract. Outward API invocations (Step3) are encoded
in the Mediator smart contract. There are five different smart
contracts that synergistically operate to ensure the end-to-end
operation of the slice brokering process. The interaction between
each smart contract is illustrated in Fig. 4. The descriptions of
the role of each smart contract are as follows.
1) Training Smart Contract: Training smart contract per-
forms the training operation to formulate the Q values and
service demand policies. Algorithm 1 is encoded in the training
smart contract and updates of Qi(s
t
i, u
t
i) according to (7) and
update πi(s
t
i, ui) according to (10) performed by the training
smart contract. The corresponding values are stored in the ledger.
The training smart contract operates as an offline smart contract
without real-time slice brokering. The training smart contract
executes in a timely execution interval for the synchronization
of the training dataset.
2) Prime Mover Smart Contract: This smart contract hosts
the inward API received from the consumer end. The inward
transactionTxsliceRequest received by the tenantTα can be defined
as
TxsliceRequest =< Tα, Rα,Timestamp > (13)
where the resource request Rα
Rα = {ui . . . un}. (14)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
524 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023
The ledger stores the data elements received from TxsliceRequest
in the ledger to ensure nonrepudiation of the tenants regarding
the resource request.
3) Mediator Smart Contract: This smart contract retrieves
the available resources and unit prices from the resource unit
price database for the computation of optimal RPs to deliver the
optimal resource for the consumers. According to Fig. 2, the
game theory-based selection algorithm (Algorithm 1) executes
in the Mediator smart contract.
4) Global Slice Manager: The global slice manager smart
contract creates the network slice template of the federated slice.
Global slice manager invokes the RP slice managers and SSLA
managers to instantiate the slice. The transactions committed to
the ledger in global slice manager include TxNST which can be
defined as
TxNST =< Tα, {ui ∗ wj . . . un ∗ wm},Timestamp > (15)
where wj is the quantity of resources provided from the RP
j (j=1 to j=m). The transaction committed into the ledger
ensures the integrity of formulated slice offer from the SNSB.
Furthermore, the SSLA transaction is defined as
TxSSLA =< Tα,SSLA-IDentifier, Timestamp > (16)
and the slice instance transaction can be defined as
Txslice =< Tα,Slice-IDentifier, Timestamp > . (17)
5) Security Manager Smart Contract: The security manager
smart contract performs the security verification of inward
transactions. Especially, the tenant resource requests, which ex-
ceed the maximum authorized request frequency and authorized
quantity limits will be blocked.
G. Deployment of Blockchain Nodes
SNSB proposed to facilitate the slice brokering as a service
to the intervening stakeholders of slice brokering operation in
the manufacturing process. Decentralizing the slice brokering
service toward the stakeholders is one of the key requirements in
SNSB. As indicated in Fig. 1, the key categories of stakeholders
are twofold. The MNOs, local 5G operators, and cloud service
providers can be broadly categorized as RPs, while the manufac-
turing plants which consume the 5G resources in the manufac-
turing processes can be categorized as consumers. Each stake-
holder, either resource provider or consumer requires to onboard
to the slice brokering ecosystem. After an agreement between the
members of the blockchain network, the stakeholder instantiates
a blockchain node locally with the established connectivity to the
consortium. The APIs of SNSB instantiates in parallel with the
instantiation of smart contracts in the blockchain node. If the new
member is a consumer who anticipates network slice brokering
for the manufacturing process, the member can initiate inward
resource requests to the new blockchain node to invoke the SNSB
for demanding federated slices to advance the manufacturing
operation. In contrast, if the new member is a resource provider,
the access can be granted to the local services, such as slice
manager and SSLA manager expose the available resources to
formulate the federated slice(s) for upcoming resource requests
Fig. 5. Blockchain deployment architecture.
from the consumers. Each stakeholder should contribute to the
mining process and the blocks mined within the intermediary
steps of slice brokering requires approval of each stakeholder to
fulfil the consensus. Fig. 5 reflects the blockchain deployment
model of SNSB to facilitate FaaS.
Technically, a similar implementation can be performed using
a public blockchain. However, the limitations of the public
blockchains, such as higher block mining time, the overhead
of growing ledger and higher computational overhead for block
mining deviate from the proposed architecture from the public
blockchain. The heavy computations, such as WOLF-PHC algo-
rithm execution and slice selection will incur execution cost (gas
cost) in public blockchain, such as Ethereum. In contrast, the
consortium blockchain provides more flexibility in block mining
time and comparably less overhead in the ledger storage which
makes the proposed architecture mostly suited for consortium
type blockchain implementation.
IV. PERFORMANCE EVALUATION
This section provides the evaluation of the slice selection
algorithm and slice brokering architecture. First, the slice se-
lection algorithm is developed in Python. We evaluated a simple
example with two fog node agents and one service provider agent
as proof of the concept. The proposed solution can be generalized
to any number of fog nodes and service providers. Later, the
SNSB blockchain service is implemented on Hyperledger Fabric
by integrating a real network slice manager and the SSLA
manager.
A. Evaluation of Slice Selection Algorithm
Initially, we assess the convergence of the WoLF-PHC al-
gorithm. For clarity, let the pricing action set of the resource
provider and resource demand action set of the fog node be
Aj = (0, 1, ..., 5) andAi = (0, 1, ..., 4), respectively. The quan-
titative factor of the cost of the unit resource in operator is
c = 1, and the reward is P = 10. For simplicity, we made an
assumption of a uniform pricing strategy for each fog node. To
guarantee that the agent can converge to the optimal policy, we
set the maximum episode numbers as 5000. Additionally, the
learning rate is α = 0.2, which decides the degree to which the
altered Q-value overrides the previous one. The discount factor
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
HEWA et al.: BLOCKCHAIN-BASED NETWORK SLICE BROKER TO FACILITATE FACTORY AS A SERVICE 525
Fig. 6. Evaluation results of slice selection algorithm. (a) Convergence
performance of WoLF-PHC algorithm: Resource provider optimal price
of one resource. (b) Convergence performance of WoLF-PHC algorithm:
Fog node/slice optimal demand of one resource. (c) Agent’s π values in
the state when other agents play optimal action. (d) Average reward for
each agent.
γ = 0.8 expresses how much we focus on future rewards. The
learning parameters θi,win and θi,lose are set to 0.001 and 0.0025,
respectively.
The WoLF-PHC algorithm exhibits fast convergence perfor-
mance owing to the automatic alteration of the learning rate, as
depicted in Fig. 6(a) and (b), where the optimal resource price
and demand are plotted for each iteration of the simulation. Both
the resource provider and the fog node agent converge close to
the Nash equilibrium point-earning advantages from the “win-
ning or learning fast” mechanism. This exhibits a good trend for
selecting the optimal price based on the Nash equilibrium point.
In Fig. 6(c), the values of the π functions are plotted for each
agent after the system converges. In the figure π, values are
given for the system’s state when all the agents perform optimal
actions in the previous instant. From the figure, it can be seen
that each agent has one action that is better than the others, which
is easily picked as the optimal (or the best) action to perform.
Fig. 6(d) shows the average reward of each agent throughout
the learning iterations. The reward is averaged over 100 itera-
tions per data point (i.e., 5000). The resource provider’s reward is
increasing as the agent is converging toward optimal policy. On
the other hand, the rewards of the fog nodes depend on the winner
of the game. Once the agents converge to the optimal policy, it
can be noticed that they obtain equal rewards by assuring the
system is fair.
B. Evaluation of SNSB Blockchain Service
Moreover, the discussion of the cloud The experimental setup
was developed to evaluate the proposed architecture in a near
realistic environment. We implemented SNSB selection algo-
rithm instances of the Hyperledger Fabric blockchain network.
Furthermore, virtual infrastructure is simulated using Devstack,
which is the developer version of OpenStack platform. Katana
slice manager has been integrated with SNSB to invoke slice
instantiation requests upon selecting the optimal slice. Imple-
mentation setup of SNSB is illustrated in Fig. 7.
Blockchain Service Implementation: In the implementation
setup, the five smart contracts indicated in Fig. 4 are imple-
mented on the Hyperledger Fabric blockchain platform using
Java programming language. MQTT and REST APIs are used
in the integration for the integration of each service.
Resource Unit Price Database: The resource unit price stor-
age has been implemented on MongoDB database. The MNOs
can access the MongoDB storage for updating pricing informa-
tion. The mediator smart contract accesses the updated pricing
information to select the optimal slice based on the consumer
request.
RP Infrastructure Setup: Each RP deployed with the instances
of Katana slice manager, Open MANO, and OpenStack for the
near-realistic infrastructure integration. Katana slice manager is
integrated with REST API for slice creation.
NSBChain Implementation for the Comparison with SNSB:
We have performed a comparison on resource provider uti-
lization and federated network slice pricing with SNSB and
NSBChain. We selected NSBChain as it was developed using
blockchain and mostly related work to our proposal.
C. Latency Evaluation on Slice Selection
We have implemented the system to evaluate the latency on
the proposed architecture’s end-to-end operation. The evaluation
has distinguished key suboperations as slice selection, SSLA
establishment, and slice instantiation.
The tenant end is implemented with a software program to
simulate the consumer resource request scenario. The SSB and
SNSB, encoded in the Hyperledger blockchain platform, have
been integrated through APIs with Katana slice manager. SNSB
executes the sequential steps within the end-to-end operation
upon reaching the consensus within the blockchain network.
Block mining time defines the time interval to generate a block
that the consensus procedure has approved. The configuration
is defined as BlockT ime in the Hyperledger Fabric blockchain
platform.
Fig. 8 reflects the end-to-end slice creation latency in differ-
ent block mining time configurations in the SNSB blockchain.
We programmatically simulated the resource request generation
from the IoT tenant end. The experiment includes the end-to-end
slice creation process fromStep1 toStep8, which is indicated in
3. Since we need to evaluate the performance impact of SNSB,
we fixed the SSB block mining interval (BlockT ime) and
changed the SNSB block mining interval for different values.
In this experiment, the software program generated a resource
request and end-to-end latency measured on each trial for a
specific BlockT ime configuration. We performed 100 trials for
each BlockT ime configuration and measured the latency on
slice selection (brokering) operation, SSLA establishment, and
selected federated slice instantiation.
Fig. 8 reflects the end-to-end slice creation latency in different
block mining time configurations in the blockchain. The results
show that the impact on the BlockT ime is significantly higher
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
526 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023
Fig. 7. Testbed implementation setup.
Fig. 8. End-to-end slice creation latency.
for the slice selection than the SSLA establishment and slice in-
stantiation. The slice brokering operation consists of more block
mining steps in the proposed architecture, including resource
request validation, resource offer validation, and selection result
validation. Hence, the block mining impact of BlockT ime
is higher in the slice selection operation. Furthermore, SSLA
operation and slice instantiation operation include also include
block mining operations to ensure nonrepudiation by maintain-
ing operation status as blockchain transaction logs. Furthermore,
ledger records in the interactions with external parties, such as
SSLA services and Katana slice manager insightful evidence in
case of a dispute resolution.
D. RP Utilization Comparison in SNSB versus
NSBChain [15]
SNSB facilitates the federated slice creation based on the
optimal resource demand and optimal unit price determination
by the smart contract. The smart contract utilizes the Table I in
the creation of slice by federating multiple RPs. We program-
matically generated the optimal values and optimal resource de-
mands based on the RL algorithm (Table I) and utilized them for
the experimental evaluation. We also defined the fixed number of
Fig. 9. Resource provider utilization - NSBChain vs SNSB.
RPs (m) into 100 and scaled up the number of different resource
types from 10 to 100. The consumer resource request simulated
by programmatic generation on fixed-ranged (30 − 100) random
values for each resource parameter (u1 to un) quantity in the
experiment. The corresponding resource offers are generated
for all 100 RPs and stored in the MongoDB database. The
same resource request and set of resources offer input to NS-
BChain [15] and SNSB. For each offer, NSBChain selects the
network slice, considering the lowest offer provided by the RPs.
In contrast, SNSB provides a federated network slice, which has
been formulated based on the optimal unit prices and optimal
resource demands indicated in Table I. In this experiment, we
have evaluated the RP utilization percentage comparison with
SNSB and NSBChain. We generated 100 requests per trial for
each resource quantity (N ) configuration and calculated each
trial’s mean and standard deviation.
Fig. 9 reflects the RP utilization percentage on federated
slice creation versus NSBChain. The NSBChain always utilizes
one RP with the lowest price slicing offer, regardless of the
number of resources in the tenant request. Hence, the resource
utilization remained 1% for the NSBChain within the entire
experiment. In contrast, SNSB utilizes multiple RPs, based on
the criteria of Table I and formulates the federated slice. The RP
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
HEWA et al.: BLOCKCHAIN-BASED NETWORK SLICE BROKER TO FACILITATE FACTORY AS A SERVICE 527
Fig. 10. Offer price comparison: NSBChain versus SNSB.
utilization increases approximately up to 70% when the number
of resources (N ) has increased in the slice formulation. The
federated slice ensures the delivery of services which is com-
posed of optimal individual resources according to Table I with
competitive pricing. According to the results, SNSB is ideally
compatible with multioperator/RP slice brokering scenarios for
future industrial use cases with a better utilization percentage
than NSBChain.
E. Consumer Pricing Comparison in SNSB versus
NSBChain [15]
SNSB delivers the federated slice for a specific resource
request from the optimal unit prices in multiple RPs. SNSB
determines the composition of different resources from each
RP based on the Table I. We have programmatically generated
the resource requests and offers to simulate realistic consumer
demand scenarios. A federated slice created by the SNSB is
composed of the optimal price offers of different RPs. We define
the finalized price of the federated slice k as
Pricek =
N∑
i=1
uiv
f
j (18)
where vfj is the SNSB selected unit price of federated slice for
the parameter j. The Pricek is the summation of all unit prices
multiplied by the demand quantities ui, where i = 1 to i = n.
We have defined the final Pricek to represent in a generic pricing
unit U , making the comparison clearer. In this experiment, we
evaluated the behavior of the mean Pricek when the number
of resources (N ) remained fixed and the number of RPs was
increased. The NSBchain selects the lowest price-providing RP
based on the unit prices multiplied by the demand quantities
of each RP as a single entity. In contrast, SNSB considers the
optimal unit prices and optimal resource demands in Table I
to offer the federated slice from different RPs. In the simula-
tion, we provided identical resource requests and offers to the
NSBChain and SNSB to compare the offer pricing determined
by different algorithms. We performed 100 trials (k = 1 to
k = 100) for each RP quantity setting (10, 20, 30. . . to 100). The
mean and standard deviation of the output prices are calculated
in different scenarios. Fig. 10 reflects the behavior of mean
prices obtained by NSBChain and SNSB. From the results, it is
obvious that SNSB yields better performance in consumer price
with the delivery of federated slices. Technically, the federated
slice is composed of the selected optimal prices from each
RP. Therefore, the federated slice provides better prices from
the consumer’s perspective. The mean prices offered by the
SNSB decline when the number of RPs increased as per the
Fig. 10. The main reason for price decline is the availability
of increased options for slice federation when the number of
RPs has been increased. According to the results, it is obvious
that SNSB outperforms NSBChain by opening the competitive
slice brokering capability with better pricing options for the
consumers. The increased number of RPs can be anticipated
in future industrial use cases which leverage the connectivity
with local 5G operators.
F. Candidate Slice Success Rate of SNSB, [14] and [15]
Generally, the RPs deliver the network slice which corre-
sponds to the consumer resource request based on the condi-
tions including the resource availability of requested quantity
and pricing compliances. For example, in auction-based slice
brokering use cases, the RP does not trade if the minimum price
for the unit has not been proposed by any of the consumers. In
addition to that, in nonfederated slice scenarios, the RPs offer
the slice as a single commodity bundled with individual resource
unit availability quantities. If any of the resource parameters do
not comply with the demand quantity specified in the resource
request for that parameter, the offer is invalid as the proposed
slice will not be accepted by the consumer. In this experiment,
we have defined the success rate as the percentage of possible
candidate slice offers from the RPs’ offers to perform slice
selection. We have implemented [14] and [15] and input the
similar input of resource request and RP offers to three algo-
rithms, including SNSB. We randomly generated the number
of resource requests and available resource volumes. For the
evaluation of [14], which is based on the original algorithm
defined in [20], we programmatically generated the appropriate
ask\bid values on each resource request scenario. We calculated
the percentage of successful slice offers, which can be used as
a candidate set to perform a selection of the optimal slice.
Fig. 11 reflects the comparison results of the evaluation.
Fig. 11(a) indicates the success rate of three algorithms in
scaling the number of RPs (M) while maintaining the number
of resources (N) as a fixed value within the entire experiment.
According to the algorithm, NSBChain [15] and the work of
Afraz et al. [14] indicates a fluctuation in the success rate
when the number of RPs increased. When the number of RPs
increased, the number of single commodity type resource offers
getting increased and the candidate slices also increased in
parallel [15] and [14]. In contrast, the federate slice approach
of SNSB maintains a persistently higher success rate in lower
as well as higher RP scenarios. Furthermore, the valid candidate
single commodity type slices are filtered out further in [14] with
the noncompliance of ask\bid, which will eventually reduce
the number of valid candidates slice offers. This evaluation
simulates the widening of RPs beyond the MNOs toward local
5G operators.
Fig. 11(b) indicate the successful slice candidate percent-
ages of three algorithms when the number of resources(N) is
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
528 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023
Fig. 11. Success rate comparison results. (a) Success rate on scaling
up the number of resource providers. (b) Success rate on scaling up the
number of resources.
increased while maintaining the number of RPs (N) as a fixed
value. The experiment reflects a drastic drop of successful candi-
dates in [15] and [14]. The core reason for such an observation is
the limitations of delivering a single commodity slice that fulfils
all the demanding quantity requirements and compliance ask\bid
requirements in [14]. In contrast, the federated slice approach
of SNSB maintains a higher success rate in resource scaled up
scenarios.
From the results, the federated slice approach proposed in
SNSB outperforms the key related work [15] and [14] in terms
of successful candidate slice percentage. The key reason for the
distinguishing success rate of SNSB is the feasibility to compose
the slice with multiple RPs to deliver the consumer request.
V. DISCUSSION
A. Position of the Proposed Solution With the State of
Art
Table II summarizes the limitations of the state of the art and
featurewise comparison with key related works. We considered
the number of citations and implementation feasibility, technical
detail availability (pseudocode algorithms) as the selection cri-
teria. The resource requests verified against DoS attacks in the
proposal to ensure that the SNSB operation for the legitimate re-
source requests persists with malicious resource requests. From
the numerical result analysis, the proposed algorithms yield
optimum mean federated slice cost when compared with the
state of the art using the game theory-based selection algorithm.
In the success rate oriented experimental evaluations, SNSB
yields a higher success rate when compared with the state of
the art in both scenarios of scaling up the RPs (M) and scaling
up the resources (N). The higher success rate provides a broader
selection scope for the slice broker to extend the benefits toward
consumer with more competitiveness. Overall, the proposed
TABLE II
FEATURES COMPARISON WITH KEY RELATED WORKS
architecture outperforms the state of the art in featurewise and
numerical figures for different conditions.
B. Implementation Challenges and Limitations
We propose a blockchain-based solution that can be im-
plemented using either public or consortium blockchain. The
implementation challenges in the proposed architecture were
originally linked with the blockchain incorporation. Few signif-
icant implementation challenges are summarized as follows.
1) Block Mining Latency: This is one of the challenges, as
indicated in Fig. 8. The proposed architecture has to align with
the blockchain principles. Therefore, the transaction execution
latency includes sequential block mining latency. However, we
proposed to use a consortium blockchain, which provisions
the consortium members to adjust the block mining interval.
Providing powerful infrastructure as well as adjusting the block
mining interval to align with throughput reduces the impact of
block mining latency.
2) Computational Overhead: The block mining requires a
set of cryptographic operations to be performed in the trans-
action validation and the consensus process. The computations
in signature generation and verification incurs an overhead on
the fog computational infrastructure. For the data provenance of
the intermediary transactions in the slice brokering process, the
computational overhead requires to be accepted. Applying more
lightweight digital signature mechanisms reduce the computa-
tional overhead in digital signatures.
3) Ledger Storage Overhead: The ledger size expands with
the expansion of transactions. Each member node requires to
keep a copy of the ledger and the increasing ledger size incurs
a storage overhead to the computing infrastructure. A storage
recycling and purging mechanism will eliminate the ledger
expansion storage overhead.
VI. CONCLUSION
In this article, we presented the SNSB slice brokering
architecture to facilitate FaaS, considering a multioperator
multitenant scenario. SNSB is a blockchain-based distributed
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
HEWA et al.: BLOCKCHAIN-BASED NETWORK SLICE BROKER TO FACILITATE FACTORY AS A SERVICE 529
service that creates federated network slices using a slice selec-
tion algorithm and offers secure network slices adhering to the
predefined SSLAs. The slice selection algorithm is developed
as a Stackelberg game that takes updates from an RL algorithm.
The results of the RL algorithm’s performance in the simulated
network slicing scenario show that fog node agents and RP
agents can efficiently solve optimization problems to find the
optimal price and demand of the resource. Since the complexity
of the WoLF-PHC algorithm is low, the slice broker has good
scalability as the number of players increases. In SNSB, we
encoded the slice selection algorithm as smart contracts to enable
decentralized operational capability and ensured nonrepudia-
tion. The implementation and evaluation results proved that
SNSB outperforms state-of-the-art blockchain solutions in terms
of RP utilization, lower priced federated slice formulation, as
well as increased success rate for slice selection. We have also
pointed the limitations and challenges of proposed work. Finally,
we distinguished the advancement of our work in a featurewise
comparison which will ideally fit our work for future industrial
application scenarios.
The future work focuses to investigate the potential to erad-
icate the limitations identified. The storage scalability is one
of the features to be improved in the proposed architecture.
Moreover, the privacy of transaction data which also provides
verifiability in dispute resolution is a potential future work.
REFERENCES
[1] A. H. Sodhro, S. Pirbhulal, and V. H. C. De Albuquerque, “Artificial
intelligence-driven mechanism for edge computing-based industrial ap-
plications,” IEEE Trans. Ind. Informat., vol. 15, no. 7, pp. 4235–4243,
Jul. 2019.
[2] Y. Lu, X. Huang, K. Zhang, S. Maharjan, and Y. Zhang, “Low-latency
federated learning and blockchain for edge association in digital twin
empowered 6G networks,” IEEE Trans. Ind. Informat., vol. 17, no. 7,
pp. 5098–5107, Jul. 2020.
[3] K. Kaur, S. Guo, M. Chen, and D. Rawat, “Transfer learning for 5G-aided
industrial Internet of Things,” IEEE Trans. Ind. Informat., vol. 17, no. 10,
pp. 4235–4243, Oct. 2021.
[4] N. Kumar, S. Aggarwal, and P. Raj, The Blockchain Technology for Secure
and Smart Applications Across Industry Verticals. New York, NY, USA:
Academic Press, 2021.
[5] K. Samdanis, X. Costa-Perez, and V. Sciancalepore, “From network shar-
ing to multi-tenancy: The 5G network slice broker,” IEEE Commun. Mag.,
vol. 54, no. 7, pp. 32–39, Oct. 2016.
[6] H. Yao, T. Mai, J. Wang, Z. Ji, C. Jiang, and Y. Qian, “Resource trad-
ing in blockchain-based industrial Internet of Things,” IEEE Trans. Ind.
Informat., vol. 15, no. 6, pp. 3602–3609, Jun. 2019.
[7] C.-Y. Lee, K. M. Kavi, R. A. Paul, and M. Gomathisankaran, “Ontology
of secure service level agreement,” in Proc. IEEE 16th Int. Symp. High
Assurance Syst. Eng., 2015, pp. 166–172.
[8] “Katana slice manager,” Accessed: Dec. 28, 2021. [Online]. Available:
https://github.com/medianetlab/katana-slice-manager/wiki
[9] A. Chaer, K. Salah, C. Lima, P. P. Ray, and T. Sheltami, “Blockchain for
5G: Opportunities and Challenges,” in Proc. IEEE Globecom Workshops,
2019, pp. 1–6.
[10] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne, “Blockchain
for 5G and beyond networks: A state of the art survey,” J. Netw. Comput.
Appl., vol. 66, 2020, Art. no. 102693.
[11] J. Backman, S. Yrjölä, K. Valtanen, and O. Mämmelä, “Blockchain net-
work slice broker in 5G: Slice leasing in factory of the future use case,” in
Proc. Internet Things Bus. Models, Users, Netw., 2017, pp. 1–8.
[12] K. Valtanen, J. Backman, and S. Yrjölä, “Creating value through
blockchain powered resource configurations: Analysis of 5G network slice
Brokering case,” in Proc. IEEE Wireless Commun. Netw. Conf. Workshops,
2018, pp. 1–8.
[13] A. Boubendir et al., “Federation of cross-domain edge resources: A
Brokering architecture for network slicing,” in Proc. 4th IEEE Conf. Netw.
Softwarization Workshops, 2018, pp. 415–423.
[14] N. Afraz and M. Ruffini, “5G network slice brokering: A distributed
blockchain-based market,” in Proc. Eur. Conf. Netw. Commun., 2020,
pp. 23–27.
[15] L. Zanzi, A. Albanese, V. Sciancalepore, and X. Costa-Pérez, “NSBchain:
A secure blockchain framework for network slicing brokerage,” 2020,
arXiv:2003.07748.
[16] B. Nour, A. Ksentini, N. Herbaut, P. A. Frangoudis, and H. Moungla, “A
blockchain-based network slice broker for 5G services,” IEEE Netw. Lett.,
vol. 1, no. 3, pp. 99–102, Sep. 2019.
[17] K. Antevski and C. J. Bernardos, “Federation of 5G services using dis-
tributed ledger technologies,” Internet Technol. Lett., vol. 3, no. 6, 2020,
Art. no. e193.
[18] L. Busoniu, R. Babuska, and B. De Schutter, “A comprehensive survey
of multiagent reinforcement learning,” IEEE Trans. Syst., Man, Cybern.,
Part C. (Appl. Rev.), vol. 38, no. 2, pp. 156–172, Mar. 2008.
[19] K.-S. Hwang, C.-J. Lin, C.-J. Wu, and C.-Y. Lo, “Cooperation between
multiple agents based on partially sharing policy,” in Proc. Int. Conf. Intell.
Comput., vol. 4681, 2007 pp. 422–432.
[20] N. Afraz and M. Ruffini, “A sharing platform for multi-tenant PONs,” J.
Lightw. Technol., vol. 36, no. 23, pp. 5413–5423, 2018.
Tharaka Hewa (Student Member, IEEE) re-
ceived the bachelor’s degree in computer sci-
ence and the M.S. degree in information secu-
rity from the School of Computing, University
of Colombo, Colombo, Sri Lanka, in 2012 and
2016, respectively. He is currenlty working to-
ward the doctoral degree with the NetSEC (Net-
work security, trust and privacy) research group,
Center for Wireless Communications, University
of Oulu, Oulu, Finland.
He was a Senior Software Engineer with a
leading digital payment systems company in Sri Lanka for five years.
He joined Nanyang Technological University, Singapore, as a Research
Associate, in 2017. After two years, he joined the Center for Wire-
less Communications, University of Oulu. His research interests include
Blockchain, Industrial internet of things, and 5G network slicing.
Pawani Porambage (Member, IEEE) received
the B.Sc. degree in electronics and telecom-
munication engineering from the University of
Moratuwa, Moratuwa, Sri Lanka, in 2010, the
M.Sc. degree in ubiquitous networking and com-
puter networking from the University of Nice
Sophia-Anipolis, Nice, France, in 2012, and the
Doctor of Technology degree in communication
engineering from University of Oulu, Finland, in
2018.
She is a Researcher and an Adjunct Profes-
sor with the Centre for Wireless Communications, University of Oulu.
She has over ten years of experience in network security domain and
coauthored more than 50 publications. Her research interests include
network slicing, blockchain, lightweight security protocols, security and
privacy on Internet of Things, and AI/ML for security and privacy.
Ivana Kovacevic (Student Member, IEEE) re-
ceived the bachelor’s degree in electronics and
telecommunication engineering from the Univer-
sity of Belgrade, Belgrade, Serbia, in 2012, and
the M.Sc. degree in communications engineer-
ing, in 2015, from the University of Oulu, Fin-
land, where she is currently working toward the
the Ph.D. degree in wireless networks with the
Centre for Wireless Communications.
Since 2021, she is working with Nokia. Her re-
search interests include network slicing, lowla-
tency communications, radio resource management, edge computing,
network optimization theory, game theory, and machine learning.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
https://github.com/medianetlab/katana-slice-manager/wiki
530 IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, VOL. 19, NO. 1, JANUARY 2023
Nisita Weerasinghe (Student Member, IEEE)
received the B.Sc. degree in electrical and elec-
tronic engineering from the Sri Lanka Institute
of Information Technology, Malabe, Sri Lanka, in
2018, and the M.S. degree in wireless communi-
cations engineering in 2020 from the University
of Oulu, Finland, where he is currently working
toward the doctoral degree with NetSEC (Net-
work security, trust and privacy) research group,
Center for Wireless Communications.
She has over two-year research experience in
CWC, University of Oulu in the area of Blockchain, Local 5G networks
and network security. Her research interests include blockchain, 5G,
local 5G operators, network security, and network slicing.
Erkki Harjula (Member, IEEE) received the
M.Sc. and D.Sc. degrees from the University
of Oulu, Oulu, Finland, in 2007 and 2016,
respectively.
He is currently an Assistant Professor
(tenure track) with the Centre for Wire-
less Communications– Networks and Systems
(CWC-NS) Research Group, University of Oulu.
He has also long experience as a research
project Manager. He has background in the in-
terface between computer science and wireless
communications, such as mobile and the Internet of Things (IoT) net-
works, distributed networks, cloud and edge computing, and green com-
puting. His research interests include wireless system level architectures
for future digital healthcare, where his key research topics are wrapped
around intelligent trustworthy distributed IoT and edge computing.
Madhusanka Liyanage (Senior Member, IEEE)
received the doctor of technology degree in
communication engineering from the University
of Oulu, Oulu, Finland, in 2016.
He is currently an Assistant Professor/Ad As-
tra Fellow and Director of Graduate Research
with the School of Computer Science, Univer-
sity College Dublin, Dublin, Ireland. He is also
acting as a Docent/Adjunct Professor with the
Center for Wireless Communications, University
of Oulu, and a Honorary Adjunct Professor with
the Department of Electrical and Information Engineering, University of
Ruhuna, Matara, Sri Lanka. His research interests include 5G/6G, SDN,
Internet of Technology, Blockchain, MEC, mobile, and virtual network
security.
Dr. Liyanage was the recipient of the prestigious Marie Skłodowska-
Curie Actions Individual Fellowship and Government of Ireland Postdoc-
toral Fellowship, during 2018–2020, the “2020 IEEE ComSoc Outstand-
ing Young Researcher” award by IEEE ComSoc EMEA, in 2020. In 2021,
he was ranked among the World’s Top 2the List prepared by Elsevier BV,
Stanford University, USA. He was also the recipient of the Irish Research
Council (IRC) Research Ally Prize as part of the IRC Researcher of the
Year 2021 awards for the positive impact he has made as a supervisor.
Mika Ylianttila (Senior Member, IEEE) received
the M.Sc., Dr.Sc., and eMBA degrees.
He is currently a Full-Time Associate Profes-
sor (tenure track) with the Centre for Wireless
Communications–Networks and Systems re-
search unit, at the Faculty of Information Tech-
nology and Electrical Engineering, University
of Oulu, Oulu, Finland. He is the Head of the
Network Security, Trust and Privacy (NetSEC)
research group which studies and develops se-
cure, scalable and resource-efficient techniques
for 5G and beyond 5G and IoT systems. He has coauthored more than
200 international peer-reviewed articles.
Dr. Ylianttila is an Associate Editor for IEEE TRANSACTIONS ON INFOR-
MATION FORENSICS AND SECURITY.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 09:00:24 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles true
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /sRGB
  /DoThumbnails true
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo true
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts true
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Algerian
    /Arial-Black
    /Arial-BlackItalic
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BaskOldFace
    /Batang
    /Bauhaus93
    /BellMT
    /BellMTBold
    /BellMTItalic
    /BerlinSansFB-Bold
    /BerlinSansFBDemi-Bold
    /BerlinSansFB-Reg
    /BernardMT-Condensed
    /BodoniMTPosterCompressed
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /BritannicBold
    /Broadway
    /BrushScriptMT
    /CalifornianFB-Bold
    /CalifornianFB-Italic
    /CalifornianFB-Reg
    /Centaur
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /Chiller-Regular
    /ColonnaMT
    /ComicSansMS
    /ComicSansMS-Bold
    /CooperBlack
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FootlightMTLight
    /FreestyleScript-Regular
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /HarlowSolid
    /Harrington
    /HighTowerText-Italic
    /HighTowerText-Reg
    /Impact
    /InformalRoman-Regular
    /Jokerman-Regular
    /JuiceITC-Regular
    /KristenITC-Regular
    /KuenstlerScript-Black
    /KuenstlerScript-Medium
    /KuenstlerScript-TwoBold
    /KunstlerScript
    /LatinWide
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaBright
    /LucidaBright-Demi
    /LucidaBright-DemiItalic
    /LucidaBright-Italic
    /LucidaCalligraphy-Italic
    /LucidaConsole
    /LucidaFax
    /LucidaFax-Demi
    /LucidaFax-DemiItalic
    /LucidaFax-Italic
    /LucidaHandwriting-Italic
    /LucidaSansUnicode
    /Magneto-Bold
    /MaturaMTScriptCapitals
    /MediciScriptLTStd
    /MicrosoftSansSerif
    /Mistral
    /Modern-Regular
    /MonotypeCorsiva
    /MS-Mincho
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /NiagaraEngraved-Reg
    /NiagaraSolid-Reg
    /NuptialScript
    /OldEnglishTextMT
    /Onyx
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Parchment-Regular
    /Playbill
    /PMingLiU
    /PoorRichard-Regular
    /Ravie
    /ShowcardGothic-Reg
    /SimSun
    /SnapITC-Regular
    /Stencil
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /TempusSansITC
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanMTStd
    /TimesNewRomanMTStd-Bold
    /TimesNewRomanMTStd-BoldCond
    /TimesNewRomanMTStd-BoldIt
    /TimesNewRomanMTStd-Cond
    /TimesNewRomanMTStd-CondIt
    /TimesNewRomanMTStd-Italic
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /VinerHandITC
    /Vivaldii
    /VladimirScript
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryStd-Demi
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 150
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Bicubic
  /ColorImageResolution 900
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.00111
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages true
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 150
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Bicubic
  /GrayImageResolution 1200
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.00083
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages true
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.40
    /HSamples [1 1 1 1] /VSamples [1 1 1 1]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 1200
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 1600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.00063
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Suggested"  settings for PDF Specification 4.0)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice