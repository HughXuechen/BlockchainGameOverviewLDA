QoSChain: Provisioning Inter-AS QoS in Software-Defined Networks With Blockchain
1706 IEEE TRANSACTIONS ON NETWORK AND SERVICE MANAGEMENT, VOL. 18, NO. 2, JUNE 2021
QoSChain: Provisioning Inter-AS QoS in
Software-Defined Networks With Blockchain
Murat Karakus , Member, IEEE, Evrim Guler , and Suleyman Uludag , Member, IEEE
Abstract—Data flows of various applications, such as video
conferencing, telesurgery, online-gaming, etc., require particular
treatment regarding Quality of Service (QoS) because of their
sensitivity to such parameters as high bandwidth, low delay,
and so on. However, provisioning of QoS-based routing services
across Autonomous Systems (ASes) poses gruelling challenges
due to the distributed nature and business confidentially hesita-
tions. This study presents a novel blockchain-aided QoS-enabled
inter-AS routing framework, QoSChain (QC), by blending merits
of Software-Defined Networking (SDN) and Blockchain tech-
nologies. QC framework introduces a coordination framework
with mutually distrusting participants that eliminates central-
ized mediators in provisioning QoS among SDN-enabled ASes.
Also, QC reduces the time to set up an end-to-end (E2E) path
and the number of messages exchanged and processed by SDN
controllers for a QoS flow. Furthermore, it alleviates the concerns
of network operators regarding potentially sensitive information
disclosure resulting from the required information sharing for
QoS-based cross-AS paths by masking details of any confiden-
tial information. Experimental results verify the feasibility of
the proposed framework on E2E QoS-based routing among SDN
networks. This work aims at being a useful primer for researchers
in providing insights on how blockchain can be deployed in
QoS-enabled routing.
Index Terms—Software-defined networking, blockchain, SDN,
routing, QoS, inter-domain routing, inter autonomous systems.
I. INTRODUCTION
THE METEORIC rise in global Internet traffic is fueled by
diverse applications, such as video-conferencing, Video-
on-Demand (VoD), Voice-over-IP (VoIP), online gaming, etc.
with different rigid requirements, such as high bandwidth, low
delay, and so on. Providing these operational thresholds is typ-
ically referred to as Quality-of-Service (QoS ) as an umbrella
term. The primary goal of QoS is to provide prioritization
regarding certain characteristics including, but not limited to,
bandwidth, delay, jitter, and so on for network traffic.
Manuscript received June 14, 2020; revised October 29, 2020; accepted
December 16, 2020. Date of publication February 18, 2021; date of cur-
rent version June 10, 2021. This work is supported by the Scientific
and Technological Research Council of Turkey (TUBITAK) under Grant
No. 120E448. The associate editor coordinating the review of this article
and approving it for publication was A. Veneris. (Corresponding author:
Murat Karakus.)
Murat Karakus is with the Department of Computer Technologies, Bayburt
University, 69000 Bayburt, Turkey (e-mail: muratkarakus@bayburt.edu.tr).
Evrim Guler is with the Department of Computer Engineering, Bartin
University, 74110 Bartin, Turkey (e-mail: evrimguler@bartin.edu.tr).
Suleyman Uludag is with the Department of Computer Science,
Engineering, and Physics, University of Michigan-Flint, Flint, MI 48502 USA
(e-mail: uludag@umich.edu).
Digital Object Identifier 10.1109/TNSM.2021.3060476
While intra-AS QoS routing problem is important, support-
ing QoS at inter-AS level is arguably more crucial yet more
daunting for network administrators owing to the volume and
velocity of the Internet traffic spanning over multiple ASes [1]
under strict business confidentiality constraints. The provision-
ing of QoS-enabled inter-AS routing today primarily suffers
from the following problems:
• Multiple AS Hop Issue: Networks can guarantee QoS-
enabled routing only through their first-hop neighbor
domains through Service Level Agreements (SLAs) and
the direct connections.
• Information Sharing Issues: An agile and scalable
communication framework for inter-AS routing needs
information sharing among the ASes at some level.
However, sharing such a detailed information imposes
certain issues as well: (1) Reluctance for Information
Sharing: Network operators are hesitant to share details
(bandwidth, delay, etc.) about their networks with others
to preserve the confidentiality of sensitive information.
(2) QoS Signaling Overhead: Inter-AS communication
for QoS-based routing inflicts a large message exchange
overhead considering flow request frequency for both
network-originated and transit flows.
As the aforementioned problems have pointed out, uniform
and consistent implementation of E2E QoS requirements may
not be assured across domains. However, inter-AS communi-
cation is mandatory for a successful E2E QoS provisioning.
Therefore, an agile, reliable, secure, and adaptive coordina-
tion mechanism is necessary to mitigate the above-mentioned
problems of QoS-based inter-AS routing.
A. Software Defined Networking (SDN) and Blockchain for
Inter-AS QoS Routing
This subsection discusses the motivation for Software
Defined Networking (SDN) and Blockchain (BC) technolo-
gies to provide a feasible solution to the inter-AS QoS-based
routing.
SDN is an emerging architecture in which the control and
data planes are decoupled, network intelligence and state are
logically centralized, and the underlying network infrastruc-
ture is abstracted from the applications. With SDN architec-
ture, per-flow routing becomes viable through more scalable,
simpler and less time-consuming mechanisms compared to
traditional architectures [3]. OpenFlow enables network oper-
ators to use various routing algorithms (rather than the typical
shortest path) within the controller to generate forwarding
tables that govern different isolated flows in the data plane.
1932-4537 c© 2021 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
See https://www.ieee.org/publications/rights/index.html for more information.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
https://orcid.org/0000-0002-8893-7345
https://orcid.org/0000-0002-7226-4748
https://orcid.org/0000-0002-7207-6683
KARAKUS et al.: QoSChain: PROVISIONING INTER-AS QoS IN SOFTWARE-DEFINED NETWORKS WITH BLOCKCHAIN 1707
Also, dynamic routing of flows becomes feasible by controllers
due to the decoupling of control and forwarding functions of
devices. These abilities, both per-flow and dynamic routing,
allow network administrators to come up with more QoS-
enabled routing mechanisms for their networks. Moreover,
SDN allows network managers to monitor network dynamics
and collect up-to-date global network state statistics through
counters at very low levels such as per-flow rule, per-packet,
per-port, per-table, per-queue, and per-meter bases.
BC [4] can offer effective capabilities to enhance QoS-based
routing experiences of network operators at inter-AS level.
BC brings a distributed environment to manage transactions
through consensus protocols. Thanks to the distributed envi-
ronments and the decentralization feature that BC provides,
it can help ASes overcome their hesitations with regards to
security and privacy resulting from the necessity to share pro-
prietary information with third-parties in centralized structures
such as Broker concept and SDX project in SDN networks [3],
and provide QoS for inter-AS routing in a distributed man-
ner without any dependency on an external entity. Also, with
BC’s transparency, all participants in the BC are able to obtain,
confirm, and monitor transaction activities over the network.
Such functionality can help BC-enabled frameworks in col-
laborative network environments so that service and resource
providers can track down and screen transactions to read QoS-
related data while setting up an E2E path for a service flow.
Furthermore, BC’s tamper-proof feature may also be beneficial
to ensure the integrity of QoS-related data and reconcile dis-
agreements among ASes in case of conflicts across large-scale
distrusting environments by utilizing unalterable transaction
ledgers.
B. Contributions
This study introduces a novel BC-employed QoS-enabled
inter-AS routing framework, QoSChain (QC ), by integrating
the BC technology in SDN networks. The main contribu-
tions of this work can be stated in five-fold as follows: First,
this study introduces a coordination framework that brings
together parties with conflicts of interest regarding SLAs,
security and privacy risks, and so on for inter-AS QoS-based
routing. Second, this study eliminates the need for centralized
third-party entities in QoS-supported inter-AS routing models
by exploiting BC’s decentralized feature. Third, this frame-
work requires less QoS signaling messages to setup a path due
to the nature of the proposed architecture as explained later.
Furthermore, the framework helps mitigate the privacy/security
concerns of ASes when cooperating for inter-AS routing by
masking details of pathlets from other networks. Finally, QC
framework also presents a new use case, thereby, potential
research directions for researchers from both academia and
industry in which the BC can be exploited to provide QoS for
inter-AS routing in SDN networks.
To the best of our knowledge, this is the first comprehen-
sive study exploiting the merits of BC to establish a novel
coordination framework for QoS-enabled inter-AS routing in
SDN networks. This work aims at being a useful primer for
researchers to provide insights on how BC can be exploited
in QoS-oriented routing applications in networking.
Fig. 1. Overview of an SDN architecture with its main planes: Data plane,
control plane, and application plane.
This paper’s organization is as follows: In Section II, SDN
and BC are lightly explained to make this paper self-inclusive.
Section III presents routing/QoS-related similar studies in
SDN and BC. A network model to apply the proposed routing
framework is presented in Section IV. Section V introduces the
design of QC framework along with the basic terms, processes,
and functionalities. Section VI provides the experiment results
before the concluding remarks in Section VIII.
II. OVERVIEW OF SDN AND BLOCKCHAIN
As shown in Fig. 1, Open Networking Foundation (ONF)
vertically splits SDN architecture into three main planes [5].
Data Plane: The bottom-most is the data plane, consisting
of network devices such as routers, physical/virtual switches,
access points etc. These devices are accessible and managed
through Controller-Data Plane Interfaces (C-DPIs), such as
OpenFlow protocol [6], by SDN controller(s).
Control Plane: An SDN control plane comprises a set of
software-based SDN controller(s) to provide control function-
ality in order to supervise the network forwarding behavior
through C-DPI. It has interfaces to enable communication
among controllers in a control plane (Intermediate-Controller
Plane Interface, i.e., I-CPI [7], optionally secured using the
TLS), between controllers and network devices (C-DPI),
and also between controllers and applications (Application-
Controller Plane Interface, i.e., A-CPI).
Application Plane: An SDN application plane consists of
one or more end-user applications (security, visualization etc.)
that interact with controller(s) to utilize an abstract view
of the network for their internal decision making process.
These applications communicate with controller(s) via an open
A-CPI (e.g., REST API). An SDN application comprises an
SDN App Logic and A-CPI Driver.
BC provides a decentralized structure to maintain a dis-
tributed database by participants without a pre-established or
assumed trust relationship and with no centralized trusted third
party. Each process, called a transaction, is written into the
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
1708 IEEE TRANSACTIONS ON NETWORK AND SERVICE MANAGEMENT, VOL. 18, NO. 2, JUNE 2021
Fig. 2. Representation of block data structure in BC.
blocks and added to the chain in order to create the gen-
eral BC structure. Fig. 2 shows a general data structure of
a block in a BC. The structure of a block mainly consists
of a block header including various data to define the block
and a block body containing the list and number of transac-
tions within the block. The structure may change depending on
the BC use cases and consensus protocols. The block header
contains various fields, such as the version or identification
number, the encrypted value of the transactions in the Merkle
tree structure, a timestamp, a difficulty variable, a varying
variable in each computation, and the hashed value of the
previous/parent block [4]. Users on the network have a private
key and a public key to perform transactions. Authentication of
users’ access within the network is provided by private keys.
Each user checks the transactions published on the BC and
does not accept blocks that contain invalid transactions. The
hashed value of the previous block is also checked. In this way,
all blocks created up to the first block, called Genesis block,
are verified. None of the participants in the system can mod-
ify previous blocks by manipulating the data in their network.
This provides the BC a tamper-proof structure.
III. RELATED WORK
There are many studies introducing applications of BC
technology in the literature. BC is exploited in various use
cases such as finance, IoT, edge computing, agriculture, supply
chains, energy markets, and healthcare systems.
There are research efforts considering BC in their rout-
ing or QoS frameworks in [8]–[13]. However, these studies
do not propose any QoS-based routing framework for SDN
ASes. The work presented in [14] is close to our proposal
in a way that it provides latency aware routing among SDN-
based ASes. The proposed architecture periodically measures
bilateral Round-Trip-Times (RTT) between each pair of con-
nected ASes and stores them in a distributed decentralized BC
network where each AS holds its share. However, QC differs
from their work in the way that we consider bandwidth as
QoS parameter in addition to delay parameter. Also, while
they consider only delay among ASes at coarse AS-level, QC
exploits delay among edge nodes inside ASes in a finer gran-
ularity. This yields more accuracy regarding QoS constraints
of a service request while establishing an E2E path.
Routing as a use case of BC technology is not well-studied
while there is no BC-enabled multi-QoS-based inter-AS rout-
ing in SDN space in the literature yet. In this sense, to the
best of our knowledge, this work, the journal version of our
preliminary conference paper [15], is the first attempt in the
literature by presenting a comprehensive framework serving
inter-AS traffic in SDN networks using a novel BC technology
Fig. 3. Illustration of SDN AS networks model and its abstracted overlay
network.
to ensure a distributed coordination mechanism with reduced
computational and communications overhead.
IV. SYSTEM MODEL
A. Inter-AS QoS-Based Path Problem (IA-QbP)
Given a set of ASes with Ni (Vi ,Ei ) network topologies
as depicted in Fig. 3(a), let Vi , Ei , and ∗Vi denote the sets
of all nodes, links, and border nodes, respectively, in network
Ni where ∗Vi ⊆ Vi (1 ≤ i ≤ n), let N(V, E) denote an
overlay network topology abstracted from the ASes Ni , as rep-
resented in Fig. 3(b), where V =
⋃n
i=1
∗Vi and E are the set
of all border nodes of the ASes and (logical) links among the
those border nodes, respectively. Assume the number of QoS
constraints (e.g., delay, bandwidth, etc.) is denoted by m and
each link has an m-dimensional link weight vector, consist-
ing of m non-negative QoS weights (wi (u, v), i = 1, . . . ,m
where u, v ∈ V , (u, v) ∈ E ) as components. An inter-AS
QoS-based path problem (IA-QbP) can be expressed as a
(multi) constrained path problem as follows:
Definition 1 Inter-AS QoS-Based Path Problem (IA-QbP):
Consider a network N(V, E) abstracted from networks
Ni (Vi ,Ei ). Each link (u, v) ∈ E is specified by a link weight
vector of m additive QoS weights wi (u, v) ≥ 0, i = 1, . . . ,m .
Given m constraints Li , i = 1, . . . ,m , the problem is to
find a path P from a source node s to a destination node
d (where s ∈ ∗Vi , d ∈ ∗Vj and ∗Vi �= ∗Vj ) such that
wi (P)
def
=
∑
(u,v)∈P wi (u, v) ≤ Li for i = 1, . . . ,m .
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
KARAKUS et al.: QoSChain: PROVISIONING INTER-AS QoS IN SOFTWARE-DEFINED NETWORKS WITH BLOCKCHAIN 1709
Fig. 4. Overview of an BC-adapted SDN controller with new controller
modules and network applications shown in blocks with green color in white
text.
A path satisfying all m constraints is referred to as a (QoS-
based) feasible path. There may be multiple paths in the graph
N(V, E) satisfying the constraints. According to Definition 1,
any of these paths is a solution to the IA-QbP problem.
B. Autonomous Systems (ASes)
An AS links geographically dispersed communication
devices and networks whose IP prefixes are assigned to an
Internet Service Provider (ISP). Each AS is given a unique
Autonomous System Number (ASN) by the Internet Assigned
Numbers Authority (IANA).
In QC framework, there is a private BC network among
the AS controllers (i.e., BC nodes) to maintain transactions
and blocks reflecting network states. ASes do not necessarily
(physically) connect to all other networks. Fig. 3(a) exempli-
fies a network model consisting of 4 SDN ASes controlled
by controllers. Network devices are either a border node (i.e.,
brown cylindrical objects) connecting to another border node
in a different AS through an inter-AS link or a core network
device (i.e., blue hexagonal objects) without an inter-AS link.
Black dashed lines show the control paths (links) between con-
trollers and network devices. Blue dashed lines represent the
logical links among controllers in the BC network.
C. Blockchain-Adapted SDN Controller
AS controllers represent the nodes participating in the BC.
We have extended our SDN controller with new controller
modules and network applications on the top, adapted for
BC capabilities in the QC framework. Controller modules
implement networking functions that are of common use to
a majority of applications such as discovering and exposing
network states events (topology, devices, flows, etc.), enabling
controller communication with network devices, collecting
network resources-related statistics and so on.
As Fig. 4 depicts the modules of our SDN controller
with new and existing modules, whose relationships are sum-
marized as follows: The main BC-enabler module is the
Blockchain Manager (BM) and its sub-components. This
module conducts all BC-related functions in an AS controller.
The Validator Agent is responsible for validating incoming
Fig. 5. Pathlets between network devices R5 and R7 in AS2 network.
blocks from the other controllers based on the block validation
rules in the context of BC. The Hashing Agent is responsi-
ble for hashing transactions and blocks to be sent to the BC
network. While the Transaction Agent creates transactions, the
Block Agent is responsible for block formation in the con-
troller depending on the BC use case and consensus protocol.
The Consensus Protocol Handler implements the consensus
algorithm (Clique algorithm explained below) to achieve
agreement on agreed transactions and blocks. The Resource
Monitoring Manager (RMM) continuously monitors network
resources such as bandwidth, delay, jitter, etc. In case of any
changes, it notifies the BM module (i.e., Transaction Agent)
to create the corresponding transaction(s).
The controller architecture has also new applications.
Regarding routing application, the Global Routing Agent
(GRA) implements the inter-AS routing functionality when
an inter-AS service request comes to the controller. This agent
takes the ingress and egress fields of new transactions in the
BC ledger as input parameters to find an E2E path for the
incoming service request and invokes Blockchain Application
(BA). BA is also responsible for sending/receiving blocks
to/from the BC network and handling service/pathlet requests
in coordination with the BM.
D. Pathlet
In this study, we define a pathlet as a distinct path between
network border node pairs (entering/exiting nodes) in an AS.
The endpoints of a pathlet are called ingress and egress nodes.
Definition 2 Pathlet: Given an AS network, Ni , with
a topology represented as Ni (Vi ,Ei ), a path P =<
v1
i , . . . , v t
i > is called a pathlet if (∀v j
i in P) ∈ Vi and
v1
i , v t
i ∈ ∗Vi , and an edge e l
i from v j
i to v j+1
i , (∀v j
i , v j+1
i ∈
P ,∀e l
i ∈ Ei ).
For example, as shown in Fig. 5, paths, shown in blue
lines with arrows, R5-R7, R5-R8-R7, and R5-R6-R8-R7
(assuming links are bidirectional) are pathlets between border
nodes R5 and R7 in AS2 according to Definition 2. Distinct
pathlets for all border node pairs are computed by AS controllers
for their networks. As explained later, transactions are created
from pathlets along with their QoS values by BC nodes.
E. Service Request
Routing is one of the functions implemented in networks to
provide intra- and inter-domain connectivity. In this regard, in
QC framework, a service request refers to the provisioning of
connectivity with certain QoS parameters, e.g., bandwidth and
delay, between users (hosts) in the same or different networks.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
1710 IEEE TRANSACTIONS ON NETWORK AND SERVICE MANAGEMENT, VOL. 18, NO. 2, JUNE 2021
Fig. 6 exhibits the data structures of Service Request
(S_Req), Pathlet Request (P_Req), Pathlet Response (P_Res),
and Service Response (S_Res) messages in QC framework.
Fig. 6(a) shows the data fields of an S_Req message:
• Type: This field indicates whether the message is an
S_Req, a P_Req, a P_Res or an S_Res message.
• Service ID: A persistent service identifier.
• Nonce: Random number appended to the Service
ID to logically form a unique Service Request ID.
• Source IP and Destination IP: IP addresses of
the source and destination hosts for the service.
• Bandwidth and Delay: The requested bandwidth and
delay values over the E2E path for the service.
• Bandwidth_Max, Delay_Min, and Hop_Min:
These parameters indicate the path preference order in
case of multiple feasible paths, respectively.
The S_Req message is created at a user computer by a
respective application and sent to the source-AS controller.
Fig. 6(b) shows the data fields of a P_Req message:
• Pathlet Request ID: A pathlet request identifier.
• Nonce: Random number appended to the Pathlet
Request ID to form a unique Pathlet Request ID.
• Pathlet ID: The unique ID of the pathlet requested
from an AS controller for the service.
• Ingress Node and Egress Node: The start and
end nodes of the pathlet requested from an AS.
• AS Number: Unique Autonomous System number of
the AS that the pathlet is requested from.
• Source IP and Destination IP: IP addresses of
the source and destination hosts for the service.
• Bandwidth and Delay: The requested bandwidth and
delay values of the pathlet for the service.
The P_Req messages are created at the source-AS controller
by the BA module and sent to the AS controllers over the final
E2E path selected for the service.
Fig. 6(c) shows the data fields of a P_Res message:
• Pathlet Response ID: A pathlet response identi-
fier.
• Nonce: Random number appended to the Pathlet
Response ID to form a unique Pathlet Response ID.
• Pathlet_Request ID: Combination of the
Pathlet Request ID and Nonce fields of the
P_Req message.
• Pathlet ID: The unique ID of pathlet requested from
the AS controller for the service.
• AS Number: Unique Autonomous System Number of
the AS that the pathlet is requested from.
• Response: The decision (ACCEPT or REJECT) of the
AS controller on providing the requested pathlet.
The P_Res messages are created by the BA module at all
AS controllers over the final E2E path selected for the service
and sent back to the source-AS controller.
Fig. 6(d) shows the data fields of an S_Res message:
• Service Response ID: A service response identi-
fier.
• Nonce: Random number appended to the Service
Response ID to form a unique Service Response ID.
Fig. 6. Message data structures in QC framework.
• Service_Request ID: The combination of the
Service ID and Nonce fields of the S_Req message.
• Response: The decision (ACCEPT or REJECT) by
source-AS controller on providing the requested service
after evaluating the incoming P_Res messages.
The S_Res message is created by the BA module at the source-
AS controller for the service and sent to the user.
V. BC-ENABLED QOS-BASED INTER-AS ROUTING
FRAMEWORK: QoSChain
In this section, we describe and present the design of QC
framework along with the basic terms, processes, and function-
alities used to perform BC and networking operations in the
proposed framework throughout the paper. Also, the underly-
ing design angles of the proposed framework in Section V-B,
the consensus protocol used in the framework in Section V-C,
and workflow of the framework in Section V-D are presented,
respectively.
A. Blockchain Model
We present the BC-related operations and entities to explain
the BC model utilized by AS controllers in this subsection.
Blockchain Nodes: In QC framework, each BC node cor-
responds to an AS controller and runs its own BC instance.
Therefore, we will use a BC node and AS controller inter-
changeably. A BC node has an IP address for reachability and
a pair of public and private keys for cryptographic operations.
Peering: AS controllers exchange their public keys to form a
peering relationships. They bind the public keys with BC node
identifiers, which are Autonomous System Number (ASN),
in order to distinguish the BC nodes. BC nodes broadcast
their public keys along with their digitally signed networking
information, such as IP, ASN, list of border nodes, etc., and
request the same data from other nodes.
Transaction: A transaction is a single operation of data
transfer on a BC network or a record of such transaction in
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
KARAKUS et al.: QoSChain: PROVISIONING INTER-AS QoS IN SOFTWARE-DEFINED NETWORKS WITH BLOCKCHAIN 1711
Fig. 7. Transaction data structure of pathlets in QC framework.
TABLE I
EXAMPLE SET OF TRANSACTIONS BY AS2 CONTROLLER FOR PATHLETS
BETWEEN R5 AND R7 IN AS2 FROM FIG. 3(A)
the BC. Transactions update the state recorded on a BC. They
can contain various data depending on the use cases.
In QC framework, transactions are created from pathlets
along with their QoS values by BC nodes. Hence, distinct path-
lets of all border node pairs are computed by AS controllers
for their networks. Fig. 7 shows the data structure of a trans-
action generated by an AS controller in the QC framework. A
transaction includes:
• Tx ID: Unique ID of the transaction.
• Signature: The digital signature of the transaction.
• ASN: Unique Autonomous System Number of the AS.
• Pathlet ID: Unique ID of a distinct pathlet in an AS.
• Ingress Node and Egress Node: The start and
end nodes of a pathlet in an AS.
• Max Bandwidth: The max bandwidth available in a
pathlet in an AS.
• Min Delay: The min delay in a pathlet in an AS.
In QC framework, nodes validate a transaction using a set
of rules. These rules confirm that (i) the transaction is digitally
signed, (ii) none of the fields in the transaction data structure
is empty, (iii) a pathlet’s QoS-related fields of a transaction
are positive values in the transaction data structure, (iv) a valid
ASN is available in the ASN field of the transaction data struc-
ture, and (v) ingress and egress node IDs in the transaction
belong to the AS creating the transaction.
Table I presents an example set of transactions created by
AS2 controller for pathlets between R5 and R7 border devices
in AS2 network shown in Fig. 3(a). Transactions for the other
border devices pairs such as R5 - R8 and R7 - R8 are also
created and propagated in the BC network in the same way.
When an AS joins the BC network, it starts creating ini-
tial transactions (AS2_1, AS2_2, and AS2_3 for pathlets
R5-R7, R5-R8-R7, R5-R6-R8-R7, respectively) for the
pathlets among the border network devices. They are then
propagated to the network or respective BC nodes. Once there
is a QoS-related state change in the network, e.g., bandwidth
update in a link, which affects the state of some pathlets, then
the controller creates update (new) transactions (AS2_4 and
AS2_5 for AS2_2 and AS2_3, respectively, assuming band-
width increased by 15 Mbps in link between R7 and R8)
reflecting the state change on the respective pathlets. The trans-
action with AS_6 ID is created for the inter-connecting link
TABLE II
DESIGN ASPECTS ADOPTED IN QC FRAMEWORK
from R5 to R4 in AS2 and AS1, respectively. Full network
device list over a pathlet is only known by the controller
created the corresponding transaction (AS2 controller in this
case). If a pathlet has more than one transaction in controller’s
BC ledger, then the controller will exploit the most recent one
of them while computing an E2E path for a service request.
Block: A block contains transactions batched into a partic-
ular data structure by a verifying node after validation of their
structures and signatures. A block includes a hash pointer as
an interface to the former block, which is one of the measures
that guarantee the cryptographic security of the BC.
In QC, the primary node of the current block proposal epoch
creates the new block. The primary role is transferred from the
list of nodes at each epoch to the next node. A new block is
created by the primary node following the procedures below:
• All new transactions are gathered from its transaction
pool.
• Transactions are reviewed according to the transaction
validation rules. The invalid transactions are rejected.
• The primary node monitors the conformance to block
generation limits, such as time limits, if available.
• A block is generated including the valid transactions and
signed using the primary node’s private key.
• The new block is propagated to the other nodes in the
BC.
If a continues to generate invalid blocks, it can be banned
or excluded from the list of peering nodes. However, this
mechanism is out of scope in this work.
B. BC-Driven Design Aspects of QC Framework
This subsection explains the BC-driven design principles,
aligned with the AS needs and adopted in QC framework and
realized by means of Clique, along with their advantages in
QoS-based inter-AS routing as shown in Table II.
P1. Short block generation time: Rapid reflection of pathlet
state updates (so as to let the other nodes use them quickly)
is crucial while setting up an accurate and reliable QoS-based
E2E path from the point of the whole coordination framework.
Moreover, short block generation time can result in a possible
increase in transaction throughput.
P2. Convenient block proposal: Loading controllers with
computation-intensive tasks for block proposal would throt-
tle their performance. Also, a computation-friendly block
proposal mechanism would reduce energy consumption.
P3. Democratic/Fair block proposal: Implementing a demo-
cratic/fair block proposal mechanism stimulates an equal
sharing of the burden stemming from the blockchain tasks.
This in turn prevents the overloading of the controllers.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
1712 IEEE TRANSACTIONS ON NETWORK AND SERVICE MANAGEMENT, VOL. 18, NO. 2, JUNE 2021
Fig. 8. Process of primary (green) and secondary (yellow) BC nodes selection
in Clique.
C. Clique Consensus Protocol
We use an implementation of Proof-of-Authority (PoA) con-
sensus algorithm, called Clique [16]. Clique consensus
mechanism has several prominent merits aligning with the
design aspects explained in Section V-B and, thus, encouraged
us to exploit it in QC framework as per other consensus models
requiring hardware/computational resources, such as Proof-of-
Work (PoW), and an existing “share”, such as Proof-of-Stake
(PoS) [17].
One advantage of Clique is that the time interval to
generate blocks is predictable and shorter while it can devi-
ate in PoW and PoS mechanisms. Also, it provides a high
transaction rate in proportion to the other consensus mech-
anisms. Blocks are created by authorized network nodes in
a sequence at specified epochs. This increases the speed of
transaction confirmations. Another advantage is that PoA con-
sensus does not require nodes to devote computing resources
to solve complex mathematical tasks as opposed to other pop-
ular mechanisms such as PoW consensus. This feature comes
into prominence for controllers in the QC framework because
network- related tasks and messages already challenge BC
nodes, i.e., controllers, in terms of computational resources
in daily operations of the networks. Therefore, there is no
need for high-performance equipment. Furthermore, Clique
determines at most N −(N /2+1) primary and secondary BC
nodes to process transactions, propose a block, and broadcast
the proposed block to the BC network for each epoch in a
round-robin fashion. Fig. 8 presents the process of primary
(green) and secondary (yellow) BC nodes selection to pro-
pose and propagate a block to the network in case of N = 6
BC nodes (i.e., controllers) in three consecutive steps. The
secondary node takes over the responsibility in case the pri-
mary node fails to propose the block. This sequential process
democratizes the block proposal task among the nodes and
apportions the burden resulting from block generation and
propagation among the BC participants.
D. Workflow ofQC Framework
This subsection briefly explains with an example how QC
framework works and handles service requests in an SDN
network as illustrated in Fig. 9.
When a QoS-based inter-AS service request comes from a
user to an AS controller in the form of an S_Req message (step
1), the controller starts finding an E2E path considering the
QoS parameters and priorities stated in the message using its
BC ledger (step 2). The E2E path consists of pathlets from a
border node of source-AS to a border node of destination-AS
over an overlay network, as pictured in Fig. 3(b), abstracted
by exploiting the transactions for pathlets from BC.
Fig. 9. E2E path finding process in QC framework.
The source-AS controller uses Ingress Node, Egress
Node, Max Bandwidth, and Min Delay fields of trans-
actions, as shown in Table I, to find the E2E path. If the
source-AS controller cannot find an E2E path meeting the
conditions specified in the S_Req message (step 3a), then the
source-AS controller sends an S_Res message including the
REJECT response back to the user/client to state that the ser-
vice request cannot be provided. When an E2e path is found
satisfying the QoS requirements of the service request (step
3b), the source-AS controller asks each AS controller that has
a pathlet over the E2E path (step 4) whether they can pro-
vide the requested QoS values over the corresponding pathlet
by sending P_Req messages. The purpose of this inquiry is
to confirm that the corresponding pathlet can still provide
QoS values advertised in the respective transaction. Because
(transaction) updates on the BC are not real-time as the state
updates on the pathlets of networks, a pathlet’s QoS values
may be different than the advertised ones due to certain rea-
sons such as intra-AS traffic and/or another inter-AS traffic.
After receiving the P_Req messages, respective AS controllers
answer to the source-AS controller by sending back their
P_Res messages stating whether they can provide (ACCEPT
or REJECT response) the corresponding pathlet with requested
QoS parameters.
Finally, if all respective AS controllers send an ACCEPT
response in P_Res messages to the source-AS controller (Step
5a), the source-AS controller sends an S_Res message includ-
ing an ACCEPT response back to the user (Step 6) to state
that service request can be satisfied and, therefore, can start in
the network. The underlying networking-related arrangements
such as adding flow entries in flow tables of the corresponding
network devices and reserving the network resources for the
promised pathlet are handled by the corresponding AS con-
trollers according to the data in the S_Req and P_Req messages
if they accept providing the service/pathlet. Therefore, a ser-
vice flow is not investigated by any AS controller over the
E2E path again when it enters the AS network. To the con-
trary, if any of the AS controller over the E2E path sends a
REJECT response in P_Res messages (Step 5b) to the source-
AS controller, the source-AS controller starts finding another
E2E path with the same properties and conditions using its
BC ledger as explained earlier.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
KARAKUS et al.: QoSChain: PROVISIONING INTER-AS QoS IN SOFTWARE-DEFINED NETWORKS WITH BLOCKCHAIN 1713
VI. EVALUATION
In this section, we evaluate and compare the performance
of QC framework against two common QoS-based routing
strategies in SDN networks [3], [18]: Hierarchical Routing
Approach (HRA), proposed in our previous study [19], and
Distributed Routing Approach (DRA), reflecting the current
operational mode of the networks. We assume that DRA
always operates on Border Gateway Protocol (BGP) routes,
hence it uses shortest AS_PATH criterion at the AS level
in case it detects two similar paths with nearly the same
local preference, weight and locally originated or aggregate
addresses. We employ E2E Flow Setup Time (FST), Messages
Exchanged and Processed (MEP), and Requests Serviced (RS)
metrics for the analysis. We also use Random, NSFNET, and
U.S. Backbone network topologies at AS-level to conduct a
topology-wise sensitivity analysis on performance of the QC
and the other approaches. We use the same topologies, ran-
domly generated, in intra-AS settings of Random, NSFNET,
and U.S. Backbone networks as the number of switches vary
in the simulations.
A. Experimental Setup
Mininet emulator and Ryu controller have been used to build
and simulate the SDN topology as well as to measure the val-
ues of the corresponding parameters as shown in Table III.
We have built and used a custom BC network with various
numbers of AS controllers and different size of BC transac-
tions. The proposed framework with the original number of
pathlet transactions is denoted as QC, extended 250K trans-
actions as QC_250K and 500K transactions as QC_500K in
simulations as shown in the figures. When the original pathlet
size is less than the aforementioned transaction numbers, we
have generated update transactions to extend the size of pathlet
transactions in the BC. In the experiments, we have consid-
ered only inter-AS service requests with bandwidth parameter
(1 Mbps) and provided enough bandwidth (100 Gbps) in
physical links so that there is no service request rejection
due to network resource limitations. Also, we have used a
random topology generator defined by Erdos-Renyi random
graph model to randomly create the networks with a degree
of connectivity of 0.5. Furthermore, we have averaged 30 runs
for each experiment to achieve and exceed 95% statistical
significance.
The total number of ASes, switches, and controllers vary
from 6 to 10, 36 to 240, and 6 to 10, respectively, in the simu-
lation settings. m in the formulas represents the miscellaneous
messages (e.g., the request of E2E global path, respective
ingress/egress node information, finding a feasible path, and
decision data for a request, etc.) sent among controllers in
DRA and HRA.
B. Experimental Results
In this subsection, we present the results of experiments
conducted with respect to FST, MEP, and RS metrics to eval-
uate the performance of QC framework in comparison to DRA
and HRA frameworks.
TABLE III
NOTATION TABLE
1) E2E Flow Setup Time (FST): E2E Flow Setup Time
(FST) refers to the time to install corresponding flow rule
entries enabling the service/flow request in flow-tables of
switches over the E2E path. Thus, there are various steps
taking time in determining the FST metric. It is typically
determined by (i) networking/topology-based delays (e.g.,
RTT (Round-Trip-Time) between controller and switches, and
controller-to-controller message/packet propagation time) and
(ii) switch/controller-based delays (e.g., switch and/or con-
troller packet/message processing time, and path computation
time in a controller). If any of these delays are high, then
resulting flow setup latency becomes high too. This, in turn,
may result in a congestion in both control and data plane lev-
els, and a longer fail-over time in the network. Therefore, FST
is one of the important metrics to measure the performance
of routing frameworks in SDN networks because it is a good
indicator of the scalability dimension.
The FST of a service/flow request in QC framework
(FSTQC ) can be given as in Eq. (1) without loss of generality.
FSTQC
= λ
(
S_Req ,S_Req , f
−→
h , f
−→s , f
−→c
)
+ T (pathE2EBC
)f
−→c
comp
+ max{
∀k
f c∈f C
}
⎧
⎨
⎩
γ
(
P_Req , f
−→c , kf c
)
+ γ
(
P_Res, kf c, f
−→c
)
+ max{
∀k
f s
j∈k
f S
}
{
T (θ)
k
f c→k
f s
j
prop
}
+ T (P_Res)f
−→c
proc
⎫
⎬
⎭
+ λ
(
S_Res,S_Res, f
−→c , f
−→s , f
−→
h
)
(1)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
1714 IEEE TRANSACTIONS ON NETWORK AND SERVICE MANAGEMENT, VOL. 18, NO. 2, JUNE 2021
The processing and propagation times of corresponding
S_Req and S_Res messages at/among f
−→
h , f
−→s , and f
−→c are
calculated using Eq. (2). Eq. (1) finds the max. of process-
ing and propagation times of P_Req, P_Res using Eq. (3).
As reflected in Eq. (1), it also involves flow_mod messages
at/among the controllers and switches over the E2E path.
λ(x1, x2, y1, y2, y3) = T (x1)
y1
proc + T (x1)
y1→y2
prop + T (x1)
y2
proc
+ T (x2)
y2→y3
prop + T (x2)
y3
proc (2)
γ(x , y1, y2) = T (x )y1→y2
prop + T (x )y2
proc (3)
Similarly, the FST of a service/flow request in the HRA
framework (FSTHRA) can be characterized as in Eq. (4).
FSTHRA
= δ
(
f p, ρ, f
−→
h , f
−→s , f
−→c
)
+ T (m)f
−→c→BR
prop
+ max
{
β
(
m, pathL, f
−→c )
, β
(
m, pathL, f
←−c )}
+ T (pathE2E )BR
comp
+ max{
∀kf c∈f C
}
⎧
⎨
⎩
β
(
m, pathL, kf c
)
+ max{
∀kf sj∈k
f S
}
×
{
T (θ)
k
f c→k
f s
j
prop
}
+ T (m)BR
proc
⎫
⎬
⎭
(4)
As reflected in Eq. (4), it primarily involves: (i) process-
ing and propagation times for the 1st packet of flow f and
corresponding packet_in message at/among f
−→
h , f
−→s , and
f
−→c as formulated in Eq. (5), (ii) maximum of (a) propaga-
tion time of local path request messages from BR to f
−→c plus
local path computation time at f
−→c and (b) the same proce-
dures for f
←−c as formulated in Eq. (6), (iii) computation time
to find a feasible E2E path for the service request at BR, and
(iv) maximum of processing and propagation times of path
request/setup messages and flow_mod messages at/among
BR, controllers, and switches over the E2E path.
δ(x1, x2, y1, y2, y3) = λ(x1, x2, y1, y2, y3) + T (x2)y2
proc (5)
β(x ,P , y) = T (x )BR→y
prop + T (P)ycomp
+ T (x )y→BR
prop (6)
As for the FST of a service/flow request in DRA (FSTDRA),
it can be shown as in Eq. (7).
FSTDRA
= δ(f p, ρ, f
−→
h , f
−→s , f
−→c )
+
∑
∀kf c∈f C
1≤k≤|f C|
(
T (pathL)
k
f c
comp + T (m)
k
f c→k+1
f c
prop
)
+ max
⎧
⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
∑
∀kf c∈f C
|f C|≤k≤1
(
T (m)
k
f c
proc + T (m)
k
f c→k−1
f c
prop
)
,
max
{∀kf c∈f C}
{
max
{∀kf sj∈k
f S}
{
T (θ)
k
f c→k
f s
j
prop
}}
⎫
⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎭
(7)
As reflected in Eq. (7), it consists of (i) processing and
propagation times for the 1st packet of flow f and corre-
sponding packet_in message at/among f
−→
h , f
−→s , and f
−→c
as formulated in Eq. (5), (ii) local path computation time
at a controller and propagation time for decision message
to the next controller over the E2E path, (iii) maximum of
processing and propagation times of path reservation mes-
sages and flow_mod messages at/among controllers and
switches over the E2E path. We note that k represents an
index in the respective sets, not an ID. For example, assuming
f C = {A,E ,B ,R} is a set of controllers over the E2E path
for flow f, then, 1
f c = A, 2
f c = E , 3
f c = B , 4
f c = R.
Fig. 10(a) shows the FST values while varying AS num-
bers with 10 switches per AS network and different service
requests (i.e., different source and destinations). The QC has
better FST values than DRA and HRA across the board, as
intuitively expected from the information already maintained
by the BC infrastructure and due to higher computations of
DRA and HRA emanating from more ASes. The DRA out-
performs HRA regarding FST in the simulations because the
Broker communicates with all AS controllers over the E2E
path in HRA whereas BGP-based shortest path is used in
DRA by means of BGP next-hop attribute values towards the
destination AS to setup an E2E path.
Figs. 10(b)–10(f) show the total FST values in QC,
QC_250K, QC_500K, DRA, and HRA cases while varying
the number of switches per AS in 6-, 14-, 24-AS Random,
NSFNET, and U.S. Backbone network topologies by using
different service requests (i.e., each request has different
source-destination pairs where source and destinations are
from different ASes). As it can be seen in the figures, the
QC framework outperforms the DRA and HRA approaches in
terms of the FST as the number of switches per AS increases
because more switch-controller and controller-controller com-
munication delays are involved in the flow setup processes in
DRA and HRA. This is because the QC approach takes advan-
tages of using available transactions, reflecting QoS-related
states of the ASes, to determine the routing path with mini-
mal number of control messages than both the DRA and HRA
approaches. The increase ratio of number of distinct pathlets
in an AS is not necessarily linear as the number of switches
per AS increases. The increase on the number of distinct path-
let in an AS results in an increase, in turn, in the number of
transactions in the BC that the AS needs to search and read to
compute an E2E path. The spikes in point 9 and particularly
10 of QC_250K and QC_500K in Fig. 10(d) and Fig. 10(f)
are results of the aforementioned situation along with more
ASes in the topology.
2) Messages Exchanged and Processed (MEP): Network
controllers may have to cope with more flow requests, which
generate more Messages Exchanged and Processed (MEP)
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
KARAKUS et al.: QoSChain: PROVISIONING INTER-AS QoS IN SOFTWARE-DEFINED NETWORKS WITH BLOCKCHAIN 1715
among network devices and other controllers to set up QoS-
based E2E paths, as the number of nodes grows. These could
be any messages needed to setup a QoS-based E2E path for
a service request and be called network and communication
overhead. These message exchange and handling procedures
can make the controllers as bottleneck due to its limited com-
putation resources (i.e., CPU and memory). Hence, minimizing
the number of MEP to set up an E2E path for a service/flow
request at/by respective decision-maker controllers is impor-
tant for the controllers, which makes MEP another crucial
metric to evaluate the routing performance and the scalability
of the entire network system in SDN networks.
The number of MEP to set up an E2E path for a ser-
vice/flow request in QC framework (MEPQC ), HRA frame-
work (MEPHRA), and DRA framework (MEPDRA) are given
in Eqs. (8)-(10), respectively.
MEPQC = 2 · ∣∣f C
∣
∣ +
∑
∀kf c∈f C
∣
∣
∣kf S
∣
∣
∣ (8)
As shown in Eq. (8), MEPQC mainly involves: (i) an
S_Req message sent from source host (f
−→
h ) to source con-
troller (f
−→c ), (ii) P_Req messages sent from f
−→c to the other
controllers over the E2E path found for the service request,
(iii) P_Res messages sent from the controllers over the E2E
path found for the service request to the f
−→c in response to
the P_Req messages, (iv) an S_Res message sent from f
−→c to
f
−→
h , and (v) flow_mod messages sent from the controllers
to the switches in their networks over the E2E path.
MEPHRA = 4 +
∣
∣
∣
∣B
f
−→
N
∣
∣
∣
∣ +
∣
∣
∣
∣B
f
←−
N
∣
∣
∣
∣ + 2 · ∣∣f C
∣
∣ +
∑
∀kf c∈f C
∣
∣
∣kf S
∣
∣
∣
(9)
f
−→
N and f
←−
N are source and destination ASes over the E2E
path for flow f, respectively. Similarly, in Eq. (9), MEPHRA
mainly involves: (i) a packet_in message sent from source-
switch (f
−→s ) to f
−→c , (ii) an E2E path request message sent
from f
−→c to the BR, (iii) two computation request mes-
sages from BR to the f
−→c and destination-controller (f
←−c )
(for local paths advertisements between each border node and
source/destination switch pairs), (iv) messages including path-
let advertisements for each border node and source/destination
switch pairs from f
−→c and f
←−c to BR, (v) messages (including
respective border node pairs in each network) sent from the
BR to the controllers over the E2E path, (vi) confirmation mes-
sages (for the requested pathlets in each network) sent from
the controllers over the E2E path to BR, and (vii) flow_mod
messages sent from the controllers over the E2E path to the
switches in their networks over the E2E path.
MEPDRA = 1 + 2 · ∣∣f C
∣
∣ +
∑
∀kf c∈f C
∣
∣
∣kf S
∣
∣
∣ (10)
MEPDRA as in Eq. (10) mainly involves: (i) a packet_in
message sent from f
−→s to f
−→c , (ii) decision and notifica-
tion (for path reservation) messages sent among the con-
trollers throughout an E2E path for the requested path, and
Fig. 10. Flow Setup Time (FST) of QC, DRA, and HRA.
Fig. 11. Messages Exchanged and Processed (MEP) of QC, DRA, and HRA.
(iii) flow_mod messages sent from the controllers to the
switches in their networks over the E2E path.
Fig. 11 shows the MEP values in QC, DRA, and HRA mod-
els. In Fig. 11(a), AS numbers vary with the fixed number
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
1716 IEEE TRANSACTIONS ON NETWORK AND SERVICE MANAGEMENT, VOL. 18, NO. 2, JUNE 2021
of switches (10) per AS. In Figs. 11(b)–11(f), the number of
switches per AS vary with 6-, 14-, 24-AS Random, NSFNET,
and U.S. Backbone networks, respectively.
In Fig. 11(a), the HRA requires as high as 50% more MEP
than the QC and DRA throughout all AS cases. This is because
the HRA uses more number of border devices in ASes as
reflected in Eq. (9).
Figs. 11(b)–11(f) present that the QC and DRA frameworks
display a better performance than the HRA approach with
respect to varying the number of switches per AS under dif-
ferent network topologies. In the figures, the MEP of the QC
and DRA presents almost identical values while the number of
switches per AS increases. One reason for this fact is that the
E2E path for all frameworks may not necessarily be the same
in case of the same request (i.e., total number of switches and
controllers may have different values). Another reason is that
an AS always finds a feasible path by asking only its default
BGP next-hop AS to the destination in the DRA, i.e., using the
shortest path at AS level. Therefore, an AS do not need to com-
municate and exchange any messages with another AS other
than only its next-hop AS to the destination (less message
communication and exchange). It is worth noting that while
MEP of QC is similar to that of DRA, although DRA operates
on the shortest BGP path at AS-level, QC significantly reduces
the FST as shown in Fig. 10. Moreover, the MEP values are
getting higher in Figs. 11(b)–11(f) when increasing number of
switches over the E2E paths as intra-AS switch number grows
in each setting.
3) Requests Serviced (RS): Allocating network control
instances for each service/flow request in flow tables of
switches over the E2E path may influence the number of
requests serviced (RS) for the entire network in QC, HRA, and
DRA frameworks due to their FST. When the FST is higher,
the frameworks can establish the service request in a longer
time period. Also, we note that the major goal of the RS
metric is to provide another validation for the results of the
FST parameter to corroborate those observations from a dif-
ferent perspective. Therefore, the number of RS per unit of
time is another important metric for the scalability of routing
frameworks in case of QoS-based E2E path setup.
Fig. 12 shows the percentage of RS in case of 800 ser-
vice requests while varying the time range (ms) for 7-, 14-,
24-AS Random, NSFNET, and U.S. Backbone networks. As
time increases, the QC framework can easily handle all ser-
vice requests. However, overall, the percentage of RS for DRA
framework decreases while the intensity of ASes increases. As
expected from Fig. 10 FST values, Fig. 12 confirms that the
HRA cannot handle the service requests until time is 150 ms.
When time exceeds 150 ms, the HRA starts servicing the
requests as shown in Figs. 12(a) - 12(e). In other words, the
HRA needs higher FST to find the E2E paths. While the HRA
and DRA performances get closer to each other compared to
smaller time values there continues to be a noticeable differ-
ence and DRA dominates HRA at all times. As a result of RS
metric, the QC frameworks can establish all service requests
in shorter time whereas the HRA and DRA frameworks cannot
handle all service requests as shown in Figs. 12(b) - 12(e).
Fig. 12. Requests Serviced (RS) of QC, DRA, and HRA.
This is because the QC framework takes the advantages of
BC transactions, already established by the AS controllers, to
find QoS-based E2E path over AS networks.
VII. DISCUSSIONS
Just like any other emerging and promising technology, BC
is facing challenges as well. These issues indicate possible
future research directions. The following provides a summary
of these areas where there is room for improvement:
• Block Generation Time: This time can help the entire
model achieve higher transaction throughput and keep
the BC ledger up-to-date regarding pathlet states. On the
other hand, this interval can lead to more computation on
network controllers and use more link resources on the
networks.
• Consensus Protocol Scalability: Loading AS controllers
with computation-intensive tasks, such as solving cryp-
tographic problems, to generate a new block may limit
their network-related performances and, hence, necessi-
tates computational power. Therefore, utilizing a more
lightweight yet efficient consensus protocol would relieve
controllers’ load.
• BC Ledger Update Time: It is possible that the reflected
state change of the pathlet in the transaction may not hold
until it is reflected in the BC ledger because another update
on the state of the corresponding pathlet may happen in
the network. Therefore, some of the transactions may not
reflect the real up-to-date pathlet states on the BC.
• Transaction Amount: Network updates are reflected in
new transactions and propagated to all participating
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
KARAKUS et al.: QoSChain: PROVISIONING INTER-AS QoS IN SOFTWARE-DEFINED NETWORKS WITH BLOCKCHAIN 1717
networks in the proposed model. Therefore, storage may
become a constraint in the very long run. This situation
can also affect the network overhead that controllers deal
with.
VIII. CONCLUSION AND FUTURE WORKS
This study presents an emerging possible use case and
research direction for the BC technology. We have explored the
viability and feasibility of a novel BC-based SDN for QoS-
based inter-AS routing. Preliminary results show promising
performance in terms of flow setup time and the percentage of
requests serviced. The QC shows a comparable message over-
head to the shortest-path based distributed approach although
the latter operates on the shortest BGP paths in terms of hop
count at the AS-level. Our experiments also display a faster
convergence by QC than the other hierarchical and distributed
QoS routing approaches in SDN.
As for the future work, while the experimental results of
QC have shown acceptable levels of performance for vari-
ous metrics, we will work on our techniques to improve their
performance further. Also, we will examine the robustness of
the proposed framework by analyzing various security attacks.
Finally, we will look into the economic dimension to extend
the current work into a practical framework by means of smart
contracts.
REFERENCES
[1] C. Labovitz, S. Iekel-Johnson, D. McPherson, J. Oberheide, and
F. Jahanian, “Internet inter-domain traffic,” SIGCOMM Comput.
Commun. Rev., vol. 41, no. 4, pp. 75–86, Aug. 2010.
[2] “Software-defined networking: The new norm for networks,” Open
Netw. Found. (ONF), Menlo Park, CA, USA, Rep., Apr. 2012.
[3] M. Karakus and A. Durresi, “Quality of service (QoS) in software
defined networking (SDN): A survey,” J. Netw. Comput. Appl., vol. 80,
pp. 200–218, Feb. 2017.
[4] D. Yaga, P. Mell, N. Roby, and K. Scarfone, Blockchain Technology
Overview, document NISTIR 8202, Nat. Inst. Stand. Technol.,
Gaithersburg, MD, USA, 2018.
[5] “SDN architecture,” Open Netw. Found. (ONF), Menlo Park, CA, USA,
Rep. ONF TR-502, Jun. 2014.
[6] N. McKeown et al., “OpenFlow: Enabling innovation in campus
networks,” SIGCOMM Comput. Commun. Rev., vol. 38, no. 2,
pp. 69–74, Mar. 2008.
[7] P. Lin et al., “A west-east bridge based SDN inter-domain testbed,” IEEE
Commun. Mag., vol. 53, no. 2, pp. 190–197, Feb. 2015.
[8] P. Wang, X. Liu, J. Chen, Y. Zhan, and Z. Jin, “QoS-aware service
composition using blockchain-based smart contracts,” in Proc. 40th Int.
Conf. Softw. Eng. (ICSE), New York, NY, USA, 2018, pp. 296–297.
[9] E. Ak and B. Canberk, “BCDN: A proof of concept model for
blockchain-aided CDN orchestration and routing,” Comput. Netw.,
vol. 161, pp. 162–171, Oct. 2019.
[10] J. Yang, S. He, Y. Xu, L. Chen, and J. Ren, “A trusted routing
scheme using blockchain and reinforcement learning for wireless sensor
networks,” Sensors, vol. 19, no. 4, p. 970, 2019.
[11] M. Saad, A. Anwar, A. Ahmad, H. Alasmary, M. Yuksel, and
A. Mohaisen, “RouteChain: Towards blockchain-based secure and effi-
cient BGP routing,” in Proc. IEEE Int. Conf. Blockchain Cryptocurrency
(ICBC), Seoul, South Korea, May 2019, pp. 210–218.
[12] G. Ramezan and C. Leung, “A blockchain-based contractual routing
protocol for the Internet of Things using smart contracts,” Wireless
Commun. Mobile Comput., vol. 2018, Nov. 2018, Art. no. 4029591.
[13] P. Kamboj and S. Pal, “QoS in software defined IoT network using
blockchain based smart contract: Poster abstract,” in Proc. 17th Conf.
Embedded Netw. Sens. Syst. (SenSys), New York, NY, USA, 2019,
pp. 430–431.
[14] A. Arins, “Blockchain based inter-domain latency aware routing pro-
posal in software defined network,” in Proc. 6th Workshop Adv. Inf.
Electron. Elect. Eng. (AIEEE), 2018, pp. 1–2.
[15] M. Karakus and E. Guler, “RoutingChain: A proof-of-concept model
for a blockchain-enabled QoS-based inter-AS routing in SDN,” in Proc.
IEEE Int. Black Sea Conf. Commun. Netw. (BlackSeaCom), Odessa,
Ukraine, 2020, pp. 1–6.
[16] S. De Angelis, “Assessing security and performances of consensus
algorithms for permissioned blockchains,” 2018. [Online]. Available:
arXiv:1805.03490.
[17] Y. Xiao, N. Zhang, W. Lou, and Y. T. Hou, “A survey of distributed
consensus protocols for blockchain networks,” 2019. [Online]. Available:
arXiv:1904.04098.
[18] M. Karakus and A. Durresi, “A survey: Control plane scalability issues
and approaches in software-defined networking (SDN),” Comput. Netw.,
vol. 112, pp. 279–293, Jan. 2017.
[19] M. Karakus and A. Durresi, “A scalable inter-AS QoS routing archi-
tecture in software defined network (SDN),” in Proc. IEEE 29th Int.
Conf. Adv. Inf. Netw. Appl. (AINA), Gwangju, South Korea, Mar. 2015,
pp. 148–154.
[20] P. Erdős and A. Rényi, “On the strength of connectedness of a random
graph,” Acta Mathematica Academiae Scientiarum Hungarica, vol. 12,
no. 1, pp. 261–267, 1964.
Murat Karakus (Member, IEEE) received the Ph.D.
degree in computer science from the Purdue School
of Science in Indianapolis, USA, in 2018. He is
currently working as an Assistant Professor with
Bayburt University, Turkey. His current research
interests include new network architectures, e.g.,
SDN, QoS, scalability, routing, blockchain technol-
ogy, economics analysis of network architectures,
and designs.
Evrim Guler received the Ph.D. degree in computer
science from Georgia State University, Atlanta, GA,
USA, in 2019. He is currently an Assistant Professor
with the Department of Computer Engineering,
Bartin University, Turkey, where he leads the
Distance Education and Research Center. His
research interests include smart systems and network
modeling.
Suleyman Uludag (Member, IEEE) received the
Ph.D. degree in computer science from DePaul
University, Chicago, IL, USA, in 2007. He is cur-
rently an Associate Professor of Computer Science
with the University of Michigan-Flint. His research
interests include security, privacy, and optimization
of data collection particularly as applied to the
Smart Grid and Intelligent Transportation Systems.
He received the Fulbright U.S. Scholar Program
Core Award in 2012 and 2018.
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:14:16 UTC from IEEE Xplore.  Restrictions apply. 
<<
  /ASCII85EncodePages false
  /AllowTransparency false
  /AutoPositionEPSFiles false
  /AutoRotatePages /None
  /Binding /Left
  /CalGrayProfile (Gray Gamma 2.2)
  /CalRGBProfile (sRGB IEC61966-2.1)
  /CalCMYKProfile (U.S. Web Coated \050SWOP\051 v2)
  /sRGBProfile (sRGB IEC61966-2.1)
  /CannotEmbedFontPolicy /Warning
  /CompatibilityLevel 1.4
  /CompressObjects /Off
  /CompressPages true
  /ConvertImagesToIndexed true
  /PassThroughJPEGImages true
  /CreateJobTicket false
  /DefaultRenderingIntent /Default
  /DetectBlends true
  /DetectCurves 0.0000
  /ColorConversionStrategy /LeaveColorUnchanged
  /DoThumbnails false
  /EmbedAllFonts true
  /EmbedOpenType false
  /ParseICCProfilesInComments true
  /EmbedJobOptions true
  /DSCReportingLevel 0
  /EmitDSCWarnings false
  /EndPage -1
  /ImageMemory 1048576
  /LockDistillerParams true
  /MaxSubsetPct 100
  /Optimize true
  /OPM 0
  /ParseDSCComments false
  /ParseDSCCommentsForDocInfo false
  /PreserveCopyPage true
  /PreserveDICMYKValues true
  /PreserveEPSInfo false
  /PreserveFlatness true
  /PreserveHalftoneInfo true
  /PreserveOPIComments false
  /PreserveOverprintSettings true
  /StartPage 1
  /SubsetFonts false
  /TransferFunctionInfo /Remove
  /UCRandBGInfo /Preserve
  /UsePrologue false
  /ColorSettingsFile ()
  /AlwaysEmbed [ true
    /Arial-Black
    /Arial-BoldItalicMT
    /Arial-BoldMT
    /Arial-ItalicMT
    /ArialMT
    /ArialNarrow
    /ArialNarrow-Bold
    /ArialNarrow-BoldItalic
    /ArialNarrow-Italic
    /ArialUnicodeMS
    /BookAntiqua
    /BookAntiqua-Bold
    /BookAntiqua-BoldItalic
    /BookAntiqua-Italic
    /BookmanOldStyle
    /BookmanOldStyle-Bold
    /BookmanOldStyle-BoldItalic
    /BookmanOldStyle-Italic
    /BookshelfSymbolSeven
    /Century
    /CenturyGothic
    /CenturyGothic-Bold
    /CenturyGothic-BoldItalic
    /CenturyGothic-Italic
    /CenturySchoolbook
    /CenturySchoolbook-Bold
    /CenturySchoolbook-BoldItalic
    /CenturySchoolbook-Italic
    /ComicSansMS
    /ComicSansMS-Bold
    /CourierNewPS-BoldItalicMT
    /CourierNewPS-BoldMT
    /CourierNewPS-ItalicMT
    /CourierNewPSMT
    /EstrangeloEdessa
    /FranklinGothic-Medium
    /FranklinGothic-MediumItalic
    /Garamond
    /Garamond-Bold
    /Garamond-Italic
    /Gautami
    /Georgia
    /Georgia-Bold
    /Georgia-BoldItalic
    /Georgia-Italic
    /Haettenschweiler
    /Helvetica
    /Helvetica-Bold
    /HelveticaBolditalic-BoldOblique
    /Helvetica-BoldOblique
    /Impact
    /Kartika
    /Latha
    /LetterGothicMT
    /LetterGothicMT-Bold
    /LetterGothicMT-BoldOblique
    /LetterGothicMT-Oblique
    /LucidaConsole
    /LucidaSans
    /LucidaSans-Demi
    /LucidaSans-DemiItalic
    /LucidaSans-Italic
    /LucidaSansUnicode
    /Mangal-Regular
    /MicrosoftSansSerif
    /MonotypeCorsiva
    /MSReferenceSansSerif
    /MSReferenceSpecialty
    /MVBoli
    /PalatinoLinotype-Bold
    /PalatinoLinotype-BoldItalic
    /PalatinoLinotype-Italic
    /PalatinoLinotype-Roman
    /Raavi
    /Shruti
    /Sylfaen
    /SymbolMT
    /Tahoma
    /Tahoma-Bold
    /Times-Bold
    /Times-BoldItalic
    /Times-Italic
    /TimesNewRomanMT-ExtraBold
    /TimesNewRomanPS-BoldItalicMT
    /TimesNewRomanPS-BoldMT
    /TimesNewRomanPS-ItalicMT
    /TimesNewRomanPSMT
    /Times-Roman
    /Trebuchet-BoldItalic
    /TrebuchetMS
    /TrebuchetMS-Bold
    /TrebuchetMS-Italic
    /Tunga-Regular
    /Verdana
    /Verdana-Bold
    /Verdana-BoldItalic
    /Verdana-Italic
    /Vrinda
    /Webdings
    /Wingdings2
    /Wingdings3
    /Wingdings-Regular
    /ZapfChanceryITCbyBT-MediumItal
    /ZWAdobeF
  ]
  /NeverEmbed [ true
  ]
  /AntiAliasColorImages false
  /CropColorImages true
  /ColorImageMinResolution 200
  /ColorImageMinResolutionPolicy /OK
  /DownsampleColorImages false
  /ColorImageDownsampleType /Average
  /ColorImageResolution 300
  /ColorImageDepth -1
  /ColorImageMinDownsampleDepth 1
  /ColorImageDownsampleThreshold 1.50000
  /EncodeColorImages true
  /ColorImageFilter /DCTEncode
  /AutoFilterColorImages false
  /ColorImageAutoFilterStrategy /JPEG
  /ColorACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /ColorImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000ColorACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000ColorImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasGrayImages false
  /CropGrayImages true
  /GrayImageMinResolution 200
  /GrayImageMinResolutionPolicy /OK
  /DownsampleGrayImages false
  /GrayImageDownsampleType /Average
  /GrayImageResolution 300
  /GrayImageDepth -1
  /GrayImageMinDownsampleDepth 2
  /GrayImageDownsampleThreshold 1.50000
  /EncodeGrayImages true
  /GrayImageFilter /DCTEncode
  /AutoFilterGrayImages false
  /GrayImageAutoFilterStrategy /JPEG
  /GrayACSImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /GrayImageDict <<
    /QFactor 0.76
    /HSamples [2 1 1 2] /VSamples [2 1 1 2]
  >>
  /JPEG2000GrayACSImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /JPEG2000GrayImageDict <<
    /TileWidth 256
    /TileHeight 256
    /Quality 15
  >>
  /AntiAliasMonoImages false
  /CropMonoImages true
  /MonoImageMinResolution 400
  /MonoImageMinResolutionPolicy /OK
  /DownsampleMonoImages false
  /MonoImageDownsampleType /Bicubic
  /MonoImageResolution 600
  /MonoImageDepth -1
  /MonoImageDownsampleThreshold 1.50000
  /EncodeMonoImages true
  /MonoImageFilter /CCITTFaxEncode
  /MonoImageDict <<
    /K -1
  >>
  /AllowPSXObjects false
  /CheckCompliance [
    /None
  ]
  /PDFX1aCheck false
  /PDFX3Check false
  /PDFXCompliantPDFOnly false
  /PDFXNoTrimBoxError true
  /PDFXTrimBoxToMediaBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXSetBleedBoxToMediaBox true
  /PDFXBleedBoxToTrimBoxOffset [
    0.00000
    0.00000
    0.00000
    0.00000
  ]
  /PDFXOutputIntentProfile (None)
  /PDFXOutputConditionIdentifier ()
  /PDFXOutputCondition ()
  /PDFXRegistryName ()
  /PDFXTrapped /False
  /CreateJDFFile false
  /Description <<
    /CHS <FEFF4f7f75288fd94e9b8bbe5b9a521b5efa7684002000410064006f006200650020005000440046002065876863900275284e8e55464e1a65876863768467e5770b548c62535370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c676562535f00521b5efa768400200050004400460020658768633002>
    /CHT <FEFF4f7f752890194e9b8a2d7f6e5efa7acb7684002000410064006f006200650020005000440046002065874ef69069752865bc666e901a554652d965874ef6768467e5770b548c52175370300260a853ef4ee54f7f75280020004100630072006f0062006100740020548c002000410064006f00620065002000520065006100640065007200200035002e003000204ee553ca66f49ad87248672c4f86958b555f5df25efa7acb76840020005000440046002065874ef63002>
    /DAN <FEFF004200720075006700200069006e0064007300740069006c006c0069006e006700650072006e0065002000740069006c0020006100740020006f007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400650072002c0020006400650072002000650067006e006500720020007300690067002000740069006c00200064006500740061006c006a006500720065007400200073006b00e60072006d007600690073006e0069006e00670020006f00670020007500640073006b007200690076006e0069006e006700200061006600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020004400650020006f007000720065007400740065006400650020005000440046002d0064006f006b0075006d0065006e0074006500720020006b0061006e002000e50062006e00650073002000690020004100630072006f00620061007400200065006c006c006500720020004100630072006f006200610074002000520065006100640065007200200035002e00300020006f00670020006e0079006500720065002e>
    /DEU <FEFF00560065007200770065006e00640065006e0020005300690065002000640069006500730065002000450069006e007300740065006c006c0075006e00670065006e0020007a0075006d002000450072007300740065006c006c0065006e00200076006f006e002000410064006f006200650020005000440046002d0044006f006b0075006d0065006e00740065006e002c00200075006d002000650069006e00650020007a0075007600650072006c00e40073007300690067006500200041006e007a006500690067006500200075006e00640020004100750073006700610062006500200076006f006e00200047006500730063006800e40066007400730064006f006b0075006d0065006e00740065006e0020007a0075002000650072007a00690065006c0065006e002e00200044006900650020005000440046002d0044006f006b0075006d0065006e007400650020006b00f6006e006e0065006e0020006d006900740020004100630072006f00620061007400200075006e0064002000520065006100640065007200200035002e003000200075006e00640020006800f600680065007200200067006500f600660066006e00650074002000770065007200640065006e002e>
    /ESP <FEFF005500740069006c0069006300650020006500730074006100200063006f006e0066006900670075007200610063006900f3006e0020007000610072006100200063007200650061007200200064006f00630075006d0065006e0074006f0073002000640065002000410064006f00620065002000500044004600200061006400650063007500610064006f007300200070006100720061002000760069007300750061006c0069007a00610063006900f3006e0020006500200069006d0070007200650073006900f3006e00200064006500200063006f006e006600690061006e007a006100200064006500200064006f00630075006d0065006e0074006f007300200063006f006d00650072006300690061006c00650073002e002000530065002000700075006500640065006e00200061006200720069007200200064006f00630075006d0065006e0074006f00730020005000440046002000630072006500610064006f007300200063006f006e0020004100630072006f006200610074002c002000410064006f00620065002000520065006100640065007200200035002e003000200079002000760065007200730069006f006e0065007300200070006f00730074006500720069006f007200650073002e>
    /FRA <FEFF005500740069006c006900730065007a00200063006500730020006f007000740069006f006e00730020006100660069006e00200064006500200063007200e900650072002000640065007300200064006f00630075006d0065006e00740073002000410064006f006200650020005000440046002000700072006f00660065007300730069006f006e006e0065006c007300200066006900610062006c0065007300200070006f007500720020006c0061002000760069007300750061006c00690073006100740069006f006e0020006500740020006c00270069006d007000720065007300730069006f006e002e0020004c0065007300200064006f00630075006d0065006e00740073002000500044004600200063007200e900e90073002000700065007500760065006e0074002000ea0074007200650020006f007500760065007200740073002000640061006e00730020004100630072006f006200610074002c002000610069006e00730069002000710075002700410064006f00620065002000520065006100640065007200200035002e0030002000650074002000760065007200730069006f006e007300200075006c007400e90072006900650075007200650073002e>
    /ITA (Utilizzare queste impostazioni per creare documenti Adobe PDF adatti per visualizzare e stampare documenti aziendali in modo affidabile. I documenti PDF creati possono essere aperti con Acrobat e Adobe Reader 5.0 e versioni successive.)
    /JPN <FEFF30d330b830cd30b9658766f8306e8868793a304a3088307353705237306b90693057305f002000410064006f0062006500200050004400460020658766f8306e4f5c6210306b4f7f75283057307e305930023053306e8a2d5b9a30674f5c62103055308c305f0020005000440046002030d530a130a430eb306f3001004100630072006f0062006100740020304a30883073002000410064006f00620065002000520065006100640065007200200035002e003000204ee5964d3067958b304f30533068304c3067304d307e305930023053306e8a2d5b9a3067306f30d530a930f330c8306e57cb30818fbc307f3092884c3044307e30593002>
    /KOR <FEFFc7740020c124c815c7440020c0acc6a9d558c5ec0020be44c988b2c8c2a40020bb38c11cb97c0020c548c815c801c73cb85c0020bcf4ace00020c778c1c4d558b2940020b3700020ac00c7a50020c801d569d55c002000410064006f0062006500200050004400460020bb38c11cb97c0020c791c131d569b2c8b2e4002e0020c774b807ac8c0020c791c131b41c00200050004400460020bb38c11cb2940020004100630072006f0062006100740020bc0f002000410064006f00620065002000520065006100640065007200200035002e00300020c774c0c1c5d0c11c0020c5f40020c2180020c788c2b5b2c8b2e4002e>
    /NLD (Gebruik deze instellingen om Adobe PDF-documenten te maken waarmee zakelijke documenten betrouwbaar kunnen worden weergegeven en afgedrukt. De gemaakte PDF-documenten kunnen worden geopend met Acrobat en Adobe Reader 5.0 en hoger.)
    /NOR <FEFF004200720075006b00200064006900730073006500200069006e006e007300740069006c006c0069006e00670065006e0065002000740069006c002000e50020006f0070007000720065007400740065002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e00740065007200200073006f006d002000650072002000650067006e0065007400200066006f00720020007000e5006c006900740065006c006900670020007600690073006e0069006e00670020006f00670020007500740073006b007200690066007400200061007600200066006f0072007200650074006e0069006e006700730064006f006b0075006d0065006e007400650072002e0020005000440046002d0064006f006b0075006d0065006e00740065006e00650020006b0061006e002000e50070006e00650073002000690020004100630072006f00620061007400200065006c006c00650072002000410064006f00620065002000520065006100640065007200200035002e003000200065006c006c00650072002e>
    /PTB <FEFF005500740069006c0069007a006500200065007300730061007300200063006f006e00660069006700750072006100e700f50065007300200064006500200066006f0072006d00610020006100200063007200690061007200200064006f00630075006d0065006e0074006f0073002000410064006f00620065002000500044004600200061006400650071007500610064006f00730020007000610072006100200061002000760069007300750061006c0069007a006100e700e3006f002000650020006100200069006d0070007200650073007300e3006f00200063006f006e0066006900e1007600650069007300200064006500200064006f00630075006d0065006e0074006f007300200063006f006d0065007200630069006100690073002e0020004f007300200064006f00630075006d0065006e0074006f00730020005000440046002000630072006900610064006f007300200070006f00640065006d0020007300650072002000610062006500720074006f007300200063006f006d0020006f0020004100630072006f006200610074002000650020006f002000410064006f00620065002000520065006100640065007200200035002e0030002000650020007600650072007300f50065007300200070006f00730074006500720069006f007200650073002e>
    /SUO <FEFF004b00e40079007400e40020006e00e40069007400e4002000610073006500740075006b007300690061002c0020006b0075006e0020006c0075006f0074002000410064006f0062006500200050004400460020002d0064006f006b0075006d0065006e007400740065006a0061002c0020006a006f0074006b006100200073006f0070006900760061007400200079007200690074007900730061007300690061006b00690072006a006f006a0065006e0020006c0075006f00740065007400740061007600610061006e0020006e00e400790074007400e4006d0069007300650065006e0020006a0061002000740075006c006f007300740061006d0069007300650065006e002e0020004c0075006f0064007500740020005000440046002d0064006f006b0075006d0065006e00740069007400200076006f0069006400610061006e0020006100760061007400610020004100630072006f0062006100740069006c006c00610020006a0061002000410064006f00620065002000520065006100640065007200200035002e0030003a006c006c00610020006a006100200075007500640065006d006d0069006c006c0061002e>
    /SVE <FEFF0041006e007600e4006e00640020006400650020006800e4007200200069006e0073007400e4006c006c006e0069006e006700610072006e00610020006f006d002000640075002000760069006c006c00200073006b006100700061002000410064006f006200650020005000440046002d0064006f006b0075006d0065006e007400200073006f006d00200070006100730073006100720020006600f60072002000740069006c006c006600f60072006c00690074006c006900670020007600690073006e0069006e00670020006f006300680020007500740073006b007200690066007400650072002000610076002000610066006600e4007200730064006f006b0075006d0065006e0074002e002000200053006b006100700061006400650020005000440046002d0064006f006b0075006d0065006e00740020006b0061006e002000f600700070006e00610073002000690020004100630072006f0062006100740020006f00630068002000410064006f00620065002000520065006100640065007200200035002e00300020006f00630068002000730065006e006100720065002e>
    /ENU (Use these settings to create PDFs that match the "Recommended"  settings for PDF Specification 4.01)
  >>
>> setdistillerparams
<<
  /HWResolution [600 600]
  /PageSize [612.000 792.000]
>> setpagedevice