Delay-Aware Cooperative Caching for On-Chain Authentication in LEO Satellite Communication Systems
Delay-Aware Cooperative Caching for On-Chain
Authentication in LEO Satellite Communication
Systems
Ting Xiong1, Jiang Liu∗1,2, Ran Zhang1,2, Xinyuan Zhang1, Changqing Luo3, Tao Huang1,2, and Yunjie Liu1
1State Key Laboratory of Networking and Switching Technology
Beijing University of Posts and Telecommunications, Beijing, P.R. China
2Purple Mountain Laboratories, Nanjing, P.R. China
3Department of Computer Science, Virginia Commonwealth University, Richmond, VA 23284
∗Corresponding Author, email: liujiang@bupt.edu.cn
Abstract—User authentication on the blockchain has been
considered a promising solution to secure communications in
LEO satellite communication systems. Due to resource-limited
LEO satellites, the blockchain needs to be deployed in the
terrestrial network component of LEO satellite communication
systems, consequently resulting in high authentication delays. To
fill the gap, we propose to cache the blockchain at LEO satellites
and update the blockchain periodically and design a delay-
aware cooperative caching scheme for on-chain authentication
by considering the query delay and the synchronization delay.
Specifically, we first propose to divide LEO satellites into multiple
clusters which have the same copy of all the blocks belonging
to the blockchain. Then, we model the clustering problem as
a coalition formation game. Afterward, we design a distributed
delay-aware coalition formation algorithm, which is called DAC,
to find an optimal coalition partition. Extensive simulation results
show the efficacy of the proposed scheme.
Index Terms—LEO satellite communication systems, coopera-
tive caching, authentication, coalition formation game.
I. INTRODUCTION
Due to provided wide coverage, satellite communication
systems are highly expected to complement and extend terres-
trial communication networks. Low-earth-orbit (LEO) satellite
communications, with orbits at altitudes of less than 2000
km, have recently attracted broad research interests due to the
potential in providing seamless wireless access with enhanced
data rates. For example, several projects, e.g., SpaceX, on LEO
satellite communication systems have been initiated [1].
One of the most fundamental operations to secure communi-
cations in LEO satellite communication systems is to perform
user authentication. In general, the identity of a mobile user
needs to be authenticated before the user is served in LEO
satellite communication systems. However, conventional cen-
tralized authentication schemes (e.g., public key infrastructure)
for LEO satellite communication systems suffer the following
issues. First, such schemes are vulnerable to single points of
failure. Second, they are also prone to the overloading issue as
massive mobiles users are within the coverage of LEO satellite
communication systems. Third, the authentication operation
may experience a very long delay due to the extremely wide
coverage of LEO satellite communication systems. Therefore,
a decentralized authentication approach is in dire need.
Due to its decentralization, transparency, and immutabil-
ity, blockchain technology has been proposed to apply to
user authentication in LEO satellite communication systems
[2]–[5]. Specifically, the blockchain records mobile users’
identity information and access logs in a decentralized on-
chain authentication platform implemented for LEO satellite
communication systems. Once a mobile user needs to access
LEO satellite communication services, the serving satellite
sends an authentication query to the blockchain to assert the
mobile user’s identity. In particular, Hyland-Wood et al. [6]
revealed that owing to resource-constrained LEO satellites,
the most compelling way is to deploy the blockchain in the
terrestrial component of LEO satellite communication systems.
Nevertheless, deploying the blockchain in the terrestrial
component can downgrade the authentication performance.
Compared to geostationary-earth-orbit (GEO) and medium-
earth-orbit (MEO) satellites, LEO satellites have lower prop-
agation delay. The delay is usually less than 40ms [7], but
still not negligible. As a result, it usually takes a long time
to complete the authentication process, thus affecting the
authentication performance. More seriously, due to the limited
ground stations, most LEO satellites rely on multiple inter-
satellite links to access the blockchain. Consequently, the
authentication performance issue may be exacerbated.
In this paper, we propose to cache the blockchain at LEO
satellites and synchronize the blockchain periodically. Particu-
larly, we consider dividing LEO satellites into multiple clusters
to reduce the time for performing authentication queries.
Therefore, we design a delay-aware cooperative caching
scheme for user authentication on the blockchain. Specifically,
the LEO satellites in a cluster collaborate with each other to
cache all the blocks of the blockchain, and each of them stores
partial blocks. The clustering is performed by taking into
account both the query delay and the synchronization delay. To
find the clusters, we first formulate the clustering problem as a
coalition formation game and then design a distributed delay-
aware coalition formation algorithm, called DAC, to find an
optimal coalition partition. We conduct extensive simulations
to validate the performance of the designed scheme, and
simulation results show its efficacy.
3058
IC
C
 2
02
2 
- I
EE
E 
In
te
rn
at
io
na
l C
on
fe
re
nc
e 
on
 C
om
m
un
ic
at
io
ns
 | 
97
8-
1-
53
86
-8
34
7-
7/
22
/$
31
.0
0 
©
20
22
 IE
EE
 | 
D
O
I: 
10
.1
10
9/
IC
C
45
85
5.
20
22
.9
83
86
96
Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:33:19 UTC from IEEE Xplore.  Restrictions apply. 
The rest of this paper is organized as follows. We first
present the cooperative caching for the authentication on
a blockchain in Section II. Section III then describes the
delay-aware clustering scheme for cooperative caching. We
subsequently present the simulation results in Section IV, and
finally conclude this paper in Section V.
II. COOPERATIVE CACHING FOR ON-CHAIN
AUTHENTICATION
In this paper, we consider performing authentication on
a blockchain in an LEO satellite communication system, as
shown in Fig.1. Specifically, the LEO satellite communication
system includes a satellite constellation located at different
circles in the sky and the terrestrial communication infrastruc-
ture. The LEO satellite constellation is represented by a graph
G = (V, E), where V is the set of LEO satellites and E is the
set of inter-satellite links. Moreover, the terrestrial communi-
cation infrastructure is composed of various network devices
belonging to network operators and ground stations used to
communicate with satellites. Mobile users can communicate
with satellites when their local networks are unavailable.
The blockchain platform is deployed for user authentica-
tion. Specifically, the blockchain is a chameleon hash-based
redactable consortium blockchain that is maintained by all
participating network devices. The identity information of
legitimate users is stored on the blockchain. In particular,
all information stored on the blockchain is up to date, and
the size of the blockchain remains stable (i.e., within a
range) [8]. The ground stations are responsible for periodically
broadcasting the blockchain to the satellite constellation. When
a mobile user wants to communicate through the LEO satellite
communication system, its serving satellite needs to send an
authentication query request to the cached blockchain.
To reduce the query time, we consider to divide the
satellites into multiple clusters, each of which is used to
cache the blockchain. Denote the set of satellite clusters by
Ψ = {ψ1, ψ2, · · · , ψM} with ψm ⊆ V , ∪Mm=1ψm = V ,
ψm∩ψn = ∅, ∀m,n ∈ {1, 2, · · · ,M} and m 6= n. In a cluster
ψm, the satellites collaborate with each other to cache the
copy of the blockchain, i.e., a satellite caches partial blocks.
Moreover, we consider to synchronize the blockchain to the
satellites in a cluster by delivering the blockchain from a
ground station to a selected satellite, called a routing node,
which can communicate with all other satellites in the cluster.
We consider employing consistent hashing [9] to perform
the cooperative caching in a cluster. Specifically, the index of
a block in the blockchain is represented by a < key, value >
pair, where the key is the unique identifier of the block
computed by hashing the block’s head, and the value is the
information included in the block. LEO satellites in each
cluster are sorted to form a hash-ring overlay according to
their identifiers. A satellite’s identifier is the combination of
hashing its orbit number and its unique information (e.g.,
serial number, IP address) separately to reduce the mismatch
between the overlay network and the physical network. Given
a block, the hash value of its key is computed, and the block
Base 
Station
Ground 
Station
Routing 
node
Routing 
node
Routing 
node
Routing 
node
Blockchain consensus
Caching 
Cluster 1
Cluster 2
Cluster 3
Cluster 4
P2P LinkWireless Link Communication Link Inter-satellite Link
BlocksBlocksRedactable BlockchainRedactable BlockchainBlockchain ServerBlockchain Server
P2P LinkWireless Link Communication Link Inter-satellite Link
BlocksRedactable BlockchainBlockchain Server
Base 
Station
Base 
Station
Fig. 1: An illustrative example of the considered LEO satellite
communication system.
is cached at the first satellite whose identifier is equal to or
follows the hash value in the identifier space. Moreover, each
satellite maintains a routing table that records the mapping
between satellites’ identifiers and IP addresses in the same
cluster. When a mobile user initiates an authentication request
that is received by satellite i ∈ ψm, the satellite first conducts
the hashing operation on the block’s key included in the
request to find out the satellite that has cached the user’s
information. If satellite i itself has the block locally, the
satellite performs user authentication, otherwise sends a query
to the corresponding satellite in the cluster.
III. THE DELAY-AWARE CLUSTERING SCHEME FOR
COOPERATIVE CACHING
A. The Delay Analysis of the Cooperative Caching Scheme
In this paper, we consider the delay-aware cooperative
caching for on-chain authentication in LEO satellite communi-
cation systems. The delay of cooperative caching is from two
folds: 1) the query delay introduced due to the hash operation
and information sharing between two satellites in a cluster, and
2) the synchronization delay from the ground station to routing
nodes. Note that compared to terrestrial networks, the delay
in LEO satellite communication systems is very serious due
to the long distance between two satellites. In what follows,
we describe such two types of delay, respectively.
1) Query Delay: The query delay is composed of the
transmission delay, the queuing delay, the processing time
at intermediate satellites, and the propagation delay of inter-
satellite links. We represent the size of a message by SR.
Hence, the transmission delay from satellite i to satellite j is
T tranij =
∑
u∈Pij ,u6=j SR/ru, where Pij is the shortest path
from satellite i to satellite j, u is an intermediate satellite
within Pij , and ru is the transmission rate at u.
To find the queuing delay at an intermediate satellite, we
adopt a classic M/M/1 queuing model. Denote by λu and µu
the arrival rate of messages at u and the processing rate of
3059Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:33:19 UTC from IEEE Xplore.  Restrictions apply. 
u, respectively. By employing Little’s law, the sojourn time
(i.e., the sum of both queuing time and processing time) that
a message from satellites i to j experiences at intermediate
satellites can be given by T sojij =
∑
u∈Pij ,u6=j
1
µu−λu .
Then, we find the propagation delay between two neighbor
satellites. Assume all satellites locate at some positions of
circles. Given two satellites u and v, if (u, v) ∈ E , we say
they are neighbors. The distance between u and v can then
be calculated by dist(u, v) = ||φu − φv||2, where φu and φv
are earth-centered earth-fixed coordinates of satellite u and v,
respectively, and || · ||2 is used to find the Euclidean distance.
Denote c as the speed of light. The propagation delay between
two satellites i and j is Lij =
∑
(u,v)∈Pij dist(u, v)/c, where
u, v are two neighbor satellites in the shortest path Pij .
As a result, the query delay for satellite i ∈ ψm is
T qi =
∑
j∈ψm ρj(T
tran
ij +T sojij +T tranji +T sojji + 2Lij),where
ρj is the probability that the information required by satellite
i is cached at satellite j. Consider a satellite i with available
storage Si for caching the redactable blockchain, and the size
of a block within the blockchain is Spbc. ρj is calculated
by ρj =
bSj/Spbcc∑
j∈ψmbSj/Spbcc
, where bSj/Spbcc is the maximum
number of blocks that a j can cache. Then, the average query
delay for any satellite in a cluster ψm is T qψm =
∑
i∈ψm πiT
q
i ,
where πi is the probability that the query is initiated by
satellite i. Denote by ai and aψm the number of authentication
requests received by satellite i per second and the quantity of
all authentication requests in cluster ψm, respectively. πi can
be calculated by πi = ai
aψm
= ai∑
j∈ψm aj
. As a result, the
average query delay in all clusters is
T qΨ =
∑
ψm∈Ψ
aψm∑
ψm∈Ψ aψm
T qψm . (1)
2) Synchronization Delay: The synchronization delay is
mainly originated from propagating blocks from the ground
station to routing nodes of the LEO satellite constellation. A
routing node Hm in cluster ψm is chosen as the satellite closest
to the cluster center. Thus, we can find the routing node Hm
by
Hm = arg min
i∈ψm
{dist(φi,
1
N c
m
∑
j∈ψm
φj)}. (2)
Then, the synchronization delay can be obtained by
T syngΨ = Lgξ + maxψm∈Ψ LHξHm , (3)
where Hξ is the routing node of cluster ψξ that covers the
ground station. Lgξ is the propagation time for delivering
blocks from the ground station to the routing node Hξ, which
is a constant due to the constant satellite-terrestrial distance.
Considering the continuous movement of LEO satellites, the
routing node Hξ also changes dynamically. Thus, the syn-
chronization delay is mainly determined by the maximum
propagation delay among routing nodes. As a result, (3) can
be rewritten as T synΨ = maxψm,ψn∈Ψ LHmHn .
B. Coalition Formation Game Model
In this paper, we consider querying authentication informa-
tion on a blockchain whose blocks are cached at satellites
belonging to a cluster. To guarantee enough caching storage
provided by satellites in the cluster to store the blockchain,
we have ∑
i∈ψm
bSi/Spbcc ≥ Nbc, (4)
for ψm ∈ Ψ, where Nbc is the number of blocks when the
redactable blockchain is stable. On the other hand, we also
need to ensure the satellites in a cluster are connected, in order
to guarantee the success of any authentication query. Hence,
we define a binary variable C(ψm) to indicate the connectivity
of satellites in a cluster. If all satellites in a cluster ψm ∈ Ψ
are connected, we have
C(ψm) = 1, (5)
To find the clusters within the LEO satellite communication
system, we employ the coalition game theory [10], [11] to
model the problem. Specifically, a cluster is a coalition with a
number of satellites. The objective of forming coalitions is to
minimize both the average query delay and the synchronization
delay under constraints (4) and (5). Therefore, we formulate
the clustering problem by a coalition game Ω = {V,Ψ,U},
where V is the set of players (i.e., the satellites), Ψ is the
set of coalitions, and U is the set of values achieved by all
coalitions.
Definition 1: The value u(ψm) of a coalition ψm is based
on the revenue r(ψm) and the cost c(ψm). The revenue r(ψm)
quantifies the worth of a coalition, while the cost c(ψm)
indicates the cooperation cost of satellites in a coalition.
r(ψm) is defined as follows:
r(ψm) =
{
0, ψm = ∅
αT qψ0
− (
αaψmT
q
ψm∑M
i=1 aψi
+ β max
ψn∈Ψ
LHmHn), else,
(6)
for ψm, where α and β are weighting factors with α+β = 1,
as well as ψ0 = V . c(ψm) is also defined as follows:
c(ψm) =
{
0, if (4) and (5) are satisfied,
+∞, else.
(7)
Then, we can find the value u(ψm) by
u(ψm) = r(ψm)− c(ψm)
=
{
r(ψm), if (4) and (5) are satisfied,
−∞, else.
(8)
Definition 2: A switch operation σk,`(P) is defined as:
satellites P transfer from their current coalition ψk ∈ Ψ to
another coalition ψ` ∈ Ψ ∪ {∅}, i.e., σk,`(P) : ψk 7→ ψk \ P ,
and ψ` 7→ ψk ∪ P .
If ψ` = ∅, σk,`(P) is noted as σk,∅(P), which means
satellites P will leave ψk and form a new coalition. If P = ψk,
σk,`(P) will result in the merge of coalitions ψk and ψ`.
Definition 3: For a switch operation σk,`(P), the switch
gain is defined as: g(σk,`(P)) = u(ψk \ P) + u(ψ` ∪ P) −
u(ψk)− u(ψ`).
When there are multiple switching options, satellites P will
choose its preferred one.
3060Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:33:19 UTC from IEEE Xplore.  Restrictions apply. 
Definition 4: The preference < for satellites P between two
switch operations σk,`(P) and σk′,`′(P) is defined as:
σk,`(P) < σk′,`′(P)⇔ g(σk,`(P)) ≥ g(σk′,`′(P)). (9)
We also show the stability of a coalition partition by using
Nash-stability [12] that is defined as follows.
Definition 5: A coalition partition Ψ = {ψ1, ψ2, · · · , ψM}
is Nash-stable if ∀ψk ∈ Ψ, ∀ψ` ∈ Ψ∪∅, ∀i ∈ ψk, σk,`({i}) ≤
0.
When a coalition partition is Nash-stable, no satellite is
willing to leave its current cluster to join a new one.
C. A Distributed Delay-Aware Coalition Formation Algorithm
In this paper, we design DAC to find the clusters efficiently.
Specifically, we let each satellite execute the designed coalition
forming procedure locally. To be more specific, a satellite first
computes its switch gain and then determines whether a switch
operation is executed or not. This process will continue until
no satellite can obtain a better switch gain, i.e., it reaches a
Nash-stable coalition partition.
We describe the concrete process of the designed algorithm
as follows. For sake of description, we assume a satellite
i ∈ V is in a coalition ψk, i.e., i ∈ ψk. The decision-making
process of satellite i includes three stages: it first finds the
set of satellite candidates that would leave the coalition ψk,
then selects switch operation candidates that have positive
switch gains, finally performs the best switch operation with
the largest switch gain.
Satellite candidates are chosen from satellite i’s neighbors in
coalition ψk, and we denote the set of these neighbor satellites
as S. Due to the fact that some satellites leaving coalition ψk
may make (4) and (5) unsatisfied by the new coalition ψ′k,
we select satellite candidates for switch operations based on
the following rules: 1) when coalition ψk meets (4) and (5),
satellites in set S or i are satellite candidates only if the new
coalition ψ′k can still meet (4) and (5) when these satellites
leave the coalition; and 2) when coalition ψk does not meet
the constraints, let all satellites in set S be candidate satellites.
Switch operations happen between neighbor coalitions. Note
that two coalitions are neighbors if at least one satellite in a
coalition is the neighbor of a satellite in the other coalition.
Denote by Ψk(P ) the set of all neighbor coalitions of ψk,
each of which exists at least one satellite that is the neighbor of
satellites in set P ⊆ ψk. Then, the switch operation candidates
and the best switch operation are obtained as follows.
• If coalition ψk can meet the constraints, for each set of
satellite candidates P , the gains of all switch operations
are evaluated against their neighbor coalitions. A valid
switch operation that meets g(σk,`)(P) > 0 is kept in the
set of switch operation candidates. Then, the best switch
operation with the largest gain is chosen.
• If coalition ψk cannot satisfy the constraints, the switch
gain is computed by u(ψ`∪P )−u(ψ`) since u(ψk\P ) =
u(ψk) = −∞. Then, a switch operation that has a
positive gain is added to the set of switch operation
candidates. If the set is not empty, the best switch
operation with the largest gain is selected. Otherwise,
coalition ψk is randomly merged to a neighbor coalition,
which encourages satellites to form coalitions in the early
stages.
We summarize DAC in Algorithm 1.
Algorithm 1 The designed algorithm: DAC.
// The decision process for satellite i in a coalition ψk ∈ Ψ.
1: Initialize S as all neighbors of satellite i in a coalition ψk
2: Set the candidate satellites P = ∅
3: if ψk meets (4) and (5) then
4: if ψk \ {i} meets (4) and (5) then
5: P = {i}
6: end if
7: if ψk \ S meets (4) and (5) then
8: P = S ∪ {i}
9: end if
10: else
11: P = S ∪ {i}
12: end if
13: Set the candidate set of switch operations Γ = ∅.
14: if ψk meets (4) and (5) then
15: for all P ∈ P do
16: for each neighbor coalition ψ` ∈ Ψk(P) do
17: if g(σk,`(P)) > 0 then
18: Γ = Γ ∪ σk,`(P)
19: end if
20: end for
21: end for
22: Find (P∗, ψ`∗ ) such that σk,`(P∗) < σk,`(P), ∀σk,`(P) ∈ Γ
23: Satellites P∗ joins ψ`∗ .
24: else
25: for each coaltion ψ` ∈ Ψk(P ) do
26: if u(ψ` ∪ P )− u(ψ`) > 0 then
27: Γ = Γ ∪ σk,`(P )
28: end if
29: end for
30: if Γ 6= ∅ then
31: Find ψ`∗ such that u(ψ∗
` ∪P )− u(ψ∗
` ) ≥ u(ψ` ∪P )− u(ψ`),
∀σk,`(P ) ∈ Γ
32: else
33: Choose ψ`∗ from Ψ`(P ) randomly
34: end if
35: Satellites P joins ψ`∗ .
36: end if
D. Theoretical Analysis
We analyze the convergence, stability, and complexity of
the designed algorithm in the following.
1) Convergence: For a fixed LEO satellite constellation,
starting from any initial coalition partition, DAC converges
after a number of iterations, thus leading to a final coalition
partition with several disjoint coalitions.
Proof: According to the designed algorithm, if a coalition
ψk does not satisfy the constraints, satellites in ψk will check
the switch gain to determine whether it joins a neighbor
coalition ψm. Once ψm meets the constraints, the switch
operation with the largest strictly positive gain is executed,
leading to a new coalition partition. The new coalition partition
means that this coalition partition must be able to have a better
value, which implies that the same coalition partition cannot
be visited twice. Since the number of satellites is finite, the
number of partitions is also finite. Therefore, the coalition
formation process will converge to a final coalition partition
in a finite number of iterations, which concludes the proof.�
3061Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:33:19 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: The summary of the used simulation parameters.
Description Parameters
Number of authentication requests
(ai)
3 requests/s
Number of blocks in the redactable
blockchain (Nbc)
5000 blocks
Size of each block Spbc 1 M
Delay at each intermediate satellite
(T tran
ij + T soj
ij ) or (T tran
ji + T soj
ji )
3 ms
The weighting factors α, β 0.5
2) Stability: DAC can finally reach a Nash-stable coalition
partition Ψ.
Proof: According to Definition 5, if a coalition partition is
Nash-stable, no satellite in any cluster has an incentive to do a
switch operation. Assume the final coalition partition Ψ is not
Nash-stable, then there is at least one satellite i ∈ ψk and a
neighbor cluster ψ` of the cluster ψk, such that σk,`({i}) > 0.
However, under this circumstance, satellite i will perform the
switch operation, and a new coalition partition will be formed.
It contradicts the fact that Ψ is a final coalition partition.
Therefore, the final coalition partition Ψ that DAC converged
to is Nash-stable. �
3) Complexity: Given the LEO satellite constellation G,
DAC’s computation complexity is highly related to the number
of iterations in lines 16-20 or lines 25-29 in Algorithm 1.
Assume the largest node degree of G is D(G), the complexity
is O(D(G)(D(G)− 1)) = O(D(G)2). Since the largest node
degree in LEO satellite constellations usually is 4 or 6, the
complexity is feasible.
IV. SIMULATION RESULTS AND DISCUSSION
In our simulations, we consider an LEO satellite commu-
nication system with a ground station and an LEO satellite
constellation located at the altitude of 1070 km with an
inclination of 86.4◦. Satellites are distributed evenly in several
orbits. These satellites have different storage sizes that are
randomly drawn from the range [500, 1000] M. The simulation
parameters used in simulation examples are summarized in
Table I. We implement the DAC algorithm in Python using
PyCharm. The Monte Carlo simulation method is applied, and
the simulations are conducted up to 50 times to find average
values.
A. The Performance Improvement of Our Proposed Scheme
In this simulation example, we measure the overall coalition
value, the query delay, the synchronization delay, and the
storage overhead. To show the performance, we compare our
proposed cooperative caching scheme with the clustering-by-
orbit method [13] and the one querying from the ground
directly. Besides, we change the number of satellites. To be
more specific, we consider five satellite constellation examples
with different scales, including 48 satellites (with 6 orbits), 66
satellites (with 6 orbits), 108 satellites (with 6 orbits), 156
satellites (with 12 orbits), and 192 satellites (with 12 orbits),
respectively.
Fig. 2 shows the performance improvement achieved by
the proposed scheme. Specifically, Fig. 2(a) demonstrates the
change of the overall coalition value with the increase in the
number of satellites in the LEO communication system. From
this figure, we can find that the proposed scheme can achieve
a higher overall coalition value compared with the clustering-
by-orbit method. For example, when the number of satellites
within a constellation is 156, the overall coalition value is
435.911 and 248.744 achieved by the proposed scheme and the
clustering-by-orbit method, respectively. The overall coalition
value of the one querying from the ground directly is not
shown in the figure since no coalition is formed, and the
value is −∞. Moreover, we also notice the increasing overall
coalition value along with the increase in the number of
satellites. For example, when the number of satellites is 108,
156, and 192, the overall coalition value achieved by the
proposed scheme is 275.398, 435.911, 493.701, respectively.
The reasons are that as the number of satellites increases, the
number of clusters increases, and the propagation delay among
satellites decreases.
Fig. 2(b) reveals the query delay achieved by the proposed
scheme. We can see that the proposed scheme performs the
lowest query delay compared with the other two methods. For
example, when the number of satellites is 192, the query delay
achieved by the proposed scheme, the clustering-by-orbit, and
the one querying from the ground directly is 50.997 ms, 104
ms, and 194.062 ms, respectively. Fig. 2(b) also shows that
as the number of satellites increase, the query delay achieved
by the proposed scheme gradually decreases. In contrast, the
query delay achieved by the one querying from the ground
directly increases. This observation implies that the proposed
scheme is suitable for large-scale LEO satellite communication
systems. The reason is that the proposed scheme divides satel-
lites into clusters, and the query is finished within a cluster. For
the clustering-by-orbit method, the query delay increases with
the number of satellites in each orbit. For example, the query
delay reaches 108 ms when the number of satellites is 108
(with 18 satellites in each orbit). This is because that as the
size of a cluster increases, a query needs more transmission,
processing, queuing, and propagation delay.
Fig. 2(c) demonstrates the synchronization delay achieved
by the proposed scheme. We notice that the synchronization
delay of the proposed scheme is very similar to that of the
clustering-by-orbit method. For example, when the number of
satellites is 156, the synchronization delay is 104.64 ms and
110.38 ms for the proposed and clustering-by-orbit methods,
respectively. The reason is that the synchronization delay
is mainly determined by the distribution and movement of
satellites in an LEO satellite constellation. On the other
hand, we find that the one querying from the ground has
no synchronization delay. This happens since querying from
the ground directly does not need to synchronize blocks to
satellites. It is worth noting that the synchronization process is
only performed when there are updated blocks, and the process
can be completed in advance. Thus, the synchronization delay
of the proposed scheme is acceptable.
Fig. 2(d) shows the change of satellites’ average storage
overhead with the increasing number of mobile users. We
3062Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:33:19 UTC from IEEE Xplore.  Restrictions apply. 
(a) Overall coalition value (b) Query delay (c) Synchronization delay (d) Storage Overhead
Fig. 2: The performance improvement of the proposed scheme.
(a) The designed DAC. (b) K-means algorithm
Fig. 3: The clustering performance achieved by DAC when the
number of satellites is 192.
assume that each block contains the information of 5000
mobile users. From Fig. 2(d), we can see that within the
satellite constellation, the storage overhead of a satellite is
between 500 MB and 600 MB as the number of users
increases. The reason is that the different blockchain size leads
to a different number of clusters to ensure the low query and
synchronization delay. The smaller size of the blockchain, the
more clusters, and thus the more copies of the blockchain
stored on the satellite constellation. On the other hand, the
storage overhead remains stable with the increasing number
of satellites in a satellite constellation, thus revealing the good
scalability of our designed scheme.
B. The Performance of the Designed DAC
Fig. 3 shows the clustering performance achieved by DAC
and a popular K-means algorithm when the number of satel-
lites in a constellation is 192. Specifically, from Fig. 3(a),
we can find that satellites in an orbit or different orbits are
composed of a cluster. We can also observe from Fig. 3(b)
that satellites in proximity form a cluster. This algorithm has
the drawback that satellites in a cluster cannot be connected
or meet storage requirements. This is because DAC needs to
consider satellites’ caching storage and delay, while the K-
means algorithm conducts the clustering only based on the
distance between two satellites.
V. CONCLUSION
In this paper, we have investigated the problem of coop-
erative caching for user authentication on the blockchain in
LEO satellite communication systems. We propose a delay-
aware cooperative caching scheme for on-chain authentication
to minimize the query delay and the synchronization delay.
Furthermore, we formulate the cooperative caching problem as
a coalition formation game. To find the solution to the formu-
lated problem, we design a distributed delay-aware coalition
formation algorithm called DAC. Simulation results show the
performance improvement achieved by the proposed scheme,
and DAC outperforms the well-known K-means algorithm.
ACKNOWLEDGMENT
The work was supported by the National Key R&D Program
of China with grant No. 2020YFB1807901.
REFERENCES
[1] B. Di, L. Song, Y. Li, and H. V. Poor, “Ultra-dense LEO: Integration
of satellite access networks into 5G and beyond,” IEEE Wireless
Communications, vol. 26, no. 2, pp. 62–69, 2019.
[2] S. Cao, S. Dang, Y. Zhang, W. Wang, and N. Cheng, “A blockchain-
based access control and intrusion detection framework for satellite
communication systems,” Computer Communications, vol. 172, pp. 216–
225, 2021.
[3] C. Zhao, M. Shi, M. Huang, and X. Du, “Authentication scheme based
on hashchain for space-air-ground integrated network,” in ICC 2019-
2019 IEEE International Conference on Communications (ICC). IEEE,
2019, pp. 1–6.
[4] S. Seng, C. Luo, X. Li, H. Zhang, and H. Ji, “User matching on
blockchain for computation Offloading in ultra-dense wireless net-
works,” IEEE Trans. Network Science and Engineering, vol. 8, no. 2,
pp. 1167–1177, 2021.
[5] S. Wei, S. Li, P. Liu, and M. Liu, “BAVP: Blockchain-based access
verification protocol in LEO constellation using IBE keys,” Security and
Communication Networks, vol. 2018, 2018.
[6] D. Hyland-Wood, P. Robinson, R. Saltini, S. Johnson, and C. Hare,
“Methods for securing spacecraft tasking and control via an enterprise
ethereum blockchain,” in Proceedings of 37th International Communi-
cations Satellite Systems Conference (ICSSC), 2019.
[7] J. Liu, Y. Shi, Z. M. Fadlullah, and N. Kato, “Space-air-ground integrated
network: A survey,” IEEE Communications Surveys & Tutorials, vol. 20,
no. 4, pp. 2714–2741, 2018.
[8] Y. Du, H. Duan, A. Zhou, C. Wang, M. H. Au, and Q. Wang, “Enabling
secure and efficient decentralized storage auditing with blockchain,”
IEEE Transactions on Dependable and Secure Computing, 2021.
[9] D. Karger, E. Lehman, T. Leighton, R. Panigrahy, M. Levine, and
D. Lewin, “Consistent hashing and random trees: Distributed caching
protocols for relieving hot spots on the world wide web,” in Proceedings
of the twenty-ninth annual ACM symposium on Theory of computing,
1997, pp. 654–663.
[10] W. Saad, Z. Han, M. Debbah, A. Hjorungnes, and T. Basar, “Coalitional
game theory for communication networks,” IEEE Signal Processing
Magazine, vol. 26, no. 5, pp. 77–97, 2009.
[11] J. Liu, X. Zhang, R. Zhang, T. Huang, and F. R. Yu, “Reliable and low-
overhead clustering in LEO small satellite networks,” IEEE Internet of
Things Journal, 2021.
[12] A. Bogomolnaia and M. O. Jackson, “The stability of hedonic coalition
structures,” Games and Economic Behavior, vol. 38, no. 2, pp. 201–230,
2002.
[13] A. I. A. Ghafar, Á. V. Castro, and M. E. Khedr, “Satellite IoT services
using multichord peer to peer networking,” in 2019 IEEE 2nd 5G World
Forum (5GWF). IEEE, 2019, pp. 566–571.
3063Authorized licensed use limited to: CITY UNIV OF HONG KONG. Downloaded on April 15,2023 at 08:33:19 UTC from IEEE Xplore.  Restrictions apply.